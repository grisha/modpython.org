From python_eager at yahoo.com  Wed Feb  1 01:56:33 2006
From: python_eager at yahoo.com (python eager)
Date: Wed Feb  1 01:56:39 2006
Subject: [mod_python] reg delete the records
Message-ID: <20060201065633.26260.qmail@web36413.mail.mud.yahoo.com>

Hi, This my code snippet.
  I am deleting records. But the sql statment working fine. but it will not delete. i have two files. one is db_connection, and other one is PerDetailsDAO.
   
  i am creating object in PerDetailsDAO for db_connection.py
  Thereafter executing the sql statement.
  But the particular record will not deleted.
  What is the error?
  Please rectify the problem
  Thank you
   
   
  File Name : db_connection.py
   
  import cx_Oracle
class db_connection:
     def getConnection(self):
        dbconnection = cx_Oracle.connect("username", "password", "hoststring")
        cursor = dbconnection.cursor()
        cursor.arraysize = 50
        return cursor 
   
    File Name : PerDetailsDAO.py
   

  class PerDetailsDAO:
     def delete(self,pid):
        con = db_connection()
        cursor = con.getConnection()
        sql = "DELETE FROM PERSONALDETAILS WHERE PID =100"
        cursor.execute(sql)

  regards
  Python Eager
   

		
---------------------------------
Do you Yahoo!?
 With a free 1 GB, there's more in store with Yahoo! Mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060131/b76f923a/attachment.html
From deron.meranda at gmail.com  Wed Feb  1 10:45:59 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Wed Feb  1 10:46:05 2006
Subject: [mod_python] reg delete the records
In-Reply-To: <20060201065633.26260.qmail@web36413.mail.mud.yahoo.com>
References: <20060201065633.26260.qmail@web36413.mail.mud.yahoo.com>
Message-ID: <5c06fa770602010745hf85fd43n89be4339d7661deb@mail.gmail.com>

Can I really, really suggest you find a different list/group that concerns
databases, rather than the mod_python list!   Perhaps you should sign up
to the python DB-SIG group, here http://python.org/community/sigs.html

Just to humor you though, try calling db.commit()
--
Deron Meranda

From luismg at gmx.net  Wed Feb  1 11:06:37 2006
From: luismg at gmx.net (Luis M. Gonzalez)
Date: Wed Feb  1 11:06:40 2006
Subject: [mod_python] SQL question
Message-ID: <000601c62749$7ce276b0$f8dbebc9@luis>

Hi folks,

First of all, let me apologize for asking a question that is not specific to mod_python,
but I think that it could be of interest to many of you:

I wrote a script that creates authomatic administration pages for databases.
For a given database, whose name is pased as parameter to the script, a fully functional administration interface is created.
This interface allows me to insert, update or delete records in any table of the database, and all these actions are accessed through a web page with links
to each of the database's tables.

There's only one problem with it.
The script assumes that the first field of each table is a primary key, and this is necessary for performing updates on the table.
In those cases where the tables don't have a primary key, or when the primary key is composed of two fields, the update cannot be performed correctly.

The question is:
Is there any way to figure out the primary key of a table?
Perhaps through a special type of query or function?
I've been reading the mysql documentation but I couldn't find any solution, although I'm sure there might be a simple way to do it...

Any hint would be highly appreciated...
If anyone wants to check the script, I'd be glad to send it by email.

Regards,
Luis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060201/d2b00a06/attachment.html
From jpg at jgassociates.ca  Wed Feb  1 11:52:08 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Wed Feb  1 11:51:15 2006
Subject: [mod_python] SQL question
In-Reply-To: <000601c62749$7ce276b0$f8dbebc9@luis>
References: <000601c62749$7ce276b0$f8dbebc9@luis>
Message-ID: <43E0E738.5020601@jgassociates.ca>

You can include _rowid in your query and use it instead of a primary 
key. It's not likely portable, and I don't see it in the mysql docs, but 
it does work.

Jim

Luis M. Gonzalez wrote:
> Hi folks,
> 
> First of all, let me apologize for asking a question that is not specific to mod_python,
> but I think that it could be of interest to many of you:
> 
> I wrote a script that creates authomatic administration pages for databases.
> For a given database, whose name is pased as parameter to the script, a fully functional administration interface is created.
> This interface allows me to insert, update or delete records in any table of the database, and all these actions are accessed through a web page with links
> to each of the database's tables.
> 
> There's only one problem with it.
> The script assumes that the first field of each table is a primary key, and this is necessary for performing updates on the table.
> In those cases where the tables don't have a primary key, or when the primary key is composed of two fields, the update cannot be performed correctly.
> 
> The question is:
> Is there any way to figure out the primary key of a table?
> Perhaps through a special type of query or function?
> I've been reading the mysql documentation but I couldn't find any solution, although I'm sure there might be a simple way to do it...
> 
> Any hint would be highly appreciated...
> If anyone wants to check the script, I'd be glad to send it by email.
> 
> Regards,
> Luis
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From jamesp at westcoastaerospace.com  Wed Feb  1 12:00:04 2006
From: jamesp at westcoastaerospace.com (James Paige)
Date: Wed Feb  1 11:58:06 2006
Subject: [mod_python] SQL question
In-Reply-To: <000601c62749$7ce276b0$f8dbebc9@luis>
References: <000601c62749$7ce276b0$f8dbebc9@luis>
Message-ID: <43E0E914.9050700@westcoastaerospace.com>


Luis M. Gonzalez wrote:
> Hi folks,
> 
> First of all, let me apologize for asking a question that is not specific to mod_python,
> but I think that it could be of interest to many of you:
> 
> I wrote a script that creates authomatic administration pages for databases.
> For a given database, whose name is pased as parameter to the script, a fully functional administration interface is created.
> This interface allows me to insert, update or delete records in any table of the database, and all these actions are accessed through a web page with links
> to each of the database's tables.
> 
> There's only one problem with it.
> The script assumes that the first field of each table is a primary key, and this is necessary for performing updates on the table.
> In those cases where the tables don't have a primary key, or when the primary key is composed of two fields, the update cannot be performed correctly.
> 
> The question is:
> Is there any way to figure out the primary key of a table?
> Perhaps through a special type of query or function?
> I've been reading the mysql documentation but I couldn't find any solution, although I'm sure there might be a simple way to do it...
> 
> Any hint would be highly appreciated...
> If anyone wants to check the script, I'd be glad to send it by email.
> 
> Regards,
> Luis

You are really asking a database question, not a mod_python question, 
but I think what you are looking for is the SQL DESCRIBE command. Call 
.execute('DESCRIBE tablename') on a cursor, and it will give you results 
which contain information about the table, including which (if any) 
fields are keys.

Your script does sound cool, and yes, I would be interested in seeing it.

---
James Paige

From nicolas.lehuen at gmail.com  Wed Feb  1 12:00:40 2006
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Wed Feb  1 12:00:45 2006
Subject: [mod_python] SQL question
In-Reply-To: <000601c62749$7ce276b0$f8dbebc9@luis>
References: <000601c62749$7ce276b0$f8dbebc9@luis>
Message-ID: <c298f2d70602010900g93ed408l@mail.gmail.com>

There are ways, but they are all platform dependent.

- you can query the system tables of your database. Those system
tables usually contain meta-data about the user tables. Their name and
content is highly dependent on the DBMS your are using, however.

- some DBAPI implementation provide abstraction above those system
tables. For instance, mxODBC gives a few additional methods (which are
not in the DBAPI spec) to get the name of the tables, their primary
and foreign keys, etc. This is due to the ODBC API which asks their
implementors to provide an abstraction over meta-data.

What are your DBMS and DBAPI implementation ?

Regards,
Nicolas


2006/2/1, Luis M. Gonzalez <luismg@gmx.net>:
>
> Hi folks,
>
> First of all, let me apologize for asking a question that is not specific to
> mod_python,
> but I think that it could be of interest to many of you:
>
> I wrote a script that creates authomatic administration pages for databases.
> For a given database, whose name is pased as parameter to the script, a
> fully functional administration interface is created.
> This interface allows me to insert, update or delete records in any table of
> the database, and all these actions are accessed through a web page with
> links
> to each of the database's tables.
>
> There's only one problem with it.
> The script assumes that the first field of each table is a primary key, and
> this is necessary for performing updates on the table.
> In those cases where the tables don't have a primary key, or when the
> primary key is composed of two fields, the update cannot be performed
> correctly.
>
> The question is:
> Is there any way to figure out the primary key of a table?
> Perhaps through a special type of query or function?
> I've been reading the mysql documentation but I couldn't find any solution,
> although I'm sure there might be a simple way to do it...
>
> Any hint would be highly appreciated...
> If anyone wants to check the script, I'd be glad to send it by email.
>
> Regards,
> Luis
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>

From nick at dd.revealed.net  Wed Feb  1 12:09:51 2006
From: nick at dd.revealed.net (Nick)
Date: Wed Feb  1 12:10:08 2006
Subject: [mod_python] SQL question
In-Reply-To: <000601c62749$7ce276b0$f8dbebc9@luis>
References: <000601c62749$7ce276b0$f8dbebc9@luis>
Message-ID: <43E0EB5F.6070902@dd.revealed.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Unlike jdbc, the Python DB API spec has only very basic metadata
information available in the description attribute of a cursor object.
Most SQL databases have their metadata available in some way, but it's
different for almost every vendor out there.  It'd be a great
contribution if someone could make a library that implements this for
some of the most popular vendors in Python.

Nick

Luis M. Gonzalez wrote:
|
| Hi folks,
|
| First of all, let me apologize for asking a question that is not
| specific to mod_python,
| but I think that it could be of interest to many of you:
|
| I wrote a script that creates authomatic administration pages for
| databases.
| For a given database, whose name is pased as parameter to the script, a
| fully functional administration interface is created.
| This interface allows me to insert, update or delete records in any
| table of the database, and all these actions are accessed through a web
| page with links
| to each of the database's tables.
|
| There's only one problem with it.
| The script assumes that the first field of each table is a primary key,
| and this is necessary for performing updates on the table.
| In those cases where the tables don't have a primary key, or when the
| primary key is composed of two fields, the update cannot be performed
| correctly.
|
| The question is:
| Is there any way to figure out the primary key of a table?
| Perhaps through a special type of query or function?
| I've been reading the mysql documentation but I couldn't find any
| solution, although I'm sure there might be a simple way to do it...
|
| Any hint would be highly appreciated...
| If anyone wants to check the script, I'd be glad to send it by email.
|
| Regards,
| Luis
|
|
| ------------------------------------------------------------------------
|
| _______________________________________________
| Mod_python mailing list
| Mod_python@modpython.org
| http://mailman.modpython.org/mailman/listinfo/mod_python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (GNU/Linux)

iD8DBQFD4Otfv4zJ7LQ+i84RAqjGAJ4l1piJ0CMnP8DdXLHMVLi2D18XAQCg3Pv0
Yh+pZi1GzD6mzKwcvCSysFc=
=LDLg
-----END PGP SIGNATURE-----
From luismg at gmx.net  Wed Feb  1 12:23:24 2006
From: luismg at gmx.net (Luis M. Gonzalez)
Date: Wed Feb  1 12:23:27 2006
Subject: [mod_python] SQL question
Message-ID: <006f01c62754$369ad250$f8dbebc9@luis>

Thank you all for your responses!
I think Joshua Ginsberg already gave me a solution (off line) to this 
situation as folows:

    db = MySQLdb.connect(user='mysql', db='foo')
    c = db.cursor()
    c.execute('''describe address''')
    t = c.fetchall()
    t
    (('id', 'int(11)', '', 'PRI', None, 'auto_increment'), ('fn',
    'varchar(255)', 'YES', '', None, ''), ('ln', 'varchar(255)', 'YES', '',
    None, ''), ('a1', 'varchar(255)', 'YES', '', None, ''), ('a2',
    'varchar(255)', 'YES', '', None, ''), ('c', 'varchar(255)', 'YES', '',
    None, ''), ('s', 'char(2)', 'YES', '', None, ''), ('zip', 'varchar(9)',
    'YES', '', None, ''))
    >>> filter(lambda x: x[3] == 'PRI', t)[0][0]
    'id'

Nicholas and James:
I'm using MySQLdb and as far as I know, "cursor.description" gives me only a 
seven-item tuple containing name, type code, display size, internal size, 
precision, scale, and nullability.
Actually, I use it to get the three first values in my script.

James:
I'm sending you the script...

Thanks you all and, again, sorry for the question!
I imagined that the script would be of interest to somebody here...

Regards,
Luis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060201/d0d17a6f/attachment.html
From deron.meranda at gmail.com  Wed Feb  1 12:56:24 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Wed Feb  1 12:56:31 2006
Subject: [SPAM] Re: [mod_python] SQL question
In-Reply-To: <006f01c62754$369ad250$f8dbebc9@luis>
References: <006f01c62754$369ad250$f8dbebc9@luis>
Message-ID: <5c06fa770602010956x38cdd4aaj1b6f49c0c3b901c0@mail.gmail.com>

Unfortunately there is no portable way to do this--DESCRIBE is a
proprietary verb.  The official ISO standard SQL way is to query the
INFORMATION_SCHEMA pseudo-tables.  Such as

 select KU.COLUMN_NAME
   from INFORMATION_SCHEMA.KEY_COLUMN_USAGE KU
   where KU.TABLE_NAME = 'mytable'
        and KU.CONSTRAINT_NAME = 'PRIMARY'
   order by KU.ORDINAL_POSITION;

This works in the PySybase adapter (which is also used to connect
to MS SQLServer), and also MySQL 5.   See

http://dev.mysql.com/doc/refman/5.0/en/information-schema.html

But it's still not completely portable, because so many DB
vendors don't yet support the standard INFORMATION_SCHEMA.
Oracle tends to use the DESCRIBE way.  In MySQL < 5, you
have SHOW (like SHOW CREATE TABLE).

Fortunately with Python, at least part of the meta-data is
available in a standardized way using the DBAPI.

Perhaps you should check up on what the Python DB_SIG group
says, or is doing.  If it's not in the works, or rejected, perhaps
you can suggest a Pythonic standard way to query meta data.
--
Deron Meranda

From nferrier at tapsellferrier.co.uk  Wed Feb  1 17:12:41 2006
From: nferrier at tapsellferrier.co.uk (Nic Ferrier)
Date: Wed Feb  1 17:43:27 2006
Subject: [mod_python] environment settings
Message-ID: <877j8eu3s6.fsf@kanga.tapsellferrier.co.uk>

Does SetEnv apply to mod_python code?


Nic
From grahamd at dscpl.com.au  Wed Feb  1 18:02:28 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb  1 18:02:31 2006
Subject: [mod_python] environment settings
Message-ID: <1138834947.10062@dscpl.user.openhosting.com>

Nic Ferrier wrote ..
> Does SetEnv apply to mod_python code?

It does not insert it into "sys.environ" if that is what you are expecting.
The value will be found in "req.subprocess_env" though.

Graham
From fumanchu at amor.org  Wed Feb  1 18:12:39 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Wed Feb  1 18:13:44 2006
Subject: [mod_python] environment settings
Message-ID: <6949EC6CD39F97498A57E0FA55295B21014FCE98@ex9.hostedexchange.local>

Graham Dumpleton wrote:
> Nic Ferrier wrote ..
> > Does SetEnv apply to mod_python code?
> 
> It does not insert it into "sys.environ" if that is what you 
> are expecting.
> The value will be found in "req.subprocess_env" though.

But note that apache.build_cgi_env overwrites SCRIPT_NAME, for example
(re-creating it from req.uri and req.path_info). There may be other
special cases like that--the fastest way to find out is to test. ;)


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org

From grahamd at dscpl.com.au  Wed Feb  1 18:23:06 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb  1 18:23:09 2006
Subject: [mod_python] environment settings
Message-ID: <1138836186.23342@dscpl.user.openhosting.com>

Robert Brewer wrote ..
> Graham Dumpleton wrote:
> > Nic Ferrier wrote ..
> > > Does SetEnv apply to mod_python code?
> > 
> > It does not insert it into "sys.environ" if that is what you 
> > are expecting.
> > The value will be found in "req.subprocess_env" though.
> 
> But note that apache.build_cgi_env overwrites SCRIPT_NAME, for example
> (re-creating it from req.uri and req.path_info). There may be other
> special cases like that--the fastest way to find out is to test. ;)

>From memory, apache.build_cgi_env() is only relevant if you are using
mod_python.cgihandler. It doesn't come into play for normal request
handlers, mod_python.publisher or mod_python.psp.

The way that apache.build_cgi_env() sets SCRIPT_NAME is also potentially
broken. See:

  http://issues.apache.org/jira/browse/MODPYTHON-68

Graham
From terry.macdonald at dsl.pipex.com  Wed Feb  1 18:36:45 2006
From: terry.macdonald at dsl.pipex.com (Terence MacDonald)
Date: Wed Feb  1 18:36:51 2006
Subject: [mod_python] 3.2.?
In-Reply-To: <1138573632.11048@dscpl.user.openhosting.com>
References: <1138573632.11048@dscpl.user.openhosting.com>
Message-ID: <1138837005.12578.59.camel@bigmac.taumu.com>

To whomever holds the purse strings on the 3.2(.?) final release, when
is the treasure to be released?



P.S. ...And credit where credits due: I actively use mod_python and
Cheetah both personally and professionally and both groups are a model
to the Open source movement, great software, great community, great
support, great job all round.  Thankyou.

From grahamd at dscpl.com.au  Thu Feb  2 03:10:18 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb  2 03:10:31 2006
Subject: [mod_python] undefined symbol: apr_table_compress ??
In-Reply-To: <2512.83.250.136.53.1138742460.squirrel@newsquirrel.sajthotellet.com>
References: <2512.83.250.136.53.1138742460.squirrel@newsquirrel.sajthotellet.com>
Message-ID: <4C1FE008-18E1-4031-8120-2EA0686FDED2@dscpl.com.au>


On 01/02/2006, at 8:21 AM, martin@highwaytohell.net wrote:

> I've downloaded mod_python 3.2.5b (Beta) and compiled it using
>
> ./configure --with-apxs=/usr/sbin/apxs --with-python=/usr/local/bin/ 
> python2.3
> make
> make install
>
> just as the documentation says. But when I add LoadModule... to my
> httpd.conf and restart Apache 2.0.46 I get the error message
>
> Cannot load /etc/httpd/modules/mod_python.so into server:
> /etc/httpd/modules/mod_python.so: undefined symbol: apr_table_compress
>
> any ideas on how to fix this??
>
> Regards
> Martin

Martin, did you ever sort this out? I appreciate no help was  
forthcoming on
the list. It doesn't seem to be anything we have specifically seen.  
Thus, bar
suggesting a rebuild of Apache and mod_python from scratch, probably
nothing else anyone could think of to suggest.

Graham
From nlv11281 at natlab.research.philips.com  Thu Feb  2 03:30:27 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Thu Feb  2 03:30:55 2006
Subject: [mod_python] SQL question
In-Reply-To: <000601c62749$7ce276b0$f8dbebc9@luis>
References: <000601c62749$7ce276b0$f8dbebc9@luis>
Message-ID: <43E1C323.4010308@natlab.research.philips.com>

> The script assumes that the first field of each table is a primary key, 
> and this is necessary for performing updates on the table.
> In those cases where the tables don't have a primary key, or when the 
> primary key is composed of two fields, the update cannot be performed 
> correctly.

Another solution is to use an update-where-all scheme (like Delphi uses 
for some table queries). This also helps detect race conditions (other 
people editing the same records) as a side effect. (unrelated to your 
question: I typically use the update-where-changed system so that 
concurrent edits are possible as long as they do not touch the same 
entries. It also gives you the opportunity to present the changes 
someone else made, and have the user decide on how to merge them.)

So if you have a row where "SELECT * FROM customer" returns (51, "Mike", 
"MiLo Software"), and the user edits "Mike" into "Graham", the query to 
be run in update-where-all mode is:

c.execute("UPDATE customer SET owner=%s WHERE customer_id=%s AND 
owner=%s AND name=%s", ("Graham", 51, "Mike", "MiLo Software"))

This will work regardless of the DBMS used, and whether the table has a 
primary key at all (rows should still be unique though...)

Mike.

From deron.meranda at gmail.com  Thu Feb  2 17:30:52 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Thu Feb  2 17:30:58 2006
Subject: [mod_python] Enhancements for better content negotiation
Message-ID: <5c06fa770602021430v743614c4w888625df17413fbf@mail.gmail.com>

I have a bunch of code I was thinking of contributing to mod_python,
but would like some opinions before doing so (because I don't
know if this is the best place)...

Basically I wrote some utility functions which can be used to
assist with content negotiation; such as parsing the various
Accept-* headers *correctly*.  I am in fact using these in production
systems now because I do quite a bit of content negotiation.

I often see a bunch of example code (or even production code)
which does something like,

  if req.headers_in['Accept'].find('image/xyz') >= 0:

That is really broken per RFC 2616 (HTTP 1.1)!   It totally ignores the
quality factors and other rules (see sections 14.1 - 14.4).  For example
if the Accept header sent was "image/xyz;q=0", then in fact this
is the user agent saying to NEVER send image/xyz!

I think this sloppy way of testing is because the syntax and rules
for accept headers is actually fairly complex.  So this is a perfect
opportunity for reusable functions which assist with this (much like
the apache.parse_qs function).

Essentially I have functions that:

 1. Parse and sort any Accept-* header according to the RFC's BNF
 2. Negotiate the best content type
 3. Negotiate the best language
 4. Negotiate the best encoding
 5. Negotiate the best charset

It also knows how to handle wildcards, hierarchical language tags,
charset name aliases, etc.  And you can tell it to ignore the "super"
wildcards like */* too.

As a quick example you can do something like

  acc = req.headers_in['Accept']
  ct = acceptable_content_type( acc, ['text/html','application/xhtml+xml'] )

and it will tell you which of the two formats the browser supports/prefers,
if either, according to all the complex rules in the RFC.

I have some preliminary questions:

* Is this something that seems useful to others?

* Is mod_python util a preferable place to consider putting these,
or maybe this should perhaps go to something larger like
WSGI or some other Web-SIG project?
--
Deron Meranda

From martin at highwaytohell.net  Fri Feb  3 01:27:00 2006
From: martin at highwaytohell.net (martin@highwaytohell.net)
Date: Fri Feb  3 01:36:25 2006
Subject: [mod_python] undefined symbol: apr_table_compress ??
In-Reply-To: <4C1FE008-18E1-4031-8120-2EA0686FDED2@dscpl.com.au>
References: <2512.83.250.136.53.1138742460.squirrel@newsquirrel.sajthotellet.com>
	<4C1FE008-18E1-4031-8120-2EA0686FDED2@dscpl.com.au>
Message-ID: <5394.194.216.51.39.1138948020.squirrel@newsquirrel.sajthotellet.com>

>
> On 01/02/2006, at 8:21 AM, martin@highwaytohell.net wrote:
>
>> I've downloaded mod_python 3.2.5b (Beta) and compiled it using
>>
>> ./configure --with-apxs=/usr/sbin/apxs --with-python=/usr/local/bin/
>> python2.3
>> make
>> make install
>>
>> just as the documentation says. But when I add LoadModule... to my
>> httpd.conf and restart Apache 2.0.46 I get the error message
>>
>> Cannot load /etc/httpd/modules/mod_python.so into server:
>> /etc/httpd/modules/mod_python.so: undefined symbol: apr_table_compress
>>
>> any ideas on how to fix this??
>>
>> Regards
>> Martin
>
> Martin, did you ever sort this out? I appreciate no help was
> forthcoming on
> the list. It doesn't seem to be anything we have specifically seen.
> Thus, bar
> suggesting a rebuild of Apache and mod_python from scratch, probably
> nothing else anyone could think of to suggest.
>
> Graham
>

Chaging to version 3.1.4 seems to have worked. The application still won't
start. But I think that's related to the program and not mod_python.

.M

From grahamd at dscpl.com.au  Fri Feb  3 04:32:34 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb  3 04:32:58 2006
Subject: [mod_python] Module importer issues list updated.
Message-ID: <4a855058e2bbe2ac0e1e68dfacfee81b@dscpl.com.au>

In preparation of mod_python 3.2.X (final) being not too far away, I
have updated my article on module importer issues in mod_python with
references to changes in 3.2. The two articles related to the module
importer, the first being background and the second being the list of
issues, can be found at:

   http://www.dscpl.com.au/articles/modpython-002.html
   http://www.dscpl.com.au/articles/modpython-003.html

Graham

From python_eager at yahoo.com  Fri Feb  3 05:15:54 2006
From: python_eager at yahoo.com (python eager)
Date: Fri Feb  3 05:16:06 2006
Subject: [mod_python] How to create package structure?
Message-ID: <20060203101554.52411.qmail@web36415.mail.mud.yahoo.com>

Hi
     In the python program how to create package structure. i am trying but it gives error. please give one example of structure. This will be very help ful for my project.
   
  Please help me
   
  Bye
  Thank you
  Python Eager

		
---------------------------------
Brings words and photos together (easily) with
 PhotoMail  - it's free and works with Yahoo! Mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060203/12a1f2f0/attachment.html
From grahamd at dscpl.com.au  Fri Feb  3 05:47:03 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb  3 05:47:15 2006
Subject: [mod_python] How to create package structure?
In-Reply-To: <20060203101554.52411.qmail@web36415.mail.mud.yahoo.com>
References: <20060203101554.52411.qmail@web36415.mail.mud.yahoo.com>
Message-ID: <40e6650a3657947ee6855503d941a98a@dscpl.com.au>


On 03/02/2006, at 9:15 PM, python eager wrote:

> Hi
> ?? In the python program how to create package structure. i am trying 
> but it gives error. please give one example of structure. This will be 
> very help ful for my project.
> ?
> Please help me
> ?
> Bye
> Thank you
> Python Eager

Sorry to be quite blunt, but how many times do we have to tell you that
this mailing list is not for general Python programming questions, or
even questions about database programming? For such general questions,
you should be posting to the comp.lang.python newsgroup. You can do this
via your web browser at:

   http://groups.google.com/group/comp.lang.python?hl=en

Reminding you again, this mailing list is for questions related to
mod_python, the embedded Python module for Apache, nothing else.

Now, I shouldn't keep answering you as it just seems to keep encouraging
you to ask more off topic questions, but have you tried looking at the
documentation on the main Python web site:

   http://www.python.org

If you type in "packages" to the search box on that site, one of the
top links will give you want you need.

   http://www.python.org/doc/essays/packages.html

Once again, I also suggest you read:

   http://www.catb.org/~esr/faqs/smart-questions.html

Especially pay attention to the section:

   http://www.catb.org/~esr/faqs/smart-questions.html#forum

Graham


From mmokrejs at ribosome.natur.cuni.cz  Fri Feb  3 06:07:40 2006
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Fri Feb  3 06:07:44 2006
Subject: [mod_python] Module importer issues list updated.
In-Reply-To: <4a855058e2bbe2ac0e1e68dfacfee81b@dscpl.com.au>
References: <4a855058e2bbe2ac0e1e68dfacfee81b@dscpl.com.au>
Message-ID: <43E3397C.6070100@ribosome.natur.cuni.cz>

Hi Graham,

Graham Dumpleton wrote:
> In preparation of mod_python 3.2.X (final) being not too far away, I
> have updated my article on module importer issues in mod_python with
> references to changes in 3.2. The two articles related to the module
> importer, the first being background and the second being the list of
> issues, can be found at:
> 
>   http://www.dscpl.com.au/articles/modpython-002.html

After reading "Auto Reload Mechanism" section and especially 
<quote>
If the importing of the module by an explicit call to the "import_module()"
function is performed at global scope within a module, whether the child
module has changed and whether it needs to be reimported, is only
determined at the time that the parent module is first imported and
when the parent module is subsequently reimported.
</quote>

I am not certain what happens when using normal python import()
function and I for example changed only some of those child modules.
Will they be reloaded? It is probbly answered by the first paragraph in
the section cited above, but am not certain.

I think it would be nice if you'd include what is usually the IO penalty
for all those stat() calls to determine whether a module has changed
or not. Maybe I'd happily use in some cases
PythonAutoReload false
in my .htaccess.


>   http://www.dscpl.com.au/articles/modpython-003.html

Have to read this now. ;-)
M.
From deron.meranda at gmail.com  Fri Feb  3 10:44:56 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Fri Feb  3 10:45:11 2006
Subject: [mod_python] Module importer issues list updated.
In-Reply-To: <43E3397C.6070100@ribosome.natur.cuni.cz>
References: <4a855058e2bbe2ac0e1e68dfacfee81b@dscpl.com.au>
	<43E3397C.6070100@ribosome.natur.cuni.cz>
Message-ID: <5c06fa770602030744md482763m8280c55044d8d2c9@mail.gmail.com>

> I think it would be nice if you'd include what is usually the IO penalty
> for all those stat() calls to determine whether a module has changed
> or not.

I don't know about Windows, but under a wide variety of Unixes,
including Linux, the stat call can be one of the cheapest to make,
as long as the file is not on a network mounted filesystem (NFS).

For example on my Intel Linux PC,

1,000,000 stat calls in C:  2 seconds
1,000,000 stat calls in Python: 9 seconds

The reason it's so fast is, except for the first time, the disk is
never accessed.  It's all cached in kernel memory.  And the kernel
knows when the file is updated for local filesystems.

You don't need to worry about time.time() or datetime.datetime.utcnow()
and such.  Those are nearly about 20% faster that stat.


However the one big caveat is that for NFS mounted filesystems
the time for stat can go up by a factor of 100 times or more, since
each call involves an RPC across the network.

Anybody care to check the timing under Windows?
--
Deron Meranda

From vsi at ebi.ac.uk  Fri Feb  3 11:06:10 2006
From: vsi at ebi.ac.uk (Ville Silventoinen)
Date: Fri Feb  3 11:06:15 2006
Subject: [mod_python] Problem with mod_python 3.1.4 and PHP 4.3.4
Message-ID: <Pine.LNX.4.61.0602031541060.28231@wolf.ebi.ac.uk>

Hi,

I have quite a strange problem with mod_python 3.1.4. I'm using Python 2.4.1 subprocess module to execute simple command, something like:

def handler(req):
     req.content_type = "text/plain"

     ofh = tempfile.TemporaryFile()
     efh = tempfile.TemporaryFile()
     finish = time() + 30

     p = subprocess.Popen("ps -fu w3nobody",
                          bufsize=1,
                          stdout=ofh,
                          stderr=efh,
                          shell=True,
                          close_fds=True)

     while p.poll() == None and time() < finish:
         sleep(0.1)

     result = p.poll()
     if result == None:
         req.write("Command did not finish in 30 seconds!")
     else:
         # write output, close filehandles ...
     return apache.OK


Normally this works fine. But our web server runs also a Wiki, which uses 
libphp4.so. As soon as someone uses the Wiki, the above mod_python module 
doesn't work, i.e., the command never finishes in 30 seconds. If I 
increase the timeout to 20 minutes, the HTTP request terminates after a 
while with "The document contains no data". I also tried without 
subprocess (as in Python Cookbook chapter 9.12, which uses popen2, fcntl 
and select), same problem.

I've overcome the problem by not using the subprocess.Popen.poll() method. 
If I use subprocess.Popen.wait(), it works every time, with or without PHP.
This doesn't allow me to use a timeout with commands, however, which 
sometimes can get stuck.

I've "googled" couple of days. I found this bug in Python related to 
threading and subprocess module:

http://mail.python.org/pipermail/python-bugs-list/2006-January/031663.html

I also found the problem with MySQL, mod_python and PHP:

http://www.modpython.org/FAQ/faqw.py?req=edit&file=faq02.013.htp

But I don't see how this could affect subprocess module and I don't use 
MySQL with Python. I also couldn't find any references to conflicting 
libraries between mod_python, Apache, Python or libphp4.so. I've fixed a 
problem earlier related to expat, so the Apache is using the same version 
as Python (I couldn't tell if PHP uses expat).

Our PHP is version 4.3.4, Apache is 2.0.54 running on Linux 2.4.21-27.0.1.ELsmp (CentOS release 3.4).

Any advice would be most welcome! mod_python has otherwise been working great!

Best regards,
Ville


From nicolas.lehuen at gmail.com  Fri Feb  3 12:20:45 2006
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Fri Feb  3 12:20:51 2006
Subject: [mod_python] Module importer issues list updated.
In-Reply-To: <5c06fa770602030744md482763m8280c55044d8d2c9@mail.gmail.com>
References: <4a855058e2bbe2ac0e1e68dfacfee81b@dscpl.com.au>
	<43E3397C.6070100@ribosome.natur.cuni.cz>
	<5c06fa770602030744md482763m8280c55044d8d2c9@mail.gmail.com>
Message-ID: <c298f2d70602030920s1abd436bn@mail.gmail.com>

D:\projets\mod_python\test>python -m timeit -n 100000 -s "import os"
"os.stat('.')"
100000 loops, best of 3: 46 usec per loop

Regards,
Nicolas

2006/2/3, Deron Meranda <deron.meranda@gmail.com>:
> > I think it would be nice if you'd include what is usually the IO penalty
> > for all those stat() calls to determine whether a module has changed
> > or not.
>
> I don't know about Windows, but under a wide variety of Unixes,
> including Linux, the stat call can be one of the cheapest to make,
> as long as the file is not on a network mounted filesystem (NFS).
>
> For example on my Intel Linux PC,
>
> 1,000,000 stat calls in C:  2 seconds
> 1,000,000 stat calls in Python: 9 seconds
>
> The reason it's so fast is, except for the first time, the disk is
> never accessed.  It's all cached in kernel memory.  And the kernel
> knows when the file is updated for local filesystems.
>
> You don't need to worry about time.time() or datetime.datetime.utcnow()
> and such.  Those are nearly about 20% faster that stat.
>
>
> However the one big caveat is that for NFS mounted filesystems
> the time for stat can go up by a factor of 100 times or more, since
> each call involves an RPC across the network.
>
> Anybody care to check the timing under Windows?
> --
> Deron Meranda
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From grahamd at dscpl.com.au  Fri Feb  3 16:54:23 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb  3 16:54:37 2006
Subject: [mod_python] Module importer issues list updated.
In-Reply-To: <43E3397C.6070100@ribosome.natur.cuni.cz>
References: <4a855058e2bbe2ac0e1e68dfacfee81b@dscpl.com.au>
	<43E3397C.6070100@ribosome.natur.cuni.cz>
Message-ID: <b716fb875410d225e0e386d598e420b6@dscpl.com.au>


On 03/02/2006, at 10:07 PM, Martin MOKREJ? wrote:

> After reading "Auto Reload Mechanism" section and especially
> <quote>
> If the importing of the module by an explicit call to the 
> "import_module()"
> function is performed at global scope within a module, whether the 
> child
> module has changed and whether it needs to be reimported, is only
> determined at the time that the parent module is first imported and
> when the parent module is subsequently reimported.
> </quote>
>
> I am not certain what happens when using normal python import()
> function and I for example changed only some of those child modules.
> Will they be reloaded? It is probbly answered by the first paragraph in
> the section cited above, but am not certain.

The way things work at the moment is that if you import a module using
just the "import" statement, it will never be reloaded. This is even if
the parent module that it was imported in was reloaded. This is standard
for Python.

> I think it would be nice if you'd include what is usually the IO 
> penalty
> for all those stat() calls to determine whether a module has changed
> or not.

I am going to quote something from documentation I am writing on how the
replacement module loader will work:

   First and foremost any replacement system should strive for 
correctness
   and robustness. Inevitably this may mean some reduction in 
performance.
   Tuning of the system to improve the performance should be seen as a
   secondary task, only carried out after the functionality of the system
   is found to be correct and adequate to replace the existing system.

I have this big note in the documentation because part of the reason 
that
I gave up discussing a new system on the mailing list in the past is
because some wanted to focus more on their concerns about performance
over whether the system worked correctly.

Can we please not go down that avenue at the moment and focus on getting
something that works first. :-)

Graham

From mmokrejs at ribosome.natur.cuni.cz  Fri Feb  3 17:03:28 2006
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Fri Feb  3 17:03:25 2006
Subject: [mod_python] Module importer issues list updated.
In-Reply-To: <b716fb875410d225e0e386d598e420b6@dscpl.com.au>
References: <4a855058e2bbe2ac0e1e68dfacfee81b@dscpl.com.au>
	<43E3397C.6070100@ribosome.natur.cuni.cz>
	<b716fb875410d225e0e386d598e420b6@dscpl.com.au>
Message-ID: <43E3D330.1030204@ribosome.natur.cuni.cz>



Graham Dumpleton wrote:
> 
> On 03/02/2006, at 10:07 PM, Martin MOKREJ? wrote:
> 
>> After reading "Auto Reload Mechanism" section and especially
>> <quote>
>> If the importing of the module by an explicit call to the
>> "import_module()"
>> function is performed at global scope within a module, whether the child
>> module has changed and whether it needs to be reimported, is only
>> determined at the time that the parent module is first imported and
>> when the parent module is subsequently reimported.
>> </quote>
>>
>> I am not certain what happens when using normal python import()
>> function and I for example changed only some of those child modules.
>> Will they be reloaded? It is probbly answered by the first paragraph in
>> the section cited above, but am not certain.
> 
> 
> The way things work at the moment is that if you import a module using
> just the "import" statement, it will never be reloaded. This is even if
> the parent module that it was imported in was reloaded. This is standard
> for Python.

Please, put this into the document as well. I had the impression I should
revert from the "apache.import_module()" to the builtin "import" function.
Good to hear that will never work. ;-) So now I know the only fix for me is
always to touch(1) all the parent modules if a child has been modified.
Fortunately, it is only one file extra in my case.

> 
>> I think it would be nice if you'd include what is usually the IO penalty
>> for all those stat() calls to determine whether a module has changed
>> or not.
> 
> 
> I am going to quote something from documentation I am writing on how the
> replacement module loader will work:
> 
>   First and foremost any replacement system should strive for correctness
>   and robustness. Inevitably this may mean some reduction in performance.
>   Tuning of the system to improve the performance should be seen as a
>   secondary task, only carried out after the functionality of the system
>   is found to be correct and adequate to replace the existing system.
> 
> I have this big note in the documentation because part of the reason that
> I gave up discussing a new system on the mailing list in the past is
> because some wanted to focus more on their concerns about performance
> over whether the system worked correctly.
> 
> Can we please not go down that avenue at the moment and focus on getting
> something that works first. :-)

Oh sure, I have no problem with that. ;)

martin
From tomw at bnl.gov  Fri Feb  3 17:18:18 2006
From: tomw at bnl.gov (Tomasz Wlodek)
Date: Fri Feb  3 17:18:21 2006
Subject: [mod_python] mod_ssl variables are not passed to mod_python auth
	handler
Message-ID: <Pine.GSO.4.58.0602031639500.17606@rcf2.rhic.bnl.gov>

Hello mod_python experts,


I would like to use mod_python to force Apache to authenticate users based
on their user certificate. I have encountered a problem: SSL environment
variables are not passed by Apache to mod_python authentication handler.

Here is how the whole thing should work.

In Apache conf files I tell it to load mod_ssl module

LoadModule ssl_module           /usr/lib/httpd/modules/mod_ssl.so

then I turn the user verification option in SSL:

SSLEngine               on
SSLCertificateFile      /etc/...
SSLCertificateKeyFile   /etc/...
SSLCACertificatePath    /etc/....
SSLVerifyClient         optional
SSLVerifyDepth          10
SSLOptions              +ExportCertData +StdEnvVars

I restart Apache and I load a cgi script which dumps the available
environment variables. I can see that variables SSL_CLIENT_S_DN and
SSL_CLIENT_VERIFY variables are set or not set depending on whether I have
valid certificate in my browser or not. Halleluiah! The certificate based
authentication works in cgi scripts.

Now I would like to pass the work of deciding whether user was
authenticated or not from cgi script to mod_python authentication handler.
The idea is: mod_python authentication handler will check if the
SSL_CLIENT_S_DN variable was defined by SSL. If yes - return apache.OK. If
not return apache.HTTP_FORBIDDEN.

Sounds simple. So I set to work. I define mod-python authentication
handler:

<Directory /var/www/gridsite/cgi>
    AddHandler mod_python .py
    PythonHandler myhandler
    PythonAuthenHandler myhandler
    PythonDebug on
    PythonPath "sys.path + ['/root/mod_python_handlers']"
    AuthType Basic
    AuthName "Restricted Area"
    require valid-user
</Directory>

then I create the actual python handler in file
/root/mod_python_handlers/myhandler.py

from mod_python import apache

def authenhandler(req):
    # let us make sure that environment variables are loaded
    req.add_common_vars()
    # we can dump the list of known environment variables, for debugging
    #for line in req.subprocess_env.keys():
    #    req.write(line+"<br>\n")

    # now comes the real work: if SSL verified the certificate, then
    # SSL_CLIENT_S_DN variable should be set and the user can be approved
    if req.subprocess_env.has_key('SSL_CLIENT_S_DN'):
        return apache.OK
    else:
        return apache.HTTP_FORBIDDEN

That is all. Now I run the thing. It turns out that the SSL environment
variables are not visible from /root/mod_python_handlers/myhandler.py  and
the handler always returns apache.HTTP_FORBIDDEN !

I can see those variables in the cgi scripts, but not in python
authentication handler.

Does anyone has an idea why? Do I need to call some function to load them?

If I modify the handler to be:

def authenhandler(req):
	return apache.OK

so that everyone gets approved, and then display the content of
SSL_CLIENT_S_DN from cgi scripts then the variable is clearly there!

Tomasz Wlodek
From grahamd at dscpl.com.au  Fri Feb  3 18:06:33 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb  3 18:06:46 2006
Subject: [mod_python] mod_ssl variables are not passed to mod_python auth
	handler
In-Reply-To: <Pine.GSO.4.58.0602031639500.17606@rcf2.rhic.bnl.gov>
References: <Pine.GSO.4.58.0602031639500.17606@rcf2.rhic.bnl.gov>
Message-ID: <1430648d555b4bccee15457db7e486a1@dscpl.com.au>

SSL environment variables are not populated into req.subprocess_env
until the last stage of execution of the fixuphandler phase. This is a
pain as you have found because they aren't available during
authenhandler, only in any actual content handler.

This issue has been noted and the intention is to add support in
mod_python version 3.3 to support for req.ssl_var_lookup(). Someone has
already submitted some initial patches that might be used to do this. If
you want to experiment with the feature, you could try patching your
mod_python source code to add the feature.

See:

   http://issues.apache.org/jira/browse/MODPYTHON-94

for details on this issue.

If you don't want to patch your mod_python source code, I also supplied
code for an alternate way of doing it a long time ago. This is mentioned
in:

   http://www.modpython.org/pipermail/mod_python/2005-May/018164.html

Unfortunately the mailing list archive has stuffed the attachment links
in the post. The actual links are:

   # save as _mp_mod_ssl.c
    
http://www.modpython.org/pipermail/mod_python/attachments/20050523/ 
9fa0275b/_mp_mod_ssl.obj

   # save as setup.py
    
http://www.modpython.org/pipermail/mod_python/attachments/20050523/ 
9fa0275b/setup.obj

Fix the path for location of Apache stuff in setup.py and then build  
like
a normal Python module.

Graham

On 04/02/2006, at 9:18 AM, Tomasz Wlodek wrote:

> Hello mod_python experts,
>
>
> I would like to use mod_python to force Apache to authenticate users  
> based
> on their user certificate. I have encountered a problem: SSL  
> environment
> variables are not passed by Apache to mod_python authentication  
> handler.
>
> Here is how the whole thing should work.
>
> In Apache conf files I tell it to load mod_ssl module
>
> LoadModule ssl_module           /usr/lib/httpd/modules/mod_ssl.so
>
> then I turn the user verification option in SSL:
>
> SSLEngine               on
> SSLCertificateFile      /etc/...
> SSLCertificateKeyFile   /etc/...
> SSLCACertificatePath    /etc/....
> SSLVerifyClient         optional
> SSLVerifyDepth          10
> SSLOptions              +ExportCertData +StdEnvVars
>
> I restart Apache and I load a cgi script which dumps the available
> environment variables. I can see that variables SSL_CLIENT_S_DN and
> SSL_CLIENT_VERIFY variables are set or not set depending on whether I  
> have
> valid certificate in my browser or not. Halleluiah! The certificate  
> based
> authentication works in cgi scripts.
>
> Now I would like to pass the work of deciding whether user was
> authenticated or not from cgi script to mod_python authentication  
> handler.
> The idea is: mod_python authentication handler will check if the
> SSL_CLIENT_S_DN variable was defined by SSL. If yes - return  
> apache.OK. If
> not return apache.HTTP_FORBIDDEN.
>
> Sounds simple. So I set to work. I define mod-python authentication
> handler:
>
> <Directory /var/www/gridsite/cgi>
>     AddHandler mod_python .py
>     PythonHandler myhandler
>     PythonAuthenHandler myhandler
>     PythonDebug on
>     PythonPath "sys.path + ['/root/mod_python_handlers']"
>     AuthType Basic
>     AuthName "Restricted Area"
>     require valid-user
> </Directory>
>
> then I create the actual python handler in file
> /root/mod_python_handlers/myhandler.py
>
> from mod_python import apache
>
> def authenhandler(req):
>     # let us make sure that environment variables are loaded
>     req.add_common_vars()
>     # we can dump the list of known environment variables, for  
> debugging
>     #for line in req.subprocess_env.keys():
>     #    req.write(line+"<br>\n")
>
>     # now comes the real work: if SSL verified the certificate, then
>     # SSL_CLIENT_S_DN variable should be set and the user can be  
> approved
>     if req.subprocess_env.has_key('SSL_CLIENT_S_DN'):
>         return apache.OK
>     else:
>         return apache.HTTP_FORBIDDEN
>
> That is all. Now I run the thing. It turns out that the SSL environment
> variables are not visible from /root/mod_python_handlers/myhandler.py   
> and
> the handler always returns apache.HTTP_FORBIDDEN !
>
> I can see those variables in the cgi scripts, but not in python
> authentication handler.
>
> Does anyone has an idea why? Do I need to call some function to load  
> them?
>
> If I modify the handler to be:
>
> def authenhandler(req):
> 	return apache.OK
>
> so that everyone gets approved, and then display the content of
> SSL_CLIENT_S_DN from cgi scripts then the variable is clearly there!
>
> Tomasz Wlodek
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From dave at davebritton.com  Sat Feb  4 22:24:28 2006
From: dave at davebritton.com (Dave Britton)
Date: Sat Feb  4 22:26:06 2006
Subject: [mod_python] example of mod_python publisher handling html forms
	and cgi variables
References: <a79646ad0602041209p74883f8fta5b576a564d6fece@mail.gmail.com>
	<001001c629d7$f0527100$0500a8c0@brittonfamily.org>
	<a79646ad0602041755u5bcfede9k92cbb668d24d9989@mail.gmail.com>
Message-ID: <004201c62a03$ac9915a0$0500a8c0@brittonfamily.org>

Thanks. I'll forward this to the list so that others can find it in the
archives if it's helpful.
-Dave
----- Original Message ----- 
From: "Glenn Hammonds" <rghammonds@gmail.com>
To: "Dave Britton" <dave@davebritton.com>
Sent: Saturday, February 04, 2006 8:55 PM
Subject: Re: I like how you use mod_python


Dave,

Thanks so much.  I did take a look, and that bit of code is just
extraordinarily helpful for someone just getting going.  I really
appreciate it! I wish that or something like it was in the FAQ or even
in the documentation as an example.

Best,

Glenn

On 2/4/06, Dave Britton <dave@davebritton.com> wrote:
> Sure -
> 1. be sure you have mod_python publisher installed - something like this
> should be in httpd.conf:
>   <Directory /var/www/dave/python/>
>      AddHandler python-program .py
>      PythonHandler mod_python.publisher
>      PythonDebug On
>    </Directory>
>
> 2. Then write a python module that has a function named index() in it, and
> put it into the directory specified in the conf file. when you browse to
the
> module name (not including the .py extension) publisher will run the index
> function as if it were the index.html default file in a regular html
> directory.
>
> 3. I put an example program at http://www.davebritton.com/python/myexample
> for you to see.
>
> Let me know if you have any questions.
>
> -Dave
==================== source code for myexample.py ==========
# myexample.py
# this produces and processes a simple cgi form
#
def index(req, var1='', var2='off', var3='', hiddenvar='0'):
    # note - req is the Request object that holds the cgi interface data
    # the var1-3s are the variables that my form will be passing in to be
processed
    # hiddenvar is an example of using an html form hidden variable, useful
for pseudo-session data
    # start the string to paint the form with html
    # first we want to know if var2 is checked or not (it is a checkbox -
see below)
    if var2=='on':
        checked='CHECKED'
    else:
    	checked=''
    htmlout="""
<h3>Hello there!</h3>
Var 1 is %s, var2 is %s and var3 is %s
<p>If you'd like to change those values, enter new ones into this form:<br>
<form action = "myexample" method="post">
Enter var1: <input type="text" name = "var1" value =" %s"><br>
Enter var2: <input type="checkbox" name = "var2" %s><br>
Enter var3: <textarea name = "var3">%s</textarea><br>
    """ %(var1,var2,var3,var1,checked,var3)
    # now let's increment our hidden value counter and tell the user what it
is:
    # cgi vars are always strings, so you have to convert them to numbers
and back
    hiddenvar = str(int(hiddenvar)+1)
    # add some more html to the output string to finish the form
    htmlout += """
<input type = "hidden" name = "hiddenvar" value = "%s">
<input type = "submit" value = "Click here to set the values">
</form>
This is the count of how many times you have been shown this form: %s
<p><a href="myexample.py-source">Click to view or right-click and save-as to
download the source code</a>
    """%(hiddenvar, hiddenvar)
    # that's all we need to do, so just return the string:
    return htmlout

> ============================================
>
> ----- Original Message -----
> From: "Glenn Hammonds" <rghammonds@gmail.com>
> To: <dave@davebritton.com>
> Sent: Saturday, February 04, 2006 3:09 PM
> Subject: I like how you use mod_python
>
>
> Dave,
>
> I read with interest your post on the mod_python list replying to "how
> you use python".
>
> I'm just starting up with mod_python, moving existing too slow code
> from cgi, and your 1-8 explanation of how you use it made the most
> sense to me of any I've seen anywhere.
>
> I am currently conceptually stuck on points (2), collecting incoming
> cgi variables and (8) waiting for the user click.  I can't seem to get
> how to do that in mod_python.
>
> Would you be willing to share a skeleton version that explains this?
> I know it must be dead simple, but then ... so am I from time to time.
>
> Thanks in advance,
>
> Glenn
>
>
>


From grahamd at dscpl.com.au  Sat Feb  4 22:53:28 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb  4 22:53:43 2006
Subject: [mod_python] example of mod_python publisher handling html forms
	and cgi variables
In-Reply-To: <004201c62a03$ac9915a0$0500a8c0@brittonfamily.org>
References: <a79646ad0602041209p74883f8fta5b576a564d6fece@mail.gmail.com>
	<001001c629d7$f0527100$0500a8c0@brittonfamily.org>
	<a79646ad0602041755u5bcfede9k92cbb668d24d9989@mail.gmail.com>
	<004201c62a03$ac9915a0$0500a8c0@brittonfamily.org>
Message-ID: <031cfe89e90c391c3fb41d67aa3e6341@dscpl.com.au>


On 05/02/2006, at 2:24 PM, Dave Britton wrote:
> On 2/4/06, Dave Britton <dave@davebritton.com> wrote:
>> Sure -
>> 1. be sure you have mod_python publisher installed - something like 
>> this
>> should be in httpd.conf:
>>   <Directory /var/www/dave/python/>
>>      AddHandler python-program .py
>>      PythonHandler mod_python.publisher
>>      PythonDebug On
>>    </Directory>
>>
>> 2. Then write a python module that has a function named index() in 
>> it, and
>> put it into the directory specified in the conf file. when you browse 
>> to
> the
>> module name (not including the .py extension) publisher will run the 
>> index
>> function as if it were the index.html default file in a regular html
>> directory.

Note that not including the ".py" extension will only work if you have
MultiViews enabled. At the same time though, one has to be careful using
MultiViews, especially if you have other resources in the directory
which share the same basename as a publisher code file but with a
different extension. This is because which file out of those with the
same basename but different extensions that Apache decides is the
correct one is in part determined by information supplied by the users
browser. By default the weightings sent by a client browser tend to
favour files with extensions of ".html" or ".txt" over your Python code
file with a ".py" extension. Also, by default extensions associated
with a code based handler are ignored altogether when there are multiple
choices. What this all means is that if you do not use a ".py" extension
in the URL and start putting other files in the same directories, you
might not always see the result returned that you expected.

In case you ever have this problem, you should read:

   http://www.modpython.org/pipermail/mod_python/2005-August/018828.html
   http://www.modpython.org/pipermail/mod_python/2005-August/018829.html

Graham



From Brian.Fleming at tellabs.com  Mon Feb  6 18:46:44 2006
From: Brian.Fleming at tellabs.com (Fleming, Brian J.)
Date: Mon Feb  6 18:46:50 2006
Subject: [mod_python] Trouble compiling mod_python
Message-ID: <A6A3FD22234C5A4EA8131B6CBA2986C9020322FE@USNVEX3.tellabs-west.tellabsinc.net>

Apache 2.2.0
mod_python-3.2.5b
Python 2.4.1

If you're up for another challenge, mod_python doesn't compile.

crypto -lnsl -L/usr/local/TclTk/8.3.4/lib -R/usr/local/TclTk/8.3.4/lib
-ltk8.3 -ltcl8.3 -L/usr/openwin/lib -lX11 -L/usr/local/gnu/lib -lgdbm
-L/usr/local/lib -lz

*** Warning: Linking the shared library mod_python.la against the
*** static library
/usr/local/Python/2.4.1/lib/python2.4/config/libpython2.4.a is not
portable!
ld: fatal: library -lssl: not found
ld: fatal: library -lcrypto: not found
ld: fatal: File processing errors. No output written to
.libs/mod_python.so
apxs:Error: Command failed with rc=65536
.
make[1]: *** [mod_python.so] Error 1
make[1]: Leaving directory
`/home/bfleming/downloads/mod_python-3.2.5b/src'
make: *** [do_dso] Error 2

============================================================
The information contained in this message may be privileged
and confidential and protected from disclosure. If the reader
of this message is not the intended recipient, or an employee
or agent responsible for delivering this message to the
intended recipient, you are hereby notified that any reproduction,
dissemination or distribution of this communication is strictly
prohibited. If you have received this communication in error,
please notify us immediately by replying to the message and
deleting it from your computer. Thank you. Tellabs
============================================================
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060206/a545a6c8/attachment.html
From Brian.Fleming at tellabs.com  Mon Feb  6 18:46:44 2006
From: Brian.Fleming at tellabs.com (Fleming, Brian J.)
Date: Mon Feb  6 18:46:51 2006
Subject: [mod_python] Trouble compiling mod_python
Message-ID: <A6A3FD22234C5A4EA8131B6CBA2986C9020322FF@USNVEX3.tellabs-west.tellabsinc.net>

Apache 2.2.0
mod_python-3.2.5b
Python 2.4.1

If you're up for another challenge, mod_python doesn't compile.

crypto -lnsl -L/usr/local/TclTk/8.3.4/lib -R/usr/local/TclTk/8.3.4/lib
-ltk8.3 -ltcl8.3 -L/usr/openwin/lib -lX11 -L/usr/local/gnu/lib -lgdbm
-L/usr/local/lib -lz

*** Warning: Linking the shared library mod_python.la against the
*** static library
/usr/local/Python/2.4.1/lib/python2.4/config/libpython2.4.a is not
portable!
ld: fatal: library -lssl: not found
ld: fatal: library -lcrypto: not found
ld: fatal: File processing errors. No output written to
.libs/mod_python.so
apxs:Error: Command failed with rc=65536
.
make[1]: *** [mod_python.so] Error 1
make[1]: Leaving directory
`/home/bfleming/downloads/mod_python-3.2.5b/src'
make: *** [do_dso] Error 2

============================================================
The information contained in this message may be privileged
and confidential and protected from disclosure. If the reader
of this message is not the intended recipient, or an employee
or agent responsible for delivering this message to the
intended recipient, you are hereby notified that any reproduction,
dissemination or distribution of this communication is strictly
prohibited. If you have received this communication in error,
please notify us immediately by replying to the message and
deleting it from your computer. Thank you. Tellabs
============================================================
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060206/514018f2/attachment.html
From grahamd at dscpl.com.au  Mon Feb  6 19:09:52 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb  6 19:09:55 2006
Subject: [mod_python] Trouble compiling mod_python
Message-ID: <1139270992.30245@dscpl.user.openhosting.com>

This looks more to be a problem with your Python installation and is
not a problem with mod_python. Ie., somehow your Python installation
has been configured to use a bunch of libraries that don't exist on
your system or are in a non standard location.

Suggest you find a simpler third party Python package with happens
to also have a C code component. Ie., something like cElementTree
perhaps, and try and build it. If it fails, then you will need to fix your
Python installation before trying mod_python again.

Graham

Fleming, Brian J. wrote ..
> Apache 2.2.0
> mod_python-3.2.5b
> Python 2.4.1
> 
> If you're up for another challenge, mod_python doesn't compile.
> 
> crypto -lnsl -L/usr/local/TclTk/8.3.4/lib -R/usr/local/TclTk/8.3.4/lib
> -ltk8.3 -ltcl8.3 -L/usr/openwin/lib -lX11 -L/usr/local/gnu/lib -lgdbm
> -L/usr/local/lib -lz
> 
> *** Warning: Linking the shared library mod_python.la against the
> *** static library
> /usr/local/Python/2.4.1/lib/python2.4/config/libpython2.4.a is not
> portable!
> ld: fatal: library -lssl: not found
> ld: fatal: library -lcrypto: not found
> ld: fatal: File processing errors. No output written to
> .libs/mod_python.so
> apxs:Error: Command failed with rc=65536
> .
> make[1]: *** [mod_python.so] Error 1
> make[1]: Leaving directory
> `/home/bfleming/downloads/mod_python-3.2.5b/src'
> make: *** [do_dso] Error 2
> 
> ============================================================
> The information contained in this message may be privileged
> and confidential and protected from disclosure. If the reader
> of this message is not the intended recipient, or an employee
> or agent responsible for delivering this message to the
> intended recipient, you are hereby notified that any reproduction,
> dissemination or distribution of this communication is strictly
> prohibited. If you have received this communication in error,
> please notify us immediately by replying to the message and
> deleting it from your computer. Thank you. Tellabs
> ============================================================
From Brian.Fleming at tellabs.com  Tue Feb  7 11:47:55 2006
From: Brian.Fleming at tellabs.com (Fleming, Brian J.)
Date: Tue Feb  7 11:47:59 2006
Subject: [mod_python] Install mod_python without being root?
Message-ID: <A6A3FD22234C5A4EA8131B6CBA2986C902032521@USNVEX3.tellabs-west.tellabsinc.net>

I've succssfully compiled mod_python, but my unix admins are reluctant
to have it install anything into the official location of Python yet.

Is there a way to install the required libs or whatever binaries are
needed for mod_python to an alternate location?  Or, at least be able to
identify what make install is doing?

Thanks for all the help.
============================================================
The information contained in this message may be privileged
and confidential and protected from disclosure. If the reader
of this message is not the intended recipient, or an employee
or agent responsible for delivering this message to the
intended recipient, you are hereby notified that any reproduction,
dissemination or distribution of this communication is strictly
prohibited. If you have received this communication in error,
please notify us immediately by replying to the message and
deleting it from your computer. Thank you. Tellabs
============================================================

From tkruthoff at gmail.com  Tue Feb  7 13:08:44 2006
From: tkruthoff at gmail.com (Troy Kruthoff)
Date: Tue Feb  7 13:08:49 2006
Subject: [mod_python] PyCon 2006 mod_python BoF
Message-ID: <5ef0bc720602071008u4b63e5an9819480098d6aeda@mail.gmail.com>

Hello,

If you are going to PyCon 2006 in Dallas and would like to meet up and
chat about mod_python, please join us Friday (Feb 24th) at 5:10pm in
the Bent Tree room.

Thanks,

Troy

From deron.meranda at gmail.com  Tue Feb  7 14:18:40 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Tue Feb  7 14:18:43 2006
Subject: [mod_python] Install mod_python without being root?
In-Reply-To: <A6A3FD22234C5A4EA8131B6CBA2986C902032521@USNVEX3.tellabs-west.tellabsinc.net>
References: <A6A3FD22234C5A4EA8131B6CBA2986C902032521@USNVEX3.tellabs-west.tellabsinc.net>
Message-ID: <5c06fa770602071118r538176fevbf4d5bd3510a8d23@mail.gmail.com>

On 2/7/06, Fleming, Brian J. <Brian.Fleming@tellabs.com> wrote:
> I've succssfully compiled mod_python, but my unix admins are reluctant
> to have it install anything into the official location of Python yet.
>
> Is there a way to install the required libs or whatever binaries are
> needed for mod_python to an alternate location?  Or, at least be able to
> identify what make install is doing?

This is a good question.  Here are some of my thoughts to get you
started.  But if anyone knows how to do this for sure, this could be
worth writing up in some FAQ.

There are actually two install issues.  Installing the Python parts
(all the *.py files), and installing the Apache parts (the
mod_python.so DSO module).  Both may require root/admin permissions
normally.

You can easy install the python stuff to any other directory, and
adjust your python path to look there when importing them.

The Apache module loading though can be much more complicated (the
difficulty level is somewhat dependent upon the platform you're
compiling under).

You may need to drive the "make install" phase manually to get it to
install your module in a non-standard location.  Look at the APXS
documentation, http://httpd.apache.org/docs/2.0/programs/apxs.html

And then you'll need to supply absolute paths to your LoadModule or
LoadFile directives.

Also, it should go without saying.  If you install as non-root into
non-standard locations, you'll need to run your own instance of the
httpd process with your own custom httpd.conf.  This also means you're
going to be restricted to using non-reserved ports (not on port 80).

Note I've not actually tried this; I'd be interested to hear from people who do.
--
Deron Meranda

From sean at barriescene.com  Tue Feb  7 14:27:23 2006
From: sean at barriescene.com (Sean Jamieson)
Date: Tue Feb  7 14:27:33 2006
Subject: [mod_python] Install mod_python without being root?
In-Reply-To: <5c06fa770602071118r538176fevbf4d5bd3510a8d23@mail.gmail.com>
References: <A6A3FD22234C5A4EA8131B6CBA2986C902032521@USNVEX3.tellabs-west.tellabsinc.net>
	<5c06fa770602071118r538176fevbf4d5bd3510a8d23@mail.gmail.com>
Message-ID: <43E8F49B.80209@barriescene.com>

You can't install a module to your hosted server's apache instance, 
unless you have enough permissions to alter the httpd.conf for the 
server, and restart it.  (you'd also need write access to the modules 
directory, which you would probably have anyway, if you could edit 
httpd.conf)

If you were to try to run your own instance of apache, you'd have to use 
a port above 1024 (8080 is common)
and you would also have to make sure that it continues running after you 
logout (usually your background processes are terminated) you can use 
the nohup command for this.

of course this is all assuming you even have SSH or some kind of shell 
access....

Sean

Deron Meranda wrote:

>On 2/7/06, Fleming, Brian J. <Brian.Fleming@tellabs.com> wrote:
>  
>
>>I've succssfully compiled mod_python, but my unix admins are reluctant
>>to have it install anything into the official location of Python yet.
>>
>>Is there a way to install the required libs or whatever binaries are
>>needed for mod_python to an alternate location?  Or, at least be able to
>>identify what make install is doing?
>>    
>>
>
>This is a good question.  Here are some of my thoughts to get you
>started.  But if anyone knows how to do this for sure, this could be
>worth writing up in some FAQ.
>
>There are actually two install issues.  Installing the Python parts
>(all the *.py files), and installing the Apache parts (the
>mod_python.so DSO module).  Both may require root/admin permissions
>normally.
>
>You can easy install the python stuff to any other directory, and
>adjust your python path to look there when importing them.
>
>The Apache module loading though can be much more complicated (the
>difficulty level is somewhat dependent upon the platform you're
>compiling under).
>
>You may need to drive the "make install" phase manually to get it to
>install your module in a non-standard location.  Look at the APXS
>documentation, http://httpd.apache.org/docs/2.0/programs/apxs.html
>
>And then you'll need to supply absolute paths to your LoadModule or
>LoadFile directives.
>
>Also, it should go without saying.  If you install as non-root into
>non-standard locations, you'll need to run your own instance of the
>httpd process with your own custom httpd.conf.  This also means you're
>going to be restricted to using non-reserved ports (not on port 80).
>
>Note I've not actually tried this; I'd be interested to hear from people who do.
>--
>Deron Meranda
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>  
>

From trepca at gmail.com  Tue Feb  7 15:20:53 2006
From: trepca at gmail.com (Sebastjan Trepca)
Date: Tue Feb  7 15:20:59 2006
Subject: [mod_python] How to handle memcached connections?
Message-ID: <cd329af80602071220m6546686dya77b10a0311a4d97@mail.gmail.com>

Hi!

I'm using memcache to store sessions in it. For now I create a new
connection for each request which is quite inefficient. I'm using
apache2-worker and I tried to store a connection as a global variable
of a module. It worked as long as there were only one conccurent user
on the site. When there were more the sessions started to mix, so one
user got a session of the other etc. Of course I forgot about the
thread thingy :)

So do you have any suggestions on how to handle this the most
efficient way. I was thinking of creating a dictionary with locking
where keys would be thread IDs and values connections. Somekind of
connection pool.

Thanks for help, Sebastjan

From jgentil at sebistar.net  Wed Feb  8 00:22:46 2006
From: jgentil at sebistar.net (Jon-Pierre Gentil)
Date: Wed Feb  8 00:23:00 2006
Subject: [mod_python] How to handle memcached connections?
In-Reply-To: <cd329af80602071220m6546686dya77b10a0311a4d97@mail.gmail.com>
References: <cd329af80602071220m6546686dya77b10a0311a4d97@mail.gmail.com>
Message-ID: <200602072322.53793.jgentil@sebistar.net>

On Tuesday 07 February 2006 14:20, Sebastjan Trepca wrote:

> I'm using memcache to store sessions in it. For now I create a new
> connection for each request which is quite inefficient. I'm using
> apache2-worker and I tried to store a connection as a global variable
> of a module. It worked as long as there were only one conccurent user
> on the site. When there were more the sessions started to mix, so one
> user got a session of the other etc. Of course I forgot about the
> thread thingy :)

Is it really that inefficient?  Have you done any stress testing or 
profiling to determine that?  A lot of web applications make a new 
connection to RDBMS databases on each page load, so I can't imagine that 
connecting to a memcache each time is terribly slow or strenuous.

-- 
_________________________________________________________

  Jon-Pierre Gentil     KC9CAF    PGP: 0x7E1CBA17
  jabber: jgentil@sebistar.net    web: www.sebistar.net
  "If you think education is expensive, try ignorance."
_________________________________________________________ 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 835 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060207/1faa8481/attachment.bin
From fumanchu at amor.org  Thu Feb  9 04:51:25 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Thu Feb  9 04:50:30 2006
Subject: [mod_python] WSGI gateway for mod_python
Message-ID: <6949EC6CD39F97498A57E0FA55295B21411602@ex9.hostedexchange.local>

Hi everyone,

I've reworked my modpython_gateway module, removing the dependency on wsgiref. If you'd like to include it in the standard MP distro, I'd be willing to release it under any free terms: public domain, MIT, other. Let me know what your licensing requirements are.

http://projects.amor.org/misc/wiki/ModPythonGateway


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060209/ce65b169/attachment.html
From nicolas at lehuen.com  Thu Feb  9 07:16:26 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Thu Feb  9 07:16:32 2006
Subject: [mod_python] WSGI gateway for mod_python
In-Reply-To: <6949EC6CD39F97498A57E0FA55295B21411602@ex9.hostedexchange.local>
References: <6949EC6CD39F97498A57E0FA55295B21411602@ex9.hostedexchange.local>
Message-ID: <c298f2d70602090416q5d94e803n@mail.gmail.com>

Hi Robert,

What are the mod_python versions you've tested your module against ?
3.1.4 or 3.2.X ?

Regards,
Nicolas

2006/2/9, Robert Brewer <fumanchu@amor.org>:
>
>
> Hi everyone,
>
>  I've reworked my modpython_gateway module, removing the dependency on
> wsgiref. If you'd like to include it in the standard MP distro, I'd be
> willing to release it under any free terms: public domain, MIT, other. Let
> me know what your licensing requirements are.
>
>  http://projects.amor.org/misc/wiki/ModPythonGateway
>
>
>  Robert Brewer
>  System Architect
>  Amor Ministries
>  fumanchu@amor.org
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>

From fumanchu at amor.org  Thu Feb  9 12:59:40 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Thu Feb  9 13:00:15 2006
Subject: [mod_python] WSGI gateway for mod_python
Message-ID: <6949EC6CD39F97498A57E0FA55295B2101804A53@ex9.hostedexchange.local>

Nicolas Lehuen wrote:
> >  http://projects.amor.org/misc/wiki/ModPythonGateway
> What are the mod_python versions you've tested your module against ?
> 3.1.4 or 3.2.X ?

I've tested it with 3.1.4 on Debian (prefork) and Win2k (mpm_winnt). I
haven't moved to 3.2 yet, because I'm a Windows luser who wants a
binary. ;)


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org

From jpg at jgassociates.ca  Thu Feb  9 15:24:38 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Thu Feb  9 15:23:00 2006
Subject: [mod_python] WSGI gateway for mod_python
In-Reply-To: <6949EC6CD39F97498A57E0FA55295B2101804A53@ex9.hostedexchange.local>
References: <6949EC6CD39F97498A57E0FA55295B2101804A53@ex9.hostedexchange.local>
Message-ID: <43EBA506.20806@jgassociates.ca>

Robert Brewer wrote:
> Nicolas Lehuen wrote:
> 
>>> http://projects.amor.org/misc/wiki/ModPythonGateway
>>
>>What are the mod_python versions you've tested your module against ?
>>3.1.4 or 3.2.X ?
> 
> 
> I've tested it with 3.1.4 on Debian (prefork) and Win2k (mpm_winnt). I
> haven't moved to 3.2 yet, because I'm a Windows luser who wants a
> binary. ;)

Windows binaries have been available for every 3.2 beta. Depending on 
our level of our coordination, or lack there of ;), you'll find them 
temporarily at:

http://www.modpython.org/dist/
or
http://www.lehuen.com/nicolas/download/mod_python/

Once we have an official release (public beta or final), check your 
nearest apache mirror via:
http://httpd.apache.org/modules/python-download.cgi
You'll need to visit the master distribution directory or, preferably, 
its mirror and look in the win directory for the windows binaries.

If you want to follow mod_python development more closely I'd suggest 
joining the python-dev mailing list. Subscribe to the list by mailing 
python-dev-subscribe@httpd.apache.org.

In answer to your question regarding the license, mod_python is a 
sub-project of Apache Software Foundation httpd server project and thus 
uses the Apache License. See http://www.apache.org/licenses/. The ASF 
also holds the copyrights.

Jim
From grahamd at dscpl.com.au  Thu Feb  9 17:07:39 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb  9 17:07:44 2006
Subject: PythonOption settings. Was: Re: [mod_python] WSGI gateway for
	mod_python
Message-ID: <1139522859.19220@dscpl.user.openhosting.com>

Robert Brewer wrote ..
> Hi everyone,
> 
> I've reworked my modpython_gateway module, removing the dependency on wsgiref.
> If you'd like to include it in the standard MP distro, I'd be willing to
> release it under any free terms: public domain, MIT, other. Let me know
> what your licensing requirements are.
> 
> http://projects.amor.org/misc/wiki/ModPythonGateway
> 
> 
> Robert Brewer
> System Architect
> Amor Ministries
> fumanchu@amor.org

Haven't looked through the actual code yet, but a suggestion in regard
to how you name PythonOption variables. The web page mentions:

    PythonOption application cherrypy._cpwsgi::wsgiApp
    PythonOption import myapp.cherrypy::startapp

    PythonOption SCRIPT_NAME /myapp

In the interests of avoiding name clashes, I would very mush suggest
that option names being put in some sort of namespace. For example:

    PythonOption wsgi-gateway.application cherrypy._cpwsgi::wsgiApp
    PythonOption wsgi-gateway.import myapp.cherrypy::startapp

    PythonOption wsgi-gateway.SCRIPT_NAME /myapp

I haven't logged a JIRA entry yet about this, but I want to push that the
same thing be done for any cases where mod_python itself uses
PythonOption variables. For example:

    PythonOption mod_python.session_cookie_name ...
    PythonOption mod_python.ApplicationPath ...
    PythonOption mod_python.session_dbm ...
    PythonOption mod_python.session_fast_cleanup ...
    etc ....

If appropriate for mod_python, multiple levels of naming should be used.
For example, "session_fast_cleanup" is actually related to FileSession, so
perhaps it should be:

  PythonOption mod_python.Session.cookie_name ...
  PythonOption mod_python.Session.application_path ...
  PythonOption mod_python.DbmSession.database ...
  PythonOption mod_python.FileSession.fast_cleanup ...

Thus, class name is interjected as second level in name. Also would like
to see final attribute name settle on lower case with underscore between
distinct words.

We can support old names in mod_python for the time being but should
deprecate them.

Comments?


Graham
From nicolas at lehuen.com  Thu Feb  9 17:18:58 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Thu Feb  9 17:19:02 2006
Subject: PythonOption settings. Was: Re: [mod_python] WSGI gateway for
	mod_python
In-Reply-To: <1139522859.19220@dscpl.user.openhosting.com>
References: <1139522859.19220@dscpl.user.openhosting.com>
Message-ID: <c298f2d70602091418t7ebd0a14h@mail.gmail.com>

+1 !

2006/2/9, Graham Dumpleton <grahamd@dscpl.com.au>:
> Robert Brewer wrote ..
> > Hi everyone,
> >
> > I've reworked my modpython_gateway module, removing the dependency on wsgiref.
> > If you'd like to include it in the standard MP distro, I'd be willing to
> > release it under any free terms: public domain, MIT, other. Let me know
> > what your licensing requirements are.
> >
> > http://projects.amor.org/misc/wiki/ModPythonGateway
> >
> >
> > Robert Brewer
> > System Architect
> > Amor Ministries
> > fumanchu@amor.org
>
> Haven't looked through the actual code yet, but a suggestion in regard
> to how you name PythonOption variables. The web page mentions:
>
>     PythonOption application cherrypy._cpwsgi::wsgiApp
>     PythonOption import myapp.cherrypy::startapp
>
>     PythonOption SCRIPT_NAME /myapp
>
> In the interests of avoiding name clashes, I would very mush suggest
> that option names being put in some sort of namespace. For example:
>
>     PythonOption wsgi-gateway.application cherrypy._cpwsgi::wsgiApp
>     PythonOption wsgi-gateway.import myapp.cherrypy::startapp
>
>     PythonOption wsgi-gateway.SCRIPT_NAME /myapp
>
> I haven't logged a JIRA entry yet about this, but I want to push that the
> same thing be done for any cases where mod_python itself uses
> PythonOption variables. For example:
>
>     PythonOption mod_python.session_cookie_name ...
>     PythonOption mod_python.ApplicationPath ...
>     PythonOption mod_python.session_dbm ...
>     PythonOption mod_python.session_fast_cleanup ...
>     etc ....
>
> If appropriate for mod_python, multiple levels of naming should be used.
> For example, "session_fast_cleanup" is actually related to FileSession, so
> perhaps it should be:
>
>   PythonOption mod_python.Session.cookie_name ...
>   PythonOption mod_python.Session.application_path ...
>   PythonOption mod_python.DbmSession.database ...
>   PythonOption mod_python.FileSession.fast_cleanup ...
>
> Thus, class name is interjected as second level in name. Also would like
> to see final attribute name settle on lower case with underscore between
> distinct words.
>
> We can support old names in mod_python for the time being but should
> deprecate them.
>
> Comments?
>
>
> Graham
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jpg at jgassociates.ca  Thu Feb  9 17:28:44 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Thu Feb  9 17:26:33 2006
Subject: PythonOption settings. Was: Re: [mod_python] WSGI gateway for
	mod_python
In-Reply-To: <1139522859.19220@dscpl.user.openhosting.com>
References: <1139522859.19220@dscpl.user.openhosting.com>
Message-ID: <43EBC21C.8040108@jgassociates.ca>

Graham Dumpleton wrote:
> Robert Brewer wrote ..
> 
>>Hi everyone,
>>
>>I've reworked my modpython_gateway module, removing the dependency on wsgiref.
>>If you'd like to include it in the standard MP distro, I'd be willing to
>>release it under any free terms: public domain, MIT, other. Let me know
>>what your licensing requirements are.
>>
>>http://projects.amor.org/misc/wiki/ModPythonGateway
>>
>>
>>Robert Brewer
>>System Architect
>>Amor Ministries
>>fumanchu@amor.org
> 
> 
> Haven't looked through the actual code yet, but a suggestion in regard
> to how you name PythonOption variables. The web page mentions:
> 
>     PythonOption application cherrypy._cpwsgi::wsgiApp
>     PythonOption import myapp.cherrypy::startapp
> 
>     PythonOption SCRIPT_NAME /myapp
> 
> In the interests of avoiding name clashes, I would very mush suggest
> that option names being put in some sort of namespace. For example:
> 
>     PythonOption wsgi-gateway.application cherrypy._cpwsgi::wsgiApp
>     PythonOption wsgi-gateway.import myapp.cherrypy::startapp
> 
>     PythonOption wsgi-gateway.SCRIPT_NAME /myapp
> 
> I haven't logged a JIRA entry yet about this, but I want to push that the
> same thing be done for any cases where mod_python itself uses
> PythonOption variables. For example:
> 
>     PythonOption mod_python.session_cookie_name ...
>     PythonOption mod_python.ApplicationPath ...
>     PythonOption mod_python.session_dbm ...
>     PythonOption mod_python.session_fast_cleanup ...
>     etc ....
> 
> If appropriate for mod_python, multiple levels of naming should be used.
> For example, "session_fast_cleanup" is actually related to FileSession, so
> perhaps it should be:
> 
>   PythonOption mod_python.Session.cookie_name ...
>   PythonOption mod_python.Session.application_path ...
>   PythonOption mod_python.DbmSession.database ...
>   PythonOption mod_python.FileSession.fast_cleanup ...
> 
> Thus, class name is interjected as second level in name.

+1

  Also would like
> to see final attribute name settle on lower case with underscore between
> distinct words.

+1

> We can support old names in mod_python for the time being but should
> deprecate them.
> 
> Comments?

It just seems so... logical. :)

Jim
From rambiusparkisanius at gmail.com  Fri Feb 10 11:35:32 2006
From: rambiusparkisanius at gmail.com (Ivan "Rambius" Ivanov)
Date: Fri Feb 10 11:35:43 2006
Subject: [mod_python] Open source projects based on mod_python
Message-ID: <89ce7f740602100835k6bd05259jfccb7d045b06a2fc@mail.gmail.com>

Hello,

I am trying to master mod_python and after reading its documentation,
running the samples from it and lurking in the mod_python mailing list
I would like to know some nice open source projects that use
mod_python. I am particularly interested in how people deploy their
projects to Apache Httpd and how the handlers are used in the real
world.

Thank you in advance for your pointers.

Regards
Rambius

From grahamd at dscpl.com.au  Fri Feb 10 16:29:55 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb 10 16:30:06 2006
Subject: [mod_python] Open source projects based on mod_python
In-Reply-To: <89ce7f740602100835k6bd05259jfccb7d045b06a2fc@mail.gmail.com>
References: <89ce7f740602100835k6bd05259jfccb7d045b06a2fc@mail.gmail.com>
Message-ID: <810665F1-C103-48C7-A2A8-E7CA974B7A95@dscpl.com.au>


On 11/02/2006, at 3:35 AM, Ivan Rambius Ivanov wrote:

> Hello,
>
> I am trying to master mod_python and after reading its documentation,
> running the samples from it and lurking in the mod_python mailing list
> I would like to know some nice open source projects that use
> mod_python. I am particularly interested in how people deploy their
> projects to Apache Httpd and how the handlers are used in the real
> world.

I would suggest you have a look at Vampire and mpservlets to begin
with. These show different ways of building different URL dispatchers
on top of basic mod_python handler mechanism.

These aren't end user applications in themselves though. For an
example of an application which hosts on top of mod_python, you
might look at Trac. I think though that it perhaps just uses mod_python
as a jump off point and isn't really closely bound in with mod_python.
I'm not sure I know of any application available which truly melds
real close with mod_python/Apache.

For something quite different, you might also look at Tramline. This
isn't a content producer in itself, but is a good example of using the
mod_python input/output filters in mod_python.

The URLs for these packages are:

   http://www.dscpl.com.au/projects/vampire

   http://home.comcast.net/~d.popowich/mpservlets/

   http://projects.edgewall.com/trac/
   http://projects.edgewall.com/trac/wiki/TracModPython

   http://faassen.n--tree.net/blog/view/weblog/2005/11/11/0

Graham
From rambiusparkisanius at gmail.com  Fri Feb 10 16:38:35 2006
From: rambiusparkisanius at gmail.com (Ivan "Rambius" Ivanov)
Date: Fri Feb 10 16:38:40 2006
Subject: [mod_python] Open source projects based on mod_python
In-Reply-To: <810665F1-C103-48C7-A2A8-E7CA974B7A95@dscpl.com.au>
References: <89ce7f740602100835k6bd05259jfccb7d045b06a2fc@mail.gmail.com>
	<810665F1-C103-48C7-A2A8-E7CA974B7A95@dscpl.com.au>
Message-ID: <89ce7f740602101338x282a5f23gfbcee259055c1b6e@mail.gmail.com>

Hello,

Thank you for the link, I will take a look at those projects.

Regards
Rambius

On 2/10/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
> On 11/02/2006, at 3:35 AM, Ivan Rambius Ivanov wrote:
>
> > Hello,
> >
> > I am trying to master mod_python and after reading its documentation,
> > running the samples from it and lurking in the mod_python mailing list
> > I would like to know some nice open source projects that use
> > mod_python. I am particularly interested in how people deploy their
> > projects to Apache Httpd and how the handlers are used in the real
> > world.
>
> I would suggest you have a look at Vampire and mpservlets to begin
> with. These show different ways of building different URL dispatchers
> on top of basic mod_python handler mechanism.
>
> These aren't end user applications in themselves though. For an
> example of an application which hosts on top of mod_python, you
> might look at Trac. I think though that it perhaps just uses mod_python
> as a jump off point and isn't really closely bound in with mod_python.
> I'm not sure I know of any application available which truly melds
> real close with mod_python/Apache.
>
> For something quite different, you might also look at Tramline. This
> isn't a content producer in itself, but is a good example of using the
> mod_python input/output filters in mod_python.
>
> The URLs for these packages are:
>
>    http://www.dscpl.com.au/projects/vampire
>
>    http://home.comcast.net/~d.popowich/mpservlets/
>
>    http://projects.edgewall.com/trac/
>    http://projects.edgewall.com/trac/wiki/TracModPython
>
>    http://faassen.n--tree.net/blog/view/weblog/2005/11/11/0
>
> Graham
>

From jpg at jgassociates.ca  Fri Feb 10 16:44:58 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Feb 10 16:42:59 2006
Subject: [mod_python] Open source projects based on mod_python
In-Reply-To: <810665F1-C103-48C7-A2A8-E7CA974B7A95@dscpl.com.au>
References: <89ce7f740602100835k6bd05259jfccb7d045b06a2fc@mail.gmail.com>
	<810665F1-C103-48C7-A2A8-E7CA974B7A95@dscpl.com.au>
Message-ID: <43ED095A.7050103@jgassociates.ca>

Graham Dumpleton wrote:
> 
> On 11/02/2006, at 3:35 AM, Ivan Rambius Ivanov wrote:
> 
>> Hello,
>>
>> I am trying to master mod_python and after reading its documentation,
>> running the samples from it and lurking in the mod_python mailing list
>> I would like to know some nice open source projects that use
>> mod_python. I am particularly interested in how people deploy their
>> projects to Apache Httpd and how the handlers are used in the real
>> world.
> 
> 
> I would suggest you have a look at Vampire and mpservlets to begin
> with. These show different ways of building different URL dispatchers
> on top of basic mod_python handler mechanism.
> 
> These aren't end user applications in themselves though. For an
> example of an application which hosts on top of mod_python, you
> might look at Trac. I think though that it perhaps just uses mod_python
> as a jump off point and isn't really closely bound in with mod_python.
> I'm not sure I know of any application available which truly melds
> real close with mod_python/Apache.
> 
> For something quite different, you might also look at Tramline. This
> isn't a content producer in itself, but is a good example of using the
> mod_python input/output filters in mod_python.
> 
> The URLs for these packages are:
> 
>   http://www.dscpl.com.au/projects/vampire
> 
>   http://home.comcast.net/~d.popowich/mpservlets/
> 
>   http://projects.edgewall.com/trac/
>   http://projects.edgewall.com/trac/wiki/TracModPython
> 
>   http://faassen.n--tree.net/blog/view/weblog/2005/11/11/0

There are a number of projects that use mod_python as an option to 
improve performance, or make use of apache rather than a bundled 
standalone server. Roundup and Django immediately come to mind.

Jim

From grahamd at dscpl.com.au  Fri Feb 10 18:25:40 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb 10 18:25:48 2006
Subject: [mod_python] WSGI gateway for mod_python
In-Reply-To: <6949EC6CD39F97498A57E0FA55295B21411602@ex9.hostedexchange.local>
References: <6949EC6CD39F97498A57E0FA55295B21411602@ex9.hostedexchange.local>
Message-ID: <3F9A1C1C-586E-437D-8867-6C806E75F9F4@dscpl.com.au>


On 09/02/2006, at 8:51 PM, Robert Brewer wrote:

> Hi everyone,
>
> I've reworked my modpython_gateway module, removing the dependency  
> on wsgiref. If you'd like to include it in the standard MP distro,  
> I'd be willing to release it under any free terms: public domain,  
> MIT, other. Let me know what your licensing requirements are.
>
> http://projects.amor.org/misc/wiki/ModPythonGateway
FWIW, a few comments.

1. The global "_counter" variable used by the profile() function is  
not used in
a thread safe way, so could screw up on multithreaded MPM.

2. The whole "import" Python option thing is not required as there  
are other
better ways of doing that with mod_python. For example:

   <Location /myapp>
     SetHandler python-program

     PythonFixupHandler myapp.cherrypy::startapp
     PythonHandler modpython_gateway::handler

     PythonOption application cherrypy._cpwsgi::wsgiApp
   </Location>

In other words, instead of using your "import" PythonOption, use the  
directive
PythonFixupHandler to trigger the execution of the "startapp"  
function for each
request.

That's all for now.

Graham
From fumanchu at amor.org  Sat Feb 11 00:55:02 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Sat Feb 11 00:57:13 2006
Subject: [mod_python] WSGI gateway for mod_python
References: <6949EC6CD39F97498A57E0FA55295B21411602@ex9.hostedexchange.local>
	<3F9A1C1C-586E-437D-8867-6C806E75F9F4@dscpl.com.au>
Message-ID: <6949EC6CD39F97498A57E0FA55295B21411604@ex9.hostedexchange.local>

Graham Dumpleton wrote:
> > http://projects.amor.org/misc/wiki/ModPythonGateway
> 
> 1. The global "_counter" variable used by the profile()
> function is not used in a thread safe way, so could screw
> up on multithreaded MPM.

No problem; that function was something of a holdover from the earliest versions, anyway. I'll just take it out.

> 2. The whole "import" Python option thing is not required
> as there are other better ways of doing that with mod_python.
> For example:
>      PythonFixupHandler myapp.cherrypy::startapp

Oooo, very nice. OK, "import" is gone now too.

Thanks for the help!


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060210/e77aa72f/attachment.html
From fumanchu at amor.org  Sat Feb 11 01:00:33 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Sat Feb 11 01:01:46 2006
Subject: PythonOption settings. Was: Re: [mod_python] WSGI gateway for
	mod_python
References: <1139522859.19220@dscpl.user.openhosting.com>
Message-ID: <6949EC6CD39F97498A57E0FA55295B21411605@ex9.hostedexchange.local>

Graham Dumpleton wrote:
> > http://projects.amor.org/misc/wiki/ModPythonGateway
> 
> In the interests of avoiding name clashes, I would
> very much suggest that option names be put in some
> sort of namespace. For example:
> 
>     PythonOption wsgi-gateway.application cherrypy._cpwsgi::wsgiApp

That sounds fine to me. I'd like to use "wsgi.application", however, since 1) it's shorter ;) and 2) the "G" in WSGI already stands for "Gateway".


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060210/11c101cc/attachment.html
From lukas.zapletal at gmail.com  Sat Feb 11 04:17:47 2006
From: lukas.zapletal at gmail.com (=?ISO-8859-2?Q?Luk=E1=B9_Zapletal?=)
Date: Sat Feb 11 04:17:50 2006
Subject: [mod_python] Problem with PSP and unicode
Message-ID: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>

Hello,

I have serious problem with PSPs. The PSP cannot handle string
variables in unicode: Here is the test:

test.html:
<!-- vim: set sw=4 ts=4 sts=4 sta et ai fenc=utf-8 : -->
<%= test %>

test.py:
# -*- coding: utf-8 -*-
from mod_python import apache
from mod_python import psp
def test(req):
    p = psp.PSP(req, filename="test.html")
    p.run({"test": u"STRING WITH CHARACETRS > 128"})

The output of this test method:

UnicodeEncodeError: 'ascii' codec can't encode character XY in
position XY: ordinal not in range(128)

What am I doing wrong? Why the PSP is trying to convert the string
using ascii codec? I do not want this; I really need to work in
unicode and output the result of the PSP page in unicode.

Thanks in advance for help

--
Lukas Zapletal
http://lukas.zapletalovi.com

From dpopowich at comcast.net  Sat Feb 11 11:28:34 2006
From: dpopowich at comcast.net (Daniel J. Popowich)
Date: Sat Feb 11 11:29:33 2006
Subject: [mod_python] Open source projects based on mod_python
In-Reply-To: <810665F1-C103-48C7-A2A8-E7CA974B7A95@dscpl.com.au>
References: <89ce7f740602100835k6bd05259jfccb7d045b06a2fc@mail.gmail.com>
	<810665F1-C103-48C7-A2A8-E7CA974B7A95@dscpl.com.au>
Message-ID: <17390.4274.596245.592890@io.astro.umass.edu>

Graham Dumpleton writes:
> 
> On 11/02/2006, at 3:35 AM, Ivan Rambius Ivanov wrote:
> 
> > Hello,
> >
> > I am trying to master mod_python and after reading its documentation,
> > running the samples from it and lurking in the mod_python mailing list
> > I would like to know some nice open source projects that use
> > mod_python. I am particularly interested in how people deploy their
> > projects to Apache Httpd and how the handlers are used in the real
> > world.
> 
> I would suggest you have a look at Vampire and mpservlets to begin
> with. These show different ways of building different URL dispatchers
> on top of basic mod_python handler mechanism.
> 
> These aren't end user applications in themselves though. For an
> example of an application which hosts on top of mod_python...

Rambius,

If you're interested in end-results you can check out:

   http://rfs.rockinst.org/

I wrote the server-side application for this site and it is a content
management system written with mpservlets.  It's backed by a
PostgreSQL database.  There's hardly any static content on the site,
even the drop-down menu items are largely filled dynamically.  Of
course, what you can't see is the admin side where content managers
can edit and upload content, which is too bad because even these forms
are generated dynamically by python and driven off the data-dictionary
of the underlying data objects.

Cheers,

Daniel Popowich
---------------
http://home.comcast.net/~d.popowich/mpservlets/
From nogradi at gmail.com  Sat Feb 11 15:39:55 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 11 15:40:00 2006
Subject: [mod_python] forks, daemons and other beasts
Message-ID: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>

Sorry everyone, a long post follows :)


Many times there is need for a mod_python program to respond (send a
page) to the client after receiving a request and at the same time
start a subprocess which typically takes quite long and waiting for it
to finish is not necessary. So the situation is this: (1) request
comes from client (2) server processes the request (3) server starts a
subprocess and don't wait for it to finish (4) send a response to the
client. Actually, (3) and (4) could be interchanged.

What is the best way to do this?

One could of course use the exec* and spawn* family of functions, but
in that case one would need to have a separate program to run and all
variables (lists, classes, etc.) used by the program should be
translated to command line arguments which can be cumbersome.

I've learned from a recipe in the python cookbook,
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012, that
this sort of thing in a python application would be done by forking
the process twice (just like in unix) like this:


import sys, os

def daemonize ( stdin='/dev/null', stdout='/dev/null', stderr='/dev/null' ):

    # Perform first fork.
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0) # Exit first parent.
    except OSError, e:
        sys.stderr.write("fork #1 failed: (%d) %s\n" % (e.errno, e.strerror))
        sys.exit(1)

    # Decouple from parent environment.
    os.chdir("/")
    os.umask(0)
    os.setsid()

    # Perform second fork.
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0) # Exit second parent.
    except OSError, e:
        sys.stderr.write("fork #2 failed: (%d) %s\n" % (e.errno, e.strerror))
        sys.exit(1)

    # The process is now daemonized, redirect standard file descriptors.
    for f in sys.stdout, sys.stderr: f.flush()
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def this_will_run_as_a_daemon( ):
    # some stuff here


daemonize( '/dev/null', '/tmp/daemon.log', '/tmp/daemon.log' )
this_will_run_as_a_daemon( )


All of this is working fine with python, the result is what one would
expect, whatever is in this_will_run_as_a_daemon( ) will run as a
daemon in the background.

Now I have difficulty with doing a similar thing with mod_python and
the publisher handler. I tried the following (the above daemonize
function is in daemon.py):

from daemon import *

def foo( req ):
    daemonize( '/dev/null', '/tmp/daemon.log', '/tmp/daemon.log' )

    # some stuff here that should run in the background
    # and the program should just start it and carry on

    return "okay"

and then accessing it by a client gives strange behaviour, either does
it what it supposed to do or gives the following error:


Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line
299, in HandlerDispatch
    result = object(req)

  File "/usr/lib/python2.3/site-packages/mod_python/publisher.py",
line 136, in handler
    result = util.apply_fs_data(object, req.form, req=req)

  File "/usr/lib/python2.3/site-packages/mod_python/util.py", line
361, in apply_fs_data
    return object(**args)

  File "/var/www/html/python/test.py", line 5, in d
    daemonize('/dev/null', '/tmp/moddaemon.log', '/tmp/moddaemon.log')

  File "/var/www/html/python/daemon.py", line 27, in daemonize
    sys.exit(0) # Exit second parent.

SystemExit: 0

I guess part of the problem is that anything after daemonize( ) really
gets 'daemonized' including the return "okay" statement. But then how
can it work once in a while?

Anyway, I have the feeling that there must be a more sane and probably
safe way of achieving what I would like by a much simpler method.

Any ideas?

From grahamd at dscpl.com.au  Sat Feb 11 16:37:19 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 11 16:37:29 2006
Subject: [mod_python] forks, daemons and other beasts
In-Reply-To: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
Message-ID: <3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>


On 12/02/2006, at 7:39 AM, Daniel Nogradi wrote:

> Anyway, I have the feeling that there must be a more sane and probably
> safe way of achieving what I would like by a much simpler method.
>
> Any ideas?

A quick one.

Run a small separate daemon process which embeds an  XML-RPC
server and have your web pages use XML-RPC to call that daemon
process to trigger off the task. The daemon process can still fork exec
as necessary.

This way you eliminate a fork in Apache child process which may be
problematic because of the socket connections etc that are inherited.

Graham
From nogradi at gmail.com  Sat Feb 11 17:02:19 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 11 17:02:23 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
Message-ID: <5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>

> > Anyway, I have the feeling that there must be a more sane and probably
> > safe way of achieving what I would like by a much simpler method.
> >
> > Any ideas?
>
> A quick one.
>
> Run a small separate daemon process which embeds an  XML-RPC
> server and have your web pages use XML-RPC to call that daemon
> process to trigger off the task. The daemon process can still fork exec
> as necessary.
>
> This way you eliminate a fork in Apache child process which may be
> problematic because of the socket connections etc that are inherited.

Well, that still looks like to me that I'm shooting a bird with a
cannon. The reason is that I need to do something really simple: users
upload a zip file (remember my questions about the zipfile module? :))
and should get an acknowledgement that the upload was successful. The
server should start unpacking the archive, check if the files are okay
and move them to a directory. All of this can take quite long, so the
acknowledgement should be sent before this unpacking/checking/moving
finishes.

I slowly started to make peace with the idea that there will be a
separate script to handle the unpacking/checking/moving and all the
parameters will be passed as command line arguments using either exec*
or spawn*. This is not ideal because the nicely structured data in
classes have to be mapped to a long list of arguments. So if anyone
has a better idea, I'm still interested.

From dan.eloff at gmail.com  Sat Feb 11 17:05:11 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Sat Feb 11 17:05:17 2006
Subject: [mod_python] Apache crashing
Message-ID: <4817b6fc0602111405m7a89b99ve25d91d8be64ac38@mail.gmail.com>

I've been using mod_python (3.2.2b the last version released for win) for a
while now, and I'm really fond of the flexibility it gives me, but I've run
across a problem as of late.

Apache crashes when shut down with this error, apparently while waiting for
worker threads to shut down. The CPU pins up at 100% and then after a few
seconds apache crashes.

[Sat Feb 11 13:33:56 2006] [crit] [Sat Feb 11 13:33:56 2006] file
C:\\asf-build\\build-2.0.55\\server\\mpm\\winnt\\child.c, line 1078,
assertion "(rv >= 0) && (rv < threads_created)" failed

Has anybody had trouble with this?

Thanks,
-Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060211/69eafe83/attachment.html
From grahamd at dscpl.com.au  Sat Feb 11 17:21:17 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 11 17:21:32 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
Message-ID: <762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>


On 12/02/2006, at 9:02 AM, Daniel Nogradi wrote:

>>> Anyway, I have the feeling that there must be a more sane and  
>>> probably
>>> safe way of achieving what I would like by a much simpler method.
>>>
>>> Any ideas?
>>
>> A quick one.
>>
>> Run a small separate daemon process which embeds an  XML-RPC
>> server and have your web pages use XML-RPC to call that daemon
>> process to trigger off the task. The daemon process can still fork  
>> exec
>> as necessary.
>>
>> This way you eliminate a fork in Apache child process which may be
>> problematic because of the socket connections etc that are inherited.
>
> Well, that still looks like to me that I'm shooting a bird with a
> cannon. The reason is that I need to do something really simple: users
> upload a zip file (remember my questions about the zipfile module? :))
> and should get an acknowledgement that the upload was successful. The
> server should start unpacking the archive, check if the files are okay
> and move them to a directory. All of this can take quite long, so the
> acknowledgement should be sent before this unpacking/checking/moving
> finishes.

The suggestion I gave wouldn't preclude an acknowledgement being
sent before the unpacking begins.

Have you simply considered using a separate thread to do the unpacking?

> I slowly started to make peace with the idea that there will be a
> separate script to handle the unpacking/checking/moving and all the
> parameters will be passed as command line arguments using either exec*
> or spawn*. This is not ideal because the nicely structured data in
> classes have to be mapped to a long list of arguments. So if anyone
> has a better idea, I'm still interested.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grahamd at dscpl.com.au  Sat Feb 11 17:24:29 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 11 17:24:40 2006
Subject: [mod_python] Apache crashing
In-Reply-To: <4817b6fc0602111405m7a89b99ve25d91d8be64ac38@mail.gmail.com>
References: <4817b6fc0602111405m7a89b99ve25d91d8be64ac38@mail.gmail.com>
Message-ID: <5E2543B9-A9AD-4D55-8AB1-D1655C7B4A0D@dscpl.com.au>


On 12/02/2006, at 9:05 AM, Dan Eloff wrote:

> I've been using mod_python (3.2.2b the last version released for  
> win) for a while now, and I'm really fond of the flexibility it  
> gives me, but I've run across a problem as of late.
>
> Apache crashes when shut down with this error, apparently while  
> waiting for worker threads to shut down. The CPU pins up at 100%  
> and then after a few seconds apache crashes.
>
> [Sat Feb 11 13:33:56 2006] [crit] [Sat Feb 11 13:33:56 2006] file C: 
> \\asf-build\\build-2.0.55\\server\\mpm\\winnt\\child.c, line 1078,  
> assertion "(rv >= 0) && (rv < threads_created)" failed
>
> Has anybody had trouble with this?

It may be related to:

   http://issues.apache.org/jira/browse/MODPYTHON-109

Problem is that mod_python tries to call Py_Finalize() when child  
process
being killed off, but it is being done from inside signal handler  
context which
is quite bad. Similar problem if you use req.server.register_cleanup 
() or
apache.register_cleanup(). The latter functions may have to be removed
if no equivalent can be found that is safe.

Graham
From dan.eloff at gmail.com  Sat Feb 11 17:44:05 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Sat Feb 11 17:44:09 2006
Subject: [mod_python] Apache crashing
In-Reply-To: <5E2543B9-A9AD-4D55-8AB1-D1655C7B4A0D@dscpl.com.au>
References: <4817b6fc0602111405m7a89b99ve25d91d8be64ac38@mail.gmail.com>
	<5E2543B9-A9AD-4D55-8AB1-D1655C7B4A0D@dscpl.com.au>
Message-ID: <4817b6fc0602111444g312c1ddyd139a89ac2c2756e@mail.gmail.com>

Hmm that sounds like it fits the bill. It looks like an evil issue though,
perhaps the way to fix it is not just through mod_python, but also by
improving how apache handles the situation? I don't understand things at
that level enough to be of any help, I'm sure you guys will do the right
thing though with Graham on the case.

-Dan

On 2/11/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
>
> On 12/02/2006, at 9:05 AM, Dan Eloff wrote:
>
> > I've been using mod_python (3.2.2b the last version released for
> > win) for a while now, and I'm really fond of the flexibility it
> > gives me, but I've run across a problem as of late.
> >
> > Apache crashes when shut down with this error, apparently while
> > waiting for worker threads to shut down. The CPU pins up at 100%
> > and then after a few seconds apache crashes.
> >
> > [Sat Feb 11 13:33:56 2006] [crit] [Sat Feb 11 13:33:56 2006] file C:
> > \\asf-build\\build-2.0.55\\server\\mpm\\winnt\\child.c, line 1078,
> > assertion "(rv >= 0) && (rv < threads_created)" failed
> >
> > Has anybody had trouble with this?
>
> It may be related to:
>
>    http://issues.apache.org/jira/browse/MODPYTHON-109
>
> Problem is that mod_python tries to call Py_Finalize() when child
> process
> being killed off, but it is being done from inside signal handler
> context which
> is quite bad. Similar problem if you use req.server.register_cleanup
> () or
> apache.register_cleanup(). The latter functions may have to be removed
> if no equivalent can be found that is safe.
>
> Graham
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060211/55053c78/attachment.html
From nogradi at gmail.com  Sat Feb 11 17:58:16 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 11 17:58:21 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
Message-ID: <5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>

> >>> Anyway, I have the feeling that there must be a more sane and
> >>> probably
> >>> safe way of achieving what I would like by a much simpler method.
> >>>
> >>> Any ideas?
> >>
> >> A quick one.
> >>
> >> Run a small separate daemon process which embeds an  XML-RPC
> >> server and have your web pages use XML-RPC to call that daemon
> >> process to trigger off the task. The daemon process can still fork
> >> exec
> >> as necessary.
> >>
> >> This way you eliminate a fork in Apache child process which may be
> >> problematic because of the socket connections etc that are inherited.
> >
> > Well, that still looks like to me that I'm shooting a bird with a
> > cannon. The reason is that I need to do something really simple: users
> > upload a zip file (remember my questions about the zipfile module? :))
> > and should get an acknowledgement that the upload was successful. The
> > server should start unpacking the archive, check if the files are okay
> > and move them to a directory. All of this can take quite long, so the
> > acknowledgement should be sent before this unpacking/checking/moving
> > finishes.
>
> The suggestion I gave wouldn't preclude an acknowledgement being
> sent before the unpacking begins.
>
> Have you simply considered using a separate thread to do the unpacking?

Hmmmmm, what do you mean exactly? When I do an os.fork the whole
apache forks, you mean that I should start a brand new thread, outside
of apache?

From grahamd at dscpl.com.au  Sat Feb 11 18:08:23 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 11 18:08:35 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
	<5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
Message-ID: <1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>


On 12/02/2006, at 9:58 AM, Daniel Nogradi wrote:

>>>>> Anyway, I have the feeling that there must be a more sane and
>>>>> probably
>>>>> safe way of achieving what I would like by a much simpler method.
>>>>>
>>>>> Any ideas?
>>>>
>>>> A quick one.
>>>>
>>>> Run a small separate daemon process which embeds an  XML-RPC
>>>> server and have your web pages use XML-RPC to call that daemon
>>>> process to trigger off the task. The daemon process can still fork
>>>> exec
>>>> as necessary.
>>>>
>>>> This way you eliminate a fork in Apache child process which may be
>>>> problematic because of the socket connections etc that are  
>>>> inherited.
>>>
>>> Well, that still looks like to me that I'm shooting a bird with a
>>> cannon. The reason is that I need to do something really simple:  
>>> users
>>> upload a zip file (remember my questions about the zipfile  
>>> module? :))
>>> and should get an acknowledgement that the upload was successful.  
>>> The
>>> server should start unpacking the archive, check if the files are  
>>> okay
>>> and move them to a directory. All of this can take quite long, so  
>>> the
>>> acknowledgement should be sent before this unpacking/checking/moving
>>> finishes.
>>
>> The suggestion I gave wouldn't preclude an acknowledgement being
>> sent before the unpacking begins.
>>
>> Have you simply considered using a separate thread to do the  
>> unpacking?
>
> Hmmmmm, what do you mean exactly? When I do an os.fork the whole
> apache forks, you mean that I should start a brand new thread, outside
> of apache?

Using threads you wouldn't need to do an os.fork(). Simply create a  
new thread
using the Python "threading" module inside the Apache process to do the
unpacking. You probably just need to detach the thread so it finishes  
up properly
and doesn't need another thread to wait on it to finish.

Sorry, can't give an example right now as trying to rebuild OS on one  
of my
machines.

Graham
From nogradi at gmail.com  Sat Feb 11 18:24:20 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 11 18:24:24 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
	<5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
	<1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
Message-ID: <5f56302b0602111524o8130900ib3082dffc80009eb@mail.gmail.com>

> >>>>> Anyway, I have the feeling that there must be a more sane and
> >>>>> probably
> >>>>> safe way of achieving what I would like by a much simpler method.
> >>>>>
> >>>>> Any ideas?
> >>>>
> >>>> A quick one.
> >>>>
> >>>> Run a small separate daemon process which embeds an  XML-RPC
> >>>> server and have your web pages use XML-RPC to call that daemon
> >>>> process to trigger off the task. The daemon process can still fork
> >>>> exec
> >>>> as necessary.
> >>>>
> >>>> This way you eliminate a fork in Apache child process which may be
> >>>> problematic because of the socket connections etc that are
> >>>> inherited.
> >>>
> >>> Well, that still looks like to me that I'm shooting a bird with a
> >>> cannon. The reason is that I need to do something really simple:
> >>> users
> >>> upload a zip file (remember my questions about the zipfile
> >>> module? :))
> >>> and should get an acknowledgement that the upload was successful.
> >>> The
> >>> server should start unpacking the archive, check if the files are
> >>> okay
> >>> and move them to a directory. All of this can take quite long, so
> >>> the
> >>> acknowledgement should be sent before this unpacking/checking/moving
> >>> finishes.
> >>
> >> The suggestion I gave wouldn't preclude an acknowledgement being
> >> sent before the unpacking begins.
> >>
> >> Have you simply considered using a separate thread to do the
> >> unpacking?
> >
> > Hmmmmm, what do you mean exactly? When I do an os.fork the whole
> > apache forks, you mean that I should start a brand new thread, outside
> > of apache?
>
> Using threads you wouldn't need to do an os.fork(). Simply create a
> new thread
> using the Python "threading" module inside the Apache process to do the
> unpacking. You probably just need to detach the thread so it finishes
> up properly
> and doesn't need another thread to wait on it to finish.
>
> Sorry, can't give an example right now as trying to rebuild OS on one
> of my
> machines.

Good luck! I'll look into threading in the meantime.

From nogradi at gmail.com  Sat Feb 11 19:41:27 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 11 19:41:31 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602111524o8130900ib3082dffc80009eb@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
	<5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
	<1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
	<5f56302b0602111524o8130900ib3082dffc80009eb@mail.gmail.com>
Message-ID: <5f56302b0602111641w746457e6j31abb54da3cec7b0@mail.gmail.com>

> > >>>>> Anyway, I have the feeling that there must be a more sane and
> > >>>>> probably
> > >>>>> safe way of achieving what I would like by a much simpler method.
> > >>>>>
> > >>>>> Any ideas?
> > >>>>
> > >>>> A quick one.
> > >>>>
> > >>>> Run a small separate daemon process which embeds an  XML-RPC
> > >>>> server and have your web pages use XML-RPC to call that daemon
> > >>>> process to trigger off the task. The daemon process can still fork
> > >>>> exec
> > >>>> as necessary.
> > >>>>
> > >>>> This way you eliminate a fork in Apache child process which may be
> > >>>> problematic because of the socket connections etc that are
> > >>>> inherited.
> > >>>
> > >>> Well, that still looks like to me that I'm shooting a bird with a
> > >>> cannon. The reason is that I need to do something really simple:
> > >>> users
> > >>> upload a zip file (remember my questions about the zipfile
> > >>> module? :))
> > >>> and should get an acknowledgement that the upload was successful.
> > >>> The
> > >>> server should start unpacking the archive, check if the files are
> > >>> okay
> > >>> and move them to a directory. All of this can take quite long, so
> > >>> the
> > >>> acknowledgement should be sent before this unpacking/checking/moving
> > >>> finishes.
> > >>
> > >> The suggestion I gave wouldn't preclude an acknowledgement being
> > >> sent before the unpacking begins.
> > >>
> > >> Have you simply considered using a separate thread to do the
> > >> unpacking?
> > >
> > > Hmmmmm, what do you mean exactly? When I do an os.fork the whole
> > > apache forks, you mean that I should start a brand new thread, outside
> > > of apache?
> >
> > Using threads you wouldn't need to do an os.fork(). Simply create a
> > new thread
> > using the Python "threading" module inside the Apache process to do the
> > unpacking. You probably just need to detach the thread so it finishes
> > up properly
> > and doesn't need another thread to wait on it to finish.
> >
> > Sorry, can't give an example right now as trying to rebuild OS on one
> > of my
> > machines.

The documentation for thread says that

When the main thread exits, it is system defined whether the other
threads survive. On SGI IRIX using the native thread implementation,
they survive. On most other systems, they are killed without executing
try ... finally clauses or executing object destructors.

I tested this and indeed whatever is called with
thread.start_new_thread it will die if execution reaches the end of
the original program.

From fumanchu at amor.org  Sat Feb 11 19:48:25 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Sat Feb 11 19:47:13 2006
Subject: [mod_python] Re: forks, daemons and other beasts
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com><3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au><5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com><762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au><5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
	<1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
Message-ID: <6949EC6CD39F97498A57E0FA55295B21411606@ex9.hostedexchange.local>

Daniel Nogradi wrote:
> users upload a zip file and should get an acknowledgement
> that the upload was successful. The server should start
> unpacking the archive, check if the files are okay and
> move them to a directory. All of this can take quite long,
> so the acknowledgement should be sent before this
> unpacking/checking/moving finishes.

and Graham Dumpleton replied:
> The suggestion I gave wouldn't preclude an acknowledgement
> being sent before the unpacking begins.
> 
> Have you simply considered using a separate thread to do the
> unpacking?
> ...
> Using threads you wouldn't need to do an os.fork(). Simply
> create a new thread using the Python "threading" module
> inside the Apache process to do the unpacking. You probably
> just need to detach the thread so it finishes up properly
> and doesn't need another thread to wait on it to finish.

If you're using a multi-threaded MPM, you might not even want to detach it. It can be useful to let Apache return a "server unavailable" (503) response if all of your threads are busy unzipping files. If you're using a multi-process MPM, you might just do it in the same process to achieve the same effect.

The thread or process won't die just because the client closes the connection. Right away, I'd give them the option: "Thanks for the file! It's being unzipped and processed now. You can trust me and close your browser, or wait for a final confirmation message when I'm done." Then, when the long process is done, write out the "final confirmation message" whether they're connected or not--Apache won't choke on that if they've left.


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060211/bbd7289d/attachment.html
From grahamd at dscpl.com.au  Sat Feb 11 20:08:20 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 11 20:08:32 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602111641w746457e6j31abb54da3cec7b0@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
	<5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
	<1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
	<5f56302b0602111524o8130900ib3082dffc80009eb@mail.gmail.com>
	<5f56302b0602111641w746457e6j31abb54da3cec7b0@mail.gmail.com>
Message-ID: <F6B70AC5-5743-42AF-B3BD-81A1855D3BD1@dscpl.com.au>


On 12/02/2006, at 11:41 AM, Daniel Nogradi wrote:

>>>>> Have you simply considered using a separate thread to do the
>>>>> unpacking?
>>>>
>>>> Hmmmmm, what do you mean exactly? When I do an os.fork the whole
>>>> apache forks, you mean that I should start a brand new thread,  
>>>> outside
>>>> of apache?
>>>
>>> Using threads you wouldn't need to do an os.fork(). Simply create a
>>> new thread
>>> using the Python "threading" module inside the Apache process to  
>>> do the
>>> unpacking. You probably just need to detach the thread so it  
>>> finishes
>>> up properly
>>> and doesn't need another thread to wait on it to finish.
>>>
>>> Sorry, can't give an example right now as trying to rebuild OS on  
>>> one
>>> of my
>>> machines.
>
> The documentation for thread says that
>
> When the main thread exits, it is system defined whether the other
> threads survive. On SGI IRIX using the native thread implementation,
> they survive. On most other systems, they are killed without executing
> try ... finally clauses or executing object destructors.
>
> I tested this and indeed whatever is called with
> thread.start_new_thread it will die if execution reaches the end of
> the original program.

I would suggest not using the "thread" module. Use the higher level  
"threading"
module. The detaching I spoke of, is to ensure you call setDaemon()  
on the
thread object before you call start() on the thread.

What happens on Apache shutdown will be an issue. Not because of what
you quote above, but because Apache uses signals to kill off child  
processes
with it sending SIGKILL if it doesn't shutdown promptly after a  
series of
SIGTERM signals.

Because the main thread isn't the Python interpreter, what you state  
above
doesn't even come into play as the main Python thread will not be  
exited to
trigger the situation.

What will happen is that if a zip file is half unpacked and Apache  
decides it
has waited too long, it will simply kill the process with SIGKILL.  
Your code thus
has to be able to cope with possibility that unpacking of zipfile may  
not be
finished in extreme case. This could be handled by doing it into a  
temporary
directive and only moving to final directory in one atomic move at  
the end.
At least then you don't end up with partial results.

If the unpacking was still done in a separate processes which is  
triggered by
XML-RPC, the unpacking could at least be done serialised on order of
receipt. If that process crashes half way through, it could realise  
that it
had died and when starting up, start again consuming pending zip files.
With Apache that would be hard to do, as you have multiple child  
processes
so who would be responsible for clearing out the pending queue on a  
restart.

Graham
From nogradi at gmail.com  Sat Feb 11 20:13:47 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 11 20:13:49 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <6949EC6CD39F97498A57E0FA55295B21411606@ex9.hostedexchange.local>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
	<5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
	<1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
	<6949EC6CD39F97498A57E0FA55295B21411606@ex9.hostedexchange.local>
Message-ID: <5f56302b0602111713t3543cd73q8b057ddb8b2825c4@mail.gmail.com>

> > users upload a zip file and should get an acknowledgement
> > that the upload was successful. The server should start
> > unpacking the archive, check if the files are okay and
> > move them to a directory. All of this can take quite long,
> > so the acknowledgement should be sent before this
> > unpacking/checking/moving finishes.
>
> > The suggestion I gave wouldn't preclude an acknowledgement
> > being sent before the unpacking begins.
> >
> > Have you simply considered using a separate thread to do the
> > unpacking?
> > ...
> > Using threads you wouldn't need to do an os.fork(). Simply
> > create a new thread using the Python "threading" module
> > inside the Apache process to do the unpacking. You probably
> > just need to detach the thread so it finishes up properly
> > and doesn't need another thread to wait on it to finish.
>
> If you're using a multi-threaded MPM, you might not even want to detach it.
> It can be useful to let Apache return a "server unavailable" (503) response
> if all of your threads are busy unzipping files. If you're using a
> multi-process MPM, you might just do it in the same process to achieve the
> same effect.
>
> The thread or process won't die just because the client closes the
> connection. Right away, I'd give them the option: "Thanks for the file! It's
> being unzipped and processed now. You can trust me and close your browser,
> or wait for a final confirmation message when I'm done." Then, when the long
> process is done, write out the "final confirmation message" whether they're
> connected or not--Apache won't choke on that if they've left.

This sounds exactly what I would need, unfortunately I don't quite get
it. I tried this with the publisher handler:

def x( ):
    f = open( "/tmp/test", "w" )
    for i in range(1,10000):
        for j in range(1,10000):
            f.write( "%d %d\n" % ( i , j ) )
    f.close()


def test( req ):
    thread.start_new_thread( x, ( ) )
    time.sleep( 2 )
    return "okay"

And after accessing test( ) from a client the file /tmp/test will only
contain as many numbers as can be written in 2 seconds before reaching
return "okay". So when the main thread finishes, the new thread also
dies. Or did I misunderstand something?

From nogradi at gmail.com  Sat Feb 11 20:26:06 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 11 20:26:11 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <F6B70AC5-5743-42AF-B3BD-81A1855D3BD1@dscpl.com.au>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
	<5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
	<1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
	<5f56302b0602111524o8130900ib3082dffc80009eb@mail.gmail.com>
	<5f56302b0602111641w746457e6j31abb54da3cec7b0@mail.gmail.com>
	<F6B70AC5-5743-42AF-B3BD-81A1855D3BD1@dscpl.com.au>
Message-ID: <5f56302b0602111726m55273c3ciadf79d08bb7b97a1@mail.gmail.com>

> >>>>> Have you simply considered using a separate thread to do the
> >>>>> unpacking?
> >>>>
> >>>> Hmmmmm, what do you mean exactly? When I do an os.fork the whole
> >>>> apache forks, you mean that I should start a brand new thread,
> >>>> outside
> >>>> of apache?
> >>>
> >>> Using threads you wouldn't need to do an os.fork(). Simply create a
> >>> new thread
> >>> using the Python "threading" module inside the Apache process to
> >>> do the
> >>> unpacking. You probably just need to detach the thread so it
> >>> finishes
> >>> up properly
> >>> and doesn't need another thread to wait on it to finish.
> >>>
> >>> Sorry, can't give an example right now as trying to rebuild OS on
> >>> one
> >>> of my
> >>> machines.
> >
> > The documentation for thread says that
> >
> > When the main thread exits, it is system defined whether the other
> > threads survive. On SGI IRIX using the native thread implementation,
> > they survive. On most other systems, they are killed without executing
> > try ... finally clauses or executing object destructors.
> >
> > I tested this and indeed whatever is called with
> > thread.start_new_thread it will die if execution reaches the end of
> > the original program.
>
> I would suggest not using the "thread" module. Use the higher level
> "threading"
> module. The detaching I spoke of, is to ensure you call setDaemon()
> on the
> thread object before you call start() on the thread.
>
> What happens on Apache shutdown will be an issue. Not because of what
> you quote above, but because Apache uses signals to kill off child
> processes
> with it sending SIGKILL if it doesn't shutdown promptly after a
> series of
> SIGTERM signals.
>
> Because the main thread isn't the Python interpreter, what you state
> above
> doesn't even come into play as the main Python thread will not be
> exited to
> trigger the situation.
>
> What will happen is that if a zip file is half unpacked and Apache
> decides it
> has waited too long, it will simply kill the process with SIGKILL.
> Your code thus
> has to be able to cope with possibility that unpacking of zipfile may
> not be
> finished in extreme case. This could be handled by doing it into a
> temporary
> directive and only moving to final directory in one atomic move at
> the end.
> At least then you don't end up with partial results.
>
> If the unpacking was still done in a separate processes which is
> triggered by
> XML-RPC, the unpacking could at least be done serialised on order of
> receipt. If that process crashes half way through, it could realise
> that it
> had died and when starting up, start again consuming pending zip files.
> With Apache that would be hard to do, as you have multiple child
> processes
> so who would be responsible for clearing out the pending queue on a
> restart.

Oh, I just remembered that I set MaxRequestsPerChild 1 for apache in
order to avoid the famous import/reload problem and that was the
reason the thread died after the request was served. Now that I put it
back to some higher value it doesn't die and does exactly what I want
using thread.start_new_thread.

By the way, what's the problem with thread as opposed to threading?

From grahamd at dscpl.com.au  Sat Feb 11 20:31:27 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 11 20:31:39 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602111726m55273c3ciadf79d08bb7b97a1@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<762C6F9B-C9F1-4020-BC57-BE830C137A26@dscpl.com.au>
	<5f56302b0602111458h3a6f7355v9eb5daa9b6a76d1d@mail.gmail.com>
	<1DF62B8A-2F12-4D4B-A6AE-94EBE87E07AA@dscpl.com.au>
	<5f56302b0602111524o8130900ib3082dffc80009eb@mail.gmail.com>
	<5f56302b0602111641w746457e6j31abb54da3cec7b0@mail.gmail.com>
	<F6B70AC5-5743-42AF-B3BD-81A1855D3BD1@dscpl.com.au>
	<5f56302b0602111726m55273c3ciadf79d08bb7b97a1@mail.gmail.com>
Message-ID: <46932629-C541-46BF-B591-091863D9BA6A@dscpl.com.au>


On 12/02/2006, at 12:26 PM, Daniel Nogradi wrote:

> Oh, I just remembered that I set MaxRequestsPerChild 1 for apache in
> order to avoid the famous import/reload problem and that was the
> reason the thread died after the request was served. Now that I put it
> back to some higher value it doesn't die and does exactly what I want
> using thread.start_new_thread.
>
> By the way, what's the problem with thread as opposed to threading?

Encapsulation of features in "threading" is simply better and easier to
work with.

Graham
From bburns at synset.net  Sat Feb 11 22:55:48 2006
From: bburns at synset.net (Barry Burns)
Date: Sat Feb 11 22:55:56 2006
Subject: [mod_python] Re: forks, daemons, and other beasts
Message-ID: <43EEB1C4.2060908@synset.net>

> The documentation for thread says that
> 
> When the main thread exits, it is system defined whether the other
> threads survive. On SGI IRIX using the native thread implementation,
> they survive. On most other systems, they are killed without executing
> try ... finally clauses or executing object destructors.
> 
> I tested this and indeed whatever is called with
> thread.start_new_thread it will die if execution reaches the end of
> the original program.

This may be completely off, but how about sending the notification, closing the connection to the client, then unzipping in the same thread? 

-b

From grahamd at dscpl.com.au  Sat Feb 11 23:32:03 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 11 23:32:11 2006
Subject: [mod_python] Re: forks, daemons, and other beasts
In-Reply-To: <43EEB1C4.2060908@synset.net>
References: <43EEB1C4.2060908@synset.net>
Message-ID: <1C53242C-160E-4C33-88B9-2B5FD61B46E8@dscpl.com.au>


On 12/02/2006, at 2:55 PM, Barry Burns wrote:

>> The documentation for thread says that
>> When the main thread exits, it is system defined whether the other
>> threads survive. On SGI IRIX using the native thread implementation,
>> they survive. On most other systems, they are killed without  
>> executing
>> try ... finally clauses or executing object destructors.
>> I tested this and indeed whatever is called with
>> thread.start_new_thread it will die if execution reaches the end of
>> the original program.
>
> This may be completely off, but how about sending the notification,  
> closing the connection to the client, then unzipping in the same  
> thread?

I doubt the client socket connection would be closed off if one did that
and if no content length was specified, the client browser would  
probably
hang waiting for socket connection to close and thus would not  
necessarily
render what it had already received. In other words, the content handler
has to return for socket connection to get closed off. That is also  
presuming
that keep alive is not enabled.

Graham
From nicolas at lehuen.com  Sun Feb 12 04:33:25 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Sun Feb 12 04:34:01 2006
Subject: [mod_python] Apache crashing
In-Reply-To: <4817b6fc0602111405m7a89b99ve25d91d8be64ac38@mail.gmail.com>
References: <4817b6fc0602111405m7a89b99ve25d91d8be64ac38@mail.gmail.com>
Message-ID: <c298f2d70602120133s2fabc319h@mail.gmail.com>

Yup, this is the bug I was writing about a few days ago on the
developers mailing list.

Regards,
Nicolas

2006/2/11, Dan Eloff <dan.eloff@gmail.com>:
> I've been using mod_python (3.2.2b the last version released for win) for a
> while now, and I'm really fond of the flexibility it gives me, but I've run
> across a problem as of late.
>
> Apache crashes when shut down with this error, apparently while waiting for
> worker threads to shut down. The CPU pins up at 100% and then after a few
> seconds apache crashes.
>
> [Sat Feb 11 13:33:56 2006] [crit] [Sat Feb 11 13:33:56 2006] file
> C:\\asf-build\\build-2.0.55\\server\\mpm\\winnt\\child.c,
> line 1078, assertion "(rv >= 0) && (rv < threads_created)" failed
>
> Has anybody had trouble with this?
>
> Thanks,
> -Dan
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>

From grahamd at dscpl.com.au  Sun Feb 12 05:34:51 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 12 05:35:02 2006
Subject: [mod_python] Re: forks, daemons, and other beasts
In-Reply-To: <43EF0DAF.2080103@synset.net>
References: <43EEB1C4.2060908@synset.net>
	<1C53242C-160E-4C33-88B9-2B5FD61B46E8@dscpl.com.au>
	<43EF0DAF.2080103@synset.net>
Message-ID: <0D2130C2-3B07-46E7-8610-FDFEC0E62029@dscpl.com.au>


On 12/02/2006, at 9:27 PM, Barry Burns wrote:

> Graham Dumpleton wrote:
>>
>> On 12/02/2006, at 2:55 PM, Barry Burns wrote:
>>
>>>> The documentation for thread says that
>>>> When the main thread exits, it is system defined whether the other
>>>> threads survive. On SGI IRIX using the native thread  
>>>> implementation,
>>>> they survive. On most other systems, they are killed without  
>>>> executing
>>>> try ... finally clauses or executing object destructors.
>>>> I tested this and indeed whatever is called with
>>>> thread.start_new_thread it will die if execution reaches the end of
>>>> the original program.
>>>
>>> This may be completely off, but how about sending the  
>>> notification, closing the connection to the client, then  
>>> unzipping in the same thread?
>>
>> I doubt the client socket connection would be closed off if one  
>> did that
>> and if no content length was specified, the client browser would  
>> probably
>> hang waiting for socket connection to close and thus would not  
>> necessarily
>> render what it had already received. In other words, the content  
>> handler
>> has to return for socket connection to get closed off. That is  
>> also presuming
>> that keep alive is not enabled.
>>
>> Graham
> I think you might've misunderstood what I meant, or else I said it  
> wrong. I'm talking about sending some data along, then manually  
> doing whatever the mod_python equivalent of shutdown(socket,  
> SHUT_RDWR) is, then performing what you need to do (in this case  
> unzipping). AFAIK, this guarantees that the connection is closed by  
> sending FIN, rather than the alternative, simply closing it (which  
> will leave the connection hanging if the fd is open in any other  
> threads or processes).
>
> Another possibility is dumping the zip file into an incoming  
> directory, then having a cron job or scheduled task periodically  
> unzip any files in that directory. I don't know if this would work  
> for your application, though.

I knew what you meant. It simply isn't possible in mod_python/Apache  
to say
shutdown the socket connection. There are potentially various layers  
of Apache
filters and other stuff between the mod_python handler and the socket  
and
mod_python doesn't have a direct handle on the socket that it can  
manipulate.
Thus, in the context of mod_python, it isn't that simple.

Graham
From nogradi at gmail.com  Sun Feb 12 06:03:47 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sun Feb 12 06:03:53 2006
Subject: [mod_python] Re: forks, daemons, and other beasts
In-Reply-To: <0D2130C2-3B07-46E7-8610-FDFEC0E62029@dscpl.com.au>
References: <43EEB1C4.2060908@synset.net>
	<1C53242C-160E-4C33-88B9-2B5FD61B46E8@dscpl.com.au>
	<43EF0DAF.2080103@synset.net>
	<0D2130C2-3B07-46E7-8610-FDFEC0E62029@dscpl.com.au>
Message-ID: <5f56302b0602120303u685b877ck3f169fcb300d3224@mail.gmail.com>

> >>>> The documentation for thread says that
> >>>> When the main thread exits, it is system defined whether the other
> >>>> threads survive. On SGI IRIX using the native thread
> >>>> implementation,
> >>>> they survive. On most other systems, they are killed without
> >>>> executing
> >>>> try ... finally clauses or executing object destructors.
> >>>> I tested this and indeed whatever is called with
> >>>> thread.start_new_thread it will die if execution reaches the end of
> >>>> the original program.
> >>>
> >>> This may be completely off, but how about sending the
> >>> notification, closing the connection to the client, then
> >>> unzipping in the same thread?
> >>
> >> I doubt the client socket connection would be closed off if one
> >> did that
> >> and if no content length was specified, the client browser would
> >> probably
> >> hang waiting for socket connection to close and thus would not
> >> necessarily
> >> render what it had already received. In other words, the content
> >> handler
> >> has to return for socket connection to get closed off. That is
> >> also presuming
> >> that keep alive is not enabled.
> >>
> >> Graham
> > I think you might've misunderstood what I meant, or else I said it
> > wrong. I'm talking about sending some data along, then manually
> > doing whatever the mod_python equivalent of shutdown(socket,
> > SHUT_RDWR) is, then performing what you need to do (in this case
> > unzipping). AFAIK, this guarantees that the connection is closed by
> > sending FIN, rather than the alternative, simply closing it (which
> > will leave the connection hanging if the fd is open in any other
> > threads or processes).
> >
> > Another possibility is dumping the zip file into an incoming
> > directory, then having a cron job or scheduled task periodically
> > unzip any files in that directory. I don't know if this would work
> > for your application, though.
>
> I knew what you meant. It simply isn't possible in mod_python/Apache
> to say
> shutdown the socket connection. There are potentially various layers
> of Apache
> filters and other stuff between the mod_python handler and the socket
> and
> mod_python doesn't have a direct handle on the socket that it can
> manipulate.
> Thus, in the context of mod_python, it isn't that simple.

One more thought: it seems that if MaxRequestsPerChild is 1, then
anything threaded from the script handling the request will die when
the script ends, but if MaxRequestsPerChild is N > 1, then it doesn't
die, so everything seems to be okay. But what if the request is
exactly the Nth for that particular child, then it will be the same as
before, and the thread will die, won't it?

From grahamd at dscpl.com.au  Sun Feb 12 06:15:13 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 12 06:15:27 2006
Subject: [mod_python] Re: forks, daemons, and other beasts
In-Reply-To: <5f56302b0602120303u685b877ck3f169fcb300d3224@mail.gmail.com>
References: <43EEB1C4.2060908@synset.net>
	<1C53242C-160E-4C33-88B9-2B5FD61B46E8@dscpl.com.au>
	<43EF0DAF.2080103@synset.net>
	<0D2130C2-3B07-46E7-8610-FDFEC0E62029@dscpl.com.au>
	<5f56302b0602120303u685b877ck3f169fcb300d3224@mail.gmail.com>
Message-ID: <6BBED8AA-7B9F-4C97-9399-920A05C695BE@dscpl.com.au>


On 12/02/2006, at 10:03 PM, Daniel Nogradi wrote:
> One more thought: it seems that if MaxRequestsPerChild is 1, then
> anything threaded from the script handling the request will die when
> the script ends, but if MaxRequestsPerChild is N > 1, then it doesn't
> die, so everything seems to be okay. But what if the request is
> exactly the Nth for that particular child, then it will be the same as
> before, and the thread will die, won't it?

Correct. That is why I suggested it be done in an external persistent
daemon process in the first place. You can't guarantee that Apache
will not decide to kill off its child processes. Here you illustrate the
problem for where MaxRequestPerChild is used, but it can also kill
off child processes if it has excess child processes over some limit
as well and the child processes are being under utilised.

Graham
From dpopowich at comcast.net  Sun Feb 12 15:00:55 2006
From: dpopowich at comcast.net (Daniel J. Popowich)
Date: Sun Feb 12 15:00:34 2006
Subject: [mod_python] Re: forks, daemons, and other beasts
In-Reply-To: <5f56302b0602120303u685b877ck3f169fcb300d3224@mail.gmail.com>
References: <43EEB1C4.2060908@synset.net>
	<1C53242C-160E-4C33-88B9-2B5FD61B46E8@dscpl.com.au>
	<43EF0DAF.2080103@synset.net>
	<0D2130C2-3B07-46E7-8610-FDFEC0E62029@dscpl.com.au>
	<5f56302b0602120303u685b877ck3f169fcb300d3224@mail.gmail.com>
Message-ID: <17391.37879.520230.299247@io.astro.umass.edu>

Daniel Nogradi writes:
> > >>>> The documentation for thread says that
> > >>>> When the main thread exits, it is system defined whether the other
> > >>>> threads survive. On SGI IRIX using the native thread
> > >>>> implementation,
> > >>>> they survive. On most other systems, they are killed without
> > >>>> executing
> > >>>> try ... finally clauses or executing object destructors.
> > >>>> I tested this and indeed whatever is called with
> > >>>> thread.start_new_thread it will die if execution reaches the end of
> > >>>> the original program.
> > >>>
> > >>> This may be completely off, but how about sending the
> > >>> notification, closing the connection to the client, then
> > >>> unzipping in the same thread?
> > >>
> > >> I doubt the client socket connection would be closed off if one
> > >> did that
> > >> and if no content length was specified, the client browser would
> > >> probably
> > >> hang waiting for socket connection to close and thus would not
> > >> necessarily
> > >> render what it had already received. In other words, the content
> > >> handler
> > >> has to return for socket connection to get closed off. That is
> > >> also presuming
> > >> that keep alive is not enabled.
> > >>
> > >> Graham
> > > I think you might've misunderstood what I meant, or else I said it
> > > wrong. I'm talking about sending some data along, then manually
> > > doing whatever the mod_python equivalent of shutdown(socket,
> > > SHUT_RDWR) is, then performing what you need to do (in this case
> > > unzipping). AFAIK, this guarantees that the connection is closed by
> > > sending FIN, rather than the alternative, simply closing it (which
> > > will leave the connection hanging if the fd is open in any other
> > > threads or processes).
> > >
> > > Another possibility is dumping the zip file into an incoming
> > > directory, then having a cron job or scheduled task periodically
> > > unzip any files in that directory. I don't know if this would work
> > > for your application, though.
> >
> > I knew what you meant. It simply isn't possible in mod_python/Apache
> > to say
> > shutdown the socket connection. There are potentially various layers
> > of Apache
> > filters and other stuff between the mod_python handler and the socket
> > and
> > mod_python doesn't have a direct handle on the socket that it can
> > manipulate.
> > Thus, in the context of mod_python, it isn't that simple.
> 
> One more thought: it seems that if MaxRequestsPerChild is 1, then
> anything threaded from the script handling the request will die when
> the script ends, but if MaxRequestsPerChild is N > 1, then it doesn't
> die, so everything seems to be okay. But what if the request is
> exactly the Nth for that particular child, then it will be the same as
> before, and the thread will die, won't it?


As has been discussed there are interoperability issues with apache if
you use spawn* calls, threading and I can't imagine what would happen
with exec* calls.

If you are on a unix system I think the easiest way to go is put your
post-processing in a script (a python script of course!) that traps
the TERM signal and then use the os.system() call in your handler.

For example, if you have this script, /tmp/foo.py:

    ############################################################
    # /tmp/foo.py

    import signal
    import time

    # ignore the TERM signal, so if apache kills the child process
    # that forked me I won't die.
    signal.signal(signal.SIGTERM, signal.SIG_IGN)

    # Your Code Here!
    # for this demo we'll sleep, so you have time to stop apache and
    # see this is still running
    time.sleep(30)

    # some output to prove we ran
    print "hello, world"

    #
    ############################################################


Then in your handler:

    os.system('python /tmp/foo.py >& /tmp/foo.log &')

If you're not familiar with unix: the above executes the script as if
you typed it in a terminal running a shell.  Stdout and stderr are
redirected to /tmp/foo.log, else they will be inherited from apache's,
which is probably not what we want.  The trailing ampersand will put
the job in the background, detaching from the parent process.

Hope this helps!

Daniel Popowich
---------------
http://home.comcast.net/~d.popowich/mpservlets/
From nlv11281 at natlab.research.philips.com  Mon Feb 13 03:01:44 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Mon Feb 13 03:13:52 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
Message-ID: <43F03CE8.2060000@natlab.research.philips.com>

>>Run a small separate daemon process which embeds an  XML-RPC
>>server and have your web pages use XML-RPC to call that daemon
>>process to trigger off the task. The daemon process can still fork exec
>>as necessary.
>>
>>This way you eliminate a fork in Apache child process which may be
>>problematic because of the socket connections etc that are inherited.
> 
> 
> Well, that still looks like to me that I'm shooting a bird with a
> cannon. The reason is that I need to do something really simple: users
> upload a zip file (remember my questions about the zipfile module? :))
> and should get an acknowledgement that the upload was successful. The
> server should start unpacking the archive, check if the files are okay
> and move them to a directory. All of this can take quite long, so the
> acknowledgement should be sent before this unpacking/checking/moving
> finishes.

(Uh... Just one observation: They UPLOAD a ZIP file, and you expect the 
unpacking to take longer than that?)

You might consider using the latest mod_python 3.2.7 modification that 
supports file "streaming". You can unpack the ZIP while it's being 
uploaded. This also prevents using TEMP space. And when the upload is 
ready, the files are there as well. I tested this method for uploading 
multi-gigabyte TAR files.

The trick is to add a file callback to the FieldStorage object. I have 
attached a sample upload PSP script that just counts bytes. I'll leave 
it up to your imagination to feed the data into a ZipFile object.

Attempting to fork extra threads or processes from within an Apache 
instance will bring you lots of troubles - and you never know what 
happens in future versions.

--
Mike Looijmans
-------------- next part --------------
<%
import fmt
%>
<html>
<head>
  <title>Upload</title>
  <%= fmt.style %>
</head>
<body>
<h1>Upload</h1>
<p><a href="upload.psp?reset=log">Reset</a></p>
      
<form enctype="multipart/form-data" method="POST" action="upload.psp?doit=yes">
<p>File:<br>
  <input type=file size=64 name="archivefile"><br>
  <input type=file size=64 name="archivefile"><br>
  <input type=file size=64 name="archivefile">
</p>
<p>Action:
  <input type=submit name=action value="Create">
</p>
</form>

<%

from mod_python import util

class FileCounter:
    def __init__(self, name):
        self.size = 0
        self.blocks = 0
        self.blocksize = 0
        self.name = name
    def write(self, data):
        l = len(data)
        self.size += l
        self.blocks += 1
        if l > self.blocksize: self.blocksize = l
    def seek(self, pos):
        pass

def make_file(filename):
    req.write('<p>makefile: ' + str(filename) + '</p>\n')
    return FileCounter(filename)

frm = util.FieldStorage(req, file_callback=make_file)
for afile in frm.getlist('archivefile'):
    req.write('<p>File name: <b>%s</b>\n' % afile.filename)
    req.write('read: <b>%d</b> bytes, <b>%d</b> blocks max blocksize: <b>%d</b></p>\n' % (afile.file.size, afile.file.blocks, afile.file.blocksize))
  

# end if
%>

</body>
</html>
From grisha at apache.org  Mon Feb 13 10:51:32 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Mon Feb 13 10:51:56 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.2.7
Message-ID: <20060213104603.V24288@grisha.dyndns.org>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the 3.2.7 release of mod_python. Mod_python 3.2.7
is considered a stable release, suitable for production use.

Mod_python is an Apache HTTP Server module that embeds the Python
language interpreter within the server. With mod_python you can write
web-based applications in Python that will run many times faster than
traditional CGI and will have access to advanced features such as
ability to maintain objects between requests, access to httpd
internals, content filters and connection handlers.

The 3.2.7 release has many new features, feature enhancements, fixed
bugs and other improvements over the previous version. See Appendix A
of mod_python documentation for more details.

Mod_python 3.2.7 is released under Apache License version 2.0.

Mod_python 3.2.7 is available for download from:

http://httpd.apache.org/modules/python-download.cgi

More information about mod_python is available at:

http://httpd.apache.org/modules/

Many thanks to Jim Gallacher, Graham Dumpleton, Nicolas Lehuen and
everyone else who contributed to and helped test this release, without
your help it would not be possible!

Regards,

Grisha Trubetskoy
From grisha at apache.org  Mon Feb 13 10:51:32 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Mon Feb 13 11:58:02 2006
Subject: [mod_python] [SPAM] ANNOUNCE: Mod_python 3.2.7
Message-ID: <20060213104603.V24288@grisha.dyndns.org>

The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the 3.2.7 release of mod_python. Mod_python 3.2.7
is considered a stable release, suitable for production use.

Mod_python is an Apache HTTP Server module that embeds the Python
language interpreter within the server. With mod_python you can write
web-based applications in Python that will run many times faster than
traditional CGI and will have access to advanced features such as
ability to maintain objects between requests, access to httpd
internals, content filters and connection handlers.

The 3.2.7 release has many new features, feature enhancements, fixed
bugs and other improvements over the previous version. See Appendix A
of mod_python documentation for more details.

Mod_python 3.2.7 is released under Apache License version 2.0.

Mod_python 3.2.7 is available for download from:

http://httpd.apache.org/modules/python-download.cgi

More information about mod_python is available at:

http://httpd.apache.org/modules/

Many thanks to Jim Gallacher, Graham Dumpleton, Nicolas Lehuen and
everyone else who contributed to and helped test this release, without
your help it would not be possible!

Regards,

Grisha Trubetskoy

From nogradi at gmail.com  Mon Feb 13 15:44:52 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Mon Feb 13 15:44:59 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <43F03CE8.2060000@natlab.research.philips.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<43F03CE8.2060000@natlab.research.philips.com>
Message-ID: <5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>

> (Uh... Just one observation: They UPLOAD a ZIP file, and you expect the 
> unpacking to take longer than that?)

The unpacking itself doesn't take that long, but until the unpacked files reach their final destination (directories, databases, etc) will take quite some time as they have to be processed in some way. But I agree, uploading takes much longer, but I would like to make the waiting time for the users as short as possible, and in principle the unpacking/processing/etc can be done after they receive an acknowledgement page.

> You might consider using the latest mod_python 3.2.7 modification that 
> supports file "streaming". You can unpack the ZIP while it's being 
> uploaded. This also prevents using TEMP space. And when the upload is 
> ready, the files are there as well. I tested this method for uploading 
> multi-gigabyte TAR files.
> 
> The trick is to add a file callback to the FieldStorage object. I have 
> attached a sample upload PSP script that just counts bytes. I'll leave 
> it up to your imagination to feed the data into a ZipFile object.
> 
> Attempting to fork extra threads or processes from within an Apache 
> instance will bring you lots of troubles - and you never know what 
> happens in future versions.
> 
> --
> Mike Looijmans
> 
> 

Thanks a lot for the code, I didn't even think about such an approach, this would be the best of course.


> For example, if you have this script, /tmp/foo.py:
> 
>     ############################################################
>     # /tmp/foo.py
> 
>     import signal
>     import time
> 
>     # ignore the TERM signal, so if apache kills the child process
>     # that forked me I won't die.
>     signal.signal(signal.SIGTERM, signal.SIG_IGN)
> 
>     # Your Code Here!
>     # for this demo we'll sleep, so you have time to stop apache and
>     # see this is still running
>     time.sleep(30)
> 
>     # some output to prove we ran
>     print "hello, world"
> 
>     #
>     ############################################################
> 
> 
> Then in your handler:
> 
>     os.system('python /tmp/foo.py >& /tmp/foo.log &')
> 
> 
> Daniel Popowich
> ---------------
> http://home.comcast.net/~d.popowich/mpservlets/


I'm not sure I understand this. AFAIK both os.spawn* and os.system start a brand new process, with the only difference being how command line arguments are handled. Or not?

From grahamd at dscpl.com.au  Mon Feb 13 16:46:12 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 13 16:46:17 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.2.7
Message-ID: <1139867172.28701@dscpl.user.openhosting.com>

The SSL stuff is down for version 3.3. Ie., not in this release. The 3.2 release
was half way out the door at that point, so was really referring to the release
after that.

Graham

Tomasz Wlodek wrote ..
> Hi,
> 
> Few weeks ago I posted a question to mod_python discussion group about
> how
> to pass environment variables from mod_ssl to mod_python authentication
> handler.
> 
> Graham was kind enough to answer that this cannot be done without some
> fixes, however that you plan to make this possible in the future editions
> of mod_python.
> 
> Does this new edition allow of reading mod_ssl variables from mod_python
> authentication handlers, or this feature will come in next release?
> 
> Tomasz Wlodek                        | tel 631-344-7448
> Brookhaven Laboratory, Building 510M | fax 631-344-7616
> Upton NY 11973-5000                  |
> 
> On Mon, 13 Feb 2006, Gregory (Grisha) Trubetskoy wrote:
> 
> >
> > The Apache Software Foundation and The Apache HTTP Server Project are
> > pleased to announce the 3.2.7 release of mod_python. Mod_python 3.2.7
> > is considered a stable release, suitable for production use.
> >
> > Mod_python is an Apache HTTP Server module that embeds the Python
> > language interpreter within the server. With mod_python you can write
> > web-based applications in Python that will run many times faster than
> > traditional CGI and will have access to advanced features such as
> > ability to maintain objects between requests, access to httpd
> > internals, content filters and connection handlers.
> >
> > The 3.2.7 release has many new features, feature enhancements, fixed
> > bugs and other improvements over the previous version. See Appendix A
> > of mod_python documentation for more details.
> >
> > Mod_python 3.2.7 is released under Apache License version 2.0.
> >
> > Mod_python 3.2.7 is available for download from:
> >
> > http://httpd.apache.org/modules/python-download.cgi
> >
> > More information about mod_python is available at:
> >
> > http://httpd.apache.org/modules/
> >
> > Many thanks to Jim Gallacher, Graham Dumpleton, Nicolas Lehuen and
> > everyone else who contributed to and helped test this release, without
> > your help it would not be possible!
> >
> > Regards,
> >
> > Grisha Trubetskoy
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
From tomw at bnl.gov  Mon Feb 13 16:54:49 2006
From: tomw at bnl.gov (Tomasz Wlodek)
Date: Mon Feb 13 16:54:57 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.2.7
In-Reply-To: <1139867172.28701@dscpl.user.openhosting.com>
References: <1139867172.28701@dscpl.user.openhosting.com>
Message-ID: <Pine.GSO.4.58.0602131654230.1003@rcf2.rhic.bnl.gov>

Thanks for information. And when do you plan to release 3.3?

Tomasz Wlodek                        | tel 631-344-7448
Brookhaven Laboratory, Building 510M | fax 631-344-7616
Upton NY 11973-5000                  |

On Mon, 13 Feb 2006, Graham Dumpleton wrote:

> The SSL stuff is down for version 3.3. Ie., not in this release. The 3.2 release
> was half way out the door at that point, so was really referring to the release
> after that.
>
> Graham
>
> Tomasz Wlodek wrote ..
> > Hi,
> >
> > Few weeks ago I posted a question to mod_python discussion group about
> > how
> > to pass environment variables from mod_ssl to mod_python authentication
> > handler.
> >
> > Graham was kind enough to answer that this cannot be done without some
> > fixes, however that you plan to make this possible in the future editions
> > of mod_python.
> >
> > Does this new edition allow of reading mod_ssl variables from mod_python
> > authentication handlers, or this feature will come in next release?
> >
> > Tomasz Wlodek                        | tel 631-344-7448
> > Brookhaven Laboratory, Building 510M | fax 631-344-7616
> > Upton NY 11973-5000                  |
> >
> > On Mon, 13 Feb 2006, Gregory (Grisha) Trubetskoy wrote:
> >
> > >
> > > The Apache Software Foundation and The Apache HTTP Server Project are
> > > pleased to announce the 3.2.7 release of mod_python. Mod_python 3.2.7
> > > is considered a stable release, suitable for production use.
> > >
> > > Mod_python is an Apache HTTP Server module that embeds the Python
> > > language interpreter within the server. With mod_python you can write
> > > web-based applications in Python that will run many times faster than
> > > traditional CGI and will have access to advanced features such as
> > > ability to maintain objects between requests, access to httpd
> > > internals, content filters and connection handlers.
> > >
> > > The 3.2.7 release has many new features, feature enhancements, fixed
> > > bugs and other improvements over the previous version. See Appendix A
> > > of mod_python documentation for more details.
> > >
> > > Mod_python 3.2.7 is released under Apache License version 2.0.
> > >
> > > Mod_python 3.2.7 is available for download from:
> > >
> > > http://httpd.apache.org/modules/python-download.cgi
> > >
> > > More information about mod_python is available at:
> > >
> > > http://httpd.apache.org/modules/
> > >
> > > Many thanks to Jim Gallacher, Graham Dumpleton, Nicolas Lehuen and
> > > everyone else who contributed to and helped test this release, without
> > > your help it would not be possible!
> > >
> > > Regards,
> > >
> > > Grisha Trubetskoy
> > > _______________________________________________
> > > Mod_python mailing list
> > > Mod_python@modpython.org
> > > http://mailman.modpython.org/mailman/listinfo/mod_python
> > >
>
From grahamd at dscpl.com.au  Mon Feb 13 17:03:41 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 13 17:03:47 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.2.7
Message-ID: <1139868221.7456@dscpl.user.openhosting.com>

Tomasz Wlodek wrote ..
> Thanks for information. And when do you plan to release 3.3?

That is anyones guess. Things though are getting a bit more organised
and planned with mod_python development now and the intention is to move
forward with 3.3, but at the same time backport the more important bug
fixes and useful features people may be waiting on to the 3.2 stream.
Thus it hopefully will not be as long as 3.2.

If you want to follow development progress, you should subscribe to the
mod_python developers mailing list. You can view the archive at:

  http://dir.gmane.org/gmane.comp.apache.mod-python.devel

or subscribe by following instructions on www.modpython.org.

Graham
From dpopowich at comcast.net  Mon Feb 13 19:08:54 2006
From: dpopowich at comcast.net (Daniel J. Popowich)
Date: Mon Feb 13 19:08:37 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<43F03CE8.2060000@natlab.research.philips.com>
	<5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>
Message-ID: <17393.8086.552449.851288@io.astro.umass.edu>


Daniel Nogradi writes:
> Thanks a lot for the code, I didn't even think about such an
> approach, this would be the best of course.
> 
> > For example, if you have this script, /tmp/foo.py:
> > 
> >     ############################################################
> >     # /tmp/foo.py
> > 
> >     import signal
> >     import time
> > 
> >     # ignore the TERM signal, so if apache kills the child process
> >     # that forked me I won't die.
> >     signal.signal(signal.SIGTERM, signal.SIG_IGN)
> > 
> >     # Your Code Here!
> >     # for this demo we'll sleep, so you have time to stop apache and
> >     # see this is still running
> >     time.sleep(30)
> > 
> >     # some output to prove we ran
> >     print "hello, world"
> > 
> >     #
> >     ############################################################
> > 
> > 
> > Then in your handler:
> > 
> >     os.system('python /tmp/foo.py >& /tmp/foo.log &')
> > 
> > 
> > Daniel Popowich
> > ---------------
> > http://home.comcast.net/~d.popowich/mpservlets/
> 
>
> I'm not sure I understand this. AFAIK both os.spawn* and os.system
> start a brand new process, with the only difference being how
> command line arguments are handled. Or not?

For python on unix, the os.spawn* calls are implemented in python with
underlying calls to os.fork and os.exec*.  You can see the python
source yourself; look in os.py in the standard library.  So, there's
really no difference between the exec* and spawn* calls.

You *could* do what you want with calls to os.fork and os.exec*, but
unless you're a unix systems programmer you will be biting off more
than you can chew.  That is, this simple command line:

  $ python myscript.py > logfile 2> errfile &

which can be easily executed from within python with:

    os.system('python myscript.py > logfile 2> errfile &')

would be MANY tens of lines of code if implemented with fork and exec*
calls; setting up the redirection is particularly tricky.  Take a look
at the implementation of the spawn* calls in os.py, that will give you
an idea, plus realize there is NO redirection of std{in,out,err}
happening in the spawn* code.  It's a non-trivial undertaking.

Unless you want the intellectual exercise (which is more than enough
reason in my book!  :-)), or need minutia control of process
parameters within python, I'd go with the os.system method and trap
signal.SIGTERM in your script.

Cheers,

Daniel Popowich
---------------
http://home.comcast.net/~d.popowich/mpservlets/
From nogradi at gmail.com  Mon Feb 13 21:35:26 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Mon Feb 13 21:35:30 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <17393.8086.552449.851288@io.astro.umass.edu>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<43F03CE8.2060000@natlab.research.philips.com>
	<5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>
	<17393.8086.552449.851288@io.astro.umass.edu>
Message-ID: <5f56302b0602131835oc3e2404n5f79c8c6183ef137@mail.gmail.com>

> > > For example, if you have this script, /tmp/foo.py:
> > >
> > >     ############################################################
> > >     # /tmp/foo.py
> > >
> > >     import signal
> > >     import time
> > >
> > >     # ignore the TERM signal, so if apache kills the child process
> > >     # that forked me I won't die.
> > >     signal.signal(signal.SIGTERM, signal.SIG_IGN)
> > >
> > >     # Your Code Here!
> > >     # for this demo we'll sleep, so you have time to stop apache and
> > >     # see this is still running
> > >     time.sleep(30)
> > >
> > >     # some output to prove we ran
> > >     print "hello, world"
> > >
> > >     #
> > >     ############################################################
> > >
> > >
> > > Then in your handler:
> > >
> > >     os.system('python /tmp/foo.py >& /tmp/foo.log &')
> >
> > I'm not sure I understand this. AFAIK both os.spawn* and os.system
> > start a brand new process, with the only difference being how
> > command line arguments are handled. Or not?
>
> For python on unix, the os.spawn* calls are implemented in python with
> underlying calls to os.fork and os.exec*.  You can see the python
> source yourself; look in os.py in the standard library.  So, there's
> really no difference between the exec* and spawn* calls.
>
> You *could* do what you want with calls to os.fork and os.exec*, but
> unless you're a unix systems programmer you will be biting off more
> than you can chew.  That is, this simple command line:
>
>   $ python myscript.py > logfile 2> errfile &
>
> which can be easily executed from within python with:
>
>     os.system('python myscript.py > logfile 2> errfile &')
>
> would be MANY tens of lines of code if implemented with fork and exec*
> calls; setting up the redirection is particularly tricky.  Take a look
> at the implementation of the spawn* calls in os.py, that will give you
> an idea, plus realize there is NO redirection of std{in,out,err}
> happening in the spawn* code.  It's a non-trivial undertaking.
>
> Unless you want the intellectual exercise (which is more than enough
> reason in my book!  :-)), or need minutia control of process
> parameters within python, I'd go with the os.system method and trap
> signal.SIGTERM in your script.

I see, you are absolutely right, thanks a lot for the clarification.

From nlv11281 at natlab.research.philips.com  Tue Feb 14 01:24:05 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Tue Feb 14 01:24:11 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>	<43F03CE8.2060000@natlab.research.philips.com>
	<5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>
Message-ID: <43F17785.7020408@natlab.research.philips.com>


Mike Looijmans
Philips Natlab / Topic Automation


Daniel Nogradi wrote:
> The unpacking itself doesn't take that long, but until the unpacked files reach their final destination (directories, databases, etc) will take quite some time as they have to be processed in some way. But I agree, uploading takes much longer, but I would like to make the waiting time for the users as short as possible, and in principle the unpacking/processing/etc can be done after they receive an acknowledgement page.
> 

And like all users in the world, they'll go to some status page and hit 
the "refresh" button 5 times a second to see if it's there yet.

>>You might consider using the latest mod_python 3.2.7 modification that 
>>supports file "streaming". You can unpack the ZIP while it's being 
>>uploaded. This also prevents using TEMP space. And when the upload is 
>>ready, the files are there as well. I tested this method for uploading 
>>multi-gigabyte TAR files.
...
> Thanks a lot for the code, I didn't even think about such an approach, this would be the best of course.

It would probably also be the fastest method performance wise (with my 
big tar files, untar-as-you-go was about 2x to 3x faster than upload and 
untar in separate steps) in the end, your users will be waiting much 
shorter, and once they get the acknowledgement page, the work has really 
been done.

Forking off processes from a HTTP deamon just does not sound "right" to 
me. It will also prevent your program from ever working on a non-unix 
platform. But that's more a religious thing I guess...

From dan.eloff at gmail.com  Tue Feb 14 02:10:46 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Tue Feb 14 02:10:50 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
Message-ID: <4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>

Actually I was just about to post a question about this. The psp generated
code surrounds everything with str() before writing it, so it doesn't work
with unicode at all.

-Dan

On 2/11/06, Luk?? Zapletal <lukas.zapletal@gmail.com> wrote:
>
> Hello,
>
> I have serious problem with PSPs. The PSP cannot handle string
> variables in unicode: Here is the test:
>
> test.html:
> <!-- vim: set sw=4 ts=4 sts=4 sta et ai fenc=utf-8 : -->
> <%= test %>
>
> test.py:
> # -*- coding: utf-8 -*-
> from mod_python import apache
> from mod_python import psp
> def test(req):
>     p = psp.PSP(req, filename="test.html")
>     p.run({"test": u"STRING WITH CHARACETRS > 128"})
>
> The output of this test method:
>
> UnicodeEncodeError: 'ascii' codec can't encode character XY in
> position XY: ordinal not in range(128)
>
> What am I doing wrong? Why the PSP is trying to convert the string
> using ascii codec? I do not want this; I really need to work in
> unicode and output the result of the PSP page in unicode.
>
> Thanks in advance for help
>
> --
> Lukas Zapletal
> http://lukas.zapletalovi.com
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060213/d024ac8a/attachment.html
From dpopowich at comcast.net  Tue Feb 14 09:09:16 2006
From: dpopowich at comcast.net (Daniel J. Popowich)
Date: Tue Feb 14 09:08:58 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <43F17785.7020408@natlab.research.philips.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<43F03CE8.2060000@natlab.research.philips.com>
	<5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>
	<43F17785.7020408@natlab.research.philips.com>
Message-ID: <17393.58508.331604.118071@io.astro.umass.edu>


Mike Looijmans writes:
> Forking off processes from a HTTP deamon just does not sound "right" to 
> me. 

A hypothetical: the upload takes a minute or so, but post processing
of the content takes (allow me to exaggerate to make a point) one
hour...what user is not going to hit cancel and try again...and
again...and again...then give up and that !@#$ website?  Forking off a
process from apache is no different than, say, spooling the content in
a directory and post processing with a polling cron job.  I contend
forking is cleaner and more intuitive, but it may come down to with
what the programmer is more comfortable.

> It will also prevent your program from ever working on a non-unix
> platform. But that's more a religious thing I guess...

Yup, sure is.  Long live my religion!  ;-)

Daniel Popowich
---------------
http://home.comcast.net/~d.popowich/mpservlets/
From grisha at modpython.org  Tue Feb 14 10:21:03 2006
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Tue Feb 14 10:21:12 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
Message-ID: <20060214101420.K47576@grisha.dyndns.org>


I'm a bit unicode-ignorant - what should PSP do? The idea was that a 
variable referred to in a PSP page would be an object that could stringify 
itself by implementing a __str__(), but obviously this doesn't work with 
unicode at all. But I'm not sure how self-representation works in the 
unicode world...

Grisha

On Mon, 13 Feb 2006, Dan Eloff wrote:

> Actually I was just about to post a question about this. The psp generated
code surrounds everything with str() before writing it, so it doesn't work
with unicode at all.

-Dan

From dpopowich at comcast.net  Tue Feb 14 10:31:56 2006
From: dpopowich at comcast.net (Daniel J. Popowich)
Date: Tue Feb 14 10:31:50 2006
Subject: [mod_python] Re: forks, daemons and other beasts
In-Reply-To: <17393.58508.331604.118071@io.astro.umass.edu>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
	<3816D737-7873-4FC5-B68C-DE79EBC240E9@dscpl.com.au>
	<5f56302b0602111402w537de1feg17189740ad7ad0dc@mail.gmail.com>
	<43F03CE8.2060000@natlab.research.philips.com>
	<5f56302b0602131244v45d559eag81f33f25668c5673@mail.gmail.com>
	<43F17785.7020408@natlab.research.philips.com>
	<17393.58508.331604.118071@io.astro.umass.edu>
Message-ID: <17393.63468.685207.367482@io.astro.umass.edu>


Daniel J. Popowich writes:
> 
> Mike Looijmans writes:
> > Forking off processes from a HTTP deamon just does not sound "right" to 
> > me. 
> 
> A hypothetical: the upload takes a minute or so, but post processing
> of the content takes (allow me to exaggerate to make a point) one
> hour...what user is not going to hit cancel and try again...and
> again...and again...then give up and that !@#$ website?  Forking off a
> process from apache is no different than, say, spooling the content in
> a directory and post processing with a polling cron job.  I contend
> forking is cleaner and more intuitive, but it may come down to with
> what the programmer is more comfortable.

I would like to retract that last comment.  Depending on the
application it may be better to spool the uploads and have a cron job
poll the spooling directory for requests: imagine an application that
gets hundreds, even thousands of requests in spurts...in such an
environment, if you're not *very careful* in your programming, forking
processes per request could starve your server of resources.  So, let
me rewrite that last sentence: I contend forking is cleaner and more
intuitive, but it really depends on application needs, system design,
etc., etc., blah, comfort, blah, blah, style, blah, phase of the moon,
blah...

Daniel Popowich
---------------
http://home.comcast.net/~d.popowich/mpservlets/
From scott_list at mischko.com  Tue Feb 14 12:12:08 2006
From: scott_list at mischko.com (Scott Chapman)
Date: Tue Feb 14 12:12:14 2006
Subject: [mod_python] forks, daemons and other beasts
In-Reply-To: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
References: <5f56302b0602111239g53beef70m3fea0244c968e907@mail.gmail.com>
Message-ID: <43F20F68.3010100@mischko.com>

Daniel Nogradi wrote:
> Sorry everyone, a long post follows :)
> 
> 
> Many times there is need for a mod_python program to respond (send a
> page) to the client after receiving a request and at the same time
> start a subprocess which typically takes quite long and waiting for it
> to finish is not necessary. So the situation is this: (1) request
> comes from client (2) server processes the request (3) server starts a
> subprocess and don't wait for it to finish (4) send a response to the
> client. Actually, (3) and (4) could be interchanged.
> 
> What is the best way to do this?

In cases like this, I've used a python cron script that checks for new files in 
a directory and deals with them when it finds them.

One script, no threads so no race conditions, etc.  Make it check the upload 
directory for files that are not being written to and deal with them one at a 
time.  That way the post-processing does not take up an inordinate amount of 
resources as well.  Anything that Apache spawns could get into scalability issues.

All this talk of threads and spawning things and handling sigterms, sigkills, 
etc. is probably too big of a hammer.

Happy post-processing,
Scott
From dan.eloff at gmail.com  Tue Feb 14 13:46:37 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Tue Feb 14 13:46:42 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <20060214101420.K47576@grisha.dyndns.org>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
Message-ID: <4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>

That's the sticky part, currently this doesn't work in python. Quoting one
of the PEPs:

    One notable difficulty arises when code requires a string
representation of an
    object; an operation traditionally accomplished by using the str()
    built-in function.

    Using the current str() function makes the code not Unicode-safe.
    Replacing a str() call with a unicode() call makes the code not
    str-stable.  Changing str() so that it could return unicode
    instances would solve this problem.

That's all well and good, but until/if that is ever adopted, we'll have to
find a way around it. Probably your best bet for backwards compatibility and
unicode support is to have two kinds of psp pages, one for plain ascii, one
for unicode. The unicode one uses unicode() and the ascii one stays as is.
You would then have to decide when you parse the psp page what the encoding
is and produce the appropriate psp object.

-Dan


On 2/14/06, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:
>
>
> I'm a bit unicode-ignorant - what should PSP do? The idea was that a
> variable referred to in a PSP page would be an object that could stringify
> itself by implementing a __str__(), but obviously this doesn't work with
> unicode at all. But I'm not sure how self-representation works in the
> unicode world...
>
> Grisha
>
> On Mon, 13 Feb 2006, Dan Eloff wrote:
>
> > Actually I was just about to post a question about this. The psp
> generated
> code surrounds everything with str() before writing it, so it doesn't work
> with unicode at all.
>
> -Dan
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060214/9c9cca9b/attachment.html
From nicolas at lehuen.com  Tue Feb 14 14:23:57 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Tue Feb 14 14:24:01 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <20060214101420.K47576@grisha.dyndns.org>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
Message-ID: <c298f2d70602141123s3def7279j@mail.gmail.com>

PSP should encode the unicode strings in the same character set the
PSP page is written in. Now you've got two problems :).

Somehow, the PSP calling code should pass an encoding name to the PSP
evaluator, which should do some stringify values like that :

def stringify(value,encoding):
    if value is None:
        # I guess it does that, I never used PSP :)
        return ''
    elif isinstance(value,unicode):
        return value.encode(encoding)
    else:
        return str(value)

There are three places where the encoding could be defined :

1) In the PSP file, thanks to a special tag. XML files use the <?xml
version="1.0" encoding="iso-8859-1"?> scheme, Python files use the #
-*- coding: iso-8859-1 -*-, HTML files use the META content-type
header, and so on and so forth. The PSP constructor would extract the
encoding name from the file and use it when transforming unicode
strings into bytes.

2) When the PSP file is compiled, as an argument to the PSP constructor.

3) When the PSP file is ran, as a dictionary member. This one is not a
good idea since there are no reason the static part of the PSP file
has a static encoding and changing the output encoding at runtime is
bound to pose problems.

In any case, you are bound to have problem when using non-unicode
strings, should their encoding differ from the one used in the PSP
file.

The best thing to do IMHO would be to transform everything in Unicode,
then convert it into an encoding supported by the client.

That is to say, parse and store the PSP file as unicode strings,
decoding the bytes from the file according to the encoding obtained
from one of the first two methods above. Then turn input values into
unicode (byte strings being converted to unicode according to their
encoding) and build a fully unicode result document. mod_python would
then have to select an encoding (based on content negociation with the
browsers) to write the unicode document as bytes, not forgetting to
specify the encoding in the "Content-Type: text/html; charset=XXXX"
header. But then again, this complicates method 2 since if another
encoding is selected, the encoding information which is inside the
document should be modified.

In other words, forget about byte strings, do everything in Unicode,
and try to never automatically convert str into unicode or vice-versa,
because this is bound to fail. This automatic conversion is really a
weak spot of Python, it is really a shame. Anyway...

Unicode isn't really complicated. You have to forget that unicode and
str are nearly the same in Python. They are not. Unicode strings are
arrays of thingies that represent characters - don't even think of
these thingies as 16 or 32 bits integers. They are abstract values
that each represent a given character.

The problem is that "thingies" do not play well with electronics, so
you have to convert them into bits and bytes to store or exchange
them. Encodings are simply a mapping from thingies to bytes and vice
versa.

The trick is that encoders are built so that they are somewhat optimal
for a given set of languages. As a consequence, most encoders cannot
encode the whole set of Unicode characters.

For example, the ASCII encoding can only encode 128 different
characters, namely numbers, upper and lower case non-accentuated latin
alphabet (as used in, surprise, the United States). ASCII only require
7 bits to do so, which was good for antique communication systems.
Nowadays, ASCII is OK if you're restricted to the English-speaking
word, but as soon as a damn French guy wants to write you about how
his caf? his better than the stuff you get at Starbucks, well, he
cannot, because the Unicode "?" thingy cannot be encoded into ASCII.
So you don't have to hear his rambling, and you're much better like
that. But that's another story.

A big bunch of different encodings use 8 bits to represent, say, a
majority of characters used in the west european languages (ISO-8859-1
AKA ISO-Latin-1 and its cousin ISO-Latin-15 which switches the 0x80
value from an unused whitespace to the very useful euro sign),
cyrillic alphabets (the Russian even have multiple different and
mutually incompatible encoding for their alphabet), and so on.

Then, there is a set of more universal encodings, UTF-16 (16 bits per
character, but it cannot encode every Unicode character), UTF-32 (32
bits per character) and the famous UTF-8, which occidental developers
love because latin characters only use 8 bits, and oriental developers
hate because their characters sometimes require 24 bits.

An important thing to remember is that a piece of text can be
represented either as a Unicode string, or as a byte array + the name
of the encoding chosen to encode it. A BYTE ARRAY WITHOUT ENCODING
INFORMATION CANNOT BE CONSIDERED AS TEXT. And that's the big problem
of Python (which is not alone here, if that's a relief) : byte arrays
(str in Python parlance) as considered as text in some default
encoding, which varies considerably from place to place.

As soon as you start exchanging byte arrays with someone without
specifying the encoding in one way (the Content-Type header) or
another (some content-type information embedded in the array, assuming
that the encoding name is itself encoded in ASCII), then mayhem is
sure to follow.

The Windows platform is a good example : you get one encoding in the
command processor (in France it is CP850), another in the GUI (usually
it is ANSI, which is quite the same, but not equal to ISO-8859-1), and
sometimes another in your Python source file (most of the standard
library is written in ASCII, which is fortunately compatible with ANSI
and ISO-8859-1). But the fun part is that when running a Python
program (as opposed to typing stuff in the interactive prompt), the
default encoding becomes ASCII ! As a result, accentuated character
output is nearly always wrong when console output is performed, unless
the programmer has thought about converting strings to CP850.

I wish the situation was as simple as in the Java world, where all
strings are Unicode strings, period...

Joel Spolsky has written a very good article about Unicode : "The
Absolute Minimum Every Software Developer Absolutely, Positively Must
Know About Unicode and Character Sets (No Excuses!)"

http://www.joelonsoftware.com/articles/Unicode.html

His explanation are even better than mine, I don't know why I have
written this, and why you read it ;)

Regards,
Nicolas

2006/2/14, Gregory (Grisha) Trubetskoy <grisha@modpython.org>:
>
> I'm a bit unicode-ignorant - what should PSP do? The idea was that a
> variable referred to in a PSP page would be an object that could stringify
> itself by implementing a __str__(), but obviously this doesn't work with
> unicode at all. But I'm not sure how self-representation works in the
> unicode world...
>
> Grisha
>
> On Mon, 13 Feb 2006, Dan Eloff wrote:
>
> > Actually I was just about to post a question about this. The psp generated
> code surrounds everything with str() before writing it, so it doesn't work
> with unicode at all.
>
> -Dan
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From gustavo.cordova at q-voz.com  Tue Feb 14 14:51:20 2006
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Tue Feb 14 14:43:35 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
Message-ID: <43F234B8.8000608@q-voz.com>

Dan Eloff wrote:

> That's the sticky part, currently this doesn't work in python. Quoting 
> one of the PEPs:
>
>    One notable difficulty arises when code requires a string representation of an
>    object; an operation traditionally accomplished by using the str()
>
>    built-in function.
>    
>    Using the current str() function makes the code not Unicode-safe.
>    Replacing a str() call with a unicode() call makes the code not
>    str-stable.  Changing str() so that it could return unicode
>
>    instances would solve this problem.
>
> That's all well and good, but until/if that is ever adopted, we'll 
> have to find a way around it. Probably your best bet for backwards 
> compatibility and unicode support is to have two kinds of psp pages, 
> one for plain ascii, one for unicode. The unicode one uses unicode() 
> and the ascii one stays as is. You would then have to decide when you 
> parse the psp page what the encoding is and produce the appropriate 
> psp object.
>
> -Dan
>
>
> On 2/14/06, *Gregory (Grisha) Trubetskoy* <grisha@modpython.org 
> <mailto:grisha@modpython.org>> wrote:
>
>
>     I'm a bit unicode-ignorant - what should PSP do? The idea was that a
>     variable referred to in a PSP page would be an object that could
>     stringify
>     itself by implementing a __str__(), but obviously this doesn't
>     work with
>     unicode at all. But I'm not sure how self-representation works in the
>     unicode world...
>
>     Grisha
>
>     On Mon, 13 Feb 2006, Dan Eloff wrote:
>
>     > Actually I was just about to post a question about this. The psp
>     generated
>     code surrounds everything with str() before writing it, so it
>     doesn't work
>     with unicode at all.
>
>     -Dan
>
>
Actually, it *can* work perfectly with unicode, if you know what's going on.
The error message that started all this discussion specified that "ASCII"
encoding can't represent the unicoded object in question.  Python is using
ASCII encoding because it's the default encoding, you can check what your
default encoding is with:

    >>> import sys
    >>> sys.getdefaultencoding()
    'iso-8859-1'

You see here I'm using LATIN1, because it gives me accents and "?", and 
other
nice chars for spanish.  But, there's no _sys.getdefaultencoding()_ function
available because it's explicitly deleted in /usr/lib/pythonXX/site.py:

    (around line 394)
    ...
    if hasattr(sys, "setdefaultencoding"):
       del sys.setdefaultencoding

I really don't know the rationale for doing that, maybe to stop different
modules from stomping on the default encoding, whatever.

So, if you can configure your default encoding to whatever you need ("UTF-8"
is pretty nice), unicode objects can be correctly serialized to strings 
without
any problems:

    >>> import sys
    >>> sys.getdefaultencoding()
    'iso-8859-1'
    >>> name = u"Gustavo C?rdova Avila"
    >>> str(name)
    'Gustavo C\xf3rdova Avila'

See, no errors.

So, time for a bit of homework now. :-)

-gus






From pjs at packet-addiction.org  Tue Feb 14 15:07:19 2006
From: pjs at packet-addiction.org (Peter Sanchez)
Date: Tue Feb 14 15:05:30 2006
Subject: [mod_python] Sessions in a load balanced arena
Message-ID: <0DDCE3BF-B481-4A73-8153-68DE2B044D2A@packet-addiction.org>

Hey all.. Quick question:

How can sessions be managed in a load balanced scenario. Say, between  
3 hosts all having traffic directed to it. From what I understand,  
the session data is stored locally on each host. When a new visitor  
reaches hostA and gets a session, hostB won't know about it.

Sounds like Cookies are the way to go for a load balanced solution.  
Using the cookie to save an identifier and keeping track in a  
database of some sort. Is my thinking wrong?

Thanks,

Peter
From nicolas at lehuen.com  Tue Feb 14 15:22:34 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Tue Feb 14 15:22:39 2006
Subject: [mod_python] Sessions in a load balanced arena
In-Reply-To: <0DDCE3BF-B481-4A73-8153-68DE2B044D2A@packet-addiction.org>
References: <0DDCE3BF-B481-4A73-8153-68DE2B044D2A@packet-addiction.org>
Message-ID: <c298f2d70602141222i5b425b78m@mail.gmail.com>

One very simple solution is to use sticky sessions. You simply
configure your load balancer to select one host when a new IP makes a
request, then stick to this host for an arbitrary period. This has
some drawbacks, especially when considering large ISP with proxies,
but it is definitely simple to implement (hardware load balancers can
manage this).

Then there are differents persistence strategies. You could store your
session in a DBMS, for instance, though it slows down things a little
bit. Writing a session storage using a SQL database is quite simple, I
have written a proof of concept implementation using SQLite (which of
course is not really usable in a multiple host context, but not much
of the code would need to be changed with another DBMS).

If that doesn't do the trick, then there's a whole bunch of tricks
available, see for example what the people building Resin, a J2EE
application server, have done :

http://www.caucho.com/resin-3.0/config/sessions.xtp#Distributed-Sessions

Unfortunately every distribution solution slows things done compared
with single hosts solutions, so my advice would be to use sticky
sessions and consider a DBMS-backed session system (switching between
the two should only need changing your mod_python configuration) if
you notice that your client's usage pattern result in unbalanced host
usage.

Regards,
Nicolas

2006/2/14, Peter Sanchez <pjs@packet-addiction.org>:
> Hey all.. Quick question:
>
> How can sessions be managed in a load balanced scenario. Say, between
> 3 hosts all having traffic directed to it. From what I understand,
> the session data is stored locally on each host. When a new visitor
> reaches hostA and gets a session, hostB won't know about it.
>
> Sounds like Cookies are the way to go for a load balanced solution.
> Using the cookie to save an identifier and keeping track in a
> database of some sort. Is my thinking wrong?
>
> Thanks,
>
> Peter
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From nlv11281 at natlab.research.philips.com  Wed Feb 15 01:33:28 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Wed Feb 15 01:33:35 2006
Subject: [mod_python] Sessions in a load balanced arena
In-Reply-To: <0DDCE3BF-B481-4A73-8153-68DE2B044D2A@packet-addiction.org>
References: <0DDCE3BF-B481-4A73-8153-68DE2B044D2A@packet-addiction.org>
Message-ID: <43F2CB38.1040203@natlab.research.philips.com>

If you can - avoid sessions alltogether. You do not need sessions for simple user authentication, a 
cookie will do that very well.

Because sessions are often so simple to use (as in mod_python), many pages use them as a 
tool-for-everything. As an alternative, you can use forms and hidden fields (I have a demo here that 
creates pages with possibly hundreds of fields storing intermediate data - all state is maintained 
on the page itself), or you can append path info to your url, like 
/my/server/handle.py/user/mike/mode/rw (note that a URL may be up to 6000 characters long).

Having said that, yes, storing session data in a central DBMS and retrieving/storing it there works 
very well. In general, a DBMS is faster than a filesystem for this kind of thing. And like HTTP 
servers, DBMSs scale well.


--
Mike Looijmans
Philips Natlab / Topic Automation


Peter Sanchez wrote:
> Hey all.. Quick question:
> 
> How can sessions be managed in a load balanced scenario. Say, between  3 
> hosts all having traffic directed to it. From what I understand,  the 
> session data is stored locally on each host. When a new visitor  reaches 
> hostA and gets a session, hostB won't know about it.
> 
> Sounds like Cookies are the way to go for a load balanced solution.  
> Using the cookie to save an identifier and keeping track in a  database 
> of some sort. Is my thinking wrong?
> 
> Thanks,
> 
> Peter
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From downgrade at gmx.org  Wed Feb 15 06:44:18 2006
From: downgrade at gmx.org (Lars Eriksen)
Date: Wed Feb 15 06:44:07 2006
Subject: [mod_python] Chunked encoding
Message-ID: <43F31412.8000008@gmx.org>

I abuse mod_python to handle my custom RPC-protocol over HTTP. Chunked 
encoding adds an unneccessary layer of complexity that I do not require. 
Is there a way to configure mod_python to using caching when 
req.write(...) is called and flush the cache when the handler returns 
the status code, e.g. apache.OK?
From downgrade at gmx.org  Wed Feb 15 06:53:06 2006
From: downgrade at gmx.org (Lars Eriksen)
Date: Wed Feb 15 06:52:51 2006
Subject: [mod_python] Re: Chunked encoding
In-Reply-To: <43F31412.8000008@gmx.org>
References: <43F31412.8000008@gmx.org>
Message-ID: <43F31622.2050204@gmx.org>

Yes, there is :-) RTFM, I guess ...

from mod_python.util import *
from mod_python import apache

def handle(req):
    data = 'No chunking involved.' * 1024
    req.set_content_length(len(data))   
    req.write(data, 0)
    req.flush()
    return apache.OK
From downgrade at gmx.org  Wed Feb 15 07:05:27 2006
From: downgrade at gmx.org (Lars Eriksen)
Date: Wed Feb 15 07:05:07 2006
Subject: [mod_python] Apache Status-Code and headers
Message-ID: <43F31907.6080505@gmx.org>

The manual says:

*set_content_length*( 	len)

Sets the value of req.clength and the "Content-Length" header to len. 
Note that after the headers have been sent out (which happens just 
before the first byte of the body is written, i.e. first call to 
req.write()), calling the method is meaningless.

Now how can returning the status code, e.g. apache.OK, after you call 
req.write(...), have any effect if the headers have already been sent out?
From marcdm at phronein.com  Wed Feb 15 09:06:47 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Wed Feb 15 09:06:52 2006
Subject: [mod_python] High traffic recommendations
Message-ID: <1140012407.8217.29.camel@localhost.localdomain>

I just 'completed' an application (website) using mod_python. 
- I'm using the mod_python.publisher handler 
- Each page is a function in a module. 
- Apache config has MultiViews enabled
- Apache/2.0.54 (Debian GNU/Linux) mod_python/3.1.3 Python/2.3.5
PHP/4.3.10-16 mod_ssl/2.0.54 OpenSSL/0r

However, I'm having a problem where the server (Apache) goes down every
3 - 4 hours. 

At first, I was getting a DBNoMemory error every half hour. Then I
started caching database look-ups using memcached. 

Site was still going down. Now, every hour or two, instead of 40 min.

So now, I'm caching entire pages but it still going down. Every few
hours. 

This is how I'm outputting pages : 
--> request comes in 
--> mod_python.publisher decides which module.function to execute 
--> function checks session variables and loads config from cache or
*.conf file.
--> generate cache_key as sitename:req.unparsed_uri:lang  
--> If item in cache, return cached paged
--> generate page, insert into cache for 4 hrs --> return output.

But I'm still being told by Apache that it has reached MaxClients every
few hours.

in /etc/apache2/apache.conf I have the following :

	KeepAlive Off
	Timeout 10
	<IfModule prefork.c>
	StartServers         5
	MinSpareServers      5
	MaxSpareServers     10
	MaxClients          80
	MaxRequestsPerChild  500
	</IfModule>
	
Anyone see anything wrong with what's going on here? It's driving me
crazy with this crashing, and I can't seem to find a solution.

Thanks.

Marc DM.

PS. The server is the same one that used to run the same site in
mod_mono. Except with mod_mono the server would climb to 32%cpu and stay
there or climb higher. With mod_python, it never passes 4% Apache Dies.
Why?


From jeffreyz at broadpark.no  Wed Feb 15 09:07:38 2006
From: jeffreyz at broadpark.no (Jeffrey A. Zelt)
Date: Wed Feb 15 09:07:44 2006
Subject: [mod_python] mod_python 3.2.7 working on Mac OS X 10.4.5
Message-ID: <D6E97EA3-6BD3-4CC8-AB19-C81D3B7CBE7F@broadpark.no>

I don't know if anyone is interested, but I have mod_python 3.2.7  
working for the following setup:

Mac OS X (Darwin) 10.4.5
Python 2.4.2
Apache 2.0.55

I am completely new to mod_python (and python also), but I was not  
able to find much information about installing  mod_python on Mac OS  
X, so it occurred to me that someone might want to know that things  
look OK for the environment I mentioned above.

I should say that by "working" I mean that I have successfully  
executed the tutorial in the mod_python manual, in addition to a few  
other examples I found in various web searches.  So I am not trying  
to say that I have tested everything thoroughly.  Specifically, I  
have successfully used the following handlers:

1. mod_python.publisher
2. mod_python.psp
3. mod_python.cgihandler
4. arbitrary .py module (e.g., "myscript.py" from the mod_python manual)

I installed each of mod_python, python & apache from source, using  
the following configure options:


1. mod_python 3.2.7:

./configure \
--with-apxs=/usr/local/apache2/bin/apxs \
--with-python=/usr/local/bin/python2.4 \
--with-max-locks=32 \
--with-flex=/usr/bin/flex \
--with-python-src=/usr/local/src/python/Python-2.4.2


2. Python 2.4.2:

./configure --enable-framework


3. Apache 2.0.55:

./configure \
--enable-mods-shared=most \
--enable-ssl \
--with-mpm=worker \
--without-berkeley-db


I hope this might help (or at least encourage) someone.

Jeff

From motrocco at motrocco.com  Wed Feb 15 09:52:38 2006
From: motrocco at motrocco.com (motrocco)
Date: Wed Feb 15 09:53:55 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140012407.8217.29.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
Message-ID: <1140015158.43f34036e8af6@mail.namezero.com>

Is this server live on the internet or in a stand alone lab?
Is it possible that there maybe a new virus attaching your machine when it
connected to the net, attempting to exploit your machine and causing it to fall
over every couple of hours?

Just a thought.

Mot.
From nicolas at lehuen.com  Wed Feb 15 10:02:45 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Wed Feb 15 10:03:35 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140012407.8217.29.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
Message-ID: <c298f2d70602150702j6bcb1600h@mail.gmail.com>

Hi Marc,

How does Apache behave WRT memory ? There are known memory leaks in
mod_python version prior to 3.2.7, so I would advise you to upgrade to
3.2.7 if you can.

Regards,
Nicolas

2006/2/15, Marc D. Murray <marcdm@phronein.com>:
> I just 'completed' an application (website) using mod_python.
> - I'm using the mod_python.publisher handler
> - Each page is a function in a module.
> - Apache config has MultiViews enabled
> - Apache/2.0.54 (Debian GNU/Linux) mod_python/3.1.3 Python/2.3.5
> PHP/4.3.10-16 mod_ssl/2.0.54 OpenSSL/0r
>
> However, I'm having a problem where the server (Apache) goes down every
> 3 - 4 hours.
>
> At first, I was getting a DBNoMemory error every half hour. Then I
> started caching database look-ups using memcached.
>
> Site was still going down. Now, every hour or two, instead of 40 min.
>
> So now, I'm caching entire pages but it still going down. Every few
> hours.
>
> This is how I'm outputting pages :
> --> request comes in
> --> mod_python.publisher decides which module.function to execute
> --> function checks session variables and loads config from cache or
> *.conf file.
> --> generate cache_key as sitename:req.unparsed_uri:lang
> --> If item in cache, return cached paged
> --> generate page, insert into cache for 4 hrs --> return output.
>
> But I'm still being told by Apache that it has reached MaxClients every
> few hours.
>
> in /etc/apache2/apache.conf I have the following :
>
>         KeepAlive Off
>         Timeout 10
>         <IfModule prefork.c>
>         StartServers         5
>         MinSpareServers      5
>         MaxSpareServers     10
>         MaxClients          80
>         MaxRequestsPerChild  500
>         </IfModule>
>
> Anyone see anything wrong with what's going on here? It's driving me
> crazy with this crashing, and I can't seem to find a solution.
>
> Thanks.
>
> Marc DM.
>
> PS. The server is the same one that used to run the same site in
> mod_mono. Except with mod_mono the server would climb to 32%cpu and stay
> there or climb higher. With mod_python, it never passes 4% Apache Dies.
> Why?
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From nlv11281 at natlab.research.philips.com  Wed Feb 15 10:06:03 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Wed Feb 15 10:07:07 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140012407.8217.29.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
Message-ID: <43F3435B.4070800@natlab.research.philips.com>

> But I'm still being told by Apache that it has reached MaxClients every
> few hours.

Increase MaxClients. This is the "absolute" max number of clients that can be connected 
concurrently. You can safely put that into the 1000 range.

> in /etc/apache2/apache.conf I have the following :
> 	KeepAlive Off

Turning it Off will increase the load on your server (more connections, and more "lingering" sockets)

> 	Timeout 10
> 	<IfModule prefork.c>
> 	StartServers         5
> 	MinSpareServers      5
> 	MaxSpareServers     10
> 	MaxClients          80
> 	MaxRequestsPerChild  500

Make that 10000 or so. This low a number is only required if your system is leaking lots of 
resources (which mod_python does not do).

> 	</IfModule>
> 	
> Anyone see anything wrong with what's going on here? It's driving me
> crazy with this crashing, and I can't seem to find a solution.

As usual, no solution, but some tips.

Mike

From trepca at gmail.com  Wed Feb 15 10:17:36 2006
From: trepca at gmail.com (Sebastjan Trepca)
Date: Wed Feb 15 10:17:50 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140015158.43f34036e8af6@mail.namezero.com>
References: <1140012407.8217.29.camel@localhost.localdomain>
	<1140015158.43f34036e8af6@mail.namezero.com>
Message-ID: <cd329af80602150717g2eb1c34n249c800cb8c18f08@mail.gmail.com>

And what do you get in error logs? Does it crash while processing your
code or on directly in Apache?

Where did you see DBNoMemory and who reported it? What drivers do you
use and how do you handle db connections?

Regards,
Sebastjan


On 2/15/06, motrocco <motrocco@motrocco.com> wrote:
> Is this server live on the internet or in a stand alone lab?
> Is it possible that there maybe a new virus attaching your machine when it
> connected to the net, attempting to exploit your machine and causing it to fall
> over every couple of hours?
>
> Just a thought.
>
> Mot.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From mcassiano at manord.com  Wed Feb 15 11:23:02 2006
From: mcassiano at manord.com (Cassiano, Marco)
Date: Wed Feb 15 11:21:31 2006
Subject: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
Message-ID: <BC53C974C3B9E542BC0A9BD4C5B1168AADC256@NEWMAIL.manord.com>

 Hi All,
 
 
I tried to compile Mod_python 3.2.7 on RH3EL with ./configure --with-python=/usr/local/bin/python2.4 --with-apxs=/usr/sbin/apxs > config.log
 
The compilation seems to be ok (some warnings) but when I start apache I get this error : 
 
service httpd start

Starting httpd: Syntax error on line 6 of /etc/httpd/conf.d/python.conf:

Cannot load /etc/httpd/modules/mod_python.so into server: /etc/httpd/modules/mod_python.so: undefined symbol: apr_table_compress
 
 
I tried to search the web with no result.
 
Any help is appreciated


 

Marco Cassiano 
  
Manifatture del Nord srl unipersonale
Gruppo MaxMara 

viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Sede operativa:
via Mazzacurati 6
42100 Reggio Emilia RE
ITALY 

Tel. +39 0522 358215 
Fax +39 0522 268715 
email : mcassiano@manord.com 
www.pennyblack.com <file:///C:/Documents%20and%20Settings/mcassiano/Dati%20applicazioni/Microsoft/Firme%20elettroniche/www.pennyblack.com>  

 

 

 

---------------------------------------------------------------------------------------------

Il contenuto della presente comunicazione ? riservato e destinato esclusivamente ai destinatari indicati. Nel caso in cui sia ricevuto da persona diversa dal destinatario sono proibite la diffusione, la distribuzione e la copia. Nel caso riceveste la presente per errore, Vi preghiamo di informarci e di distruggerlo e/o cancellarlo dal Vostro computer, senza utilizzare i dati contenuti.

 

La presente comunicazione (comprensiva dei documenti allegati) non avr? valore di proposta contrattuale e/o accettazione di proposte provenienti dal destinatario, n? rinuncia o riconoscimento di diritti, debiti e/o crediti, n? sar? impegnativa, qualora non sia sottoscritto successivo accordo da chi pu? validamente obbligarci. Non deriver? alcuna responsabilit? precontrattuale a ns. carico, se la presente non sia seguita da contratto sottoscritto dalle parti.

---------------------------------------------------------------------------------------------

The contents of the present communication is strictly confidential and reserved solely to the referred addressees. In the event was received by person different from the addressee, it is forbidden the diffusion, distribution and copy. In the event you have received it mistakenly we ask you to inform us and to destroy and/or to delete it by your computer, without using the data herein contained.

 

The present message (eventual annexes inclusive) shall not be considered any contractual proposal and/or acceptance of offer coming from the addressee, nor waiver neither recognizance of rights, debts and/or credits, and it shall not be binding, when it is not executed a subsequent agreement by person who could lawfully represent us. No pre-contractual liability shall derive to us, when the present communication is not followed by any binding agreement between the parties.

---------------------------------------------------------------------------------------------

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060215/3efecef8/attachment.html
From nicolas at lehuen.com  Wed Feb 15 11:32:39 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Wed Feb 15 11:32:43 2006
Subject: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
In-Reply-To: <BC53C974C3B9E542BC0A9BD4C5B1168AADC256@NEWMAIL.manord.com>
References: <BC53C974C3B9E542BC0A9BD4C5B1168AADC256@NEWMAIL.manord.com>
Message-ID: <c298f2d70602150832o7dba10aek@mail.gmail.com>

Hi,

What is your Apache version ?

Regards,
Nicolas

2006/2/15, Cassiano, Marco <mcassiano@manord.com>:
>
>  Hi All,
>
>
> I tried to compile Mod_python 3.2.7 on RH3EL with ./configure
> --with-python=/usr/local/bin/python2.4
> --with-apxs=/usr/sbin/apxs > config.log
>
> The compilation seems to be ok (some warnings) but when I start apache I get
> this error :
>
> service httpd start
>
> Starting httpd: Syntax error on line 6 of /etc/httpd/conf.d/python.conf:
>
> Cannot load /etc/httpd/modules/mod_python.so into server:
> /etc/httpd/modules/mod_python.so: undefined symbol:
> apr_table_compress
>
>
> I tried to search the web with no result.
>
> Any help is appreciated
>
>
>
>
> Marco Cassiano
>
> Manifatture del Nord srl unipersonale
> Gruppo MaxMara
>
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Sede operativa:
> via Mazzacurati 6
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 358215
> Fax +39 0522 268715
> email : mcassiano@manord.com
> www.pennyblack.com
>
>
>
>
>
>
>
> ---------------------------------------------------------------------------------------------
>
> Il contenuto della presente comunicazione ? riservato e destinato
> esclusivamente ai destinatari indicati. Nel caso in cui sia ricevuto da
> persona diversa dal destinatario sono proibite la diffusione, la
> distribuzione e la copia. Nel caso riceveste la presente per errore, Vi
> preghiamo di informarci e di distruggerlo e/o cancellarlo dal Vostro
> computer, senza utilizzare i dati contenuti.
>
>
>
> La presente comunicazione (comprensiva dei documenti allegati) non avr?
> valore di proposta contrattuale e/o accettazione di proposte provenienti dal
> destinatario, n? rinuncia o riconoscimento di diritti, debiti e/o crediti,
> n? sar? impegnativa, qualora non sia sottoscritto successivo accordo da chi
> pu? validamente obbligarci. Non deriver? alcuna responsabilit?
> precontrattuale a ns. carico, se la presente non sia seguita da contratto
> sottoscritto dalle parti.
>
> ---------------------------------------------------------------------------------------------
>
> The contents of the present communication is strictly confidential and
> reserved solely to the referred addressees. In the event was received by
> person different from the addressee, it is forbidden the diffusion,
> distribution and copy. In the event you have received it mistakenly we ask
> you to inform us and to destroy and/or to delete it by your computer,
> without using the data herein contained.
>
>
>
> The present message (eventual annexes inclusive) shall not be considered any
> contractual proposal and/or acceptance of offer coming from the addressee,
> nor waiver neither recognizance of rights, debts and/or credits, and it
> shall not be binding, when it is not executed a subsequent agreement by
> person who could lawfully represent us. No pre-contractual liability shall
> derive to us, when the present communication is not followed by any binding
> agreement between the parties.
>
> ---------------------------------------------------------------------------------------------
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>

From nicolas at lehuen.com  Wed Feb 15 12:01:38 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Wed Feb 15 12:01:43 2006
Subject: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
In-Reply-To: <BC53C974C3B9E542BC0A9BD4C5B1168AADC258@NEWMAIL.manord.com>
References: <BC53C974C3B9E542BC0A9BD4C5B1168AADC258@NEWMAIL.manord.com>
Message-ID: <c298f2d70602150901q3b1d1219p@mail.gmail.com>

The apr_table_compress was added to APR 0.9.4 which was released
around the 22/06/2003. Since Apache 2.0.46 was released on 28/05/2003,
it cannot integrate this function. Upgrading to Apache 2.0.47
(released on 10/07/2003) at least should fix the problem. Of course,
upgrading to Apache 2.0.55 is better.

This means we should add some warning that mod_python 3.2.7 only
supports Apache 2.0.47 and later versions.

Regards,
Nicolas


2006/2/15, Cassiano, Marco <mcassiano@manord.com>:
> httpd-devel-2.0.46-54.ent
> httpd-2.0.46-54.ent
> redhat-config-httpd-1.1.0-4.30.2
>
> Thanks
>
>
> Marco Cassiano
>
>
> ---------------------------------------------------------------------------------------------
>
>
> -----Original Message-----
> From: nicolas.lehuen@gmail.com [mailto:nicolas.lehuen@gmail.com] On Behalf Of Nicolas Lehuen
> Sent: Wednesday, February 15, 2006 5:33 PM
> To: Cassiano, Marco
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
>
> Hi,
>
> What is your Apache version ?
>
> Regards,
> Nicolas
>
> 2006/2/15, Cassiano, Marco <mcassiano@manord.com>:
> >
> >  Hi All,
> >
> >
> > I tried to compile Mod_python 3.2.7 on RH3EL with ./configure
> > --with-python=/usr/local/bin/python2.4
> > --with-apxs=/usr/sbin/apxs > config.log
> >
> > The compilation seems to be ok (some warnings) but when I start apache I get
> > this error :
> >
> > service httpd start
> >
> > Starting httpd: Syntax error on line 6 of /etc/httpd/conf.d/python.conf:
> >
> > Cannot load /etc/httpd/modules/mod_python.so into server:
> > /etc/httpd/modules/mod_python.so: undefined symbol:
> > apr_table_compress
> >
> >
> > I tried to search the web with no result.
> >
> > Any help is appreciated
> >
> >
> >
> >
> > Marco Cassiano
> >
> > Manifatture del Nord srl unipersonale
> > Gruppo MaxMara
> >
> > viale Regina Elena 13-15
> > 42100 Reggio Emilia RE
> > ITALY
> >
> > Sede operativa:
> > via Mazzacurati 6
> > 42100 Reggio Emilia RE
> > ITALY
> >
> > Tel. +39 0522 358215
> > Fax +39 0522 268715
> > email : mcassiano@manord.com
> > www.pennyblack.com
> >
> >
> >
> >
> >
> >
> >
> > ---------------------------------------------------------------------------------------------
> >
> > Il contenuto della presente comunicazione ? riservato e destinato
> > esclusivamente ai destinatari indicati. Nel caso in cui sia ricevuto da
> > persona diversa dal destinatario sono proibite la diffusione, la
> > distribuzione e la copia. Nel caso riceveste la presente per errore, Vi
> > preghiamo di informarci e di distruggerlo e/o cancellarlo dal Vostro
> > computer, senza utilizzare i dati contenuti.
> >
> >
> >
> > La presente comunicazione (comprensiva dei documenti allegati) non avr?
> > valore di proposta contrattuale e/o accettazione di proposte provenienti dal
> > destinatario, n? rinuncia o riconoscimento di diritti, debiti e/o crediti,
> > n? sar? impegnativa, qualora non sia sottoscritto successivo accordo da chi
> > pu? validamente obbligarci. Non deriver? alcuna responsabilit?
> > precontrattuale a ns. carico, se la presente non sia seguita da contratto
> > sottoscritto dalle parti.
> >
> > ---------------------------------------------------------------------------------------------
> >
> > The contents of the present communication is strictly confidential and
> > reserved solely to the referred addressees. In the event was received by
> > person different from the addressee, it is forbidden the diffusion,
> > distribution and copy. In the event you have received it mistakenly we ask
> > you to inform us and to destroy and/or to delete it by your computer,
> > without using the data herein contained.
> >
> >
> >
> > The present message (eventual annexes inclusive) shall not be considered any
> > contractual proposal and/or acceptance of offer coming from the addressee,
> > nor waiver neither recognizance of rights, debts and/or credits, and it
> > shall not be binding, when it is not executed a subsequent agreement by
> > person who could lawfully represent us. No pre-contractual liability shall
> > derive to us, when the present communication is not followed by any binding
> > agreement between the parties.
> >
> > ---------------------------------------------------------------------------------------------
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
> >
>

From jpg at jgassociates.ca  Wed Feb 15 12:14:35 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Wed Feb 15 12:13:48 2006
Subject: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
In-Reply-To: <BC53C974C3B9E542BC0A9BD4C5B1168AADC256@NEWMAIL.manord.com>
References: <BC53C974C3B9E542BC0A9BD4C5B1168AADC256@NEWMAIL.manord.com>
Message-ID: <43F3617B.6020605@jgassociates.ca>

Cassiano, Marco wrote:
>  Hi All,
>  
>  
> I tried to compile Mod_python 3.2.7 on RH3EL with ./configure --with-python=/usr/local/bin/python2.4 --with-apxs=/usr/sbin/apxs > config.log
>  
> The compilation seems to be ok (some warnings) but when I start apache I get this error : 
>  
> service httpd start
> 
> Starting httpd: Syntax error on line 6 of /etc/httpd/conf.d/python.conf:
> 
> Cannot load /etc/httpd/modules/mod_python.so into server: /etc/httpd/modules/mod_python.so: undefined symbol: apr_table_compress
>  
>  
> I tried to search the web with no result.
>  
> Any help is appreciated
> 

Most likely you have an older apr version. Mod_python 3.2.7 now uses 
apr_table_compress, which was added in APR 0.9.4. Could you confirm your 
version by running:

$ apr-config --version

Ref. http://www.apache.org/dist/apr/CHANGES-APR-0.9

Jim
From marcdm at phronein.com  Wed Feb 15 12:13:53 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Wed Feb 15 12:13:58 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140012407.8217.29.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
Message-ID: <1140023633.8217.56.camel@localhost.localdomain>

Thank you all for Your tips and responses. 

> Is this server live on the internet or in a stand alone lab?
> Is it possible that there maybe a new virus attaching your machine
> when it connected to the net
It's live on the 'net. But I hope it's not a virus on Debian. Cuz I have
no anti-virus on any of my Debian Boxes :)


> And what do you get in error logs? Does it crash while processing your
> code or on directly in Apache?
> 
> Where did you see DBNoMemory and who reported it? What drivers do you
> use and how do you handle db connections?
The  DB Errors were from the bsddb.DBEnv runninng out of connections.
Not sure why this would happen as it was supposedly designed for many
connections. 
But I'm currently using a global bsddb.DBEnv connection to a folder that
holds many *.bdb files. These are opened stuffed into a queue. The are
closed if older than 2 hrs.
I don't get these errors  anymore. 


> How does Apache behave WRT memory ? There are known memory leaks in
> mod_python version prior to 3.2.7, so 
Each apache process hovers between 3.2 and 4.7 % (readin from top). I
ran some tests on my local server using /usr/sbin/ab, but it never went
down. Not even when requests set to 50000. 

> I would advise you to upgrade to 3.2.7 if you can
Now this is something I've been thinking of. I'll look into it later
tonite. 
 

> >       MaxRequestsPerChild  500
> 
> Make that 10000 or so. This low a number is only required if your
> system is leaking lots of resources (which mod_python does not do).
Now I'm confused. Does it leak or not? How do I test for that?


I've changed the config in the following way :
  - AddHandler python-program py
  + SetHandler mod_python
  - PythonOption SessionDbm=blahblah
  + lines to SetHandler = Default for *.(jpg|gif|png|html|txt)

  -MultiViews 
  KeepAlive On
  KeepAliveTimout 300
  MaxKeepAlive 100
  
  MaxRequestsPerChild 1000

This seems to solve the problem with errors I saw in the logs stating
[No Available Variant] 

Occationally, I see a 404 error in the logs pointing to the wrong
web-root. Actually it points to the only site on the server running
under mod_jk. Is there some sort of contention between the two?

Actually, while writing this email I was checking the server and it
seems that I've solved the problem.

I had a custom session object, that inherited from DBMSession. This was
done to implement some other actions at cleanup time. I commented out
the lines relating to the custom session, and replaced it with the
regular mod_python.Session. Seems to be working ok so far.

I suspect it was either this or the MultiViews that was causing my
probs. 

Let's watch it and see what happens.

Regards,

Marc DM.

On Wed, 2006-02-15 at 09:06 -0500, Marc D. Murray wrote:
> I just 'completed' an application (website) using mod_python. 
> - I'm using the mod_python.publisher handler 
> - Each page is a function in a module. 
> - Apache config has MultiViews enabled
> - Apache/2.0.54 (Debian GNU/Linux) mod_python/3.1.3 Python/2.3.5
> PHP/4.3.10-16 mod_ssl/2.0.54 OpenSSL/0r
> 
> However, I'm having a problem where the server (Apache) goes down every
> 3 - 4 hours. 
> 
> At first, I was getting a DBNoMemory error every half hour. Then I
> started caching database look-ups using memcached. 
> 
> Site was still going down. Now, every hour or two, instead of 40 min.
> 
> So now, I'm caching entire pages but it still going down. Every few
> hours. 
> 
> This is how I'm outputting pages : 
> --> request comes in 
> --> mod_python.publisher decides which module.function to execute 
> --> function checks session variables and loads config from cache or
> *.conf file.
> --> generate cache_key as sitename:req.unparsed_uri:lang  
> --> If item in cache, return cached paged
> --> generate page, insert into cache for 4 hrs --> return output.
> 
> But I'm still being told by Apache that it has reached MaxClients every
> few hours.
> 
> in /etc/apache2/apache.conf I have the following :
> 
> 	KeepAlive Off
> 	Timeout 10
> 	<IfModule prefork.c>
> 	StartServers         5
> 	MinSpareServers      5
> 	MaxSpareServers     10
> 	MaxClients          80
> 	MaxRequestsPerChild  500
> 	</IfModule>
> 	
> Anyone see anything wrong with what's going on here? It's driving me
> crazy with this crashing, and I can't seem to find a solution.
> 
> Thanks.
> 
> Marc DM.
> 
> PS. The server is the same one that used to run the same site in
> mod_mono. Except with mod_mono the server would climb to 32%cpu and stay
> there or climb higher. With mod_python, it never passes 4% Apache Dies.
> Why?
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From mcassiano at manord.com  Wed Feb 15 12:19:04 2006
From: mcassiano at manord.com (Cassiano, Marco)
Date: Wed Feb 15 12:17:20 2006
Subject: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
Message-ID: <BC53C974C3B9E542BC0A9BD4C5B1168AADC260@NEWMAIL.manord.com>

Thank you Jim,

It seems I have the correct version...


[root@oldsvi root]# apr-config --version
0.9.4

 


Marco

-----Original Message-----
From: Jim Gallacher [mailto:jpg@jgassociates.ca] 
Sent: Wednesday, February 15, 2006 6:15 PM
To: Cassiano, Marco
Cc: mod_python@modpython.org; martin@highwaytohell.net
Subject: Re: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3

Cassiano, Marco wrote:
>  Hi All,
>  
>  
> I tried to compile Mod_python 3.2.7 on RH3EL with ./configure --with-python=/usr/local/bin/python2.4 --with-apxs=/usr/sbin/apxs > config.log
>  
> The compilation seems to be ok (some warnings) but when I start apache I get this error : 
>  
> service httpd start
> 
> Starting httpd: Syntax error on line 6 of /etc/httpd/conf.d/python.conf:
> 
> Cannot load /etc/httpd/modules/mod_python.so into server: /etc/httpd/modules/mod_python.so: undefined symbol: apr_table_compress
>  
>  
> I tried to search the web with no result.
>  
> Any help is appreciated
> 

Most likely you have an older apr version. Mod_python 3.2.7 now uses 
apr_table_compress, which was added in APR 0.9.4. Could you confirm your 
version by running:

$ apr-config --version

Ref. http://www.apache.org/dist/apr/CHANGES-APR-0.9

Jim

From grisha at apache.org  Wed Feb 15 12:30:31 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Wed Feb 15 12:30:37 2006
Subject: [mod_python] [SECURITY] A Security Issue with FileSession in 3.2.7
Message-ID: <20060215122007.T73372@grisha.dyndns.org>


If you are using the recently released mod_python 3.2.7 please beware that a 
security issue was discovered in the FileSession code.

You are vulnerable only if you are using mod_python 3.2.7 AND you are using 
FileSession to keep sessions. FileSession is new in 3.2.7 and is not enabled by 
default, therefore if you are using mod_python Session in its default 
configuration you are not vulnerable.

The extent of this vulnerability is limited. Only a user who already has an 
account (or some ability to write to the filesystem) on the system running 
httpd could exploit it, and to the best of our knowledge such a user could 
potentially cause httpd to execute arbitrary code.

We are working on a security release of the next version of mod_python and 
expect it to be out shortly. Until then, please do not use FileSession.

Regards,

Your mod_python team.
From nicolas at lehuen.com  Wed Feb 15 13:27:46 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Wed Feb 15 13:27:50 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140023633.8217.56.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
	<1140023633.8217.56.camel@localhost.localdomain>
Message-ID: <c298f2d70602151027y1d956b76k@mail.gmail.com>

Marc,

What did your custom Session code do ? Can you post it, so that we try
and see what could cause the problem ?

Regards,
Nicolas

2006/2/15, Marc D. Murray <marcdm@phronein.com>:
> Thank you all for Your tips and responses.
>
> > Is this server live on the internet or in a stand alone lab?
> > Is it possible that there maybe a new virus attaching your machine
> > when it connected to the net
> It's live on the 'net. But I hope it's not a virus on Debian. Cuz I have
> no anti-virus on any of my Debian Boxes :)
>
>
> > And what do you get in error logs? Does it crash while processing your
> > code or on directly in Apache?
> >
> > Where did you see DBNoMemory and who reported it? What drivers do you
> > use and how do you handle db connections?
> The  DB Errors were from the bsddb.DBEnv runninng out of connections.
> Not sure why this would happen as it was supposedly designed for many
> connections.
> But I'm currently using a global bsddb.DBEnv connection to a folder that
> holds many *.bdb files. These are opened stuffed into a queue. The are
> closed if older than 2 hrs.
> I don't get these errors  anymore.
>
>
> > How does Apache behave WRT memory ? There are known memory leaks in
> > mod_python version prior to 3.2.7, so
> Each apache process hovers between 3.2 and 4.7 % (readin from top). I
> ran some tests on my local server using /usr/sbin/ab, but it never went
> down. Not even when requests set to 50000.
>
> > I would advise you to upgrade to 3.2.7 if you can
> Now this is something I've been thinking of. I'll look into it later
> tonite.
>
>
> > >       MaxRequestsPerChild  500
> >
> > Make that 10000 or so. This low a number is only required if your
> > system is leaking lots of resources (which mod_python does not do).
> Now I'm confused. Does it leak or not? How do I test for that?
>
>
> I've changed the config in the following way :
>   - AddHandler python-program py
>   + SetHandler mod_python
>   - PythonOption SessionDbm=blahblah
>   + lines to SetHandler = Default for *.(jpg|gif|png|html|txt)
>
>   -MultiViews
>   KeepAlive On
>   KeepAliveTimout 300
>   MaxKeepAlive 100
>
>   MaxRequestsPerChild 1000
>
> This seems to solve the problem with errors I saw in the logs stating
> [No Available Variant]
>
> Occationally, I see a 404 error in the logs pointing to the wrong
> web-root. Actually it points to the only site on the server running
> under mod_jk. Is there some sort of contention between the two?
>
> Actually, while writing this email I was checking the server and it
> seems that I've solved the problem.
>
> I had a custom session object, that inherited from DBMSession. This was
> done to implement some other actions at cleanup time. I commented out
> the lines relating to the custom session, and replaced it with the
> regular mod_python.Session. Seems to be working ok so far.
>
> I suspect it was either this or the MultiViews that was causing my
> probs.
>
> Let's watch it and see what happens.
>
> Regards,
>
> Marc DM.
>
> On Wed, 2006-02-15 at 09:06 -0500, Marc D. Murray wrote:
> > I just 'completed' an application (website) using mod_python.
> > - I'm using the mod_python.publisher handler
> > - Each page is a function in a module.
> > - Apache config has MultiViews enabled
> > - Apache/2.0.54 (Debian GNU/Linux) mod_python/3.1.3 Python/2.3.5
> > PHP/4.3.10-16 mod_ssl/2.0.54 OpenSSL/0r
> >
> > However, I'm having a problem where the server (Apache) goes down every
> > 3 - 4 hours.
> >
> > At first, I was getting a DBNoMemory error every half hour. Then I
> > started caching database look-ups using memcached.
> >
> > Site was still going down. Now, every hour or two, instead of 40 min.
> >
> > So now, I'm caching entire pages but it still going down. Every few
> > hours.
> >
> > This is how I'm outputting pages :
> > --> request comes in
> > --> mod_python.publisher decides which module.function to execute
> > --> function checks session variables and loads config from cache or
> > *.conf file.
> > --> generate cache_key as sitename:req.unparsed_uri:lang
> > --> If item in cache, return cached paged
> > --> generate page, insert into cache for 4 hrs --> return output.
> >
> > But I'm still being told by Apache that it has reached MaxClients every
> > few hours.
> >
> > in /etc/apache2/apache.conf I have the following :
> >
> >       KeepAlive Off
> >       Timeout 10
> >       <IfModule prefork.c>
> >       StartServers         5
> >       MinSpareServers      5
> >       MaxSpareServers     10
> >       MaxClients          80
> >       MaxRequestsPerChild  500
> >       </IfModule>
> >
> > Anyone see anything wrong with what's going on here? It's driving me
> > crazy with this crashing, and I can't seem to find a solution.
> >
> > Thanks.
> >
> > Marc DM.
> >
> > PS. The server is the same one that used to run the same site in
> > mod_mono. Except with mod_mono the server would climb to 32%cpu and stay
> > there or climb higher. With mod_python, it never passes 4% Apache Dies.
> > Why?
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From nicolas at lehuen.com  Wed Feb 15 13:29:19 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Wed Feb 15 13:29:24 2006
Subject: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
In-Reply-To: <BC53C974C3B9E542BC0A9BD4C5B1168AADC260@NEWMAIL.manord.com>
References: <BC53C974C3B9E542BC0A9BD4C5B1168AADC260@NEWMAIL.manord.com>
Message-ID: <c298f2d70602151029i7583386cn@mail.gmail.com>

Well, it's not sure that the APR version you get by typing this is the
same as used by your Apache server. It could come from another
package. One sure thing is that Apache 2.0.46 did not include APR
0.9.4, and therefore did not have a apr_table_compress function.

Regards,
Nicolas

2006/2/15, Cassiano, Marco <mcassiano@manord.com>:
> Thank you Jim,
>
> It seems I have the correct version...
>
>
> [root@oldsvi root]# apr-config --version
> 0.9.4
>
>
>
>
> Marco
>
> -----Original Message-----
> From: Jim Gallacher [mailto:jpg@jgassociates.ca]
> Sent: Wednesday, February 15, 2006 6:15 PM
> To: Cassiano, Marco
> Cc: mod_python@modpython.org; martin@highwaytohell.net
> Subject: Re: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
>
> Cassiano, Marco wrote:
> >  Hi All,
> >
> >
> > I tried to compile Mod_python 3.2.7 on RH3EL with ./configure --with-python=/usr/local/bin/python2.4 --with-apxs=/usr/sbin/apxs > config.log
> >
> > The compilation seems to be ok (some warnings) but when I start apache I get this error :
> >
> > service httpd start
> >
> > Starting httpd: Syntax error on line 6 of /etc/httpd/conf.d/python.conf:
> >
> > Cannot load /etc/httpd/modules/mod_python.so into server: /etc/httpd/modules/mod_python.so: undefined symbol: apr_table_compress
> >
> >
> > I tried to search the web with no result.
> >
> > Any help is appreciated
> >
>
> Most likely you have an older apr version. Mod_python 3.2.7 now uses
> apr_table_compress, which was added in APR 0.9.4. Could you confirm your
> version by running:
>
> $ apr-config --version
>
> Ref. http://www.apache.org/dist/apr/CHANGES-APR-0.9
>
> Jim
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jpg at jgassociates.ca  Wed Feb 15 15:40:57 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Wed Feb 15 15:39:22 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140023633.8217.56.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
	<1140023633.8217.56.camel@localhost.localdomain>
Message-ID: <43F391D9.9030409@jgassociates.ca>

Marc D. Murray wrote:
> Thank you all for Your tips and responses. 
> 
> 
>>Is this server live on the internet or in a stand alone lab?
>>Is it possible that there maybe a new virus attaching your machine
>>when it connected to the net
> 
> It's live on the 'net. But I hope it's not a virus on Debian. Cuz I have
> no anti-virus on any of my Debian Boxes :)
> 
> 
> 
>>And what do you get in error logs? Does it crash while processing your
>>code or on directly in Apache?
>>
>>Where did you see DBNoMemory and who reported it? What drivers do you
>>use and how do you handle db connections?
> 
> The  DB Errors were from the bsddb.DBEnv runninng out of connections.
> Not sure why this would happen as it was supposedly designed for many
> connections. 
> But I'm currently using a global bsddb.DBEnv connection to a folder that
> holds many *.bdb files. These are opened stuffed into a queue. The are
> closed if older than 2 hrs.
> I don't get these errors  anymore. 
> 
> 
> 
>>How does Apache behave WRT memory ? There are known memory leaks in
>>mod_python version prior to 3.2.7, so 
> 
> Each apache process hovers between 3.2 and 4.7 % (readin from top). I
> ran some tests on my local server using /usr/sbin/ab, but it never went
> down. Not even when requests set to 50000. 
> 
> 
>>I would advise you to upgrade to 3.2.7 if you can
> 
> Now this is something I've been thinking of. I'll look into it later
> tonite. 
>  
> 
> 
>>>      MaxRequestsPerChild  500
>>
>>Make that 10000 or so. This low a number is only required if your
>>system is leaking lots of resources (which mod_python does not do).
> 
> Now I'm confused. Does it leak or not? How do I test for that?

It depends on how you define "lots". There is an issue in 3.1.4 with the 
use of PythonOption causing a leak. Each instance of PythonOption in 
your apache configuration leaks 25 bytes for each request. This will 
obviously only become a problem if your MaxRequestPerChild set at a very 
high number (or 0).

IIRC the other issue was a problem with garbage collecting circular 
references for the request object. Nicolas may have a better 
recollection, but it seems to me this was mainly a problem when 
registering a cleanup that held a reference to the request object. This 
was a more serious leak and could cause problems in the sort of time 
frame you are seeing.

There can also be related issue if a segfault occurs in the cleanup 
phase as a result of holding a reference to the request object which has 
already been garbage collected. The client would still see the result 
and not be aware of the problem, but the cleanup code never closes the 
db connection because it segfaults. A segfault would also explain why 
your memory use seems stable. It's sort of like having a really low 
MaxRequestsPerChild setting. ;)

A segfault in the cleanup code is obviously a real performance killer, 
so check that code carefully. As Nicolas suggested, you may want to post 
the code for your DBMSession subclass.

At any rate, 3.2.7 fixes these issues, and an upgrade is in order.

Jim


From grahamd at dscpl.com.au  Wed Feb 15 16:20:48 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb 15 16:21:00 2006
Subject: [mod_python] Apache Status-Code and headers
In-Reply-To: <43F31907.6080505@gmx.org>
References: <43F31907.6080505@gmx.org>
Message-ID: <48CC08A6-774C-4196-9078-B5821B15A53B@dscpl.com.au>


On 15/02/2006, at 11:05 PM, Lars Eriksen wrote:

> The manual says:
>
> *set_content_length*( 	len)
>
> Sets the value of req.clength and the "Content-Length" header to  
> len. Note that after the headers have been sent out (which happens  
> just before the first byte of the body is written, i.e. first call  
> to req.write()), calling the method is meaningless.
>
> Now how can returning the status code, e.g. apache.OK, after you  
> call req.write(...), have any effect if the headers have already  
> been sent out?

Return apache.OK means something different to returning a HTTP 200  
result.
It is returning information to the server, not to the client.

Have a read through:

   http://162.105.203.19/apache-doc/27.htm#BIN74


Graham
From grisha at apache.org  Mon Feb 13 10:51:32 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Wed Feb 15 16:32:43 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.2.7
Message-ID: <20060213104603.V24288@grisha.dyndns.org>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the 3.2.7 release of mod_python. Mod_python 3.2.7
is considered a stable release, suitable for production use.

Mod_python is an Apache HTTP Server module that embeds the Python
language interpreter within the server. With mod_python you can write
web-based applications in Python that will run many times faster than
traditional CGI and will have access to advanced features such as
ability to maintain objects between requests, access to httpd
internals, content filters and connection handlers.

The 3.2.7 release has many new features, feature enhancements, fixed
bugs and other improvements over the previous version. See Appendix A
of mod_python documentation for more details.

Mod_python 3.2.7 is released under Apache License version 2.0.

Mod_python 3.2.7 is available for download from:

http://httpd.apache.org/modules/python-download.cgi

More information about mod_python is available at:

http://httpd.apache.org/modules/

Many thanks to Jim Gallacher, Graham Dumpleton, Nicolas Lehuen and
everyone else who contributed to and helped test this release, without
your help it would not be possible!

Regards,

Grisha Trubetskoy
From grahamd at dscpl.com.au  Wed Feb 15 16:32:58 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb 15 16:33:10 2006
Subject: [mod_python] Re: reading mod_ssl variables from mod_python
In-Reply-To: <Pine.GSO.4.58.0602151402310.1003@rcf2.rhic.bnl.gov>
References: <Pine.GSO.4.58.0602031639500.17606@rcf2.rhic.bnl.gov>
	<1430648d555b4bccee15457db7e486a1@dscpl.com.au>
	<Pine.GSO.4.58.0602151402310.1003@rcf2.rhic.bnl.gov>
Message-ID: <1F698EA4-D2A6-440D-A01C-5066044DE0CB@dscpl.com.au>

Please keep stuff on the mailing list. I have resent this to the list  
and
when I have a chance to look properly will respond.

On 16/02/2006, at 6:10 AM, Tomasz Wlodek wrote:

> Hi,
>
> few weeks ago you gave me a patch which was intended to allow me to  
> read
> mod_ssl variables from mod_python authentication handler.
>
> I installed it on my site, compiled (no errors nor warnings) and  
> converted
> to python module. Then I inserted it in mod_python authentication  
> handler:
>
> from mod_python import apache
> import _mp_mod_ssl
> import os
>
> def authenhandler(req):
>     req.add_common_vars()
>     name='SSL_CLIENT_S_DN'
>     is_https = _mp_mod_ssl.is_https(req)
>     if is_https!=1:
>         return apache.HTTP_FORBIDDEN
>     else:
>         lookup = _mp_mod_ssl.var_lookup(req,name)
>         req.write(lookup)
>         return apache.OK
>
> The code is supposed to check whether the use presented a  
> certificate, if
> yes let him in. Otherwise reject him.
>
> The problem is that the code does not seem to be stable: sometimes it
> returns correctly my DN. Sometimes it fails on the lookup =
> _mp_mod_ssl.var_lookup(req,name) line. If I do some innocent code
> rearrangement it is enough to make the code fail. I see no apparent  
> reason
> why sometimes it fails and sometimes works.
>
> The apache error log says only:
>
> [Wed Feb 15 13:59:18 2006] [notice] child pid 14273 exit signal  
> Aborted
> (6)
> [Wed Feb 15 14:00:13 2006] [error] (13)Permission denied: Cannot open
> SSLSessionCache DBM file `/var/cache/mod_ssl/scache' for scanning
> [Wed Feb 15 14:00:13 2006] [error] (13)Permission denied: Cannot open
> SSLSessionCache DBM file `/var/cache/mod_ssl/scache' for reading  
> (fetch)
> [Wed Feb 15 14:00:15 2006] [notice] mod_python: (Re)importing module
> 'myhandler'
> *** glibc detected *** free(): invalid next size (fast): 0x083e0a90  
> ***
> [Wed Feb 15 14:00:15 2006] [notice] child pid 13342 exit signal  
> Aborted
> (6)
>
> Is there a simple way to debug the code?
>
> Another question: In the example above I get the value of variable
> SSL_CLIENT_S_DN (user DN). It sometimes reads the DN correctly and
> sometimes not. But when I try to read the variable SSL_CLIENT_CERT  
> (user
> certificate) the code always fails. Any idea what could be wrong?
>
> Tomasz Wlodek                        | tel 631-344-7448
> Brookhaven Laboratory, Building 510M | fax 631-344-7616
> Upton NY 11973-5000                  |

From grahamd at dscpl.com.au  Wed Feb 15 16:33:08 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb 15 16:33:16 2006
Subject: [mod_python] Re: One observation about the mod_ssl-mod_python
	problem
In-Reply-To: <Pine.GSO.4.58.0602151415130.1003@rcf2.rhic.bnl.gov>
References: <Pine.GSO.4.58.0602031639500.17606@rcf2.rhic.bnl.gov>
	<1430648d555b4bccee15457db7e486a1@dscpl.com.au>
	<Pine.GSO.4.58.0602151415130.1003@rcf2.rhic.bnl.gov>
Message-ID: <F7010B69-9B2E-4212-A05E-5EB9B1724B2E@dscpl.com.au>

Please keep stuff on the mailing list. I have resent this to the list  
and
when I have a chance to look properly will respond.

On 16/02/2006, at 6:17 AM, Tomasz Wlodek wrote:

> Hi,
>
> I noticed that when the mod_python handler fails several times,  
> then I can
> fix it by restarting apache. It will then work, while producing the
> following message in apache error log:
>
> [Wed Feb 15 14:14:21 2006] [notice] cannot use a full URL in a 401
> ErrorDocument directive --- ignoring!
> [Wed Feb 15 14:14:30 2006] [error] [client 66.249.72.211] [Wed Feb 15
> 14:14:30 2006] rdiff: \t(in cleanup) Can't call method "store" on an
> undefined value at /usr/lib/perl5/site_perl/5.8.5/CGI/Session.pm  
> line 192
> during global destruction.
>
> Could there be some sort of leak of some resource in _mp_mod_ssl which
> causes the code to fail after a while?
>
> Tomasz Wlodek                        | tel 631-344-7448
> Brookhaven Laboratory, Building 510M | fax 631-344-7616
> Upton NY 11973-5000                  |

From grahamd at dscpl.com.au  Wed Feb 15 17:05:02 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb 15 17:05:12 2006
Subject: [mod_python] Re: One observation about the mod_ssl-mod_python
	problem
In-Reply-To: <F7010B69-9B2E-4212-A05E-5EB9B1724B2E@dscpl.com.au>
References: <Pine.GSO.4.58.0602031639500.17606@rcf2.rhic.bnl.gov>
	<1430648d555b4bccee15457db7e486a1@dscpl.com.au>
	<Pine.GSO.4.58.0602151415130.1003@rcf2.rhic.bnl.gov>
	<F7010B69-9B2E-4212-A05E-5EB9B1724B2E@dscpl.com.au>
Message-ID: <DEA43436-EE5E-4FC3-9FE9-970414192516@dscpl.com.au>


On 16/02/2006, at 8:33 AM, Graham Dumpleton wrote:

> On 16/02/2006, at 6:17 AM, Tomasz Wlodek wrote:
>
>> Hi,
>>
>> I noticed that when the mod_python handler fails several times,  
>> then I can
>> fix it by restarting apache. It will then work, while producing the
>> following message in apache error log:
>>
>> [Wed Feb 15 14:14:21 2006] [notice] cannot use a full URL in a 401
>> ErrorDocument directive --- ignoring!
>> [Wed Feb 15 14:14:30 2006] [error] [client 66.249.72.211] [Wed Feb 15
>> 14:14:30 2006] rdiff: \t(in cleanup) Can't call method "store" on an
>> undefined value at /usr/lib/perl5/site_perl/5.8.5/CGI/Session.pm  
>> line 192
>> during global destruction.
>>
>> Could there be some sort of leak of some resource in _mp_mod_ssl  
>> which
>> causes the code to fail after a while?

I haven't looked at how mod_perl implements server cleanup functions,
but the way that Python does has been found to cause problems. As I
haven't found any other way it can be done yet, can only assume that
mod_perl does it the same way and thus is also having problems. If I
am right, mod_perl could have these issues independent of whether
mod_python is used.

See:

   http://issues.apache.org/jira/browse/MODPYTHON-109

for the server cleanup problem as it pertains to mod_python.

Graham
From deron.meranda at gmail.com  Wed Feb 15 17:11:39 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Wed Feb 15 17:11:43 2006
Subject: [mod_python] Re: reading mod_ssl variables from mod_python
In-Reply-To: <1F698EA4-D2A6-440D-A01C-5066044DE0CB@dscpl.com.au>
References: <Pine.GSO.4.58.0602031639500.17606@rcf2.rhic.bnl.gov>
	<1430648d555b4bccee15457db7e486a1@dscpl.com.au>
	<Pine.GSO.4.58.0602151402310.1003@rcf2.rhic.bnl.gov>
	<1F698EA4-D2A6-440D-A01C-5066044DE0CB@dscpl.com.au>
Message-ID: <5c06fa770602151411u4c45aa33gdcdf983b6b63da22@mail.gmail.com>

Tomasz,

I'm not sure what your _mp_mod_ssl module is (perhaps you said
off this list?).  I'm assuming it's a wrapper of sorts around my ssl
patches in MODPYTHON-94.

Please keep in mind though that if you're using my patch as it was
attached in issue http://issues.apache.org/jira/browse/MODPYTHON-94
that we have since decided to rename the function ssl_var() to
be ssl_var_lookup() .   Just so you won't be surprised when it finally
makes it into a release.


> On 16/02/2006, at 6:10 AM, Tomasz Wlodek wrote:
> > def authenhandler(req):
> >     req.add_common_vars()
> >     name='SSL_CLIENT_S_DN'

Make sure that your apache mod_ssl SSLOptions directive has
the ExportCertData option enabled.

> >     is_https = _mp_mod_ssl.is_https(req)
> >     if is_https!=1:

Drop the "!=1" part.  This may become a boolean True/False
at some point.

> >         return apache.HTTP_FORBIDDEN
> >     else:
> >         lookup = _mp_mod_ssl.var_lookup(req,name)
> >         req.write(lookup)
> >         return apache.OK


> > The problem is that the code does not seem to be stable: sometimes it
> > returns correctly my DN. Sometimes it fails on the lookup =
> > _mp_mod_ssl.var_lookup(req,name) line.

> > [Wed Feb 15 14:00:13 2006] [error] (13)Permission denied: Cannot open
> > SSLSessionCache DBM file `/var/cache/mod_ssl/scache' for scanning

Hmm.  This apache error would seem to be somewhat important.
Can you try using a different SSL cache type (the mod_ssl
SSLSessionCache directive).

Also check on your SSLMutex option.  What you set it too may depend
on the type of apache MPM you're using.

Also you should try to determine why the permission denied errors
are occuring in the first place.  Are you perhaps running under
SELinux or something?

--
Deron Meranda

From fumanchu at amor.org  Wed Feb 15 18:22:23 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Wed Feb 15 18:23:46 2006
Subject: [mod_python] Re: forks, daemons and other beasts
Message-ID: <6949EC6CD39F97498A57E0FA55295B2101A44F5D@ex9.hostedexchange.local>

> Daniel Nogradi wrote:
> > users upload a zip file and should get an acknowledgement
> > that the upload was successful. The server should start
> > unpacking the archive, check if the files are okay and
> > move them to a directory. All of this can take quite long,
> > so the acknowledgement should be sent before this
> > unpacking/checking/moving finishes.

I forgot to mention you should also respond with a "202 Accepted" status
in this case:
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org

From grahamd at dscpl.com.au  Wed Feb 15 18:37:36 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb 15 18:37:42 2006
Subject: [mod_python] Re: reading mod_ssl variables from mod_python
Message-ID: <1140046656.32593@dscpl.user.openhosting.com>

Deron Meranda wrote ..
> 
> I'm not sure what your _mp_mod_ssl module is (perhaps you said
> off this list?).  I'm assuming it's a wrapper of sorts around my ssl
> patches in MODPYTHON-94.

The _mp_mod_ssl module existed long before your suggested patch.
It was a proof of concept to show that the sort of SSL stuff could be
done without even needing to modify mod_python.

I refered you to it when you first talked about your patches:

  http://www.modpython.org/pipermail/mod_python/2005-November/019609.html

I take it you must not have looked at it. :-(

Graham

> Please keep in mind though that if you're using my patch as it was
> attached in issue http://issues.apache.org/jira/browse/MODPYTHON-94
> that we have since decided to rename the function ssl_var() to
> be ssl_var_lookup() .   Just so you won't be surprised when it finally
> makes it into a release.
>
> > On 16/02/2006, at 6:10 AM, Tomasz Wlodek wrote:
> > > def authenhandler(req):
> > >     req.add_common_vars()
> > >     name='SSL_CLIENT_S_DN'
> 
> Make sure that your apache mod_ssl SSLOptions directive has
> the ExportCertData option enabled.
> 
> > >     is_https = _mp_mod_ssl.is_https(req)
> > >     if is_https!=1:
> 
> Drop the "!=1" part.  This may become a boolean True/False
> at some point.
> 
> > >         return apache.HTTP_FORBIDDEN
> > >     else:
> > >         lookup = _mp_mod_ssl.var_lookup(req,name)
> > >         req.write(lookup)
> > >         return apache.OK
> 
> 
> > > The problem is that the code does not seem to be stable: sometimes
> it
> > > returns correctly my DN. Sometimes it fails on the lookup =
> > > _mp_mod_ssl.var_lookup(req,name) line.
> 
> > > [Wed Feb 15 14:00:13 2006] [error] (13)Permission denied: Cannot open
> > > SSLSessionCache DBM file `/var/cache/mod_ssl/scache' for scanning
> 
> Hmm.  This apache error would seem to be somewhat important.
> Can you try using a different SSL cache type (the mod_ssl
> SSLSessionCache directive).
> 
> Also check on your SSLMutex option.  What you set it too may depend
> on the type of apache MPM you're using.
> 
> Also you should try to determine why the permission denied errors
> are occuring in the first place.  Are you perhaps running under
> SELinux or something?
> 
> --
> Deron Meranda
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From deron.meranda at gmail.com  Wed Feb 15 19:07:13 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Wed Feb 15 19:07:17 2006
Subject: [mod_python] Re: reading mod_ssl variables from mod_python
In-Reply-To: <1140046656.32593@dscpl.user.openhosting.com>
References: <1140046656.32593@dscpl.user.openhosting.com>
Message-ID: <5c06fa770602151607l2f55b9f5u29efd2a4c3dc267@mail.gmail.com>

On 2/15/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> The _mp_mod_ssl module existed long before your suggested patch.
> It was a proof of concept to show that the sort of SSL stuff could be
> done without even needing to modify mod_python.
>
> I refered you to it when you first talked about your patches:
>
>   http://www.modpython.org/pipermail/mod_python/2005-November/019609.html
>
> I take it you must not have looked at it. :-(

Oh, sorry, I didn't recognize it by its name.  Now I'm clearer :)

I'm wondering though if Tomasz's problems are specific to that, or if
they might also occur with the newer patch as well.  Or if it's
nothing to do with mod_python at all, and really is a mod_ssl
configuration issue.

Tomasz...I don't know how flexible you can be, but may it be possible
for you to try  using mod_python 3.2.7 with the proposed patch in
MODPYTHON-94?  It would really be valuable to get somebody testing on
that before it goes into an official release.  Plus it may even be
worthwhile to compare _mp_mod_ssl with the new patch in your case,
just to see if they both exhibit the same behavior or not.

[Yes, I'm using the new patch + 3.2.7 today in a production system
with no problems.  But I don't use client certs very much, and I'm
mostly hooking in the AccessHandler phase instead of Authen* phases. 
Also I'm just one test case.]
--
Deron Meranda

From nlv11281 at natlab.research.philips.com  Thu Feb 16 01:36:31 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Thu Feb 16 01:36:34 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140023633.8217.56.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
	<1140023633.8217.56.camel@localhost.localdomain>
Message-ID: <43F41D6F.8030109@natlab.research.philips.com>

>>>      MaxRequestsPerChild  500
>>
>>Make that 10000 or so. This low a number is only required if your
>>system is leaking lots of resources (which mod_python does not do).
> 
> Now I'm confused. Does it leak or not? How do I test for that?

The MaxRequestsPerChild option instructs Apache to kill any worker process that has processed that 
number of connections ("Request" is a historical name here). Some systems, like Sun Solaris, leak 
memory in their standard libraries and as a result, it is impossible to have a process running too 
long on such a machine, because its memory consumption will keep growing forever.

The mod_python stuff does not leak (a lot), so a low setting just kills workers for no reason.

Note that KeepAlive means that the same connection can be used for multiple requests, and thus the 
number of actual requests handled by a child worker can be much more than the limit supplied here. 
Another good side effect of keepalives is that the client talks to the same worker process, and this 
can improve your caching efficiency - a per process cache is often quite useful.

Mike.

From grahamd at dscpl.com.au  Thu Feb 16 01:48:20 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 16 01:48:28 2006
Subject: [mod_python] Re: reading mod_ssl variables from mod_python
Message-ID: <1140072500.22229@dscpl.user.openhosting.com>

In my code, delete the line:

  free(variable_value);

It shouldn't be there. Not sure why I had it. That will eliminate
the crash and complaint about free() in log file.

As suggested by Deron, you may want to use his direct patches
to mod_python since they have been used where as mine was
proof of concept and I couldn't actually test it myself. You might
at least compare how he implements the two functions to what
I did. See patch associated with:

  http://issues.apache.org/jira/browse/MODPYTHON-94
  http://issues.apache.org/jira/secure/attachment/12321011/requestobject.c.patch

Graham

Graham Dumpleton wrote ..
> Please keep stuff on the mailing list. I have resent this to the list 
> and
> when I have a chance to look properly will respond.
> 
> On 16/02/2006, at 6:10 AM, Tomasz Wlodek wrote:
> 
> > Hi,
> >
> > few weeks ago you gave me a patch which was intended to allow me to 
> > read
> > mod_ssl variables from mod_python authentication handler.
> >
> > I installed it on my site, compiled (no errors nor warnings) and  
> > converted
> > to python module. Then I inserted it in mod_python authentication  
> > handler:
> >
> > from mod_python import apache
> > import _mp_mod_ssl
> > import os
> >
> > def authenhandler(req):
> >     req.add_common_vars()
> >     name='SSL_CLIENT_S_DN'
> >     is_https = _mp_mod_ssl.is_https(req)
> >     if is_https!=1:
> >         return apache.HTTP_FORBIDDEN
> >     else:
> >         lookup = _mp_mod_ssl.var_lookup(req,name)
> >         req.write(lookup)
> >         return apache.OK
> >
> > The code is supposed to check whether the use presented a  
> > certificate, if
> > yes let him in. Otherwise reject him.
> >
> > The problem is that the code does not seem to be stable: sometimes it
> > returns correctly my DN. Sometimes it fails on the lookup =
> > _mp_mod_ssl.var_lookup(req,name) line. If I do some innocent code
> > rearrangement it is enough to make the code fail. I see no apparent 
> > reason
> > why sometimes it fails and sometimes works.
> >
> > The apache error log says only:
> >
> > [Wed Feb 15 13:59:18 2006] [notice] child pid 14273 exit signal  
> > Aborted
> > (6)
> > [Wed Feb 15 14:00:13 2006] [error] (13)Permission denied: Cannot open
> > SSLSessionCache DBM file `/var/cache/mod_ssl/scache' for scanning
> > [Wed Feb 15 14:00:13 2006] [error] (13)Permission denied: Cannot open
> > SSLSessionCache DBM file `/var/cache/mod_ssl/scache' for reading  
> > (fetch)
> > [Wed Feb 15 14:00:15 2006] [notice] mod_python: (Re)importing module
> > 'myhandler'
> > *** glibc detected *** free(): invalid next size (fast): 0x083e0a90 
> > ***
> > [Wed Feb 15 14:00:15 2006] [notice] child pid 13342 exit signal  
> > Aborted
> > (6)
> >
> > Is there a simple way to debug the code?
> >
> > Another question: In the example above I get the value of variable
> > SSL_CLIENT_S_DN (user DN). It sometimes reads the DN correctly and
> > sometimes not. But when I try to read the variable SSL_CLIENT_CERT  
> > (user
> > certificate) the code always fails. Any idea what could be wrong?
> >
> > Tomasz Wlodek                        | tel 631-344-7448
> > Brookhaven Laboratory, Building 510M | fax 631-344-7616
> > Upton NY 11973-5000                  |
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From gustavo.cordova at q-voz.com  Thu Feb 16 08:47:21 2006
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Thu Feb 16 08:39:27 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>	
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>	
	<20060214101420.K47576@grisha.dyndns.org>	
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>	
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
Message-ID: <43F48269.3050409@q-voz.com>

Dan Eloff wrote:

> Gustavo
>
> "So, if you can configure your default encoding"
>
> That would be a bad idea. You don't want to force the interpreter to 
> use a different encoding, it could cause you all manner of grief with 
> code that wasn't written for that, and if it's third party code you 
> can't do much about anything that does break.


Hi Dan, thanks for replying.

Do you have any examples of the above?  I haven't had any troubles 
whatsoever using a default encoding, even when the script source is 
different from the default encoding (I always use the "-*- coding: xxx 
-*-" bit at the top of the source file), so while I don't doubt at all 
what you're saying, having a practical case where fiddling with the 
default encoding breaks things is good.

Good morning, y'all.

-gus



From bud at comune.grosseto.it  Thu Feb 16 09:49:55 2006
From: bud at comune.grosseto.it (Bud P. Bruegger)
Date: Thu Feb 16 09:34:41 2006
Subject: [mod_python] Documentation error: request.user not read-only
In-Reply-To: <20050421145247.V71813@grisha.dyndns.org>
References: <5.2.1.1.0.20050421184447.0296c9e8@mail.comune.grosseto.it>
	<5.2.1.1.0.20050421184447.0296c9e8@mail.comune.grosseto.it>
Message-ID: <5.2.1.1.0.20060216154825.038a9428@mail.comune.grosseto.it>

Hi Grisha,

just looked at the latest doc 
http://www.modpython.org/live/mod_python-3.2.7/doc-html/pyapi-mprequest-mem.html 
and it seems that req.user is still stated to be read-only.  (See also your 
response below).

best cheers
-b

At 14.54 21/04/2005 -0400, Gregory (Grisha) Trubetskoy wrote:

>That's a documentation error. req.user has been writable for quite a while 
>now.
>
>Grisha
>
>On Thu, 21 Apr 2005, Bud P. Bruegger wrote:
>
>>Hello,
>>
>>I would like to write a simple handler that sets the REMOTE_USER 
>>cgi-variable.  The incentive of this is that no matter how the user 
>>authenticates (with HTTP BASIC or with SSL client-cert-auth and 
>>+fakeBasicAuth), I would like to present the same person ID to the (cgi) 
>>application.  In particular, I would like to set REMOTE_USER to the 
>>national unique person identifier (similar to a U.S. social security 
>>number).  For example, the handler should take the HTTP BASIC user name 
>>or Distinguished Name returned by mod_ssl, use it to look up the national 
>>person ID, and then assign it to REMOTE_USER.
>>
>>My problem is that the Request Member "user" documented to be read-only. 
>>Does this mean that I have to intervene some time after the 
>>authentication phase and before the request is passed off to the cgi 
>>application?  Should I maybe act on req.subprocess_env in the Fixup handler?
>>Maybe it is relevant that in a simple test with Apache 1.3, a SetEnv 
>>REMOTE_USER <someLiteral> worked and was visible from the CGI App.
>>
>>Many thanks in advance for any help
>>-b
>>
>>
>>-------------------------------------------------------------------------------------------------
>>Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 
>>(voice),  -21139 (fax)
>>Servizio Elaborazione Dati                    e-mail:  bud@comune.grosseto.it
>>Comune di Grosseto http://www.comune.grosseto.it/cie/
>>Via Ginori, 43 http://OpenPortalGuard.sf.net
>>58100 Grosseto (Tuscany, Italy)           jabber:  bud@amessage.info
>>
>>Free Software in Public Administration:  not just a good idea, but a 
>>necessity
>>
>>Perfection is attained, not when there is nothing more to be added, but 
>>when there is nothing more to be taken away -- Antoine de Saint-Exupery 
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>-------------------------------------------------------------------------------------------------
>Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 
>(voice),  -21139 (fax)
>Servizio Elaborazione Dati                    e-mail:  bud@comune.grosseto.it
>Comune di Grosseto                            jabber:  bud@jabber.no
>Via Ginori, 
>43                                      http://www.comune.grosseto.it/cie/
>58100 Grosseto (Tuscany, 
>Italy)           http://www.comune.grosseto.it/interopEID/ 

From marcdm at phronein.com  Thu Feb 16 09:44:57 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Thu Feb 16 09:44:58 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140012407.8217.29.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
Message-ID: <1140101097.8693.25.camel@localhost.localdomain>


> 
> What did your custom Session code do ? Can you post it, so that we try
> and see what could cause the problem ?
The intention was to prevent multiple users from sharing username and
password. And to lock an account if it was used from too many
locations. 

I'll post it, but before we go there, I should tell you that, I'm still
getting that dreaded "MaxClients reached" error again. Taking somewhere
of of the order of 6hrs now though.

> On Wed, 2006-02-15 at 16:06 +0100, Mike Looijmans wrote:
> > Increase MaxClients. This is the "absolute" max number of clients
> > that can be connected 
> > concurrently. You can safely put that into the 1000 range. 
I thought I couldn't go higher than 256 with this number without having
to recompile apache. Am I right? 

In the Apache config, 
 - KeepAlive On
 - MaxKeepAliveRequests 100
 - KeepAliveTimeout 300
 - StartServers 5
 - MinSpare 5
 - MaxSpare 10
 - MaxClients 120
 - MaxRequestPerChild 1000

<VirtualHost config....>
 <Directory /home/www/web4/web/>
   Options FollowSymLinks
   Order allow,deny
   allow from all
   SetHandler mod_python
   PythonHandler mod_python.publisher
   PythonDebug Off
   PythonPath "sys.path+['/home/www/web4/usr/lib']"
   AllowOverride None
 </Directory>

# text files
<Files ~ "\.(txt|css|html?)$">
SetHandler default
</Files>

<Files ~ "\.(gif|jpe?g|png|ico)$">
SetHandler default
</Files>

RewriteEngine On
RewriteRule ^/(.*)\.aspx$ /$1 [P]

PythonOptimize On
ServerSignature Off

.... [error docs, logs etc]
</VirtualServer>

And I'm not using my custom session. 

Let's hope that a mod_python upgrade will help. Should I also upgrade to
Python 2.4 as well? I develop with python 2.4 on my Ubuntu desktop, but
deploy to Python 2.3.5 on the Debian server. 

Do you guys think I should use the newer version of python when building
mod_python?

Thanks.

/Marc DM

From deron.meranda at gmail.com  Thu Feb 16 10:56:50 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Thu Feb 16 10:56:57 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <43F234B8.8000608@q-voz.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
Message-ID: <5c06fa770602160756g4f8f7040kd4a36495a73002ce@mail.gmail.com>

On 2/14/06, Gustavo C?rdova Avila <gustavo.cordova@q-voz.com> wrote:
> ...  Python is using
> ASCII encoding because it's the default encoding, you can check what your
> default encoding is with:
>
>     >>> import sys
>     >>> sys.getdefaultencoding()
>     'iso-8859-1'
>
> You see here I'm using LATIN1, because it gives me accents and "?", and
> other
> nice chars for spanish.  But, there's no _sys.getdefaultencoding()_ function
> available because it's explicitly deleted in /usr/lib/pythonXX/site.py:
>
>     (around line 394)
>     ...
>     if hasattr(sys, "setdefaultencoding"):
>        del sys.setdefaultencoding
>
> I really don't know the rationale for doing that, maybe to stop different
> modules from stomping on the default encoding, whatever.
>
> So, if you can configure your default encoding to whatever you need ("UTF-8"
> is pretty nice), unicode objects can be correctly serialized to strings
> without
> any problems:

I have already been trying to figure out a way around this.  It appears
to me to be a poorly planned feature in Python itself.  The reson for this
deletion (from what I can tell) makes sense in most cases--it's to prevent
apps from pulling dangerous tricks, such as changing the encoding.
Imagine a python module which sets the encoding internally
because it is easier than calling explit encoding functions.  Since
the default encoding is interpreter-wide (much like a global variable),
it could break the rest of the application.  So Python removes the function
to discourage sloppy shortcuts.

However, there's no way to specify the default encoding when the
interpreter is started (either via a python command-line option or
the start interpreter C api).  And in some applications, especially
like mod_python, retaining the ability to change encodings actually
makes good sense.

Obviously it's best if str() and such in a mod_python-based application
has a default encoding which is the same as the request's content-type
charset.

Since Python's site.py deletes the sys.setdefaultencoding() function,
there's no easy way to alter the encoding on a request-by-request
basis.
The next best would be to specify an encoding on an interpreter
basis, perhaps with a directive such as

   PythonOption DefaultEncoding utf-8

but again, there's no way to do this in a stock Python distribution.
I think this is something that should be discussed within the
Python dev group.


In the mean time, for people that use Unicode, you have a couple
options,

 1. Alter the site.py and change your defaultencoding (to say "utf-8")
     as well as insuring your outgoing content-type has the same
     charset parameter.

 2. Do explicit encoding.  You can even create your own helper
     function like,

   def ustr(s):
       if not isinstance(s, basestring):
           s = str(basestring)
       if isinstance(s, unicode):
           s = s.encode('utf-8')
       return s

     And then use ustr(...) in place of str(...)

--
Deron Meranda

From tomw at bnl.gov  Thu Feb 16 11:21:55 2006
From: tomw at bnl.gov (Tomasz Wlodek)
Date: Thu Feb 16 11:22:14 2006
Subject: [mod_python] Re: reading mod_ssl variables from mod_python
In-Reply-To: <5c06fa770602151607l2f55b9f5u29efd2a4c3dc267@mail.gmail.com>
References: <1140046656.32593@dscpl.user.openhosting.com>
	<5c06fa770602151607l2f55b9f5u29efd2a4c3dc267@mail.gmail.com>
Message-ID: <Pine.GSO.4.58.0602161120050.1003@rcf2.rhic.bnl.gov>

> Tomasz...I don't know how flexible you can be, but may it be possible
> for you to try  using mod_python 3.2.7 with the proposed patch in
> MODPYTHON-94?  It would really be valuable to get somebody testing on
> that before it goes into an official release.  Plus it may even be
> worthwhile to compare _mp_mod_ssl with the new patch in your case,
> just to see if they both exhibit the same behavior or not.
>
> [Yes, I'm using the new patch + 3.2.7 today in a production system
> with no problems.  But I don't use client certs very much, and I'm
> mostly hooking in the AccessHandler phase instead of Authen* phases.
> Also I'm just one test case.]
> --
> Deron Meranda
>


Ok, I can try it. The problem is that right now the site
http://issues.apache.org/jira/browse/MODPYTHON-94 is unavailable

Service Temporarily Unavailable

The server is temporarily unable to service your request due to
maintenance downtime or capacity problems. Please try again later.

I do not know if the problem is with my browser or the site itself, but I
cannot get to it. Once it comes back and I get the code I will try using
your patch and I will let you know how it works.

Tom

From jim at qlf.com  Thu Feb 16 12:09:09 2006
From: jim at qlf.com (Jim Steil)
Date: Thu Feb 16 12:09:37 2006
Subject: [mod_python] Newbie - Screen resoultion
Message-ID: <43F4B1B5.3020305@qlf.com>

Is there a way through mod_python for me to determine the screen 
resolution of my web client machine?  I know I can get this via 
javascript, but was hoping there was a way to get it through the request 
object or something.  If you could point me to the appropriate 
documentation, I'd really appreciate it.  Or, if this simply isn't 
possible, I like to know that.  Thanks in advance for your help.  I've 
already searched a years worth of the archives and reread through the 
manual, but can't seem to find anything.  Maybe my terminology is bad....

    -Jim
-- 
Jim Steil
IT Manager
Quality Liquid Feeds
(608) 935-2345
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060216/57db4585/attachment.html
From dan.eloff at gmail.com  Thu Feb 16 12:10:09 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Thu Feb 16 12:10:13 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <43F48269.3050409@q-voz.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
	<43F48269.3050409@q-voz.com>
Message-ID: <4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>

Gustavo, here's an example. Suppose some code enforces a maximum length on a
string. If it's counting on a default encoding of 1 byte per char, and does
something like len(s) <= 15. For ascii or iso-8859-1 this would work. Or the
code might use indices or slices (and a lot of code does!) If suddenly you
have utf-8 encoded chinese, your string is going to triple in length, and
those functions will have unpredictable behaviour. You could think of any
number of scenarios, even in the python library. I just wouldn't feel
confortable about changing the default encoding, you never know where it
will come back to haunt you. What's so hard about using unicode strings in
your program and then encoding when you send output somewhere?

Of course, like we've noticed in this thread, there is third party code that
just isn't unicode safe like psp in mod_python that will break if you don't
mess with the default encoding. It all boils down to seeing what will work
best in your situation. For myself I would rather do it the right way up
front in the hopes of saving hassles down the road.

-Dan

On 2/16/06, Gustavo C?rdova Avila <gustavo.cordova@q-voz.com> wrote:
>
> Dan Eloff wrote:
>
> > Gustavo
> >
> > "So, if you can configure your default encoding"
> >
> > That would be a bad idea. You don't want to force the interpreter to
> > use a different encoding, it could cause you all manner of grief with
> > code that wasn't written for that, and if it's third party code you
> > can't do much about anything that does break.
>
>
> Hi Dan, thanks for replying.
>
> Do you have any examples of the above?  I haven't had any troubles
> whatsoever using a default encoding, even when the script source is
> different from the default encoding (I always use the "-*- coding: xxx
> -*-" bit at the top of the source file), so while I don't doubt at all
> what you're saying, having a practical case where fiddling with the
> default encoding breaks things is good.
>
> Good morning, y'all.
>
> -gus
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060216/04cef624/attachment.html
From listspam at flowtheory.net  Thu Feb 16 12:15:49 2006
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Thu Feb 16 12:15:59 2006
Subject: [mod_python] Newbie - Screen resoultion
In-Reply-To: <43F4B1B5.3020305@qlf.com>
References: <43F4B1B5.3020305@qlf.com>
Message-ID: <1140110149.26921.3.camel@localhost.localdomain>

Using mod_python does not make apache suddenly clairvoyant. The request
object only has access to what the HTTP request tells it, and screen
resolution is nowhere in that protocol. The javascript you refer to runs
*inside* the client browser, which *does* have access to such
information. This is the only way to do what you're asking.

As an aside, I've never seen a good use for determining client screen
resolution. You should consider carefully your design and decide if this
is really necessary or if you're using it to compensate for some other
design decision that simply flawed.

-jag

On Thu, 2006-02-16 at 11:09 -0600, Jim Steil wrote:
> Is there a way through mod_python for me to determine the screen
> resolution of my web client machine?  I know I can get this via
> javascript, but was hoping there was a way to get it through the
> request object or something.  If you could point me to the appropriate
> documentation, I'd really appreciate it.  Or, if this simply isn't
> possible, I like to know that.  Thanks in advance for your help.  I've
> already searched a years worth of the archives and reread through the
> manual, but can't seem to find anything.  Maybe my terminology is
> bad....
> 
>     -Jim
> -- 
> Jim Steil
> IT Manager
> Quality Liquid Feeds
> (608) 935-2345
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From dan.eloff at gmail.com  Thu Feb 16 12:16:04 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Thu Feb 16 12:16:08 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
	<43F48269.3050409@q-voz.com>
	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
Message-ID: <4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>

Hi Nicolas, as usual you're right on the money. I meant to post this
yesterday, but I always forget to check the To: field when I reply and it
always ends up going somewhere other than the list (to Gustavo this time,
sorry about that Gustavo.)

Because of the somewhat unusual way in which I use psp, I'm making my own
implementation right now. I treat psp as templates, and I nest them, and
this unfortuantly writes the templates from the innermost to the outermost,
not what I want. I've been getting around this by replacing req.write with a
buffered function (only when running a psp template) and then setting it
back when I'm done. This combined with the unciode issues, and some issues
with the way indentation is handled has persuaded me it's time to do things
myself so I can make sure it works for me.

The way I'm handling the issues with encoding is by simply adding two
optional arguments (input and output encoding) to the constructor that both
default to utf-8 (I thought about auto detecting the input encoding, but I'd
rather not force that, you can always do an auto detect and pass that as the
input encoding anyway.)

With the same input and outut encoding, there isn't any conversions done to
the static content, because I encode static content directly into the output
encoding. I've also done things in such a way that regular strings can be
encoded as utf-8 without any conversion as well. For now I do this by
assuming the string is ascii and therefore valid utf-8. I'm 90% sure that's
fine, because passing a string in any other encoding is just looking for
trouble, there's no way I can guess what it's encoded as so I could fix it
or raise an error, this puts the responsibility for encoding regular strings
on the developer, where it should be. But for any other object I convert to
unicode and then encode it with the output encoding. This ensures
__unicode__ is called preferentially over __str__.

My trouble currently is how to implement the encoding and decoding, the only
part I have working is converting the unicode objects to the output encoding
(by using PyString_AsEncodedObject). I'd like to do the conversion using
python's encoding/decoding abilites and without creating redundant extra
copies (like those created by copying a char buffer into a python string and
then converting.)

I'd love to hear what you think about this, I will send you my code when
it's finished and you can pull it apart and reuse the bits you like.

-Dan

On 2/16/06, Dan Eloff <dan.eloff@gmail.com> wrote:
>
> Gustavo, here's an example. Suppose some code enforces a maximum length on
> a string. If it's counting on a default encoding of 1 byte per char, and
> does something like len(s) <= 15. For ascii or iso-8859-1 this would work.
> Or the code might use indices or slices (and a lot of code does!) If
> suddenly you have utf-8 encoded chinese, your string is going to triple in
> length, and those functions will have unpredictable behaviour. You could
> think of any number of scenarios, even in the python library. I just
> wouldn't feel confortable about changing the default encoding, you never
> know where it will come back to haunt you. What's so hard about using
> unicode strings in your program and then encoding when you send output
> somewhere?
>
> Of course, like we've noticed in this thread, there is third party code
> that just isn't unicode safe like psp in mod_python that will break if you
> don't mess with the default encoding. It all boils down to seeing what will
> work best in your situation. For myself I would rather do it the right way
> up front in the hopes of saving hassles down the road.
>
> -Dan
>
> On 2/16/06, Gustavo C?rdova Avila <gustavo.cordova@q-voz.com> wrote:
> >
> > Dan Eloff wrote:
> >
> > > Gustavo
> > >
> > > "So, if you can configure your default encoding"
> > >
> > > That would be a bad idea. You don't want to force the interpreter to
> > > use a different encoding, it could cause you all manner of grief with
> > > code that wasn't written for that, and if it's third party code you
> > > can't do much about anything that does break.
> >
> >
> > Hi Dan, thanks for replying.
> >
> > Do you have any examples of the above?  I haven't had any troubles
> > whatsoever using a default encoding, even when the script source is
> > different from the default encoding (I always use the "-*- coding: xxx
> > -*-" bit at the top of the source file), so while I don't doubt at all
> > what you're saying, having a practical case where fiddling with the
> > default encoding breaks things is good.
> >
> > Good morning, y'all.
> >
> > -gus
> >
> >
> >
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060216/ffef88cf/attachment.html
From jpg at jgassociates.ca  Thu Feb 16 12:31:08 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Thu Feb 16 12:30:10 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140101097.8693.25.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
	<1140101097.8693.25.camel@localhost.localdomain>
Message-ID: <43F4B6DC.9020208@jgassociates.ca>

Marc D. Murray wrote:
>>What did your custom Session code do ? Can you post it, so that we try
>>and see what could cause the problem ?
> 
> The intention was to prevent multiple users from sharing username and
> password. And to lock an account if it was used from too many
> locations. 
> 
> I'll post it, but before we go there, I should tell you that, I'm still
> getting that dreaded "MaxClients reached" error again. Taking somewhere
> of of the order of 6hrs now though.

But you are still using sessions, right? There are 2 types of locks used 
in DbmSession, a global lock for serializing access to the underlying 
dbm file, and then an additional number of locks that are used for 
locking individual sessions. (The exact number in 3.1.4 is determined at 
run time, and for your config is likely 32. You'll see the actual number 
on startup in the error log. There is configuration option for compiling 
3.2.7 which allows you to set the total number of locks. We are 
investigating implementing a new apache directive which would allow the 
number of locks to be specified at runtime). Since access to the dbm 
file is serialized, you could be experiencing a bottleneck when your 
server is under load.

How many sessions objects are you saving? Performance drops when 
inserting a record into an already large dbm database. I did some 
benchmarks when I was writing the FileSession class. I think you might 
find some of the data interesting:
http://www.mail-archive.com/python-dev@httpd.apache.org/msg00136.html

Another performance killer with DbmSessions is the expired session 
cleanup. Each record in the database must be unpickled and examined to 
see if it is expired and should be deleted. For a large number of 
session objects this can be really time consuming. The cleanup is kicked 
off after a random number of requests (approx 1 in 1000), but for a 
heavily loaded site this could mean that a cleanup is almost always 
running. During this time the dbm file is locked, so all other requests 
which are using sessions will be blocked. This means that Apache will be 
queue requests and could conceivably hit the MaxClients.

These are the sort of issues that motivated the creation of FileSession, 
which gives a much finer control over the cleanup process, and avoids 
the global lock problem completely.

> Let's hope that a mod_python upgrade will help. Should I also upgrade to
> Python 2.4 as well? I develop with python 2.4 on my Ubuntu desktop, but
> deploy to Python 2.3.5 on the Debian server. 

I suspect changing to FileSession may solve some of your problems.

> Do you guys think I should use the newer version of python when building
> mod_python?

There are no python 2.4 specific features in mod_python 3.2.7, so from 
that perspective it's not necessary. We generally test with both python 
2.3.5 and 2.4.


BTW, how do you define high traffic? If you mentioned this before I 
missed it.

Jim
From jim at qlf.com  Thu Feb 16 12:31:02 2006
From: jim at qlf.com (Jim Steil)
Date: Thu Feb 16 12:31:34 2006
Subject: [mod_python] Newbie - Screen resoultion
In-Reply-To: <1140110149.26921.3.camel@localhost.localdomain>
References: <43F4B1B5.3020305@qlf.com>
	<1140110149.26921.3.camel@localhost.localdomain>
Message-ID: <43F4B6D6.60102@qlf.com>

The only reason I want to determine the screen resolution is so that 
when returning lists I can adjust my paging to fill pages more 
effectively.  I know that this assumes the browser is maximized but for 
the people that will be using this app, this is acceptable.  Thanks for 
the response, I should have realized it myself.  At least now I can go 
on just using the javascript implementation.  Thanks.

    -Jim

Jim Steil
IT Manager
Quality Liquid Feeds
(608) 935-2345


Joshua Ginsberg wrote:
> Using mod_python does not make apache suddenly clairvoyant. The request
> object only has access to what the HTTP request tells it, and screen
> resolution is nowhere in that protocol. The javascript you refer to runs
> *inside* the client browser, which *does* have access to such
> information. This is the only way to do what you're asking.
>
> As an aside, I've never seen a good use for determining client screen
> resolution. You should consider carefully your design and decide if this
> is really necessary or if you're using it to compensate for some other
> design decision that simply flawed.
>
> -jag
>
> On Thu, 2006-02-16 at 11:09 -0600, Jim Steil wrote:
>   
>> Is there a way through mod_python for me to determine the screen
>> resolution of my web client machine?  I know I can get this via
>> javascript, but was hoping there was a way to get it through the
>> request object or something.  If you could point me to the appropriate
>> documentation, I'd really appreciate it.  Or, if this simply isn't
>> possible, I like to know that.  Thanks in advance for your help.  I've
>> already searched a years worth of the archives and reread through the
>> manual, but can't seem to find anything.  Maybe my terminology is
>> bad....
>>
>>     -Jim
>> -- 
>> Jim Steil
>> IT Manager
>> Quality Liquid Feeds
>> (608) 935-2345
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>     
>
>
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060216/0988cff9/attachment.html
From gustavo.cordova at q-voz.com  Thu Feb 16 12:40:29 2006
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Thu Feb 16 12:32:35 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>	<20060214101420.K47576@grisha.dyndns.org>	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>	<43F234B8.8000608@q-voz.com>	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>	<43F48269.3050409@q-voz.com>
	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
Message-ID: <43F4B90D.2050203@q-voz.com>

> Dan Eloff wrote: Gustavo, here's an example. Suppose some code 
> enforces a maximum length on a string. If it's counting on a default 
> encoding of 1 byte per char, and does something like len(s) <= 15. For 
> ascii or iso-8859-1 this would work. Or the code might use indices or 
> slices (and a lot of code does!) If suddenly you have utf-8 encoded 
> chinese, your string is going to triple in length, and those functions 
> will have unpredictable behaviour. You could think of any number of 
> scenarios, even in the python library. I just wouldn't feel 
> confortable about changing the default encoding, you never know where 
> it will come back to haunt you. What's so hard about using unicode 
> strings in your program and then encoding when you send output somewhere?

Yes, it seems like a valid problem case, but it can be sidestepped very 
easily by simple working with unicode objects until you're ready to 
output your data.  PSP (and 'str') are going to render your unicodes 
only when it's absolutely necesary, and not before (at least that's what 
my template classes do), so if you use:

    <%= myname[:32] %>

the unicode object being sliced --myname-- is going to return another 
unicode object representing the slice, which in turn is going to be 
converted to 'str' using the default encoding.

There's a lot of ways to plan your apps to not have the trouble you 
mention, and my motto has always been "Don't think 'why not', think 'how 
to'."

Good luck :-)

-gus




From deron.meranda at gmail.com  Thu Feb 16 13:14:27 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Thu Feb 16 13:14:32 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
	<43F48269.3050409@q-voz.com>
	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
	<4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
Message-ID: <5c06fa770602161014g508e7f21qef33db8f6fbfbbd4@mail.gmail.com>

This is not *just* a PSP problem.  Many frameworks on top of mod_python
also see Unicode brokenness...mostly because of the use of the builtin str()
type conversion and the lack of any control over the default encoding.
For just one example, try putting this into a Myghty template,

    <% u'\u1234' %>

and you get the 'ole 'ascii' UnicodeEncodeError as well.


I still think this is fundamentally a Python problem.  For those
thinking about solutions, there is a current thread in python-dev
that may be somewhat interesting...

http://mail.python.org/pipermail/python-dev/2006-February/060930.html

Also definitely worth reading is PEP 349
   http://www.python.org/peps/pep-0349.html
and the corresponding python issue tracking it
   http://www.python.org/sf/1266570

For a little more historical perspective, see PEP 332
   http://www.python.org/peps/pep-0332.html
and also for a little more insight into why things work the
way they do now, read the original unicode proposal at
   http://starship.python.net/crew/lemburg/unicode-proposal.txt
--
Deron Meranda

From nicolas at lehuen.com  Thu Feb 16 14:46:48 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Thu Feb 16 14:46:51 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
	<43F48269.3050409@q-voz.com>
	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
	<4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
Message-ID: <c298f2d70602161146y48d7f14fu@mail.gmail.com>

2006/2/16, Dan Eloff <dan.eloff@gmail.com>:
> With the same input and outut encoding, there isn't any conversions done to
> the static content, because I encode static content directly into the output
> encoding. I've also done things in such a way that regular strings can be
> encoded as utf-8 without any conversion as well. For now I do this by
> assuming the string is ascii and therefore valid utf-8. I'm 90% sure that's
> fine, because passing a string in any other encoding is just looking for
> trouble, there's no way I can guess what it's encoded as so I could fix it
> or raise an error, this puts the responsibility for encoding regular strings
> on the developer, where it should be. But for any other object I convert to
> unicode and then encode it with the output encoding. This ensures
> __unicode__ is called preferentially over __str__.
>
> My trouble currently is how to implement the encoding and decoding, the only
> part I have working is converting the unicode objects to the output encoding
> (by using PyString_AsEncodedObject). I'd like to do the conversion using
> python's encoding/decoding abilites and without creating redundant extra
> copies (like those created by copying a char buffer into a python string and
> then converting.)
>
> I'd love to hear what you think about this, I will send you my code when
> it's finished and you can pull it apart and reuse the bits you like.
>
> -Dan

If you are using the C API, I don't think there are more efficient
ways than using PyString_AsEncodedObject and try not to think about
the various extra objects that are created in the process...

In-place unicode to string conversion is quite difficult to achieve,
because in the general case you may end up with more bytes than
unicode characters. The Java NIO library doesn't encode nor decode
in-place, and given the efforts they made to remove data copy, I think
it's pretty safe to say that's it's not easily feasable.

I really think you should first worry about having the input and
output coding right, then profile your code to see where the
performance problems are. Most likely, you'll find that they are in
mod_python rather than in the psp module ;).

To me, the fact that PSP is implemented in C is a perfect case of
premature optimisation. It's a quite complicated piece of C code,
parts of it being generated by flex. As a result, it's difficult to
maintain and solving the Unicode issues in this context could be quite
difficult. And it's not like it's proven that writing this module in
pure C is really useful as far as global performance are concerned.

If it were up to me, I would reimplement it in pure Python, and I
don't think the performance loss would be so big. Granted, compilation
would be a little slower, but once the PSP is compiled, performance
should be exactly the same - and implementing a compiler cache is
extremely easy. Plus, the code being more easy to maintain, we could
easily optimize it. Call it "doing it the PyPy way" if you like ;).

Regards,
Nicolas

From nick at dd.revealed.net  Thu Feb 16 15:02:35 2006
From: nick at dd.revealed.net (Nick)
Date: Thu Feb 16 15:02:46 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <c298f2d70602161146y48d7f14fu@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>	<20060214101420.K47576@grisha.dyndns.org>	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>	<43F234B8.8000608@q-voz.com>	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>	<43F48269.3050409@q-voz.com>	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>	<4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
	<c298f2d70602161146y48d7f14fu@mail.gmail.com>
Message-ID: <43F4DA5B.20308@dd.revealed.net>

Nicolas Lehuen wrote:
> If it were up to me, I would reimplement it in pure Python, and I
> don't think the performance loss would be so big. Granted, compilation
> would be a little slower, but once the PSP is compiled, performance
> should be exactly the same - and implementing a compiler cache is
> extremely easy. Plus, the code being more easy to maintain, we could
> easily optimize it. Call it "doing it the PyPy way" if you like ;).

The original PSE parser I did worked very similar to PSP.  I used HTMLParser
in the standard lib to do it.  However, it was different in that it was not
PHP/ASP-ish where code could just be stuck anywhere; it had to be parsable
HTML.  But I suspect you could just use a regular expression to do what the
PSP parser does.

Nick
From dan.eloff at gmail.com  Thu Feb 16 15:17:21 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Thu Feb 16 15:17:25 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <c298f2d70602161146y48d7f14fu@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602132310r2fd98341j7656799ee1e36597@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
	<43F48269.3050409@q-voz.com>
	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
	<4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
	<c298f2d70602161146y48d7f14fu@mail.gmail.com>
Message-ID: <4817b6fc0602161217m29b1b6d8u2d4afcd7233889f4@mail.gmail.com>

"in-place unicode to string conversion is quite difficult to achieve"

Oh you're right about that, I'd never attempt it, I was merely hoping to
avoid redundant copies like creating a python string by copying the
character buffer bit for bit when it could be reused.

You're right of course about doing the psp module in C or C++. Now that I
think about I don't know why I am rewriting it in C++ instead of python,
other than because mod_python did that. Now I feel stupid, lol. The parsing
would be much faster in C++, which means very little unless you have to
reparse it frequently (depends how often the apache process gets killed and
restarted.) Parsing the psp files is probably the most expensive part of my
website initialization, simply because I have so many psp pages (and
growing.) I haven't profiled it, but even just reading in all those files
should be more expensive than the rest of the initialization process.

The flex business was a mess, I was planning to just ignore it all and
handcoded the parser, I only use a subset of the psp features anyway, so I
only needed support for <%%> and <%=%>.

The C++ code will still run slightly faster I imagine, mostly because the
write function is then implemented natively and doesn't have the overhead of
python function calls inside the function. Big deal, it wouldn't even be
noticed in the face of all the other things going on in serving up a page in
mod_python and in running the psp and database queries etc.

So I'm going to leave the C++ code now, and do this in Python. I'm just
annoyed at myself for having prototyped everything in C++ before writing it
as python. It shouldn't take me long at least.

Thanks a lot for your input!

-Dan



On 2/16/06, Nicolas Lehuen <nicolas@lehuen.com> wrote:
>
> 2006/2/16, Dan Eloff <dan.eloff@gmail.com>:
> > With the same input and outut encoding, there isn't any conversions done
> to
> > the static content, because I encode static content directly into the
> output
> > encoding. I've also done things in such a way that regular strings can
> be
> > encoded as utf-8 without any conversion as well. For now I do this by
> > assuming the string is ascii and therefore valid utf-8. I'm 90% sure
> that's
> > fine, because passing a string in any other encoding is just looking for
> > trouble, there's no way I can guess what it's encoded as so I could fix
> it
> > or raise an error, this puts the responsibility for encoding regular
> strings
> > on the developer, where it should be. But for any other object I convert
> to
> > unicode and then encode it with the output encoding. This ensures
> > __unicode__ is called preferentially over __str__.
> >
> > My trouble currently is how to implement the encoding and decoding, the
> only
> > part I have working is converting the unicode objects to the output
> encoding
> > (by using PyString_AsEncodedObject). I'd like to do the conversion using
> > python's encoding/decoding abilites and without creating redundant extra
> > copies (like those created by copying a char buffer into a python string
> and
> > then converting.)
> >
> > I'd love to hear what you think about this, I will send you my code when
> > it's finished and you can pull it apart and reuse the bits you like.
> >
> > -Dan
>
> If you are using the C API, I don't think there are more efficient
> ways than using PyString_AsEncodedObject and try not to think about
> the various extra objects that are created in the process...
>
> In-place unicode to string conversion is quite difficult to achieve,
> because in the general case you may end up with more bytes than
> unicode characters. The Java NIO library doesn't encode nor decode
> in-place, and given the efforts they made to remove data copy, I think
> it's pretty safe to say that's it's not easily feasable.
>
> I really think you should first worry about having the input and
> output coding right, then profile your code to see where the
> performance problems are. Most likely, you'll find that they are in
> mod_python rather than in the psp module ;).
>
> To me, the fact that PSP is implemented in C is a perfect case of
> premature optimisation. It's a quite complicated piece of C code,
> parts of it being generated by flex. As a result, it's difficult to
> maintain and solving the Unicode issues in this context could be quite
> difficult. And it's not like it's proven that writing this module in
> pure C is really useful as far as global performance are concerned.
>
> If it were up to me, I would reimplement it in pure Python, and I
> don't think the performance loss would be so big. Granted, compilation
> would be a little slower, but once the PSP is compiled, performance
> should be exactly the same - and implementing a compiler cache is
> extremely easy. Plus, the code being more easy to maintain, we could
> easily optimize it. Call it "doing it the PyPy way" if you like ;).
>
> Regards,
> Nicolas
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060216/cd90aea9/attachment-0001.html
From jpg at jgassociates.ca  Thu Feb 16 15:31:52 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Thu Feb 16 15:30:08 2006
Subject: [mod_python] Documentation error: request.user not read-only
In-Reply-To: <5.2.1.1.0.20060216154825.038a9428@mail.comune.grosseto.it>
References: <5.2.1.1.0.20050421184447.0296c9e8@mail.comune.grosseto.it>	<5.2.1.1.0.20050421184447.0296c9e8@mail.comune.grosseto.it>
	<5.2.1.1.0.20060216154825.038a9428@mail.comune.grosseto.it>
Message-ID: <43F4E138.20506@jgassociates.ca>

Bud P. Bruegger wrote:
> Hi Grisha,
> 
> just looked at the latest doc 
> http://www.modpython.org/live/mod_python-3.2.7/doc-html/pyapi-mprequest-mem.html 
> and it seems that req.user is still stated to be read-only.  (See also 
> your response below).
> 
> best cheers
> -b
> 
> At 14.54 21/04/2005 -0400, Gregory (Grisha) Trubetskoy wrote:
> 
>> That's a documentation error. req.user has been writable for quite a 
>> while now.

I've fixed the docs in trunk. Thanks for pointing it out.

Jim
From nicolas at lehuen.com  Thu Feb 16 15:31:52 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Thu Feb 16 15:31:56 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <43F4DA5B.20308@dd.revealed.net>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<20060214101420.K47576@grisha.dyndns.org>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
	<43F48269.3050409@q-voz.com>
	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
	<4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
	<c298f2d70602161146y48d7f14fu@mail.gmail.com>
	<43F4DA5B.20308@dd.revealed.net>
Message-ID: <c298f2d70602161231k7905e2c5i@mail.gmail.com>

Well, in fact, I'm not using PSP, but my own templating system. The
whole code is around 500 lines of pure Python. It uses a regular
expression based tokenizer, a recursive hand-written parser (the
grammar is simple enough), and the result of a template compilation is
an optimized (simplified) AST that is visited each time the template
needs to be evaluated (it is not Python code that gets compiled
afterwards, I don't feel the need to do so).

The template markup are close to those used in the Velocity Java
template engine, that is to say you cannot insert any Python code in
the template, you have to play by some rules as far as flow control is
concerned.

However, the evaluation tags can contain full Python evaluation, so
they are not as limited as the one you can find in Zope's TAL, Kid or
Django. I know they are limited on purpose, but I can't bear to be
forced to jump through hoops to please a development philosophy that
mostly gets in the way IMHO. There is no need to prevent your
developers to write full blown Python expression in their templates ;
if they have a little discipline, it is a real time saver.

The template are used by modules published by the
mod_python.publisher. Like it was mentioned in a thread a few weeks
ago, I use a Python decorator to specify that the dictionary returned
by a published function or method must be used with a given template -
the decorator handle all the fuss about computing the relative path of
the template, and calling the template cache.

All this is not perfect yet but I've been happily using it for nearly
a year now on various projects which are currently in production
(though under a quite moderate load so I cannot boast about its
performance apart that saying it is not a problem at all).

All this to say that yes, writing an efficient pure Python template is
possible, there already exists a zillion and if none please you, then
with about 500 lines of code you have something good enough. Now, why
should we have to maintain some fairly obscure C code for the PSP
module, that eludes me  :).

Regards,
Nicolas

2006/2/16, Nick <nick@dd.revealed.net>:
> Nicolas Lehuen wrote:
> > If it were up to me, I would reimplement it in pure Python, and I
> > don't think the performance loss would be so big. Granted, compilation
> > would be a little slower, but once the PSP is compiled, performance
> > should be exactly the same - and implementing a compiler cache is
> > extremely easy. Plus, the code being more easy to maintain, we could
> > easily optimize it. Call it "doing it the PyPy way" if you like ;).
>
> The original PSE parser I did worked very similar to PSP.  I used HTMLParser
> in the standard lib to do it.  However, it was different in that it was not
> PHP/ASP-ish where code could just be stuck anywhere; it had to be parsable
> HTML.  But I suspect you could just use a regular expression to do what the
> PSP parser does.
>
> Nick
>

From marcdm at phronein.com  Thu Feb 16 15:47:13 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Thu Feb 16 15:47:29 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <43F4B6DC.9020208@jgassociates.ca>
References: <1140012407.8217.29.camel@localhost.localdomain>
	<1140101097.8693.25.camel@localhost.localdomain>
	<43F4B6DC.9020208@jgassociates.ca>
Message-ID: <1140122833.8693.53.camel@localhost.localdomain>

On Thu, 2006-02-16 at 12:31 -0500, Jim Gallacher wrote:

> I suspect changing to FileSession may solve some of your problems.
Right now, I'm calling Session.Session(req). So I guess it defaults to
dbm session. And it would put the dbm wherever it feels like.

Changing the cleanup chance was one of the reasons I wanted to subclass
DBMSession

> > Do you guys think I should use the newer version of python when building
> > mod_python?
> 
> There are no python 2.4 specific features in mod_python 3.2.7, so from 
> that perspective it's not necessary. We generally test with both python 
> 2.3.5 and 2.4.
I was asking this question from a performance perspective actually. I
was lazy and didn't bother to read the differences between 2.3 and 2.4.
So when I go to python.org/docs I just use the 2.3 documentation. But is
2.4 any faster/smaller/better?

> 
> BTW, how do you define high traffic? If you mentioned this before I 
> missed it.
According to Webalizer for February:
Avg Pages per Day: 99521
Max Pages in 1 day : 310537
And they're all here looking for *.(jpg|zip|wmv) files. I serve those
files out of lighttpd though.


I just installed a python2.4-mod_python3.2.7 on my test server. I didn't
change any configuration options. I had to install 2.4 versions for a
couple modules I use (ldap,lxml,memcache,cheetah), but after that, it
works. So back to the Python2.4 vs Python2.3.5 question.

> Jim
> 
Marc

From Brian.Fleming at tellabs.com  Thu Feb 16 16:14:46 2006
From: Brian.Fleming at tellabs.com (Fleming, Brian J.)
Date: Thu Feb 16 16:14:51 2006
Subject: [mod_python] moinmoin
Message-ID: <A6A3FD22234C5A4EA8131B6CBA2986C90213BBE1@USNVEX3.tellabs-west.tellabsinc.net>

Anyone using mod_python to run the moinmoin wiki?

I am having trouble with the GUI mode editor in moinmoin running apache
2.0.55 with the latest mod_python.



 
============================================================
The information contained in this message may be privileged
and confidential and protected from disclosure. If the reader
of this message is not the intended recipient, or an employee
or agent responsible for delivering this message to the
intended recipient, you are hereby notified that any reproduction,
dissemination or distribution of this communication is strictly
prohibited. If you have received this communication in error,
please notify us immediately by replying to the message and
deleting it from your computer. Thank you. Tellabs
============================================================

From jpg at jgassociates.ca  Thu Feb 16 16:20:59 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Thu Feb 16 16:19:37 2006
Subject: [mod_python] moinmoin
In-Reply-To: <A6A3FD22234C5A4EA8131B6CBA2986C90213BBE1@USNVEX3.tellabs-west.tellabsinc.net>
References: <A6A3FD22234C5A4EA8131B6CBA2986C90213BBE1@USNVEX3.tellabs-west.tellabsinc.net>
Message-ID: <43F4ECBB.1060308@jgassociates.ca>

Fleming, Brian J. wrote:
> Anyone using mod_python to run the moinmoin wiki?

Not me.

> I am having trouble with the GUI mode editor in moinmoin running apache
> 2.0.55 with the latest mod_python.

Define trouble.

Jim


From deron.meranda at gmail.com  Thu Feb 16 16:28:05 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Thu Feb 16 16:28:15 2006
Subject: [mod_python] moinmoin
In-Reply-To: <A6A3FD22234C5A4EA8131B6CBA2986C90213BBE1@USNVEX3.tellabs-west.tellabsinc.net>
References: <A6A3FD22234C5A4EA8131B6CBA2986C90213BBE1@USNVEX3.tellabs-west.tellabsinc.net>
Message-ID: <5c06fa770602161328o2a2444f1v49d15df08504e07a@mail.gmail.com>

On 2/16/06, Fleming, Brian J. <Brian.Fleming@tellabs.com> wrote:
> Anyone using mod_python to run the moinmoin wiki?

Yes.  I do some dev work on moinmoin too.

> I am having trouble with the GUI mode editor in moinmoin running apache
> 2.0.55 with the latest mod_python.

Hmm.  More information is needed.  Are you seeing any
particular error?  What makes you think it may be mod_python
related?

Does the text-mode editing work even when the GUI-mode doesn't?

Also, what version of moinmoin, what OS, and most importantly
for the moinmoin GUI editor....which web browser?
--
Deron Meranda

From jpg at jgassociates.ca  Thu Feb 16 16:36:24 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Thu Feb 16 16:34:25 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140122833.8693.53.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>	
	<1140101097.8693.25.camel@localhost.localdomain>	
	<43F4B6DC.9020208@jgassociates.ca>
	<1140122833.8693.53.camel@localhost.localdomain>
Message-ID: <43F4F058.9040407@jgassociates.ca>

Marc D. Murray wrote:
> On Thu, 2006-02-16 at 12:31 -0500, Jim Gallacher wrote:
> 
> 
>>I suspect changing to FileSession may solve some of your problems.
> 
> Right now, I'm calling Session.Session(req). So I guess it defaults to
> dbm session. 

On *nix, yes.

> And it would put the dbm wherever it feels like.

It's not *quite* that random, but in effect yes. ;) In 3.1.4 it uses 
tempfile.gettempdir() to determine the location. In 3.2 you can specify 
the location with PythonOption session_directory /some/path.

> 
> Changing the cleanup chance was one of the reasons I wanted to subclass
> DBMSession

Did you change the locking scheme as well? Just curious.

> 
>>>Do you guys think I should use the newer version of python when building
>>>mod_python?
>>
>>There are no python 2.4 specific features in mod_python 3.2.7, so from 
>>that perspective it's not necessary. We generally test with both python 
>>2.3.5 and 2.4.
> 
> I was asking this question from a performance perspective actually. I
> was lazy and didn't bother to read the differences between 2.3 and 2.4.
> So when I go to python.org/docs I just use the 2.3 documentation. But is
> 2.4 any faster/smaller/better?

I seem to recall reading somewhere that 2.4 is a few percent faster, but 
I don't think it will be significant.

>>BTW, how do you define high traffic? If you mentioned this before I 
>>missed it.
> 
> According to Webalizer for February:
> Avg Pages per Day: 99521
> Max Pages in 1 day : 310537
> And they're all here looking for *.(jpg|zip|wmv) files. I serve those
> files out of lighttpd though.

How many unique sessions might that represent? ie. how many unique 
records in dbm?

> 
> I just installed a python2.4-mod_python3.2.7 on my test server. I didn't
> change any configuration options. 

Configuration options in Apache, or for compiling mod_python? I hope 
(and assume) you used ./configure --with-python=/usr/bin/python2.4 (or 
whatever) when  you compiled mod_python. Strange things could happen 
otherwise, since the sys.path will be different from where your other 
modules such as ldap live.

> I had to install 2.4 versions for a
> couple modules I use (ldap,lxml,memcache,cheetah), but after that, it
> works. So back to the Python2.4 vs Python2.3.5 question.

Jim
From tomw at bnl.gov  Thu Feb 16 17:22:13 2006
From: tomw at bnl.gov (Tomasz Wlodek)
Date: Thu Feb 16 17:22:19 2006
Subject: [mod_python] how to make fallback authentication
In-Reply-To: <43F4F058.9040407@jgassociates.ca>
References: <1140012407.8217.29.camel@localhost.localdomain> 
	<1140101097.8693.25.camel@localhost.localdomain>
	<43F4B6DC.9020208@jgassociates.ca>
	<1140122833.8693.53.camel@localhost.localdomain>
	<43F4F058.9040407@jgassociates.ca>
Message-ID: <Pine.GSO.4.58.0602161702110.24404@rcf2.rhic.bnl.gov>

Hello folks,

I work on the following idea: We would like to authenticate users who come
to our site in two steps. First we request them to show a valid
certificate. If they can show one and the certificate DN is in our allowed
user's list then we let them in.

If they do not have a certificate, then we want them to perform
authentication based on user id and password. We ask them for user id and
pwd, compare it to what we keep in some database and let them in. (or
not).

The first part - identifying user's based on a certificate is already
done. (Thanks to Graham and others who helped me to understand how to pass
variables from mod_ssl to mod_python authentication handler!)

Now comes the second part: what if the user has no certificate. We need to
tell Apache to perform basic authentication.

I thought about doing it in the following way: the authentication handler
would check if user has a certificate. If yes, let him in, if not redirect
the request to another web page which is located in a directory where
.htaccess file requires basic authentication. This would force Apache to
ask for user id and password, after that the request would be redirected
back to the original site. At this point the req.user variable in request
should be defined, which would be a sign to the handler that the user can
be authenticated.

This sounds very complex and I would like to hear from you if there is a
simpler way of doing this. (I suspect that there is).

Here is my authentication handler: I am not happy with it, and I am not
sure if it will work, but I would like to hear from you if it can be done
in a simpler way.

from mod_python import apache
from mod_python import util

import _mp_mod_ssl
import os

def authenhandler(req):
    # if the req.user variable has been defined, then user has been
    # already authenticated elsewhere
    # if not, then we authenticate him
    if req.user!=None:
	 req.add_common_vars()

	 # get user's dn certificate
  	 user_dn = _mp_mod_ssl.var_lookup(req,'SSL_CLIENT_S_DN')

	 # let us assume that we have a list of allowed dn's
    	 if user_dn in ListOfApprovedDns:
		return apache.OK
    	 else:
 		# user has no DN
		# now we need to start password based authentication
       		 # I will redirect the request to another site, which
		# is configured to perform basic authentication
 		util.redirect(req,'http://....')
		# This other site performs basic authentication, and fills
		# req.user variable, then the request it is redirected
                # back to the
		# present site
     else:
	# if we are here then the user has been already authenticated
        return apache.OK

Tomasz Wlodek                        | tel 631-344-7448
Brookhaven Laboratory, Building 510M | fax 631-344-7616
Upton NY 11973-5000                  |

From dan.eloff at gmail.com  Thu Feb 16 17:34:09 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Thu Feb 16 17:34:14 2006
Subject: [mod_python] Problem with PSP and unicode
In-Reply-To: <c298f2d70602161231k7905e2c5i@mail.gmail.com>
References: <b5a439280602110117g7e1f7d5dt@mail.gmail.com>
	<4817b6fc0602141046j16c61bbflad1a007a8db9fcf3@mail.gmail.com>
	<43F234B8.8000608@q-voz.com>
	<4817b6fc0602151816g19f07231sa678610deab518a1@mail.gmail.com>
	<43F48269.3050409@q-voz.com>
	<4817b6fc0602160910u262a4c7el61041f5a662780e5@mail.gmail.com>
	<4817b6fc0602160916x4c7d888g546f43c02d731bdd@mail.gmail.com>
	<c298f2d70602161146y48d7f14fu@mail.gmail.com>
	<43F4DA5B.20308@dd.revealed.net>
	<c298f2d70602161231k7905e2c5i@mail.gmail.com>
Message-ID: <4817b6fc0602161434w362371dbv6544d503c5b9db82@mail.gmail.com>

"I know they are limited on purpose, but I can't bear to be
forced to jump through hoops to please a development philosophy that
mostly gets in the way IMHO."

Exactly. Leave purism to the pursits. For the rest of us there's work to be
done. There's no one way to do everthing that will work for everybody, go
with what works.

I keep code specific to display, formatting, or html in the psp templates. I
leave back-end logic in the backend, I find it's easier to maintain that
way. But I expect the full power of python for both tasks, and I'm loathe to
use some seperate third-party template language that holds me back. PSP was
convienient because it allowed pure python statements in my templates, but
now I'm thinking it's holding me back, I want to personalize it a little,
like add some shortcut tags to simplify common tasks where python is too
verbose.

for example two things I use a lot are:

<%=vars['varname']%> and <%=lang['category']['phrase']%>

why not <$varname$> or <@category phrase@>

Asside from being shorter and easier to read, this would give a second
benefit, I could pre-compile (cache) the templates in each language instead
of doing it at execution time. Just thinking out loud.

I'm of the opinion that psp is not tied to mod_python, nor does it have
anything to do with mod_python. It should be a seperate entity and
maintained by those who use it. Just like there's no reason for mod_python
developers to have a cheetah module and have to maintain that.

-Dan

On 2/16/06, Nicolas Lehuen <nicolas@lehuen.com> wrote:
>
> Well, in fact, I'm not using PSP, but my own templating system. The
> whole code is around 500 lines of pure Python. It uses a regular
> expression based tokenizer, a recursive hand-written parser (the
> grammar is simple enough), and the result of a template compilation is
> an optimized (simplified) AST that is visited each time the template
> needs to be evaluated (it is not Python code that gets compiled
> afterwards, I don't feel the need to do so).
>
> The template markup are close to those used in the Velocity Java
> template engine, that is to say you cannot insert any Python code in
> the template, you have to play by some rules as far as flow control is
> concerned.
>
> However, the evaluation tags can contain full Python evaluation, so
> they are not as limited as the one you can find in Zope's TAL, Kid or
> Django. I know they are limited on purpose, but I can't bear to be
> forced to jump through hoops to please a development philosophy that
> mostly gets in the way IMHO. There is no need to prevent your
> developers to write full blown Python expression in their templates ;
> if they have a little discipline, it is a real time saver.
>
> The template are used by modules published by the
> mod_python.publisher. Like it was mentioned in a thread a few weeks
> ago, I use a Python decorator to specify that the dictionary returned
> by a published function or method must be used with a given template -
> the decorator handle all the fuss about computing the relative path of
> the template, and calling the template cache.
>
> All this is not perfect yet but I've been happily using it for nearly
> a year now on various projects which are currently in production
> (though under a quite moderate load so I cannot boast about its
> performance apart that saying it is not a problem at all).
>
> All this to say that yes, writing an efficient pure Python template is
> possible, there already exists a zillion and if none please you, then
> with about 500 lines of code you have something good enough. Now, why
> should we have to maintain some fairly obscure C code for the PSP
> module, that eludes me  :).
>
> Regards,
> Nicolas
>
> 2006/2/16, Nick <nick@dd.revealed.net>:
> > Nicolas Lehuen wrote:
> > > If it were up to me, I would reimplement it in pure Python, and I
> > > don't think the performance loss would be so big. Granted, compilation
> > > would be a little slower, but once the PSP is compiled, performance
> > > should be exactly the same - and implementing a compiler cache is
> > > extremely easy. Plus, the code being more easy to maintain, we could
> > > easily optimize it. Call it "doing it the PyPy way" if you like ;).
> >
> > The original PSE parser I did worked very similar to PSP.  I used
> HTMLParser
> > in the standard lib to do it.  However, it was different in that it was
> not
> > PHP/ASP-ish where code could just be stuck anywhere; it had to be
> parsable
> > HTML.  But I suspect you could just use a regular expression to do what
> the
> > PSP parser does.
> >
> > Nick
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060216/c862faba/attachment-0001.html
From matthew.garman at gmail.com  Thu Feb 16 17:48:47 2006
From: matthew.garman at gmail.com (matthew.garman@gmail.com)
Date: Thu Feb 16 17:48:06 2006
Subject: [mod_python] setting apache variables from mod_python
Message-ID: <20060216224847.GA29695@sewage.sewage.fake>

I'm looking to use mod_python to set some apache variables that can
be read from PHP's $_SERVER variable.  I'm not sure how to do this
in mod_python (I'm sure it's documented, but I don't know what to
look for); I also don't know how to invoke such a beast from within
a PHP script.

Long background: I'm developing a PHP web application.  The
application will need to interact with a proprietary apache module.
This apache module has not been built for my development
environment.

However, the functionality of this module is also available via web
services (SOAP).  The version of PHP I'm using doesn't have SOAP
support, and I don't want to upgrade.

So my thought is that I can use mod_python to create a quick'n'dirty
hack that would simulate the behavior of that module.

One of the things that module does is set some apache variables (and
I use the term "apache variables" without really understanding what
it means; it is data that can be accessed in PHP via the $_SERVER[]
variable).  My question, therefore, is: how do I set these apache
variables in mod_python?

Any finally, how would I go about "embedding" this hack in my PHP
script?  That's probably more of a PHP-specific question, but what
is the general term for "embedding" scripts or functionality within
scripts?

Is it obvious yet that I'm not too versed in the underpinnings of
HTML?  :)

Thank you,
Matt

-- 
Matt Garman
email at: http://raw-sewage.net/index.php?file=email
From grahamd at dscpl.com.au  Thu Feb 16 18:03:29 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 16 18:03:43 2006
Subject: [mod_python] setting apache variables from mod_python
Message-ID: <1140131009.14607@dscpl.user.openhosting.com>

matthew.garman@gmail.com wrote ..
> I'm looking to use mod_python to set some apache variables that can
> be read from PHP's $_SERVER variable.  I'm not sure how to do this
> in mod_python (I'm sure it's documented, but I don't know what to
> look for); I also don't know how to invoke such a beast from within
> a PHP script.

I am not sure by what mechanism you may be able to access them
from PHP, but suggest two options.

1. Set values in the req.notes table object.

2. Set values in req.subprocess_env table object.

The place to do them from in mod_python would be to specifying
a fixup handler (not a content handler) and do it there. A content
handler shouldn't be defined as that tends to disable execution of
PHP stuff. Thus:

  PythonFixupHandler setphpstuff

  # setphpstuff.py

  from mod_python import apache

  def fixuphandler(req):
    req.notes["STUFF_FOR_PHP"] = "value"
    req.subprocess_env["OTHER_STUFF_FOR_PHP"] = "value"
    return apache.OK

Graham
From grahamd at dscpl.com.au  Thu Feb 16 18:11:55 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 16 18:12:02 2006
Subject: [mod_python] how to make fallback authentication
Message-ID: <1140131515.20254@dscpl.user.openhosting.com>

Unfortunately, to my mind, what would be the proper way of doing this
can't current be done in mod_python because it has some stuff missing
and doesn't process handlers for the authentication phase correctly. See:

  http://issues.apache.org/jira/browse/MODPYTHON-124
  http://issues.apache.org/jira/browse/MODPYTHON-129

One question while I think of a good suggestion, how are you setting
AuthType, AuthName and Requires directives to ensure that the mod_python
authenhandler is being run in the first place?

Graham

Tomasz Wlodek wrote ..
> Hello folks,
> 
> I work on the following idea: We would like to authenticate users who come
> to our site in two steps. First we request them to show a valid
> certificate. If they can show one and the certificate DN is in our allowed
> user's list then we let them in.
> 
> If they do not have a certificate, then we want them to perform
> authentication based on user id and password. We ask them for user id and
> pwd, compare it to what we keep in some database and let them in. (or
> not).
> 
> The first part - identifying user's based on a certificate is already
> done. (Thanks to Graham and others who helped me to understand how to pass
> variables from mod_ssl to mod_python authentication handler!)
> 
> Now comes the second part: what if the user has no certificate. We need
> to
> tell Apache to perform basic authentication.
> 
> I thought about doing it in the following way: the authentication handler
> would check if user has a certificate. If yes, let him in, if not redirect
> the request to another web page which is located in a directory where
> .htaccess file requires basic authentication. This would force Apache to
> ask for user id and password, after that the request would be redirected
> back to the original site. At this point the req.user variable in request
> should be defined, which would be a sign to the handler that the user can
> be authenticated.
> 
> This sounds very complex and I would like to hear from you if there is
> a
> simpler way of doing this. (I suspect that there is).
> 
> Here is my authentication handler: I am not happy with it, and I am not
> sure if it will work, but I would like to hear from you if it can be done
> in a simpler way.
> 
> from mod_python import apache
> from mod_python import util
> 
> import _mp_mod_ssl
> import os
> 
> def authenhandler(req):
>     # if the req.user variable has been defined, then user has been
>     # already authenticated elsewhere
>     # if not, then we authenticate him
>     if req.user!=None:
> 	 req.add_common_vars()
> 
> 	 # get user's dn certificate
>   	 user_dn = _mp_mod_ssl.var_lookup(req,'SSL_CLIENT_S_DN')
> 
> 	 # let us assume that we have a list of allowed dn's
>     	 if user_dn in ListOfApprovedDns:
> 		return apache.OK
>     	 else:
>  		# user has no DN
> 		# now we need to start password based authentication
>        		 # I will redirect the request to another site, which
> 		# is configured to perform basic authentication
>  		util.redirect(req,'http://....')
> 		# This other site performs basic authentication, and fills
> 		# req.user variable, then the request it is redirected
>                 # back to the
> 		# present site
>      else:
> 	# if we are here then the user has been already authenticated
>         return apache.OK
> 
> Tomasz Wlodek                        | tel 631-344-7448
> Brookhaven Laboratory, Building 510M | fax 631-344-7616
> Upton NY 11973-5000                  |
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From marcdm at phronein.com  Thu Feb 16 18:23:26 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Thu Feb 16 18:23:34 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140101097.8693.25.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
	<1140101097.8693.25.camel@localhost.localdomain>
Message-ID: <1140132207.8693.74.camel@localhost.localdomain>


> I hope (and assume) you used ./configure
> --with-python=/usr/bin/python2.4 (or whatever) when  you compiled
> mod_python.
> 
I did. which is why I had to install 2.4 versions of the modules :)

I've already upgraded the mod_python on the server. Now it reads :

[Thu Feb 16 18:03:09 2006] [notice] Apache/2.0.54 (Debian GNU/Linux)
mod_python/3.2.7 Python/2.4.1 PHP/4.3.10-16 mod_ssl/2.0.54
OpenSSL/0.9.7e mod_perl/1.999.21 Perl/v5.8.4 configured -- resuming
normal operations

I've also switched to using FileSession instead of default
session.Session.

The next question I have now is, should think about replacing the
publisher module with something less feature full? Right now, the only
thing I'm using the publisher handler for is to locate and execute the
correct function from the appropriate module. You know, the traversal
bit.

If I decide to replace the publisher handler, my handler would be
generating the cache keys and checking the cache. If the cache-item
doesn't exist, then import the module based on values in req.parsed_uri
and execute the appropriate function, then req.write the output.

Somehow I believe this would yield better behaviour.

Am I on the right path here? Or is this a waste of time as the Publisher
is already efficient? 

Next question, (how) can pyrex help here?

/Marc DM

From dan.eloff at gmail.com  Thu Feb 16 18:33:05 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Thu Feb 16 18:33:08 2006
Subject: [SPAM] Re: [mod_python] Newbie - Screen resoultion
In-Reply-To: <43F4B6D6.60102@qlf.com>
References: <43F4B1B5.3020305@qlf.com>
	<1140110149.26921.3.camel@localhost.localdomain>
	<43F4B6D6.60102@qlf.com>
Message-ID: <4817b6fc0602161533t4994d9f2mb82665e85303b5da@mail.gmail.com>

Like Joshua pointed out, there shouldn't be a need to get the client's
screen resolution. If you feel you need it, it's a good indication there's
something wrong with your design.

If you're returning a vertical list, and you were thinking of breaking it
into columns on wider screens, the same can be accomplished very simply with
left floated divs. If the browser is narrow, they will stack up under each
other, if it is wide they will float next to each other like columns.
Simpler than a javascript, cleaner, and it will work without javascript
enabled or if the browser fills only part of the screen.

-Dan

On 2/16/06, Jim Steil <jim@qlf.com> wrote:
>
> The only reason I want to determine the screen resolution is so that when
> returning lists I can adjust my paging to fill pages more effectively.  I
> know that this assumes the browser is maximized but for the people that will
> be using this app, this is acceptable.  Thanks for the response, I should
> have realized it myself.  At least now I can go on just using the javascript
> implementation.  Thanks.
>
>     -Jim
>
> Jim Steil
> IT Manager
> Quality Liquid Feeds
> (608) 935-2345
>
>
> Joshua Ginsberg wrote:
>
> Using mod_python does not make apache suddenly clairvoyant. The request
> object only has access to what the HTTP request tells it, and screen
> resolution is nowhere in that protocol. The javascript you refer to runs
> *inside* the client browser, which *does* have access to such
> information. This is the only way to do what you're asking.
>
> As an aside, I've never seen a good use for determining client screen
> resolution. You should consider carefully your design and decide if this
> is really necessary or if you're using it to compensate for some other
> design decision that simply flawed.
>
> -jag
>
> On Thu, 2006-02-16 at 11:09 -0600, Jim Steil wrote:
>
>  Is there a way through mod_python for me to determine the screen
> resolution of my web client machine?  I know I can get this via
> javascript, but was hoping there was a way to get it through the
> request object or something.  If you could point me to the appropriate
> documentation, I'd really appreciate it.  Or, if this simply isn't
> possible, I like to know that.  Thanks in advance for your help.  I've
> already searched a years worth of the archives and reread through the
> manual, but can't seem to find anything.  Maybe my terminology is
> bad....
>
>     -Jim
> --
> Jim Steil
> IT Manager
> Quality Liquid Feeds
> (608) 935-2345
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.orghttp://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060216/507a9165/attachment.html
From marcdm at phronein.com  Thu Feb 16 18:34:37 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Thu Feb 16 18:34:44 2006
Subject: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
In-Reply-To: <BC53C974C3B9E542BC0A9BD4C5B1168AADC260@NEWMAIL.manord.com>
References: <BC53C974C3B9E542BC0A9BD4C5B1168AADC260@NEWMAIL.manord.com>
Message-ID: <1140132877.8693.83.camel@localhost.localdomain>

This is just a stab in the dark but do you have apache1.3 on that
machine as well? 

I ask, cuz IIRC /usr/sbin/apxs is from apache1 and /usr/bin/apxs2 is
from apache2. I think I remember seeing the first one on my system
before I removed apache1. And the 2nd is what I used to build mod_python
3.2.7 since morning.

Next thing is make sure you have apache2-dev installed. (It provides
apxs2)

And this is me, who has used Redhat once, using my Debian knowledge to
give you advice. Hope it helps. Good Luck.

/Marc DM


On Wed, 2006-02-15 at 18:19 +0100, Cassiano, Marco wrote:
> Thank you Jim,
> 
> It seems I have the correct version...
> 
> 
> [root@oldsvi root]# apr-config --version
> 0.9.4
> 
>  
> 
> 
> Marco
> 
> -----Original Message-----
> From: Jim Gallacher [mailto:jpg@jgassociates.ca] 
> Sent: Wednesday, February 15, 2006 6:15 PM
> To: Cassiano, Marco
> Cc: mod_python@modpython.org; martin@highwaytohell.net
> Subject: Re: [mod_python] Mod_python 3.2.7 on RedHat Enterprise 3
> 
> Cassiano, Marco wrote:
> >  Hi All,
> >  
> >  
> > I tried to compile Mod_python 3.2.7 on RH3EL with ./configure --with-python=/usr/local/bin/python2.4 --with-apxs=/usr/sbin/apxs > config.log
> >  
> > The compilation seems to be ok (some warnings) but when I start apache I get this error : 
> >  
> > service httpd start
> > 
> > Starting httpd: Syntax error on line 6 of /etc/httpd/conf.d/python.conf:
> > 
> > Cannot load /etc/httpd/modules/mod_python.so into server: /etc/httpd/modules/mod_python.so: undefined symbol: apr_table_compress
> >  
> >  
> > I tried to search the web with no result.
> >  
> > Any help is appreciated
> > 
> 
> Most likely you have an older apr version. Mod_python 3.2.7 now uses 
> apr_table_compress, which was added in APR 0.9.4. Could you confirm your 
> version by running:
> 
> $ apr-config --version
> 
> Ref. http://www.apache.org/dist/apr/CHANGES-APR-0.9
> 
> Jim
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From grahamd at dscpl.com.au  Thu Feb 16 18:38:43 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 16 18:38:46 2006
Subject: [mod_python] High traffic recommendations
Message-ID: <1140133123.4747@dscpl.user.openhosting.com>

Marc D. Murray wrote ..
> The next question I have now is, should think about replacing the
> publisher module with something less feature full? Right now, the only
> thing I'm using the publisher handler for is to locate and execute the
> correct function from the appropriate module. You know, the traversal
> bit.
> 
> If I decide to replace the publisher handler, my handler would be
> generating the cache keys and checking the cache. If the cache-item
> doesn't exist, then import the module based on values in req.parsed_uri
> and execute the appropriate function, then req.write the output.
> 
> Somehow I believe this would yield better behaviour.
> 
> Am I on the right path here? Or is this a waste of time as the Publisher
> is already efficient? 

I would suggest staying with publisher for now as it is known to
correctly do the mapping of URL to Python object. Getting this all
right isn't simple. Get it wrong and you might end up with a security
hole. Also, in mod_python 3.2.7 publisher uses its own module
loader which solves a lot of problems. If you write your own dispatcher
and use apache.import_module(), you expose yourself to all the old
module importer problems again until apache.import_module() is
fixed.

Graham
From deron.meranda at gmail.com  Thu Feb 16 19:32:48 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Thu Feb 16 19:32:53 2006
Subject: [mod_python] how to make fallback authentication
In-Reply-To: <1140131515.20254@dscpl.user.openhosting.com>
References: <1140131515.20254@dscpl.user.openhosting.com>
Message-ID: <5c06fa770602161632l15501d98w147f2c94be873d38@mail.gmail.com>

On 2/16/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> Unfortunately, to my mind, what would be the proper way of doing this
> can't current be done in mod_python because it has some stuff missing
> and doesn't process handlers for the authentication phase correctly. See:
>
>   http://issues.apache.org/jira/browse/MODPYTHON-124
>   http://issues.apache.org/jira/browse/MODPYTHON-129

Another thing to watch for to is the difference between Apache 2.0
and 2.2.  There may be other opportunities in 2.2 for yet more
mod_python functionality, such as registering an authn/z provider
which is written in python.

Anyway, you still may be able to do something a little less-than-the-
proper way.  Assuming that you don't need to rely on Apache in
any way (don't need any of the mod_auth* modules).

What you can do is actually implement the HTTP BASIC or
DIGEST protocol directly in your handler.  Of course without
the mentioned mising features, there would be no tie-in to
Apache (so no Require, AuthBasic, etc. directives).

Implementing HTTP BASIC is actually pretty straight forward.
Read http://www.faqs.org/rfcs/rfc2617.html -- you can ignore
all the Proxy stuff if you're not trying to write a proxy server.
The general strategy is to look for the "Authorization"
input header.  If it's there, decode it (check that the scheme
is "BASIC" (case-insensitive) then base64-decode the
username:password).  Then validate the username and password
by whatever means you want.

If there is no Authorization header, or it is not valid, then you
need to return an HTTP 401; and also insure you also output
an WWW-Authenticate response header.

--
Deron Meranda

From marcdm at phronein.com  Thu Feb 16 23:42:56 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Thu Feb 16 23:43:06 2006
Subject: [mod_python] High traffic recommendations
In-Reply-To: <1140012407.8217.29.camel@localhost.localdomain>
References: <1140012407.8217.29.camel@localhost.localdomain>
Message-ID: <1140151376.8693.105.camel@localhost.localdomain>

After changing and tweaking, I now have a strange situation. Apache2
processes will not die voluntarily. After Apache crashed with a
MaxClients error, I checked the logs again, to find a few 404 errors
from a strange directory. 

What I mean is 

File does not
exist: /home/tomcat/tomcat/webapps/lenya/lenya/pubs/pcsdelta/work/cache/live/ 

When this site isn't even being served by apache, never mind not being
on port 80 at all. How did this get in there? Add to that, mod_jk has
been disabled since Tuesday.

Ignoring the lenya errors for a second, when I issue the command to stop
apache (/etc/init.d/apache2 stop). It takes a little while, and I see
(in the apache error log) a bunch of warnings and then errors looking
like what I've pasted below.

[Thu Feb 16 22:49:33 2006] [error] child process 15860 still did not
exit, sending a SIGKILL
[Thu Feb 16 22:49:33 2006] [error] child process 15102 still did not
exit, sending a SIGKILL
[Thu Feb 16 22:49:33 2006] [error] child process 16086 still did not
exit, sending a SIGKILL
[Thu Feb 16 22:49:33 2006] [error] child process 16087 still did not
exit, sending a SIGKILL
[Thu Feb 16 22:49:33 2006] [error] child process 16091 still did not
exit, sending a SIGKILL
[Thu Feb 16 22:49:34 2006] [notice] caught SIGTERM, shutting down
[Thu Feb 16 22:49:41 2006] [notice] suEXEC mechanism enabled
(wrapper: /usr/lib/apache2/suexec2)
[Thu Feb 16 22:49:41 2006] [notice] mod_python: Creating 48 session
mutexes based on 160 max processes and 0 max threads.
[Thu Feb 16 22:49:42 2006] [notice] Apache/2.0.54 (Debian GNU/Linux)
mod_python/3.2.7 Python/2.4.1 PHP/4.3.10-16 configured -- resuming
normal operations

It's like apache2 is having a problem stopping the child processes the
normal way. Am I right? If this is my fault somehow, what (in
mod_python) could possibly cause apache processes to not want to die?
Un-closed database connections maybe? 

My databases are bsddb3 to cache the results of xml-->dictionary and
openldap for the users. The bsddb files are opened and closed each time
they're needed. .....

but then, when does the DBEnv get closed .??... hmmmm

gone to check the code

/marcdm

From grahamd at dscpl.com.au  Thu Feb 16 23:56:39 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 16 23:56:42 2006
Subject: [mod_python] High traffic recommendations
Message-ID: <1140152199.20370@dscpl.user.openhosting.com>

Could be caused by this:

  https://issues.apache.org/jira/browse/MODPYTHON-109

But could also simply be that you have a handler which is dealing
with a request that takes a long time for it to generate the response.
If it takes too long, Apache will not wait for it to finish the response
and will kill off child process forcibly.

Graham

Marc D. Murray wrote ..
> After changing and tweaking, I now have a strange situation. Apache2
> processes will not die voluntarily. After Apache crashed with a
> MaxClients error, I checked the logs again, to find a few 404 errors
> from a strange directory. 
> 
> What I mean is 
> 
> File does not
> exist: /home/tomcat/tomcat/webapps/lenya/lenya/pubs/pcsdelta/work/cache/live/
> 
> When this site isn't even being served by apache, never mind not being
> on port 80 at all. How did this get in there? Add to that, mod_jk has
> been disabled since Tuesday.
> 
> Ignoring the lenya errors for a second, when I issue the command to stop
> apache (/etc/init.d/apache2 stop). It takes a little while, and I see
> (in the apache error log) a bunch of warnings and then errors looking
> like what I've pasted below.
> 
> [Thu Feb 16 22:49:33 2006] [error] child process 15860 still did not
> exit, sending a SIGKILL
> [Thu Feb 16 22:49:33 2006] [error] child process 15102 still did not
> exit, sending a SIGKILL
> [Thu Feb 16 22:49:33 2006] [error] child process 16086 still did not
> exit, sending a SIGKILL
> [Thu Feb 16 22:49:33 2006] [error] child process 16087 still did not
> exit, sending a SIGKILL
> [Thu Feb 16 22:49:33 2006] [error] child process 16091 still did not
> exit, sending a SIGKILL
> [Thu Feb 16 22:49:34 2006] [notice] caught SIGTERM, shutting down
> [Thu Feb 16 22:49:41 2006] [notice] suEXEC mechanism enabled
> (wrapper: /usr/lib/apache2/suexec2)
> [Thu Feb 16 22:49:41 2006] [notice] mod_python: Creating 48 session
> mutexes based on 160 max processes and 0 max threads.
> [Thu Feb 16 22:49:42 2006] [notice] Apache/2.0.54 (Debian GNU/Linux)
> mod_python/3.2.7 Python/2.4.1 PHP/4.3.10-16 configured -- resuming
> normal operations
> 
> It's like apache2 is having a problem stopping the child processes the
> normal way. Am I right? If this is my fault somehow, what (in
> mod_python) could possibly cause apache processes to not want to die?
> Un-closed database connections maybe? 
> 
> My databases are bsddb3 to cache the results of xml-->dictionary and
> openldap for the users. The bsddb files are opened and closed each time
> they're needed. .....
> 
> but then, when does the DBEnv get closed .??... hmmmm
> 
> gone to check the code
> 
> /marcdm
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From grahamd at dscpl.com.au  Fri Feb 17 00:14:43 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb 17 00:14:54 2006
Subject: [mod_python] how to make fallback authentication
Message-ID: <1140153283.32294@dscpl.user.openhosting.com>

Deron Meranda wrote ..
> Implementing HTTP BASIC is actually pretty straight forward.
> Read http://www.faqs.org/rfcs/rfc2617.html -- you can ignore
> all the Proxy stuff if you're not trying to write a proxy server.
> The general strategy is to look for the "Authorization"
> input header.  If it's there, decode it (check that the scheme
> is "BASIC" (case-insensitive) then base64-decode the
> username:password).  Then validate the username and password
> by whatever means you want.
> 
> If there is no Authorization header, or it is not valid, then you
> need to return an HTTP 401; and also insure you also output
> an WWW-Authenticate response header.

Code for basic authentication included down below as drawn from my own
library of play stuff. Haven't had a chance to put something together to
properly show how to use it in original posters example, but can be
adapted by simply creating instance of BasicAuthentication class with
appropriate parameters and then using instance as callable object.

  realm = "Disney Land"
  userdb = { "mickey": "mouse" }

  authenticator = BasicAuthentication(realm,userdb)

  authenticator(req)

  if req.user:
    # was able to autheticate okay
    ....

Code for BasicAuthentication is then as follows. I hope it still runs, I have
not used/tested this in a while.

class BasicAuthentication:

    def __init__(self,realm,auth,access=None):
        self.__realm = realm
        self.__auth = auth
        self.__access = access

    def __call__(self,req):

        user = None
        passwd = None

        if req.headers_in.has_key('Authorization'):
            try:
                header = req.headers_in['Authorization']
                scheme,credentials = header.split(None,1)
                credentials = credentials.strip()

                scheme = scheme.lower()
                if scheme == 'basic':
                    credentials = base64.decodestring(credentials)
                    user,passwd = string.split(credentials,':',1)
                else:
                    raise apache.SERVER_RETURN, apache.HTTP_BAD_REQUEST
            except:
                raise apache.SERVER_RETURN, apache.HTTP_BAD_REQUEST

        if self.__realm is None:
            raise apache.SERVER_RETURN, apache.HTTP_INTERNAL_SERVER_ERROR

        if not user:
            s = 'Basic realm="%s"' % self.__realm
            req.err_headers_out['WWW-Authenticate'] = s
            raise apache.SERVER_RETURN, apache.HTTP_UNAUTHORIZED

        if callable(self.__auth):
            result = self.__auth(req,user,passwd)
        else:
            if type(self.__auth) is types.DictionaryType:
                result = self.__auth.has_key(user) and \
                        self.__auth[user] == passwd
            else:
                result = self.__auth

        if not result:
            s = 'Basic realm="%s"' % self.__realm
            req.err_headers_out['WWW-Authenticate'] = s
            raise apache.SERVER_RETURN, apache.HTTP_UNAUTHORIZED

        if self.__access is not None:

            if callable(self.__access):
                result = self.__access(req,user)
            else:
                if type(self.__access) in (types.ListType,types.TupleType):
                    result = user in self.__access
                else:
                    result = self.__access

	# If access check failed, and authentication was
	# performed with actual user details being
	# checked, as opposed to any user being allowed,
	# must provide ability to reauthenticate with a
	# different user and not just return forbidden.

        if not result:
            if self.__auth is not None and (callable(self.__auth) or \
                    type(self.__auth) == types.DictionaryType):
                s = 'Basic realm="%s"' % self.__realm
                req.err_headers_out['WWW-Authenticate'] = s
                raise apache.SERVER_RETURN, apache.HTTP_UNAUTHORIZED
            else:
                raise apache.SERVER_RETURN, apache.HTTP_FORBIDDEN

        req.user = user


From coreyfro at coreyfro.com  Fri Feb 17 04:39:23 2006
From: coreyfro at coreyfro.com (Corey McGuire)
Date: Fri Feb 17 04:34:08 2006
Subject: [mod_python] PSP TypeError: cannot concatenate 'str' and 'instance'
	objects
Message-ID: <42290.63.204.219.6.1140169163.squirrel@63.204.219.4>

Hello all,

I am learning python and PSP at the same time, which may be a bit of a
mistake, but I think I am doing well.

I am working on moving my PHP image gallery:
http://www.coreyfro.com/~coreyfro/gallery.php?gallery=b-man-2003

To python:
http://127.0.0.1/~coreyfro/gallery/gallery

This is really just an exercise, but it's kinda my own version of "Hello
World"

I am getting hung up ok this block of code:

cell_tmpl = psp.PSP(req, filename='cell.tmpl', vars = {'gallery': gallery,
'i': i, 'path': path, 'file': dirList[i], 'caption': caption})
body = body + cell_tmpl

Now, the kicker is "body = body + cell_tmpl"... If I leave it like that, I
get the following
http://127.0.0.1/~coreyfro/frozen/gallery1/gallery/?gallery=b-man-2003

If I try converting it to a string (like "body = body + str(cell_tmpl)")
something TOTALY wacky happens
http://127.0.0.1/~coreyfro/frozen/gallery2/gallery/?gallery=b-man-2003

It's outputting the HTML I am trying to append to body and NOT
concatinating it with body.

How do I put two and two together?

Here's the code in full

from mod_python import psp
import os

def report(req, title, caption, body):
    req.content_type            = 'text/html'
    gallery_tmpl                = psp.PSP(req, filename='gallery.tmpl')
    gallery_tmpl.run(vars       = { 'title': title, 'caption': caption,
'body': body  })

def index(req):
    title                       = "Coreyfro's Handy, Dandy, Super-duper,
Gallery Engine!"
    caption                     = "It's free, it's fast, it's incomplete!"
    body                        = "You are probably here by mistake<br>\
                                   Please feel free to be confused<br>\
                                   I know I am"
    report(req, title, caption, body)

def gallery(req, gallery='', columns=''):
    if columns:
        columns                 = int(columns)
    else:
        columns                 = 5

    if gallery:
        i                       = 0
        column                  = 1
        title                   = gallery
        caption                 = "Click on an image below to see it's
full sized version"
        path                    = "/home/coreyfro/public_html/gallery"
        dirList                 = os.listdir(path+"/"+gallery+"/ds")
        body                    = " " * 6 + "<table>\n" + " " * 8 + "<tr>\n"


        while i < len(dirList):
            if column < columns:
                column          = column + 1
            else:
                column          = 1
                body            = body + " " * 8 + "</tr>\n" + " " * 8 +
"<tr>\n"

            cell_tmpl           = psp.PSP(req, filename='cell.tmpl', vars
= {'gallery': gallery, 'i': i, 'path': path, 'file':
dirList[i], 'caption': caption})
            body                = body + cell_tmpl
            i                   = i + 1


        body                    = body + " " * 8 + "</tr>\n" + " " * 6 +
"</table>"
        report(req, title, caption, body)

    else:
        index(req)

def view(req, gallery, index):
    pass

From coreyfro at coreyfro.com  Fri Feb 17 04:52:42 2006
From: coreyfro at coreyfro.com (Corey McGuire)
Date: Fri Feb 17 04:47:23 2006
Subject: [mod_python] PSP TypeError: cannot concatenate 'str' and 
	'instance' objects
In-Reply-To: <42290.63.204.219.6.1140169163.squirrel@63.204.219.4>
References: <42290.63.204.219.6.1140169163.squirrel@63.204.219.4>
Message-ID: <45036.63.204.219.6.1140169962.squirrel@63.204.219.4>

Excuse the stupid errors, it's late:
http://63.204.219.6/~coreyfro/gallery/gallery
http://63.204.219.6/~coreyfro/frozen/gallery1/gallery/?gallery=b-man-2003
http://63.204.219.6/~coreyfro/frozen/gallery2/gallery/?gallery=b-man-2003

> Hello all,
>
> I am learning python and PSP at the same time, which may be a bit of a
> mistake, but I think I am doing well.
>
> I am working on moving my PHP image gallery:
> http://www.coreyfro.com/~coreyfro/gallery.php?gallery=b-man-2003
>
> To python:
> http://127.0.0.1/~coreyfro/gallery/gallery
>
> This is really just an exercise, but it's kinda my own version of "Hello
> World"
>
> I am getting hung up ok this block of code:
>
> cell_tmpl = psp.PSP(req, filename='cell.tmpl', vars = {'gallery': gallery,
> 'i': i, 'path': path, 'file': dirList[i], 'caption': caption})
> body = body + cell_tmpl
>
> Now, the kicker is "body = body + cell_tmpl"... If I leave it like that, I
> get the following
> http://127.0.0.1/~coreyfro/frozen/gallery1/gallery/?gallery=b-man-2003
>
> If I try converting it to a string (like "body = body + str(cell_tmpl)")
> something TOTALY wacky happens
> http://127.0.0.1/~coreyfro/frozen/gallery2/gallery/?gallery=b-man-2003
>
> It's outputting the HTML I am trying to append to body and NOT
> concatinating it with body.
>
> How do I put two and two together?
>
> Here's the code in full
>
> from mod_python import psp
> import os
>
> def report(req, title, caption, body):
>     req.content_type            = 'text/html'
>     gallery_tmpl                = psp.PSP(req, filename='gallery.tmpl')
>     gallery_tmpl.run(vars       = { 'title': title, 'caption': caption,
> 'body': body  })
>
> def index(req):
>     title                       = "Coreyfro's Handy, Dandy, Super-duper,
> Gallery Engine!"
>     caption                     = "It's free, it's fast, it's incomplete!"
>     body                        = "You are probably here by mistake<br>\
>                                    Please feel free to be confused<br>\
>                                    I know I am"
>     report(req, title, caption, body)
>
> def gallery(req, gallery='', columns=''):
>     if columns:
>         columns                 = int(columns)
>     else:
>         columns                 = 5
>
>     if gallery:
>         i                       = 0
>         column                  = 1
>         title                   = gallery
>         caption                 = "Click on an image below to see it's
> full sized version"
>         path                    = "/home/coreyfro/public_html/gallery"
>         dirList                 = os.listdir(path+"/"+gallery+"/ds")
>         body                    = " " * 6 + "<table>\n" + " " * 8 +
> "<tr>\n"
>
>
>         while i < len(dirList):
>             if column < columns:
>                 column          = column + 1
>             else:
>                 column          = 1
>                 body            = body + " " * 8 + "</tr>\n" + " " * 8 +
> "<tr>\n"
>
>             cell_tmpl           = psp.PSP(req, filename='cell.tmpl', vars
> = {'gallery': gallery, 'i': i, 'path': path, 'file':
> dirList[i], 'caption': caption})
>             body                = body + cell_tmpl
>             i                   = i + 1
>
>
>         body                    = body + " " * 8 + "</tr>\n" + " " * 6 +
> "</table>"
>         report(req, title, caption, body)
>
>     else:
>         index(req)
>
> def view(req, gallery, index):
>     pass
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>


From grahamd at dscpl.com.au  Fri Feb 17 04:52:42 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb 17 04:52:58 2006
Subject: [mod_python] PSP TypeError: cannot concatenate 'str' and
	'instance' objects
In-Reply-To: <42290.63.204.219.6.1140169163.squirrel@63.204.219.4>
References: <42290.63.204.219.6.1140169163.squirrel@63.204.219.4>
Message-ID: <65D86267-0357-4616-BF9D-C6648D7663EE@dscpl.com.au>

The PSP class always writes it output direct to the request object  
and it
is not available as a string without doing some trickery. Even if using
publisher, you can do something like:

     req.content_type            = 'text/html'
     gallery_tmpl                = psp.PSP(req, filename='gallery.tmpl')
     req.write("some HTML prologue")
     gallery_tmpl.run(vars       = { 'title': title, 'caption':  
caption, 'body': body  })
     req.write("some HTML epilogue")

Ie., don't try and concatenate anything as strings, just write the  
bits out
in sequence.

If you really need to capture the PSP output in a string have a read of:

   http://www.modpython.org/pipermail/mod_python/2005-June/018231.html

Graham

On 17/02/2006, at 8:39 PM, Corey McGuire wrote:

> Hello all,
>
> I am learning python and PSP at the same time, which may be a bit of a
> mistake, but I think I am doing well.
>
> I am working on moving my PHP image gallery:
> http://www.coreyfro.com/~coreyfro/gallery.php?gallery=b-man-2003
>
> To python:
> http://127.0.0.1/~coreyfro/gallery/gallery
>
> This is really just an exercise, but it's kinda my own version of  
> "Hello
> World"
>
> I am getting hung up ok this block of code:
>
> cell_tmpl = psp.PSP(req, filename='cell.tmpl', vars = {'gallery':  
> gallery,
> 'i': i, 'path': path, 'file': dirList[i], 'caption': caption})
> body = body + cell_tmpl
>
> Now, the kicker is "body = body + cell_tmpl"... If I leave it like  
> that, I
> get the following
> http://127.0.0.1/~coreyfro/frozen/gallery1/gallery/?gallery=b-man-2003
>
> If I try converting it to a string (like "body = body + str 
> (cell_tmpl)")
> something TOTALY wacky happens
> http://127.0.0.1/~coreyfro/frozen/gallery2/gallery/?gallery=b-man-2003
>
> It's outputting the HTML I am trying to append to body and NOT
> concatinating it with body.
>
> How do I put two and two together?
>
> Here's the code in full
>
> from mod_python import psp
> import os
>
> def report(req, title, caption, body):
>     req.content_type            = 'text/html'
>     gallery_tmpl                = psp.PSP(req,  
> filename='gallery.tmpl')
>     gallery_tmpl.run(vars       = { 'title': title, 'caption':  
> caption,
> 'body': body  })
>
> def index(req):
>     title                       = "Coreyfro's Handy, Dandy, Super- 
> duper,
> Gallery Engine!"
>     caption                     = "It's free, it's fast, it's  
> incomplete!"
>     body                        = "You are probably here by  
> mistake<br>\
>                                    Please feel free to be  
> confused<br>\
>                                    I know I am"
>     report(req, title, caption, body)
>
> def gallery(req, gallery='', columns=''):
>     if columns:
>         columns                 = int(columns)
>     else:
>         columns                 = 5
>
>     if gallery:
>         i                       = 0
>         column                  = 1
>         title                   = gallery
>         caption                 = "Click on an image below to see it's
> full sized version"
>         path                    = "/home/coreyfro/public_html/gallery"
>         dirList                 = os.listdir(path+"/"+gallery+"/ds")
>         body                    = " " * 6 + "<table>\n" + " " * 8 +  
> "<tr>\n"
>
>
>         while i < len(dirList):
>             if column < columns:
>                 column          = column + 1
>             else:
>                 column          = 1
>                 body            = body + " " * 8 + "</tr>\n" + " "  
> * 8 +
> "<tr>\n"
>
>             cell_tmpl           = psp.PSP(req,  
> filename='cell.tmpl', vars
> = {'gallery': gallery, 'i': i, 'path': path, 'file':
> dirList[i], 'caption': caption})
>             body                = body + cell_tmpl
>             i                   = i + 1
>
>
>         body                    = body + " " * 8 + "</tr>\n" + " "  
> * 6 +
> "</table>"
>         report(req, title, caption, body)
>
>     else:
>         index(req)
>
> def view(req, gallery, index):
>     pass
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From luismg at gmx.net  Fri Feb 17 08:30:52 2006
From: luismg at gmx.net (Luis M. Gonzalez)
Date: Fri Feb 17 08:30:53 2006
Subject: [mod_python] Questions about PSP vs other solutions
Message-ID: <000501c633c6$61897f60$f8dbebc9@luis>

Hi there,

I would highly appreciate if someone sheds some light over these questions I 
have...
I've been reading an old post from 2003, where Sterling Hughes, Rimon Barr 
and others were discussing about
the convenience, advantages and disadvantages of including PSP into 
mod_python ("supporting modular mod_python extensions vs."folding" mod_psp")
There were many parts that seemed to contradict each point of view, but I 
selected two paragraphs that best illustrate the issue:


Sterling Hugues:
"PSP is a very small, very fast alternative, it doesn't preclude you from
using any of the listed solutions.  In fact you can use PSP in
conjunction with any of the solutions listed, or you can even ignore its
existence altogether and use something else, or code directly with
req.write().  There is *zero* performance loss if you choose to use
another option, like spyce."

Rimon Barr:
"I saw that you were working on a C-based
parser for psp, and I asked you whether you were interested in working
on such a parser for the Spyce language. The rationale is that although
the parser does not matter much for performance, because the compiled
files are cached, it would be nice as an option for developers, since
the current Spyce parser is implemented in Python and is relatively
slow. I also, thinking that you work with the Apache Foundation, I
offered to donate Spyce to the AF. Donating to the AF does not mean, in
my mind, merging the Spyce and mod_python projects."


So both seem to agree in that being PSP a c-based parser is a good thing, 
because it is very fast.
However, both of them consider also that it doesn't matter, because the 
compiled files are cached (?)
and there's *zero* performance lost when choosing another option.
Hence, what's the advantage of using PSP?
If using any other solution has zero performance lost, why bother in writing 
a c-based parser?

Maybe I lost some important detail of the discussion, or my limited english 
played against me, but isn't it contradictory?

Luis

From bud at comune.grosseto.it  Fri Feb 17 09:05:56 2006
From: bud at comune.grosseto.it (Bud P. Bruegger)
Date: Fri Feb 17 08:50:40 2006
Subject: [mod_python] req.user and SSL?
Message-ID: <5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>

Hello everyone,

I have a problem reading req.user when using mod-SSL with the 
+FakeBasicAuth option and setting SSLUser:  req.user always seems to be 
undefined.  Also, neither Authen nor Authz handers run.   Any help would be 
highly appreciated!

Here some details of what I try:

#-- Apache 2 conf ------------------------------
NameVirtualHost *:443
<VirtualHost *:443>
         LogLevel debug
         SSLEngine on
         SSLCertificateFile /etc/apache2/ssl/apache.pem
         SSLCACertificateFile /etc/apache2/ssl/caCerts.pem
         SSLVerifyDepth 3
         SSLVerifyClient require
         #SSLUserName SSL_CLIENT_S_DN_X509
         DocumentRoot /var/www/

         <Directory /var/www/sc>
             SSLRequireSSL
             SSLOptions +StdEnvVars +FakeBasicAuth
             AuthType Basic
             SetHandler mod_python
             PythonHandler test
             PythonAccessHandler test
             PythonAuthenHandler test
             PythonAuthzHandler test
             PythonFixupHandler test
             PythonDebug On
         </Directory>
</VirtualHost>

#--- test.py ----------------------------------------------------
from mod_python import apache

def genHandler(req, handlerName):
     req.add_common_vars()
     req.get_basic_auth_pw()
     user = req.user
     dn = req.subprocess_env.get('SSL_CLIENT_S_DN', req.subprocess_env.keys())
     userLabel = 'XXX-%s-user' % handlerName
     dnLabel = 'XXX-%s-dn' % handlerName
     req.subprocess_env[userLabel]=str(user)
     req.subprocess_env[dnLabel]=str(dn)
     return apache.OK


def accesshandler(req):
     return genHandler(req, 'access')

def authenhandler(req):
     return genHandler(req, 'authen')

def authzhandler(req):
     return genHandler(req, 'authz')

def fixuphandler(req):
     return genHandler(req, 'fixup')
#------------------------------------------------------

many thanks in advance

-b



-------------------------------------------------------------------------------------------------
Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 
(voice),  -21139 (fax)
Servizio Elaborazione Dati                    e-mail:  bud@comune.grosseto.it
Comune di Grosseto                            jabber:  bud@jabber.no
Via Ginori, 
43                                      http://www.comune.grosseto.it/cie/
58100 Grosseto (Tuscany, 
Italy)           http://www.comune.grosseto.it/interopEID/ 

From bud at comune.grosseto.it  Fri Feb 17 09:26:49 2006
From: bud at comune.grosseto.it (Bud P. Bruegger)
Date: Fri Feb 17 09:11:36 2006
Subject: SSL-data access from verious handlers.  was:
	Re:[mod_python] problem w/ authen handler
Message-ID: <5.2.1.1.0.20060217152642.03d7f250@mail.comune.grosseto.it>

Graham Dumpleton wrote ..
 > The macros supposedly try and make it type safe, so haven't quite worked
 > out how you are meant to use them yet. In part it looks like compile time
 > binding is required, which would be an issue with Python. What you might
 > be able to do though is write a little C based Python module which did
 > the lookup and calling of "ssl_var_lookup()" for you by going direct to
 > the Apache runtime library calls. May work. :-)

See if you can get the attached code (2 files) to work for you. You will 
need to
modify the setup.py to point to appropriate include and library directories and
correct name for APR libraries on your platform.

The code all compiles, but since I don't have mod_ssl setup I get back nothing.
The first argument to each method must be the request object. It will crash if
it isn't as haven't been able to have check in code that it is in fact a 
request
object because undefined as am not linking against mod_python .so.

The handler I was using was as follows, but you should be able to adapt it.

import _mp_mod_ssl
import vampire

class _Object:

   def is_https(self,req):
     return _mp_mod_ssl.is_https(req)

   def var_lookup(self,req,name):
     return _mp_mod_ssl.var_lookup(req,name)

handler = vampire.Publisher(_Object())

Let me know how you go. Is an interesting problem which is why I decided
to play with it when I should have been doing real work. :-)

Graham




-------------------------------------------------------------------------------------------------
Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 
(voice),  -21139 (fax)
Servizio Elaborazione Dati                    e-mail:  bud@comune.grosseto.it
Comune di Grosseto                            jabber:  bud@jabber.no
Via Ginori, 
43                                      http://www.comune.grosseto.it/cie/
58100 Grosseto (Tuscany, 
Italy)           http://www.comune.grosseto.it/interopEID/ 
-------------- next part --------------
#include <Python.h>

#include <apr.h>
#include <mod_python.h>

typedef int (*ssl_is_https_t)(conn_rec*);

static PyObject* is_https(PyObject* module, PyObject* args)
{
  requestobject* request_object = 0;
  ssl_is_https_t ssl_is_https = 0;
  int result = 0;

  if (!PyArg_ParseTuple(args,"O",&request_object))
    return 0;

#if 0
  /* How to ensure symbol is resolved. */
  if (!MpRequest_Check(request_object))
    PyErr_SetString(PyExc_TypeError,"not a request object");
#endif

  ssl_is_https = (ssl_is_https_t)apr_dynamic_fn_retrieve("ssl_is_https");

  if (ssl_is_https == 0)
    return Py_BuildValue("i",0);

  result = ssl_is_https(request_object->request_rec->connection);

  return Py_BuildValue("i",result);
}

typedef char* (*ssl_var_lookup_t)(apr_pool_t*,
 server_rec*, conn_rec*, request_rec*, char*);

static PyObject* var_lookup(PyObject* module, PyObject* args)
{
  requestobject* request_object = 0;
  char* variable_name = 0;
  ssl_var_lookup_t ssl_var_lookup = 0;
  char* variable_value = 0;
  PyObject* result = 0;

  if (!PyArg_ParseTuple(args,"Os",&request_object,&variable_name))
    return 0;

#if 0
  /* How to ensure symbol is resolved. */
  if (!MpRequest_Check(request_object))
    PyErr_SetString(PyExc_TypeError,"not a request object");
#endif

  ssl_var_lookup = (ssl_var_lookup_t)apr_dynamic_fn_retrieve("ssl_var_lookup");

  if (ssl_var_lookup == 0)
  {
    Py_XINCREF(Py_None);
      
    return Py_None;
  }

  variable_value = ssl_var_lookup(
   request_object->request_rec->pool,
   request_object->request_rec->server,
   request_object->request_rec->connection,
   request_object->request_rec,
   variable_name);

  result = Py_BuildValue("s",variable_value);

  free(variable_value);

  return result;
}

static struct PyMethodDef mp_mod_ssl_methods[] = {
  { "is_https", is_https, 1 },
  { "var_lookup", var_lookup, 1 },
  { NULL, NULL },
};

void init_mp_mod_ssl(void)
{
  PyObject* module;

  module = Py_InitModule("_mp_mod_ssl",mp_mod_ssl_methods);

  if (module == 0)
    Py_FatalError("can't initialise module _mp_mod_ssl");
}
-------------- next part --------------
A non-text attachment was scrubbed...
Name: setup.py
Type: application/octet-stream
Size: 605 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060217/befe5232/setup.obj
From jpg at jgassociates.ca  Fri Feb 17 10:31:07 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Feb 17 10:30:30 2006
Subject: SSL-data access from verious handlers.  was:	Re:[mod_python]
	problem w/ authen handler
In-Reply-To: <5.2.1.1.0.20060217152642.03d7f250@mail.comune.grosseto.it>
References: <5.2.1.1.0.20060217152642.03d7f250@mail.comune.grosseto.it>
Message-ID: <43F5EC3B.3000903@jgassociates.ca>

Hi Bud,

I think it might be appropriate to move this discussion to the 
python-dev mailing list, as you are digging into the mod_python 
internals for a new feature which has not yet been implemented.

To subscribe send an email to python-dev-subscribe@httpd.apache.org
http://people.apache.org/~jgallacher/mod_python/website-test/lists.html#mp-dev

Jim

Bud P. Bruegger wrote:
> Graham Dumpleton wrote ..
>  > The macros supposedly try and make it type safe, so haven't quite worked
>  > out how you are meant to use them yet. In part it looks like compile 
> time
>  > binding is required, which would be an issue with Python. What you might
>  > be able to do though is write a little C based Python module which did
>  > the lookup and calling of "ssl_var_lookup()" for you by going direct to
>  > the Apache runtime library calls. May work. :-)
> 
> See if you can get the attached code (2 files) to work for you. You will 
> need to
> modify the setup.py to point to appropriate include and library 
> directories and
> correct name for APR libraries on your platform.
> 
> The code all compiles, but since I don't have mod_ssl setup I get back 
> nothing.
> The first argument to each method must be the request object. It will 
> crash if
> it isn't as haven't been able to have check in code that it is in fact a 
> request
> object because undefined as am not linking against mod_python .so.
> 
> The handler I was using was as follows, but you should be able to adapt it.
> 
> import _mp_mod_ssl
> import vampire
> 
> class _Object:
> 
>   def is_https(self,req):
>     return _mp_mod_ssl.is_https(req)
> 
>   def var_lookup(self,req,name):
>     return _mp_mod_ssl.var_lookup(req,name)
> 
> handler = vampire.Publisher(_Object())
> 
> Let me know how you go. Is an interesting problem which is why I decided
> to play with it when I should have been doing real work. :-)
> 
> Graham
> 
> 
> 
> 
> ------------------------------------------------------------------------------------------------- 
> 
> Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 (voice),  
> -21139 (fax)
> Servizio Elaborazione Dati                    e-mail:  
> bud@comune.grosseto.it
> Comune di Grosseto                            jabber:  bud@jabber.no
> Via Ginori, 43                                      
> http://www.comune.grosseto.it/cie/
> 58100 Grosseto (Tuscany, Italy)           
> http://www.comune.grosseto.it/interopEID/
> 
> 
> ------------------------------------------------------------------------
> 
> #include <Python.h>
> 
> #include <apr.h>
> #include <mod_python.h>
> 
> typedef int (*ssl_is_https_t)(conn_rec*);
> 
> static PyObject* is_https(PyObject* module, PyObject* args)
> {
>   requestobject* request_object = 0;
>   ssl_is_https_t ssl_is_https = 0;
>   int result = 0;
> 
>   if (!PyArg_ParseTuple(args,"O",&request_object))
>     return 0;
> 
> #if 0
>   /* How to ensure symbol is resolved. */
>   if (!MpRequest_Check(request_object))
>     PyErr_SetString(PyExc_TypeError,"not a request object");
> #endif
> 
>   ssl_is_https = (ssl_is_https_t)apr_dynamic_fn_retrieve("ssl_is_https");
> 
>   if (ssl_is_https == 0)
>     return Py_BuildValue("i",0);
> 
>   result = ssl_is_https(request_object->request_rec->connection);
> 
>   return Py_BuildValue("i",result);
> }
> 
> typedef char* (*ssl_var_lookup_t)(apr_pool_t*,
>  server_rec*, conn_rec*, request_rec*, char*);
> 
> static PyObject* var_lookup(PyObject* module, PyObject* args)
> {
>   requestobject* request_object = 0;
>   char* variable_name = 0;
>   ssl_var_lookup_t ssl_var_lookup = 0;
>   char* variable_value = 0;
>   PyObject* result = 0;
> 
>   if (!PyArg_ParseTuple(args,"Os",&request_object,&variable_name))
>     return 0;
> 
> #if 0
>   /* How to ensure symbol is resolved. */
>   if (!MpRequest_Check(request_object))
>     PyErr_SetString(PyExc_TypeError,"not a request object");
> #endif
> 
>   ssl_var_lookup = (ssl_var_lookup_t)apr_dynamic_fn_retrieve("ssl_var_lookup");
> 
>   if (ssl_var_lookup == 0)
>   {
>     Py_XINCREF(Py_None);
>       
>     return Py_None;
>   }
> 
>   variable_value = ssl_var_lookup(
>    request_object->request_rec->pool,
>    request_object->request_rec->server,
>    request_object->request_rec->connection,
>    request_object->request_rec,
>    variable_name);
> 
>   result = Py_BuildValue("s",variable_value);
> 
>   free(variable_value);
> 
>   return result;
> }
> 
> static struct PyMethodDef mp_mod_ssl_methods[] = {
>   { "is_https", is_https, 1 },
>   { "var_lookup", var_lookup, 1 },
>   { NULL, NULL },
> };
> 
> void init_mp_mod_ssl(void)
> {
>   PyObject* module;
> 
>   module = Py_InitModule("_mp_mod_ssl",mp_mod_ssl_methods);
> 
>   if (module == 0)
>     Py_FatalError("can't initialise module _mp_mod_ssl");
> }
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From coreyfro at coreyfro.com  Fri Feb 17 11:24:32 2006
From: coreyfro at coreyfro.com (Corey McGuire)
Date: Fri Feb 17 11:19:13 2006
Subject: [mod_python] PSP TypeError: cannot concatenate 'str' and 
	'instance' objects
Message-ID: <41944.63.204.219.6.1140193472.squirrel@63.204.219.4>


Ahhhh, ok.  I think I miss understood how PSP worked.  I was thinking one
had to process everything first, and THEN inject it in to a template.  I
didn't realize it could be assembled on the fly.

OK, thanks!

> The PSP class always writes it output direct to the request object
> and it
> is not available as a string without doing some trickery. Even if using
> publisher, you can do something like:
>
>      req.content_type            = 'text/html'
>      gallery_tmpl                = psp.PSP(req, filename='gallery.tmpl')
>      req.write("some HTML prologue")
>      gallery_tmpl.run(vars       = { 'title': title, 'caption':
> caption, 'body': body  })
>      req.write("some HTML epilogue")
>
> Ie., don't try and concatenate anything as strings, just write the
> bits out
> in sequence.
>
> If you really need to capture the PSP output in a string have a read of:
>
>    http://www.modpython.org/pipermail/mod_python/2005-June/018231.html
>
> Graham
>
> On 17/02/2006, at 8:39 PM, Corey McGuire wrote:
>
>> Hello all,
>>
>> I am learning python and PSP at the same time, which may be a bit of a
>> mistake, but I think I am doing well.
>>
>> I am working on moving my PHP image gallery:
>> http://www.coreyfro.com/~coreyfro/gallery.php?gallery=b-man-2003
>>
>> To python:
>> http://127.0.0.1/~coreyfro/gallery/gallery
>>
>> This is really just an exercise, but it's kinda my own version of
>> "Hello
>> World"
>>
>> I am getting hung up ok this block of code:
>>
>> cell_tmpl = psp.PSP(req, filename='cell.tmpl', vars = {'gallery':
>> gallery,
>> 'i': i, 'path': path, 'file': dirList[i], 'caption': caption})
>> body = body + cell_tmpl
>>
>> Now, the kicker is "body = body + cell_tmpl"... If I leave it like
>> that, I
>> get the following
>> http://127.0.0.1/~coreyfro/frozen/gallery1/gallery/?gallery=b-man-2003
>>
>> If I try converting it to a string (like "body = body + str
>> (cell_tmpl)")
>> something TOTALY wacky happens
>> http://127.0.0.1/~coreyfro/frozen/gallery2/gallery/?gallery=b-man-2003
>>
>> It's outputting the HTML I am trying to append to body and NOT
>> concatinating it with body.
>>
>> How do I put two and two together?
>>
>> Here's the code in full
>>
>> from mod_python import psp
>> import os
>>
>> def report(req, title, caption, body):
>>     req.content_type            = 'text/html'
>>     gallery_tmpl                = psp.PSP(req,
>> filename='gallery.tmpl')
>>     gallery_tmpl.run(vars       = { 'title': title, 'caption':
>> caption,
>> 'body': body  })
>>
>> def index(req):
>>     title                       = "Coreyfro's Handy, Dandy, Super-
>> duper,
>> Gallery Engine!"
>>     caption                     = "It's free, it's fast, it's
>> incomplete!"
>>     body                        = "You are probably here by
>> mistake<br>\
>>                                    Please feel free to be
>> confused<br>\
>>                                    I know I am"
>>     report(req, title, caption, body)
>>
>> def gallery(req, gallery='', columns=''):
>>     if columns:
>>         columns                 = int(columns)
>>     else:
>>         columns                 = 5
>>
>>     if gallery:
>>         i                       = 0
>>         column                  = 1
>>         title                   = gallery
>>         caption                 = "Click on an image below to see it's
>> full sized version"
>>         path                    = "/home/coreyfro/public_html/gallery"
>>         dirList                 = os.listdir(path+"/"+gallery+"/ds")
>>         body                    = " " * 6 + "<table>\n" + " " * 8 +
>> "<tr>\n"
>>
>>
>>         while i < len(dirList):
>>             if column < columns:
>>                 column          = column + 1
>>             else:
>>                 column          = 1
>>                 body            = body + " " * 8 + "</tr>\n" + " "
>> * 8 +
>> "<tr>\n"
>>
>>             cell_tmpl           = psp.PSP(req,
>> filename='cell.tmpl', vars
>> = {'gallery': gallery, 'i': i, 'path': path, 'file':
>> dirList[i], 'caption': caption})
>>             body                = body + cell_tmpl
>>             i                   = i + 1
>>
>>
>>         body                    = body + " " * 8 + "</tr>\n" + " "
>> * 6 +
>> "</table>"
>>         report(req, title, caption, body)
>>
>>     else:
>>         index(req)
>>
>> def view(req, gallery, index):
>>     pass
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>


From coreyfro at coreyfro.com  Fri Feb 17 11:24:31 2006
From: coreyfro at coreyfro.com (Corey McGuire)
Date: Fri Feb 17 11:19:14 2006
Subject: [mod_python] PSP TypeError: cannot concatenate 'str' and 
	'instance' objects
In-Reply-To: <65D86267-0357-4616-BF9D-C6648D7663EE@dscpl.com.au>
References: <42290.63.204.219.6.1140169163.squirrel@63.204.219.4>
	<65D86267-0357-4616-BF9D-C6648D7663EE@dscpl.com.au>
Message-ID: <41943.63.204.219.6.1140193471.squirrel@63.204.219.4>


Ahhhh, ok.  I think I miss understood how PSP worked.  I was thinking one
had to process everything first, and THEN inject it in to a template.  I
didn't realize it could be assembled on the fly.

OK, thanks!

> The PSP class always writes it output direct to the request object
> and it
> is not available as a string without doing some trickery. Even if using
> publisher, you can do something like:
>
>      req.content_type            = 'text/html'
>      gallery_tmpl                = psp.PSP(req, filename='gallery.tmpl')
>      req.write("some HTML prologue")
>      gallery_tmpl.run(vars       = { 'title': title, 'caption':
> caption, 'body': body  })
>      req.write("some HTML epilogue")
>
> Ie., don't try and concatenate anything as strings, just write the
> bits out
> in sequence.
>
> If you really need to capture the PSP output in a string have a read of:
>
>    http://www.modpython.org/pipermail/mod_python/2005-June/018231.html
>
> Graham
>
> On 17/02/2006, at 8:39 PM, Corey McGuire wrote:
>
>> Hello all,
>>
>> I am learning python and PSP at the same time, which may be a bit of a
>> mistake, but I think I am doing well.
>>
>> I am working on moving my PHP image gallery:
>> http://www.coreyfro.com/~coreyfro/gallery.php?gallery=b-man-2003
>>
>> To python:
>> http://127.0.0.1/~coreyfro/gallery/gallery
>>
>> This is really just an exercise, but it's kinda my own version of
>> "Hello
>> World"
>>
>> I am getting hung up ok this block of code:
>>
>> cell_tmpl = psp.PSP(req, filename='cell.tmpl', vars = {'gallery':
>> gallery,
>> 'i': i, 'path': path, 'file': dirList[i], 'caption': caption})
>> body = body + cell_tmpl
>>
>> Now, the kicker is "body = body + cell_tmpl"... If I leave it like
>> that, I
>> get the following
>> http://127.0.0.1/~coreyfro/frozen/gallery1/gallery/?gallery=b-man-2003
>>
>> If I try converting it to a string (like "body = body + str
>> (cell_tmpl)")
>> something TOTALY wacky happens
>> http://127.0.0.1/~coreyfro/frozen/gallery2/gallery/?gallery=b-man-2003
>>
>> It's outputting the HTML I am trying to append to body and NOT
>> concatinating it with body.
>>
>> How do I put two and two together?
>>
>> Here's the code in full
>>
>> from mod_python import psp
>> import os
>>
>> def report(req, title, caption, body):
>>     req.content_type            = 'text/html'
>>     gallery_tmpl                = psp.PSP(req,
>> filename='gallery.tmpl')
>>     gallery_tmpl.run(vars       = { 'title': title, 'caption':
>> caption,
>> 'body': body  })
>>
>> def index(req):
>>     title                       = "Coreyfro's Handy, Dandy, Super-
>> duper,
>> Gallery Engine!"
>>     caption                     = "It's free, it's fast, it's
>> incomplete!"
>>     body                        = "You are probably here by
>> mistake<br>\
>>                                    Please feel free to be
>> confused<br>\
>>                                    I know I am"
>>     report(req, title, caption, body)
>>
>> def gallery(req, gallery='', columns=''):
>>     if columns:
>>         columns                 = int(columns)
>>     else:
>>         columns                 = 5
>>
>>     if gallery:
>>         i                       = 0
>>         column                  = 1
>>         title                   = gallery
>>         caption                 = "Click on an image below to see it's
>> full sized version"
>>         path                    = "/home/coreyfro/public_html/gallery"
>>         dirList                 = os.listdir(path+"/"+gallery+"/ds")
>>         body                    = " " * 6 + "<table>\n" + " " * 8 +
>> "<tr>\n"
>>
>>
>>         while i < len(dirList):
>>             if column < columns:
>>                 column          = column + 1
>>             else:
>>                 column          = 1
>>                 body            = body + " " * 8 + "</tr>\n" + " "
>> * 8 +
>> "<tr>\n"
>>
>>             cell_tmpl           = psp.PSP(req,
>> filename='cell.tmpl', vars
>> = {'gallery': gallery, 'i': i, 'path': path, 'file':
>> dirList[i], 'caption': caption})
>>             body                = body + cell_tmpl
>>             i                   = i + 1
>>
>>
>>         body                    = body + " " * 8 + "</tr>\n" + " "
>> * 6 +
>> "</table>"
>>         report(req, title, caption, body)
>>
>>     else:
>>         index(req)
>>
>> def view(req, gallery, index):
>>     pass
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>


From jpg at jgassociates.ca  Fri Feb 17 11:57:20 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Feb 17 11:56:19 2006
Subject: [mod_python] Questions about PSP vs other solutions
In-Reply-To: <000501c633c6$61897f60$f8dbebc9@luis>
References: <000501c633c6$61897f60$f8dbebc9@luis>
Message-ID: <43F60070.4020006@jgassociates.ca>

Luis M. Gonzalez wrote:
> Hi there,
> 
> I would highly appreciate if someone sheds some light over these 
> questions I have...
> I've been reading an old post from 2003, where Sterling Hughes, Rimon 
> Barr and others were discussing about
> the convenience, advantages and disadvantages of including PSP into 
> mod_python ("supporting modular mod_python extensions vs."folding" 
> mod_psp")
> There were many parts that seemed to contradict each point of view, but 
> I selected two paragraphs that best illustrate the issue:
> 
> 
> Sterling Hugues:
> "PSP is a very small, very fast alternative, it doesn't preclude you from
> using any of the listed solutions.  In fact you can use PSP in
> conjunction with any of the solutions listed, or you can even ignore its
> existence altogether and use something else, or code directly with
> req.write().  There is *zero* performance loss if you choose to use
> another option, like spyce."
> 
> Rimon Barr:
> "I saw that you were working on a C-based
> parser for psp, and I asked you whether you were interested in working
> on such a parser for the Spyce language. The rationale is that although
> the parser does not matter much for performance, because the compiled
> files are cached, it would be nice as an option for developers, since
> the current Spyce parser is implemented in Python and is relatively
> slow. I also, thinking that you work with the Apache Foundation, I
> offered to donate Spyce to the AF. Donating to the AF does not mean, in
> my mind, merging the Spyce and mod_python projects."
> 
> 
> So both seem to agree in that being PSP a c-based parser is a good 
> thing, because it is very fast.
> However, both of them consider also that it doesn't matter, because the 
> compiled files are cached (?)
> and there's *zero* performance lost when choosing another option.
> Hence, what's the advantage of using PSP?
> If using any other solution has zero performance lost, why bother in 
> writing a c-based parser?
> 
> Maybe I lost some important detail of the discussion, or my limited 
> english played against me, but isn't it contradictory?

It does seem contradictory, so I guess your english is just fine. :)

I haven't read the thread, but I think Sterling means that there is no 
performance penalty if the psp parser is included in mod_python but not 
actually used by the application developer.

On the other hand, Rimon seems concerned about the actual parser 
performance so I think the subject of the thread may have diverged at 
some point.

I don't agree that there is no performance penalty. You need to parse 
the file at least once when it is first encountered. Depending on your 
cache implementation, you may have one cache per intepreter, so for a 
prefork mpm you'll need to parse the file once for each apache child 
process. Also, a cache may have some sort of size limit, so less 
frequently used files may be removed from the cache and need to be 
parsed on the next encounter.

The impact of these factors will likely differ between websites and it's 
probably a mistake to make any sweeping generalizations. The only way to 
tell if the parser speed is important to you is to profile your website. 
For example, I would guess that the parser performance would be 
important on a website with a large number of pages which are not viewed 
frequently, such as 50,000 pages each visited once a day. On the other 
hand the cache performance will be much more significant if you have 10 
pages that are visited 5000 times in a day.

Jim
From tomw at bnl.gov  Fri Feb 17 12:27:20 2006
From: tomw at bnl.gov (Tomasz Wlodek)
Date: Fri Feb 17 12:27:30 2006
Subject: [mod_python] how to make fallback authentication
In-Reply-To: <1140131515.20254@dscpl.user.openhosting.com>
References: <1140131515.20254@dscpl.user.openhosting.com>
Message-ID: <Pine.GSO.4.58.0602171223260.24404@rcf2.rhic.bnl.gov>

On Thu, 16 Feb 2006, Graham Dumpleton wrote:

> Unfortunately, to my mind, what would be the proper way of doing this
> can't current be done in mod_python because it has some stuff missing
> and doesn't process handlers for the authentication phase correctly. See:
>
>   http://issues.apache.org/jira/browse/MODPYTHON-124
>   http://issues.apache.org/jira/browse/MODPYTHON-129
>
> One question while I think of a good suggestion, how are you setting
> AuthType, AuthName and Requires directives to ensure that the mod_python
> authenhandler is being run in the first place?
>
> Graham

in mod python configuration I put:

<Directory /var/www/my_directory/cgi>
    AddHandler mod_python .py
    PythonHandler myhandler
    PythonAuthenHandler myhandler
    PythonDebug on
    PythonPath "sys.path + ['/root/my_mod_python_handlers']"
    require valid-user
</Directory>

This forces the authentication handler to run.

If I add

AuthType Basic
AuthName "Restricted Area"

lines, if always triggers apache to ask for user id and pwd, which is not
what I want. I want apache to ask for user id and pwd only if user has no
valid certificate.

Tom

From amarrero at mitre.org  Fri Feb 17 12:58:47 2006
From: amarrero at mitre.org (Alexis Marrero)
Date: Fri Feb 17 13:01:29 2006
Subject: [mod_python] One Interpreter for All Requests?
Message-ID: <F7A25DA5-13A5-4178-88D6-6B3EEC39FA69@mitre.org>

All,

As I'm testing my application doing multiple requests that are CPU  
and IO intensive I'm noticing that only one request is handled at a  
time.

My mod_python configuration looks like this:

Pythonimport server core.mitre.org
<VirtualHost example.mitre.org:1973>
     Alias / "/Users/amarrero/djp/server/webapp/"
     PythonInterpreter core.mitre.org
     <Directory "/Users/amarrero/djp/server/webapp/">

       SetHandler python-program
       PythonHandler index
       PythonPath "sys.path + ['/Users/amarrero/djp/server/webapp/']"
       PythonDebug On



     </Directory>

There is only one handler for all requests made to http:// 
example.mitre.org:1973/

Is there a way of forcing that each request executes in a new  
interpreter? There are directories in this application all requests  
don't matter how they look / or /index.py or /foo.py or /bar.py goes  
to the same handler per directive,       PythonHandler index.

Any tricks?

/amn
From matthew.garman at gmail.com  Fri Feb 17 13:39:53 2006
From: matthew.garman at gmail.com (matthew.garman@gmail.com)
Date: Fri Feb 17 13:39:01 2006
Subject: [mod_python] setting apache variables from mod_python
In-Reply-To: <1140131009.14607@dscpl.user.openhosting.com>
References: <1140131009.14607@dscpl.user.openhosting.com>
Message-ID: <20060217183953.GA32501@sewage.sewage.fake>

On Thu, Feb 16, 2006 at 06:03:29PM -0500, Graham Dumpleton wrote:
> I am not sure by what mechanism you may be able to access them
> from PHP, but suggest two options.
> 
> 1. Set values in the req.notes table object.
> 2. Set values in req.subprocess_env table object.
> 
> The place to do them from in mod_python would be to specifying a
> fixup handler (not a content handler) and do it there. A content
> handler shouldn't be defined as that tends to disable execution of
> PHP stuff. Thus:

Awesome.  I haven't had a chance to investigate this thoroughly, but
following the example you provided (create a fixup handler), using
req.subprocess_env seems to "implicitly" set the variables I need.
I.e., I didn't do *anything* from PHP, and the variables are being
set.

So that looks like it does exactly what I need!

Thank you very much!

Much appreciated,
Matt

-- 
Matt Garman
email at: http://raw-sewage.net/index.php?file=email
From deron.meranda at gmail.com  Fri Feb 17 14:48:11 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Fri Feb 17 14:48:15 2006
Subject: [mod_python] One Interpreter for All Requests?
In-Reply-To: <F7A25DA5-13A5-4178-88D6-6B3EEC39FA69@mitre.org>
References: <F7A25DA5-13A5-4178-88D6-6B3EEC39FA69@mitre.org>
Message-ID: <5c06fa770602171148v4da9064eve6e7d5a9ad0576f7@mail.gmail.com>

On 2/17/06, Alexis Marrero <amarrero@mitre.org> wrote:
> As I'm testing my application doing multiple requests that are CPU
> and IO intensive I'm noticing that only one request is handled at a
> time.
>...
> Is there a way of forcing that each request executes in a new
> interpreter?

I think you are misunderstanding what an "interpreter" is.  What
you are really looking for, I think, is to adjust your Apache MPM
configuration.  See
  http://httpd.apache.org/docs/2.0/mpm.html

Apache is what drives the request processing, and it is what
assigns the requests to a particular process/thread.  So any sort
of concurrency of requests is up to Apache.  And all this happens
outside of mod_python.

The PythonInterpreter is really just a way to create different
"sandboxed" python run-time VM environments.  However those
interpreters still "run" within some thread or process.  Having
more or fewer interpreters (VM's) won't change the concurrency
of request processing.  It only helps to isolate your python handlers
from each other (it's not perfect 100% isolation though).

So, no, there's no way to have a pool of python interpreters which
get randomly assigned to handle requests; but, I don't think
that would be a very useful thing anyway.
--
Deron Meranda

From nogradi at gmail.com  Sat Feb 18 09:07:08 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sat Feb 18 09:07:16 2006
Subject: [mod_python] Mike's psp upload
Message-ID: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>

Mike Looijmans has posted not so long ago a potentially very useful
psp script to handle 'streamed' file uploads:
http://modpython.org/pipermail/mod_python/2006-February/020248.html

With the latest mod_python 3.2.7 installed it doesn't work because the
FileCounter class has no method 'read' which is apparently needed by
util.py (makes sense, one wants to be able to read the content of the
uploaded file). Is that example script really broken or am I missing
something?

From dan.eloff at gmail.com  Sat Feb 18 17:14:50 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Sat Feb 18 17:14:54 2006
Subject: [mod_python] Re: Chunked encoding
In-Reply-To: <43F31622.2050204@gmx.org>
References: <43F31412.8000008@gmx.org> <43F31622.2050204@gmx.org>
Message-ID: <4817b6fc0602181414y722275dbpe529c8d9ce05ee1e@mail.gmail.com>

I'm curious about this "chunked encoding" what does that mean? I output all
my pages in my handler as a single string, so I have a sort of interest in
understanding what the write method does. If I'm to take a wild guess at how
the below works, you set the content length so that mod_python realizes when
it recieves your data string that no more is coming and it doesn't need to
copy the string into a buffer, it can just keep a reference to it? And
somehow the act of buffering the data as opposed to writing it immediately
causes mod_python not to emply this "chunked encoding"?

It'd be great if someone explained this to me :)

Thanks,
-Dan

On 2/15/06, Lars Eriksen <downgrade@gmx.org> wrote:
>
> Yes, there is :-) RTFM, I guess ...
>
> from mod_python.util import *
> from mod_python import apache
>
> def handle(req):
>     data = 'No chunking involved.' * 1024
>     req.set_content_length(len(data))
>     req.write(data, 0)
>     req.flush()
>     return apache.OK
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060218/03799b02/attachment.html
From grahamd at dscpl.com.au  Sat Feb 18 19:09:03 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 18 19:09:17 2006
Subject: [mod_python] Re: Chunked encoding
In-Reply-To: <4817b6fc0602181414y722275dbpe529c8d9ce05ee1e@mail.gmail.com>
References: <43F31412.8000008@gmx.org> <43F31622.2050204@gmx.org>
	<4817b6fc0602181414y722275dbpe529c8d9ce05ee1e@mail.gmail.com>
Message-ID: <719D5BA6-86F3-4868-AAF4-F060E2056924@dscpl.com.au>


On 19/02/2006, at 9:14 AM, Dan Eloff wrote:

> I'm curious about this "chunked encoding" what does that mean? I  
> output all my pages in my handler as a single string, so I have a  
> sort of interest in understanding what the write method does. If  
> I'm to take a wild guess at how the below works, you set the  
> content length so that mod_python realizes when it recieves your  
> data string that no more is coming and it doesn't need to copy the  
> string into a buffer, it can just keep a reference to it? And  
> somehow the act of buffering the data as opposed to writing it  
> immediately causes mod_python not to emply this "chunked encoding"?
>
> It'd be great if someone explained this to me :)
>
> Thanks,
> -Dan
>
> On 2/15/06, Lars Eriksen <downgrade@gmx.org > wrote:Yes, there  
> is :-) RTFM, I guess ...
>
> from mod_python.util import *
> from mod_python import apache
>
> def handle(req):
>     data = 'No chunking involved.' * 1024
>     req.set_content_length(len(data))
>     req.write(data, 0)
>     req.flush()
>     return apache.OK

As far as I can tell, there is no difference between that and:

def handler(req):
     data = 'No chunking involved.' * 1024
     req.set_content_length(len(data))
     req.write(data)
     return apache.OK

When no second argument is supplied to req.write(), it automatically  
flushes.

In this particular case, since there is only one call to req.write(),  
it is also
probably equivalent to:

def handler(req):
     data = 'No chunking involved.' * 1024
     req.set_content_length(len(data))
     req.write(data,0)
     return apache.OK

That is, returning apache.OK is going to have the same effect of  
flushing the
buffered data if there is any.

FWIW, chunked encoding is only of relevance to HTTP/1.1 clients. You  
as the
provider of the handler does not really have to care about it as  
Apache will
worry about it and use it if the client is capable of handling HTTP/ 
1.1. That is,
mod_python doesn't do anything about chunked encoding either.

As to the connection between req.set_content_length() and how much data
you write, there isn't really any. Calling req.set_content_length()  
only has the
effect of setting the "Content-Length" response header. You could set  
the
content length to a small value and write more data that you say  
there will be
and mod_python/Apache will quite happily let you do it. A remote  
client on
the other handle may well probably discard any extra content if it  
honours the
content length header.

For most people, how many times you call req.write() and whether you use
buffering isn't going to matter one bit. Some may want to minimise  
the number
of calls to req.write() or use buffering for perceived performance  
reasons (right
or wrong).

One valid reason for not having req.write() flush data automatically  
though is
if you are using an output filter that wants to see the whole data in  
one go. An
example is the "CONTENT_LENGTH" filter. If you had configured your  
handler
output to go through this filter, you could just say:

def handler(req):
     data = 'No chunking involved.' * 1024
     req.write(data,0)
     req.write(data,0)
     ....
     return apache.OK

and the output filter would add the content length header for you  
automatically.
For this to work, you have to ensure that flush isn't called  
explicitly or implicitly.

What are the underlying concerns that make you think you need to  
understand
this better?

Graham

From grahamd at dscpl.com.au  Sat Feb 18 21:54:55 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 18 21:55:17 2006
Subject: [mod_python] req.user and SSL?
In-Reply-To: <5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
References: <5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
Message-ID: <531A44FA-474B-4815-B8E7-4092DB323DF2@dscpl.com.au>


On 18/02/2006, at 1:05 AM, Bud P. Bruegger wrote:

> Hello everyone,
>
> I have a problem reading req.user when using mod-SSL with the  
> +FakeBasicAuth option and setting SSLUser:  req.user always seems  
> to be undefined.  Also, neither Authen nor Authz handers run.   Any  
> help would be highly appreciated

First off, I presume the client certificate does have a user name  
specified in it?

Second is that mod_ssl only populates req.user from a MIDDLE hook of the
access handler. This is the same as when mod_python access handlers are
run. If the ordering of initialisation of mod_python/mod_ssl is such  
that a
mod_python access handler is run before the internal access handler for
mod_ssl, then req.user will not have been set yet and thus will not  
be available
in the mod_python access handler.

Finally, the authen handler and authz handler are only run if the  
Require
directive has been used, which your configuration doesn't include.  
Thus you
need something like:

   Require valid-user

BTW, your attempt to get SSL variables form req.subprocess_env isn't  
going
to work as they are only put there by mod_ssl by a REALLY_LAST hook  
of the
fixup handler, which is after access handler, authen handler and  
authz handler.
Will also be after mod_python fixup handler as it runs as MIDDLE hook.

To get information about mod_ssl in earlier phases, you will need  
mod_ssl
patches as described in:

    https://issues.apache.org/jira/browse/MODPYTHON-94

These changes have now been pushed into mod_python subversion main
trunk if you are prepared to give developmental code a go.

Graham

> Here some details of what I try:
>
> #-- Apache 2 conf ------------------------------
> NameVirtualHost *:443
> <VirtualHost *:443>
>         LogLevel debug
>         SSLEngine on
>         SSLCertificateFile /etc/apache2/ssl/apache.pem
>         SSLCACertificateFile /etc/apache2/ssl/caCerts.pem
>         SSLVerifyDepth 3
>         SSLVerifyClient require
>         #SSLUserName SSL_CLIENT_S_DN_X509
>         DocumentRoot /var/www/
>
>         <Directory /var/www/sc>
>             SSLRequireSSL
>             SSLOptions +StdEnvVars +FakeBasicAuth
>             AuthType Basic
>             SetHandler mod_python
>             PythonHandler test
>             PythonAccessHandler test
>             PythonAuthenHandler test
>             PythonAuthzHandler test
>             PythonFixupHandler test
>             PythonDebug On
>         </Directory>
> </VirtualHost>
>
> #--- test.py ----------------------------------------------------
> from mod_python import apache
>
> def genHandler(req, handlerName):
>     req.add_common_vars()
>     req.get_basic_auth_pw()
>     user = req.user
>     dn = req.subprocess_env.get('SSL_CLIENT_S_DN',  
> req.subprocess_env.keys())
>     userLabel = 'XXX-%s-user' % handlerName
>     dnLabel = 'XXX-%s-dn' % handlerName
>     req.subprocess_env[userLabel]=str(user)
>     req.subprocess_env[dnLabel]=str(dn)
>     return apache.OK
>
>
> def accesshandler(req):
>     return genHandler(req, 'access')
>
> def authenhandler(req):
>     return genHandler(req, 'authen')
>
> def authzhandler(req):
>     return genHandler(req, 'authz')
>
> def fixuphandler(req):
>     return genHandler(req, 'fixup')
> #------------------------------------------------------
>
> many thanks in advance
>
> -b
>
>
>
> ---------------------------------------------------------------------- 
> ---------------------------
> Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577  
> (voice),  -21139 (fax)
> Servizio Elaborazione Dati                    e-mail:   
> bud@comune.grosseto.it
> Comune di Grosseto                            jabber:  bud@jabber.no
> Via Ginori, 43                                      http:// 
> www.comune.grosseto.it/cie/
> 58100 Grosseto (Tuscany, Italy)           http:// 
> www.comune.grosseto.it/interopEID/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grahamd at dscpl.com.au  Sun Feb 19 00:00:58 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 19 00:01:20 2006
Subject: [mod_python] how to make fallback authentication
In-Reply-To: <Pine.GSO.4.58.0602171223260.24404@rcf2.rhic.bnl.gov>
References: <1140131515.20254@dscpl.user.openhosting.com>
	<Pine.GSO.4.58.0602171223260.24404@rcf2.rhic.bnl.gov>
Message-ID: <F125BAFE-EE63-476B-A490-BF0A1CB43B9A@dscpl.com.au>


On 18/02/2006, at 4:27 AM, Tomasz Wlodek wrote:

> On Thu, 16 Feb 2006, Graham Dumpleton wrote:
>
>> Unfortunately, to my mind, what would be the proper way of doing this
>> can't current be done in mod_python because it has some stuff missing
>> and doesn't process handlers for the authentication phase  
>> correctly. See:
>>
>>   http://issues.apache.org/jira/browse/MODPYTHON-124
>>   http://issues.apache.org/jira/browse/MODPYTHON-129
>>
>> One question while I think of a good suggestion, how are you setting
>> AuthType, AuthName and Requires directives to ensure that the  
>> mod_python
>> authenhandler is being run in the first place?
>>
>> Graham
>
> in mod python configuration I put:
>
> <Directory /var/www/my_directory/cgi>
>     AddHandler mod_python .py
>     PythonHandler myhandler
>     PythonAuthenHandler myhandler
>     PythonDebug on
>     PythonPath "sys.path + ['/root/my_mod_python_handlers']"
>     require valid-user
> </Directory>
>
> This forces the authentication handler to run.
>
> If I add
>
> AuthType Basic
> AuthName "Restricted Area"
>
> lines, if always triggers apache to ask for user id and pwd, which  
> is not
> what I want. I want apache to ask for user id and pwd only if user  
> has no
> valid certificate.

Yes, that is what one would expect. I don't recollect saying that  
AuthType should
be set to "Basic". Use of "Basic" for AuthType in the JIRA issue is  
there to illustrate
something else. You also though don't have to use a redirect to pass  
the request
through a basic authentication handler as your original code  
suggested you
want to do though. You will though as suggested by someone else need to
implement the handshake for basic authentication yourself, as you  
don't have
access to the internal Apache API functions for dealing with basic  
authentication
and even if you did, they in part expect AuthType to be set to  
"Basic" which will
not be the case. The code I posted was an implementation of the  
handshake
for basic authentication to get around that. All you need to do is  
integrate that
in the place where you were intending to do the redirect,

Graham
From dan.eloff at gmail.com  Sun Feb 19 02:36:30 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Sun Feb 19 02:36:35 2006
Subject: [mod_python] Re: Chunked encoding
In-Reply-To: <719D5BA6-86F3-4868-AAF4-F060E2056924@dscpl.com.au>
References: <43F31412.8000008@gmx.org> <43F31622.2050204@gmx.org>
	<4817b6fc0602181414y722275dbpe529c8d9ce05ee1e@mail.gmail.com>
	<719D5BA6-86F3-4868-AAF4-F060E2056924@dscpl.com.au>
Message-ID: <4817b6fc0602182336y6603ae03k87f3312135230eb7@mail.gmail.com>

Well mostly it's just my C++ days coming back to haunt me, can't stand the
thought of buffering large amounts of data for no reason at all. But it's
just a minor concern, and for now performance is a non-issue, I'll cross
that bridge when I get there. I was just wondering if there was a easy way
to write data from my string to the browser, but that may not even be
possible for all I know.

Thanks Graham.
-Dan

On 2/18/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
>
> On 19/02/2006, at 9:14 AM, Dan Eloff wrote:
>
> > I'm curious about this "chunked encoding" what does that mean? I
> > output all my pages in my handler as a single string, so I have a
> > sort of interest in understanding what the write method does. If
> > I'm to take a wild guess at how the below works, you set the
> > content length so that mod_python realizes when it recieves your
> > data string that no more is coming and it doesn't need to copy the
> > string into a buffer, it can just keep a reference to it? And
> > somehow the act of buffering the data as opposed to writing it
> > immediately causes mod_python not to emply this "chunked encoding"?
> >
> > It'd be great if someone explained this to me :)
> >
> > Thanks,
> > -Dan
> >
> > On 2/15/06, Lars Eriksen <downgrade@gmx.org > wrote:Yes, there
> > is :-) RTFM, I guess ...
> >
> > from mod_python.util import *
> > from mod_python import apache
> >
> > def handle(req):
> >     data = 'No chunking involved.' * 1024
> >     req.set_content_length(len(data))
> >     req.write(data, 0)
> >     req.flush()
> >     return apache.OK
>
> As far as I can tell, there is no difference between that and:
>
> def handler(req):
>      data = 'No chunking involved.' * 1024
>      req.set_content_length(len(data))
>      req.write(data)
>      return apache.OK
>
> When no second argument is supplied to req.write(), it automatically
> flushes.
>
> In this particular case, since there is only one call to req.write(),
> it is also
> probably equivalent to:
>
> def handler(req):
>      data = 'No chunking involved.' * 1024
>      req.set_content_length(len(data))
>      req.write(data,0)
>      return apache.OK
>
> That is, returning apache.OK is going to have the same effect of
> flushing the
> buffered data if there is any.
>
> FWIW, chunked encoding is only of relevance to HTTP/1.1 clients. You
> as the
> provider of the handler does not really have to care about it as
> Apache will
> worry about it and use it if the client is capable of handling HTTP/
> 1.1. That is,
> mod_python doesn't do anything about chunked encoding either.
>
> As to the connection between req.set_content_length() and how much data
> you write, there isn't really any. Calling req.set_content_length()
> only has the
> effect of setting the "Content-Length" response header. You could set
> the
> content length to a small value and write more data that you say
> there will be
> and mod_python/Apache will quite happily let you do it. A remote
> client on
> the other handle may well probably discard any extra content if it
> honours the
> content length header.
>
> For most people, how many times you call req.write() and whether you use
> buffering isn't going to matter one bit. Some may want to minimise
> the number
> of calls to req.write() or use buffering for perceived performance
> reasons (right
> or wrong).
>
> One valid reason for not having req.write() flush data automatically
> though is
> if you are using an output filter that wants to see the whole data in
> one go. An
> example is the "CONTENT_LENGTH" filter. If you had configured your
> handler
> output to go through this filter, you could just say:
>
> def handler(req):
>      data = 'No chunking involved.' * 1024
>      req.write(data,0)
>      req.write(data,0)
>      ....
>      return apache.OK
>
> and the output filter would add the content length header for you
> automatically.
> For this to work, you have to ensure that flush isn't called
> explicitly or implicitly.
>
> What are the underlying concerns that make you think you need to
> understand
> this better?
>
> Graham
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060218/d08563c3/attachment-0001.html
From grahamd at dscpl.com.au  Sun Feb 19 03:41:56 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 19 03:42:07 2006
Subject: [mod_python] Re: Chunked encoding
In-Reply-To: <4817b6fc0602182336y6603ae03k87f3312135230eb7@mail.gmail.com>
References: <43F31412.8000008@gmx.org> <43F31622.2050204@gmx.org>
	<4817b6fc0602181414y722275dbpe529c8d9ce05ee1e@mail.gmail.com>
	<719D5BA6-86F3-4868-AAF4-F060E2056924@dscpl.com.au>
	<4817b6fc0602182336y6603ae03k87f3312135230eb7@mail.gmail.com>
Message-ID: <4FADCE90-0F98-49B1-BA98-C51151C0F653@dscpl.com.au>


On 19/02/2006, at 6:36 PM, Dan Eloff wrote:

> Well mostly it's just my C++ days coming back to haunt me, can't  
> stand the thought of buffering large amounts of data for no reason  
> at all. But it's just a minor concern, and for now performance is a  
> non-issue, I'll cross that bridge when I get there. I was just  
> wondering if there was a easy way to write data from my string to  
> the browser, but that may not even be possible for all I know.

Well, req.write() is the right thing to use, but there are all sorts of
buffering and potential filtering going on. It doesn't necessarily get
written direct to the socket.

If you want some scary reading on what Apache calls the bucket
brigade and filtering in general, have a look at:

   http://www.projectcomputing.com/resources/apacheFilterFAQ/

Graham

> Thanks Graham.
> -Dan
>
> On 2/18/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> On 19/02/2006, at 9:14 AM, Dan Eloff wrote:
>
> > I'm curious about this "chunked encoding" what does that mean? I
> > output all my pages in my handler as a single string, so I have a
> > sort of interest in understanding what the write method does. If
> > I'm to take a wild guess at how the below works, you set the
> > content length so that mod_python realizes when it recieves your
> > data string that no more is coming and it doesn't need to copy the
> > string into a buffer, it can just keep a reference to it? And
> > somehow the act of buffering the data as opposed to writing it
> > immediately causes mod_python not to emply this "chunked encoding"?
> >
> > It'd be great if someone explained this to me :)
> >
> > Thanks,
> > -Dan
> >
> > On 2/15/06, Lars Eriksen <downgrade@gmx.org > wrote:Yes, there
> > is :-) RTFM, I guess ...
> >
> > from mod_python.util import *
> > from mod_python import apache
> >
> > def handle(req):
> >     data = 'No chunking involved.' * 1024
> >     req.set_content_length (len(data))
> >     req.write(data, 0)
> >     req.flush()
> >     return apache.OK
>
> As far as I can tell, there is no difference between that and:
>
> def handler(req):
>      data = 'No chunking involved.' * 1024
>      req.set_content_length(len(data))
>      req.write(data)
>      return apache.OK
>
> When no second argument is supplied to req.write(), it automatically
> flushes.
>
> In this particular case, since there is only one call to req.write(),
> it is also
> probably equivalent to:
>
> def handler(req):
>      data = 'No chunking involved.' * 1024
>      req.set_content_length(len(data))
>      req.write(data,0)
>      return apache.OK
>
> That is, returning apache.OK is going to have the same effect of
> flushing the
> buffered data if there is any.
>
> FWIW, chunked encoding is only of relevance to HTTP/1.1 clients. You
> as the
> provider of the handler does not really have to care about it as
> Apache will
> worry about it and use it if the client is capable of handling HTTP/
> 1.1. That is,
> mod_python doesn't do anything about chunked encoding either.
>
> As to the connection between req.set_content_length () and how much  
> data
> you write, there isn't really any. Calling req.set_content_length()
> only has the
> effect of setting the "Content-Length" response header. You could set
> the
> content length to a small value and write more data that you say
> there will be
> and mod_python/Apache will quite happily let you do it. A remote
> client on
> the other handle may well probably discard any extra content if it
> honours the
> content length header.
>
> For most people, how many times you call req.write() and whether  
> you use
> buffering isn't going to matter one bit. Some may want to minimise
> the number
> of calls to req.write() or use buffering for perceived performance
> reasons (right
> or wrong).
>
> One valid reason for not having req.write() flush data automatically
> though is
> if you are using an output filter that wants to see the whole data in
> one go. An
> example is the "CONTENT_LENGTH" filter. If you had configured your
> handler
> output to go through this filter, you could just say:
>
> def handler(req):
>      data = 'No chunking involved.' * 1024
>      req.write(data,0)
>      req.write(data,0)
>      ....
>      return apache.OK
>
> and the output filter would add the content length header for you
> automatically.
> For this to work, you have to ensure that flush isn't called
> explicitly or implicitly.
>
> What are the underlying concerns that make you think you need to
> understand
> this better?
>
> Graham
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From jpg at jgassociates.ca  Sun Feb 19 11:43:00 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Sun Feb 19 11:43:02 2006
Subject: [mod_python] Re: Chunked encoding
In-Reply-To: <4817b6fc0602182336y6603ae03k87f3312135230eb7@mail.gmail.com>
References: <43F31412.8000008@gmx.org>
	<43F31622.2050204@gmx.org>	<4817b6fc0602181414y722275dbpe529c8d9ce05ee1e@mail.gmail.com>	<719D5BA6-86F3-4868-AAF4-F060E2056924@dscpl.com.au>
	<4817b6fc0602182336y6603ae03k87f3312135230eb7@mail.gmail.com>
Message-ID: <43F8A014.2020505@jgassociates.ca>

req.write() is a pretty simple wrapper around the apache function 
ap_rwrite. Mod_python does not do any buffering itself. If you are 
curious take a look the req_write function in the mod_python source 
src/requestobject.c


For more info on chunked encoding see check RFC2616:

3.6.1 Chunked Transfer Coding

The chunked encoding modifies the body of a message in order to transfer
it as a series of chunks, each with its own size indicator, followed by
an OPTIONAL trailer containing entity-header fields. This allows
dynamically produced content to be transferred along with the
information necessary for the recipient to verify that it has received
the full message.

Jim

Dan Eloff wrote:
> Well mostly it's just my C++ days coming back to haunt me, can't stand the
> thought of buffering large amounts of data for no reason at all. But it's
> just a minor concern, and for now performance is a non-issue, I'll cross
> that bridge when I get there. I was just wondering if there was a easy way
> to write data from my string to the browser, but that may not even be
> possible for all I know.
> 
> Thanks Graham.
> -Dan
> 
> On 2/18/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> 
>>
>>On 19/02/2006, at 9:14 AM, Dan Eloff wrote:
>>
>>
>>>I'm curious about this "chunked encoding" what does that mean? I
>>>output all my pages in my handler as a single string, so I have a
>>>sort of interest in understanding what the write method does. If
>>>I'm to take a wild guess at how the below works, you set the
>>>content length so that mod_python realizes when it recieves your
>>>data string that no more is coming and it doesn't need to copy the
>>>string into a buffer, it can just keep a reference to it? And
>>>somehow the act of buffering the data as opposed to writing it
>>>immediately causes mod_python not to emply this "chunked encoding"?
>>>
>>>It'd be great if someone explained this to me :)
>>>
>>>Thanks,
>>>-Dan
>>>
>>>On 2/15/06, Lars Eriksen <downgrade@gmx.org > wrote:Yes, there
>>>is :-) RTFM, I guess ...
>>>
>>>from mod_python.util import *
>>>from mod_python import apache
>>>
>>>def handle(req):
>>>    data = 'No chunking involved.' * 1024
>>>    req.set_content_length(len(data))
>>>    req.write(data, 0)
>>>    req.flush()
>>>    return apache.OK
>>
>>As far as I can tell, there is no difference between that and:
>>
>>def handler(req):
>>     data = 'No chunking involved.' * 1024
>>     req.set_content_length(len(data))
>>     req.write(data)
>>     return apache.OK
>>
>>When no second argument is supplied to req.write(), it automatically
>>flushes.
>>
>>In this particular case, since there is only one call to req.write(),
>>it is also
>>probably equivalent to:
>>
>>def handler(req):
>>     data = 'No chunking involved.' * 1024
>>     req.set_content_length(len(data))
>>     req.write(data,0)
>>     return apache.OK
>>
>>That is, returning apache.OK is going to have the same effect of
>>flushing the
>>buffered data if there is any.
>>
>>FWIW, chunked encoding is only of relevance to HTTP/1.1 clients. You
>>as the
>>provider of the handler does not really have to care about it as
>>Apache will
>>worry about it and use it if the client is capable of handling HTTP/
>>1.1. That is,
>>mod_python doesn't do anything about chunked encoding either.
>>
>>As to the connection between req.set_content_length() and how much data
>>you write, there isn't really any. Calling req.set_content_length()
>>only has the
>>effect of setting the "Content-Length" response header. You could set
>>the
>>content length to a small value and write more data that you say
>>there will be
>>and mod_python/Apache will quite happily let you do it. A remote
>>client on
>>the other handle may well probably discard any extra content if it
>>honours the
>>content length header.
>>
>>For most people, how many times you call req.write() and whether you use
>>buffering isn't going to matter one bit. Some may want to minimise
>>the number
>>of calls to req.write() or use buffering for perceived performance
>>reasons (right
>>or wrong).
>>
>>One valid reason for not having req.write() flush data automatically
>>though is
>>if you are using an output filter that wants to see the whole data in
>>one go. An
>>example is the "CONTENT_LENGTH" filter. If you had configured your
>>handler
>>output to go through this filter, you could just say:
>>
>>def handler(req):
>>     data = 'No chunking involved.' * 1024
>>     req.write(data,0)
>>     req.write(data,0)
>>     ....
>>     return apache.OK
>>
>>and the output filter would add the content length header for you
>>automatically.
>>For this to work, you have to ensure that flush isn't called
>>explicitly or implicitly.
>>
>>What are the underlying concerns that make you think you need to
>>understand
>>this better?
>>
>>Graham
>>
>>
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From nogradi at gmail.com  Sun Feb 19 12:13:24 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sun Feb 19 12:13:30 2006
Subject: [mod_python] post request and the minimalistic handler
Message-ID: <5f56302b0602190913i212947e1j3562db6cda26837f@mail.gmail.com>

I try to figure out exactly how an actual request gets converted into
an mp_request object, especially if its content-type is
multpart/form-data containing an uploaded file.

As a first step (with the zeroth step being reading the source of
publisher.py and util.py) I wanted to see what happens if the
minimalistic handler mentioned in the docs receives a POST requests
sent from a file upload form such as

<html><body>
<form enctype="multipart/form-data" method="post"
action="http://server/testhandler/x">
<input type="file" name="upload_this">
<input type="submit" name="go" value="Click this">
</form>
</body></html>

and apache is given the following:

<Directory /var/www/html/testhandler>
    SetHandler python-program
    PythonHandler mod_python.myhandler
    LimitRequestBody 0
</Directory>

and the request handler myhandler.py is:

from mod_python import apache

def handler( req ):
     req.content_type = "text/html"
     req.write( "hello" )
     return apache.OK

I would assume that no matter what kind of request comes in to the
hierarchy under /testhandler the response from the server should be
'hello' under all circumstances. With GET requests everything is okay,
the response is

HTTP/1.1 200 OK
Date: Sun, 19 Feb 2006 17:11:54 GMT
Server: Apache/2.0.53 (Fedora)
Connection: close
Transfer-Encoding: chunked
Content-Type: text/html; charset=UTF-8

5
hello
0

which gets displayed nicely by Firefox as 'hello'.

The trouble starts when POST request are coming in for example through
the html form above. After sending the form Firefox says 'The document
contains no data' in a warning window (actually it displays 'hello'
once or twice, but 99% of the time it just shows the warning). However
after checking the log files of apache it turns out that everything
went okay with the request, a 200 code was sent and the length of the
response is also correctly shown to be 5. So it seems that from the
point of view of the server everything went fine, but somehow Firefox
never gets (or it thinks it doesn't get) the 200 code and the response
containing 'hello'.

In order to see if it was really a Firefox issue I put together the
POST request by hand and sent it to the server with netcat and
everything went as expected, the output was the same as above.

So it seems it is a Firefox issue, but I'm a bit surprised that such a
simple example would not work with Firefox. Am I expecting something
that I shouldn't?

From deron.meranda at gmail.com  Sun Feb 19 12:30:38 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Sun Feb 19 12:30:43 2006
Subject: [mod_python] post request and the minimalistic handler
In-Reply-To: <5f56302b0602190913i212947e1j3562db6cda26837f@mail.gmail.com>
References: <5f56302b0602190913i212947e1j3562db6cda26837f@mail.gmail.com>
Message-ID: <5c06fa770602190930o5963a2bdua33d610f8bf95dbd@mail.gmail.com>

> def handler( req ):
>      req.content_type = "text/html"
>      req.write( "hello" )
>      return apache.OK

Try using text/plain.
--
Deron Meranda

From nogradi at gmail.com  Sun Feb 19 12:34:20 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Sun Feb 19 12:34:23 2006
Subject: [mod_python] Re: post request and the minimalistic handler
In-Reply-To: <5c06fa770602190930o5963a2bdua33d610f8bf95dbd@mail.gmail.com>
References: <5f56302b0602190913i212947e1j3562db6cda26837f@mail.gmail.com>
	<5c06fa770602190930o5963a2bdua33d610f8bf95dbd@mail.gmail.com>
Message-ID: <5f56302b0602190934m465b209cjc88f6c6c162fd67d@mail.gmail.com>

> > def handler( req ):
> >      req.content_type = "text/html"
> >      req.write( "hello" )
> >      return apache.OK
>
> Try using text/plain.
> --
> Deron Meranda
>

Hi, I tried and that makes absolutely no difference, which I think is
the correct behaviour. As long as the content is text it shouldn't
matter for Firefox (or any other client) if it was plain text or html.

From dan.eloff at gmail.com  Sun Feb 19 13:42:54 2006
From: dan.eloff at gmail.com (Dan Eloff)
Date: Sun Feb 19 13:42:58 2006
Subject: [mod_python] Apache crashing
Message-ID: <4817b6fc0602191042q54688cf5nb058f71b6da1bcef@mail.gmail.com>

I've been debugging a major overhaul to my handler, and this has required
constant restarting of apache.

That's fine, I set up a hot key to do that. The only problem is it crashes
every time it shuts down (I explained the issue in an earlier message)
Graham said that it probably has something to do with calling PyFinalize()
in an bad place (may not be his exact words...)

Has this been resolved with the latest mod_python? If not how can I help fix
it? I just can't stand sitting through anymore of these crashes, I've got to
do something.

Thanks,
-Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060219/091a7bfa/attachment.html
From grahamd at dscpl.com.au  Sun Feb 19 14:45:18 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 19 14:45:31 2006
Subject: [mod_python] Apache crashing
In-Reply-To: <4817b6fc0602191042q54688cf5nb058f71b6da1bcef@mail.gmail.com>
References: <4817b6fc0602191042q54688cf5nb058f71b6da1bcef@mail.gmail.com>
Message-ID: <533303B1-84C4-4E54-AD50-B85AAEEA336A@dscpl.com.au>

Suggested change is described in JIRA issue.

   http://issues.apache.org/jira/browse/MODPYTHON-109

Quoting the page:

To avoid the problem, the only choice seems to be avoid calling  
Py_Finalize() from the signal handler. The simplistic way of doing  
this seems to be to add:

      if (child_init_pool)
          return APR_SUCCESS;

at the start of python_finalize(). This will mean that Py_Finalize()  
is never called in child processes.

Graham

On 20/02/2006, at 5:42 AM, Dan Eloff wrote:

> I've been debugging a major overhaul to my handler, and this has  
> required constant restarting of apache.
>
> That's fine, I set up a hot key to do that. The only problem is it  
> crashes every time it shuts down (I explained the issue in an  
> earlier message) Graham said that it probably has something to do  
> with calling PyFinalize() in an bad place (may not be his exact  
> words...)
>
> Has this been resolved with the latest mod_python? If not how can I  
> help fix it? I just can't stand sitting through anymore of these  
> crashes, I've got to do something.
>
> Thanks,
> -Dan
>
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From marcdm at phronein.com  Mon Feb 20 00:37:18 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Mon Feb 20 00:37:26 2006
Subject: [mod_python] High Traffic Round 2
Message-ID: <1140413838.12776.18.camel@localhost.localdomain>

Here we go again with me and my high traffic site that I'm attempting to
deploy using mod_python.

After a VERY stressful week, with a site that goes down every 2 - 5 hrs,
I decided to move away from mod_python.publisher and Sessions totally.

I wrote my own handler that decides which module/page to load based on
the 1st part of the URL. 

After deciding, it loads the module using __import__(module_name)
and executes a function named _dispatch which all of my modules have.

However, it is VERY VERY SLOW. It works fine on my local server but goes
at snail's pace on the production server. 

My home server is an Athlon 1Ghz w/256MB RAM and the production box has
a celeron 2.6 with 512MB RAM.

I'm using memcached to store generated pages, and the cache is managed
by the handler. The memcached client I'm using is the same one python
one linked from the memcached homepage. This means that if a page has
been cached, the module won't even be imported before the output is
grabbed from cache.

So basically, I've designed this thing the best way I know how. I can't
think of any way to make it any more efficient but it still doesn't work
as expected.

I'm really f**king tired right now. and my head hurts.

Marc DM.

PS. Where's the mod_python irc channel? 


From nlv11281 at natlab.research.philips.com  Mon Feb 20 01:37:03 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Mon Feb 20 01:37:12 2006
Subject: [mod_python] Mike's psp upload
In-Reply-To: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>
References: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>
Message-ID: <43F9638F.4060509@natlab.research.philips.com>

Hmm. I tested and indeed, the program does not work any more.

The problem is NOT that FileCounter does not supply a read() method though. There's no reason for 
any object to 'read' the file, it's just writing it.

The problem is that mod_python seems to have forgotten somewhere that this is a file upload and not 
a simple name=value pair. You would not want to upload a 1GB file with this - it will eat 1GB of RAM 
for that. Looks like an old bug has returned to bite us.

Mike Looijmans
Philips Natlab / Topic Automation


Daniel Nogradi wrote:
> Mike Looijmans has posted not so long ago a potentially very useful
> psp script to handle 'streamed' file uploads:
> http://modpython.org/pipermail/mod_python/2006-February/020248.html
> 
> With the latest mod_python 3.2.7 installed it doesn't work because the
> FileCounter class has no method 'read' which is apparently needed by
> util.py (makes sense, one wants to be able to read the content of the
> uploaded file). Is that example script really broken or am I missing
> something?


From nlv11281 at natlab.research.philips.com  Mon Feb 20 01:55:19 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Mon Feb 20 01:55:22 2006
Subject: [mod_python] Mike's psp upload
In-Reply-To: <43F9638F.4060509@natlab.research.philips.com>
References: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>
	<43F9638F.4060509@natlab.research.philips.com>
Message-ID: <43F967D7.2000908@natlab.research.philips.com>

I've looked into it further and the problem is that the FileCounter is not a FileType class. The 
current implementation only works for classes that inherit from FileType. Which is slightly more 
useful than without the callback, but not very Pythonic (even broken, I think).

I'll take this issue to the developer list.

(Oh, and remove the reference to 'fmt.py' which I forgot to strip out)

Mike Looijmans
Philips Natlab / Topic Automation


Mike Looijmans wrote:
> Hmm. I tested and indeed, the program does not work any more.
> 
> The problem is NOT that FileCounter does not supply a read() method 
> though. There's no reason for any object to 'read' the file, it's just 
> writing it.
> 
> The problem is that mod_python seems to have forgotten somewhere that 
> this is a file upload and not a simple name=value pair. You would not 
> want to upload a 1GB file with this - it will eat 1GB of RAM for that. 
> Looks like an old bug has returned to bite us.
> 
> Mike Looijmans
> Philips Natlab / Topic Automation
> 
> 
> Daniel Nogradi wrote:
> 
>> Mike Looijmans has posted not so long ago a potentially very useful
>> psp script to handle 'streamed' file uploads:
>> http://modpython.org/pipermail/mod_python/2006-February/020248.html
>>
>> With the latest mod_python 3.2.7 installed it doesn't work because the
>> FileCounter class has no method 'read' which is apparently needed by
>> util.py (makes sense, one wants to be able to read the content of the
>> uploaded file). Is that example script really broken or am I missing
>> something?
> 
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From bud at comune.grosseto.it  Mon Feb 20 04:46:21 2006
From: bud at comune.grosseto.it (Bud P. Bruegger)
Date: Mon Feb 20 04:31:36 2006
Subject: [mod_python] req.user and SSL?
In-Reply-To: <531A44FA-474B-4815-B8E7-4092DB323DF2@dscpl.com.au>
References: <5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
	<5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
Message-ID: <5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>

At 13.54 19/02/2006 +1100, Graham Dumpleton wrote:

>On 18/02/2006, at 1:05 AM, Bud P. Bruegger wrote:
>
>>Hello everyone,
>>
>>I have a problem reading req.user when using mod-SSL with the
>>+FakeBasicAuth option and setting SSLUser:  req.user always seems
>>to be undefined.  Also, neither Authen nor Authz handers run.   Any
>>help would be highly appreciated
>
>First off, I presume the client certificate does have a user name
>specified in it?

I understood that the mod-ssl directive
>SSLUserName SSL_CLIENT_S_DN_X509
tells it to set the subject DN as req.user.  Did I understand this 
incorrectly?  This DN is a string; would there be any requirements for 
accepting a string as user name (e.g., illegal chars)?

>Second is that mod_ssl only populates req.user from a MIDDLE hook of the
>access handler.

Ok, so possibly I don't see it in the access hander, but then I should see 
it in the Fixup stage, shouldn't I?

>This is the same as when mod_python access handlers are
>run. If the ordering of initialisation of mod_python/mod_ssl is such
>that a
>mod_python access handler is run before the internal access handler for
>mod_ssl, then req.user will not have been set yet and thus will not
>be available
>in the mod_python access handler.
>
>Finally, the authen handler and authz handler are only run if the
>Require
>directive has been used, which your configuration doesn't include.
>Thus you
>need something like:
>
>   Require valid-user

OK!  thanks for this!!!

>BTW, your attempt to get SSL variables form req.subprocess_env isn't
>going
>to work as they are only put there by mod_ssl by a REALLY_LAST hook
>of the
>fixup handler, which is after access handler, authen handler and
>authz handler.
>Will also be after mod_python fixup handler as it runs as MIDDLE hook.

Ok, I understand this.

>To get information about mod_ssl in earlier phases, you will need
>mod_ssl
>patches as described in:
>
>    https://issues.apache.org/jira/browse/MODPYTHON-94
>
>These changes have now been pushed into mod_python subversion main
>trunk if you are prepared to give developmental code a go.

This is actually the clean solution to my problem that I'm very happy has 
been integrated!

I was thinking of trying your external module with similar functionality 
later today--thinking that maybe the trunk version of mod-python may not be 
stable.  Would you recommend to take the trunk instead?

many thanks for your help!

-b


>Graham
>
>>Here some details of what I try:
>>
>>#-- Apache 2 conf ------------------------------
>>NameVirtualHost *:443
>><VirtualHost *:443>
>>         LogLevel debug
>>         SSLEngine on
>>         SSLCertificateFile /etc/apache2/ssl/apache.pem
>>         SSLCACertificateFile /etc/apache2/ssl/caCerts.pem
>>         SSLVerifyDepth 3
>>         SSLVerifyClient require
>>         #SSLUserName SSL_CLIENT_S_DN_X509
>>         DocumentRoot /var/www/
>>
>>         <Directory /var/www/sc>
>>             SSLRequireSSL
>>             SSLOptions +StdEnvVars +FakeBasicAuth
>>             AuthType Basic
>>             SetHandler mod_python
>>             PythonHandler test
>>             PythonAccessHandler test
>>             PythonAuthenHandler test
>>             PythonAuthzHandler test
>>             PythonFixupHandler test
>>             PythonDebug On
>>         </Directory>
>></VirtualHost>
>>
>>#--- test.py ----------------------------------------------------
>>from mod_python import apache
>>
>>def genHandler(req, handlerName):
>>     req.add_common_vars()
>>     req.get_basic_auth_pw()
>>     user = req.user
>>     dn = req.subprocess_env.get('SSL_CLIENT_S_DN',
>>req.subprocess_env.keys())
>>     userLabel = 'XXX-%s-user' % handlerName
>>     dnLabel = 'XXX-%s-dn' % handlerName
>>     req.subprocess_env[userLabel]=str(user)
>>     req.subprocess_env[dnLabel]=str(dn)
>>     return apache.OK
>>
>>
>>def accesshandler(req):
>>     return genHandler(req, 'access')
>>
>>def authenhandler(req):
>>     return genHandler(req, 'authen')
>>
>>def authzhandler(req):
>>     return genHandler(req, 'authz')
>>
>>def fixuphandler(req):
>>     return genHandler(req, 'fixup')
>>#------------------------------------------------------
>>
>>many thanks in advance
>>
>>-b
>>
>>
>>
>>---------------------------------------------------------------------- 
>>---------------------------
>>Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577
>>(voice),  -21139 (fax)
>>Servizio Elaborazione Dati                    e-mail:
>>bud@comune.grosseto.it
>>Comune di Grosseto                            jabber:  bud@jabber.no
>>Via Ginori, 43                                      http:// 
>>www.comune.grosseto.it/cie/
>>58100 Grosseto (Tuscany, Italy)           http:// 
>>www.comune.grosseto.it/interopEID/
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>-------------------------------------------------------------------------------------------------
>Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 
>(voice),  -21139 (fax)
>Servizio Elaborazione Dati                    e-mail:  bud@comune.grosseto.it
>Comune di Grosseto                            jabber:  bud@jabber.no
>Via Ginori, 
>43                                      http://www.comune.grosseto.it/cie/
>58100 Grosseto (Tuscany, 
>Italy)           http://www.comune.grosseto.it/interopEID/ 

From grahamd at dscpl.com.au  Mon Feb 20 04:50:10 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 20 04:50:34 2006
Subject: [mod_python] req.user and SSL?
In-Reply-To: <5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
References: <5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
	<5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
	<5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
Message-ID: <DD598CAF-9523-4CCE-B725-6293E468BFEF@dscpl.com.au>


On 20/02/2006, at 8:46 PM, Bud P. Bruegger wrote:

> At 13.54 19/02/2006 +1100, Graham Dumpleton wrote:
>
>> On 18/02/2006, at 1:05 AM, Bud P. Bruegger wrote:
>>
>>> Hello everyone,
>>>
>>> I have a problem reading req.user when using mod-SSL with the
>>> +FakeBasicAuth option and setting SSLUser:  req.user always seems
>>> to be undefined.  Also, neither Authen nor Authz handers run.   Any
>>> help would be highly appreciated
>>
>> First off, I presume the client certificate does have a user name
>> specified in it?
>
> I understood that the mod-ssl directive
>> SSLUserName SSL_CLIENT_S_DN_X509
> tells it to set the subject DN as req.user.  Did I understand this  
> incorrectly?  This DN is a string; would there be any requirements  
> for accepting a string as user name (e.g., illegal chars)?

That is gobblygook to me. I'll let someone else try and answer that who
knows about SSL stuff.

>> Second is that mod_ssl only populates req.user from a MIDDLE hook  
>> of the
>> access handler.
>
> Ok, so possibly I don't see it in the access hander, but then I  
> should see it in the Fixup stage, shouldn't I?

Presuming I read the code for mod_ssl correctly, then yes.

>> To get information about mod_ssl in earlier phases, you will need
>> mod_ssl
>> patches as described in:
>>
>>    https://issues.apache.org/jira/browse/MODPYTHON-94
>>
>> These changes have now been pushed into mod_python subversion main
>> trunk if you are prepared to give developmental code a go.
>
> This is actually the clean solution to my problem that I'm very  
> happy has been integrated!
>
> I was thinking of trying your external module with similar  
> functionality later today--thinking that maybe the trunk version of  
> mod-python may not be stable.  Would you recommend to take the  
> trunk instead?

See no harm in trying the trunk. The most significant changes are  
support for
Apache 2.2, simplified GIL API and mod_ssl. The only stability issues  
I know of
are that one test fails with Apache 2.2 on Mac OS X. This is probably  
more to
do with Apache 2.2 than mod_python though.

So, if you use Apache 2.0.55, you should be okay.

Graham
From nlv11281 at natlab.research.philips.com  Mon Feb 20 10:03:55 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Mon Feb 20 10:04:03 2006
Subject: [mod_python] High Traffic Round 2
In-Reply-To: <1140413838.12776.18.camel@localhost.localdomain>
References: <1140413838.12776.18.camel@localhost.localdomain>
Message-ID: <43F9DA5B.6060401@natlab.research.philips.com>

Could it be that some external lock is blocking your output (e.g. DB lock, file lock, printf to stdout)?

One way to check is to make a simple "hello world" handler and see if that behaves similar.

Also, check out the differences in the apache configs. If one is set to prefork and the other to 
mpm, that might explain some things too.

Mike Looijmans
Philips Natlab / Topic Automation


Marc D. Murray wrote:
> Here we go again with me and my high traffic site that I'm attempting to
> deploy using mod_python.
> 
> After a VERY stressful week, with a site that goes down every 2 - 5 hrs,
> I decided to move away from mod_python.publisher and Sessions totally.
> 
> I wrote my own handler that decides which module/page to load based on
> the 1st part of the URL. 
> 
> After deciding, it loads the module using __import__(module_name)
> and executes a function named _dispatch which all of my modules have.
> 
> However, it is VERY VERY SLOW. It works fine on my local server but goes
> at snail's pace on the production server. 
> 
> My home server is an Athlon 1Ghz w/256MB RAM and the production box has
> a celeron 2.6 with 512MB RAM.
> 
> I'm using memcached to store generated pages, and the cache is managed
> by the handler. The memcached client I'm using is the same one python
> one linked from the memcached homepage. This means that if a page has
> been cached, the module won't even be imported before the output is
> grabbed from cache.
> 
> So basically, I've designed this thing the best way I know how. I can't
> think of any way to make it any more efficient but it still doesn't work
> as expected.
> 
> I'm really f**king tired right now. and my head hurts.
> 
> Marc DM.
> 
> PS. Where's the mod_python irc channel? 
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From nlv11281 at natlab.research.philips.com  Mon Feb 20 10:11:26 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Mon Feb 20 10:11:29 2006
Subject: [mod_python] post request and the minimalistic handler
In-Reply-To: <5f56302b0602190913i212947e1j3562db6cda26837f@mail.gmail.com>
References: <5f56302b0602190913i212947e1j3562db6cda26837f@mail.gmail.com>
Message-ID: <43F9DC1E.6000304@natlab.research.philips.com>

There are still some problems with the FieldStorage class and large files. If you want to upload a 
large file, you MUST use a make_file callback to the FieldStorage constructor and NEVER call 
form["file"] for that field or your apache process will load the whole file into RAM.

In other words:
- Does it work with small (e.g. 10k) files?
- Look at apache's memory usage.

--
Mike Looijmans
Philips Natlab / Topic Automation


Daniel Nogradi wrote:
> I try to figure out exactly how an actual request gets converted into
> an mp_request object, especially if its content-type is
> multpart/form-data containing an uploaded file.
> 
> As a first step (with the zeroth step being reading the source of
> publisher.py and util.py) I wanted to see what happens if the
> minimalistic handler mentioned in the docs receives a POST requests
> sent from a file upload form such as
> 
> <html><body>
> <form enctype="multipart/form-data" method="post"
> action="http://server/testhandler/x">
> <input type="file" name="upload_this">
> <input type="submit" name="go" value="Click this">
> </form>
> </body></html>
> 
> and apache is given the following:
> 
> <Directory /var/www/html/testhandler>
>     SetHandler python-program
>     PythonHandler mod_python.myhandler
>     LimitRequestBody 0
> </Directory>
> 
> and the request handler myhandler.py is:
> 
> from mod_python import apache
> 
> def handler( req ):
>      req.content_type = "text/html"
>      req.write( "hello" )
>      return apache.OK
> 
> I would assume that no matter what kind of request comes in to the
> hierarchy under /testhandler the response from the server should be
> 'hello' under all circumstances. With GET requests everything is okay,
> the response is
> 
> HTTP/1.1 200 OK
> Date: Sun, 19 Feb 2006 17:11:54 GMT
> Server: Apache/2.0.53 (Fedora)
> Connection: close
> Transfer-Encoding: chunked
> Content-Type: text/html; charset=UTF-8
> 
> 5
> hello
> 0
> 
> which gets displayed nicely by Firefox as 'hello'.
> 
> The trouble starts when POST request are coming in for example through
> the html form above. After sending the form Firefox says 'The document
> contains no data' in a warning window (actually it displays 'hello'
> once or twice, but 99% of the time it just shows the warning). However
> after checking the log files of apache it turns out that everything
> went okay with the request, a 200 code was sent and the length of the
> response is also correctly shown to be 5. So it seems that from the
> point of view of the server everything went fine, but somehow Firefox
> never gets (or it thinks it doesn't get) the 200 code and the response
> containing 'hello'.
> 
> In order to see if it was really a Firefox issue I put together the
> POST request by hand and sent it to the server with netcat and
> everything went as expected, the output was the same as above.
> 
> So it seems it is a Firefox issue, but I'm a bit surprised that such a
> simple example would not work with Firefox. Am I expecting something
> that I shouldn't?
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From deron.meranda at gmail.com  Mon Feb 20 11:53:33 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Mon Feb 20 11:53:40 2006
Subject: [mod_python] req.user and SSL?
In-Reply-To: <5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
References: <5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
	<531A44FA-474B-4815-B8E7-4092DB323DF2@dscpl.com.au>
	<5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
Message-ID: <5c06fa770602200853i1d70a6edybcea22824f17d9e9@mail.gmail.com>

>>I have a problem reading req.user when using mod-SSL with the
>>+FakeBasicAuth option and setting SSLUser:  req.user always seems
>>to be undefined.
...
> I understood that the mod-ssl directive
> >SSLUserName SSL_CLIENT_S_DN_X509
> tells it to set the subject DN as req.user.  Did I understand this
> incorrectly?

>From the mod_ssl docs:

    "Note that this [SSLUserName] directive has no effect
    if the FakeBasic option is used."

The FaseBasicAuth processing is done early in the UserCheck phase. 
Essentially what it does is to synthesize an "Authorization" header as
if the user agent sent it; but otherwise doesn't set anything else. 
In this case the username will be the client DN string, and the
password will be "password", and the authorization scheme is "Basic". 
Thus it is still up to a later handler, such as auth_basic, to then
re-interpret the authorization header, and set up the req->user field.
 Of course this means that the DN and "password" needs to be in one of
it's backend provider databases (httpasswd, LDAP, etc), or it will be
rejected as a bad login.

[To prevent spoofing, any actual Authorization header sent by the real
user agent is rejected if the password is "password" and the username
starts with a "/".  So likewise if that username starts with "/" and
the password was "password", you know it was a synthesized "fake"
login by mod_ssl.]

The SSLUserName processing on the other hand is done in the middle of
the Access phase.  The req->user is set directly to whatever ssl
variable you specify (which internally uses the ssl_var_lookup()
method).  Note though that this phase is designed for access control,
not for authentication.  So if it gets this far, the client cert has
already been "trusted" as a valid user.  There obviously is no
password and auth_basic doesn't get involved.

Note that mod_ssl is full of informational logging, so you may be able
to see what's going on by capturing the INFO level log output from
apache.


> This DN is a string; would there be any requirements for
> accepting a string as user name (e.g., illegal chars)?

The only restriction I know of is that the user name can not contain a
colon ":" (this restriction comes from the HTTP basic and digest RFC
2617), nor a zero-byte.  Note that the DN will always start with a "/"
character.


> >Second is that mod_ssl only populates req.user from a MIDDLE hook of the
> >access handler.
>
> Ok, so possibly I don't see it in the access hander, but then I should see
> it in the Fixup stage, shouldn't I?

Should be correct.  Of course you can still get the DN yourself via
ssl_var_lookup() and just ignore the req->user.


> Would you recommend to take the trunk instead?

As Graham said the trunk is probably okay.  But if you're just a bit
more cautious, you can grab a stable release (3.2.7 for instance) and
just apply the one set of patches in MODPYTHON-94.

If you do that though just one head's up.... the patch attached to the
issue uses the method name "ssl_var()", whereas it is integrated on
the trunk (and in future relases) as "ssl_var_lookup()".  There's a
couple other tiny differences too...so read all the notes to the #94
issue and decide for yourself whether you go with the whole trunk or
just this patch.

Also, any feedback (good or bad) is certainly welcome, as this SSL
functionality gets much narowwer testing than other parts of
mod_python.
--
Deron Meranda

From nogradi at gmail.com  Mon Feb 20 19:05:16 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Mon Feb 20 19:05:20 2006
Subject: [mod_python] Re: Mike's psp upload
In-Reply-To: <43F9638F.4060509@natlab.research.philips.com>
References: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>
	<43F9638F.4060509@natlab.research.philips.com>
Message-ID: <5f56302b0602201605s455f39a2g46cc5b55effdb05e@mail.gmail.com>

> Hmm. I tested and indeed, the program does not work any more.
>
> The problem is NOT that FileCounter does not supply a read() method though.
> There's no reason for
> any object to 'read' the file, it's just writing it.

Well, here is the traceback that I get:

Mod_python error: "PythonHandler mod_python.psp"

Traceback (most recent call last):

  File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line
299, in HandlerDispatch
    result = object(req)

  File "/usr/lib/python2.3/site-packages/mod_python/psp.py", line 302,
in handler
    p.run()

  File "/usr/lib/python2.3/site-packages/mod_python/psp.py", line 213, in run
    exec code in global_scope

  File "/var/www/html/psp/upload.psp", line 43, in ?
    for afile in frm.getlist('archivefile'):

  File "/usr/lib/python2.3/site-packages/mod_python/util.py", line
354, in getlist
    found.append(StringField(item.value))

  File "/usr/lib/python2.3/site-packages/mod_python/util.py", line 74,
in __getattr__
    value = self.file.read()

AttributeError: FileCounter instance has no attribute 'read'


That seems pretty clear about a required 'read' method in util.py.


> (Oh, and remove the reference to 'fmt.py' which I forgot to strip out)

Yes of course, I removed that.

From nogradi at gmail.com  Mon Feb 20 19:16:46 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Mon Feb 20 19:16:50 2006
Subject: [mod_python] Re: post request and the minimalistic handler
In-Reply-To: <43F9DC1E.6000304@natlab.research.philips.com>
References: <5f56302b0602190913i212947e1j3562db6cda26837f@mail.gmail.com>
	<43F9DC1E.6000304@natlab.research.philips.com>
Message-ID: <5f56302b0602201616o283dcf0ao6709ea2d3083c3aa@mail.gmail.com>

> There are still some problems with the FieldStorage class and large files.
> If you want to upload a
> large file, you MUST use a make_file callback to the FieldStorage
> constructor and NEVER call
> form["file"] for that field or your apache process will load the whole file
> into RAM.
>
> In other words:
> - Does it work with small (e.g. 10k) files?
> - Look at apache's memory usage.

There are two things I don't understand here. First, if you don't give
a file callback function to FieldStorage it uses the default one,
which is creating a temporary file and that is where a file from a
posted form data will get written. So why would apache load that into
memory? The corresponding part of util.py is:

       # is this a file?
       if disp_options.has_key("filename"):
           if file_callback and callable(file_callback):
               file = file_callback(disp_options["filename"])
           else:
               file = self.make_file()

and

        def make_file(self):
              return tempfile.TemporaryFile("w+b")

The second thing is that in my example FieldStorage can not possibly
be a source of any problems as the whole request handler is only:

from mod_python import apache

def handler( req ):
     req.content_type = "text/html"
     req.write( "hello" )
     return apache.OK

so FieldStorage is not even instantiated. My understanding is that
with such a handler the body of a POST request is simply lost and is
neither read into memory nor anywhere else.

Another thought in this direction: I plan to write an inputfilter for
large file uploads in order to avoid FieldStorage all together. Has
anyone done such a thing?

From grahamd at dscpl.com.au  Mon Feb 20 19:34:13 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 20 19:34:21 2006
Subject: [mod_python] Re: post request and the minimalistic handler
Message-ID: <1140482053.21364@dscpl.user.openhosting.com>

Daniel Nogradi wrote ..
> Another thought in this direction: I plan to write an inputfilter for
> large file uploads in order to avoid FieldStorage all together. Has
> anyone done such a thing?

See Tramline:

  http://faassen.n--tree.net/blog/view/weblog/2005/11/11/0
  http://www.infrae.com/download/tramline

They have been having some issues which flushing causing hangs
which haven't been resolved entirely yet as to the reason, but there
is a workaround, which is to disable flushing down by mod_python
on input filter. See:

  http://issues.apache.org/jira/browse/MODPYTHON-76

I need to update the issue though, as my suggested fix didn't
eliminate the problem. Ie., wasn't just a case of ensuring that
flushing isn't done when filter closed.

Graham
From gavin at sz.net.cn  Mon Feb 20 21:35:28 2006
From: gavin at sz.net.cn (Gavin)
Date: Mon Feb 20 21:35:37 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
Message-ID: <03a101c6368f$7a079ba0$aa1ea8c0@frank>

Hello all,

1.Redhat AS3.0
2.apache 2.0.55
3.python2.4.2
4.mod_python3.2.7

compile with:
./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python-src=/usr/tools/Python-2.4.2 --with-max-locks=32


create a test sid.psp file as:

<%
from mod_python import apache,Session

sid='ba97450aebf736c2e0203df2c8a82c91'
secret="Abstfgsd"
S=Session.Session(req)
sid=S.id()
if S.is_new():
    S["sd"]=sid
    S.save()
    req.write(sid)
    req.write(S.id())
else:
    S.load()
    sid=S.get("sd")
    req.write(sid)
%>

<%
%>

apache configuration is correct.
..snip..

when I try to run sid.psp file via browser, an error happen(it is work correctly 
with mod_python3.1.3). the apache error_log file is as following:

[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: Traceback (most recent call last):
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch\n    result = object(req)
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/psp.py", line 302, in handler\n    p.run()
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/psp.py", line 213, in run\n    exec code in global_scope
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/data/HTTPD/htdocs/intapp/sid.m", line 6, in ?\n    S=Session.Session(req)
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 698, in Session\n    timeout=timeout, lock=lock)
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 300, in __init__\n    timeout=timeout, lock=lock)
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 129, in __init__\n    if self.load():
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 188, in load\n    dict = self.do_load()
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 321, in do_load\n    dbm = self._get_dbm()
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 308, in _get_dbm\n    result = self._dbmtype.open(self._dbmfile, 'c')
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py", line 83, in open\n    return mod.open(file, flag, mode)
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py", line 16, in open\n    return bsddb.hashopen(file, flag, mode)
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__init__.py", line 285, in hashopen\n    e = _openDBEnv()
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__init__.py", line 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
[Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: DBError: (138044656, 'Unknown error 138044656')

I cann't what's wrong?

Thanks in advance!



Sincerely 

Frank Ning



From grahamd at dscpl.com.au  Mon Feb 20 22:06:31 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 20 22:06:35 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
Message-ID: <1140491191.19546@dscpl.user.openhosting.com>

Gavin wrote ..
> ...
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py",
> line 188, in load\n    dict = self.do_load()
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py",
> line 321, in do_load\n    dbm = self._get_dbm()
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py",
> line 308, in _get_dbm\n    result = self._dbmtype.open(self._dbmfile, 'c')
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py", line 83, in
> open\n    return mod.open(file, flag, mode)
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py", line 16, in
> open\n    return bsddb.hashopen(file, flag, mode)
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__init__.py", line
> 285, in hashopen\n    e = _openDBEnv()
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__init__.py", line
> 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD
> | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163] PythonHandler
> mod_python.psp: DBError: (138044656, 'Unknown error 138044656')

That the first argument to the open() call is '.' doesn't look correct. This
should from what I can tell be set to the value of self._dbmfile, which is
determined by code:

    def __init__(self, req, dbm=None, sid=0, secret=None, dbmtype=anydbm, timeout=0, lock=1):
        if not dbm:
            opts = req.get_options()
            if opts.has_key("session_dbm"):
                dbm = opts["session_dbm"]
            else:
                dbm = os.path.join(opts.get('session_directory', tempdir), 'mp_sess.dbm')

        self._dbmfile = dbm

Have you used PythonOption to override either "session_dbm" or "session_directory"?

Graham
From nlv11281 at natlab.research.philips.com  Tue Feb 21 01:36:53 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Tue Feb 21 01:37:15 2006
Subject: [mod_python] Re: Chunked encoding
In-Reply-To: <719D5BA6-86F3-4868-AAF4-F060E2056924@dscpl.com.au>
References: <43F31412.8000008@gmx.org>
	<43F31622.2050204@gmx.org>	<4817b6fc0602181414y722275dbpe529c8d9ce05ee1e@mail.gmail.com>
	<719D5BA6-86F3-4868-AAF4-F060E2056924@dscpl.com.au>
Message-ID: <43FAB505.4070003@natlab.research.philips.com>

> As to the connection between req.set_content_length() and how much data
> you write, there isn't really any. Calling req.set_content_length()  
> only has the
> effect of setting the "Content-Length" response header. You could set  the
> content length to a small value and write more data that you say  there 
> will be
> and mod_python/Apache will quite happily let you do it. A remote  client on
> the other handle may well probably discard any extra content if it  
> honours the
> content length header.

Probably, the client will sort of choke and close the connection in 
order to resync. What will really happen depends on your data. If you 
send something out that looks like a HTTP response header there, the 
client may think you're responding to its next request. Yes, it's a good 
way to start spoofing and hacking.

So in a word: Don't. Only output the length header if you're 100% sure 
that the length is correct - it is NOT an estimation, it has to be exact.

Mike.

From nlv11281 at natlab.research.philips.com  Tue Feb 21 01:48:46 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Tue Feb 21 01:48:52 2006
Subject: [mod_python] Re: Mike's psp upload
In-Reply-To: <5f56302b0602201605s455f39a2g46cc5b55effdb05e@mail.gmail.com>
References: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>	<43F9638F.4060509@natlab.research.philips.com>
	<5f56302b0602201605s455f39a2g46cc5b55effdb05e@mail.gmail.com>
Message-ID: <43FAB7CE.103@natlab.research.philips.com>

I saw that traceback too, but it is util.py that is going wrong here:

## code snippet from mod_python/util.py
    def __getitem__(self, key):
        """Dictionary style indexing."""
        if self.list is None:
            raise TypeError, "not indexable"
        found = []
        for item in self.list:
            if item.name == key:
                if isinstance(item.file, FileType) or \
                       isinstance(getattr(item.file, 'file', None), 
FileType):
                    found.append(item)
                else:
                    found.append(StringField(item.value))
        if not found:
            raise KeyError, key
        if len(found) == 1:
            return found[0]
        else:
            return found
## end code snippet from mod_python/util.py

The result is that the callback will ONLY work if you create a REAL file 
in make_file. Otherwise, the "isinstance(item.file, FileType)" will 
return FALSE and it creates a StringField, which attempts to read the 
whole file into memory (not a good idea). Then you get the stacktrace. 
It also means that you won't get the filename back from the form.

I have submitted a patch that fixes the issue, but it is scheduled for 
3.3 now.

--
Mike Looijmans
Philips Natlab / Topic Automation


Daniel Nogradi wrote:
>>Hmm. I tested and indeed, the program does not work any more.
>>
>>The problem is NOT that FileCounter does not supply a read() method though.
>>There's no reason for
>>any object to 'read' the file, it's just writing it.
> 
> 
> Well, here is the traceback that I get:
> 
> Mod_python error: "PythonHandler mod_python.psp"
> 
> Traceback (most recent call last):
> 
>   File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line
> 299, in HandlerDispatch
>     result = object(req)
> 
>   File "/usr/lib/python2.3/site-packages/mod_python/psp.py", line 302,
> in handler
>     p.run()
> 
>   File "/usr/lib/python2.3/site-packages/mod_python/psp.py", line 213, in run
>     exec code in global_scope
> 
>   File "/var/www/html/psp/upload.psp", line 43, in ?
>     for afile in frm.getlist('archivefile'):
> 
>   File "/usr/lib/python2.3/site-packages/mod_python/util.py", line
> 354, in getlist
>     found.append(StringField(item.value))
> 
>   File "/usr/lib/python2.3/site-packages/mod_python/util.py", line 74,
> in __getattr__
>     value = self.file.read()
> 
> AttributeError: FileCounter instance has no attribute 'read'
> 
> 
> That seems pretty clear about a required 'read' method in util.py.
> 
> 
> 
>>(Oh, and remove the reference to 'fmt.py' which I forgot to strip out)
> 
> 
> Yes of course, I removed that.
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grahamd at dscpl.com.au  Tue Feb 21 05:03:13 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 21 05:03:45 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
In-Reply-To: <0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
References: <1140491191.19546@dscpl.user.openhosting.com>
	<0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
Message-ID: <304DF015-ED31-4C65-930D-2F0284C9E93D@dscpl.com.au>

Please keep posts on the mailing list.

On 21/02/2006, at 5:41 PM, Gavin wrote:

> hello Graham
>
> Thank you!
> My configuration is as following:
>
> <Directory "/data/HTTPD/htdocs/FeedBack">
>
>   AddHandler mod_python  .m

Do you really mean ".m"? Don't you mean ".psp, how else can you use  
"sid.psp"
as file name?

>   PythonHandler mod_python.psp
>   #PythonHandler mod_python.publisher
>   PythonPath "['/data/HTTPD/py_api']+['/data/HTTPD/htdocs/FeedBack'] 
> +sys.path"
>   PythonDebug Off
>   Options Indexes FollowSymLinks
>   Order deny,allow
>   Allow from all
>
> </Directory>
>
> I don't use PythonOption to override the either "session_dbm" or  
> "session_directory"

All I can suggest then is to look for the file:

   /tmp/mp_sess.dbm.db

or something named similarly. I don't think it is meant to have extra  
".db" extension
but on my Mac there is one for some reason.

This is the DBM session database. It may have somehow got corrupted.  
If you don't
have a main Apache process that is still trying to use it, remove it  
and start over.

You could also put in your Apache configuration:

   PythonOption session_dbm /tmp/mp_sess_test.dbm

Then return your test. Because it will be a fresh database, if it  
works, may again
show that default database is corrupt.

Graham


> Sincerely,
>
> Frank Ning
>
>
>
> ----- Original Message -----
> From: "Graham Dumpleton" <grahamd@dscpl.com.au>
> To: "Gavin" <gavin@sz.net.cn>
> Cc: "mod_python" <mod_python@modpython.org>
> Sent: Tuesday, February 21, 2006 11:06 AM
> Subject: Re: [mod_python] The Session problem with mod_python3.2.7
>
>
> Gavin wrote ..
>> ...
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>> mod_python/Session.py",
>> line 188, in load\n    dict = self.do_load()
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>> mod_python/Session.py",
>> line 321, in do_load\n    dbm = self._get_dbm()
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>> mod_python/Session.py",
>> line 308, in _get_dbm\n    result = self._dbmtype.open 
>> (self._dbmfile, 'c')
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py", line  
>> 83, in
>> open\n    return mod.open(file, flag, mode)
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py", line  
>> 16, in
>> open\n    return bsddb.hashopen(file, flag, mode)
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/ 
>> __init__.py", line
>> 285, in hashopen\n    e = _openDBEnv()
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/ 
>> __init__.py", line
>> 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE |  
>> db.DB_THREAD
>> | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>> PythonHandler
>> mod_python.psp: DBError: (138044656, 'Unknown error 138044656')
>
> That the first argument to the open() call is '.' doesn't look  
> correct. This
> should from what I can tell be set to the value of self._dbmfile,  
> which is
> determined by code:
>
>     def __init__(self, req, dbm=None, sid=0, secret=None,  
> dbmtype=anydbm, timeout=0, lock=1):
>         if not dbm:
>             opts = req.get_options()
>             if opts.has_key("session_dbm"):
>                 dbm = opts["session_dbm"]
>             else:
>                 dbm = os.path.join(opts.get('session_directory',  
> tempdir), 'mp_sess.dbm')
>
>         self._dbmfile = dbm
>
> Have you used PythonOption to override either "session_dbm" or  
> "session_directory"?
>
> Graham

From gavin at sz.net.cn  Tue Feb 21 05:25:48 2006
From: gavin at sz.net.cn (Gavin)
Date: Tue Feb 21 05:25:56 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
References: <1140491191.19546@dscpl.user.openhosting.com>
	<0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
	<304DF015-ED31-4C65-930D-2F0284C9E93D@dscpl.com.au>
Message-ID: <1adb01c636d1$2ea5a430$aa1ea8c0@frank>

Thanks Graham.
> Please keep posts on the mailing list.
> 
> On 21/02/2006, at 5:41 PM, Gavin wrote:
> 
>> hello Graham
>>
>> Thank you!
>> My configuration is as following:
>>
>> <Directory "/data/HTTPD/htdocs/FeedBack">
>>
>>   AddHandler mod_python  .m
> 
> Do you really mean ".m"? Don't you mean ".psp, how else can you use  
> "sid.psp"
> as file name?
> 
Right. I use sid.m. 

>>   PythonHandler mod_python.psp
>>   #PythonHandler mod_python.publisher
>>   PythonPath "['/data/HTTPD/py_api']+['/data/HTTPD/htdocs/FeedBack'] 
>> +sys.path"
>>   PythonDebug Off
>>   Options Indexes FollowSymLinks
>>   Order deny,allow
>>   Allow from all
>>
>> </Directory>
>>
>> I don't use PythonOption to override the either "session_dbm" or  
>> "session_directory"
> 
> All I can suggest then is to look for the file:
> 
>   /tmp/mp_sess.dbm.db
> 
> or something named similarly. I don't think it is meant to have extra  
> ".db" extension
> but on my Mac there is one for some reason.
> 
Cann't found any file like mp* under /tmp


> This is the DBM session database. It may have somehow got corrupted.  
> If you don't
> have a main Apache process that is still trying to use it, remove it  
> and start over.
> 
> You could also put in your Apache configuration:
> 
>   PythonOption session_dbm /tmp/mp_sess_test.dbm
> 
add the above PythonOption in httpd.conf directive. and restart httpd server.
The same error happan as I report ago when access sid.m

[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: Traceback (most recent call last):
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/apache.py", line 299, in HandlerDispatch\n    result = object(req)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/psp.py", line 302, in handler\n    p.run()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/psp.py", line 213, in run\n    exec code in global_scope
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/data/HTTPD/htdocs/intapp/sid.m", l
ine 6, in ?\n    S=Session.Session(req)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 698, in Session\n    timeout=timeout, lock=lock)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 300, in __init__\n    timeout=timeout, lock=lock)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 129, in __init__\n    if self.load():
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 188, in load\n    dict = self.do_load()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 321, in do_load\n    dbm = self._get_dbm()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 308, in _get_dbm\n    result = self._dbmtype.open(self._dbmfile, 'c')
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py"
, line 83, in open\n    return mod.open(file, flag, mode)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py"
, line 16, in open\n    return bsddb.hashopen(file, flag, mode)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__in
it__.py", line 285, in hashopen\n    e = _openDBEnv()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__in
it__.py", line 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: DBError: (139531504, 'Unknown error 1395315
04')
> Then return your test. Because it will be a fresh database, if it  
> works, may again
> show that default database is corrupt.
> 
> Graham
> 
> 
>> Sincerely,
>>
>> Frank Ning
>>
>>
>>
>> ----- Original Message -----
>> From: "Graham Dumpleton" <grahamd@dscpl.com.au>
>> To: "Gavin" <gavin@sz.net.cn>
>> Cc: "mod_python" <mod_python@modpython.org>
>> Sent: Tuesday, February 21, 2006 11:06 AM
>> Subject: Re: [mod_python] The Session problem with mod_python3.2.7
>>
>>
>> Gavin wrote ..
>>> ...
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>>> mod_python/Session.py",
>>> line 188, in load\n    dict = self.do_load()
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>>> mod_python/Session.py",
>>> line 321, in do_load\n    dbm = self._get_dbm()
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>>> mod_python/Session.py",
>>> line 308, in _get_dbm\n    result = self._dbmtype.open 
>>> (self._dbmfile, 'c')
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py", line  
>>> 83, in
>>> open\n    return mod.open(file, flag, mode)
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py", line  
>>> 16, in
>>> open\n    return bsddb.hashopen(file, flag, mode)
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/ 
>>> __init__.py", line
>>> 285, in hashopen\n    e = _openDBEnv()
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/ 
>>> __init__.py", line
>>> 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE |  
>>> db.DB_THREAD
>>> | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp: DBError: (138044656, 'Unknown error 138044656')
>>
>> That the first argument to the open() call is '.' doesn't look  
>> correct. This
>> should from what I can tell be set to the value of self._dbmfile,  
>> which is
>> determined by code:
>>
>>     def __init__(self, req, dbm=None, sid=0, secret=None,  
>> dbmtype=anydbm, timeout=0, lock=1):
>>         if not dbm:
>>             opts = req.get_options()
>>             if opts.has_key("session_dbm"):
>>                 dbm = opts["session_dbm"]
>>             else:
>>                 dbm = os.path.join(opts.get('session_directory',  
>> tempdir), 'mp_sess.dbm')
>>
>>         self._dbmfile = dbm
>>
>> Have you used PythonOption to override either "session_dbm" or  
>> "session_directory"?
>>
>> Graham
> 
>

From gavin at sz.net.cn  Tue Feb 21 05:25:42 2006
From: gavin at sz.net.cn (Gavin)
Date: Tue Feb 21 05:26:01 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
References: <1140491191.19546@dscpl.user.openhosting.com>
	<0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
	<304DF015-ED31-4C65-930D-2F0284C9E93D@dscpl.com.au>
Message-ID: <1ada01c636d1$2b03c550$aa1ea8c0@frank>

Thanks Graham.
> Please keep posts on the mailing list.
> 
> On 21/02/2006, at 5:41 PM, Gavin wrote:
> 
>> hello Graham
>>
>> Thank you!
>> My configuration is as following:
>>
>> <Directory "/data/HTTPD/htdocs/FeedBack">
>>
>>   AddHandler mod_python  .m
> 
> Do you really mean ".m"? Don't you mean ".psp, how else can you use  
> "sid.psp"
> as file name?
> 
Right. I use sid.m. 

>>   PythonHandler mod_python.psp
>>   #PythonHandler mod_python.publisher
>>   PythonPath "['/data/HTTPD/py_api']+['/data/HTTPD/htdocs/FeedBack'] 
>> +sys.path"
>>   PythonDebug Off
>>   Options Indexes FollowSymLinks
>>   Order deny,allow
>>   Allow from all
>>
>> </Directory>
>>
>> I don't use PythonOption to override the either "session_dbm" or  
>> "session_directory"
> 
> All I can suggest then is to look for the file:
> 
>   /tmp/mp_sess.dbm.db
> 
> or something named similarly. I don't think it is meant to have extra  
> ".db" extension
> but on my Mac there is one for some reason.
> 
Cann't found any file like mp* under /tmp


> This is the DBM session database. It may have somehow got corrupted.  
> If you don't
> have a main Apache process that is still trying to use it, remove it  
> and start over.
> 
> You could also put in your Apache configuration:
> 
>   PythonOption session_dbm /tmp/mp_sess_test.dbm
> 
add the above PythonOption in httpd.conf directive. and restart httpd server.
The same error happan as I report ago when access sid.m

[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: Traceback (most recent call last):
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/apache.py", line 299, in HandlerDispatch\n    result = object(req)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/psp.py", line 302, in handler\n    p.run()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/psp.py", line 213, in run\n    exec code in global_scope
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/data/HTTPD/htdocs/intapp/sid.m", l
ine 6, in ?\n    S=Session.Session(req)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 698, in Session\n    timeout=timeout, lock=lock)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 300, in __init__\n    timeout=timeout, lock=lock)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 129, in __init__\n    if self.load():
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 188, in load\n    dict = self.do_load()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 321, in do_load\n    dbm = self._get_dbm()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packa
ges/mod_python/Session.py", line 308, in _get_dbm\n    result = self._dbmtype.open(self._dbmfile, 'c')
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py"
, line 83, in open\n    return mod.open(file, flag, mode)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py"
, line 16, in open\n    return bsddb.hashopen(file, flag, mode)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__in
it__.py", line 285, in hashopen\n    e = _openDBEnv()
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__in
it__.py", line 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
[Tue Feb 21 18:30:04 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: DBError: (139531504, 'Unknown error 1395315
04')
> Then return your test. Because it will be a fresh database, if it  
> works, may again
> show that default database is corrupt.
> 
> Graham
> 
> 
>> Sincerely,
>>
>> Frank Ning
>>
>>
>>
>> ----- Original Message -----
>> From: "Graham Dumpleton" <grahamd@dscpl.com.au>
>> To: "Gavin" <gavin@sz.net.cn>
>> Cc: "mod_python" <mod_python@modpython.org>
>> Sent: Tuesday, February 21, 2006 11:06 AM
>> Subject: Re: [mod_python] The Session problem with mod_python3.2.7
>>
>>
>> Gavin wrote ..
>>> ...
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>>> mod_python/Session.py",
>>> line 188, in load\n    dict = self.do_load()
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>>> mod_python/Session.py",
>>> line 321, in do_load\n    dbm = self._get_dbm()
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/ 
>>> mod_python/Session.py",
>>> line 308, in _get_dbm\n    result = self._dbmtype.open 
>>> (self._dbmfile, 'c')
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py", line  
>>> 83, in
>>> open\n    return mod.open(file, flag, mode)
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py", line  
>>> 16, in
>>> open\n    return bsddb.hashopen(file, flag, mode)
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/ 
>>> __init__.py", line
>>> 285, in hashopen\n    e = _openDBEnv()
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/ 
>>> __init__.py", line
>>> 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE |  
>>> db.DB_THREAD
>>> | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
>>> [Tue Feb 21 10:30:18 2006] [error] [client 202.104.96.163]  
>>> PythonHandler
>>> mod_python.psp: DBError: (138044656, 'Unknown error 138044656')
>>
>> That the first argument to the open() call is '.' doesn't look  
>> correct. This
>> should from what I can tell be set to the value of self._dbmfile,  
>> which is
>> determined by code:
>>
>>     def __init__(self, req, dbm=None, sid=0, secret=None,  
>> dbmtype=anydbm, timeout=0, lock=1):
>>         if not dbm:
>>             opts = req.get_options()
>>             if opts.has_key("session_dbm"):
>>                 dbm = opts["session_dbm"]
>>             else:
>>                 dbm = os.path.join(opts.get('session_directory',  
>> tempdir), 'mp_sess.dbm')
>>
>>         self._dbmfile = dbm
>>
>> Have you used PythonOption to override either "session_dbm" or  
>> "session_directory"?
>>
>> Graham
> 
>

From bud at comune.grosseto.it  Tue Feb 21 05:42:58 2006
From: bud at comune.grosseto.it (Bud P. Bruegger)
Date: Tue Feb 21 05:27:35 2006
Subject: [mod_python] req.user and SSL?
In-Reply-To: <5c06fa770602200853i1d70a6edybcea22824f17d9e9@mail.gmail.co
 m>
References: <5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
	<5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
	<531A44FA-474B-4815-B8E7-4092DB323DF2@dscpl.com.au>
	<5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
Message-ID: <5.2.1.1.0.20060221113900.031b8df8@mail.comune.grosseto.it>

At 11.53 20/02/2006 -0500, Deron Meranda wrote:
> >>I have a problem reading req.user when using mod-SSL with the
> >>+FakeBasicAuth option and setting SSLUser:  req.user always seems
> >>to be undefined.
>...
> > I understood that the mod-ssl directive
> > >SSLUserName SSL_CLIENT_S_DN_X509
> > tells it to set the subject DN as req.user.  Did I understand this
> > incorrectly?
>
> >From the mod_ssl docs:
>
>     "Note that this [SSLUserName] directive has no effect
>     if the FakeBasic option is used."
>
>The FaseBasicAuth processing is done early in the UserCheck phase.
>Essentially what it does is to synthesize an "Authorization" header as
>if the user agent sent it; but otherwise doesn't set anything else.
>In this case the username will be the client DN string, and the
>password will be "password", and the authorization scheme is "Basic".
>Thus it is still up to a later handler, such as auth_basic, to then
>re-interpret the authorization header, and set up the req->user field.
>  Of course this means that the DN and "password" needs to be in one of
>it's backend provider databases (httpasswd, LDAP, etc), or it will be
>rejected as a bad login.
>
>[To prevent spoofing, any actual Authorization header sent by the real
>user agent is rejected if the password is "password" and the username
>starts with a "/".  So likewise if that username starts with "/" and
>the password was "password", you know it was a synthesized "fake"
>login by mod_ssl.]
>
>The SSLUserName processing on the other hand is done in the middle of
>the Access phase.  The req->user is set directly to whatever ssl
>variable you specify (which internally uses the ssl_var_lookup()
>method).  Note though that this phase is designed for access control,
>not for authentication.  So if it gets this far, the client cert has
>already been "trusted" as a valid user.  There obviously is no
>password and auth_basic doesn't get involved.
>
>Note that mod_ssl is full of informational logging, so you may be able
>to see what's going on by capturing the INFO level log output from
>apache.

Many thanks for clarifying this!  Now I understand much better and have to 
play around to try it out.

> > This DN is a string; would there be any requirements for
> > accepting a string as user name (e.g., illegal chars)?
>
>The only restriction I know of is that the user name can not contain a
>colon ":" (this restriction comes from the HTTP basic and digest RFC
>2617), nor a zero-byte.  Note that the DN will always start with a "/"
>character.
>
>
> > >Second is that mod_ssl only populates req.user from a MIDDLE hook of the
> > >access handler.
> >
> > Ok, so possibly I don't see it in the access hander, but then I should see
> > it in the Fixup stage, shouldn't I?
>
>Should be correct.  Of course you can still get the DN yourself via
>ssl_var_lookup() and just ignore the req->user.
>
>
> > Would you recommend to take the trunk instead?
>
>As Graham said the trunk is probably okay.  But if you're just a bit
>more cautious, you can grab a stable release (3.2.7 for instance) and
>just apply the one set of patches in MODPYTHON-94.
>
>If you do that though just one head's up.... the patch attached to the
>issue uses the method name "ssl_var()", whereas it is integrated on
>the trunk (and in future relases) as "ssl_var_lookup()".  There's a
>couple other tiny differences too...so read all the notes to the #94
>issue and decide for yourself whether you go with the whole trunk or
>just this patch.

I was actually thinking of doing a back porting of the patch to the version 
of mod-python I currently run.  It looked straight forward enough.  I 
started to read up on how to recompile Debian src packages..

>Also, any feedback (good or bad) is certainly welcome, as this SSL
>functionality gets much narowwer testing than other parts of
>mod_python.

Sure will if I get it to work.

Again, many thanks for very useful input!

>--
>Deron Meranda


-------------------------------------------------------------------------------------------------
Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 
(voice),  -21139 (fax)
Servizio Elaborazione Dati                    e-mail:  bud@comune.grosseto.it
Comune di Grosseto                            jabber:  bud@jabber.no
Via Ginori, 
43                                      http://www.comune.grosseto.it/cie/
58100 Grosseto (Tuscany, 
Italy)           http://www.comune.grosseto.it/interopEID/ 

From grahamd at dscpl.com.au  Tue Feb 21 05:45:11 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 21 05:45:25 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
In-Reply-To: <1ada01c636d1$2b03c550$aa1ea8c0@frank>
References: <1140491191.19546@dscpl.user.openhosting.com>
	<0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
	<304DF015-ED31-4C65-930D-2F0284C9E93D@dscpl.com.au>
	<1ada01c636d1$2b03c550$aa1ea8c0@frank>
Message-ID: <48F16470-0243-4122-8E3F-4438C7B391E5@dscpl.com.au>


On 21/02/2006, at 9:25 PM, Gavin wrote:

>> On 21/02/2006, at 5:41 PM, Gavin wrote:
>>
>>> hello Graham
>>>
>>> Thank you!
>>> My configuration is as following:
>>>
>>> <Directory "/data/HTTPD/htdocs/FeedBack">
>>>
>>>   AddHandler mod_python  .m
>>
>> Do you really mean ".m"? Don't you mean ".psp, how else can you use
>> "sid.psp"
>> as file name?
>>
> Right. I use sid.m.

In the URL, or for the file? Its a bit confusing. Is there are reason  
you want
to use ".m" extension?

Anyway, when I take the PSP code you posted and which you referred to
as "sid.psp" and put in a directory with .htaccess file of:

AddHandler mod_python .psp
PythonHandler mod_python.psp
PythonDebug On

If I access it as sid.psp in URL, the code works as expected.

>>>   PythonHandler mod_python.psp
>>>   #PythonHandler mod_python.publisher
>>>   PythonPath "['/data/HTTPD/py_api']+['/data/HTTPD/htdocs/FeedBack']
>>> +sys.path"
>>>   PythonDebug Off
>>>   Options Indexes FollowSymLinks
>>>   Order deny,allow
>>>   Allow from all
>>>
>>> </Directory>
>>>
>>> I don't use PythonOption to override the either "session_dbm" or
>>> "session_directory"
>>>
>>
>> All I can suggest then is to look for the file:
>>
>>   /tmp/mp_sess.dbm.db
>>
>> or something named similarly. I don't think it is meant to have extra
>> ".db" extension
>> but on my Mac there is one for some reason.
>>
>>
> Cann't found any file like mp* under /tmp

All I can suggest then is to modify lib/python/mod_python/Session.py in
mod_python source code and add in some debug statements to see what
session database name is being set to.

class DbmSession(BaseSession):

     def __init__(self, req, dbm=None, sid=0, secret=None,  
dbmtype=anydbm,
                  timeout=0, lock=1):

         if not dbm:
             opts = req.get_options()
             if opts.has_key("session_dbm"):
                 dbm = opts["session_dbm"]
             else:
                 dbm = os.path.join(opts.get('session_directory',  
tempdir), 'mp_sess.dbm')

         self._dbmfile = dbm
         self._dbmtype = dbmtype

         # XXX DEBUG

         apache.log_error("dbmfile=%s"%self._dbmfile)

Reinstall mod_python and restart Apache.

Then when running test, look in Apache error_log to see where it  
thinks it is getting
put. See if file exists if not in /tmp.

Graham
From gavin at sz.net.cn  Tue Feb 21 06:14:00 2006
From: gavin at sz.net.cn (Gavin)
Date: Tue Feb 21 06:14:13 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
References: <1140491191.19546@dscpl.user.openhosting.com>
	<0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
	<304DF015-ED31-4C65-930D-2F0284C9E93D@dscpl.com.au>
	<1ada01c636d1$2b03c550$aa1ea8c0@frank>
	<48F16470-0243-4122-8E3F-4438C7B391E5@dscpl.com.au>
Message-ID: <1cde01c636d7$eabad860$aa1ea8c0@frank>


> 
> On 21/02/2006, at 9:25 PM, Gavin wrote:
> 
>>> On 21/02/2006, at 5:41 PM, Gavin wrote:
>>>
>>>> hello Graham
>>>>
>>>> Thank you!
>>>> My configuration is as following:
>>>>
>>>> <Directory "/data/HTTPD/htdocs/FeedBack">
>>>>
>>>>   AddHandler mod_python  .m
>>>
>>> Do you really mean ".m"? Don't you mean ".psp, how else can you use
>>> "sid.psp"
>>> as file name?
>>>
>> Right. I use sid.m.
> 
> In the URL, or for the file? Its a bit confusing. Is there are reason  
> you want
> to use ".m" extension?
> 
> Anyway, when I take the PSP code you posted and which you referred to
> as "sid.psp" and put in a directory with .htaccess file of:
> 
> AddHandler mod_python .psp
> PythonHandler mod_python.psp
> PythonDebug On
> 
> If I access it as sid.psp in URL, the code works as expected.
> 
>>>>   PythonHandler mod_python.psp
>>>>   #PythonHandler mod_python.publisher
>>>>   PythonPath "['/data/HTTPD/py_api']+['/data/HTTPD/htdocs/FeedBack']
>>>> +sys.path"
>>>>   PythonDebug Off
>>>>   Options Indexes FollowSymLinks
>>>>   Order deny,allow
>>>>   Allow from all
>>>>
>>>> </Directory>
>>>>
>>>> I don't use PythonOption to override the either "session_dbm" or
>>>> "session_directory"
>>>>
>>>
>>> All I can suggest then is to look for the file:
>>>
>>>   /tmp/mp_sess.dbm.db
>>>
>>> or something named similarly. I don't think it is meant to have extra
>>> ".db" extension
>>> but on my Mac there is one for some reason.
>>>
>>>
>> Cann't found any file like mp* under /tmp
> 
> All I can suggest then is to modify lib/python/mod_python/Session.py in
> mod_python source code and add in some debug statements to see what
> session database name is being set to.
> 
> class DbmSession(BaseSession):
> 
>     def __init__(self, req, dbm=None, sid=0, secret=None,  
> dbmtype=anydbm,
>                  timeout=0, lock=1):
> 
>         if not dbm:
>             opts = req.get_options()
>             if opts.has_key("session_dbm"):
>                 dbm = opts["session_dbm"]
>             else:
>                 dbm = os.path.join(opts.get('session_directory',  
> tempdir), 'mp_sess.dbm')
> 
>         self._dbmfile = dbm
>         self._dbmtype = dbmtype
> 
>         # XXX DEBUG
> 
>         apache.log_error("dbmfile=%s"%self._dbmfile)
> 
> Reinstall mod_python and restart Apache.
> 
> Then when running test, look in Apache error_log to see where it  
> thinks it is getting
> put. See if file exists if not in /tmp.
> 
mp_sess_test.dbm file doesn't exists in /tmp. error_log file are as following:


[Tue Feb 21 19:23:14 2006] [error] dbmfile=/tmp/mp_sess_test.dbm
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: Traceback (most recent call last):
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch\n    result = object(req)
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/psp.py", line 302, in handler\n    p.run()
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/psp.py", line 213, in run\n    exec code in global_scope
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/data/HTTPD/htdocs/intapp/sid.m", line 6, in ?\n    S=Session.Session(req)
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 699, in Session\n    timeout=timeout, lock=lock)
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 301, in __init__\n    timeout=timeout, lock=lock)
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 129, in __init__\n    if self.load():
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 188, in load\n    dict = self.do_load()
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 322, in do_load\n    dbm = self._get_dbm()
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line 309, in _get_dbm\n    result = self._dbmtype.open(self._dbmfile, 'c')
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/anydbm.py", line 83, in open\n    return mod.open(file, flag, mode)
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/dbhash.py", line 16, in open\n    return bsddb.hashopen(file, flag, mode)
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__init__.py", line 285, in hashopen\n    e = _openDBEnv()
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp:   File "/usr/local/lib/python2.4/bsddb/__init__.py", line 339, in _openDBEnv\n    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163] PythonHandler mod_python.psp: DBError: (137263248, 'Unknown error 137263248')

> Graham
>

From grahamd at dscpl.com.au  Tue Feb 21 06:27:41 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 21 06:27:55 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
In-Reply-To: <1cde01c636d7$eabad860$aa1ea8c0@frank>
References: <1140491191.19546@dscpl.user.openhosting.com>
	<0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
	<304DF015-ED31-4C65-930D-2F0284C9E93D@dscpl.com.au>
	<1ada01c636d1$2b03c550$aa1ea8c0@frank>
	<48F16470-0243-4122-8E3F-4438C7B391E5@dscpl.com.au>
	<1cde01c636d7$eabad860$aa1ea8c0@frank>
Message-ID: <2B903040-F9BD-44C9-AB4B-7105ACD59533@dscpl.com.au>


On 21/02/2006, at 10:14 PM, Gavin wrote:
>> All I can suggest then is to modify lib/python/mod_python/ 
>> Session.py in
>> mod_python source code and add in some debug statements to see what
>> session database name is being set to.
>>
>> class DbmSession(BaseSession):
>>
>>     def __init__(self, req, dbm=None, sid=0, secret=None,
>> dbmtype=anydbm,
>>                  timeout=0, lock=1):
>>
>>         if not dbm:
>>             opts = req.get_options()
>>             if opts.has_key("session_dbm"):
>>                 dbm = opts["session_dbm"]
>>             else:
>>                 dbm = os.path.join(opts.get('session_directory',
>> tempdir), 'mp_sess.dbm')
>>
>>         self._dbmfile = dbm
>>         self._dbmtype = dbmtype
>>
>>         # XXX DEBUG
>>
>>         apache.log_error("dbmfile=%s"%self._dbmfile)
>>
>> Reinstall mod_python and restart Apache.
>>
>> Then when running test, look in Apache error_log to see where it
>> thinks it is getting
>> put. See if file exists if not in /tmp.
>>
> mp_sess_test.dbm file doesn't exists in /tmp. error_log file are as  
> following:

Run an interactive Python session and try:

grumpy:~ grahamd$ python
Python 2.3.5 (#1, Mar 20 2005, 20:38:20)
[GCC 3.3 20030304 (Apple Computer, Inc. build 1809)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
 >>> import anydbm
 >>> db = anydbm.open("/tmp/mp_sess_test.dbm",'c')
 >>>

If that works, try the same thing in a really simple mod_python handler
independent of Session class. Ie.,

from mod_python import apache
import anydbm

def handler(req):
     req.content_type = 'text/plain'
     db = anydbm.open("/tmp/mp_sess_test.dbm",'c')
     db.close()
     req.write('test ok')
     return apache.OK

If it works outside of mod_python and not in mod_python, may be some
problem to do with a mixing of wrong versions of shared libraries.

If it doesn't work outside of mod_python either, make sure permissions
on "/tmp" directory look correct, or try creating it in a different  
directory
that you own.

Time for me to sleep. Will see how you go in the morning.

Graham
From nogradi at gmail.com  Tue Feb 21 06:30:13 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Tue Feb 21 06:30:19 2006
Subject: [mod_python] Re: Mike's psp upload
In-Reply-To: <43FAB7CE.103@natlab.research.philips.com>
References: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>
	<43F9638F.4060509@natlab.research.philips.com>
	<5f56302b0602201605s455f39a2g46cc5b55effdb05e@mail.gmail.com>
	<43FAB7CE.103@natlab.research.philips.com>
Message-ID: <5f56302b0602210330i2a088893u688129ba14833eb9@mail.gmail.com>

> I saw that traceback too, but it is util.py that is going wrong here:
>
> ## code snippet from mod_python/util.py
>     def __getitem__(self, key):
>         """Dictionary style indexing."""
>         if self.list is None:
>             raise TypeError, "not indexable"
>         found = []
>         for item in self.list:
>             if item.name == key:
>                 if isinstance(item.file, FileType) or \
>                        isinstance(getattr(item.file, 'file', None),
> FileType):
>                     found.append(item)
>                 else:
>                     found.append(StringField(item.value))
>         if not found:
>             raise KeyError, key
>         if len(found) == 1:
>             return found[0]
>         else:
>             return found
> ## end code snippet from mod_python/util.py
>
> The result is that the callback will ONLY work if you create a REAL file
> in make_file. Otherwise, the "isinstance(item.file, FileType)" will
> return FALSE and it creates a StringField, which attempts to read the
> whole file into memory (not a good idea). Then you get the stacktrace.
> It also means that you won't get the filename back from the form.
>
> I have submitted a patch that fixes the issue, but it is scheduled for
> 3.3 now.

Ooops, I overlooked that, thanks for the clarification.

From gavin at sz.net.cn  Tue Feb 21 07:09:54 2006
From: gavin at sz.net.cn (Gavin)
Date: Tue Feb 21 07:10:04 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
References: <1140491191.19546@dscpl.user.openhosting.com>
	<0dcb01c636b1$ca0cddf0$aa1ea8c0@frank>
	<304DF015-ED31-4C65-930D-2F0284C9E93D@dscpl.com.au>
	<1ada01c636d1$2b03c550$aa1ea8c0@frank>
	<48F16470-0243-4122-8E3F-4438C7B391E5@dscpl.com.au>
	<1cde01c636d7$eabad860$aa1ea8c0@frank>
	<2B903040-F9BD-44C9-AB4B-7105ACD59533@dscpl.com.au>
Message-ID: <1ec701c636df$b9866f40$aa1ea8c0@frank>

> 
> On 21/02/2006, at 10:14 PM, Gavin wrote:
>>> All I can suggest then is to modify lib/python/mod_python/ 
>>> Session.py in
>>> mod_python source code and add in some debug statements to see what
>>> session database name is being set to.
>>>
>>> class DbmSession(BaseSession):
>>>
>>>     def __init__(self, req, dbm=None, sid=0, secret=None,
>>> dbmtype=anydbm,
>>>                  timeout=0, lock=1):
>>>
>>>         if not dbm:
>>>             opts = req.get_options()
>>>             if opts.has_key("session_dbm"):
>>>                 dbm = opts["session_dbm"]
>>>             else:
>>>                 dbm = os.path.join(opts.get('session_directory',
>>> tempdir), 'mp_sess.dbm')
>>>
>>>         self._dbmfile = dbm
>>>         self._dbmtype = dbmtype
>>>
>>>         # XXX DEBUG
>>>
>>>         apache.log_error("dbmfile=%s"%self._dbmfile)
>>>
>>> Reinstall mod_python and restart Apache.
>>>
>>> Then when running test, look in Apache error_log to see where it
>>> thinks it is getting
>>> put. See if file exists if not in /tmp.
>>>
>> mp_sess_test.dbm file doesn't exists in /tmp. error_log file are as  
>> following:
> 
> Run an interactive Python session and try:
> 
> grumpy:~ grahamd$ python
> Python 2.3.5 (#1, Mar 20 2005, 20:38:20)
> [GCC 3.3 20030304 (Apple Computer, Inc. build 1809)] on darwin
> Type "help", "copyright", "credits" or "license" for more information.
> >>> import anydbm
> >>> db = anydbm.open("/tmp/mp_sess_test.dbm",'c')
> >>>

Yes, it works correctly.
> 
> If that works, try the same thing in a really simple mod_python handler
> independent of Session class. Ie.,
> 
> from mod_python import apache
> import anydbm
> 
> def handler(req):
>     req.content_type = 'text/plain'
>     db = anydbm.open("/tmp/mp_sess_test.dbm",'c')
>     db.close()
>     req.write('test ok')
>     return apache.OK
> 
> If it works outside of mod_python and not in mod_python, may be some
> problem to do with a mixing of wrong versions of shared libraries.
> 
> If it doesn't work outside of mod_python either, make sure permissions
> on "/tmp" directory look correct, or try creating it in a different  
> directory
> that you own.
right. It doesn't work . I create a test directory, and test as following:

<Directory "/data/HTTPD/htdocs/t">

  AddHandler mod_python  .m .cgi .py
  #PythonHandler mod_python.psp
  PythonHandler myhandler
  PythonOption session_dbm /opt/tmp/mp_sess.dbm
  PythonPath "['/data/HTTPD/py_api']+['/data/HTTPD/htdocs/t']+sys.path"
  PythonDebug On
  Options Indexes FollowSymLinks
  Order deny,allow
  Allow from all

</Directory>

Create a  myhandler.py file in t directory:
from mod_python import apache
import anydbm

def handler(req):
     req.content_type = 'text/plain'
     db = anydbm.open("/tmp/mp_sess_test.dbm",'c')
     db.close()
     req.write('test ok')
     return apache.OK

when accessing by  http://myserver/t/myhandler.py.  An error
hanppen as following(the t directory 's permissions is 777.)

Mod_python error: "PythonHandler myhandler"

Traceback (most recent call last):

  File "/usr/local/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "/data/HTTPD/htdocs/t/myhandler.py", line 7, in handler
    db = anydbm.open("/tmp/mp_sess_test.dbm",'c')

  File "/usr/local/lib/python2.4/anydbm.py", line 83, in open
    return mod.open(file, flag, mode)

  File "/usr/local/lib/python2.4/dbhash.py", line 16, in open
    return bsddb.hashopen(file, flag, mode)

  File "/usr/local/lib/python2.4/bsddb/__init__.py", line 285, in hashopen
    e = _openDBEnv()

  File "/usr/local/lib/python2.4/bsddb/__init__.py", line 339, in _openDBEnv
    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)

DBError: (147320808, 'Unknown error 147320808')


> 
> Time for me to sleep. Will see how you go in the morning.
> 
> Graham
>

From gavin at sz.net.cn  Tue Feb 21 07:15:25 2006
From: gavin at sz.net.cn (Gavin)
Date: Tue Feb 21 07:15:56 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
Message-ID: <1efc01c636e0$7ec9dad0$aa1ea8c0@frank>

fixed some error in the prev-message.
> 
> On 21/02/2006, at 10:14 PM, Gavin wrote:
>>> All I can suggest then is to modify lib/python/mod_python/ 
>>> Session.py in
>>> mod_python source code and add in some debug statements to see what
>>> session database name is being set to.
>>>
>>> class DbmSession(BaseSession):
>>>
>>>     def __init__(self, req, dbm=None, sid=0, secret=None,
>>> dbmtype=anydbm,
>>>                  timeout=0, lock=1):
>>>
>>>         if not dbm:
>>>             opts = req.get_options()
>>>             if opts.has_key("session_dbm"):
>>>                 dbm = opts["session_dbm"]
>>>             else:
>>>                 dbm = os.path.join(opts.get('session_directory',
>>> tempdir), 'mp_sess.dbm')
>>>
>>>         self._dbmfile = dbm
>>>         self._dbmtype = dbmtype
>>>
>>>         # XXX DEBUG
>>>
>>>         apache.log_error("dbmfile=%s"%self._dbmfile)
>>>
>>> Reinstall mod_python and restart Apache.
>>>
>>> Then when running test, look in Apache error_log to see where it
>>> thinks it is getting
>>> put. See if file exists if not in /tmp.
>>>
>> mp_sess_test.dbm file doesn't exists in /tmp. error_log file are as  
>> following:
> 
> Run an interactive Python session and try:
> 
> grumpy:~ grahamd$ python
> Python 2.3.5 (#1, Mar 20 2005, 20:38:20)
> [GCC 3.3 20030304 (Apple Computer, Inc. build 1809)] on darwin
> Type "help", "copyright", "credits" or "license" for more information.
> >>> import anydbm
> >>> db = anydbm.open("/tmp/mp_sess_test.dbm",'c')
> >>>

Yes, it works correctly.
> 
> If that works, try the same thing in a really simple mod_python handler
> independent of Session class. Ie.,
> 
> from mod_python import apache
> import anydbm
> 
> def handler(req):
>     req.content_type = 'text/plain'
>     db = anydbm.open("/tmp/mp_sess_test.dbm",'c')
>     db.close()
>     req.write('test ok')
>     return apache.OK
> 
> If it works outside of mod_python and not in mod_python, may be some
> problem to do with a mixing of wrong versions of shared libraries.
> 
> If it doesn't work outside of mod_python either, make sure permissions
> on "/tmp" directory look correct, or try creating it in a different  
> directory
> that you own.
right. It doesn't work . I create a test directory, and test as following:

<Directory "/data/HTTPD/htdocs/t">

  AddHandler mod_python  .m .cgi .py
  #PythonHandler mod_python.psp
  PythonHandler myhandler
  PythonOption session_dbm /opt/tmp/mp_sess.dbm
  PythonPath "['/data/HTTPD/py_api']+['/data/HTTPD/htdocs/t']+sys.path"
  PythonDebug On
  Options Indexes FollowSymLinks
  Order deny,allow
  Allow from all

</Directory>

Create a  myhandler.py file in t directory:
from mod_python import apache
import anydbm

def handler(req):
     req.content_type = 'text/plain'
     db = anydbm.open("/opt/tmp/mp_sess.dbm",'c')
     db.close()
     req.write('test ok')
     return apache.OK

when accessing by  http://myserver/t/myhandler.py.  An error
hanppen as following(the t directory 's permissions is 777.)

Mod_python error: "PythonHandler myhandler"

Traceback (most recent call last):

  File "/usr/local/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "/data/HTTPD/htdocs/t/myhandler.py", line 7, in handler
    db = anydbm.open("/opt/tmp/mp_sess.dbm",'c')

  File "/usr/local/lib/python2.4/anydbm.py", line 83, in open
    return mod.open(file, flag, mode)

  File "/usr/local/lib/python2.4/dbhash.py", line 16, in open
    return bsddb.hashopen(file, flag, mode)

  File "/usr/local/lib/python2.4/bsddb/__init__.py", line 285, in hashopen
    e = _openDBEnv()

  File "/usr/local/lib/python2.4/bsddb/__init__.py", line 339, in _openDBEnv
    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)

DBError: (147320808, 'Unknown error 147320808')


> 
> Time for me to sleep. Will see how you go in the morning.
> 
> Graham
>

From hockeysk8 at gmail.com  Tue Feb 21 09:22:27 2006
From: hockeysk8 at gmail.com (Kevin J. Smith)
Date: Tue Feb 21 09:22:33 2006
Subject: [mod_python] shared memory and module import problems
Message-ID: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>

Hi,

I have a page controller that all handlers import with "from
myapp.gui.pagecontroller import PageController".  Each handler is a class
derived from the PageController.

In the page controller, I have attempted to set up a shared memory cache for
all the controllers with code very similar to the following:

#...
import threading

CACHE_LOCK = threading.Lock()
cache = {}

def _fillCache():
    cache['one'] = '1'
    cache['two'] = '2'

class PageController:
# ...
    def __init__(self):
        #....
        if not len(cache.keys()):
            CACHE_LOCK.acquire()
            _fillCache()
            CACHE_LOCK.release()
        #...


However, I have discovered that this module is continually reimported
because it ALWAYS calls the _fillCache() function despite all the handlers
running within the same interpreter.

I have upgraded to mod_python 3.2.7 noticing that in the change log there is
a lot about fixing module import problems but my app is still behaving the
same way.

The flow of my app is that all requests are handled by a frontController
handler (this is explicitly set in the httpd config) which, after checking
the session and authentication and what-not and based on the request path,
forwards the request onto one of my pageController handlers via
util.redirect().  If I have followed Graham's notes about module importing
correctly, the frontController and pageController classes would be imported
via import_module() whereas the actual pageController module is imported via
the regular python import mechanism.

I have spent some time reading about the various "uniquenesses" of module
importing within mod_python but it hurt my head slightly and I didn't know
if most of it reflected the state of affairs in version 3.2.7.  From reading
Graham's page I don't believe I should have a problem with the
PageController handler continually being reimported but it certainly appears
to be doing just that.

Can someone shed some light on what I may be doing wrong or a possible
solution to setting up a shared cache within an interpreter?  I know that if
I run similar code outside of mod_python my cache design works fine.

Cheers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060221/c2fc83de/attachment.html
From nicolas at lehuen.com  Tue Feb 21 10:11:21 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Tue Feb 21 10:11:39 2006
Subject: [mod_python] shared memory and module import problems
In-Reply-To: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>
References: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>
Message-ID: <c298f2d70602210711h65788804t@mail.gmail.com>

Hi Kevin,

1) Please give us your full configuration : OS, Python version, Apache
version and the MPM you use. Your problem may be related to the fact
that you are using a forking MPM.

2) Are you sure your module is continually reimported ? Do you see
traces in the error log about that ? Your problem may be related to a
bug in your cache code.

3) If you want to re-use the importing mechanism that
mod_python.publisher uses, you can have a look at the ModuleCache
class found in mod_python/cache.py. Moreover, this package can be
re-used for all kind of caching issues (see the source code).

Regards,
Nicolas

2006/2/21, Kevin J. Smith <hockeysk8@gmail.com>:
> Hi,
>
> I have a page controller that all handlers import with "from
> myapp.gui.pagecontroller import PageController".  Each handler is a class
> derived from the PageController.
>
> In the page controller, I have attempted to set up a shared memory cache for
> all the controllers with code very similar to the following:
>
> #...
> import threading
>
> CACHE_LOCK = threading.Lock()
> cache = {}
>
> def _fillCache():
>     cache['one'] = '1'
>     cache['two'] = '2'
>
> class PageController:
> # ...
>     def __init__(self):
>         #....
>         if not len(cache.keys()):
>             CACHE_LOCK.acquire()
>             _fillCache()
>             CACHE_LOCK.release()
>         #...
>
>
> However, I have discovered that this module is continually reimported
> because it ALWAYS calls the _fillCache() function despite all the handlers
> running within the same interpreter.
>
> I have upgraded to mod_python 3.2.7 noticing that in the change log there is
> a lot about fixing module import problems but my app is still behaving the
> same way.
>
> The flow of my app is that all requests are handled by a frontController
> handler (this is explicitly set in the httpd config) which, after checking
> the session and authentication and what-not and based on the request path,
> forwards the request onto one of my pageController handlers via
> util.redirect().  If I have followed Graham's notes about module importing
> correctly, the frontController and pageController classes would be imported
> via import_module() whereas the actual pageController module is imported via
> the regular python import mechanism.
>
> I have spent some time reading about the various "uniquenesses" of module
> importing within mod_python but it hurt my head slightly and I didn't know
> if most of it reflected the state of affairs in version 3.2.7.  From reading
> Graham's page I don't believe I should have a problem with the
> PageController handler continually being reimported but it certainly appears
> to be doing just that.
>
> Can someone shed some light on what I may be doing wrong or a possible
> solution to setting up a shared cache within an interpreter?  I know that if
> I run similar code outside of mod_python my cache design works fine.
>
> Cheers
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>

From marcdm at phronein.com  Tue Feb 21 10:11:23 2006
From: marcdm at phronein.com (Marc D. Murray)
Date: Tue Feb 21 10:11:44 2006
Subject: [mod_python] shared memory and module import problems
In-Reply-To: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>
References: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>
Message-ID: <1140534684.14165.8.camel@localhost.localdomain>

If u can, you might want to have a look at memcached
http://www.danga.com/memcached/

It's pretty fast, it's an external process to Apache and there's a
simple python client available.

I use it to cache rendered pages then my handler checks for the page
there before trying to re-generate it.

.hth

/Marc DM

On Tue, 2006-02-21 at 06:22 -0800, Kevin J. Smith wrote:
> Hi,
> 
> I have a page controller that all handlers import with "from
> myapp.gui.pagecontroller import PageController".  Each handler is a
> class derived from the PageController.
> 
> In the page controller, I have attempted to set up a shared memory
> cache for all the controllers with code very similar to the
> following: 
> 
> #...
> import threading
> 
> CACHE_LOCK = threading.Lock()
> cache = {}
> 
> def _fillCache():
>     cache['one'] = '1'
>     cache['two'] = '2'
> 
> class PageController:
> # ...
>     def __init__(self): 
>         #....
>         if not len(cache.keys()):
>             CACHE_LOCK.acquire()
>             _fillCache()
>             CACHE_LOCK.release()
>         #...
> 
> 
> However, I have discovered that this module is continually reimported
> because it ALWAYS calls the _fillCache() function despite all the
> handlers running within the same interpreter. 
> 
> I have upgraded to mod_python 3.2.7 noticing that in the change log
> there is a lot about fixing module import problems but my app is still
> behaving the same way.
> 
> The flow of my app is that all requests are handled by a
> frontController handler (this is explicitly set in the httpd config)
> which, after checking the session and authentication and what-not and
> based on the request path, forwards the request onto one of my
> pageController handlers via util.redirect().  If I have followed
> Graham's notes about module importing correctly, the frontController
> and pageController classes would be imported via import_module()
> whereas the actual pageController module is imported via the regular
> python import mechanism. 
> 
> I have spent some time reading about the various "uniquenesses" of
> module importing within mod_python but it hurt my head slightly and I
> didn't know if most of it reflected the state of affairs in version
> 3.2.7.  From reading Graham's page I don't believe I should have a
> problem with the PageController handler continually being reimported
> but it certainly appears to be doing just that.
> 
> Can someone shed some light on what I may be doing wrong or a possible
> solution to setting up a shared cache within an interpreter?  I know
> that if I run similar code outside of mod_python my cache design works
> fine. 
> 
> Cheers
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From rdavisunr at yahoo.com  Tue Feb 21 12:02:31 2006
From: rdavisunr at yahoo.com (Robert Thomas Davis)
Date: Tue Feb 21 12:02:35 2006
Subject: [mod_python] callable __auth__
Message-ID: <20060221170231.8969.qmail@web81204.mail.mud.yahoo.com>

Hello everyone

...after spending a few hours with no success I
decided it was time to ask the experts...

First, my httpd.conf (the part relevant to mod_python)

<Directory />
    Options FollowSymLinks
    AllowOverride None
</Directory>

<Directory /usr/local/matrix/http>
    SetHandler mod_python
    PythonHandler mod_python.publisher
    PythonDebug On
</Directory>

<Directory /usr/local/matrix/http/images>
    SetHandler default
</Directory>

<Directory /usr/local/matrix/http/css>
    SetHandler default
</Directory>

<Directory /usr/local/matrix/http/javascript>
    SetHandler default
</Directory>

<Directory /usr/local/matrix/http/data>
    SetHandler default
</Directory>

<Directory /usr/local/matrix/http/docs>
    SetHandler default
</Directory>


In the directory /usr/local/matrix I have a file
called "index.py"; in that file there are some
functions...

(shortened, but you get the idea)

def __auth__(req, user, pass):
        # this is 1 or 0 depending on status of
session
        return result

def index(req):

        return main(req)

def main(req):

        return stuff

def foo(req):

        return stuff


def bar(req):

        return stuff


Now for the problem...when I have things setup like
above the browser will popup the expected
user/password box.  HOWEVER; if I nest the def
__auth__(req, user, pass): inside of one of the other
functions I get no prompt for user/password!!

Ideas?

Thanks everyone!
From hockeysk8 at gmail.com  Tue Feb 21 12:46:42 2006
From: hockeysk8 at gmail.com (Kevin J. Smith)
Date: Tue Feb 21 12:46:47 2006
Subject: [mod_python] shared memory and module import problems
In-Reply-To: <c298f2d70602210711h65788804t@mail.gmail.com>
References: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>
	<c298f2d70602210711h65788804t@mail.gmail.com>
Message-ID: <1ee0630e0602210946o7c3e1a29pe881710e91031fea@mail.gmail.com>

In trying to answer the question of which MPM model the server uses I think
I may have come across my answer.  In Graham's article
http://www.dscpl.com.au/articles/modpython-004.html (not sure why I did run
across this article in my many Google searches for an answer) he has
explained the behaviour of mod_python with the various MPM models.

It is most likely that I am using a prefork model because the server is
running out-of-the-box fedora (don't have access to the server at the
moment.)  And therefore, if I have understood Graham's article correctly,
with a prefork model, even though the interpreter may be named the same,
different requests may be picked up by different apache child processes
therefore they will not be sharing the same memory.  To quote from the
article:

"This ability to access the same global data from any request handler and
for that data to persist for the lifetime of that instance of Apache is not
present when either of the "prefork" or "worker" modes are used. This is
because handlers can be executing within the context of distinct child
processes, each with their own set of global data unique to that child
process. Further, the global data present within a particular child process
only exists for the lifetime of that child process and Apache could shutdown
and kill off a child process at any time."

This certainly makes sense within the prefork model.  I am not sure why it
wouldn't work for worker threads because in my mind they should be sharing
the same memory?  Nonetheless, I need my handler to be portable therefore I
will have to implement my own memory cache with something like
memcached (http://www.danga.com/memcached/)
<http://www.danga.com/memcached/>or the like (Django uses memcached for a
similar purpose.)

Somebody please correct me if I have any of this wrong.

Cheers

On 2/21/06, Nicolas Lehuen <nicolas@lehuen.com> wrote:
>
> Hi Kevin,
>
> 1) Please give us your full configuration : OS, Python version, Apache
> version and the MPM you use. Your problem may be related to the fact
> that you are using a forking MPM.
>
> 2) Are you sure your module is continually reimported ? Do you see
> traces in the error log about that ? Your problem may be related to a
> bug in your cache code.
>
> 3) If you want to re-use the importing mechanism that
> mod_python.publisher uses, you can have a look at the ModuleCache
> class found in mod_python/cache.py. Moreover, this package can be
> re-used for all kind of caching issues (see the source code).
>
> Regards,
> Nicolas
>
> 2006/2/21, Kevin J. Smith <hockeysk8@gmail.com>:
> > Hi,
> >
> > I have a page controller that all handlers import with "from
> > myapp.gui.pagecontroller import PageController".  Each handler is a
> class
> > derived from the PageController.
> >
> > In the page controller, I have attempted to set up a shared memory cache
> for
> > all the controllers with code very similar to the following:
> >
> > #...
> > import threading
> >
> > CACHE_LOCK = threading.Lock()
> > cache = {}
> >
> > def _fillCache():
> >     cache['one'] = '1'
> >     cache['two'] = '2'
> >
> > class PageController:
> > # ...
> >     def __init__(self):
> >         #....
> >         if not len(cache.keys()):
> >             CACHE_LOCK.acquire()
> >             _fillCache()
> >             CACHE_LOCK.release()
> >         #...
> >
> >
> > However, I have discovered that this module is continually reimported
> > because it ALWAYS calls the _fillCache() function despite all the
> handlers
> > running within the same interpreter.
> >
> > I have upgraded to mod_python 3.2.7 noticing that in the change log
> there is
> > a lot about fixing module import problems but my app is still behaving
> the
> > same way.
> >
> > The flow of my app is that all requests are handled by a frontController
> > handler (this is explicitly set in the httpd config) which, after
> checking
> > the session and authentication and what-not and based on the request
> path,
> > forwards the request onto one of my pageController handlers via
> > util.redirect().  If I have followed Graham's notes about module
> importing
> > correctly, the frontController and pageController classes would be
> imported
> > via import_module() whereas the actual pageController module is imported
> via
> > the regular python import mechanism.
> >
> > I have spent some time reading about the various "uniquenesses" of
> module
> > importing within mod_python but it hurt my head slightly and I didn't
> know
> > if most of it reflected the state of affairs in version 3.2.7.  From
> reading
> > Graham's page I don't believe I should have a problem with the
> > PageController handler continually being reimported but it certainly
> appears
> > to be doing just that.
> >
> > Can someone shed some light on what I may be doing wrong or a possible
> > solution to setting up a shared cache within an interpreter?  I know
> that if
> > I run similar code outside of mod_python my cache design works fine.
> >
> > Cheers
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060221/e861bb19/attachment.html
From nicolas at lehuen.com  Tue Feb 21 14:40:43 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Tue Feb 21 14:40:47 2006
Subject: [mod_python] shared memory and module import problems
In-Reply-To: <1ee0630e0602210946o7c3e1a29pe881710e91031fea@mail.gmail.com>
References: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>
	<c298f2d70602210711h65788804t@mail.gmail.com>
	<1ee0630e0602210946o7c3e1a29pe881710e91031fea@mail.gmail.com>
Message-ID: <c298f2d70602211140s258327c8l@mail.gmail.com>

Kevin

Your analysis is correct. By using Fedora you are certainly using by
default the prefork MPM. This causes the problem you are observing.

Regards,
Nicolas


2006/2/21, Kevin J. Smith <hockeysk8@gmail.com>:
> In trying to answer the question of which MPM model the server uses I think
> I may have come across my answer.  In Graham's article
> http://www.dscpl.com.au/articles/modpython-004.html (not
> sure why I did run across this article in my many Google searches for an
> answer) he has explained the behaviour of mod_python with the various MPM
> models.
>
> It is most likely that I am using a prefork model because the server is
> running out-of-the-box fedora (don't have access to the server at the
> moment.)  And therefore, if I have understood Graham's article correctly,
> with a prefork model, even though the interpreter may be named the same,
> different requests may be picked up by different apache child processes
> therefore they will not be sharing the same memory.  To quote from the
> article:
>
> "This ability to access the same global data from any request handler and
> for that data to persist for the lifetime of that instance of Apache is not
> present when either of the "prefork" or "worker" modes are used. This is
> because handlers can be executing within the context of distinct child
> processes, each with their own set of global data unique to that child
> process. Further, the global data present within a particular child process
> only exists for the lifetime of that child process and Apache could shutdown
> and kill off a child process at any time."
>
> This certainly makes sense within the prefork model.  I am not sure why it
> wouldn't work for worker threads because in my mind they should be sharing
> the same memory?  Nonetheless, I need my handler to be portable therefore I
> will have to implement my own memory cache with something like memcached
> (http://www.danga.com/memcached/) or the like (Django uses
> memcached for a similar purpose.)
>
> Somebody please correct me if I have any of this wrong.
>
> Cheers
>
>
> On 2/21/06, Nicolas Lehuen <nicolas@lehuen.com> wrote:
> >
> > Hi Kevin,
> >
> > 1) Please give us your full configuration : OS, Python version, Apache
> > version and the MPM you use. Your problem may be related to the fact
> > that you are using a forking MPM.
> >
> > 2) Are you sure your module is continually reimported ? Do you see
> > traces in the error log about that ? Your problem may be related to a
> > bug in your cache code.
> >
> > 3) If you want to re-use the importing mechanism that
> > mod_python.publisher uses, you can have a look at the ModuleCache
> > class found in mod_python/cache.py. Moreover, this package can be
> > re-used for all kind of caching issues (see the source code).
> >
> > Regards,
> > Nicolas
> >
> > 2006/2/21, Kevin J. Smith < hockeysk8@gmail.com>:
> > > Hi,
> > >
> > > I have a page controller that all handlers import with "from
> > > myapp.gui.pagecontroller import PageController".  Each handler is a
> class
> > > derived from the PageController.
> > >
> > > In the page controller, I have attempted to set up a shared memory cache
> for
> > > all the controllers with code very similar to the following:
> > >
> > > #...
> > > import threading
> > >
> > > CACHE_LOCK = threading.Lock()
> > > cache = {}
> > >
> > > def _fillCache():
> > >     cache['one'] = '1'
> > >     cache['two'] = '2'
> > >
> > > class PageController:
> > > # ...
> > >     def __init__(self):
> > >         #....
> > >         if not len(cache.keys()):
> > >             CACHE_LOCK.acquire()
> > >             _fillCache()
> > >             CACHE_LOCK.release()
> > >         #...
> > >
> > >
> > > However, I have discovered that this module is continually reimported
> > > because it ALWAYS calls the _fillCache() function despite all the
> handlers
> > > running within the same interpreter.
> > >
> > > I have upgraded to mod_python 3.2.7 noticing that in the change log
> there is
> > > a lot about fixing module import problems but my app is still behaving
> the
> > > same way.
> > >
> > > The flow of my app is that all requests are handled by a frontController
> > > handler (this is explicitly set in the httpd config) which, after
> checking
> > > the session and authentication and what-not and based on the request
> path,
> > > forwards the request onto one of my pageController handlers via
> > > util.redirect().  If I have followed Graham's notes about module
> importing
> > > correctly, the frontController and pageController classes would be
> imported
> > > via import_module() whereas the actual pageController module is imported
> via
> > > the regular python import mechanism.
> > >
> > > I have spent some time reading about the various "uniquenesses" of
> module
> > > importing within mod_python but it hurt my head slightly and I didn't
> know
> > > if most of it reflected the state of affairs in version 3.2.7.  From
> reading
> > > Graham's page I don't believe I should have a problem with the
> > > PageController handler continually being reimported but it certainly
> appears
> > > to be doing just that.
> > >
> > > Can someone shed some light on what I may be doing wrong or a possible
> > > solution to setting up a shared cache within an interpreter?  I know
> that if
> > > I run similar code outside of mod_python my cache design works fine.
> > >
> > > Cheers
> > >
> > >
> > > _______________________________________________
> > > Mod_python mailing list
> > > Mod_python@modpython.org
> > >
> http://mailman.modpython.org/mailman/listinfo/mod_python
> > >
> > >
> > >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
>

From grahamd at dscpl.com.au  Tue Feb 21 14:40:43 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 21 14:40:53 2006
Subject: [mod_python] callable __auth__
In-Reply-To: <20060221170231.8969.qmail@web81204.mail.mud.yahoo.com>
References: <20060221170231.8969.qmail@web81204.mail.mud.yahoo.com>
Message-ID: <F22F0461-2C6B-4C28-A88C-C82AD9A26344@dscpl.com.au>


On 22/02/2006, at 4:02 AM, Robert Thomas Davis wrote:

>
> Now for the problem...when I have things setup like
> above the browser will popup the expected
> user/password box.  HOWEVER; if I nest the def
> __auth__(req, user, pass): inside of one of the other
> functions I get no prompt for user/password!!
>
> Ideas?

Using __auth__() functions inside of a function is fragile and I would
not recommend using it. Personally I would like to see that feature
removed, with __auth__() functions only being allowed at module
scope or attached to object instances.

For details of problems, see:

   https://issues.apache.org/jira/browse/MODPYTHON-43

Basically, ensure you have __auth__() functions as very first bit of
code in function.

If that doesn't seem to match, post skeleton of your code showing how
you nested it.

Graham
From rdavisunr at yahoo.com  Tue Feb 21 14:47:57 2006
From: rdavisunr at yahoo.com (Robert Thomas Davis)
Date: Tue Feb 21 14:48:01 2006
Subject: [mod_python] callable __auth__
Message-ID: <20060221194757.85378.qmail@web81204.mail.mud.yahoo.com>

Hello Graham

Thanks; in my investigation I had already come across
that problem description...and tried it to no avail.

this was how I was trying to do it...

def foo(req):

   def __auth__(req, user, pass):
      #do session and auth stuff
   
   # code to protect

Thanks

From jpg at jgassociates.ca  Tue Feb 21 15:55:00 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Tue Feb 21 15:54:58 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
In-Reply-To: <03a101c6368f$7a079ba0$aa1ea8c0@frank>
References: <03a101c6368f$7a079ba0$aa1ea8c0@frank>
Message-ID: <43FB7E24.4050902@jgassociates.ca>

Gavin wrote:
> Hello all,
> 
> 1.Redhat AS3.0
> 2.apache 2.0.55
> 3.python2.4.2
> 4.mod_python3.2.7
> 
> compile with:
> ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python-src=/usr/tools/Python-2.4.2 --with-max-locks=32

I'm not sure if this specifically relates to your problem, but there may
be a problem with the way you've compiled mod_python.

Your other emails indicate you have python 2.3.5 installed as well as
well as python 2.4. You need to use --with-python, not --with-python-src
in your configure. The --with-python-src switch is only required for
building the documentation and does not tell configure which python
binary to use. Make sure you are using the correct by version by
configuring and compiling again:

./configure --with-apxs=/usr/local/apache2/bin/apxs
--with-python=/path/to/python2.4-binary --with-max-locks=32

Without the --with-python option, configure will try to find python on
your path. On AS3.0 this may be python 3.2.5, unless you've changed your
default OS configuration.

When you tried Graham's interpreter test, are you sure you were using
python2.4 and not python2.3? Perhaps you could try again and cut and
paste the output? eg.

jim@carbon:/tmp$ python
Python 2.3.5 (#2, Nov 20 2005, 16:40:39)
[GCC 4.0.3 20051111 (prerelease) (Debian 4.0.2-4)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import anydbm
>>> db = anydbm.open('/tmp/mp_sess_test.dbm','c')
>>>

Jim
From jpg at jgassociates.ca  Tue Feb 21 16:00:28 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Tue Feb 21 16:00:19 2006
Subject: [mod_python] Re: Mike's psp upload
In-Reply-To: <43FAB7CE.103@natlab.research.philips.com>
References: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>	<43F9638F.4060509@natlab.research.philips.com>	<5f56302b0602201605s455f39a2g46cc5b55effdb05e@mail.gmail.com>
	<43FAB7CE.103@natlab.research.philips.com>
Message-ID: <43FB7F6C.9010308@jgassociates.ca>

Mike,

I haven't been following this thread too closely, so maybe you can tell 
me if we introduced a regression in 3.2, or if this is just related to 
the outstanding problems from 3.1.4?

Jim


From jpg at jgassociates.ca  Tue Feb 21 16:19:25 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Tue Feb 21 16:19:10 2006
Subject: [mod_python] shared memory and module import problems
In-Reply-To: <1ee0630e0602210946o7c3e1a29pe881710e91031fea@mail.gmail.com>
References: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>	<c298f2d70602210711h65788804t@mail.gmail.com>
	<1ee0630e0602210946o7c3e1a29pe881710e91031fea@mail.gmail.com>
Message-ID: <43FB83DD.6090503@jgassociates.ca>

Kevin J. Smith wrote:
> This certainly makes sense within the prefork model.  I am not sure why it
> wouldn't work for worker threads because in my mind they should be sharing
> the same memory? 

Not quite. Think of worker-mpm as a prefork/threaded hybrid. With the 
worker-mpm, you can still have multiple apache child processes (similar 
to prefork), but each child process has multiple threads (similar to 
threaded-mpm). Depending on your perspective, worker-mpm either gives 
you the best or the worst of both worlds. With worker-mpm, you still end 
up with multiple copies of the python interpreter and data, just not as 
many as with prefork.

One of the challenges of working with mod_python is adapting your 
knowledge of python to the somewhat strange world of python inside 
Apache. And of course the physics of that world will change depending on 
which mpm you are using. :)

Jim
From jpg at jgassociates.ca  Tue Feb 21 16:31:00 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Tue Feb 21 16:31:08 2006
Subject: [mod_python] High Traffic Round 2
In-Reply-To: <43F9DA5B.6060401@natlab.research.philips.com>
References: <1140413838.12776.18.camel@localhost.localdomain>
	<43F9DA5B.6060401@natlab.research.philips.com>
Message-ID: <43FB8694.4020607@jgassociates.ca>

Mike Looijmans wrote:
> Could it be that some external lock is blocking your output (e.g. DB 
> lock, file lock, printf to stdout)?

I'm inclined to agree. I still think there is some locking issue that is 
either slowing things down, or deadlocking in the cleanup phase before 
things like db connections can be closed. I'm thinking the problem is 
occurring after you send the result to the client, so it's not obvious 
that there is bug. This would explain why you are hitting MaxClient and 
db connection limits.

> Marc D. Murray wrote:

>> PS. Where's the mod_python irc channel?

No such beast.

Jim

From gavin at sz.net.cn  Tue Feb 21 20:09:44 2006
From: gavin at sz.net.cn (Gavin)
Date: Tue Feb 21 20:09:45 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
Message-ID: <01df01c6374c$aac57fb0$aa1ea8c0@frank>

> Gavin wrote:
>> Hello all,
>> 
>> 1.Redhat AS3.0
>> 2.apache 2.0.55
>> 3.python2.4.2
>> 4.mod_python3.2.7
>> 
>> compile with:
>> ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python-src=/usr/tools/Python-2.4.2 --with-max-locks=32
> 
> I'm not sure if this specifically relates to your problem, but there may
> be a problem with the way you've compiled mod_python.
> 
> Your other emails indicate you have python 2.3.5 installed as well as
> well as python 2.4. You need to use --with-python, not --with-python-src
> in your configure. The --with-python-src switch is only required for
> building the documentation and does not tell configure which python
> binary to use. Make sure you are using the correct by version by
> configuring and compiling again:
> 
> ./configure --with-apxs=/usr/local/apache2/bin/apxs
> --with-python=/path/to/python2.4-binary --with-max-locks=32
> 
> Without the --with-python option, configure will try to find python on
> your path. On AS3.0 this may be python 3.2.5, unless you've changed your
> default OS configuration.
> 
> When you tried Graham's interpreter test, are you sure you were using
> python2.4 and not python2.3? Perhaps you could try again and cut and
> paste the output? eg.
> 
[root@svrb tmp]# /usr/bin/python
Python 2.4.2 (#1, Nov 24 2005, 16:48:31) 
[GCC 3.2.3 20030502 (Red Hat Linux 3.2.3-42)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 
[root@svrb tmp]# python
Python 2.4.2 (#1, Nov 24 2005, 16:48:31) 
[GCC 3.2.3 20030502 (Red Hat Linux 3.2.3-42)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import anydbm
>>> db = anydbm.open('/tmp/mp_sess_test.dbm','c')
>>> db.close()


> jim@carbon:/tmp$ python
> Python 2.3.5 (#2, Nov 20 2005, 16:40:39)
> [GCC 4.0.3 20051111 (prerelease) (Debian 4.0.2-4)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
>>>> import anydbm
>>>> db = anydbm.open('/tmp/mp_sess_test.dbm','c')
>>>>
> 
> Jim
>

From nicolas at lehuen.com  Tue Feb 21 21:15:58 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Tue Feb 21 21:16:05 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
In-Reply-To: <01df01c6374c$aac57fb0$aa1ea8c0@frank>
References: <01df01c6374c$aac57fb0$aa1ea8c0@frank>
Message-ID: <c298f2d70602211815h105d95c7l@mail.gmail.com>

Hi Gavin,

Have you tried fixing your compilation configuration as Jim suggested
? The fact that Python 2.4 is your default Python means nothing for
the user Apache is running under.

Would it be possible that your Apache server also loads another
version of the BSDDB, which would explain the failure in the server
context but not at the command line ? I'm thinking about something
like Subversion and its mod_dav_svn which uses BSDDB 4.3.

Regards,
Nicolas

[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163]
PythonHandler mod_python.psp:   File
"/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line
309, in _get_dbm\n    result = self._dbmtype.open(self._dbmfile, 'c')


2006/2/22, Gavin <gavin@sz.net.cn>:
> > Gavin wrote:
> >> Hello all,
> >>
> >> 1.Redhat AS3.0
> >> 2.apache 2.0.55
> >> 3.python2.4.2
> >> 4.mod_python3.2.7
> >>ui
> >> compile with:
> >> ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python-src=/usr/tools/Python-2.4.2 --with-max-locks=32
> >
> > I'm not sure if this specifically relates to your problem, but there may
> > be a problem with the way you've compiled mod_python.
> >
> > Your other emails indicate you have python 2.3.5 installed as well as
> > well as python 2.4. You need to use --with-python, not --with-python-src
> > in your configure. The --with-python-src switch is only required for
> > building the documentation and does not tell configure which python
> > binary to use. Make sure you are using the correct by version by
> > configuring and compiling again:
> >
> > ./configure --with-apxs=/usr/local/apache2/bin/apxs
> > --with-python=/path/to/python2.4-binary --with-max-locks=32
> >
> > Without the --with-python option, configure will try to find python on
> > your path. On AS3.0 this may be python 3.2.5, unless you've changed your
> > default OS configuration.
> >
> > When you tried Graham's interpreter test, are you sure you were using
> > python2.4 and not python2.3? Perhaps you could try again and cut and
> > paste the output? eg.
> >
> [root@svrb tmp]# /usr/bin/python
> Python 2.4.2 (#1, Nov 24 2005, 16:48:31)
> [GCC 3.2.3 20030502 (Red Hat Linux 3.2.3-42)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
> >>>
> [root@svrb tmp]# python
> Python 2.4.2 (#1, Nov 24 2005, 16:48:31)
> [GCC 3.2.3 20030502 (Red Hat Linux 3.2.3-42)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
> >>> import anydbm
> >>> db = anydbm.open('/tmp/mp_sess_test.dbm','c')
> >>> db.close()
>
>
> > jim@carbon:/tmp$ python
> > Python 2.3.5 (#2, Nov 20 2005, 16:40:39)
> > [GCC 4.0.3 20051111 (prerelease) (Debian 4.0.2-4)] on linux2
> > Type "help", "copyright", "credits" or "license" for more information.
> >>>> import anydbm
> >>>> db = anydbm.open('/tmp/mp_sess_test.dbm','c')
> >>>>
> >
> > Jim
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From list at joreybump.com  Wed Feb 22 01:28:38 2006
From: list at joreybump.com (Jorey Bump)
Date: Wed Feb 22 01:28:54 2006
Subject: [mod_python] shared memory and module import problems
In-Reply-To: <1ee0630e0602210946o7c3e1a29pe881710e91031fea@mail.gmail.com>
References: <1ee0630e0602210622l327f87efw1dc3f30656d9f6a4@mail.gmail.com>	<c298f2d70602210711h65788804t@mail.gmail.com>
	<1ee0630e0602210946o7c3e1a29pe881710e91031fea@mail.gmail.com>
Message-ID: <43FC0496.1070909@joreybump.com>

Kevin J. Smith wrote:
> In trying to answer the question of which MPM model the server uses

There's no need to guess, just run this command:

  httpd -V

If the MPM is prefork, the following will appear in the list:

  -D APACHE_MPM_DIR="server/mpm/prefork"

If you have multiple Apache installations, be sure to use the full path 
to the httpd binary in question.

From nlv11281 at natlab.research.philips.com  Wed Feb 22 02:14:50 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Wed Feb 22 02:15:01 2006
Subject: [mod_python] Re: Mike's psp upload
In-Reply-To: <43FB7F6C.9010308@jgassociates.ca>
References: <5f56302b0602180607p593fe5bbp2a0740d3e08790cd@mail.gmail.com>	<43F9638F.4060509@natlab.research.philips.com>	<5f56302b0602201605s455f39a2g46cc5b55effdb05e@mail.gmail.com>
	<43FAB7CE.103@natlab.research.philips.com>
	<43FB7F6C.9010308@jgassociates.ca>
Message-ID: <43FC0F6A.6070804@natlab.research.philips.com>

In fact, it's a new feature that does not work 'as advertised'. Since 
nobady was actively using it back then, it never occured.

What COULD be possible with the callback is things like unzipping files 
while they are uploaded, without temp files. But this will never work 
with the current code, which only allows a make_file callback that 
creates "real" file objects (not file-like objects like Zipfile or Tarfile)

I've tried the patch I made for util.py and it works just as fine on 
3.2.8 as it did on the previous releases.



Mike Looijmans
Philips Natlab / Topic Automation


Jim Gallacher wrote:
> Mike,
> 
> I haven't been following this thread too closely, so maybe you can tell 
> me if we introduced a regression in 3.2, or if this is just related to 
> the outstanding problems from 3.1.4?
> 
> Jim
> 
> 

From mvanaswegen at gmail.com  Wed Feb 22 02:21:16 2006
From: mvanaswegen at gmail.com (marinus van aswegen)
Date: Wed Feb 22 02:21:21 2006
Subject: [mod_python] mod_python advice needed
Message-ID: <ffa39deb0602212321r26b392bcp5bedfb1d7b8678ab@mail.gmail.com>

Hi All

I'm new to mod_python with many years of coding experience in various
languages. I'm building a simple site which will take orders from clients
and pass them on to my database. I need some advice, so please bear with me.
I looked at some of the options out there an mod_python looked like the way
to go for me, I just wish there was more examples. I've been able to do some
basic form posts to a mysql database. I need to do the following, your input
would be appreciated.

1. create a login page (session, cookies, auth) manage the state of the user
(i want to track this in the backend)

2. create a page where users can place orders, I would like to be able to do
a post data without having to redraw the whole page. The example below
allows the user to enter data and submit it, the data entered will be shown
in a table below.

data [              ] [submit]

data entered 1
data entered 2

3. Any suggestions you could make to help me get this off the ground
quickly.

Regards

marinus
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060222/eb3914b6/attachment-0001.html
From nlv11281 at natlab.research.philips.com  Wed Feb 22 02:36:41 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Wed Feb 22 02:36:45 2006
Subject: [mod_python] mod_python advice needed
In-Reply-To: <ffa39deb0602212321r26b392bcp5bedfb1d7b8678ab@mail.gmail.com>
References: <ffa39deb0602212321r26b392bcp5bedfb1d7b8678ab@mail.gmail.com>
Message-ID: <43FC1489.3060103@natlab.research.philips.com>

> 1. create a login page (session, cookies, auth) manage the state of the 
> user (i want to track this in the backend)

That is web programming "in general". If you have a DB in place already, 
it makes sense to use that for your authentication and session 
management. Less session is better, usually an authorization cookie is 
enough and further session data is not needed.

> 2. create a page where users can place orders, I would like to be able 
> to do a post data without having to redraw the whole page.

That would require some Javascript wizardry. Though probably possible, I 
strongly advise to consider whether this is really a "problem". It's 
like building a plane and requiring it to float - it will never be a 
good boat that way.

Click a button/link and go another page is the way it's supposed to be.
I have done continuously (every 1 sec) updating graphics for a home 
security system, and when built smartly (simply using caching, without 
any client side scripting) it updated sensor states without even a 
'flicker'.


From gavin at sz.net.cn  Wed Feb 22 03:36:16 2006
From: gavin at sz.net.cn (Gavin)
Date: Wed Feb 22 03:36:25 2006
Subject: [mod_python] The Session problem with mod_python3.2.7
References: <01df01c6374c$aac57fb0$aa1ea8c0@frank>
	<c298f2d70602211815h105d95c7l@mail.gmail.com>
Message-ID: <001501c6378b$0bcbdf50$aa1ea8c0@frank>

Hi Nicolas,

>Hi Gavin,

>Have you tried fixing your compilation configuration as Jim suggested
>? The fact that Python 2.4 is your default Python means nothing for
>the user Apache is running under.

>Would it be possible that your Apache server also loads another
>version of the BSDDB, which would explain the failure in the server
>context but not at the command line ? I'm thinking about something
>like Subversion and its mod_dav_svn which uses BSDDB 4.3.

I installed BerkeleyDB.4.3 and BerkeleyDB.4.2 ago,  Now I remove 
BerkeleyDB.4.2, and recompile Python2.4.2, apache2.0.55, 
mod_python3.2.7 again.  Everything works correctly. So I think
The problem may be  resulted by BerkeleyDB.4.2.

Thanks Nicolas and Graham.

Sincerely,

Frank Ning

>[Tue Feb 21 19:23:14 2006] [error] [client 202.104.96.163]
>PythonHandler mod_python.psp:   File
>"/usr/local/lib/python2.4/site-packages/mod_python/Session.py", line
>309, in _get_dbm\n    result = self._dbmtype.open(self._dbmfile, 'c')


2006/2/22, Gavin <gavin@sz.net.cn>:
> > Gavin wrote:
> >> Hello all,
> >>
> >> 1.Redhat AS3.0
> >> 2.apache 2.0.55
> >> 3.python2.4.2
> >> 4.mod_python3.2.7
> >>ui
> >> compile with:
> >> ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python-src=/usr/tools/Python-2.4.2 --with-max-locks=32
> >
> > I'm not sure if this specifically relates to your problem, but there may
> > be a problem with the way you've compiled mod_python.
> >
> > Your other emails indicate you have python 2.3.5 installed as well as
> > well as python 2.4. You need to use --with-python, not --with-python-src
> > in your configure. The --with-python-src switch is only required for
> > building the documentation and does not tell configure which python
> > binary to use. Make sure you are using the correct by version by
> > configuring and compiling again:
> >
> > ./configure --with-apxs=/usr/local/apache2/bin/apxs
> > --with-python=/path/to/python2.4-binary --with-max-locks=32
> >
> > Without the --with-python option, configure will try to find python on
> > your path. On AS3.0 this may be python 3.2.5, unless you've changed your
> > default OS configuration.
> >
> > When you tried Graham's interpreter test, are you sure you were using
> > python2.4 and not python2.3? Perhaps you could try again and cut and
> > paste the output? eg.
> >
> [root@svrb tmp]# /usr/bin/python
> Python 2.4.2 (#1, Nov 24 2005, 16:48:31)
> [GCC 3.2.3 20030502 (Red Hat Linux 3.2.3-42)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
> >>>
> [root@svrb tmp]# python
> Python 2.4.2 (#1, Nov 24 2005, 16:48:31)
> [GCC 3.2.3 20030502 (Red Hat Linux 3.2.3-42)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
> >>> import anydbm
> >>> db = anydbm.open('/tmp/mp_sess_test.dbm','c')
> >>> db.close()
>
>
> > jim@carbon:/tmp$ python
> > Python 2.3.5 (#2, Nov 20 2005, 16:40:39)
> > [GCC 4.0.3 20051111 (prerelease) (Debian 4.0.2-4)] on linux2
> > Type "help", "copyright", "credits" or "license" for more information.
> >>>> import anydbm
> >>>> db = anydbm.open('/tmp/mp_sess_test.dbm','c')
> >>>>
> >
> > Jim
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From grahamd at dscpl.com.au  Wed Feb 22 05:17:02 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Feb 22 05:17:32 2006
Subject: [mod_python] callable __auth__
In-Reply-To: <20060221194757.85378.qmail@web81204.mail.mud.yahoo.com>
References: <20060221194757.85378.qmail@web81204.mail.mud.yahoo.com>
Message-ID: <1FFB431B-693F-4917-9208-4865D7DDE72F@dscpl.com.au>


On 22/02/2006, at 6:47 AM, Robert Thomas Davis wrote:

> Hello Graham
>
> Thanks; in my investigation I had already come across
> that problem description...and tried it to no avail.
>
> this was how I was trying to do it...
>
> def foo(req):
>
>    def __auth__(req, user, pass):
>       #do session and auth stuff
>
>    # code to protect

Did you at least change the auth realm when you moved the function?
The browser will remember the username/password for the prior
realm until the browser is quit. This can often be a trap when testing
authentication stuff.

Have you added logging into your auth function to check whether it
is being called or not?

Can you create the most minimal example you think demonstrates the
problem and post it on the list? You keep posting snippets and without
it all, hard to tell if there are things that might have been missed.

Graham
From bud at comune.grosseto.it  Wed Feb 22 06:32:13 2006
From: bud at comune.grosseto.it (Bud P. Bruegger)
Date: Wed Feb 22 06:32:24 2006
Subject: [mod_python] req.user and SSL?
In-Reply-To: <5c06fa770602200853i1d70a6edybcea22824f17d9e9@mail.gmail.co
 m>
References: <5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
	<5.2.1.1.0.20060217145833.03d4ca00@mail.comune.grosseto.it>
	<531A44FA-474B-4815-B8E7-4092DB323DF2@dscpl.com.au>
	<5.2.1.1.0.20060220103731.03bfede0@mail.comune.grosseto.it>
Message-ID: <5.2.1.1.0.20060222122939.0325cfe8@mail.comune.grosseto.it>

Hi Deron,

I just backported your patch to Debian's source package of mod-python, 
compiled the package, installed, and IT WORKS !  Thanks again!

Our testing has been minimal so far, but it should see operational use 
somethime soon.

cheers
-b

At 11.53 20/02/2006 -0500, Deron Meranda wrote:
>As Graham said the trunk is probably okay.  But if you're just a bit
>more cautious, you can grab a stable release (3.2.7 for instance) and
>just apply the one set of patches in MODPYTHON-94.
>
>If you do that though just one head's up.... the patch attached to the
>issue uses the method name "ssl_var()", whereas it is integrated on
>the trunk (and in future relases) as "ssl_var_lookup()".  There's a
>couple other tiny differences too...so read all the notes to the #94
>issue and decide for yourself whether you go with the whole trunk or
>just this patch.
>
>Also, any feedback (good or bad) is certainly welcome, as this SSL
>functionality gets much narowwer testing than other parts of
>mod_python.
>--
>Deron Meranda


-------------------------------------------------------------------------------------------------
Ing. Bud P. Bruegger, Ph.D.                 +39-0564-488577 
(voice),  -21139 (fax)
Servizio Elaborazione Dati                    e-mail:  bud@comune.grosseto.it
Comune di Grosseto                            jabber:  bud@jabber.no
Via Ginori, 
43                                      http://www.comune.grosseto.it/cie/
58100 Grosseto (Tuscany, 
Italy)           http://www.comune.grosseto.it/interopEID/ 

From alkamel84 at msn.com  Thu Feb 23 03:28:03 2006
From: alkamel84 at msn.com (bint alsaid)
Date: Thu Feb 23 03:28:11 2006
Subject: [mod_python] [SPAM] python
Message-ID: <BAY106-F1418BBE94AFAA15EB9A872AAF20@phx.gbl>

An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060223/fad5b762/attachment.html
From gianni at infodataweb.com  Thu Feb 23 06:44:05 2006
From: gianni at infodataweb.com (Gianni - Infodata)
Date: Thu Feb 23 06:40:22 2006
Subject: [mod_python] invalid command pythonhandler
Message-ID: <001101c6386e$822022e0$6364a8c0@InfoData.local>

Hi,

I have followed all indications to install python module for apache on the
web page :
(http://www.modpython.org/live/mod_python-2.7.8/doc-html/app-wininst.html)
but when I start the server, this are the error lines :

"Syntax error on line 670 of c:/program files/apache
group/apache/conf/httpd:
Invalid command 'PythonHandler', perhaps mis-spelled or defined by a module
included in the server configuration
Note the errors or messages above, and press the <ESC> key to exit.  20..."

Somebody have already met this problem ?

Precisions :
----------------------------------------------------------------------------

The line which doesn't work in httpd.conf :
It's the line "PythonHandler mptest" which redirect to "mptest.py".
This file is in my "C:/Program Files/Apache Group/Apache/htdocs/python" .
this file must print "Hello World"  in my browser.

   <Directory "C:/Program Files/Apache Group/Apache/htdocs/python">
    AddHandler python-program .py
    PythonHandler mptest
    PythonDebug on
   </Directory>

----------------------------------------------------------------------------

Content of mptest.py :

from mod_python import apache

def handler(req):
   req.content_type = "text/plain"
   req.send_http_header()
   req.write("Hello World!")
   return apache.OK

----------------------------------------------------------------------------

Configuration :

I have installed :
- Apache : apache_1.3.33-win32-x86.exe
- the python module files : mod_python-2.7.8.tgz
- The dll of python module : mp152dll.zip
- Python executable : py152.exe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060223/a4364a24/attachment.html
From rdavisunr at yahoo.com  Thu Feb 23 13:42:44 2006
From: rdavisunr at yahoo.com (Robert Thomas Davis)
Date: Thu Feb 23 13:42:50 2006
Subject: [mod_python] callable __auth__ (with detailed example code)
Message-ID: <20060223184244.46258.qmail@web81212.mail.mud.yahoo.com>

Hey all (mostly graham though)

Here is exactly what I am trying to do...

from mod_python import apache
from mod_python import psp
from mod_python.Session import Session
import sys, time
from sql_defines import *
from connection_defines import USER, PASS

# db connection
db_conn = apache.import_module('db_conn', log=1)
db = db_conn.connection('Cursor')
device = apache.import_module('device', log=1)


def validate_user(req, user, passwd):

        if passwd == PASS:
                # user has successfully authenticated
                sess = Session(req)

                if sess.has_key('max_inactive'):
                        # this is an existing session

                        # check length of inactivity
                        elapsed = time.time() -
sess['last']

                        # reset timer for next request
                        sess['last'] = time.time()
                        sess.save()

                        # compare elapsed to maximum
allowed
                        if elapsed >
sess['max_inactive']:
                                sess.delete()

                                # force user to
reauthenticate
                                return 0
                        else:
                                #...still within time
limit

                                # allow user to
continue
                                return 1
                else:
                        # new session

                        # set maximum inactivity
allowed
                        sess['max_inactive'] = 500

                        # initialize timer
                        sess['last'] = time.time()

                        sess.save()

                        # allow user to continue
                        return 1
        else:
                # force user to reauthenticate
                return 0


def handle_page_build(req, obj, **kwargs):

        try:
                __create_tables()
                page = obj(req, **kwargs)
        except:
                error_page = error.error_page(req,
sys.exc_info())
                return error_page.build()
        else:
                return page.build()


def index(req):

        return main(req)


def main(req):

        return handle_page_build(req, home.home_page)


def devices(req):
        __auth_realm__ = "Devices!"
        def __auth__(req, user, passwd):
                return validate_user(req, user,
passwd)
        return handle_page_build(req,
device.devices_page)

Thanks!
From grahamd at dscpl.com.au  Thu Feb 23 16:37:45 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 23 16:37:50 2006
Subject: [mod_python] invalid command pythonhandler
Message-ID: <1140730665.2539@dscpl.user.openhosting.com>

If PythonHandler hasn't been recognised, then mod_python possibly hasn't
been loaded at all. Check the error log file for the Apache restart
message and see if it mentions mod_python. Also ensure you have
appropriate LoadModule directive and did actually restart Apache.

See:

  http://www.dscpl.com.au/articles/modpython-001.html

for other useful information.

Graham

Gianni - Infodata wrote ..
> Hi,
> 
> I have followed all indications to install python module for apache on
> the
> web page :
> (http://www.modpython.org/live/mod_python-2.7.8/doc-html/app-wininst.html)
> but when I start the server, this are the error lines :
> 
> "Syntax error on line 670 of c:/program files/apache
> group/apache/conf/httpd:
> Invalid command 'PythonHandler', perhaps mis-spelled or defined by a module
> included in the server configuration
> Note the errors or messages above, and press the <ESC> key to exit.  20..."
> 
> Somebody have already met this problem ?
> 
> Precisions :
> ----------------------------------------------------------------------------
> 
> The line which doesn't work in httpd.conf :
> It's the line "PythonHandler mptest" which redirect to "mptest.py".
> This file is in my "C:/Program Files/Apache Group/Apache/htdocs/python"
> .
> this file must print "Hello World"  in my browser.
> 
>    <Directory "C:/Program Files/Apache Group/Apache/htdocs/python">
>     AddHandler python-program .py
>     PythonHandler mptest
>     PythonDebug on
>    </Directory>
> 
> ----------------------------------------------------------------------------
> 
> Content of mptest.py :
> 
> from mod_python import apache
> 
> def handler(req):
>    req.content_type = "text/plain"
>    req.send_http_header()
>    req.write("Hello World!")
>    return apache.OK
> 
> ----------------------------------------------------------------------------
> 
> Configuration :
> 
> I have installed :
> - Apache : apache_1.3.33-win32-x86.exe
> - the python module files : mod_python-2.7.8.tgz
> - The dll of python module : mp152dll.zip
> - Python executable : py152.exe
From grahamd at dscpl.com.au  Thu Feb 23 17:04:14 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 23 17:04:22 2006
Subject: [mod_python] callable __auth__ (with detailed example code)
Message-ID: <1140732253.19448@dscpl.user.openhosting.com>

I actually get a 500 error if I set up __auth__ function the way you
have written it. This is because of error as described in:

  http://issues.apache.org/jira/browse/MODPYTHON-43

Specifically, the __auth__ function is executed in the context of
the globals from mod_python.publisher and not the same file as
the __auth__ function is in. This means the __auth__ function when
executed can't access the validate_user() function.

Do you actually have everything in the one file like this?

Other than that, the __auth__ function is being executed for me.

Can you post the snippet of the Apache configuration where you
set PythonHandler etc for this directory?

Further comments below. 

Robert Thomas Davis wrote ..
> Hey all (mostly graham though)
> 
> Here is exactly what I am trying to do...
> 
> from mod_python import apache
> from mod_python import psp
> from mod_python.Session import Session
> import sys, time
> from sql_defines import *
> from connection_defines import USER, PASS
> 
> # db connection
> db_conn = apache.import_module('db_conn', log=1)
> db = db_conn.connection('Cursor')
> device = apache.import_module('device', log=1)

Anything not preceeded by an underscore will be accessible by
a URL if using publisher. Thus, users could accessed internals
of "db".

> def validate_user(req, user, passwd):
> 
>         if passwd == PASS:
>                 # user has successfully authenticated
>                 sess = Session(req)
> 
>                 if sess.has_key('max_inactive'):
>                         # this is an existing session
> 
>                         # check length of inactivity
>                         elapsed = time.time() -
> sess['last']
> 
>                         # reset timer for next request
>                         sess['last'] = time.time()
>                         sess.save()

The Session class already maintains a last accessed time. Call
sess.last_accessed() to get it.

Note though that Session class doesn't autosave. So even if you don't
update other data in the session, you will still need to save the
session if you want last accessed time to be saved and for automatic
session timeouts to work.

>                         # compare elapsed to maximum
> allowed
>                         if elapsed >
> sess['max_inactive']:
>                                 sess.delete()
> 
>                                 # force user to
> reauthenticate
>                                 return 0
>                         else:
>                                 #...still within time
> limit
> 
>                                 # allow user to
> continue
>                                 return 1
>                 else:
>                         # new session
> 
>                         # set maximum inactivity
> allowed
>                         sess['max_inactive'] = 500
> 
>                         # initialize timer
>                         sess['last'] = time.time()
> 
>                         sess.save()
> 
>                         # allow user to continue
>                         return 1
>         else:
>                 # force user to reauthenticate
>                 return 0

Again, no leading underscore so validate_user() is directly accessible
to use.

Also, Session class has session timeout mechanism.

> def handle_page_build(req, obj, **kwargs):
> 
>         try:
>                 __create_tables()
>                 page = obj(req, **kwargs)
>         except:
>                 error_page = error.error_page(req,
> sys.exc_info())
>                 return error_page.build()
>         else:
>                 return page.build()

The validate_user() function is also accessible.

> def index(req):
> 
>         return main(req)
> 
> 
> def main(req):
> 
>         return handle_page_build(req, home.home_page)
> 
> 
> def devices(req):
>         __auth_realm__ = "Devices!"
>         def __auth__(req, user, passwd):
>                 return validate_user(req, user,
> passwd)
>         return handle_page_build(req,
> device.devices_page)

Graham
From grahamd at dscpl.com.au  Thu Feb 23 18:31:26 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 23 18:31:30 2006
Subject: [mod_python] Re: more callable__auth__
In-Reply-To: <20060223231919.20289.qmail@web81211.mail.mud.yahoo.com>
Message-ID: <1140737486.6984@dscpl.user.openhosting.com>

Still generally prefer it to be on the mailing list as other people can
learn from it and it is in the mailing list archive as well, so people
down the track may find it as well and it may solve a problem for
them also.

One more question. What URLs are you using to access the resources
so I can relate that properly to the Apache configuration and the
published functions in the file?

Graham

Robert Thomas Davis wrote ..
> Hell graham
> 
> I really appreciate your help with this...and since
> you have been the only one responding I thought I
> might as well just mail you the files in question
> (index.py and httpd.conf, attached as a .tgz)
> 
> The file index.py would normally live in the
> directory:
> /usr/local/lap/http/
> 
> Based on your last reply I am wondering if it is my
> httpd.conf file that is setup incorrectly (i do not
> get the 500 error at all).  When the enclosed code
> gets executed it appears as though it skips right over
> the nested __auth__ fuction.  However, if that
> function is moved to the module scope (index.py) it
> always gets called and subsequently calls the
> validate_users function.
> 
> Again...your help is much appreciated.
> 
> Rob
From grahamd at dscpl.com.au  Thu Feb 23 19:16:25 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 23 19:16:28 2006
Subject: [mod_python] Re: more callable__auth__
Message-ID: <1140740185.2671@dscpl.user.openhosting.com>

BTW, I can't seem to find that you have ever said exactly which version
of mod_python you are using. Are you using the latest version?

Graham

Graham Dumpleton wrote ..
> Still generally prefer it to be on the mailing list as other people can
> learn from it and it is in the mailing list archive as well, so people
> down the track may find it as well and it may solve a problem for
> them also.
> 
> One more question. What URLs are you using to access the resources
> so I can relate that properly to the Apache configuration and the
> published functions in the file?
> 
> Graham
> 
> Robert Thomas Davis wrote ..
> > Hell graham
> > 
> > I really appreciate your help with this...and since
> > you have been the only one responding I thought I
> > might as well just mail you the files in question
> > (index.py and httpd.conf, attached as a .tgz)
> > 
> > The file index.py would normally live in the
> > directory:
> > /usr/local/lap/http/
> > 
> > Based on your last reply I am wondering if it is my
> > httpd.conf file that is setup incorrectly (i do not
> > get the 500 error at all).  When the enclosed code
> > gets executed it appears as though it skips right over
> > the nested __auth__ fuction.  However, if that
> > function is moved to the module scope (index.py) it
> > always gets called and subsequently calls the
> > validate_users function.
> > 
> > Again...your help is much appreciated.
> > 
> > Rob
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From grahamd at dscpl.com.au  Thu Feb 23 19:40:25 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Feb 23 19:40:27 2006
Subject: [mod_python] Re: more callable__auth__
Message-ID: <1140741625.17605@dscpl.user.openhosting.com>

Robert Thomas Davis wrote ..
> Graham
> 
> Sorry...your replies were be sent to the "bulk"
> folder...glad I checked it before just deleting all!  
> 
> I am using mod_python 3.1.3 with apache 2.0.53 on
> Fedora Core 3.

Any chance you can upgrade to mod_python 3.2.7? I really can't find
any problem with the basic structure of what you are doing, but there
have been fixes to publisher in 3.2.7 that may mean I am not seeing
the problem.

> The url I use to access the "devices" page (the one I
> would like to protect) is http://localhost/devices.
> 
> I do agree about having the info on the mailing list
> so others could learn from it; maybe we can post the
> results.

The ongoing discussion is also useful, as the actual debugging process
itself can be just as useful as the final result. Thus, use reply-all.

Graham
 
> Thanks, 
> 
> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> 
> > BTW, I can't seem to find that you have ever said
> > exactly which version
> > of mod_python you are using. Are you using the
> > latest version?
> > 
> > Graham
> > 
> > Graham Dumpleton wrote ..
> > > Still generally prefer it to be on the mailing
> > list as other people can
> > > learn from it and it is in the mailing list
> > archive as well, so people
> > > down the track may find it as well and it may
> > solve a problem for
> > > them also.
> > > 
> > > One more question. What URLs are you using to
> > access the resources
> > > so I can relate that properly to the Apache
> > configuration and the
> > > published functions in the file?
> > > 
> > > Graham
> > > 
> > > Robert Thomas Davis wrote ..
> > > > Hell graham
> > > > 
> > > > I really appreciate your help with this...and
> > since
> > > > you have been the only one responding I thought
> > I
> > > > might as well just mail you the files in
> > question
> > > > (index.py and httpd.conf, attached as a .tgz)
> > > > 
> > > > The file index.py would normally live in the
> > > > directory:
> > > > /usr/local/lap/http/
> > > > 
> > > > Based on your last reply I am wondering if it is
> > my
> > > > httpd.conf file that is setup incorrectly (i do
> > not
> > > > get the 500 error at all).  When the enclosed
> > code
> > > > gets executed it appears as though it skips
> > right over
> > > > the nested __auth__ fuction.  However, if that
> > > > function is moved to the module scope (index.py)
> > it
> > > > always gets called and subsequently calls the
> > > > validate_users function.
> > > > 
> > > > Again...your help is much appreciated.
> > > > 
> > > > Rob
> > > _______________________________________________
> > > Mod_python mailing list
> > > Mod_python@modpython.org
> > >
> >
> http://mailman.modpython.org/mailman/listinfo/mod_python
> > 
From python_eager at yahoo.com  Fri Feb 24 00:44:38 2006
From: python_eager at yahoo.com (python eager)
Date: Fri Feb 24 00:44:42 2006
Subject: [mod_python] Reg Word Document Reading
Message-ID: <20060224054438.61365.qmail@web31307.mail.mud.yahoo.com>

Hi,
> >   This is my code snippet. This code will not read the characters 
in 
> > Ms Word Document. I got the below output. But if i use any *txt* 
> > format this will be display properly. Instead of txt format i am 
> > using doc format. I got error while reading. please help me to 
solve 
> > this problem
> >  
> >  
> >           req = self.request()
> >           inp = file('C:\\Python.doc','r')
> >           for line in inp:
> >              self.writeln(line)
> >           inp.close()
> >  
> > *Output :*
> > *    ?????*
> >  
> > regards!
> > Python eager

		
---------------------------------
Brings words and photos together (easily) with
 PhotoMail  - it's free and works with Yahoo! Mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060223/fb6205c1/attachment.html
From nicolas at lehuen.com  Fri Feb 24 01:39:59 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Fri Feb 24 01:40:05 2006
Subject: [mod_python] Reg Word Document Reading
In-Reply-To: <20060224054438.61365.qmail@web31307.mail.mud.yahoo.com>
References: <20060224054438.61365.qmail@web31307.mail.mud.yahoo.com>
Message-ID: <c298f2d70602232239s724113b3r@mail.gmail.com>

Hi,

This has *nothing* to do whatsoever with mod_python. Nothing. Please
ask this on comp.lang.python, where you should receive half a dozen
response in a  quite short time.

A pretty simple way to access comp.lang.python if you don't know ho
newsgroup work is to  use Google Groups :

http://groups.google.com/group/comp.lang.python

After writing that, I shouldn't help you, as it will only make you
keep asking irrelevant questions here, but hey, I'm only human, so
I'll give you a few pointers.

 .doc files are opaque, binary files, so you cannot read them as
easily as plain text files. You have to use the Word API, which is
exposed as COM objects, with the pywin32 modules.

Now, behold the power of Google :

http://www.google.com/search?q=word+COM+python

A few clicks here and there take me to this page :

http://wikipython.flibuste.net/moin.py/CodeWindows

It's French but I guess I could have seen this elsewhere :

import win32com.client

word = win32com.client.Dispatch("Word.Application")
word.Documents.Open("D:/partage/python/wordtxt/test.doc") # full path needed
text = word.ActiveDocument.content.text
word.Documents.Close()

text = text.encode('Latin-1')

print text

Regards,
Nicolas

P.S. since you've been asking quite a few questions on this list,
having something like part of your real name would be nice - I cannot
be brought to start a mail by "Hello, Python Eager !", which looks
plain stupid.

2006/2/24, python eager <python_eager@yahoo.com>:
> Hi,
> > >   This is my code snippet. This code will not read the characters
> in
> > > Ms Word Document. I got the below output. But if i use any *txt*
> > > format this will be display properly. Instead of txt format i am
> > > using doc format. I got error while reading. please help me to
> solve
> > > this problem
> > >
> > >
> > >           req = self.request()
> > >           inp = file('C:\\Python.doc','r')
> > >           for line in inp:
> > >              self.writeln(line)
> > >           inp.close()
> > >
> > > *Output :*
> > > *    ?????*
> > >
> > > regards!
> > > Python eager
>
>
>  ________________________________
> Brings words and photos together (easily) with
>  PhotoMail - it's free and works with Yahoo! Mail.
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>

From nicolas at lehuen.com  Fri Feb 24 01:51:17 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Fri Feb 24 01:51:22 2006
Subject: [mod_python] Reg Word Document Reading
In-Reply-To: <c298f2d70602232239s724113b3r@mail.gmail.com>
References: <20060224054438.61365.qmail@web31307.mail.mud.yahoo.com>
	<c298f2d70602232239s724113b3r@mail.gmail.com>
Message-ID: <c298f2d70602232251x5587a3dcp@mail.gmail.com>

Oh - of course it's only a starting point, since using ActiveDocument
and Documents.Close is a big no-no in a server process where multiple
request can be handled concurrently. You don't want one request to
access the text from another request's document. But there are other
ways to do so, see the doc.

Plus, you have to make sure that the Word COM object are properly
removed from memory if you don't want to see Word processes staying in
memory.

Regards,
Nicolas

2006/2/24, Nicolas Lehuen <nicolas@lehuen.com>:
> Hi,
>
> This has *nothing* to do whatsoever with mod_python. Nothing. Please
> ask this on comp.lang.python, where you should receive half a dozen
> response in a  quite short time.
>
> A pretty simple way to access comp.lang.python if you don't know ho
> newsgroup work is to  use Google Groups :
>
> http://groups.google.com/group/comp.lang.python
>
> After writing that, I shouldn't help you, as it will only make you
> keep asking irrelevant questions here, but hey, I'm only human, so
> I'll give you a few pointers.
>
>  .doc files are opaque, binary files, so you cannot read them as
> easily as plain text files. You have to use the Word API, which is
> exposed as COM objects, with the pywin32 modules.
>
> Now, behold the power of Google :
>
> http://www.google.com/search?q=word+COM+python
>
> A few clicks here and there take me to this page :
>
> http://wikipython.flibuste.net/moin.py/CodeWindows
>
> It's French but I guess I could have seen this elsewhere :
>
> import win32com.client
>
> word = win32com.client.Dispatch("Word.Application")
> word.Documents.Open("D:/partage/python/wordtxt/test.doc") # full path needed
> text = word.ActiveDocument.content.text
> word.Documents.Close()
>
> text = text.encode('Latin-1')
>
> print text
>
> Regards,
> Nicolas
>
> P.S. since you've been asking quite a few questions on this list,
> having something like part of your real name would be nice - I cannot
> be brought to start a mail by "Hello, Python Eager !", which looks
> plain stupid.
>
> 2006/2/24, python eager <python_eager@yahoo.com>:
> > Hi,
> > > >   This is my code snippet. This code will not read the characters
> > in
> > > > Ms Word Document. I got the below output. But if i use any *txt*
> > > > format this will be display properly. Instead of txt format i am
> > > > using doc format. I got error while reading. please help me to
> > solve
> > > > this problem
> > > >
> > > >
> > > >           req = self.request()
> > > >           inp = file('C:\\Python.doc','r')
> > > >           for line in inp:
> > > >              self.writeln(line)
> > > >           inp.close()
> > > >
> > > > *Output :*
> > > > *    ?????*
> > > >
> > > > regards!
> > > > Python eager
> >
> >
> >  ________________________________
> > Brings words and photos together (easily) with
> >  PhotoMail - it's free and works with Yahoo! Mail.
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
> >
>

From grahamd at dscpl.com.au  Fri Feb 24 05:04:00 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb 24 05:04:24 2006
Subject: [mod_python] Reg Word Document Reading
In-Reply-To: <c298f2d70602232239s724113b3r@mail.gmail.com>
References: <20060224054438.61365.qmail@web31307.mail.mud.yahoo.com>
	<c298f2d70602232239s724113b3r@mail.gmail.com>
Message-ID: <1E09AC6C-3E7E-4405-8CF8-88BF1CF942AA@dscpl.com.au>

We might want to just ignore her/him/it. They ask the same questions on
multiple lists. See their posting for the same question on DB-SIG list.

   http://aspn.activestate.com/ASPN/Mail/Message/db-sig/3034799

Seems they are getting frustrated with them as well and telling them to
take the questions elsewhere. They just don't learn.

Thus, can we please ignore them unless they are specifically mod_python
questions from now.

Graham


On 24/02/2006, at 5:39 PM, Nicolas Lehuen wrote:

> Hi,
>
> This has *nothing* to do whatsoever with mod_python. Nothing. Please
> ask this on comp.lang.python, where you should receive half a dozen
> response in a  quite short time.
>
> A pretty simple way to access comp.lang.python if you don't know ho
> newsgroup work is to  use Google Groups :
>
> http://groups.google.com/group/comp.lang.python
>
> After writing that, I shouldn't help you, as it will only make you
> keep asking irrelevant questions here, but hey, I'm only human, so
> I'll give you a few pointers.
>
>  .doc files are opaque, binary files, so you cannot read them as
> easily as plain text files. You have to use the Word API, which is
> exposed as COM objects, with the pywin32 modules.
>
> Now, behold the power of Google :
>
> http://www.google.com/search?q=word+COM+python
>
> A few clicks here and there take me to this page :
>
> http://wikipython.flibuste.net/moin.py/CodeWindows
>
> It's French but I guess I could have seen this elsewhere :
>
> import win32com.client
>
> word = win32com.client.Dispatch("Word.Application")
> word.Documents.Open("D:/partage/python/wordtxt/test.doc") # full  
> path needed
> text = word.ActiveDocument.content.text
> word.Documents.Close()
>
> text = text.encode('Latin-1')
>
> print text
>
> Regards,
> Nicolas
>
> P.S. since you've been asking quite a few questions on this list,
> having something like part of your real name would be nice - I cannot
> be brought to start a mail by "Hello, Python Eager !", which looks
> plain stupid.
>
> 2006/2/24, python eager <python_eager@yahoo.com>:
>> Hi,
>>>>   This is my code snippet. This code will not read the characters
>> in
>>>> Ms Word Document. I got the below output. But if i use any *txt*
>>>> format this will be display properly. Instead of txt format i am
>>>> using doc format. I got error while reading. please help me to
>> solve
>>>> this problem
>>>>
>>>>
>>>>           req = self.request()
>>>>           inp = file('C:\\Python.doc','r')
>>>>           for line in inp:
>>>>              self.writeln(line)
>>>>           inp.close()
>>>>
>>>> *Output :*
>>>> *    ?????*
>>>>
>>>> regards!
>>>> Python eager
>>
>>
>>  ________________________________
>> Brings words and photos together (easily) with
>>  PhotoMail - it's free and works with Yahoo! Mail.
>>
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>
>>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python


From Anders.Strandberg at tietoenator.com  Fri Feb 24 06:25:31 2006
From: Anders.Strandberg at tietoenator.com (Anders.Strandberg@tietoenator.com)
Date: Fri Feb 24 06:25:36 2006
Subject: [mod_python] mod_python.so: No such file: No such file or directory
Message-ID: <FFD83F5BFE8FFB43BFD05446E63D90AC0A732B9D@maserati.eu.tieto.com>

Hi,

I have problems building mod_python 3.2.7 on SLES 9 ( Solaris 8 and
Solaris 9 is OK) with apache-2.0.54+ Python-version is 2.3.3. The make
does not produce mod_python.so , there is no trace of it. Found in the
FAQ a somewhat related issue which stated  that this could be a
libtool-problem (old libtool-version supplied with apache-2.043) see
http://www.modpython.org/FAQ/faqw.py?req=show&file=faq04.001.htp, but
our libtool is 1.4.3 which is > 1.4.2. In fact, in my case  the make
does not come to completion at all.  

However there are complaints about _POSIX_C_SOURCE redefined, but I
don't know if that is related to this  at all.

Is there anobody who has a lead on this ?

Regards,
Anders




/app/apr/0.9.5/share/build/libtool --silent --mode=link
i686-pc-linux-gnu-gcc -o mod_python.la  -rpath
/app/apache/2.0.54/modules -module -avoid-version    hlistobject.lo
hlist.lo filterobject.lo connobject.lo serverobject.lo util.lo
tableobject.lo requestobject.lo _apachemodule.lo mod_python.lo
-L/app/gcc/3.3.4/lib -L/app/libtool/1.5.18/lib -L/app/libiconv/1.9.1/lib
-L/app/gettext/0.12.1.1/lib -L/app/flex/2.5.4a/lib
-L/app/expat/1.95.8/lib -L/app/apr-util/0.9.5/lib -L/app/apr/0.9.5/lib
-L/usr/X11R6/lib
-Wl,--rpath=/app/apache/modules/2.0/mod_python/3.2.7/lib:/app/gcc/3.3.4/
lib:/app/libtool/1.5.18/lib:/app/libiconv/1.9.1/lib:/app/gettext/0.12.1.
1/lib:/app/flex/2.5.4a/lib:/app/expat/1.95.8/lib:/app/apr-util/0.9.5/lib
:/app/apr/0.9.5/lib:/usr/X11R6/lib
-L/app/Python/2.3.3/lib/python2.3/config -Xlinker -export-dynamic
-L/app/gcc/3.3.4/lib -L/app/zlib/1.2.1/lib -L/app/tk/8.4.5/lib
-L/app/tcl/8.4.5/lib -L/app/readline/4.3/lib -L/app/openssl/0.9.7c/lib
-L/app/ncurses/5.2/lib -L/app/gmp/4.1.2/lib -L/app/gdbm/1.8.3/lib
-L/app/expect/5.39.0/lib -L/app/expat/1.95.5/lib -L/app/db/3.3.11/lib
-L/usr/X11R6/lib -Wl,--rpath -lm -lpython2.3 -lpthread -ldl -lutil -lm
/usr/bin/ld: mod_python.so: No such file: No such file or directory
collect2: ld returned 1 exit status
apxs:Error: Command failed with rc=65536
.
make[1]: *** [mod_python.so] Error 1
make[1]: Leaving directory `/var/tmp/BUILD/mod_python-3.2.7/src'
make: *** [do_dso] Error 2
error: Bad exit status from /var/tmp/rpmbuild.13200/rpm-tmp.94484
(%build)

From mvanaswegen at gmail.com  Fri Feb 24 07:33:05 2006
From: mvanaswegen at gmail.com (marinus van aswegen)
Date: Fri Feb 24 07:33:11 2006
Subject: [mod_python] Sessions
Message-ID: <ffa39deb0602240433j726373caxee85bc29045531bb@mail.gmail.com>

Hi I have a question re. session handling.

Do you need to inform the request handler each time to connect to it which
session is calling in?

regs

Marinus
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060224/ad345bef/attachment.html
From jpg at jgassociates.ca  Fri Feb 24 08:06:11 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Feb 24 08:06:11 2006
Subject: [mod_python] mod_python.so: No such file: No such file or
	directory
In-Reply-To: <FFD83F5BFE8FFB43BFD05446E63D90AC0A732B9D@maserati.eu.tieto.com>
References: <FFD83F5BFE8FFB43BFD05446E63D90AC0A732B9D@maserati.eu.tieto.com>
Message-ID: <43FF04C3.6030500@jgassociates.ca>

Anders.Strandberg@tietoenator.com wrote:
> Hi,
> 
> I have problems building mod_python 3.2.7 on SLES 9 ( Solaris 8 and
> Solaris 9 is OK) with apache-2.0.54+ Python-version is 2.3.3. The make
> does not produce mod_python.so , there is no trace of it. Found in the
> FAQ a somewhat related issue which stated  that this could be a
> libtool-problem (old libtool-version supplied with apache-2.043) see
> http://www.modpython.org/FAQ/faqw.py?req=show&file=faq04.001.htp, but
> our libtool is 1.4.3 which is > 1.4.2. In fact, in my case  the make
> does not come to completion at all.  
> 
> However there are complaints about _POSIX_C_SOURCE redefined, but I
> don't know if that is related to this  at all.

It's not related - some sort of python quirk. You'll see that warning 
even with successful compilation.

> Is there anobody who has a lead on this ?
> 
> Regards,
> Anders
> 
> 
> 
> 
> /app/apr/0.9.5/share/build/libtool --silent --mode=link
> i686-pc-linux-gnu-gcc -o mod_python.la  -rpath
> /app/apache/2.0.54/modules -module -avoid-version    hlistobject.lo
> hlist.lo filterobject.lo connobject.lo serverobject.lo util.lo
> tableobject.lo requestobject.lo _apachemodule.lo mod_python.lo
> -L/app/gcc/3.3.4/lib -L/app/libtool/1.5.18/lib -L/app/libiconv/1.9.1/lib
> -L/app/gettext/0.12.1.1/lib -L/app/flex/2.5.4a/lib
> -L/app/expat/1.95.8/lib -L/app/apr-util/0.9.5/lib -L/app/apr/0.9.5/lib
> -L/usr/X11R6/lib
> -Wl,--rpath=/app/apache/modules/2.0/mod_python/3.2.7/lib:/app/gcc/3.3.4/
> lib:/app/libtool/1.5.18/lib:/app/libiconv/1.9.1/lib:/app/gettext/0.12.1.
> 1/lib:/app/flex/2.5.4a/lib:/app/expat/1.95.8/lib:/app/apr-util/0.9.5/lib
> :/app/apr/0.9.5/lib:/usr/X11R6/lib
> -L/app/Python/2.3.3/lib/python2.3/config -Xlinker -export-dynamic
> -L/app/gcc/3.3.4/lib -L/app/zlib/1.2.1/lib -L/app/tk/8.4.5/lib
> -L/app/tcl/8.4.5/lib -L/app/readline/4.3/lib -L/app/openssl/0.9.7c/lib
> -L/app/ncurses/5.2/lib -L/app/gmp/4.1.2/lib -L/app/gdbm/1.8.3/lib
> -L/app/expect/5.39.0/lib -L/app/expat/1.95.5/lib -L/app/db/3.3.11/lib
> -L/usr/X11R6/lib -Wl,--rpath -lm -lpython2.3 -lpthread -ldl -lutil -lm
> /usr/bin/ld: mod_python.so: No such file: No such file or directory
> collect2: ld returned 1 exit status
> apxs:Error: Command failed with rc=65536
> .
> make[1]: *** [mod_python.so] Error 1
> make[1]: Leaving directory `/var/tmp/BUILD/mod_python-3.2.7/src'
> make: *** [do_dso] Error 2
> error: Bad exit status from /var/tmp/rpmbuild.13200/rpm-tmp.94484
> (%build)
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From jpg at jgassociates.ca  Fri Feb 24 08:13:09 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Feb 24 08:13:07 2006
Subject: [mod_python] mod_python.so: No such file: No such file
	or	directory
In-Reply-To: <43FF04C3.6030500@jgassociates.ca>
References: <FFD83F5BFE8FFB43BFD05446E63D90AC0A732B9D@maserati.eu.tieto.com>
	<43FF04C3.6030500@jgassociates.ca>
Message-ID: <43FF0665.2080507@jgassociates.ca>

Dang. I hit the send button by mistake. :(


Jim Gallacher wrote:
> Anders.Strandberg@tietoenator.com wrote:
> 
>> Hi,
>>
>> I have problems building mod_python 3.2.7 on SLES 9 ( Solaris 8 and
>> Solaris 9 is OK) with apache-2.0.54+ Python-version is 2.3.3. The make
>> does not produce mod_python.so , there is no trace of it. Found in the
>> FAQ a somewhat related issue which stated  that this could be a
>> libtool-problem (old libtool-version supplied with apache-2.043) see
>> http://www.modpython.org/FAQ/faqw.py?req=show&file=faq04.001.htp, but
>> our libtool is 1.4.3 which is > 1.4.2. In fact, in my case  the make
>> does not come to completion at all. 
>> However there are complaints about _POSIX_C_SOURCE redefined, but I
>> don't know if that is related to this  at all.
> 
> 
> It's not related - some sort of python quirk. You'll see that warning 
> even with successful compilation.
> 
>> Is there anobody who has a lead on this ?

So there are no other compilation errors? All of the object files have 
been created in src? eg hlistobject.lo, hlist.lo, filterobject.lo, etc?

Although not related to your problem, I would suggest using mod_python 
3.2.8 if you intend to use FileSession, as there is a security issue in 
3.2.7.

Jim


>> Regards,
>> Anders
>>
>>
>>
>>
>> /app/apr/0.9.5/share/build/libtool --silent --mode=link
>> i686-pc-linux-gnu-gcc -o mod_python.la  -rpath
>> /app/apache/2.0.54/modules -module -avoid-version    hlistobject.lo
>> hlist.lo filterobject.lo connobject.lo serverobject.lo util.lo
>> tableobject.lo requestobject.lo _apachemodule.lo mod_python.lo
>> -L/app/gcc/3.3.4/lib -L/app/libtool/1.5.18/lib -L/app/libiconv/1.9.1/lib
>> -L/app/gettext/0.12.1.1/lib -L/app/flex/2.5.4a/lib
>> -L/app/expat/1.95.8/lib -L/app/apr-util/0.9.5/lib -L/app/apr/0.9.5/lib
>> -L/usr/X11R6/lib
>> -Wl,--rpath=/app/apache/modules/2.0/mod_python/3.2.7/lib:/app/gcc/3.3.4/
>> lib:/app/libtool/1.5.18/lib:/app/libiconv/1.9.1/lib:/app/gettext/0.12.1.
>> 1/lib:/app/flex/2.5.4a/lib:/app/expat/1.95.8/lib:/app/apr-util/0.9.5/lib
>> :/app/apr/0.9.5/lib:/usr/X11R6/lib
>> -L/app/Python/2.3.3/lib/python2.3/config -Xlinker -export-dynamic
>> -L/app/gcc/3.3.4/lib -L/app/zlib/1.2.1/lib -L/app/tk/8.4.5/lib
>> -L/app/tcl/8.4.5/lib -L/app/readline/4.3/lib -L/app/openssl/0.9.7c/lib
>> -L/app/ncurses/5.2/lib -L/app/gmp/4.1.2/lib -L/app/gdbm/1.8.3/lib
>> -L/app/expect/5.39.0/lib -L/app/expat/1.95.5/lib -L/app/db/3.3.11/lib
>> -L/usr/X11R6/lib -Wl,--rpath -lm -lpython2.3 -lpthread -ldl -lutil -lm
>> /usr/bin/ld: mod_python.so: No such file: No such file or directory
>> collect2: ld returned 1 exit status
>> apxs:Error: Command failed with rc=65536
>> .
>> make[1]: *** [mod_python.so] Error 1
>> make[1]: Leaving directory `/var/tmp/BUILD/mod_python-3.2.7/src'
>> make: *** [do_dso] Error 2
>> error: Bad exit status from /var/tmp/rpmbuild.13200/rpm-tmp.94484
>> (%build)
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From jpg at jgassociates.ca  Fri Feb 24 08:29:59 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Feb 24 08:29:54 2006
Subject: [mod_python] Sessions
In-Reply-To: <ffa39deb0602240433j726373caxee85bc29045531bb@mail.gmail.com>
References: <ffa39deb0602240433j726373caxee85bc29045531bb@mail.gmail.com>
Message-ID: <43FF0A57.2000601@jgassociates.ca>

marinus van aswegen wrote:
> Hi I have a question re. session handling.
> 
> Do you need to inform the request handler each time to connect to it which
> session is calling in?

Your question is a little unclear, but if it means what I think it means 
then the answer is "no". :)

Sessions make use of a cookie. The setting and reading of that cookie is 
handled transparently for you by the session code, so it's pretty simple.

All the magic happens when you create your session instance. If a 
session cookie is found in the request, the corresponding session data 
will be read from the persistent store. If a session cookie is not found 
in the request, a new session id, which will be used as the cookie 
value, will be generated.

from mod_python import apache, Session
def handler(req):
     req.content_type = 'text/plain'
     sess = Session.Session(req)
     if sess.is_new():
         req.write("It's a new session!")
         # initialize your session data
         sess['stuff'] = "hello world"
     else:
         req.write("The session exists\n")

     req.write(sess['stuff'])

     # don't forget to save your session data
     sess.save()
     return apache.OK

Jim
From emlynj at gmail.com  Fri Feb 24 08:51:08 2006
From: emlynj at gmail.com (Emlyn Jones)
Date: Fri Feb 24 08:51:12 2006
Subject: [mod_python] psp include syntax
Message-ID: <f4b5a9620602240551kd0af571j4ede68543d472126@mail.gmail.com>

Hello,
I've written a web app which uses mod_python on Apache. I now need to
make it work using Python/ASP and IIS (using Mr Hammonds excellent
Python Win32 package) so I've wrapped everything up into a
ServerObject hiding the underlying implementation and making my pages
"pure" python. The only remaining problem is including other files. As
you know the include directive for mod_python is this:

<%@ include file="scriptheader.asp"%>

Where as for IIS/ASP it is this:

<!--#include file ="scriptheader.asp"-->

IIS barfs at the mod_python syntax and mod_python ignores the IIS
syntax. Other than hacking the mod_python source code, can anybody
think of a nifty way to make the includes work on either platform?
(I realise this may be an impossible dream, but you never know).

Cheers,
Emlyn.

From ron at udel.edu  Fri Feb 24 09:19:13 2006
From: ron at udel.edu (Ron Reisor)
Date: Fri Feb 24 09:19:18 2006
Subject: [mod_python] mod_python.so: No such file: No such file or
	directory
In-Reply-To: <FFD83F5BFE8FFB43BFD05446E63D90AC0A732B9D@maserati.eu.tieto.com>
References: <FFD83F5BFE8FFB43BFD05446E63D90AC0A732B9D@maserati.eu.tieto.com>
Message-ID: <Pine.OSX.4.62.0602240901030.363@host-7-221.nss.udel.edu>

On Fri, 24 Feb 2006 Anders.Strandberg@tietoenator.com wrote:

> Hi,
>
> I have problems building mod_python 3.2.7 on SLES 9 ( Solaris 8 and
> Solaris 9 is OK) with apache-2.0.54+ Python-version is 2.3.3. The make
> does not produce mod_python.so , there is no trace of it. Found in the
> FAQ a somewhat related issue which stated  that this could be a
> libtool-problem (old libtool-version supplied with apache-2.043) see
> http://www.modpython.org/FAQ/faqw.py?req=show&file=faq04.001.htp, but
> our libtool is 1.4.3 which is > 1.4.2. In fact, in my case  the make
> does not come to completion at all.
>
> However there are complaints about _POSIX_C_SOURCE redefined, but I
> don't know if that is related to this  at all.

I don't have the answer, but maybe some words of encouragement...

I have mod_python built as a shared library on Solaris 10 Sparc. The file 
ends up in the httpd modules directory. Maybe you're running into a 
conflict between multiple libtool files. You're seeing libtool version 
1.4.3 at one point, but the log below refers to a libtool directory 
1.5.18. I don't know what that means exactly, but I think you should be 
seeing a newer libtool than 1.4.3.

When building httpd-2.0.55, it creates libtool 1.5.20 in the build 
directory. I specified '--enable-so' to make sure the httpd will support 
shared libraries, and the libtool will support the creation of shared 
modules. My guess is, httpd-2.0.55 built a slightly older version of 
libtool, maybe 1.5.18, which you should be using instead of 1.4.3. When 
you configure mod_python, make sure you specify the apxs that goes with 
the httpd server you're using and the right libtool should be found. Using 
the proper libtool is key to getting the shared library built properly.

Ron


> /app/apr/0.9.5/share/build/libtool --silent --mode=link
> i686-pc-linux-gnu-gcc -o mod_python.la  -rpath
> /app/apache/2.0.54/modules -module -avoid-version    hlistobject.lo
> hlist.lo filterobject.lo connobject.lo serverobject.lo util.lo
> tableobject.lo requestobject.lo _apachemodule.lo mod_python.lo
> -L/app/gcc/3.3.4/lib -L/app/libtool/1.5.18/lib -L/app/libiconv/1.9.1/lib
> -L/app/gettext/0.12.1.1/lib -L/app/flex/2.5.4a/lib
> -L/app/expat/1.95.8/lib -L/app/apr-util/0.9.5/lib -L/app/apr/0.9.5/lib
> -L/usr/X11R6/lib
> -Wl,--rpath=/app/apache/modules/2.0/mod_python/3.2.7/lib:/app/gcc/3.3.4/
> lib:/app/libtool/1.5.18/lib:/app/libiconv/1.9.1/lib:/app/gettext/0.12.1.
> 1/lib:/app/flex/2.5.4a/lib:/app/expat/1.95.8/lib:/app/apr-util/0.9.5/lib
> :/app/apr/0.9.5/lib:/usr/X11R6/lib
> -L/app/Python/2.3.3/lib/python2.3/config -Xlinker -export-dynamic
> -L/app/gcc/3.3.4/lib -L/app/zlib/1.2.1/lib -L/app/tk/8.4.5/lib
> -L/app/tcl/8.4.5/lib -L/app/readline/4.3/lib -L/app/openssl/0.9.7c/lib
> -L/app/ncurses/5.2/lib -L/app/gmp/4.1.2/lib -L/app/gdbm/1.8.3/lib
> -L/app/expect/5.39.0/lib -L/app/expat/1.95.5/lib -L/app/db/3.3.11/lib
> -L/usr/X11R6/lib -Wl,--rpath -lm -lpython2.3 -lpthread -ldl -lutil -lm
> /usr/bin/ld: mod_python.so: No such file: No such file or directory
> collect2: ld returned 1 exit status
> apxs:Error: Command failed with rc=65536
> .
> make[1]: *** [mod_python.so] Error 1
> make[1]: Leaving directory `/var/tmp/BUILD/mod_python-3.2.7/src'
> make: *** [do_dso] Error 2
> error: Bad exit status from /var/tmp/rpmbuild.13200/rpm-tmp.94484
> (%build)
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

Ron Reisor <ron@udel.edu> (RWR3)
University of Delaware Information Technologies/Network and Systems Services
Computing Center/192 South Chapel Street/Newark DE, 19716
pgp finger print: 0D 73 06 6F D3 6A 99 D3  F5 D5 6E FF 3B B9 7C 2C
From listspam at flowtheory.net  Fri Feb 24 09:56:11 2006
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Fri Feb 24 09:56:15 2006
Subject: [mod_python] [Fwd: Returned mail: see transcript for details]
Message-ID: <1140792971.2630.9.camel@localhost.localdomain>

Hmm... the below request and perhaps get the
mod_python-admin@modpython.org email address working? :-P

-jag
-------------- next part --------------
An embedded message was scrubbed...
From: Mail Delivery Subsystem <MAILER-DAEMON@modpython.org>
Subject: Returned mail: see transcript for details
Date: Fri, 24 Feb 2006 09:45:54 -0500
Size: 3947
Url: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060224/4f07878c/attachment.mht
From listspam at flowtheory.net  Fri Feb 24 10:01:51 2006
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Fri Feb 24 10:02:06 2006
Subject: [mod_python] psp include syntax
In-Reply-To: <f4b5a9620602240551kd0af571j4ede68543d472126@mail.gmail.com>
References: <f4b5a9620602240551kd0af571j4ede68543d472126@mail.gmail.com>
Message-ID: <1140793311.2630.11.camel@localhost.localdomain>

(whoops -- forgot to CC the list... :-/ )

Howdy Emlyn --

While I'm sure it's a perfectly valid technical term I'm unaware of
since I don't ever work on Windows systems, could you provide a little
more insight to us *nix folk what "barfs" means? :-)

-jag

On Fri, 2006-02-24 at 13:51 +0000, Emlyn Jones wrote:
> Hello,
> I've written a web app which uses mod_python on Apache. I now need to
> make it work using Python/ASP and IIS (using Mr Hammonds excellent
> Python Win32 package) so I've wrapped everything up into a
> ServerObject hiding the underlying implementation and making my pages
> "pure" python. The only remaining problem is including other files. As
> you know the include directive for mod_python is this:
> 
> <%@ include file="scriptheader.asp"%>
> 
> Where as for IIS/ASP it is this:
> 
> <!--#include file ="scriptheader.asp"-->
> 
> IIS barfs at the mod_python syntax and mod_python ignores the IIS
> syntax. Other than hacking the mod_python source code, can anybody
> think of a nifty way to make the includes work on either platform?
> (I realise this may be an impossible dream, but you never know).
> 
> Cheers,
> Emlyn.
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From emlynj at gmail.com  Fri Feb 24 10:10:00 2006
From: emlynj at gmail.com (Emlyn Jones)
Date: Fri Feb 24 10:10:03 2006
Subject: [mod_python] psp include syntax
In-Reply-To: <1140793311.2630.11.camel@localhost.localdomain>
References: <f4b5a9620602240551kd0af571j4ede68543d472126@mail.gmail.com>
	<1140793311.2630.11.camel@localhost.localdomain>
Message-ID: <f4b5a9620602240710q1ad6c48cgc25bd0401033c557@mail.gmail.com>

> On Fri, 2006-02-24 at 13:51 +0000, Emlyn Jones wrote:
> > Hello,
> > I've written a web app which uses mod_python on Apache. I now need to
> > make it work using Python/ASP and IIS (using Mr Hammonds excellent
> > Python Win32 package) so I've wrapped everything up into a
> > ServerObject hiding the underlying implementation and making my pages
> > "pure" python. The only remaining problem is including other files. As
> > you know the include directive for mod_python is this:
> >
> > <%@ include file="scriptheader.asp"%>
> >
> > Where as for IIS/ASP it is this:
> >
> > <!--#include file ="scriptheader.asp"-->
> >
> > IIS barfs at the mod_python syntax and mod_python ignores the IIS
> > syntax. Other than hacking the mod_python source code, can anybody
> > think of a nifty way to make the includes work on either platform?
> > (I realise this may be an impossible dream, but you never know).
> >
> > Cheers,
> > Emlyn.
> >
On 2/24/06, Joshua Ginsberg <listspam@flowtheory.net> wrote:
> (whoops -- forgot to CC the list... :-/ )
Me too.
>
> Howdy Emlyn --
>
> While I'm sure it's a perfectly valid technical term I'm unaware of
> since I don't ever work on Windows systems, could you provide a little
> more insight to us *nix folk what "barfs" means? :-)
>
> -jag
>
He He, Yes, your right. Sorry.
IIS/ASP complains because and line starting with <%@ has to be the
first line in the script. It's expecting it to be <%@
Language=Python%> (or vbscript or what ever).
Sorry for the colloquial term. "barf" is about as technical as I get
on a Windows system. I just turn it off when it doesn't do what I want
it to and switch back to my Debian box. This time unfortunatly, I
can't. The reason I posted here rather than a Windows/IIS type list is
because I think there is probably more flexibility in mod_python than
there is in IIS/ASP.
Unless there is some kind of magic config setting, I'm thinking I'll
need some kind of pre processing of the script to turn:
<!--#include file ="scriptheader.asp"-->
into:
<%@ include file="scriptheader.asp"%>
Which I currently do offline with a small Python script. It would be
nice to be able to do it "live" though then I can drop the same code
on either server and it will "just work".

Cheers,
Emlyn.

From grisha at apache.org  Fri Feb 24 10:16:21 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Feb 24 10:16:41 2006
Subject: [mod_python] [ANNOUNCE] Mod_python 3.2.8 (security)
Message-ID: <20060224101312.B97815@grisha.dyndns.org>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of version 3.2.8 of mod_python.

This release addresses a vulnerability in mod_python's FileSession
object whereby a carefully crafted session cookie could potentially
permit an attacker to execute code on the server.

FileSession was introduced in mod_python 3.2.7 released on February 15
2006 and is not enabled by default, therefore only a very small number
of installations, if any, are likely to be affected by this issue.

There are no other changes or improvements from the previous version in
this release.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit http://www.modpython.org/

Regards,

Gregory Trubetskoy

From nicolas at lehuen.com  Fri Feb 24 10:17:47 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Fri Feb 24 10:17:54 2006
Subject: [mod_python] psp include syntax
In-Reply-To: <f4b5a9620602240551kd0af571j4ede68543d472126@mail.gmail.com>
References: <f4b5a9620602240551kd0af571j4ede68543d472126@mail.gmail.com>
Message-ID: <c298f2d70602240717q4c7e2e37r@mail.gmail.com>

Hi Emlyn,

Since you wrote a ServerObject abstraction interface, why not try to
abstract the file inclusion into it, and forget about using the native
syntax ? I don't think it is possible to do anything about your
problem as is...

Regards,
Nicolas

2006/2/24, Emlyn Jones <emlynj@gmail.com>:
> Hello,
> I've written a web app which uses mod_python on Apache. I now need to
> make it work using Python/ASP and IIS (using Mr Hammonds excellent
> Python Win32 package) so I've wrapped everything up into a
> ServerObject hiding the underlying implementation and making my pages
> "pure" python. The only remaining problem is including other files. As
> you know the include directive for mod_python is this:
>
> <%@ include file="scriptheader.asp"%>
>
> Where as for IIS/ASP it is this:
>
> <!--#include file ="scriptheader.asp"-->
>
> IIS barfs at the mod_python syntax and mod_python ignores the IIS
> syntax. Other than hacking the mod_python source code, can anybody
> think of a nifty way to make the includes work on either platform?
> (I realise this may be an impossible dream, but you never know).
>
> Cheers,
> Emlyn.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From tomw at bnl.gov  Fri Feb 24 16:32:28 2006
From: tomw at bnl.gov (Tomasz Wlodek)
Date: Fri Feb 24 16:32:36 2006
Subject: [mod_python] Why Apache does not execute cgi scripts
In-Reply-To: <004201c62a03$ac9915a0$0500a8c0@brittonfamily.org>
References: <a79646ad0602041209p74883f8fta5b576a564d6fece@mail.gmail.com>
	<001001c629d7$f0527100$0500a8c0@brittonfamily.org>
	<a79646ad0602041755u5bcfede9k92cbb668d24d9989@mail.gmail.com>
	<004201c62a03$ac9915a0$0500a8c0@brittonfamily.org>
Message-ID: <Pine.GSO.4.58.0602241622030.24884@rcf2.rhic.bnl.gov>

Hello experts,

I am not sure whether this issue belongs to Apache proper or mod python or
both.

here is the problem: I use mod_python authentication handler to
authenticate users who come to some directory. This part of the code works
fine.

After the user is authenticated mod_python returns apache.OK and then
Apache is supposed to execute cgi script which is located in this
directory. For the time being the cgi script is a simple "Hello world" in
python.

Now comes the problem: users are authenticated, then Apache takes the cgi
script but instead of executing it it displays its content as text file.

The funny thing is that the same cgi script when I move it to another cgi
directory (where I do not use mod_python for authentication) works fine.
It executes as cgi script.

Apparently when I protect a directory by mod_python authentication handler
then Apache does not want to execute underlying cgi scripts from this
directory!

Here comes the configuration file for this directory:

Alias /GridHyperNews "/var/www/cgi-bin/GridHyperNews"
    <Directory /var/www/cgi-bin/GridHyperNews>
	AllowOverride None
	#I want the directory to contain cgi scripts
        Options +ExecCGI
	SetHandler cgi-script
	# users who come to this directory must be authenticated by
	# myhandler2
	PythonAuthenHandler myhandler2
	PythonDebug on
	PythonPath "sys.path + ['/root/mod_python_handlers']"
	require valid-user
    </Directory>


The myhandler2.py code is very simple

from mod_python import apache
from mod_python import util

import _mp_mod_ssl
import os,string

def authenhandler(req):
    req.add_common_vars()
    req.user="unknown_user"

    return apache.OK

Now, no matter what I do scripts under the directory
/var/www/cgi-bin/GridHyperNews are not treated by Apache as cgi but as
text files.

Tomasz Wlodek                        | tel 631-344-7448
Brookhaven Laboratory, Building 510M | fax 631-344-7616
Upton NY 11973-5000                  |

From tomw at bnl.gov  Fri Feb 24 16:41:08 2006
From: tomw at bnl.gov (Tomasz Wlodek)
Date: Fri Feb 24 16:41:15 2006
Subject: [mod_python] Why Apache does not execute cgi scripts
In-Reply-To: <Pine.GSO.4.58.0602241622030.24884@rcf2.rhic.bnl.gov>
References: <a79646ad0602041209p74883f8fta5b576a564d6fece@mail.gmail.com>
	<001001c629d7$f0527100$0500a8c0@brittonfamily.org>
	<a79646ad0602041755u5bcfede9k92cbb668d24d9989@mail.gmail.com>
	<004201c62a03$ac9915a0$0500a8c0@brittonfamily.org>
	<Pine.GSO.4.58.0602241622030.24884@rcf2.rhic.bnl.gov>
Message-ID: <Pine.GSO.4.58.0602241639420.24884@rcf2.rhic.bnl.gov>

Ok, one detai, which I discovered by trial and error:

If I remove the line

require valid-user

then Apache allows me to execute the cgi scripts.

If I leave it then it displays them as text.

Does anyone understand this behavior?

Tomasz Wlodek                        | tel 631-344-7448
Brookhaven Laboratory, Building 510M | fax 631-344-7616
Upton NY 11973-5000                  |

On Fri, 24 Feb 2006, Tomasz Wlodek wrote:

> Hello experts,
>
> I am not sure whether this issue belongs to Apache proper or mod python or
> both.
>
> here is the problem: I use mod_python authentication handler to
> authenticate users who come to some directory. This part of the code works
> fine.
>
> After the user is authenticated mod_python returns apache.OK and then
> Apache is supposed to execute cgi script which is located in this
> directory. For the time being the cgi script is a simple "Hello world" in
> python.
>
> Now comes the problem: users are authenticated, then Apache takes the cgi
> script but instead of executing it it displays its content as text file.
>
> The funny thing is that the same cgi script when I move it to another cgi
> directory (where I do not use mod_python for authentication) works fine.
> It executes as cgi script.
>
> Apparently when I protect a directory by mod_python authentication handler
> then Apache does not want to execute underlying cgi scripts from this
> directory!
>
> Here comes the configuration file for this directory:
>
> Alias /GridHyperNews "/var/www/cgi-bin/GridHyperNews"
>     <Directory /var/www/cgi-bin/GridHyperNews>
> 	AllowOverride None
> 	#I want the directory to contain cgi scripts
>         Options +ExecCGI
> 	SetHandler cgi-script
> 	# users who come to this directory must be authenticated by
> 	# myhandler2
> 	PythonAuthenHandler myhandler2
> 	PythonDebug on
> 	PythonPath "sys.path + ['/root/mod_python_handlers']"
> 	require valid-user
>     </Directory>
>
>
> The myhandler2.py code is very simple
>
> from mod_python import apache
> from mod_python import util
>
> import _mp_mod_ssl
> import os,string
>
> def authenhandler(req):
>     req.add_common_vars()
>     req.user="unknown_user"
>
>     return apache.OK
>
> Now, no matter what I do scripts under the directory
> /var/www/cgi-bin/GridHyperNews are not treated by Apache as cgi but as
> text files.
>
> Tomasz Wlodek                        | tel 631-344-7448
> Brookhaven Laboratory, Building 510M | fax 631-344-7616
> Upton NY 11973-5000                  |
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grahamd at dscpl.com.au  Fri Feb 24 16:46:01 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb 24 16:46:25 2006
Subject: [mod_python] [Fwd: Returned mail: see transcript for details]
In-Reply-To: <1140792971.2630.9.camel@localhost.localdomain>
References: <1140792971.2630.9.camel@localhost.localdomain>
Message-ID: <FD9B9A89-C901-447A-9548-04980A247AEC@dscpl.com.au>

FWIW, there is a JIRA bug report for the attachment issue. :-)

   http://issues.apache.org/jira/browse/MODPYTHON-44

The attachments are there, just replace:

   mm_cfg_has_not_been_edited_to_set_host_domains

with:

   www.modpython.org

in the URL.

Graham

On 25/02/2006, at 1:56 AM, Joshua Ginsberg wrote:

> Hmm... the below request and perhaps get the
> mod_python-admin@modpython.org email address working? :-P
>
> -jag
>
> From: Mail Delivery Subsystem <MAILER-DAEMON@modpython.org>
> Date: 25 February 2006 1:45:54 AM
> To: <listspam@flowtheory.net>
> Subject: Returned mail: see transcript for details
>
>
> The original message was received at Fri, 24 Feb 2006 09:45:53 -0500
> from mail.brainstorminternet.net [66.118.220.25]
>
>    ----- The following addresses had permanent fatal errors -----
> "|/var/mailman/mail/mailman mailowner mod_python"
>     (reason: 6)
>     (expanded from: <Mod_python-admin@modpython.org>)
>
>    ----- Transcript of session follows -----
> Illegal command: mailowner
> 554 5.3.0 unknown mailer error 6
> Reporting-MTA: dns; modpython.org
> Received-From-MTA: DNS; mail.brainstorminternet.net
> Arrival-Date: Fri, 24 Feb 2006 09:45:53 -0500
>
> Final-Recipient: RFC822; Mod_python-admin@modpython.org
> X-Actual-Recipient: X-Unix; |/var/mailman/mail/mailman mailowner  
> mod_python
> Action: failed
> Status: 5.0.0
> Diagnostic-Code: X-Unix; 6
> Last-Attempt-Date: Fri, 24 Feb 2006 09:45:54 -0500
>
> From: Joshua Ginsberg <listspam@flowtheory.net>
> Date: 25 February 2006 1:45:51 AM
> To: Mod_python-admin@modpython.org
> Subject: Archives?
>
>
> Could whomever has administrative access to Mailman change the URL  
> host
> field? Currently, the archives link from the listinfo page reads:
>
> http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/ 
> mod_python/
>
> :-)
>
> -jag
>
>
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From listspam at flowtheory.net  Fri Feb 24 17:22:47 2006
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Fri Feb 24 17:22:54 2006
Subject: [mod_python] [Fwd: Returned mail: see transcript for details]
In-Reply-To: <FD9B9A89-C901-447A-9548-04980A247AEC@dscpl.com.au>
References: <1140792971.2630.9.camel@localhost.localdomain>
	<FD9B9A89-C901-447A-9548-04980A247AEC@dscpl.com.au>
Message-ID: <1140819768.939.17.camel@localhost.localdomain>

Hi Graham --

I hadn't thought that it would affect attachments, but the link I was
referring to was at:

http://mailman.modpython.org/mailman/listinfo/mod_python

Though I'm sure the same issue is affecting both. Thanks!

-jag

On Sat, 2006-02-25 at 08:46 +1100, Graham Dumpleton wrote:
> FWIW, there is a JIRA bug report for the attachment issue. :-)
> 
>    http://issues.apache.org/jira/browse/MODPYTHON-44
> 
> The attachments are there, just replace:
> 
>    mm_cfg_has_not_been_edited_to_set_host_domains
> 
> with:
> 
>    www.modpython.org
> 
> in the URL.
> 
> Graham
> 
> On 25/02/2006, at 1:56 AM, Joshua Ginsberg wrote:
> 
> > Hmm... the below request and perhaps get the
> > mod_python-admin@modpython.org email address working? :-P
> >
> > -jag
> >
> > From: Mail Delivery Subsystem <MAILER-DAEMON@modpython.org>
> > Date: 25 February 2006 1:45:54 AM
> > To: <listspam@flowtheory.net>
> > Subject: Returned mail: see transcript for details
> >
> >
> > The original message was received at Fri, 24 Feb 2006 09:45:53 -0500
> > from mail.brainstorminternet.net [66.118.220.25]
> >
> >    ----- The following addresses had permanent fatal errors -----
> > "|/var/mailman/mail/mailman mailowner mod_python"
> >     (reason: 6)
> >     (expanded from: <Mod_python-admin@modpython.org>)
> >
> >    ----- Transcript of session follows -----
> > Illegal command: mailowner
> > 554 5.3.0 unknown mailer error 6
> > Reporting-MTA: dns; modpython.org
> > Received-From-MTA: DNS; mail.brainstorminternet.net
> > Arrival-Date: Fri, 24 Feb 2006 09:45:53 -0500
> >
> > Final-Recipient: RFC822; Mod_python-admin@modpython.org
> > X-Actual-Recipient: X-Unix; |/var/mailman/mail/mailman mailowner  
> > mod_python
> > Action: failed
> > Status: 5.0.0
> > Diagnostic-Code: X-Unix; 6
> > Last-Attempt-Date: Fri, 24 Feb 2006 09:45:54 -0500
> >
> > From: Joshua Ginsberg <listspam@flowtheory.net>
> > Date: 25 February 2006 1:45:51 AM
> > To: Mod_python-admin@modpython.org
> > Subject: Archives?
> >
> >
> > Could whomever has administrative access to Mailman change the URL  
> > host
> > field? Currently, the archives link from the listinfo page reads:
> >
> > http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/ 
> > mod_python/
> >
> > :-)
> >
> > -jag
> >
> >
> >
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From grahamd at dscpl.com.au  Fri Feb 24 19:59:01 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Feb 24 19:59:21 2006
Subject: [mod_python] Re: more callable__auth__
In-Reply-To: <20060225002807.10711.qmail@web81204.mail.mud.yahoo.com>
References: <20060225002807.10711.qmail@web81204.mail.mud.yahoo.com>
Message-ID: <93E65589-AF4E-4409-9757-FCBDCDAEC0D9@dscpl.com.au>

Please keep followups on mailing list. :-(

On 25/02/2006, at 11:28 AM, Robert Thomas Davis wrote:

> Graham
>
> ...finally got everything up and running with the new
> version :)  Now I get a NameError exception on the
> call to validate_user (which, at least, is a step in
> the right direction)!!
>
> Do you have any suggestions as to what would be a
> better way to structure this so I don't encounter that
> issue?  Basically what I am trying to accomplish is
> the following...
>
> There will be more defs in index.py (like the devices
> def) whose contents I want to protect.  I want to
> ensure that the user will have to enter their
> user/passwd anytime attempts are made to access these
> functions (unless the current session is still valid
> of course).  After reading that article you references
> it seems I would need to move the validate_user
> function to an outside module and then import it
> inside the def __auth__()??

Personally I wouldn't use the mod_python.publisher authentication,
but that is a topic for another time.

If you must use the mod_python.publisher support for basic  
authentication,
then use a wrapper class to do it. If you have Python 2.4, you could  
even
use decorators for the purpose to make it a really clean solution.

Basic code is:

   from mod_python import apache

   class Restricted:
     def __init__(self,method,realm="Restricted Access"):
       self.__call__ = method
       self.__auth_realm__ = realm
     def __auth__(self,req,user,password):
       apache.log_error("__auth__")
       return user == "mickey" and password == "mouse"

   def index(req):
     return "index"

   def page1(req):
     return "page1"

   def page2(req):
     return "page2"

   page2 = Restricted(page2)

The "Restricted" class acts as a wrapper around the published function.
The auth functions are actually in the wrapper class. Because the  
wrapper
class is at global scope, you don't have the problem with nested  
functions
that you are seeing.

I don't have Python 2.4, so can't give you a solution which uses  
decorators,
but I am sure that someone else on the mailing list who has and  
understands
decorators could provide so code pretty quick. The ideas with decorators
is you should be able to setup the code so all you need to do is  
something
like:

   def index(req):
     return "index"

   def page1(req):
     return "page1"

   @restricted
   def page2(req):
     return "page2"

The decorator would do the magic of wrapping the function for you  
automatically.
To me this would be a really clean solution, although possibly  
restricted to use
of functions.

Anyone want to step up and provide a decorator solution for this?

> Also, do any RPMs exist for these more recent versions
> of mod_python OR is there a documented procedure for
> building a mod_python RPM from the recent releases?

I imagine someone will put together an RPM for 3.2.7/3.2.8
at some stage. This is usually done by someone attached to
the maintainers of the Linux distribution and not the mod_python
folks though.

Graham

> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
>> Robert Thomas Davis wrote ..
>>> Graham
>>>
>>> Sorry...your replies were be sent to the "bulk"
>>> folder...glad I checked it before just deleting
>> all!
>>>
>>> I am using mod_python 3.1.3 with apache 2.0.53 on
>>> Fedora Core 3.
>>
>> Any chance you can upgrade to mod_python 3.2.7? I
>> really can't find
>> any problem with the basic structure of what you are
>> doing, but there
>> have been fixes to publisher in 3.2.7 that may mean
>> I am not seeing
>> the problem.
>>
>>> The url I use to access the "devices" page (the
>> one I
>>> would like to protect) is
>> http://localhost/devices.
>>>
>>> I do agree about having the info on the mailing
>> list
>>> so others could learn from it; maybe we can post
>> the
>>> results.
>>
>> The ongoing discussion is also useful, as the actual
>> debugging process
>> itself can be just as useful as the final result.
>> Thus, use reply-all.
>>
>> Graham
>>
>>> Thanks,
>>>
>>> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>>>
>>>> BTW, I can't seem to find that you have ever
>> said
>>>> exactly which version
>>>> of mod_python you are using. Are you using the
>>>> latest version?
>>>>
>>>> Graham
>>>>
>>>> Graham Dumpleton wrote ..
>>>>> Still generally prefer it to be on the mailing
>>>> list as other people can
>>>>> learn from it and it is in the mailing list
>>>> archive as well, so people
>>>>> down the track may find it as well and it may
>>>> solve a problem for
>>>>> them also.
>>>>>
>>>>> One more question. What URLs are you using to
>>>> access the resources
>>>>> so I can relate that properly to the Apache
>>>> configuration and the
>>>>> published functions in the file?
>>>>>
>>>>> Graham
>>>>>
>>>>> Robert Thomas Davis wrote ..
>>>>>> Hell graham
>>>>>>
>>>>>> I really appreciate your help with
>> this...and
>>>> since
>>>>>> you have been the only one responding I
>> thought
>>>> I
>>>>>> might as well just mail you the files in
>>>> question
>>>>>> (index.py and httpd.conf, attached as a
>> .tgz)
>>>>>>
>>>>>> The file index.py would normally live in the
>>>>>> directory:
>>>>>> /usr/local/lap/http/
>>>>>>
>>>>>> Based on your last reply I am wondering if
>> it is
>>>> my
>>>>>> httpd.conf file that is setup incorrectly (i
>> do
>>>> not
>>>>>> get the 500 error at all).  When the
>> enclosed
>>>> code
>>>>>> gets executed it appears as though it skips
>>>> right over
>>>>>> the nested __auth__ fuction.  However, if
>> that
>>>>>> function is moved to the module scope
>> (index.py)
>>>> it
>>>>>> always gets called and subsequently calls
>> the
>>>>>> validate_users function.
>>>>>>
>>>>>> Again...your help is much appreciated.
>>>>>>
>>>>>> Rob
>>>>>
>> _______________________________________________
>>>>> Mod_python mailing list
>>>>> Mod_python@modpython.org
>>>>>
>>>>
>>>
>>
> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>
>>

From listspam at flowtheory.net  Fri Feb 24 20:12:23 2006
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Fri Feb 24 20:12:45 2006
Subject: [mod_python] Re: more callable__auth__
In-Reply-To: <93E65589-AF4E-4409-9757-FCBDCDAEC0D9@dscpl.com.au>
References: <20060225002807.10711.qmail@web81204.mail.mud.yahoo.com>
	<93E65589-AF4E-4409-9757-FCBDCDAEC0D9@dscpl.com.au>
Message-ID: <d2e97db7e4574543f673a04d5d70e868@flowtheory.net>

Wow -- I'm the administrivia whore today... sorry about that...

Why don't we configure the list to have the reply-to be back to the 
list? :-) I can't tell you the number of times I hit reply instead of 
remembering to hit "Reply All", a button which I generally consider to 
be the brainchild of Satan.

-jag

On Feb 24, 2006, at 7:59 PM, Graham Dumpleton wrote:

> Please keep followups on mailing list. :-(
>
> On 25/02/2006, at 11:28 AM, Robert Thomas Davis wrote:
>
>> Graham
>>
>> ...finally got everything up and running with the new
>> version :)  Now I get a NameError exception on the
>> call to validate_user (which, at least, is a step in
>> the right direction)!!
>>
>> Do you have any suggestions as to what would be a
>> better way to structure this so I don't encounter that
>> issue?  Basically what I am trying to accomplish is
>> the following...
>>
>> There will be more defs in index.py (like the devices
>> def) whose contents I want to protect.  I want to
>> ensure that the user will have to enter their
>> user/passwd anytime attempts are made to access these
>> functions (unless the current session is still valid
>> of course).  After reading that article you references
>> it seems I would need to move the validate_user
>> function to an outside module and then import it
>> inside the def __auth__()??
>
> Personally I wouldn't use the mod_python.publisher authentication,
> but that is a topic for another time.
>
> If you must use the mod_python.publisher support for basic 
> authentication,
> then use a wrapper class to do it. If you have Python 2.4, you could 
> even
> use decorators for the purpose to make it a really clean solution.
>
> Basic code is:
>
>   from mod_python import apache
>
>   class Restricted:
>     def __init__(self,method,realm="Restricted Access"):
>       self.__call__ = method
>       self.__auth_realm__ = realm
>     def __auth__(self,req,user,password):
>       apache.log_error("__auth__")
>       return user == "mickey" and password == "mouse"
>
>   def index(req):
>     return "index"
>
>   def page1(req):
>     return "page1"
>
>   def page2(req):
>     return "page2"
>
>   page2 = Restricted(page2)
>
> The "Restricted" class acts as a wrapper around the published function.
> The auth functions are actually in the wrapper class. Because the 
> wrapper
> class is at global scope, you don't have the problem with nested 
> functions
> that you are seeing.
>
> I don't have Python 2.4, so can't give you a solution which uses 
> decorators,
> but I am sure that someone else on the mailing list who has and 
> understands
> decorators could provide so code pretty quick. The ideas with 
> decorators
> is you should be able to setup the code so all you need to do is 
> something
> like:
>
>   def index(req):
>     return "index"
>
>   def page1(req):
>     return "page1"
>
>   @restricted
>   def page2(req):
>     return "page2"
>
> The decorator would do the magic of wrapping the function for you 
> automatically.
> To me this would be a really clean solution, although possibly 
> restricted to use
> of functions.
>
> Anyone want to step up and provide a decorator solution for this?
>
>> Also, do any RPMs exist for these more recent versions
>> of mod_python OR is there a documented procedure for
>> building a mod_python RPM from the recent releases?
>
> I imagine someone will put together an RPM for 3.2.7/3.2.8
> at some stage. This is usually done by someone attached to
> the maintainers of the Linux distribution and not the mod_python
> folks though.
>
> Graham
>
>> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>>
>>> Robert Thomas Davis wrote ..
>>>> Graham
>>>>
>>>> Sorry...your replies were be sent to the "bulk"
>>>> folder...glad I checked it before just deleting
>>> all!
>>>>
>>>> I am using mod_python 3.1.3 with apache 2.0.53 on
>>>> Fedora Core 3.
>>>
>>> Any chance you can upgrade to mod_python 3.2.7? I
>>> really can't find
>>> any problem with the basic structure of what you are
>>> doing, but there
>>> have been fixes to publisher in 3.2.7 that may mean
>>> I am not seeing
>>> the problem.
>>>
>>>> The url I use to access the "devices" page (the
>>> one I
>>>> would like to protect) is
>>> http://localhost/devices.
>>>>
>>>> I do agree about having the info on the mailing
>>> list
>>>> so others could learn from it; maybe we can post
>>> the
>>>> results.
>>>
>>> The ongoing discussion is also useful, as the actual
>>> debugging process
>>> itself can be just as useful as the final result.
>>> Thus, use reply-all.
>>>
>>> Graham
>>>
>>>> Thanks,
>>>>
>>>> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>>>>
>>>>> BTW, I can't seem to find that you have ever
>>> said
>>>>> exactly which version
>>>>> of mod_python you are using. Are you using the
>>>>> latest version?
>>>>>
>>>>> Graham
>>>>>
>>>>> Graham Dumpleton wrote ..
>>>>>> Still generally prefer it to be on the mailing
>>>>> list as other people can
>>>>>> learn from it and it is in the mailing list
>>>>> archive as well, so people
>>>>>> down the track may find it as well and it may
>>>>> solve a problem for
>>>>>> them also.
>>>>>>
>>>>>> One more question. What URLs are you using to
>>>>> access the resources
>>>>>> so I can relate that properly to the Apache
>>>>> configuration and the
>>>>>> published functions in the file?
>>>>>>
>>>>>> Graham
>>>>>>
>>>>>> Robert Thomas Davis wrote ..
>>>>>>> Hell graham
>>>>>>>
>>>>>>> I really appreciate your help with
>>> this...and
>>>>> since
>>>>>>> you have been the only one responding I
>>> thought
>>>>> I
>>>>>>> might as well just mail you the files in
>>>>> question
>>>>>>> (index.py and httpd.conf, attached as a
>>> .tgz)
>>>>>>>
>>>>>>> The file index.py would normally live in the
>>>>>>> directory:
>>>>>>> /usr/local/lap/http/
>>>>>>>
>>>>>>> Based on your last reply I am wondering if
>>> it is
>>>>> my
>>>>>>> httpd.conf file that is setup incorrectly (i
>>> do
>>>>> not
>>>>>>> get the 500 error at all).  When the
>>> enclosed
>>>>> code
>>>>>>> gets executed it appears as though it skips
>>>>> right over
>>>>>>> the nested __auth__ fuction.  However, if
>>> that
>>>>>>> function is moved to the module scope
>>> (index.py)
>>>>> it
>>>>>>> always gets called and subsequently calls
>>> the
>>>>>>> validate_users function.
>>>>>>>
>>>>>>> Again...your help is much appreciated.
>>>>>>>
>>>>>>> Rob
>>>>>>
>>> _______________________________________________
>>>>>> Mod_python mailing list
>>>>>> Mod_python@modpython.org
>>>>>>
>>>>>
>>>>
>>>
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>
>>>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grisha at apache.org  Fri Feb 24 10:16:21 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Feb 24 23:27:22 2006
Subject: [mod_python] [ANNOUNCE] Mod_python 3.2.8 (security)
Message-ID: <20060224101312.B97815@grisha.dyndns.org>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of version 3.2.8 of mod_python.

This release addresses a vulnerability in mod_python's FileSession
object whereby a carefully crafted session cookie could potentially
permit an attacker to execute code on the server.

FileSession was introduced in mod_python 3.2.7 released on February 15
2006 and is not enabled by default, therefore only a very small number
of installations, if any, are likely to be affected by this issue.

There are no other changes or improvements from the previous version in
this release.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit http://www.modpython.org/

Regards,

Gregory Trubetskoy

From grahamd at dscpl.com.au  Sat Feb 25 01:07:47 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 25 01:08:11 2006
Subject: [mod_python] Why Apache does not execute cgi scripts
In-Reply-To: <Pine.GSO.4.58.0602241639420.24884@rcf2.rhic.bnl.gov>
References: <a79646ad0602041209p74883f8fta5b576a564d6fece@mail.gmail.com>
	<001001c629d7$f0527100$0500a8c0@brittonfamily.org>
	<a79646ad0602041755u5bcfede9k92cbb668d24d9989@mail.gmail.com>
	<004201c62a03$ac9915a0$0500a8c0@brittonfamily.org>
	<Pine.GSO.4.58.0602241622030.24884@rcf2.rhic.bnl.gov>
	<Pine.GSO.4.58.0602241639420.24884@rcf2.rhic.bnl.gov>
Message-ID: <A99BA306-EE82-44FC-B419-03DE35EB0A3A@dscpl.com.au>

I don't know why, but if you define Require directive, but don't  
define AuthType
and authenhandler returns apache.OK, it doesn't work. Also, it skips  
the type
checker and fixup handler phases as well, going direct to the  
response handler
phase.

To at least get it working, include:

   AuthType Dummy

This sort of strange behaviour probably confirms my thinking that  
authenhandler
support in mod_python was incomplete and why I have added changes as
described in:

   http://issues.apache.org/jira/browse/MODPYTHON-124

for mod_python 3.3. One can't make short cuts when writing  
authenhandlers, they
need to be done properly or weird things like this could well happen.

Graham

On 25/02/2006, at 8:41 AM, Tomasz Wlodek wrote:

> Ok, one detai, which I discovered by trial and error:
>
> If I remove the line
>
> require valid-user
>
> then Apache allows me to execute the cgi scripts.
>
> If I leave it then it displays them as text.
>
> Does anyone understand this behavior?
>
> Tomasz Wlodek                        | tel 631-344-7448
> Brookhaven Laboratory, Building 510M | fax 631-344-7616
> Upton NY 11973-5000                  |
>
> On Fri, 24 Feb 2006, Tomasz Wlodek wrote:
>
>> Hello experts,
>>
>> I am not sure whether this issue belongs to Apache proper or mod  
>> python or
>> both.
>>
>> here is the problem: I use mod_python authentication handler to
>> authenticate users who come to some directory. This part of the  
>> code works
>> fine.
>>
>> After the user is authenticated mod_python returns apache.OK and then
>> Apache is supposed to execute cgi script which is located in this
>> directory. For the time being the cgi script is a simple "Hello  
>> world" in
>> python.
>>
>> Now comes the problem: users are authenticated, then Apache takes  
>> the cgi
>> script but instead of executing it it displays its content as text  
>> file.
>>
>> The funny thing is that the same cgi script when I move it to  
>> another cgi
>> directory (where I do not use mod_python for authentication) works  
>> fine.
>> It executes as cgi script.
>>
>> Apparently when I protect a directory by mod_python authentication  
>> handler
>> then Apache does not want to execute underlying cgi scripts from this
>> directory!
>>
>> Here comes the configuration file for this directory:
>>
>> Alias /GridHyperNews "/var/www/cgi-bin/GridHyperNews"
>>     <Directory /var/www/cgi-bin/GridHyperNews>
>> 	AllowOverride None
>> 	#I want the directory to contain cgi scripts
>>         Options +ExecCGI
>> 	SetHandler cgi-script
>> 	# users who come to this directory must be authenticated by
>> 	# myhandler2
>> 	PythonAuthenHandler myhandler2
>> 	PythonDebug on
>> 	PythonPath "sys.path + ['/root/mod_python_handlers']"
>> 	require valid-user
>>     </Directory>
>>
>>
>> The myhandler2.py code is very simple
>>
>> from mod_python import apache
>> from mod_python import util
>>
>> import _mp_mod_ssl
>> import os,string
>>
>> def authenhandler(req):
>>     req.add_common_vars()
>>     req.user="unknown_user"
>>
>>     return apache.OK
>>
>> Now, no matter what I do scripts under the directory
>> /var/www/cgi-bin/GridHyperNews are not treated by Apache as cgi  
>> but as
>> text files.
>>
>> Tomasz Wlodek                        | tel 631-344-7448
>> Brookhaven Laboratory, Building 510M | fax 631-344-7616
>> Upton NY 11973-5000                  |
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From nicolas at lehuen.com  Sat Feb 25 03:32:12 2006
From: nicolas at lehuen.com (Nicolas Lehuen)
Date: Sat Feb 25 03:32:16 2006
Subject: [mod_python] Re: more callable__auth__
In-Reply-To: <d2e97db7e4574543f673a04d5d70e868@flowtheory.net>
References: <20060225002807.10711.qmail@web81204.mail.mud.yahoo.com>
	<93E65589-AF4E-4409-9757-FCBDCDAEC0D9@dscpl.com.au>
	<d2e97db7e4574543f673a04d5d70e868@flowtheory.net>
Message-ID: <c298f2d70602250032o405a5afek@mail.gmail.com>

That is called "Reply-To Munging" and is considered harmful by some.

http://www.unicom.com/pw/reply-to-harmful.html

Regards,
Nicolas

2006/2/25, Joshua Ginsberg <listspam@flowtheory.net>:
> Wow -- I'm the administrivia whore today... sorry about that...
>
> Why don't we configure the list to have the reply-to be back to the
> list? :-) I can't tell you the number of times I hit reply instead of
> remembering to hit "Reply All", a button which I generally consider to
> be the brainchild of Satan.
>
> -jag
>
> On Feb 24, 2006, at 7:59 PM, Graham Dumpleton wrote:
>
> > Please keep followups on mailing list. :-(
> >
> > On 25/02/2006, at 11:28 AM, Robert Thomas Davis wrote:
> >
> >> Graham
> >>
> >> ...finally got everything up and running with the new
> >> version :)  Now I get a NameError exception on the
> >> call to validate_user (which, at least, is a step in
> >> the right direction)!!
> >>
> >> Do you have any suggestions as to what would be a
> >> better way to structure this so I don't encounter that
> >> issue?  Basically what I am trying to accomplish is
> >> the following...
> >>
> >> There will be more defs in index.py (like the devices
> >> def) whose contents I want to protect.  I want to
> >> ensure that the user will have to enter their
> >> user/passwd anytime attempts are made to access these
> >> functions (unless the current session is still valid
> >> of course).  After reading that article you references
> >> it seems I would need to move the validate_user
> >> function to an outside module and then import it
> >> inside the def __auth__()??
> >
> > Personally I wouldn't use the mod_python.publisher authentication,
> > but that is a topic for another time.
> >
> > If you must use the mod_python.publisher support for basic
> > authentication,
> > then use a wrapper class to do it. If you have Python 2.4, you could
> > even
> > use decorators for the purpose to make it a really clean solution.
> >
> > Basic code is:
> >
> >   from mod_python import apache
> >
> >   class Restricted:
> >     def __init__(self,method,realm="Restricted Access"):
> >       self.__call__ = method
> >       self.__auth_realm__ = realm
> >     def __auth__(self,req,user,password):
> >       apache.log_error("__auth__")
> >       return user == "mickey" and password == "mouse"
> >
> >   def index(req):
> >     return "index"
> >
> >   def page1(req):
> >     return "page1"
> >
> >   def page2(req):
> >     return "page2"
> >
> >   page2 = Restricted(page2)
> >
> > The "Restricted" class acts as a wrapper around the published function.
> > The auth functions are actually in the wrapper class. Because the
> > wrapper
> > class is at global scope, you don't have the problem with nested
> > functions
> > that you are seeing.
> >
> > I don't have Python 2.4, so can't give you a solution which uses
> > decorators,
> > but I am sure that someone else on the mailing list who has and
> > understands
> > decorators could provide so code pretty quick. The ideas with
> > decorators
> > is you should be able to setup the code so all you need to do is
> > something
> > like:
> >
> >   def index(req):
> >     return "index"
> >
> >   def page1(req):
> >     return "page1"
> >
> >   @restricted
> >   def page2(req):
> >     return "page2"
> >
> > The decorator would do the magic of wrapping the function for you
> > automatically.
> > To me this would be a really clean solution, although possibly
> > restricted to use
> > of functions.
> >
> > Anyone want to step up and provide a decorator solution for this?
> >
> >> Also, do any RPMs exist for these more recent versions
> >> of mod_python OR is there a documented procedure for
> >> building a mod_python RPM from the recent releases?
> >
> > I imagine someone will put together an RPM for 3.2.7/3.2.8
> > at some stage. This is usually done by someone attached to
> > the maintainers of the Linux distribution and not the mod_python
> > folks though.
> >
> > Graham
> >
> >> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> >>
> >>> Robert Thomas Davis wrote ..
> >>>> Graham
> >>>>
> >>>> Sorry...your replies were be sent to the "bulk"
> >>>> folder...glad I checked it before just deleting
> >>> all!
> >>>>
> >>>> I am using mod_python 3.1.3 with apache 2.0.53 on
> >>>> Fedora Core 3.
> >>>
> >>> Any chance you can upgrade to mod_python 3.2.7? I
> >>> really can't find
> >>> any problem with the basic structure of what you are
> >>> doing, but there
> >>> have been fixes to publisher in 3.2.7 that may mean
> >>> I am not seeing
> >>> the problem.
> >>>
> >>>> The url I use to access the "devices" page (the
> >>> one I
> >>>> would like to protect) is
> >>> http://localhost/devices.
> >>>>
> >>>> I do agree about having the info on the mailing
> >>> list
> >>>> so others could learn from it; maybe we can post
> >>> the
> >>>> results.
> >>>
> >>> The ongoing discussion is also useful, as the actual
> >>> debugging process
> >>> itself can be just as useful as the final result.
> >>> Thus, use reply-all.
> >>>
> >>> Graham
> >>>
> >>>> Thanks,
> >>>>
> >>>> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> >>>>
> >>>>> BTW, I can't seem to find that you have ever
> >>> said
> >>>>> exactly which version
> >>>>> of mod_python you are using. Are you using the
> >>>>> latest version?
> >>>>>
> >>>>> Graham
> >>>>>
> >>>>> Graham Dumpleton wrote ..
> >>>>>> Still generally prefer it to be on the mailing
> >>>>> list as other people can
> >>>>>> learn from it and it is in the mailing list
> >>>>> archive as well, so people
> >>>>>> down the track may find it as well and it may
> >>>>> solve a problem for
> >>>>>> them also.
> >>>>>>
> >>>>>> One more question. What URLs are you using to
> >>>>> access the resources
> >>>>>> so I can relate that properly to the Apache
> >>>>> configuration and the
> >>>>>> published functions in the file?
> >>>>>>
> >>>>>> Graham
> >>>>>>
> >>>>>> Robert Thomas Davis wrote ..
> >>>>>>> Hell graham
> >>>>>>>
> >>>>>>> I really appreciate your help with
> >>> this...and
> >>>>> since
> >>>>>>> you have been the only one responding I
> >>> thought
> >>>>> I
> >>>>>>> might as well just mail you the files in
> >>>>> question
> >>>>>>> (index.py and httpd.conf, attached as a
> >>> .tgz)
> >>>>>>>
> >>>>>>> The file index.py would normally live in the
> >>>>>>> directory:
> >>>>>>> /usr/local/lap/http/
> >>>>>>>
> >>>>>>> Based on your last reply I am wondering if
> >>> it is
> >>>>> my
> >>>>>>> httpd.conf file that is setup incorrectly (i
> >>> do
> >>>>> not
> >>>>>>> get the 500 error at all).  When the
> >>> enclosed
> >>>>> code
> >>>>>>> gets executed it appears as though it skips
> >>>>> right over
> >>>>>>> the nested __auth__ fuction.  However, if
> >>> that
> >>>>>>> function is moved to the module scope
> >>> (index.py)
> >>>>> it
> >>>>>>> always gets called and subsequently calls
> >>> the
> >>>>>>> validate_users function.
> >>>>>>>
> >>>>>>> Again...your help is much appreciated.
> >>>>>>>
> >>>>>>> Rob
> >>>>>>
> >>> _______________________________________________
> >>>>>> Mod_python mailing list
> >>>>>> Mod_python@modpython.org
> >>>>>>
> >>>>>
> >>>>
> >>>
> >> http://mailman.modpython.org/mailman/listinfo/mod_python
> >>>>>
> >>>
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From tkruthoff at gmail.com  Sat Feb 25 04:55:25 2006
From: tkruthoff at gmail.com (Troy Kruthoff)
Date: Sat Feb 25 04:55:34 2006
Subject: [mod_python] mod_python and mod_dav
Message-ID: <5ef0bc720602250155gdce28c1t28df74bd0ea01e97@mail.gmail.com>

I'm trying to figure out the best way to add webdav capability to a
mod_python web app.   In short, I want to send/update calendar files
via calendar information stored in a database.  I've googled for
python based webdav server modules, and found 2, but the newest one
was last updated in 2000.

My first thought was to write something in C that allowed mod_python
to control mod_dav, but this looks tricky and looks like it will take
me too long and crush my ego by confirming that I suck at C.

Second thought is to dig up the wevdav RFC and make a webdav server
module that will work as a mod_python handler (or at least called from
one).

Third thought is to use a fixup handler.  This is where I'd really
like some feedback!  Can I (in a fixup) ascertain that the content
handler will be mod_dav, query the database, and write the requested
file to disk just before mod_dav is asked to push it to the client?

Thanks,

Troy

From grahamd at dscpl.com.au  Sat Feb 25 05:16:12 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 25 05:30:18 2006
Subject: [mod_python] mod_python and mod_dav
In-Reply-To: <5ef0bc720602250155gdce28c1t28df74bd0ea01e97@mail.gmail.com>
References: <5ef0bc720602250155gdce28c1t28df74bd0ea01e97@mail.gmail.com>
Message-ID: <A88B7B1F-3121-41B5-A327-816B725EF8EE@dscpl.com.au>


On 25/02/2006, at 8:55 PM, Troy Kruthoff wrote:

> I'm trying to figure out the best way to add webdav capability to a
> mod_python web app.   In short, I want to send/update calendar files
> via calendar information stored in a database.  I've googled for
> python based webdav server modules, and found 2, but the newest one
> was last updated in 2000.
>
> My first thought was to write something in C that allowed mod_python
> to control mod_dav, but this looks tricky and looks like it will take
> me too long and crush my ego by confirming that I suck at C.
>
> Second thought is to dig up the wevdav RFC and make a webdav server
> module that will work as a mod_python handler (or at least called from
> one).
>
> Third thought is to use a fixup handler.  This is where I'd really
> like some feedback!  Can I (in a fixup) ascertain that the content
> handler will be mod_dav, query the database, and write the requested
> file to disk just before mod_dav is asked to push it to the client?

I have a idea of how mod_dav_python could be constructed. I had put
the idea on the back burner for the moment. Here is email where I have
posted a little bit about my ideas before when someone raised the idea
of mod_dav/mod_python integration.

See below:

> On 30/01/2006, at 9:49 PM, Matt Carpenter wrote:
>
>
>> Graham Dumpleton wrote:
>>
>>> Others may know what you are talking about, but I plead ignorance.
>>> Can
>>> you perhaps describe further what you are talking about, how it
>>> would be
>>> used etc. A URL to stuff that could be read to understand similar
>>> things
>>> would also help.
>>>
>>> Graham
>>>
>> What I am trying to achieve:
>> I'm writing a module for our system for managing documents that're
>> attached to records in our database, updates to these documents are
>> recorded into the database along with what user made the user that
>> made the edit, and various other information depending on what type
>> of document (the system manages templates, and mailmerges with
>> virtual .csv files pulling data from the database as well). The
>> directory structure is entirely virtual, the structure on the
>> servers is just a few directories for each type of file, and the
>> files are named after their record in the database.
>> mod_dav implements hooks (see http://mailman.lyra.org/pipermail/dav-
>> dev/2005-April/005926.html), but I'm not a C programmer, so I'd
>> like a these hooks to be able to call python functions instead.
>> Hope that makes sense.
>>
>
> Regardless of how you might use it, from a technical standpoint I
> would say that it is not going to be possible at present.
>
> One could imagine being able to write a separate C based Apache    
> module
> which provides Python based wrappings for the DAV specific data
> structures   that the repository hook function use. As documented in:
>
>    http://docx.webperf.org/structdav__hooks__repository.html
>
> But, there are a few things missing. First, is there is no way to
> obtain references to the Python interpreter instances held by
> mod_python, the mechanisms for creating them and acquiring locks  
> against
> them from a distinct Apache   module. Similarly, there is there is no
> way to access the mod_python Python   request_rec wrapper object etc.
>
> Both of these and possibly other stuff would be required. You do not
> want to go having to duplicate all this stuff as it sort of defeats  
> the
> purpose   and would possibly prevent use of mod_python and your module
> in the same Apache instance.
>
> What would be an interesting area for investigation in the future
> would be to work out whether there are functions within the mod_python
> module   which could be exposed using the Apache
> APR_RETRIEVE_OPTIONAL_FN() interface. This would allow distinct  
> modules
> to dynamically obtain references to   some of the internals of
> mod_python so as to perhaps make use of all the   machinery it has
> already for manipulating Python interpreters, as well as   existing
> Python object wrappers for Apache structures.
>
> The end result would be the ability to create distinct C based Apache
> modules which themselves can also make use of Python by  
> bootstrapping of
> mod_python. It may be tricky to work out how to do it and come up  
> with a
> good   interface design, but certainly would be interesting.
>
> Graham


From tkruthoff at gmail.com  Sat Feb 25 06:19:54 2006
From: tkruthoff at gmail.com (Troy Kruthoff)
Date: Sat Feb 25 06:20:20 2006
Subject: [mod_python] mod_python and mod_dav
In-Reply-To: <A88B7B1F-3121-41B5-A327-816B725EF8EE@dscpl.com.au>
References: <5ef0bc720602250155gdce28c1t28df74bd0ea01e97@mail.gmail.com>
	<A88B7B1F-3121-41B5-A327-816B725EF8EE@dscpl.com.au>
Message-ID: <5ef0bc720602250319p203bfc16q6a20c71b98bcf9d8@mail.gmail.com>

Graham,

The below link describes making mod_include call into mod_cgi, so I
get how cool it would be to have the proper APR_RETRIEVE_OPTIONAL_FN()
interfaces for mod_python.  This looks like it may be beyond my scope,
but if no-one else is looking at doing this anytime soon I can take a
look at it.  Although I'd probabely be more of a help putting the code
behind the interface created by someone more familiar with the
workings of mod_python.

http://www.onlamp.com/pub/a/apache/2001/09/27/apache_2.html

Troy



On 2/25/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
> On 25/02/2006, at 8:55 PM, Troy Kruthoff wrote:
>
> > I'm trying to figure out the best way to add webdav capability to a
> > mod_python web app.   In short, I want to send/update calendar files
> > via calendar information stored in a database.  I've googled for
> > python based webdav server modules, and found 2, but the newest one
> > was last updated in 2000.
> >
> > My first thought was to write something in C that allowed mod_python
> > to control mod_dav, but this looks tricky and looks like it will take
> > me too long and crush my ego by confirming that I suck at C.
> >
> > Second thought is to dig up the wevdav RFC and make a webdav server
> > module that will work as a mod_python handler (or at least called from
> > one).
> >
> > Third thought is to use a fixup handler.  This is where I'd really
> > like some feedback!  Can I (in a fixup) ascertain that the content
> > handler will be mod_dav, query the database, and write the requested
> > file to disk just before mod_dav is asked to push it to the client?
>
> I have a idea of how mod_dav_python could be constructed. I had put
> the idea on the back burner for the moment. Here is email where I have
> posted a little bit about my ideas before when someone raised the idea
> of mod_dav/mod_python integration.
>
> See below:
>
> > On 30/01/2006, at 9:49 PM, Matt Carpenter wrote:
> >
> >
> >> Graham Dumpleton wrote:
> >>
> >>> Others may know what you are talking about, but I plead ignorance.
> >>> Can
> >>> you perhaps describe further what you are talking about, how it
> >>> would be
> >>> used etc. A URL to stuff that could be read to understand similar
> >>> things
> >>> would also help.
> >>>
> >>> Graham
> >>>
> >> What I am trying to achieve:
> >> I'm writing a module for our system for managing documents that're
> >> attached to records in our database, updates to these documents are
> >> recorded into the database along with what user made the user that
> >> made the edit, and various other information depending on what type
> >> of document (the system manages templates, and mailmerges with
> >> virtual .csv files pulling data from the database as well). The
> >> directory structure is entirely virtual, the structure on the
> >> servers is just a few directories for each type of file, and the
> >> files are named after their record in the database.
> >> mod_dav implements hooks (see http://mailman.lyra.org/pipermail/dav-
> >> dev/2005-April/005926.html), but I'm not a C programmer, so I'd
> >> like a these hooks to be able to call python functions instead.
> >> Hope that makes sense.
> >>
> >
> > Regardless of how you might use it, from a technical standpoint I
> > would say that it is not going to be possible at present.
> >
> > One could imagine being able to write a separate C based Apache
> > module
> > which provides Python based wrappings for the DAV specific data
> > structures   that the repository hook function use. As documented in:
> >
> >    http://docx.webperf.org/structdav__hooks__repository.html
> >
> > But, there are a few things missing. First, is there is no way to
> > obtain references to the Python interpreter instances held by
> > mod_python, the mechanisms for creating them and acquiring locks
> > against
> > them from a distinct Apache   module. Similarly, there is there is no
> > way to access the mod_python Python   request_rec wrapper object etc.
> >
> > Both of these and possibly other stuff would be required. You do not
> > want to go having to duplicate all this stuff as it sort of defeats
> > the
> > purpose   and would possibly prevent use of mod_python and your module
> > in the same Apache instance.
> >
> > What would be an interesting area for investigation in the future
> > would be to work out whether there are functions within the mod_python
> > module   which could be exposed using the Apache
> > APR_RETRIEVE_OPTIONAL_FN() interface. This would allow distinct
> > modules
> > to dynamically obtain references to   some of the internals of
> > mod_python so as to perhaps make use of all the   machinery it has
> > already for manipulating Python interpreters, as well as   existing
> > Python object wrappers for Apache structures.
> >
> > The end result would be the ability to create distinct C based Apache
> > modules which themselves can also make use of Python by
> > bootstrapping of
> > mod_python. It may be tricky to work out how to do it and come up
> > with a
> > good   interface design, but certainly would be interesting.
> >
> > Graham
>
>
>

From grahamd at dscpl.com.au  Sat Feb 25 06:56:55 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Feb 25 06:57:11 2006
Subject: [mod_python] mod_python and mod_dav
In-Reply-To: <5ef0bc720602250319p203bfc16q6a20c71b98bcf9d8@mail.gmail.com>
References: <5ef0bc720602250155gdce28c1t28df74bd0ea01e97@mail.gmail.com>
	<A88B7B1F-3121-41B5-A327-816B725EF8EE@dscpl.com.au>
	<5ef0bc720602250319p203bfc16q6a20c71b98bcf9d8@mail.gmail.com>
Message-ID: <C2942566-3C6B-4F7D-A595-141728DCD7B4@dscpl.com.au>

The JIRA web site is down at the moment, otherwise I would refer you
to patches for mod_python that allow callouts from mod_include (ie.,
server side include) into mod_python. In this case though, what is  
required
is for mod_python to export the optional functions so a mod_dav_python
module could call it, which is opposite to that for mod_include where
mod_python is a user of the functions.

Getting late here, so I'll post more about the whole mod_dav issue  
tomorrow
when JIRA is working again. I think I even understand what functions  
need
to be exported now, so may be able to post some patches for it if you  
or some
one else wants to seriously pursue this.

Graham

On 25/02/2006, at 10:19 PM, Troy Kruthoff wrote:

> Graham,
>
> The below link describes making mod_include call into mod_cgi, so I
> get how cool it would be to have the proper APR_RETRIEVE_OPTIONAL_FN()
> interfaces for mod_python.  This looks like it may be beyond my scope,
> but if no-one else is looking at doing this anytime soon I can take a
> look at it.  Although I'd probabely be more of a help putting the code
> behind the interface created by someone more familiar with the
> workings of mod_python.
>
> http://www.onlamp.com/pub/a/apache/2001/09/27/apache_2.html
>
> Troy
>
>
>
> On 2/25/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>>
>> On 25/02/2006, at 8:55 PM, Troy Kruthoff wrote:
>>
>>> I'm trying to figure out the best way to add webdav capability to a
>>> mod_python web app.   In short, I want to send/update calendar files
>>> via calendar information stored in a database.  I've googled for
>>> python based webdav server modules, and found 2, but the newest one
>>> was last updated in 2000.
>>>
>>> My first thought was to write something in C that allowed mod_python
>>> to control mod_dav, but this looks tricky and looks like it will  
>>> take
>>> me too long and crush my ego by confirming that I suck at C.
>>>
>>> Second thought is to dig up the wevdav RFC and make a webdav server
>>> module that will work as a mod_python handler (or at least called  
>>> from
>>> one).
>>>
>>> Third thought is to use a fixup handler.  This is where I'd really
>>> like some feedback!  Can I (in a fixup) ascertain that the content
>>> handler will be mod_dav, query the database, and write the requested
>>> file to disk just before mod_dav is asked to push it to the client?
>>
>> I have a idea of how mod_dav_python could be constructed. I had put
>> the idea on the back burner for the moment. Here is email where I  
>> have
>> posted a little bit about my ideas before when someone raised the  
>> idea
>> of mod_dav/mod_python integration.
>>
>> See below:
>>
>>> On 30/01/2006, at 9:49 PM, Matt Carpenter wrote:
>>>
>>>
>>>> Graham Dumpleton wrote:
>>>>
>>>>> Others may know what you are talking about, but I plead ignorance.
>>>>> Can
>>>>> you perhaps describe further what you are talking about, how it
>>>>> would be
>>>>> used etc. A URL to stuff that could be read to understand similar
>>>>> things
>>>>> would also help.
>>>>>
>>>>> Graham
>>>>>
>>>> What I am trying to achieve:
>>>> I'm writing a module for our system for managing documents that're
>>>> attached to records in our database, updates to these documents are
>>>> recorded into the database along with what user made the user that
>>>> made the edit, and various other information depending on what type
>>>> of document (the system manages templates, and mailmerges with
>>>> virtual .csv files pulling data from the database as well). The
>>>> directory structure is entirely virtual, the structure on the
>>>> servers is just a few directories for each type of file, and the
>>>> files are named after their record in the database.
>>>> mod_dav implements hooks (see http://mailman.lyra.org/pipermail/ 
>>>> dav-
>>>> dev/2005-April/005926.html), but I'm not a C programmer, so I'd
>>>> like a these hooks to be able to call python functions instead.
>>>> Hope that makes sense.
>>>>
>>>
>>> Regardless of how you might use it, from a technical standpoint I
>>> would say that it is not going to be possible at present.
>>>
>>> One could imagine being able to write a separate C based Apache
>>> module
>>> which provides Python based wrappings for the DAV specific data
>>> structures   that the repository hook function use. As documented  
>>> in:
>>>
>>>    http://docx.webperf.org/structdav__hooks__repository.html
>>>
>>> But, there are a few things missing. First, is there is no way to
>>> obtain references to the Python interpreter instances held by
>>> mod_python, the mechanisms for creating them and acquiring locks
>>> against
>>> them from a distinct Apache   module. Similarly, there is there  
>>> is no
>>> way to access the mod_python Python   request_rec wrapper object  
>>> etc.
>>>
>>> Both of these and possibly other stuff would be required. You do not
>>> want to go having to duplicate all this stuff as it sort of defeats
>>> the
>>> purpose   and would possibly prevent use of mod_python and your  
>>> module
>>> in the same Apache instance.
>>>
>>> What would be an interesting area for investigation in the future
>>> would be to work out whether there are functions within the  
>>> mod_python
>>> module   which could be exposed using the Apache
>>> APR_RETRIEVE_OPTIONAL_FN() interface. This would allow distinct
>>> modules
>>> to dynamically obtain references to   some of the internals of
>>> mod_python so as to perhaps make use of all the   machinery it has
>>> already for manipulating Python interpreters, as well as   existing
>>> Python object wrappers for Apache structures.
>>>
>>> The end result would be the ability to create distinct C based  
>>> Apache
>>> modules which themselves can also make use of Python by
>>> bootstrapping of
>>> mod_python. It may be tricky to work out how to do it and come up
>>> with a
>>> good   interface design, but certainly would be interesting.
>>>
>>> Graham
>>
>>
>>

From listspam at flowtheory.net  Sat Feb 25 12:19:21 2006
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Sat Feb 25 12:19:32 2006
Subject: [mod_python] Re: more callable__auth__
In-Reply-To: <c298f2d70602250032o405a5afek@mail.gmail.com>
References: <20060225002807.10711.qmail@web81204.mail.mud.yahoo.com>
	<93E65589-AF4E-4409-9757-FCBDCDAEC0D9@dscpl.com.au>
	<d2e97db7e4574543f673a04d5d70e868@flowtheory.net>
	<c298f2d70602250032o405a5afek@mail.gmail.com>
Message-ID: <11202419db316ed860f947e375a44aeb@flowtheory.net>

Interesting essay. If you're interested I've posted a rebuttal for the 
list administrators' consideration:

http://starboard.flowtheory.net/blog/?q=node/170

-jag

On Feb 25, 2006, at 3:32 AM, Nicolas Lehuen wrote:

> That is called "Reply-To Munging" and is considered harmful by some.
>
> http://www.unicom.com/pw/reply-to-harmful.html
>
> Regards,
> Nicolas
>
> 2006/2/25, Joshua Ginsberg <listspam@flowtheory.net>:
>> Wow -- I'm the administrivia whore today... sorry about that...
>>
>> Why don't we configure the list to have the reply-to be back to the
>> list? :-) I can't tell you the number of times I hit reply instead of
>> remembering to hit "Reply All", a button which I generally consider to
>> be the brainchild of Satan.
>>
>> -jag
>>
>> On Feb 24, 2006, at 7:59 PM, Graham Dumpleton wrote:
>>
>>> Please keep followups on mailing list. :-(
>>>
>>> On 25/02/2006, at 11:28 AM, Robert Thomas Davis wrote:
>>>
>>>> Graham
>>>>
>>>> ...finally got everything up and running with the new
>>>> version :)  Now I get a NameError exception on the
>>>> call to validate_user (which, at least, is a step in
>>>> the right direction)!!
>>>>
>>>> Do you have any suggestions as to what would be a
>>>> better way to structure this so I don't encounter that
>>>> issue?  Basically what I am trying to accomplish is
>>>> the following...
>>>>
>>>> There will be more defs in index.py (like the devices
>>>> def) whose contents I want to protect.  I want to
>>>> ensure that the user will have to enter their
>>>> user/passwd anytime attempts are made to access these
>>>> functions (unless the current session is still valid
>>>> of course).  After reading that article you references
>>>> it seems I would need to move the validate_user
>>>> function to an outside module and then import it
>>>> inside the def __auth__()??
>>>
>>> Personally I wouldn't use the mod_python.publisher authentication,
>>> but that is a topic for another time.
>>>
>>> If you must use the mod_python.publisher support for basic
>>> authentication,
>>> then use a wrapper class to do it. If you have Python 2.4, you could
>>> even
>>> use decorators for the purpose to make it a really clean solution.
>>>
>>> Basic code is:
>>>
>>>   from mod_python import apache
>>>
>>>   class Restricted:
>>>     def __init__(self,method,realm="Restricted Access"):
>>>       self.__call__ = method
>>>       self.__auth_realm__ = realm
>>>     def __auth__(self,req,user,password):
>>>       apache.log_error("__auth__")
>>>       return user == "mickey" and password == "mouse"
>>>
>>>   def index(req):
>>>     return "index"
>>>
>>>   def page1(req):
>>>     return "page1"
>>>
>>>   def page2(req):
>>>     return "page2"
>>>
>>>   page2 = Restricted(page2)
>>>
>>> The "Restricted" class acts as a wrapper around the published 
>>> function.
>>> The auth functions are actually in the wrapper class. Because the
>>> wrapper
>>> class is at global scope, you don't have the problem with nested
>>> functions
>>> that you are seeing.
>>>
>>> I don't have Python 2.4, so can't give you a solution which uses
>>> decorators,
>>> but I am sure that someone else on the mailing list who has and
>>> understands
>>> decorators could provide so code pretty quick. The ideas with
>>> decorators
>>> is you should be able to setup the code so all you need to do is
>>> something
>>> like:
>>>
>>>   def index(req):
>>>     return "index"
>>>
>>>   def page1(req):
>>>     return "page1"
>>>
>>>   @restricted
>>>   def page2(req):
>>>     return "page2"
>>>
>>> The decorator would do the magic of wrapping the function for you
>>> automatically.
>>> To me this would be a really clean solution, although possibly
>>> restricted to use
>>> of functions.
>>>
>>> Anyone want to step up and provide a decorator solution for this?
>>>
>>>> Also, do any RPMs exist for these more recent versions
>>>> of mod_python OR is there a documented procedure for
>>>> building a mod_python RPM from the recent releases?
>>>
>>> I imagine someone will put together an RPM for 3.2.7/3.2.8
>>> at some stage. This is usually done by someone attached to
>>> the maintainers of the Linux distribution and not the mod_python
>>> folks though.
>>>
>>> Graham
>>>
>>>> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>>>>
>>>>> Robert Thomas Davis wrote ..
>>>>>> Graham
>>>>>>
>>>>>> Sorry...your replies were be sent to the "bulk"
>>>>>> folder...glad I checked it before just deleting
>>>>> all!
>>>>>>
>>>>>> I am using mod_python 3.1.3 with apache 2.0.53 on
>>>>>> Fedora Core 3.
>>>>>
>>>>> Any chance you can upgrade to mod_python 3.2.7? I
>>>>> really can't find
>>>>> any problem with the basic structure of what you are
>>>>> doing, but there
>>>>> have been fixes to publisher in 3.2.7 that may mean
>>>>> I am not seeing
>>>>> the problem.
>>>>>
>>>>>> The url I use to access the "devices" page (the
>>>>> one I
>>>>>> would like to protect) is
>>>>> http://localhost/devices.
>>>>>>
>>>>>> I do agree about having the info on the mailing
>>>>> list
>>>>>> so others could learn from it; maybe we can post
>>>>> the
>>>>>> results.
>>>>>
>>>>> The ongoing discussion is also useful, as the actual
>>>>> debugging process
>>>>> itself can be just as useful as the final result.
>>>>> Thus, use reply-all.
>>>>>
>>>>> Graham
>>>>>
>>>>>> Thanks,
>>>>>>
>>>>>> --- Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>>>>>>
>>>>>>> BTW, I can't seem to find that you have ever
>>>>> said
>>>>>>> exactly which version
>>>>>>> of mod_python you are using. Are you using the
>>>>>>> latest version?
>>>>>>>
>>>>>>> Graham
>>>>>>>
>>>>>>> Graham Dumpleton wrote ..
>>>>>>>> Still generally prefer it to be on the mailing
>>>>>>> list as other people can
>>>>>>>> learn from it and it is in the mailing list
>>>>>>> archive as well, so people
>>>>>>>> down the track may find it as well and it may
>>>>>>> solve a problem for
>>>>>>>> them also.
>>>>>>>>
>>>>>>>> One more question. What URLs are you using to
>>>>>>> access the resources
>>>>>>>> so I can relate that properly to the Apache
>>>>>>> configuration and the
>>>>>>>> published functions in the file?
>>>>>>>>
>>>>>>>> Graham
>>>>>>>>
>>>>>>>> Robert Thomas Davis wrote ..
>>>>>>>>> Hell graham
>>>>>>>>>
>>>>>>>>> I really appreciate your help with
>>>>> this...and
>>>>>>> since
>>>>>>>>> you have been the only one responding I
>>>>> thought
>>>>>>> I
>>>>>>>>> might as well just mail you the files in
>>>>>>> question
>>>>>>>>> (index.py and httpd.conf, attached as a
>>>>> .tgz)
>>>>>>>>>
>>>>>>>>> The file index.py would normally live in the
>>>>>>>>> directory:
>>>>>>>>> /usr/local/lap/http/
>>>>>>>>>
>>>>>>>>> Based on your last reply I am wondering if
>>>>> it is
>>>>>>> my
>>>>>>>>> httpd.conf file that is setup incorrectly (i
>>>>> do
>>>>>>> not
>>>>>>>>> get the 500 error at all).  When the
>>>>> enclosed
>>>>>>> code
>>>>>>>>> gets executed it appears as though it skips
>>>>>>> right over
>>>>>>>>> the nested __auth__ fuction.  However, if
>>>>> that
>>>>>>>>> function is moved to the module scope
>>>>> (index.py)
>>>>>>> it
>>>>>>>>> always gets called and subsequently calls
>>>>> the
>>>>>>>>> validate_users function.
>>>>>>>>>
>>>>>>>>> Again...your help is much appreciated.
>>>>>>>>>
>>>>>>>>> Rob
>>>>>>>>
>>>>> _______________________________________________
>>>>>>>> Mod_python mailing list
>>>>>>>> Mod_python@modpython.org
>>>>>>>>
>>>>>>>
>>>>>>
>>>>>
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>>>
>>>>>
>>>
>>> _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>

From trepca at gmail.com  Sat Feb 25 21:09:32 2006
From: trepca at gmail.com (Sebastjan Trepca)
Date: Sat Feb 25 21:09:37 2006
Subject: [mod_python] Sessions
In-Reply-To: <43FF0A57.2000601@jgassociates.ca>
References: <ffa39deb0602240433j726373caxee85bc29045531bb@mail.gmail.com>
	<43FF0A57.2000601@jgassociates.ca>
Message-ID: <cd329af80602251809g37dca69fu1c53912dee44522f@mail.gmail.com>

FYI, you always have to save the session, even if you are only reading
it, because if you'll not the last accessed property of the session
will not change causing a timeout on active user.

I only call save() when session is more then timeout/2 old(not while
i'm editing of course). How do you guys handle this?

Sebastjan

On 2/24/06, Jim Gallacher <jpg@jgassociates.ca> wrote:
> marinus van aswegen wrote:
> > Hi I have a question re. session handling.
> >
> > Do you need to inform the request handler each time to connect to it which
> > session is calling in?
>
> Your question is a little unclear, but if it means what I think it means
> then the answer is "no". :)
>
> Sessions make use of a cookie. The setting and reading of that cookie is
> handled transparently for you by the session code, so it's pretty simple.
>
> All the magic happens when you create your session instance. If a
> session cookie is found in the request, the corresponding session data
> will be read from the persistent store. If a session cookie is not found
> in the request, a new session id, which will be used as the cookie
> value, will be generated.
>
> from mod_python import apache, Session
> def handler(req):
>      req.content_type = 'text/plain'
>      sess = Session.Session(req)
>      if sess.is_new():
>          req.write("It's a new session!")
>          # initialize your session data
>          sess['stuff'] = "hello world"
>      else:
>          req.write("The session exists\n")
>
>      req.write(sess['stuff'])
>
>      # don't forget to save your session data
>      sess.save()
>      return apache.OK
>
> Jim
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From pfunix at gmail.com  Sun Feb 26 08:34:52 2006
From: pfunix at gmail.com (edgar mortiz)
Date: Sun Feb 26 08:34:59 2006
Subject: [mod_python] apache core dumped after mod_python 2.7.11 installation
Message-ID: <e02ea4ef0602260534k52d09b45u168949ca3c276ca3@mail.gmail.com>

i've installed mod_python 2.7.11 on my openbsd machine running python
2.4.2(w/c i build from source)

everything build just fine

 ./configure --with-apxs=/usr/sbin/apxs
loading cache ./config.cache
checking for gcc... (cached) gcc
checking whether the C compiler (gcc  ) works... yes
checking whether the C compiler (gcc  ) is a cross-compiler... no
checking whether we are using GNU C... (cached) yes
checking whether gcc accepts -g... (cached) yes
checking for ranlib... (cached) ranlib
checking for ar... (cached) ar
checking for a BSD compatible install... (cached) /usr/bin/install -c
checking whether make sets ${MAKE}... (cached) yes
checking for main in -lm... (cached) yes
checking for working const... (cached) yes
checking your blood pressure... a bit high, but we can proceed
checking whether apxs is available
checking for --with-apxs... /usr/sbin/apxs executable, good
checking for Apache libexec directory... /usr/lib/apache/modules
checking for Apache include directory... -I/usr/lib/apache/include
checking for --with-apache... no
configure: warning: **** No apache sources specified, static compilation
will not be available.
configure: warning: **** You can use --with-apache to specify where your
Apache sources are.
checking for --with-python... no
checking for python... (cached) /usr/local/bin/python
checking Python version... 2.4
checking whether Python is compiled with thread support... no threads, good
checking Python install prefix... /usr/local
checking what libraries Python was linked with...
/usr/local/lib/python2.4/config/libpython2.4.a   -lpthread  -lutil
-lm
checking linker flags used to link Python...
checking where Python include files are... -I/usr/local/include/python2.4
checking for mkdep... (cached) /usr/bin/mkdep
creating ./config.status
creating Makefile
creating src/Makefile
creating src/libpython.module
creating Doc/Makefile
analyzing dependencies

*** make dso

make dso
gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
-I/usr/local/include/python2.4  -c mod_python.c
gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
-I/usr/local/include/python2.4  -c _apachemodule.c
gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
-I/usr/local/include/python2.4  -c requestobject.c
gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
-I/usr/local/include/python2.4  -c tableobject.c
gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
-I/usr/local/include/python2.4  -c util.c
gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
-I/usr/local/include/python2.4  -c serverobject.c
gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
-I/usr/local/include/python2.4  -c connobject.c

Compiling for DSO. For static, do "make static"

/usr/sbin/apxs -I/home/pfunix/mod_python-2.7.11/src/include
-I/usr/lib/apache/include -I/usr/local/include/python2.4 -c mod_python.o
_apachemodule.o  requestobject.o  tableobject.o  util.o  serverobject.o
connobject.o -lm  /usr/local/lib/python2.4/config/libpython2.4.a
-lpthread  -lutil   -lm
gcc -shared -fPIC -DSHARED_MODULE -o mod_python.so mod_python.o
_apachemodule.o requestobject.o tableobject.o util.o serverobject.o
connobject.o -lm /usr/local/lib/python2.4/config/libpython2.4.a -lpthread
-lutil -lm

Now su and make install
  (or, if you only want to perform a partial install,
   you can use make install_dso and make install_py_lib)

** make install
# make install

Performing DSO installation.

/usr/bin/install -c src/mod_python.so /usr/lib/apache/modules
/usr/bin/install -c -d /usr/local/lib/python2.4/site-packages/mod_python
python /usr/local/lib/python2.4/compileall.py
/usr/local/lib/python2.4/site-packages/mod_python
Listing /usr/local/lib/python2.4/site-packages/mod_python ...
Compiling /usr/local/lib/python2.4/site-packages/mod_python/__init__.py ...
Compiling /usr/local/lib/python2.4/site-packages/mod_python/apache.py ...
Compiling /usr/local/lib/python2.4/site-packages/mod_python/cgihandler.py
...
Compiling /usr/local/lib/python2.4/site-packages/mod_python/httpdapi.py ...
Compiling /usr/local/lib/python2.4/site-packages/mod_python/publisher.py ...
Compiling /usr/local/lib/python2.4/site-packages/mod_python/util.py ...
Compiling /usr/local/lib/python2.4/site-packages/mod_python/zhandler.py ...

Now don't forget to edit your main config and add
    LoadModule python_module /usr/lib/apache/modules/mod_python.so
and if your configuration uses ClearModuleList, then also
    AddModule mod_python.c



but when I put the

LoadModule python_module /usr/lib/apache/modules/mod_python.so on httpd.conf

and restart apache i get a

# apachectl restart
/usr/sbin/apachectl restart: httpd not running, trying to start
/usr/sbin/apachectl restart: httpd started

but there's no httpd on process, nor can i view apache

i did a

# apachectl configtest
Syntax OK
Segmentation fault (core dumped)

and this is where i ended up .. any help would be greatly appreciated.

I'm running OpenBSD 3.9BETA

Apache/1.3.29 (prebuild in obsd)
mod_python 2.7.11 (source)
Python 2.4.2 (source)




thanks,
ed
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060226/683fd573/attachment.html
From jrraines at comcast.net  Sun Feb 26 14:59:53 2006
From: jrraines at comcast.net (John Raines)
Date: Sun Feb 26 15:00:06 2006
Subject: [mod_python] troubles with installing
Message-ID: <93056906-B4A1-4EB8-8F0C-4DD4841C0A9C@comcast.net>

It had been a year since I'd installed mod_python and I seem to be  
having a huge problem getting the new version to work here on my Mac  
running  10.4.5.

I set out to upgrade to httpd-2.0.55 and 3.2.7 (now 3.2.8) a couple  
of weeks ago!

Apache seems to serve a plain HTML page OK. But when I move to call  
mod_python I get an error and that is reflected in the log below. If  
I start python outside of Apache and import mod_python.psp it finds  
psp but can't find _apache.

Here's what Apache's startup log says; if I were just a little  
smarter I'd probably know just what to do:

[Sun Feb 26 09:03:50 2006] [notice] mod_python: Creating 8 session  
mutexes based on 150 max processes and 0 max threads.
[Sun Feb 26 09:03:50 2006] [notice] Apache configured -- resuming  
normal operations
[Sun Feb 26 09:04:38 2006] [error] make_obcallback: could not import  
mod_python.apache.\n
Could not find platform independent libraries <prefix>
Could not find platform dependent libraries <exec_prefix>
Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Feb 26 09:04:38 2006] [error] python_handler: no interpreter  
callback found.
[Sun Feb 26 09:04:38 2006] [error] [client 127.0.0.1] python_handler:  
Can't get/create interpreter., referer: http://127.0.0.1/
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache

Do I need to use terminal to set $PYTHONHOME to /usr/bin/python2.3 or  
is this something I'd do in httpd.conf?
I tried doing it in terminal without any luck.

Here is the sequence of commands I used for installing :
sudo apachectl stop

cd ~/Desktop/httpd-2.0.55
./configure --enable-so --with-mpm=prefork
make
sudo make install

cd ~/Desktop/mod_python-3.2.8
./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/ 
usr/bin/python2.3
make
sudo make install

sudo cp ~/Desktop/httpd.conf /usr/local/apache2/conf

sudo cp /usr/local/apache2/bin/apachectl /usr/sbin

sudo apachectl start

As you'd expect from the results running python outside apache, the  
site-packages directory deep in the Framework directory has the  
mod_python package and the modules directory in apache2 has the .so  
file. At one time (when running Panther), I did have multiple pythons  
installed on the hard drive where I've been trying to debug this  
procedure. I trashed them and installed Tiger early on in my efforts.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060226/a415a871/attachment.html
From grahamd at dscpl.com.au  Sun Feb 26 16:36:35 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 26 16:36:38 2006
Subject: [mod_python] troubles with installing
Message-ID: <1140989795.23957@dscpl.user.openhosting.com>

See comments below.

John Raines wrote ..
> It had been a year since I'd installed mod_python and I seem to be  
> having a huge problem getting the new version to work here on my Mac  
> running  10.4.5.
> 
> I set out to upgrade to httpd-2.0.55 and 3.2.7 (now 3.2.8) a couple  
> of weeks ago!
> 
> Apache seems to serve a plain HTML page OK. But when I move to call  
> mod_python I get an error and that is reflected in the log below. If  
> I start python outside of Apache and import mod_python.psp it finds  
> psp but can't find _apache.
> 
> Here's what Apache's startup log says; if I were just a little  
> smarter I'd probably know just what to do:
> 
> [Sun Feb 26 09:03:50 2006] [notice] mod_python: Creating 8 session  
> mutexes based on 150 max processes and 0 max threads.
> [Sun Feb 26 09:03:50 2006] [notice] Apache configured -- resuming  
> normal operations
> [Sun Feb 26 09:04:38 2006] [error] make_obcallback: could not import  
> mod_python.apache.\n
> Could not find platform independent libraries <prefix>
> Could not find platform dependent libraries <exec_prefix>
> Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]
> 'import site' failed; use -v for traceback
> 'import site' failed; use -v for traceback
> ImportError: No module named mod_python.apache
> [Sun Feb 26 09:04:38 2006] [error] python_handler: no interpreter  
> callback found.
> [Sun Feb 26 09:04:38 2006] [error] [client 127.0.0.1] python_handler: 
> Can't get/create interpreter., referer: http://127.0.0.1/
> 'import site' failed; use -v for traceback
> ImportError: No module named mod_python.apache
> 
> Do I need to use terminal to set $PYTHONHOME to /usr/bin/python2.3 or 
> is this something I'd do in httpd.conf?
> I tried doing it in terminal without any luck.
> 
> Here is the sequence of commands I used for installing :
> sudo apachectl stop
> 
> cd ~/Desktop/httpd-2.0.55
> ./configure --enable-so --with-mpm=prefork

You should be able to say just:

  ./configure

The "prefork" MPM is the default on Mac OS X. Also no specific need to enable
shared objects for builtin modules.

> make
> sudo make install
>
> cd ~/Desktop/mod_python-3.2.8
> ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/ 
> usr/bin/python2.3

Don't specify path to Python binary, let it find it itself, unless you have
more than one Python installation. If you do have more than one Python
installation, either make sure that /usr/bin is first in your PATH, or if
you still must specify the Python binary location, don't include the "2.3"
designation as suspect that that is what is stuffing it up. Ie.,

  /configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/usr/bin/python

> make
> sudo make install
> 
> sudo cp ~/Desktop/httpd.conf /usr/local/apache2/conf
> 
> sudo cp /usr/local/apache2/bin/apachectl /usr/sbin
> 
> sudo apachectl start
> 
> As you'd expect from the results running python outside apache, the  
> site-packages directory deep in the Framework directory has the  
> mod_python package and the modules directory in apache2 has the .so  
> file. At one time (when running Panther), I did have multiple pythons 
> installed on the hard drive where I've been trying to debug this  
> procedure. I trashed them and installed Tiger early on in my efforts.
From grahamd at dscpl.com.au  Sun Feb 26 16:47:53 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 26 16:47:56 2006
Subject: [mod_python] apache core dumped after mod_python 2.7.11
	installation
Message-ID: <1140990473.30744@dscpl.user.openhosting.com>

Core dumps on startup which might be attributable to mod_python
generally occur either because of shared library version mismatches
between different Apache modules, or where there are multiple
versions of Python on a system and mod_python is finding the wrong
one when Apache is started.

Unfortunately, the error logging output in the old version of mod_python
you are using, doesn't really help to sort out the latter, where as latest
version of mod_python might. Unless you move to Apache 2.0, the
newer version can't be used though.

As to shared library mismatch, if you are also loading PHP module,
disable the PHP module and see if it makes a difference.

Graham

edgar mortiz wrote ..
> i've installed mod_python 2.7.11 on my openbsd machine running python
> 2.4.2(w/c i build from source)
> 
> everything build just fine
> 
>  ./configure --with-apxs=/usr/sbin/apxs
> loading cache ./config.cache
> checking for gcc... (cached) gcc
> checking whether the C compiler (gcc  ) works... yes
> checking whether the C compiler (gcc  ) is a cross-compiler... no
> checking whether we are using GNU C... (cached) yes
> checking whether gcc accepts -g... (cached) yes
> checking for ranlib... (cached) ranlib
> checking for ar... (cached) ar
> checking for a BSD compatible install... (cached) /usr/bin/install -c
> checking whether make sets ${MAKE}... (cached) yes
> checking for main in -lm... (cached) yes
> checking for working const... (cached) yes
> checking your blood pressure... a bit high, but we can proceed
> checking whether apxs is available
> checking for --with-apxs... /usr/sbin/apxs executable, good
> checking for Apache libexec directory... /usr/lib/apache/modules
> checking for Apache include directory... -I/usr/lib/apache/include
> checking for --with-apache... no
> configure: warning: **** No apache sources specified, static compilation
> will not be available.
> configure: warning: **** You can use --with-apache to specify where your
> Apache sources are.
> checking for --with-python... no
> checking for python... (cached) /usr/local/bin/python
> checking Python version... 2.4
> checking whether Python is compiled with thread support... no threads,
> good
> checking Python install prefix... /usr/local
> checking what libraries Python was linked with...
> /usr/local/lib/python2.4/config/libpython2.4.a   -lpthread  -lutil
> -lm
> checking linker flags used to link Python...
> checking where Python include files are... -I/usr/local/include/python2.4
> checking for mkdep... (cached) /usr/bin/mkdep
> creating ./config.status
> creating Makefile
> creating src/Makefile
> creating src/libpython.module
> creating Doc/Makefile
> analyzing dependencies
> 
> *** make dso
> 
> make dso
> gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
> -I/usr/local/include/python2.4  -c mod_python.c
> gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
> -I/usr/local/include/python2.4  -c _apachemodule.c
> gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
> -I/usr/local/include/python2.4  -c requestobject.c
> gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
> -I/usr/local/include/python2.4  -c tableobject.c
> gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
> -I/usr/local/include/python2.4  -c util.c
> gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
> -I/usr/local/include/python2.4  -c serverobject.c
> gcc  -I/home/pfunix/mod_python-2.7.11/src/include -I/usr/lib/apache/include
> -I/usr/local/include/python2.4  -c connobject.c
> 
> Compiling for DSO. For static, do "make static"
> 
> /usr/sbin/apxs -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include -I/usr/local/include/python2.4 -c mod_python.o
> _apachemodule.o  requestobject.o  tableobject.o  util.o  serverobject.o
> connobject.o -lm  /usr/local/lib/python2.4/config/libpython2.4.a
> -lpthread  -lutil   -lm
> gcc -shared -fPIC -DSHARED_MODULE -o mod_python.so mod_python.o
> _apachemodule.o requestobject.o tableobject.o util.o serverobject.o
> connobject.o -lm /usr/local/lib/python2.4/config/libpython2.4.a -lpthread
> -lutil -lm
> 
> Now su and make install
>   (or, if you only want to perform a partial install,
>    you can use make install_dso and make install_py_lib)
> 
> ** make install
> # make install
> 
> Performing DSO installation.
> 
> /usr/bin/install -c src/mod_python.so /usr/lib/apache/modules
> /usr/bin/install -c -d /usr/local/lib/python2.4/site-packages/mod_python
> python /usr/local/lib/python2.4/compileall.py
> /usr/local/lib/python2.4/site-packages/mod_python
> Listing /usr/local/lib/python2.4/site-packages/mod_python ...
> Compiling /usr/local/lib/python2.4/site-packages/mod_python/__init__.py
> ...
> Compiling /usr/local/lib/python2.4/site-packages/mod_python/apache.py ...
> Compiling /usr/local/lib/python2.4/site-packages/mod_python/cgihandler.py
> ...
> Compiling /usr/local/lib/python2.4/site-packages/mod_python/httpdapi.py
> ...
> Compiling /usr/local/lib/python2.4/site-packages/mod_python/publisher.py
> ...
> Compiling /usr/local/lib/python2.4/site-packages/mod_python/util.py ...
> Compiling /usr/local/lib/python2.4/site-packages/mod_python/zhandler.py
> ...
> 
> Now don't forget to edit your main config and add
>     LoadModule python_module /usr/lib/apache/modules/mod_python.so
> and if your configuration uses ClearModuleList, then also
>     AddModule mod_python.c
> 
> 
> 
> but when I put the
> 
> LoadModule python_module /usr/lib/apache/modules/mod_python.so on httpd.conf
> 
> and restart apache i get a
> 
> # apachectl restart
> /usr/sbin/apachectl restart: httpd not running, trying to start
> /usr/sbin/apachectl restart: httpd started
> 
> but there's no httpd on process, nor can i view apache
> 
> i did a
> 
> # apachectl configtest
> Syntax OK
> Segmentation fault (core dumped)
> 
> and this is where i ended up .. any help would be greatly appreciated.
> 
> I'm running OpenBSD 3.9BETA
> 
> Apache/1.3.29 (prebuild in obsd)
> mod_python 2.7.11 (source)
> Python 2.4.2 (source)
> 
> 
> 
> 
> thanks,
> ed
From pfunix at gmail.com  Sun Feb 26 18:48:07 2006
From: pfunix at gmail.com (edgar mortiz)
Date: Sun Feb 26 18:48:14 2006
Subject: [mod_python] apache core dumped after mod_python 2.7.11
	installation
In-Reply-To: <1140990473.30744@dscpl.user.openhosting.com>
References: <1140990473.30744@dscpl.user.openhosting.com>
Message-ID: <e02ea4ef0602261548x764d95afu515b8ee6dd52ff87@mail.gmail.com>

i don't have php installed just a the pre-built OpenBSD's version of apache
and the mod_python that im trying to run it on ... I'll try to build my own
apache and build mod_python against it and see what i could find.

it might be due to the major bump-changes that obsd did on apache that might
be causing the issue.

someone on another list was telling me that i should move to lightTPD and
FastCGI so that i could run python on it .. but i'll stick to mod_python and
apache if other people can make it run ... i think i can too..


thanks for the reply

ed

On 2/26/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
> Core dumps on startup which might be attributable to mod_python
> generally occur either because of shared library version mismatches
> between different Apache modules, or where there are multiple
> versions of Python on a system and mod_python is finding the wrong
> one when Apache is started.
>
> Unfortunately, the error logging output in the old version of mod_python
> you are using, doesn't really help to sort out the latter, where as latest
> version of mod_python might. Unless you move to Apache 2.0, the
> newer version can't be used though.
>
> As to shared library mismatch, if you are also loading PHP module,
> disable the PHP module and see if it makes a difference.
>
> Graham
>
> edgar mortiz wrote ..
> > i've installed mod_python 2.7.11 on my openbsd machine running python
> > 2.4.2(w/c i build from source)
> >
> > everything build just fine
> >
> >  ./configure --with-apxs=/usr/sbin/apxs
> > loading cache ./config.cache
> > checking for gcc... (cached) gcc
> > checking whether the C compiler (gcc  ) works... yes
> > checking whether the C compiler (gcc  ) is a cross-compiler... no
> > checking whether we are using GNU C... (cached) yes
> > checking whether gcc accepts -g... (cached) yes
> > checking for ranlib... (cached) ranlib
> > checking for ar... (cached) ar
> > checking for a BSD compatible install... (cached) /usr/bin/install -c
> > checking whether make sets ${MAKE}... (cached) yes
> > checking for main in -lm... (cached) yes
> > checking for working const... (cached) yes
> > checking your blood pressure... a bit high, but we can proceed
> > checking whether apxs is available
> > checking for --with-apxs... /usr/sbin/apxs executable, good
> > checking for Apache libexec directory... /usr/lib/apache/modules
> > checking for Apache include directory... -I/usr/lib/apache/include
> > checking for --with-apache... no
> > configure: warning: **** No apache sources specified, static compilation
> > will not be available.
> > configure: warning: **** You can use --with-apache to specify where your
> > Apache sources are.
> > checking for --with-python... no
> > checking for python... (cached) /usr/local/bin/python
> > checking Python version... 2.4
> > checking whether Python is compiled with thread support... no threads,
> > good
> > checking Python install prefix... /usr/local
> > checking what libraries Python was linked with...
> > /usr/local/lib/python2.4/config/libpython2.4.a   -lpthread  -lutil
> > -lm
> > checking linker flags used to link Python...
> > checking where Python include files are...
> -I/usr/local/include/python2.4
> > checking for mkdep... (cached) /usr/bin/mkdep
> > creating ./config.status
> > creating Makefile
> > creating src/Makefile
> > creating src/libpython.module
> > creating Doc/Makefile
> > analyzing dependencies
> >
> > *** make dso
> >
> > make dso
> > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include
> > -I/usr/local/include/python2.4  -c mod_python.c
> > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include
> > -I/usr/local/include/python2.4  -c _apachemodule.c
> > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include
> > -I/usr/local/include/python2.4  -c requestobject.c
> > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include
> > -I/usr/local/include/python2.4  -c tableobject.c
> > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include
> > -I/usr/local/include/python2.4  -c util.c
> > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include
> > -I/usr/local/include/python2.4  -c serverobject.c
> > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> -I/usr/lib/apache/include
> > -I/usr/local/include/python2.4  -c connobject.c
> >
> > Compiling for DSO. For static, do "make static"
> >
> > /usr/sbin/apxs -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include -I/usr/local/include/python2.4 -c mod_python.o
> > _apachemodule.o  requestobject.o  tableobject.o  util.o  serverobject.o
> > connobject.o -lm  /usr/local/lib/python2.4/config/libpython2.4.a
> > -lpthread  -lutil   -lm
> > gcc -shared -fPIC -DSHARED_MODULE -o mod_python.so mod_python.o
> > _apachemodule.o requestobject.o tableobject.o util.o serverobject.o
> > connobject.o -lm /usr/local/lib/python2.4/config/libpython2.4.a
> -lpthread
> > -lutil -lm
> >
> > Now su and make install
> >   (or, if you only want to perform a partial install,
> >    you can use make install_dso and make install_py_lib)
> >
> > ** make install
> > # make install
> >
> > Performing DSO installation.
> >
> > /usr/bin/install -c src/mod_python.so /usr/lib/apache/modules
> > /usr/bin/install -c -d /usr/local/lib/python2.4/site-packages/mod_python
> > python /usr/local/lib/python2.4/compileall.py
> > /usr/local/lib/python2.4/site-packages/mod_python
> > Listing /usr/local/lib/python2.4/site-packages/mod_python ...
> > Compiling /usr/local/lib/python2.4/site-packages/mod_python/__init__.py
> > ...
> > Compiling /usr/local/lib/python2.4/site-packages/mod_python/apache.py
> ...
> > Compiling
> /usr/local/lib/python2.4/site-packages/mod_python/cgihandler.py
> > ...
> > Compiling /usr/local/lib/python2.4/site-packages/mod_python/httpdapi.py
> > ...
> > Compiling /usr/local/lib/python2.4/site-packages/mod_python/publisher.py
> > ...
> > Compiling /usr/local/lib/python2.4/site-packages/mod_python/util.py ...
> > Compiling /usr/local/lib/python2.4/site-packages/mod_python/zhandler.py
> > ...
> >
> > Now don't forget to edit your main config and add
> >     LoadModule python_module /usr/lib/apache/modules/mod_python.so
> > and if your configuration uses ClearModuleList, then also
> >     AddModule mod_python.c
> >
> >
> >
> > but when I put the
> >
> > LoadModule python_module /usr/lib/apache/modules/mod_python.so on
> httpd.conf
> >
> > and restart apache i get a
> >
> > # apachectl restart
> > /usr/sbin/apachectl restart: httpd not running, trying to start
> > /usr/sbin/apachectl restart: httpd started
> >
> > but there's no httpd on process, nor can i view apache
> >
> > i did a
> >
> > # apachectl configtest
> > Syntax OK
> > Segmentation fault (core dumped)
> >
> > and this is where i ended up .. any help would be greatly appreciated.
> >
> > I'm running OpenBSD 3.9BETA
> >
> > Apache/1.3.29 (prebuild in obsd)
> > mod_python 2.7.11 (source)
> > Python 2.4.2 (source)
> >
> >
> >
> >
> > thanks,
> > ed
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060226/f1a994e6/attachment-0001.html
From grahamd at dscpl.com.au  Sun Feb 26 19:11:19 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Feb 26 19:11:22 2006
Subject: [mod_python] apache core dumped after mod_python
	2.7.11installation
Message-ID: <1140999079.23735@dscpl.user.openhosting.com>

If you are going to rebuild Apache I would highly recommend you
move up to Apache 2.0 and use mod_python 3.2.8.

edgar mortiz wrote ..
> i don't have php installed just a the pre-built OpenBSD's version of apache
> and the mod_python that im trying to run it on ... I'll try to build my
> own
> apache and build mod_python against it and see what i could find.
> 
> it might be due to the major bump-changes that obsd did on apache that
> might
> be causing the issue.
> 
> someone on another list was telling me that i should move to lightTPD and
> FastCGI so that i could run python on it .. but i'll stick to mod_python
> and
> apache if other people can make it run ... i think i can too..
> 
> 
> thanks for the reply
> 
> ed
> 
> On 2/26/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> >
> > Core dumps on startup which might be attributable to mod_python
> > generally occur either because of shared library version mismatches
> > between different Apache modules, or where there are multiple
> > versions of Python on a system and mod_python is finding the wrong
> > one when Apache is started.
> >
> > Unfortunately, the error logging output in the old version of mod_python
> > you are using, doesn't really help to sort out the latter, where as latest
> > version of mod_python might. Unless you move to Apache 2.0, the
> > newer version can't be used though.
> >
> > As to shared library mismatch, if you are also loading PHP module,
> > disable the PHP module and see if it makes a difference.
> >
> > Graham
> >
> > edgar mortiz wrote ..
> > > i've installed mod_python 2.7.11 on my openbsd machine running python
> > > 2.4.2(w/c i build from source)
> > >
> > > everything build just fine
> > >
> > >  ./configure --with-apxs=/usr/sbin/apxs
> > > loading cache ./config.cache
> > > checking for gcc... (cached) gcc
> > > checking whether the C compiler (gcc  ) works... yes
> > > checking whether the C compiler (gcc  ) is a cross-compiler... no
> > > checking whether we are using GNU C... (cached) yes
> > > checking whether gcc accepts -g... (cached) yes
> > > checking for ranlib... (cached) ranlib
> > > checking for ar... (cached) ar
> > > checking for a BSD compatible install... (cached) /usr/bin/install
> -c
> > > checking whether make sets ${MAKE}... (cached) yes
> > > checking for main in -lm... (cached) yes
> > > checking for working const... (cached) yes
> > > checking your blood pressure... a bit high, but we can proceed
> > > checking whether apxs is available
> > > checking for --with-apxs... /usr/sbin/apxs executable, good
> > > checking for Apache libexec directory... /usr/lib/apache/modules
> > > checking for Apache include directory... -I/usr/lib/apache/include
> > > checking for --with-apache... no
> > > configure: warning: **** No apache sources specified, static compilation
> > > will not be available.
> > > configure: warning: **** You can use --with-apache to specify where
> your
> > > Apache sources are.
> > > checking for --with-python... no
> > > checking for python... (cached) /usr/local/bin/python
> > > checking Python version... 2.4
> > > checking whether Python is compiled with thread support... no threads,
> > > good
> > > checking Python install prefix... /usr/local
> > > checking what libraries Python was linked with...
> > > /usr/local/lib/python2.4/config/libpython2.4.a   -lpthread  -lutil
> > > -lm
> > > checking linker flags used to link Python...
> > > checking where Python include files are...
> > -I/usr/local/include/python2.4
> > > checking for mkdep... (cached) /usr/bin/mkdep
> > > creating ./config.status
> > > creating Makefile
> > > creating src/Makefile
> > > creating src/libpython.module
> > > creating Doc/Makefile
> > > analyzing dependencies
> > >
> > > *** make dso
> > >
> > > make dso
> > > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include
> > > -I/usr/local/include/python2.4  -c mod_python.c
> > > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include
> > > -I/usr/local/include/python2.4  -c _apachemodule.c
> > > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include
> > > -I/usr/local/include/python2.4  -c requestobject.c
> > > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include
> > > -I/usr/local/include/python2.4  -c tableobject.c
> > > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include
> > > -I/usr/local/include/python2.4  -c util.c
> > > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include
> > > -I/usr/local/include/python2.4  -c serverobject.c
> > > gcc  -I/home/pfunix/mod_python-2.7.11/src/include
> > -I/usr/lib/apache/include
> > > -I/usr/local/include/python2.4  -c connobject.c
> > >
> > > Compiling for DSO. For static, do "make static"
> > >
> > > /usr/sbin/apxs -I/home/pfunix/mod_python-2.7.11/src/include
> > > -I/usr/lib/apache/include -I/usr/local/include/python2.4 -c mod_python.o
> > > _apachemodule.o  requestobject.o  tableobject.o  util.o  serverobject.o
> > > connobject.o -lm  /usr/local/lib/python2.4/config/libpython2.4.a
> > > -lpthread  -lutil   -lm
> > > gcc -shared -fPIC -DSHARED_MODULE -o mod_python.so mod_python.o
> > > _apachemodule.o requestobject.o tableobject.o util.o serverobject.o
> > > connobject.o -lm /usr/local/lib/python2.4/config/libpython2.4.a
> > -lpthread
> > > -lutil -lm
> > >
> > > Now su and make install
> > >   (or, if you only want to perform a partial install,
> > >    you can use make install_dso and make install_py_lib)
> > >
> > > ** make install
> > > # make install
> > >
> > > Performing DSO installation.
> > >
> > > /usr/bin/install -c src/mod_python.so /usr/lib/apache/modules
> > > /usr/bin/install -c -d /usr/local/lib/python2.4/site-packages/mod_python
> > > python /usr/local/lib/python2.4/compileall.py
> > > /usr/local/lib/python2.4/site-packages/mod_python
> > > Listing /usr/local/lib/python2.4/site-packages/mod_python ...
> > > Compiling /usr/local/lib/python2.4/site-packages/mod_python/__init__.py
> > > ...
> > > Compiling /usr/local/lib/python2.4/site-packages/mod_python/apache.py
> > ...
> > > Compiling
> > /usr/local/lib/python2.4/site-packages/mod_python/cgihandler.py
> > > ...
> > > Compiling /usr/local/lib/python2.4/site-packages/mod_python/httpdapi.py
> > > ...
> > > Compiling /usr/local/lib/python2.4/site-packages/mod_python/publisher.py
> > > ...
> > > Compiling /usr/local/lib/python2.4/site-packages/mod_python/util.py
> ...
> > > Compiling /usr/local/lib/python2.4/site-packages/mod_python/zhandler.py
> > > ...
> > >
> > > Now don't forget to edit your main config and add
> > >     LoadModule python_module /usr/lib/apache/modules/mod_python.so
> > > and if your configuration uses ClearModuleList, then also
> > >     AddModule mod_python.c
> > >
> > >
> > >
> > > but when I put the
> > >
> > > LoadModule python_module /usr/lib/apache/modules/mod_python.so on
> > httpd.conf
> > >
> > > and restart apache i get a
> > >
> > > # apachectl restart
> > > /usr/sbin/apachectl restart: httpd not running, trying to start
> > > /usr/sbin/apachectl restart: httpd started
> > >
> > > but there's no httpd on process, nor can i view apache
> > >
> > > i did a
> > >
> > > # apachectl configtest
> > > Syntax OK
> > > Segmentation fault (core dumped)
> > >
> > > and this is where i ended up .. any help would be greatly appreciated.
> > >
> > > I'm running OpenBSD 3.9BETA
> > >
> > > Apache/1.3.29 (prebuild in obsd)
> > > mod_python 2.7.11 (source)
> > > Python 2.4.2 (source)
> > >
> > >
> > >
> > >
> > > thanks,
> > > ed
> >
From scott_list at mischko.com  Mon Feb 27 03:24:05 2006
From: scott_list at mischko.com (Scott Chapman)
Date: Mon Feb 27 02:24:17 2006
Subject: [mod_python] How to make a handler for static files?
Message-ID: <4402B725.1050501@mischko.com>

Hi all!

I want to make a funky hander for static files.  It should return the requested 
static file if it's in the directory requested.  If it's not there, it should 
move up a directory and try there.

I'm not sure how to make a static file handler that simply returns the file. 
Does the handler have to set a Content Type that is specific to each type of 
file or will the browser figure things out without this?  I'm interested only in 
css, images, and javascript files in this context currently but I may need to 
expand it later.  Is there any sample of a straight forward static file handler 
around?

Why am I trying to do this weird thing?  I am experimenting with setting up a 
web server with no virtual servers (only a default server) that handles many 
domains with one uberservlet.  I want to make it so that each site can use it's 
own javascript stuff but if it's not in the /js/site directory, I want it to 
look in /js, same for css files (/css/site up to /css), etc.

This setup would also affect logging. All sites would be logged in one file for 
access and one for errors, rather than separate files for each virtual.  I'd 
need to have the site's internal name or perhaps the full site name 
(foo.domain.com) logged in each line of the log file.  Any clues on how to set 
this up would be appreciated also.

Why would I want to experiment with a thing like this?  I want to be able to add 
virtual servers to my site without having to restart Apache and I want to 
further centralize things.

Any help would be greatly appreciated!
Scott

-- 
q: Why do so many people take an instant dislike to MySQL and PHP?
a: It saves time.
ps: Use PostgreSQL and Python instead.
From mvanaswegen at gmail.com  Mon Feb 27 03:36:31 2006
From: mvanaswegen at gmail.com (marinus van aswegen)
Date: Mon Feb 27 03:36:34 2006
Subject: [mod_python] Publisher Weirdness
Message-ID: <ffa39deb0602270036n4d0889e1g732191462a8caa67@mail.gmail.com>

Hi I'm experiencing some mod_python weirdness. I write a log in function
that manages the user log in and session. The problem is that this function
just manages the session and doesn't need to send anything to the browser. I
read in the FAQ about the compulsive need by the handler to return
something.  I followed the recommendation in the FAQ but it's like the
browser just goes into limbo .... it's like it just gets stuck ... reading
data, I don't get any errors through, nothing in the logs either. I wrote a
small test function to see whats up.

Marinus

Code example below:

def validate_session(req):
    """
    this function must be called prior to all function to
    ensure that the user is autenticated
    """

    # get the session for this request
    session = Session.Session(req, secret = config.cookie_passwd)

    # is this req from a new session
    if session.is_new():
        util.redirect (req, config.base_url + 'login.html')

    if session.has_key('auth'):
        if session['auth'] != True:
            util.redirect (req, config.base_url + 'login.html')

    return 1

def login (req, uid = None, passwd = None):
    """
    connect to the database an authenticate the user
    """
    session = Session.Session(req, secret = config.cookie_passwd)

    # does this session have counter? Maby a new client
    if not session.has_key ('count'):
        session['count'] = 0
        session.save()

    #db_uid,db_passwd = mplib.db_query_one ('select uid,passwd from
security')
    db_uid = 'test'
    db_passwd = 'test'

    if db_uid == uid and db_passwd == passwd:
        session['uid'] = db_uid
        session['count'] = 0
        session['auth'] = True
        session.save()

        # the handler is obsessed with returning something, give it
something
        req.content_type = 'text/plain'
        return apache.OK
        #raise apache.SERVER_RETURN, apache.OK

    else:
        session['count'] += 1
        if session['count'] >= config.pass_fail:
            #session.invalidate()
            session.delete()
            util.redirect(req, config.base_url + 'logon_fail.html')
        session.save()
        util.redirect (req, config.base_url + 'login.html')


def test(req):

    validate_session(req)

    session = Session.Session(req, secret = config.cookie_passwd)

        req.content_type = 'text/plain'
    req.write('hello world\n')

    req.write( 'welcome %d\n' % (session['uid'] ))

    return apache.OK
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060227/41a2d8ba/attachment.html
From scott_list at mischko.com  Mon Feb 27 04:58:01 2006
From: scott_list at mischko.com (Scott Chapman)
Date: Mon Feb 27 03:58:13 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <4402B725.1050501@mischko.com>
References: <4402B725.1050501@mischko.com>
Message-ID: <4402CD29.80007@mischko.com>

Scott Chapman wrote:
> Hi all!
> 
> I want to make a funky handler for static files.  It should return the 
> requested static file if it's in the directory requested.  If it's not 
> there, it should move up a directory and try there.
Well,
Here's what I came up with in the code and it works great.  It doesn't handle 
logging issues but it's step #1.  It looks first in the site specific directory 
then in the shared directory.  I had the spec "backwards" above.

> '''This little handler receives requests for files that would normally be sent statically.
> If the file requested is in /images, and the sites internal name is "mischko" then it will look in:
> /images/mischko for the file.  If it's not there, it will look in /images for it.
> 
> This allows a site to have custom versions of things and if it doesn't, use the shared versions.
> It also allows the site to have a template that is happily ignorant of the situation.'''
> 
> from mod_python import apache
> import os
> import psycopg2
> 
> def parse_uri(uri):
>     uri_list = uri.split('/')
>     uri_list.insert(0,'')
>     uri_list=uri_list[-3:]
>     return uri_list
> 
> def _getInternalName(alias):
>         _conn = psycopg2.connect("user=foo dbname=bar host=127.0.0.1 password=barfoo")
>         _cursor = _conn.cursor()
>         query = "SELECT hostname FROM host_aliases WHERE external_name = %s"
>         parms = [alias]
>         _cursor.execute(query, parms)
>         rval = _cursor.fetchone()
>         if rval:
>             rval = rval[0]
>         _conn.rollback()
>         _conn.close()
>         return (rval)
> 
> def handler(req):
>     def _log(message):
>         req.log_error(message)
> 
>     debug = True
> 
>     (subsite, moduleName, methodName)= parse_uri(req.uri)
>     internalName = _getInternalName(req.hostname)
>     if subsite:
>         internalName = _getInternalName(subsite)
> 
>     if not internalName:
>         if debug: _log('static_handler - illegal host name')
>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
> 
>     orig_path = req.filename
> 
>     (path, filename) = os.path.split(req.filename)
>     new_path = os.path.normpath(path + '/' + internalName + '/' + filename)
> 
>     if os.path.exists(new_path):
>         use_path = new_path
>     elif os.path.exists(orig_path):
>         use_path = orig_path
>     else:
>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
> 
>     if debug: _log('static_handler - used path: %s' % use_path)
> 
>     req.sendfile(use_path)
>     return apache.OK


-- 
q: Why do so many people take an instant dislike to MySQL and PHP?
a: It saves time.
ps: Use PostgreSQL and Python instead.
From grahamd at dscpl.com.au  Mon Feb 27 04:38:05 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 27 04:38:28 2006
Subject: [mod_python] Publisher Weirdness
In-Reply-To: <ffa39deb0602270036n4d0889e1g732191462a8caa67@mail.gmail.com>
References: <ffa39deb0602270036n4d0889e1g732191462a8caa67@mail.gmail.com>
Message-ID: <D38BE49B-F3B1-4485-B3C7-67C3DF6B1B5F@dscpl.com.au>


On 27/02/2006, at 7:36 PM, marinus van aswegen wrote:

> def validate_session(req):
>     """
>     this function must be called prior to all function to
>     ensure that the user is autenticated
>     """
>
>     # get the session for this request
>     session = Session.Session(req, secret = config.cookie_passwd)
>      .....

> def test(req):
>
>     validate_session(req)
>
>     session = Session.Session(req, secret = config.cookie_passwd)

Here is your first problem. The validate_session() function has already
created a session object. Creating the second here for the same request
will cause a deadlock.

There are various other things which could be done better, but will just
point out this obvious thing for now.

Graham
From grahamd at dscpl.com.au  Mon Feb 27 04:44:46 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 27 04:45:11 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <4402CD29.80007@mischko.com>
References: <4402B725.1050501@mischko.com> <4402CD29.80007@mischko.com>
Message-ID: <76F6F3ED-2A4C-4F1E-AE53-993CFB1744B8@dscpl.com.au>

If your intent is only to serve up static files, you might be better  
off using
Apache rewrite rules rather than using mod_python.

I've not got my head around rewrite rules yet, but maybe someone else
here understand them better and can suggest something to try.

Graham

On 27/02/2006, at 8:58 PM, Scott Chapman wrote:

> Scott Chapman wrote:
>> Hi all!
>> I want to make a funky handler for static files.  It should return  
>> the requested static file if it's in the directory requested.  If  
>> it's not there, it should move up a directory and try there.
> Well,
> Here's what I came up with in the code and it works great.  It  
> doesn't handle logging issues but it's step #1.  It looks first in  
> the site specific directory then in the shared directory.  I had  
> the spec "backwards" above.
>
>> '''This little handler receives requests for files that would  
>> normally be sent statically.
>> If the file requested is in /images, and the sites internal name  
>> is "mischko" then it will look in:
>> /images/mischko for the file.  If it's not there, it will look in / 
>> images for it.
>> This allows a site to have custom versions of things and if it  
>> doesn't, use the shared versions.
>> It also allows the site to have a template that is happily  
>> ignorant of the situation.'''
>> from mod_python import apache
>> import os
>> import psycopg2
>> def parse_uri(uri):
>>     uri_list = uri.split('/')
>>     uri_list.insert(0,'')
>>     uri_list=uri_list[-3:]
>>     return uri_list
>> def _getInternalName(alias):
>>         _conn = psycopg2.connect("user=foo dbname=bar  
>> host=127.0.0.1 password=barfoo")
>>         _cursor = _conn.cursor()
>>         query = "SELECT hostname FROM host_aliases WHERE  
>> external_name = %s"
>>         parms = [alias]
>>         _cursor.execute(query, parms)
>>         rval = _cursor.fetchone()
>>         if rval:
>>             rval = rval[0]
>>         _conn.rollback()
>>         _conn.close()
>>         return (rval)
>> def handler(req):
>>     def _log(message):
>>         req.log_error(message)
>>     debug = True
>>     (subsite, moduleName, methodName)= parse_uri(req.uri)
>>     internalName = _getInternalName(req.hostname)
>>     if subsite:
>>         internalName = _getInternalName(subsite)
>>     if not internalName:
>>         if debug: _log('static_handler - illegal host name')
>>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
>>     orig_path = req.filename
>>     (path, filename) = os.path.split(req.filename)
>>     new_path = os.path.normpath(path + '/' + internalName + '/' +  
>> filename)
>>     if os.path.exists(new_path):
>>         use_path = new_path
>>     elif os.path.exists(orig_path):
>>         use_path = orig_path
>>     else:
>>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
>>     if debug: _log('static_handler - used path: %s' % use_path)
>>     req.sendfile(use_path)
>>     return apache.OK
>
>
> -- 
> q: Why do so many people take an instant dislike to MySQL and PHP?
> a: It saves time.
> ps: Use PostgreSQL and Python instead.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grahamd at dscpl.com.au  Mon Feb 27 06:29:56 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 27 06:30:13 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <76F6F3ED-2A4C-4F1E-AE53-993CFB1744B8@dscpl.com.au>
References: <4402B725.1050501@mischko.com> <4402CD29.80007@mischko.com>
	<76F6F3ED-2A4C-4F1E-AE53-993CFB1744B8@dscpl.com.au>
Message-ID: <a641cbdd812bb5b993c3df6444b6b249@dscpl.com.au>

Having a little play, got this to sort of work:

RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^subdir/([^/]*\.txt?|[^\./]*)[:;,\.]*$ /testing/rewrite/$1 
[L,NS]

Still have to work out how I can get the leading part of the path from 
the
right hand side automatically inserted based on context, rather than 
doing
it manually.

The basic idea though is that if the file doesn't exist, the rewrite 
rule
will convert a request for the nonexistant ".txt" file in the "subdir" 
to
the parent directory, which in this case happens to be 
"/testing/rewrite".

Anyone who understands mod_rewrite able to improve on this for me?

Graham

On 27/02/2006, at 8:44 PM, Graham Dumpleton wrote:

> If your intent is only to serve up static files, you might be better 
> off using
> Apache rewrite rules rather than using mod_python.
>
> I've not got my head around rewrite rules yet, but maybe someone else
> here understand them better and can suggest something to try.
>
> Graham
>
> On 27/02/2006, at 8:58 PM, Scott Chapman wrote:
>
>> Scott Chapman wrote:
>>> Hi all!
>>> I want to make a funky handler for static files.  It should return 
>>> the requested static file if it's in the directory requested.  If 
>>> it's not there, it should move up a directory and try there.
>> Well,
>> Here's what I came up with in the code and it works great.  It 
>> doesn't handle logging issues but it's step #1.  It looks first in 
>> the site specific directory then in the shared directory.  I had the 
>> spec "backwards" above.
>>
>>> '''This little handler receives requests for files that would 
>>> normally be sent statically.
>>> If the file requested is in /images, and the sites internal name is 
>>> "mischko" then it will look in:
>>> /images/mischko for the file.  If it's not there, it will look in 
>>> /images for it.
>>> This allows a site to have custom versions of things and if it 
>>> doesn't, use the shared versions.
>>> It also allows the site to have a template that is happily ignorant 
>>> of the situation.'''
>>> from mod_python import apache
>>> import os
>>> import psycopg2
>>> def parse_uri(uri):
>>>     uri_list = uri.split('/')
>>>     uri_list.insert(0,'')
>>>     uri_list=uri_list[-3:]
>>>     return uri_list
>>> def _getInternalName(alias):
>>>         _conn = psycopg2.connect("user=foo dbname=bar host=127.0.0.1 
>>> password=barfoo")
>>>         _cursor = _conn.cursor()
>>>         query = "SELECT hostname FROM host_aliases WHERE 
>>> external_name = %s"
>>>         parms = [alias]
>>>         _cursor.execute(query, parms)
>>>         rval = _cursor.fetchone()
>>>         if rval:
>>>             rval = rval[0]
>>>         _conn.rollback()
>>>         _conn.close()
>>>         return (rval)
>>> def handler(req):
>>>     def _log(message):
>>>         req.log_error(message)
>>>     debug = True
>>>     (subsite, moduleName, methodName)= parse_uri(req.uri)
>>>     internalName = _getInternalName(req.hostname)
>>>     if subsite:
>>>         internalName = _getInternalName(subsite)
>>>     if not internalName:
>>>         if debug: _log('static_handler - illegal host name')
>>>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
>>>     orig_path = req.filename
>>>     (path, filename) = os.path.split(req.filename)
>>>     new_path = os.path.normpath(path + '/' + internalName + '/' + 
>>> filename)
>>>     if os.path.exists(new_path):
>>>         use_path = new_path
>>>     elif os.path.exists(orig_path):
>>>         use_path = orig_path
>>>     else:
>>>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
>>>     if debug: _log('static_handler - used path: %s' % use_path)
>>>     req.sendfile(use_path)
>>>     return apache.OK
>>
>>
>> -- 
>> q: Why do so many people take an instant dislike to MySQL and PHP?
>> a: It saves time.
>> ps: Use PostgreSQL and Python instead.
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From list at joreybump.com  Mon Feb 27 10:02:27 2006
From: list at joreybump.com (Jorey Bump)
Date: Mon Feb 27 10:02:42 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <4402B725.1050501@mischko.com>
References: <4402B725.1050501@mischko.com>
Message-ID: <44031483.6070802@joreybump.com>

Scott Chapman wrote:

> Why would I want to experiment with a thing like this?  I want to be 
> able to add virtual servers to my site without having to restart Apache 
> and I want to further centralize things.

If this is your only goal, consider using mass virtual hosting, instead:

NameVirtualHost *:80

<VirtualHost _default_:80>
   # default host to catch probes and undefined hosts
   ServerName server.example.net
   ServerAdmin admin@example.net
   DocumentRoot /var/www/vhosts/default
   # refuse all requests to the default host
   <Directory /var/www/vhosts/default>
     Order allow,deny
     Deny from all
   </Directory>
   ErrorDocument 403 "Access to this location is forbidden.
</VirtualHost>

<VirtualHost *:80>
   ServerAdmin admin@example.net
   # mass virtual hosting
   # apache will look for DocumentRoot using name of requested host (%0)
   VirtualDocumentRoot /var/www/vhosts/%0/site
   # reconstruct self-referential URLs using hostname sent by client
   UseCanonicalName Off
</VirtualHost>

The above configuration would serve requests for http://sub.example.com 
from:

  /var/www/vhosts/sub.example.com/site

The only configuration necessary is to set up DNS, create the 
appropriate directory, and upload the files. There is no need to restart 
Apache. Hits to the default host are refused in the example, mainly to 
reduce noise in the logs from worms and other probes. To log all hits to 
a single file, just put %V at the start of your LogFormat string to 
indicate the virtual host for the request. The modified common format 
would look like this in httpd.conf:

LogFormat "%V %h %l %u %t \"%r\" %>s %b" vcommon
CustomLog /var/log/apache/vcommon_log vcommon




From deron.meranda at gmail.com  Mon Feb 27 11:10:48 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Mon Feb 27 11:10:55 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <4402CD29.80007@mischko.com>
References: <4402B725.1050501@mischko.com> <4402CD29.80007@mischko.com>
Message-ID: <5c06fa770602270810w1a0050b7i42e254483f575bd3@mail.gmail.com>

Even though Apache mod_rewrite may work better, here's
just a few comments on your mod_python approach.  If nothing
else it might be useful as an example....

On 2/27/06, Scott Chapman <scott_list@mischko.com> wrote:
> > from mod_python import apache
> > import os
> > import psycopg2
> >
> > def parse_uri(uri):
> >     uri_list = uri.split('/')
> >     uri_list.insert(0,'')
> >     uri_list=uri_list[-3:]
> >     return uri_list

Consider using Python's urlparse module instead.

> > def _getInternalName(alias):
> >         _conn = psycopg2.connect("user=foo dbname=bar host=127.0.0.1 password=barfoo")
> >         _cursor = _conn.cursor()
> >         query = "SELECT hostname FROM host_aliases WHERE external_name = %s"
> >         parms = [alias]

Should probably use alias.tolower()  (or toupper()).  Hostnames are
generally case-insensitive (in ASCII).

> >         _cursor.execute(query, parms)
> >         rval = _cursor.fetchone()
> >         if rval:
> >             rval = rval[0]
> >         _conn.rollback()

Why a rollback?  A commit() is probably better.

> >         _conn.close()
> >         return (rval)
> >
> > def handler(req):
> >     def _log(message):
> >         req.log_error(message)
> >
> >     debug = True
> >
> >     (subsite, moduleName, methodName)= parse_uri(req.uri)
> >     internalName = _getInternalName(req.hostname)
> >     if subsite:
> >         internalName = _getInternalName(subsite)
> >
> >     if not internalName:
> >         if debug: _log('static_handler - illegal host name')
> >         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
> >
> >     orig_path = req.filename
> >
> >     (path, filename) = os.path.split(req.filename)
> >     new_path = os.path.normpath(path + '/' + internalName + '/' + filename)

Use os.path.join() instead of a+'/'+b+'/'+c.

> >     if os.path.exists(new_path):
> >         use_path = new_path
> >     elif os.path.exists(orig_path):
> >         use_path = orig_path
> >     else:
> >         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
> >
> >     if debug: _log('static_handler - used path: %s' % use_path)

You should set up some other headers too.  Mimimally something
like this:

    import mimetypes, os, stat, time, sha

    ct, et = mimetypes.guess_type( use_path )
    if not ct:
        ct = 'application/octet-stream'
    req.content_type = ct
    if et:
        req.headers_out['Content-Encoding'] = et

    mtime = os.stat( use_path )[ stat.ST_MTIME ]
    lastmod = time.strftime('%a, %d %m %Y %H:%M:%S GMT',
                           time.gmtime(mtime) )
    req.headers_out['Last-Modified'] = lastmod
    req.headers_out['Accept-Ranges'] = 'none'
    hash = sha.sha()
    sha.update( open(use_path,'rb').read() )
    req.headers_out['ETag'] = hash.hexdigest()

> >     req.sendfile(use_path)
> >     return apache.OK

If you really want to get advanced, try handling byte ranges too.
--
Deron Meranda

From grahamd at dscpl.com.au  Mon Feb 27 16:28:23 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Feb 27 16:28:32 2006
Subject: [mod_python] Publisher Weirdness
Message-ID: <1141075703.31577@dscpl.user.openhosting.com>

marinus van aswegen wrote ..
> Hi Graham
> 
> I thought that my session line will not just create the session but will
> access the session for that request?

No it doesn't.

What you will need to do is to use a scheme whereby you cache the
first created session object for later access. The common convention
for this is to save it as "req.session".

def _get_session(req):
  if not hasattr(req,"session"):
    req.session = Session.Session(req, secret = config.cookie_passwd)
    ... perform any first time initialisation etc.
  return req.session

def _validate_session(req):
    session = _get_session(req)
    ....

def test(req):
  _validate_session(req)
  session = req.session
  ...

BTW, ensure you put an underscore before these utility functions
else they will be directly accessible to remote users with the right
URL. The underscore will hide them.

PS, please try and keep replies on the mailing list by using "Reply All"
and not just "Reply".

Graham

> On 2/27/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> >
> >
> > On 27/02/2006, at 7:36 PM, marinus van aswegen wrote:
> >
> > > def validate_session(req):
> > >     """
> > >     this function must be called prior to all function to
> > >     ensure that the user is autenticated
> > >     """
> > >
> > >     # get the session for this request
> > >     session = Session.Session(req, secret = config.cookie_passwd)
> > >      .....
> >
> > > def test(req):
> > >
> > >     validate_session(req)
> > >
> > >     session = Session.Session(req, secret = config.cookie_passwd)
> >
> > Here is your first problem. The validate_session() function has already
> > created a session object. Creating the second here for the same request
> > will cause a deadlock.
> >
> > There are various other things which could be done better, but will just
> > point out this obvious thing for now.
> >
> > Graham
> >
From scott_list at mischko.com  Tue Feb 28 03:20:46 2006
From: scott_list at mischko.com (Scott Chapman)
Date: Tue Feb 28 02:21:00 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <a641cbdd812bb5b993c3df6444b6b249@dscpl.com.au>
References: <4402B725.1050501@mischko.com> <4402CD29.80007@mischko.com>
	<76F6F3ED-2A4C-4F1E-AE53-993CFB1744B8@dscpl.com.au>
	<a641cbdd812bb5b993c3df6444b6b249@dscpl.com.au>
Message-ID: <440407DE.10500@mischko.com>

Graham Dumpleton wrote:
> Having a little play, got this to sort of work:


Graham,
Thanks tons for all the help on this!  I didn't see you at PyCon.  Did I miss 
you or were you elsewhere?

Scott
From scott_list at mischko.com  Tue Feb 28 03:50:46 2006
From: scott_list at mischko.com (Scott Chapman)
Date: Tue Feb 28 02:50:59 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <5c06fa770602270810w1a0050b7i42e254483f575bd3@mail.gmail.com>
References: <4402B725.1050501@mischko.com> <4402CD29.80007@mischko.com>
	<5c06fa770602270810w1a0050b7i42e254483f575bd3@mail.gmail.com>
Message-ID: <44040EE6.20403@mischko.com>

Deron Meranda wrote:
> Even though Apache mod_rewrite may work better, here's
> just a few comments on your mod_python approach.  If nothing
> else it might be useful as an example....
> 
> On 2/27/06, Scott Chapman <scott_list@mischko.com> wrote:
>>> from mod_python import apache
>>> import os
>>> import psycopg2
>>>
>>> def parse_uri(uri):
>>>     uri_list = uri.split('/')
>>>     uri_list.insert(0,'')
>>>     uri_list=uri_list[-3:]
>>>     return uri_list
> 
> Consider using Python's urlparse module instead.

I'll check into it.  I think this is smaller than importing another module and 
it is very simple and clean, and works great.

>>> def _getInternalName(alias):
>>>         _conn = psycopg2.connect("user=foo dbname=bar host=127.0.0.1 password=barfoo")
>>>         _cursor = _conn.cursor()
>>>         query = "SELECT hostname FROM host_aliases WHERE external_name = %s"
>>>         parms = [alias]
> 
> Should probably use alias.tolower()  (or toupper()).  Hostnames are
> generally case-insensitive (in ASCII).

The table is full of lower case stuff.
The alias is req.hostname, typically which is automatically converted to lower 
case, apparently.  I've never had a problem with this.

>>>         _cursor.execute(query, parms)
>>>         rval = _cursor.fetchone()
>>>         if rval:
>>>             rval = rval[0]
>>>         _conn.rollback()
> 
> Why a rollback?  A commit() is probably better.

A commit is better for a read-only operation (SELECT...)?

>>>         _conn.close()
>>>         return (rval)
>>>
>>> def handler(req):
>>>     def _log(message):
>>>         req.log_error(message)
>>>
>>>     debug = True
>>>
>>>     (subsite, moduleName, methodName)= parse_uri(req.uri)
>>>     internalName = _getInternalName(req.hostname)
>>>     if subsite:
>>>         internalName = _getInternalName(subsite)
>>>
>>>     if not internalName:
>>>         if debug: _log('static_handler - illegal host name')
>>>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
>>>
>>>     orig_path = req.filename
>>>
>>>     (path, filename) = os.path.split(req.filename)
>>>     new_path = os.path.normpath(path + '/' + internalName + '/' + filename)
> 
> Use os.path.join() instead of a+'/'+b+'/'+c.

Doh. :)

>>>     if os.path.exists(new_path):
>>>         use_path = new_path
>>>     elif os.path.exists(orig_path):
>>>         use_path = orig_path
>>>     else:
>>>         raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
>>>
>>>     if debug: _log('static_handler - used path: %s' % use_path)
> 
> You should set up some other headers too.  Mimimally something
> like this:
> 
>     import mimetypes, os, stat, time, sha
> 
>     ct, et = mimetypes.guess_type( use_path )
>     if not ct:
>         ct = 'application/octet-stream'
>     req.content_type = ct
>     if et:
>         req.headers_out['Content-Encoding'] = et
> 
>     mtime = os.stat( use_path )[ stat.ST_MTIME ]
>     lastmod = time.strftime('%a, %d %m %Y %H:%M:%S GMT',
>                            time.gmtime(mtime) )
>     req.headers_out['Last-Modified'] = lastmod
>     req.headers_out['Accept-Ranges'] = 'none'
>     hash = sha.sha()
>     sha.update( open(use_path,'rb').read() )
>     req.headers_out['ETag'] = hash.hexdigest()
> 
>>>     req.sendfile(use_path)
>>>     return apache.OK
> 
> If you really want to get advanced, try handling byte ranges too.

Thanks tons for all the help on this!

Scott
From scott_list at mischko.com  Tue Feb 28 03:51:36 2006
From: scott_list at mischko.com (Scott Chapman)
Date: Tue Feb 28 02:51:45 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <44031483.6070802@joreybump.com>
References: <4402B725.1050501@mischko.com> <44031483.6070802@joreybump.com>
Message-ID: <44040F18.1050803@mischko.com>

Jorey Bump wrote:
> Scott Chapman wrote:
> 
>> Why would I want to experiment with a thing like this?  I want to be 
>> able to add virtual servers to my site without having to restart 
>> Apache and I want to further centralize things.
> 
> If this is your only goal, consider using mass virtual hosting, instead:
> 
> NameVirtualHost *:80
> 
> <VirtualHost _default_:80>
>   # default host to catch probes and undefined hosts
>   ServerName server.example.net
>   ServerAdmin admin@example.net
>   DocumentRoot /var/www/vhosts/default
>   # refuse all requests to the default host
>   <Directory /var/www/vhosts/default>
>     Order allow,deny
>     Deny from all
>   </Directory>
>   ErrorDocument 403 "Access to this location is forbidden.
> </VirtualHost>
> 
> <VirtualHost *:80>
>   ServerAdmin admin@example.net
>   # mass virtual hosting
>   # apache will look for DocumentRoot using name of requested host (%0)
>   VirtualDocumentRoot /var/www/vhosts/%0/site
>   # reconstruct self-referential URLs using hostname sent by client
>   UseCanonicalName Off
> </VirtualHost>
> 
> The above configuration would serve requests for http://sub.example.com 
> from:
> 
>  /var/www/vhosts/sub.example.com/site
> 
> The only configuration necessary is to set up DNS, create the 
> appropriate directory, and upload the files. There is no need to restart 
> Apache. Hits to the default host are refused in the example, mainly to 
> reduce noise in the logs from worms and other probes. To log all hits to 
> a single file, just put %V at the start of your LogFormat string to 
> indicate the virtual host for the request. The modified common format 
> would look like this in httpd.conf:
> 
> LogFormat "%V %h %l %u %t \"%r\" %>s %b" vcommon
> CustomLog /var/log/apache/vcommon_log vcommon

Thanks tons for the help!  I had not heard of Mass Virtual Hosting in Apache. 
It looks like it will be a good clean solution.

Scott
From grahamd at dscpl.com.au  Tue Feb 28 03:48:01 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 28 03:48:22 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <440407DE.10500@mischko.com>
References: <4402B725.1050501@mischko.com> <4402CD29.80007@mischko.com>
	<76F6F3ED-2A4C-4F1E-AE53-993CFB1744B8@dscpl.com.au>
	<a641cbdd812bb5b993c3df6444b6b249@dscpl.com.au>
	<440407DE.10500@mischko.com>
Message-ID: <a6bc453d338ad10206d4f29546ee7fa7@dscpl.com.au>


On 28/02/2006, at 7:20 PM, Scott Chapman wrote:
>   I didn't see you at PyCon.  Did I miss you or were you elsewhere?

8583 miles (13814 km) too far away.

Anyone else go? Any mention of mod_python, or is still regarded as
the poorer cousin of all these over hyped mega frameworks. ;-)

Graham

From mvanaswegen at gmail.com  Tue Feb 28 09:03:12 2006
From: mvanaswegen at gmail.com (marinus van aswegen)
Date: Tue Feb 28 09:03:17 2006
Subject: [mod_python] Publisher Weirdness
In-Reply-To: <1141075703.31577@dscpl.user.openhosting.com>
References: <1141075703.31577@dscpl.user.openhosting.com>
Message-ID: <ffa39deb0602280603t294fbfd0v53a6c8bbd5f72f7d@mail.gmail.com>

Hi Graham

It would be nice if there was a mod_python recipe for doing a logon.

Marinus

On 2/27/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
> marinus van aswegen wrote ..
> > Hi Graham
> >
> > I thought that my session line will not just create the session but will
> > access the session for that request?
>
> No it doesn't.
>
> What you will need to do is to use a scheme whereby you cache the
> first created session object for later access. The common convention
> for this is to save it as "req.session".
>
> def _get_session(req):
>   if not hasattr(req,"session"):
>     req.session = Session.Session(req, secret = config.cookie_passwd)
>     ... perform any first time initialisation etc.
>   return req.session
>
> def _validate_session(req):
>     session = _get_session(req)
>     ....
>
> def test(req):
>   _validate_session(req)
>   session = req.session
>   ...
>
> BTW, ensure you put an underscore before these utility functions
> else they will be directly accessible to remote users with the right
> URL. The underscore will hide them.
>
> PS, please try and keep replies on the mailing list by using "Reply All"
> and not just "Reply".
>
> Graham
>
> > On 2/27/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> > >
> > >
> > > On 27/02/2006, at 7:36 PM, marinus van aswegen wrote:
> > >
> > > > def validate_session(req):
> > > >     """
> > > >     this function must be called prior to all function to
> > > >     ensure that the user is autenticated
> > > >     """
> > > >
> > > >     # get the session for this request
> > > >     session = Session.Session(req, secret = config.cookie_passwd)
> > > >      .....
> > >
> > > > def test(req):
> > > >
> > > >     validate_session(req)
> > > >
> > > >     session = Session.Session(req, secret = config.cookie_passwd)
> > >
> > > Here is your first problem. The validate_session() function has
> already
> > > created a session object. Creating the second here for the same
> request
> > > will cause a deadlock.
> > >
> > > There are various other things which could be done better, but will
> just
> > > point out this obvious thing for now.
> > >
> > > Graham
> > >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20060228/53689cb5/attachment.html
From jcea at argo.es  Tue Feb 28 13:56:01 2006
From: jcea at argo.es (Jesus Cea)
Date: Tue Feb 28 13:56:14 2006
Subject: [mod_python] Silly question about linking to libpython.a or
	libpython.so
Message-ID: <44049CC1.7030804@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm a old timer 2.7.* happy user. Today I'm updating Apache to 2.2.0
(too bad that last mod_python doesn't work with it out of the box :-)
and mod_python 3.2.8.

I beg your pardon but, why is mod_python linking with the static python
library instead of the dynamic one?. The resulting library size is 10%
and DSO sharing between processes is improved. Moreover, any fix in core
python will be in mod_python automagically.

I guess I'm missing something, but I don't get it :). Any suggestion?.

Thanks for your time and attention.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea@argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.1 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBRAScwZlgi5GaxT1NAQLBTgP/VcDTKgag5hSKEQttIzFNfJQOZKzL9KHT
lQt/jlf580t1sj6qlnGYLO+rhRMgFb2JrMU1ZRUSepB4bXJ8ABT/z8oDXRZxzMb+
T71RBe+Li+I/YbD9OSXH2IlTj7y8vKOIDW/jKDXeceep9CVrpx/PzZ1Fc+9E9aWM
C9naW2s0ywA=
=tW5K
-----END PGP SIGNATURE-----
From heuristic at gmail.com  Tue Feb 28 16:05:15 2006
From: heuristic at gmail.com (Alex Biddle)
Date: Tue Feb 28 16:05:19 2006
Subject: [mod_python] ./configure error
Message-ID: <45e0ec7b0602281305lf9681deh24ad6ec373b4e272@mail.gmail.com>

Hey there,

I'm using Ubuntu Dapper Drake (one of the flight releases) and am
having some problems with executing ./configure in the source
directory.

Here's what I'm putting in:

./configure --with-apxs=/srv/apache2/bin/apxs --with-python=/usr/bin/python2.4

This is what I'm getting out:

[snip]

configure: checking whether apxs is available...
checking for --with-apxs... /srv/apache2/bin/apxs executable, good
checking Apache version... 2.0.55
checking for Apache libexec directory... /srv/apache2/modules
checking for Apache include directory... -I/srv/apache2/include
checking for --with-python... /usr/bin/python2.4
checking Python version... 2.4
checking Python install prefix... /usr
checking checking where python libraries are installed... /usr/lib/python2.4
checking for Py_NewInterpreter in -lpython2.4... yes
checking what libraries Python was linked with... -lpython2.4  
-lpthread -ldl  -lutil   -lm
checking linker flags used to link Python...
checking where Python include files are... -I/usr/include/python2.4
./configure: line 3427: syntax error near unexpected token `('
./configure: line 3427: `  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`'

Is this a problem my end, or with the configure file?

Thanks for reading.
Alex Biddle

From grahamd at dscpl.com.au  Tue Feb 28 16:11:50 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 28 16:11:54 2006
Subject: [mod_python] ./configure error
Message-ID: <1141161110.9736@dscpl.user.openhosting.com>

The problem is the version of bash you are using. See workarounds
documented in:

  http://issues.apache.org/jira/browse/MODPYTHON-122

Graham

Alex Biddle wrote ..
> Hey there,
> 
> I'm using Ubuntu Dapper Drake (one of the flight releases) and am
> having some problems with executing ./configure in the source
> directory.
> 
> Here's what I'm putting in:
> 
> ./configure --with-apxs=/srv/apache2/bin/apxs --with-python=/usr/bin/python2.4
> 
> This is what I'm getting out:
> 
> [snip]
> 
> configure: checking whether apxs is available...
> checking for --with-apxs... /srv/apache2/bin/apxs executable, good
> checking Apache version... 2.0.55
> checking for Apache libexec directory... /srv/apache2/modules
> checking for Apache include directory... -I/srv/apache2/include
> checking for --with-python... /usr/bin/python2.4
> checking Python version... 2.4
> checking Python install prefix... /usr
> checking checking where python libraries are installed... /usr/lib/python2.4
> checking for Py_NewInterpreter in -lpython2.4... yes
> checking what libraries Python was linked with... -lpython2.4  
> -lpthread -ldl  -lutil   -lm
> checking linker flags used to link Python...
> checking where Python include files are... -I/usr/include/python2.4
> ./configure: line 3427: syntax error near unexpected token `('
> ./configure: line 3427: `  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`'
> 
> Is this a problem my end, or with the configure file?
> 
> Thanks for reading.
> Alex Biddle
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From grahamd at dscpl.com.au  Tue Feb 28 16:30:26 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 28 16:30:31 2006
Subject: [mod_python] Silly question about linking to libpython.a
	orlibpython.so
Message-ID: <1141162226.21444@dscpl.user.openhosting.com>

Jesus Cea wrote ..
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> I'm a old timer 2.7.* happy user. Today I'm updating Apache to 2.2.0
> (too bad that last mod_python doesn't work with it out of the box :-)
> and mod_python 3.2.8.
> 
> I beg your pardon but, why is mod_python linking with the static python
> library instead of the dynamic one?. The resulting library size is 10%
> and DSO sharing between processes is improved. Moreover, any fix in core
> python will be in mod_python automagically.
> 
> I guess I'm missing something, but I don't get it :). Any suggestion?.

This has been requested before.

  http://issues.apache.org/jira/browse/MODPYTHON-21

The problem is coming up with a change that is going to work properly
on all platforms. The Win32 and Mac OS X platforms are somewhat
different to Linux/UNIX systems in respect of where/how the Python library
being linked to is constructed.

If you can come up with suggested changes that would work in your case,
but would degrade gracefully to the current way things are done, then
by all means contribute them by attaching then to the JIRA issue referenced
above and they can be considered.

If an ability to use a shared library is provided though, it possibly should
be optional based on an option to configure.

Graham
From grahamd at dscpl.com.au  Tue Feb 28 16:39:39 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Feb 28 16:39:44 2006
Subject: [mod_python] Silly question about linking to libpython.a
	orlibpython.so
Message-ID: <1141162779.26994@dscpl.user.openhosting.com>

Jesus Cea wrote ..
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> I'm a old timer 2.7.* happy user. Today I'm updating Apache to 2.2.0
> (too bad that last mod_python doesn't work with it out of the box :-)
> and mod_python 3.2.8.

BTW, the download page clearly states:

  This release works with Apache HTTP Server 2.0. HTTP Server 2.2 is not yet supported. 

If you don't already know and you want to use Apache 2.2, you can
though apply the patches given at:

  http://issues.apache.org/jira/browse/MODPYTHON-78

Graham
From tkruthoff at gmail.com  Tue Feb 28 17:57:46 2006
From: tkruthoff at gmail.com (Troy Kruthoff)
Date: Tue Feb 28 17:57:51 2006
Subject: [mod_python] How to make a handler for static files?
In-Reply-To: <a6bc453d338ad10206d4f29546ee7fa7@dscpl.com.au>
References: <4402B725.1050501@mischko.com> <4402CD29.80007@mischko.com>
	<76F6F3ED-2A4C-4F1E-AE53-993CFB1744B8@dscpl.com.au>
	<a641cbdd812bb5b993c3df6444b6b249@dscpl.com.au>
	<440407DE.10500@mischko.com>
	<a6bc453d338ad10206d4f29546ee7fa7@dscpl.com.au>
Message-ID: <5ef0bc720602281457x68bbfa83mdd491fcf7920d340@mail.gmail.com>

Graham,

I attended (in fact, I almost killed Scott (the originator of this
thread) driving to a book party).

I was surprised that there were no sessions specifically about
mod_python, so I added a BoF meeting (posted the announcement to this
group).  About 10 people showed up and we talked mostly about how to
successfully deploy mod_python.  Of the group, only a couple of people
were actually using mod_python, the rest were seeking additional
information.  Kevin Lewandowski reported his www.discogs.com site at 2
million page views (a month I think?) running mod_python on 4
load-balanced servers.

The django guys were at the conference (but not the BoF), presented a
couple topics/sessions, and recommended mod_python for deployment.

American Greeting also presented a session, I'll have to check my
notes, but they run a lot of traffic through their online greeting
services.  However, I asked during the Q & A about their use of
mod_python, and they do not use it on their main web sites.

Being new to Python and mod_python and my first PyCon, I can say that
mod_python seems to be known by those doing web-development with
Python.  However, there does not seem to be any references to it being
used for heavy lifting.  I recently had a chat with the co-creator of
feedlounge.com (a pure Python Ajax application) about their
experiences with mod_python (they currently are not using it, do to
ref issues with SQLObject) and he mentioned taking another look at it
appears updates are coming faster.  Some people at the BoF were not
aware that mod_python development is as active as it is.

For what it is worth, I have recently chosen mod_python for the next
generation of my company's product (a high traffic, b2b web
application).  When complete, I hope it will be a great reference site
for others evaluating mod_python.  Early tests show mod_python easliy
handling 500 reqs/sec with the worker and event MPM's serving 100%
db-backed dynamic content on modest hardware.  We created and benched
the same part of our application in PHP and got 200 reqs/sec, 300 with
opcode caching.  Performance isn't even our primary decision point,
but it is nice to know mod_python has it nailed.

Troy



On 2/28/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>
> On 28/02/2006, at 7:20 PM, Scott Chapman wrote:
> >   I didn't see you at PyCon.  Did I miss you or were you elsewhere?
>
> 8583 miles (13814 km) too far away.
>
> Anyone else go? Any mention of mod_python, or is still regarded as
> the poorer cousin of all these over hyped mega frameworks. ;-)
>
> Graham
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

