From rey4 at columbia.edu  Sun Jun  1 17:27:33 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <bbdqu2$cog$1@main.gmane.org>

Hi, I'm trying to get write a multithreaded script to run under mod_python
and apache 1.3 on linux, but the script seems to just freeze up at the point
of thread creation leaving the http connection open but not doing anything
else.

I isolated the problem in a little test script:

-- begin mptest.py --
from mod_python import apache

def handler(req):
  w = Worker(req)
  req.write("Starting thread...\n")
  w.start()
  req.write("Joining thread...\n")
  w.join()
  req.write("Done.\n")
  return apache.OK

import threading

class Worker(threading.Thread):
  def __init__(self, req):
    self.req = req
    threading.Thread.__init__(self)

  def run(self):
    self.req.write("  Hello from thread!\n")
-- end mptest.py --

-- begin .htaccess --
AddHandler python-program .py
PythonHandler mptest
PythonDebug On
-- end .htaccess --

The script runs fine on a windows box running Apache 2.0.46, Mod_Python
3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
1.3.27, Mod_Python 2.7.8, and Python 2.2.2.

The place where it seems to freeze is at w.start(). If you comment that line
out, it does complete execution. Is this problem a bug in mod_python, or
have I done something wrong?

- Russ



From daniel at copyleft.no  Sun Jun  1 23:39:27 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
In-Reply-To: <bbdqu2$cog$1@main.gmane.org>
Message-ID: <20030601233903.P58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hi, I'm trying to get write a multithreaded script to run under mod_python
> and apache 1.3 on linux, but the script seems to just freeze up at the point
> of thread creation leaving the http connection open but not doing anything
> else.

Apache 1.3 doesn't support threading. So neither does mod_python when combined
with it. Upgrade Apache.

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 18:39:25 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
References: <bbdqu2$cog$1@main.gmane.org>
	<20030601233903.P58312-100000@unity.copyleft.no>
Message-ID: <bbdv4s$4ar$1@main.gmane.org>

Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
calling Thread.start() in an apache process would cause it to lock up. I'm
trying to add mod_python support to an open source project (ViewCVS) and I'd
like to avoid making apache 2 a requirement for it, although I will try
upgrading apache on my own server. Any more information on mod_python 2.x
and threading would be much appreciated.

- Russ


Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Hi, I'm trying to get write a multithreaded script to run under
>> mod_python and apache 1.3 on linux, but the script seems to just
>> freeze up at the point of thread creation leaving the http
>> connection open but not doing anything else.
>
> Apache 1.3 doesn't support threading. So neither does mod_python when
> combined with it. Upgrade Apache.
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 00:55:11 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbdv4s$4ar$1@main.gmane.org>
Message-ID: <20030602005124.I58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
> calling Thread.start() in an apache process would cause it to lock up. I'm
> trying to add mod_python support to an open source project (ViewCVS) and I'd
> like to avoid making apache 2 a requirement for it, although I will try
> upgrading apache on my own server. Any more information on mod_python 2.x
> and threading would be much appreciated.

Apache 1.3 is not threadsafe. In my experience, it will crash when it's linked
to the threading libs - which is what happens if you load a threaded version of
mod_python.

I've always had to build a separate python without threading support, for use
with mod_python, when I want to use Apache 1.3.

This is probably what you've done too, or the system has done for you (or the
guy who made the binaries did). Loading "threading" in Python when Python is
built without threading support might lock it up - that could be what you're
seeing.

Either way, you will have to switch to Apache 2.0 if you want to use threading
with mod_python. This is the nature of mod_python. :)

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 19:58:30 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
References: <bbdv4s$4ar$1@main.gmane.org>
	<20030602005124.I58312-100000@unity.copyleft.no>
Message-ID: <bbe3pa$r2b$1@main.gmane.org>

Hey, thanks for your help. I installed apache 2 and everything began to
work! I still don't understand the behavior with apache 1.3. The fact that
apache code is not threadsafe doesn't explain why threading.Thread.start()
(which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
one version of python installed on my system and it does support threading.
Oh well, hopefully apache 1.3 will go away soon.

- Russ

Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Apache 1.3 doesn't _use_ threading, but this doesn't explain why
>> merely calling Thread.start() in an apache process would cause it to
>> lock up. I'm trying to add mod_python support to an open source
>> project (ViewCVS) and I'd like to avoid making apache 2 a
>> requirement for it, although I will try upgrading apache on my own
>> server. Any more information on mod_python 2.x and threading would
>> be much appreciated.
>
> Apache 1.3 is not threadsafe. In my experience, it will crash when
> it's linked to the threading libs - which is what happens if you load
> a threaded version of mod_python.
>
> I've always had to build a separate python without threading support,
> for use with mod_python, when I want to use Apache 1.3.
>
> This is probably what you've done too, or the system has done for you
> (or the guy who made the binaries did). Loading "threading" in Python
> when Python is built without threading support might lock it up -
> that could be what you're seeing.
>
> Either way, you will have to switch to Apache 2.0 if you want to use
> threading with mod_python. This is the nature of mod_python. :)
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 02:13:06 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbe3pa$r2b$1@main.gmane.org>
Message-ID: <20030602020851.V58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hey, thanks for your help. I installed apache 2 and everything began to
> work! I still don't understand the behavior with apache 1.3. The fact that
> apache code is not threadsafe doesn't explain why threading.Thread.start()
> (which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
> one version of python installed on my system and it does support threading.
> Oh well, hopefully apache 1.3 will go away soon.

Well, things are set up differently on different systems, I have experience
with OpenBSD and FreeBSD. If I tried to do what you did, I would have ended up
in one of two situations:

1) If I used a threaded Python for my mod_python, and attempted to load
mod_python in apache, I would get error messages about unresolved symbols
belonging to libpt. Since obviously, Apache isn't linked against that library.

2) If I used an unthreaded version, I would be able to load things and get
going, but I'd get undefined behaviour if I tried to use threading in my python
script, since the python binary doesn't support the calls the threading module
needs. This is probably what's happening to you.

-- Daniel

From fraser at wehave.net  Sun Jun  1 21:48:46 2003
From: fraser at wehave.net (Fraser Campbell)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Urgent Help Needed
In-Reply-To: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
References: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
Message-ID: <200306012148.46546.fraser@wehave.net>

On May 27, 2003 11:18 pm, Graeme Matthew wrote:

> Does anyone know where one can get a mod_python binary install for linux
> just like the one that exists for Windows as I cannot afford to spend my 2
> coding days trying to get mod_python working, if there is no such file then
> thats fine, ill forget it all together.

This reply is very late, very off-topic and wouldn't have helped you given 
your time constraints anyway but ... my apologies if anyone is offended.

Try Debian, 8000+ packages installable (python 2.1 is default but 1.5 and 2.2 
are available), runs on 11 architectures, will likely (sooner or later) 
support multiple kernels (linux, hurd and a few BSDs).  Anyway, once Debian 
is running type "apt-get install libapache-mod-python" and you're done.

Debian is stable as a rock which means you don't often get upgrades, it's not 
for everyone.  OTOH, running apache 1.3.26 with mod_python 2.7.8 makes me 
quite happy considering the recurring security issues with apache2.

-- 
Fraser Campbell <fraser@wehave.net>                 http://www.wehave.net/
Halton Hills, Ontario, Canada                                 Debian GNU/Linux

From mike.looijmans at asml.com  Mon Jun  2 07:40:29 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <01c328c9$79974480$926a1e6e@wsasd464>

Probably, the freeze is because apache 1.3 doesn't support threading.

I guess the same applies to the "req" object as most GUIs: Only access the
Request object from the thread that created it. It might work if you make the
thread object like this:

    def run(self):
        self.result = "Hello from thread!\n"

then after the join, use "req.write(w.result)" to output the result from the
thread.

Solution would be to remove the threading, since it is useless in a HTTP
server anyway. The client has to wait for the data to be sent back anyway. If
you want to use another handler for parts of the message, just send the client
a "304" (redirect) response, or (if you feel like having fun) send a HTTP
request to your own HTTP server, which will use another process or thread to
handle it.

I use HTTP client connections inside the HTTP server on our replication server
(which acts as a sort of 'proxy': work on a replication slave of the MySQL
master database and also caches files) to fetch files from the master server.

--
Mike Looijmans

-----Original Message-----
From: Russell Yanofsky <rey4@columbia.edu>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Sunday, June 01, 2003 11:34 PM
Subject: [mod_python] Mod_Python 2.7.8 and threading


>Hi, I'm trying to get write a multithreaded script to run under mod_python
>and apache 1.3 on linux, but the script seems to just freeze up at the point
>of thread creation leaving the http connection open but not doing anything
>else.
>
>I isolated the problem in a little test script:
>
>-- begin mptest.py --
>from mod_python import apache
>
>def handler(req):
>  w = Worker(req)
>  req.write("Starting thread...\n")
>  w.start()
>  req.write("Joining thread...\n")
>  w.join()
>  req.write("Done.\n")
>  return apache.OK
>
>import threading
>
>class Worker(threading.Thread):
>  def __init__(self, req):
>    self.req = req
>    threading.Thread.__init__(self)
>
>  def run(self):
>    self.req.write("  Hello from thread!\n")
>-- end mptest.py --
>
>-- begin .htaccess --
>AddHandler python-program .py
>PythonHandler mptest
>PythonDebug On
>-- end .htaccess --
>
>The script runs fine on a windows box running Apache 2.0.46, Mod_Python
>3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
>1.3.27, Mod_Python 2.7.8, and Python 2.2.2.
>
>The place where it seems to freeze is at w.start(). If you comment that line
>out, it does complete execution. Is this problem a bug in mod_python, or
>have I done something wrong?
>
>- Russ
>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From jorge.lopez at scati.com  Mon Jun  2 10:50:46 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] Troubles of Memory
Message-ID: <5.1.0.14.0.20030602091426.00b344c8@pop3.scati.com>

Hello:
I labor in a company from Spain and I'm having troubles of memory when I 
use mod_python.
I'm get time of remote computer using 'sockets'. Looking at Task Admin of 
Windows, I observe that 'Memory Use' augment every time until my computer die.
Script tries to connect socket and sends a request of time. Then, socket 
receives time.
Code is:

def getTime(host):
     t = "Error"
     try:
         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         s.connect((host,8000))
         s.send('DAMELAAHORA\0')
         t = receive(s,15)
     finally:
         if s != None:
             s.close()
         return t

def receive(socket, size):
     buffer=''
     while size != 0:
         data = socket.recv(size)
         buffer += data
         size = size-len(data)
     return buffer

I write this 'time' in a file XML. Then, page HTML loads this file with 
JavaScript every second.
I use Window 2000 with Apache 2.0.44,  mod_python 3.0.1 and Python 2.2.2.
I wait for your answer
Thanks 



From tohmas.ash at takashi.zzn.com  Mon Jun  2 17:11:34 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 21:47:25 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <7ECE174E8B55C774D902B465F5258462@tohmas.ash.takashi.zzn.com>

Hi, it's again me with some php-to-mod_python problems :)

I use some 'forms' and went a user put some html tags into inputs that
put my html pages in a big mess...

like in my last query, in know how to stop this problem in php with
the fonction 'htmlentities' but I didn't found something like that for
mod_python.

sorry to compare all the time this two scritp language, the cause it's
just my personnal experience...

thanks in advance for your answers

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From dustin at ywlcs.org  Mon Jun  2 11:02:29 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <20030602160229.GJ26794@eleanor.internal.ywlcs.org>

On Mon, Jun 02, 2003 at 05:11:34PM +0200, tohmas ash wrote:
> Hi, it's again me with some php-to-mod_python problems :)
> 
> I use some 'forms' and went a user put some html tags into inputs that
> put my html pages in a big mess...
> 
> like in my last query, in know how to stop this problem in php with
> the fonction 'htmlentities' but I didn't found something like that for
> mod_python.

If you import the Python cgi module (don't use its FormData class!!), it has
a function 'escape' which does what you'd like.

Perhaps this is a candidate for inclusion in mod_python's utils module?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jorge.lopez at scati.com  Tue Jun  3 15:57:27 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] How Free Memory?
Message-ID: <5.1.0.14.0.20030603153817.00b73c08@pop3.scati.com>

Hello:
I try this simple code:

	from mod_python import apache
	def handler(req):
		req.write("Hello World!\n")
		return apache.OK

My Apache's configuration is:

	<Directory "C:/Archivos de programa/Apache Group/Apache2/htdocs/python/">
		AddHandler python-program .py
		PythonHandler mptest
		PythonDebug On
	</Directory>

Well, I open the page 'http://localhost/python/mptest.py' and, of course, I 
see 'Hello World' at screen.
Then, I press down F5 (to update) and hold down the key. I observe 'Admin 
Task' and use of memory is increasing!!!
Process is named 'Apache' always continues growing. I close navigator and 
memory isn't freed.
How can I free this memory?
Thanks.

I use: Apache 2.0.44, Python 2.2.2, mod_python 3.0



From i at mindlace.net  Tue Jun  3 14:38:19 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] PythonTransHandler contract requirements?
Message-ID: <2147483647.1054651099@[10.0.1.2]>

Hello,

I'm trying to implement a transhandler, but I cannot figure out what I am 
supposed to provide apache to allow it to continue handling the request. 
Documentation pointers gratefully accepted.

Given a path, I want to provide a handler for the request.

My simplistic translation handler is like so:

def transhandler(req):
    # First check if we're configured to handle this request.
    checkHandle(req)
    root = req.document_root()
    raw_filename = path.join(root,req.uri)
    raw_fileparts = path.split(raw_filename)
    if path.exists(raw_filename):
       if raw_filename[-3:] != '.py':
           raise apache.SERVER_RETURN, apache.DECLINED
       else:
           req.filename=raw_fileparts[0]
           req.modpath=raw_fileparts[0]
           sys.path.append(raw_filename)
           req.add_handler("PythonHandler",raw_fileparts[1][-3:])
           return apache.OK
    raise apache.SERVER_RETURN, apache.DECLINED

And the handler at the location in question:

def handler(req):
    req.write(body % "Ni!")
    return apache.OK

What I get back is the raw text of the module containing the handler.

~mindlace
http://mindlace.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20030603/ca478f73/attachment.bin
From dustin at ywlcs.org  Tue Jun  3 17:24:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] PythonTransHandler contract requirements?
In-Reply-To: <2147483647.1054651099@[10.0.1.2]>
References: <2147483647.1054651099@[10.0.1.2]>
Message-ID: <20030603222413.GO26794@eleanor.internal.ywlcs.org>

You need to set req.filename to a file that actually exists; since you're
using a PythonHandler, it shouldn't really matter which file you choose, so
it's safe to just point it at your script (__FILE__) or some other
known-present file.

I hope that answers your query.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From tohmas.ash at takashi.zzn.com  Wed Jun  4 10:14:24 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <38B29A4DEB2D9224F8B77AE85C18B633@tohmas.ash.takashi.zzn.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030604/5389ae9a/attachment.htm
From ireneponti at yahoo.com  Thu Jun  5 10:51:29 2003
From: ireneponti at yahoo.com (Irene Ponti)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <20030605175129.58563.qmail@web40703.mail.yahoo.com>

Hi to all

I have to put into a SQL database the content of some
variables coming from an Internet form.

If this variables have some caracters as ' or "
inside, the sql server return an error because the
query is not in correct sintax.

Now in php exist a standard function that add slashes
in front of ' or " in a variable and another that
remove slashes.

Is there in python a function like this?

Thank you.

__________________________________
Do you Yahoo!?
Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
http://calendar.yahoo.com
From mod_python at ols.inorganic.org  Thu Jun  5 11:12:50 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
References: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
Message-ID: <20030605181249.GA3360@nag.inorganic.org>

On Thu, Jun 05, 2003 at 10:51:29AM -0700, Irene Ponti wrote:
> I have to put into a SQL database the content of some
> variables coming from an Internet form.
> 
> If this variables have some caracters as ' or "
> inside, the sql server return an error because the
> query is not in correct sintax.
> 
> Now in php exist a standard function that add slashes
> in front of ' or " in a variable and another that
> remove slashes.
> 
> Is there in python a function like this?

Yes.
No.
Maybe.

How are you accessing the database?

I'm using MySQLdb; I just confirmed that it automatically adds the
proper escapist magic to make this stuff just plain work.

I'm guessing that, depending on the module you're using to access the
database, it may offer the proper mechanisms (much like in Perl's
DBD/DBI, there's a database-specific way to escape strings).

-roy
From tohmas.ash at takashi.zzn.com  Thu Jun  5 22:48:58 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <B27DD9D06BE5D18419F9663B09169141@tohmas.ash.takashi.zzn.com>

I use posgresql and had this problem, I solve it with the 'remplace'
fonction on the string module.
(cf http://python.org/doc/current/lib/module-string.html)

remplace(string "'", "\'")

but maybe there is a more simple fonction for do that...

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From rien at yeepa.org  Thu Jun  5 23:08:14 2003
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <3EDFB13E.8010305@yeepa.org>

Irene Ponti wrote:
 > Now in php exist a standard function that add slashes
 > in front of ' or " in a variable and another that
 > remove slashes.
 >
 >Is there in python a function like this?

Hi Irene,

you have 2 choices:
- string objects in python offers a replace() member.
   so you can write:
	query = """a string with 'quotes' and "doublequotes" """
  	new_query = query.replace('"', '\\"')	

- the re module allows for regular expression searching and replacement
   but this mail is far too short too explain regular expression.
   just have a look at the python manuals (chapter 4.2 of the library
   reference).

Just beware that '\' is a special character inside python string:
"\\'" is totally different from "\'". the first form describe a 
backslash preceding a single quote character, the second describe a 
string which only contains a single quote. idem for double quotes.

 > Thank you.
you're welcome...

-- 
rien

From neel at mediapulse.com  Thu Jun  5 18:59:06 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>

I'm surprised no one has mentioned this yet, but you really need to be
using placeholders with the cursor; otherwise you are writing
exploitable code.

Consider this:

C.execute("SELECT name FROM users WHERE user_id='" +
cgi_submitted_userid + "'")

Now I send my userid as "hackyou'; DELETE FROM users --"

You get:

SELECT name FROM users WHERE user_id='hackyou'; DELETE FROM users --'

Not good (MySQL seperates stmts with ;'s, other DBs do it differently
but we'll leave that as an exersice for the reader.  The -- comments out
the rest of the line).  So you do a addSlash to userid and get:

SELECT name FROM users WHERE user_id='hackyou\'; DELETE FROM users --'

Okay if you're MySQL, MSSQL escapes a ' as ''.  
But we have a good hacker, so he tries userid as "hackyou\'; DELETE FROM
users --"

SELECT name FROM users WHERE user_id='hackyou\\'; DELETE FROM users --'

Doh!

But, if we do this:

C.execute("SELECT name FROM users WHERE
user_id=%s",(cgi_submitted_userid,) )

The query is sent seperatly from the data, so the server can handle
anything it's own way correctly (i.e. MySQL will use a \', MS SQL will
use a '').  And you don't have to think about it.  Simpler and safer.

Mike

From mod_python at ols.inorganic.org  Thu Jun  5 16:18:07 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
Message-ID: <20030605231807.GC6513@nag.inorganic.org>

On Thu, Jun 05, 2003 at 06:59:06PM -0400, Michael C. Neel wrote:
> I'm surprised no one has mentioned this yet, but you really need to be
> using placeholders with the cursor; otherwise you are writing
> exploitable code.
> 
> Consider this:
> 
> C.execute("SELECT name FROM users WHERE user_id='" +
> cgi_submitted_userid + "'")
> 
> Now I send my userid as "hackyou'; DELETE FROM users --"

Back up there.

You don't need to use placeholders with the cursor.
You need to write non-exploitable CGI code.

I really like Perl's "warn me if I actually use anything given to me
from the outside without validating it" option, but hey, we're Python
programmers -- we shouldn't need our hands held.  Validate, validate,
validate.

-roy
From jm at eemsystems.cjb.net  Thu Jun  5 18:37:11 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] segmentation fault
Message-ID: <1054856231.1465.17.camel@eemsystems.com>

I'm using postgresql 7.3 and python from debian unstable.

After varios upgrades my scripts are working bad.

I can not find what happens.


JM



[Thu Jun  5 18:08:21 2003] [notice] child pid 865 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:24 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:24 2003] [notice] child pid 867 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing
mod_python.publisher from None
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] child pid 870 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:29 2003] [notice] child pid 868 exit signal
Segmentation fault (11)

-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From max.zhang at converzal.com  Fri Jun  6 11:07:02 2003
From: max.zhang at converzal.com (max.zhang)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Virtual host and mod_python
Message-ID: <000a01c32bd8$b42882f0$1700a8c0@converzamax>

Hi all,

My Redhat 7.3 +apache1.3 + mod_python2.7

http.conf

<VirtualHost *>
...
</VirtualHost *>
 ...   
<VirtualHost *>
   DocumentRoot /www/htdocs/xy.com/
    ServerName xy.xy.com
    ScriptAlias /cgi-bin/ "/www/htdocs/xy.com/cgi-bin/"

    <Directory "/www/htdocs/xy.com/bulletin">
         AddHandler python-program .py
        PythonHandler mod_python.publisher # this part works well
        PythonDebug On
    </Directory>

    <Directory "/www/htdocs/xy.com/fileman">
         AddHandler python-program .py
        PythonHandler filemanager # this mod_python program can't work .apache display code of filemanager.py in IE client 
        PythonDebug On    
    </Directory>

</VirtualHost>
......

why? The mod_python can't work with virtual host ?
Thanks


Max

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030606/7e64c428/attachment.htm
From dustin at ywlcs.org  Thu Jun  5 22:23:02 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605231807.GC6513@nag.inorganic.org>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
	<20030605231807.GC6513@nag.inorganic.org>
Message-ID: <20030606032302.GB1192@eleanor.internal.ywlcs.org>

> I really like Perl's "warn me if I actually use anything given to me
> from the outside without validating it" option, but hey, we're Python
> programmers -- we shouldn't need our hands held.  Validate, validate,
> validate.

No, we're smart programmers who use reusable code.  Validate. (once)

And someone's already written validation code for each specific DB engine, in
the form of placeholders in cursors.  If you don't want to use placeholders,
at least be sure to write a single, **correct** validation function which you
use religiously.

Perl's taint feature bugs me because it's fairly liberal about what it meants
to "validate", so it's possible to convince Perl that everything's cool while
still leaving yourself open.  That's why we Pythonistas don't like our hands
being held. 'nuf said.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From gre7g-k-modpython.e475ec at wolfhome.com  Thu Jun  5 22:35:39 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <3EDFC5BB.11618.56D33C@localhost>

And now for something completely different...  

I'd like to announce my new mod_python project "Roadkill".

Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
Python code within a .epy webpage to generate dynamic content.  This 
lets you edit your code with your favorite GUI webpage editor instead 
of pasting HTML into your CGI or keeping a bunch of templates that 
your CGI imports.

The homepage for Roadkill can be found at: 
http://roadkill.sourceforge.net/

The documentation is thin and the bugs are most likely numerous (what 
can you expect for version 0.01?), but if any of you would like to 
play with it, I would certainly appreciate comments and bug reports.  
It may not be much to look at now, but hopefully you'll agree that it 
has great potential.

I now return you to your regularly scheduled mailing list.  ;-)

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From mike.looijmans at asml.com  Fri Jun  6 07:53:21 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <01c32bef$ef641e80$926a1e6e@wsasd464>

If you use MySQL, just use the "escape" function:

# Quote a string for the database. Returns "NULL" for empty strings.
def dbescape(val):
    if val:
        return MySQLdb.string_literal(val)
    else:
        return "NULL"



Now you can do:

db.cursor().execute("INSERT INTO foo (foo_id, name) VALUES (%s, %s)" %
(foo_id, dbescape(form['fooname'].value))

You can use this function for anything you like.

Note that this also makes this stuff a lot more secure: Your application must
be able to cope with a user typing
hi" ; DROP DATABASE monty;


For many other database engines, you can used parameterized (a.k.a.
pre-compiled) queries, a query that is sent to the DBMS with some open
parameters which can be re-used several times with varying parameters. This
eliminates query optimization overhead. These may also offer a performance
advantage.

By the way, does MySQL support this? I've done this quite often with many
databases and clients (Delphi for example), and it makes a huge performance
difference.

--
Mike Looijmans
Private: http://www.milosoftware.com

-----Original Message-----
From: Irene Ponti <ireneponti@yahoo.com>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Thursday, June 05, 2003 7:53 PM
Subject: [mod_python] addSlashes() in python, sql cgi question


>Hi to all
>
>I have to put into a SQL database the content of some
>variables coming from an Internet form.
>
>If this variables have some caracters as ' or "
>inside, the sql server return an error because the
>query is not in correct sintax.
>
>Now in php exist a standard function that add slashes
>in front of ' or " in a variable and another that
>remove slashes.
>
>Is there in python a function like this?
>
>Thank you.
>
>__________________________________
>Do you Yahoo!?
>Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
>http://calendar.yahoo.com
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From spyce at symbolist.ru  Fri Jun  6 12:51:29 2003
From: spyce at symbolist.ru (Spyce)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <10513932398.20030606125129@symbolist.ru>

Hello Gre7g,

Friday, June 6, 2003, 8:35:39 AM, you wrote:

GL> And now for something completely different...  

GL> I'd like to announce my new mod_python project "Roadkill".

GL> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
GL> Python code within a .epy webpage to generate dynamic content.  This 
GL> lets you edit your code with your favorite GUI webpage editor instead 
GL> of pasting HTML into your CGI or keeping a bunch of templates that 
GL> your CGI imports.

GL> The homepage for Roadkill can be found at: 
GL> http://roadkill.sourceforge.net/

There is a similar project at http://spyce.sourceforge.net. And, yes,
it uses mod_python too.

-- 
Best regards,
 Spyce                            mailto:spyce@symbolist.ru

From neo at https.ru  Fri Jun  6 13:48:00 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <262700112.20030606134800@https.ru>


  Not "completely" I think... It should be very very similar to the
old well-known "mod_snake", a open project that was closed for some
reason...


> And now for something completely different...  

> I'd like to announce my new mod_python project "Roadkill".

> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> Python code within a .epy webpage to generate dynamic content.  This 
> lets you edit your code with your favorite GUI webpage editor instead 
> of pasting HTML into your CGI or keeping a bunch of templates that 
> your CGI imports.

  This is not true. Not true. Not true.
With my templating system I use exactlty ONE XML-file as a template
for a huge and complex Web-site, and I can edit it with "my favorite"
editor. Did you try to write a big site with your "PHP/ASP"-ish Python
"templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .


> The homepage for Roadkill can be found at: 
> http://roadkill.sourceforge.net/

> The documentation is thin and the bugs are most likely numerous (what 
> can you expect for version 0.01?), but if any of you would like to 
> play with it, I would certainly appreciate comments and bug reports.  
> It may not be much to look at now, but hopefully you'll agree that it 
> has great potential.

> I now return you to your regularly scheduled mailing list.  ;-)

> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
>                       Into each wound, a little salt must fall...
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:31:24 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <262700112.20030606134800@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	 <262700112.20030606134800@https.ru>
Message-ID: <1054895483.3142.24.camel@Presario>

Hi Neo

So where can we look at this great template engine?

Cheers

Conrad

On Fri, 2003-06-06 at 02:48, Neo Eureka wrote:
>   Not "completely" I think... It should be very very similar to the
> old well-known "mod_snake", a open project that was closed for some
> reason...
> 
> 
> > And now for something completely different...  
> 
> > I'd like to announce my new mod_python project "Roadkill".
> 
> > Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> > Python code within a .epy webpage to generate dynamic content.  This 
> > lets you edit your code with your favorite GUI webpage editor instead 
> > of pasting HTML into your CGI or keeping a bunch of templates that 
> > your CGI imports.
> 
>   This is not true. Not true. Not true.
> With my templating system I use exactlty ONE XML-file as a template
> for a huge and complex Web-site, and I can edit it with "my favorite"
> editor. Did you try to write a big site with your "PHP/ASP"-ish Python
> "templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .
> 
> 
> > The homepage for Roadkill can be found at: 
> > http://roadkill.sourceforge.net/
> 
> > The documentation is thin and the bugs are most likely numerous (what 
> > can you expect for version 0.01?), but if any of you would like to 
> > play with it, I would certainly appreciate comments and bug reports.  
> > It may not be much to look at now, but hopefully you'll agree that it 
> > has great potential.
> 
> > I now return you to your regularly scheduled mailing list.  ;-)
> 
> > Gre7g.
> 
> > =================================================================
> > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
> >                       Into each wound, a little salt must fall...
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 14:47:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <1054895483.3142.24.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
Message-ID: <466254823.20030606144714@https.ru>


  Hi, Conrad!

> So where can we look at this great template engine?

  In action, you mean? Well, when the site is ready I can give you a
link. Though it is all in Russian, I think it will not confuse you :).
  I did not say that this "engine" is great, I only sad that the
"advertisement" contained many arguable points...


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:54:38 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01
	"Kitten"
In-Reply-To: <466254823.20030606144714@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	<1054895483.3142.24.camel@Presario>
	<466254823.20030606144714@https.ru>
Message-ID: <1054896878.5988.0.camel@Presario>

Hi

In action or in source ;-)

Cheers

On Fri, 2003-06-06 at 03:47, Neo Eureka wrote:
>   Hi, Conrad!
> 
> > So where can we look at this great template engine?
> 
>   In action, you mean? Well, when the site is ready I can give you a
> link. Though it is all in Russian, I think it will not confuse you :).
>   I did not say that this "engine" is great, I only sad that the
> "advertisement" contained many arguable points...
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 15:19:03 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Re[4]:
In-Reply-To: <1054896878.5988.0.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
 <466254823.20030606144714@https.ru> <1054896878.5988.0.camel@Presario>
Message-ID: <858163919.20030606151903@https.ru>


> In action or in source ;-)

  Well, I think about it, but it is still unfinished, I'm considering
how to add some useful functionality to it.
  In the beginning it used DOM to parse XML-templates, but... mmm...
folks, NEVER use DOM if you do not want very slow and memory-consuming
code, so, I've rewritten it all in Python using Expat.

  Of course, I'll send announcement to this list when I have
something that is worth others' attention. 


--- 
Neo Eureka / mailto:neo@https.ru

From neel at mediapulse.com  Fri Jun  6 10:19:54 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6B@johnson.mediapulse.net>

     > Back up there.
     > 
     > You don't need to use placeholders with the cursor.
     > You need to write non-exploitable CGI code.

Actually, using the placeholder is writing non-exploitable CGI code.
It's standard across drivers that support it, and every major DB does
support placeholders.  It's well tested code too, you're more likely to
make an error writing your own validation routine than find one in the
cursor/database server.


     > 
     > I really like Perl's "warn me if I actually use anything 
     > given to me
     > from the outside without validating it" option, but hey, 
     > we're Python
     > programmers -- we shouldn't need our hands held.  
     > Validate, validate,
     > validate.
     > 

This problem lies in the safest of areas, concatataion of strings.  All
the use strict, taint's, etc will still allow this to happen.  It's like
using hidden fields for price information in an online store; there is
no compiler warnings to say that's a bad idea.

Placeholders are safer, faster, and simpler.  Really no reason not to
use them.

Mike

From neel at mediapulse.com  Fri Jun  6 10:30:35 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>

You should post this in the mod_python dev list as well; currenty there
is discussion of mod_psp (python server pages) being folded into
mod_python, and I'm sure your experience in tackling the same issues
would be helpful.

Thanks,
Mike

     > -----Original Message-----
     > From: Gre7g Luterman 
     > [mailto:gre7g-k-modpython.e475ec@wolfhome.com] 
     > Sent: Friday, June 06, 2003 12:36 AM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Announcement: Roadkill version 
     > 0.01 "Kitten"
     > 
     > 
     > And now for something completely different...  
     > 
     > I'd like to announce my new mod_python project "Roadkill".
     > 
     > Roadkill is a Python-language version of PHP/ASP.  It 
     > lets you embed 
     > Python code within a .epy webpage to generate dynamic 
     > content.  This 
     > lets you edit your code with your favorite GUI webpage 
     > editor instead 
     > of pasting HTML into your CGI or keeping a bunch of 
     > templates that 
     > your CGI imports.
     > 
     > The homepage for Roadkill can be found at: 
     > http://roadkill.sourceforge.net/
     > 
     > The documentation is thin and the bugs are most likely 
     > numerous (what 
     > can you expect for version 0.01?), but if any of you 
     > would like to 
     > play with it, I would certainly appreciate comments and 
     > bug reports.  
     > It may not be much to look at now, but hopefully you'll 
     > agree that it 
     > has great potential.
     > 
     > I now return you to your regularly scheduled mailing list.  ;-)
     > 
     > Gre7g.
     > 
     > =================================================================
     > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
     > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
     >                       Into each wound, a little salt must fall...
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From jgardner at jonathangardner.net  Fri Jun  6 07:35:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054856231.1465.17.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
Message-ID: <200306060735.36876.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> I'm using postgresql 7.3 and python from debian unstable.
>
> After varios upgrades my scripts are working bad.
>
> I can not find what happens.
>

Segfaults are always troublesome.

What I used to do in mod_perl was isolate the page or behavior that was giving 
the seg fault. Then I would try and see which version (you're using a version 
control system, right?) introduced the problem. If it wasn't obvious by then, 
I would put various log messages throughout the suspected handler.

Usually that would lead me to one line of code that was giving the problem. At 
least then I can post to the mailing list about what was causing the problem.

I think the same kind of strategy would work for mod_python as well.

Good luck, you have a fun journey ahead of you!

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
SklnZ2tHiMWzTjyEd5hZJ/8=
=Szy2
-----END PGP SIGNATURE-----

From grisha at modpython.org  Fri Jun  6 11:05:03 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>
Message-ID: <20030606110400.N43535-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> You should post this in the mod_python dev list as well; currenty there
> is discussion of mod_psp (python server pages) being folded into
> mod_python

It's not in discussion, this already has happened... :-)

Grisha

From barr at cs.cornell.edu  Fri Jun  6 12:13:57 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606110400.N43535-100000@oldchief.reply.net>
Message-ID: <Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>

>> You should post this in the mod_python dev list as well; currenty there
>> is discussion of mod_psp (python server pages) being folded into
>> mod_python
>
>It's not in discussion, this already has happened... :-)

Dear Grisha,

I wanted to post earlier, but I didn't find the time. I find this
"folding" to be a little troubling. Why not fold Zope into mod_python?
Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
WebWare?
  http://www.zope.org/
  http://spyce.sourceforge.net/
  http://roadkill.sourceforge.net/
  http://draco.boskant.nl/
  http://www.cheetahtemplate.org/
  http://webware.sourceforge.net/
There are many others at:
  http://spyce.sourceforge.net/doc-add_related.html

mod_psp is, I think, the newest of ALL of these projects. Most of the
alternatives above have reasonable user bases. So why has mod_psp been
folded into mod_python? Why not other, similar, projects? Is this an
internal Apache Foundation issue? If so, then I have already mentioned
that I am willing to contribute the Spyce codebase to the AF for
integration with mod_python. But, I'm not sure that's the right solution
either...

I think that mod_python holds an esteemed position now that the project
has decided to go with the Apache Foundation. It has added visibility
and clout. Perhaps, we should consider and plan its development so as to
attract a larger user base.

Should it simply be a pure Python handler, or should it be extended with
more functionality? There is a difference between mod_python
compatability and mod_python inclusion. Should there be a modular
extension and/or installation mechanism or should there be a "folding"
for all willing projects? If mod_python picks one candidate, what will
it mod_python do to the other projects? Will some other projects begin
to fork mod_python as a result? Do we want a duplication of effort of
either the mod_python-type or the mod_psp-type code?

I humbly recommend that mod_python remain pure, and serve as a Python
handler. It does this job very well! I think that what mod_python needs
is the creation and documentation of a standard extension mechanism to
allow for psp/spyce/draco/roadkill/etc. type of extensions. They would
not be included with mod_python, but would involve a simple .rpm (or
whatever) installation. (That's where the standardization helps!) This
will allow projects like Spyce, which works well with FastCGI,
mod_python, CGI, via proxying and even with other webservers (Xitami) to
continue to perform efficiently within Apache and also to broaden the
user base with support for other web platforms.

Thoughts?

All the best,
Rimon.

From jm at eemsystems.cjb.net  Fri Jun  6 12:02:44 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306060735.36876.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
Message-ID: <1054918964.11887.13.camel@eemsystems.com>

the problem is here:***

what is wrong in this code. this is for reading a cookie from brower.

Thanks..

def verificaraut(req, ID):
	import re
	galleta=getCookie(req.headers_in, ID) ******************
	
	if galleta==None:
	     return '0',''
	lista=re.split(":",galleta)
	
	if lista[0]=='0':
		return '0',lista
	if lista[3]<>req.connection.remote_ip:
		return '0',lista
	
	return lista[0], lista

def getCookie(headers_in, key):
    if headers_in.has_key('Cookie'):
        import Cookie
        C = Cookie.SmartCookie(headers_in['Cookie'])
        C.load(headers_in['Cookie'])
        if C.has_key(key):
            return C[key].value
    return None





El vie, 06-06-2003 a las 09:35, Jonathan Gardner escribi?:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> > I'm using postgresql 7.3 and python from debian unstable.
> >
> > After varios upgrades my scripts are working bad.
> >
> > I can not find what happens.
> >
> 
> Segfaults are always troublesome.
> 
> What I used to do in mod_perl was isolate the page or behavior that was giving 
> the seg fault. Then I would try and see which version (you're using a version 
> control system, right?) introduced the problem. If it wasn't obvious by then, 
> I would put various log messages throughout the suspected handler.
> 
> Usually that would lead me to one line of code that was giving the problem. At 
> least then I can post to the mailing list about what was causing the problem.
> 
> I think the same kind of strategy would work for mod_python as well.
> 
> Good luck, you have a fun journey ahead of you!
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
> SklnZ2tHiMWzTjyEd5hZJ/8=
> =Szy2
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From todd at slack.net  Fri Jun  6 13:56:09 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:47:26 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
Message-ID: <20030606135609.B11869@crank.slack.net>

Hello all,

* Rimon Barr <barr@cs.cornell.edu> [2003-06-06 12:19]:

> I wanted to post earlier, but I didn't find the time. I find this
> "folding" to be a little troubling. Why not fold Zope into mod_python?
> Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
> WebWare?

As a recent "I have seen the light" arrival to Python, I have to agree that this is becoming overwhelming - at least for someone wandering into the room and wanting to work with Python/mod_python-type applications.

Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

> I think that mod_python holds an esteemed position now that the project
> has decided to go with the Apache Foundation. It has added visibility
> and clout. Perhaps, we should consider and plan its development so as to
> attract a larger user base.

Very much agree - most arrivals at mod_python are likely perl/php/apache/jakarta users, and Apache status definitely holds clout and "brand recognition" - and likely not just with developers, also managers and similar types.

> Should it simply be a pure Python handler, or should it be extended with
> more functionality? There is a difference between mod_python
> compatability and mod_python inclusion. Should there be a modular
> extension and/or installation mechanism or should there be a "folding"
> for all willing projects? If mod_python picks one candidate, what will

This I'm too new and inexperienced to comment on. I can say it eternally frustrates me that almost every ISP in the world supports mod_php but near-zero mod_python. Hopefully this will improve (someday) with Apache2/MPM or something, but in the short-term this kills mod_(python|perl) community numbers compared to PHP, the quality of those communities being besides the point I think (debatable yes).

Looking forward to what transpires!

-- 

___________________________
toddgrimason*todd@slack.net


From mod_python at ols.inorganic.org  Fri Jun  6 11:16:03 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606135609.B11869@crank.slack.net>
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
Message-ID: <20030606181603.GB8728@nag.inorganic.org>

On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> This I'm too new and inexperienced to comment on. I can say it
> eternally frustrates me that almost every ISP in the world supports
> mod_php but near-zero mod_python. Hopefully this will improve

I'm not tremendously surprised by this, actually.

By way of background, I should note that I've been programming Perl for
about 11 years now, PHP for about two years, and Python for about two
months.  You can guess which one's my favourite (though they're not
exactly interchangeable).

In my experience, it's easier to integrate PHP into a light-weight web
system than, say, Python.  This is both from the installation
perspective (I had to battle mod_python a little to get it to work on my
system) and from the authoring perspective, where PHP is the VisualBasic
of the programming world; it's closer to ASP in its simplicity than
Python is.  I was authoring PHP code within about a day of getting it
installed; I still haven't done anything useful with mod_python, though
I'm working on it. 

Now, mind you, that comes at a cost -- in my experience, it's much more
likely to see brute-force PHP projects that have just amazingly nasty
code (I recently had to put some bugfixes into a 12,000 PHP project and
was ... horrified at some of the practices), and Python almost forces
you to write nice code.  Partially, it's that old OOP concept -- even
after using PHP for about two years, I only realized a few months ago it
had classes -- nobody I talked to ever used them, mentioned them, or
referred to them in any documentation.  

-roy
From todd at slack.net  Fri Jun  6 14:33:10 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606181603.GB8728@nag.inorganic.org>;
	from mod_python@ols.inorganic.org on Fri, Jun 06, 2003 at 11:16:03AM -0700
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
	<20030606181603.GB8728@nag.inorganic.org>
Message-ID: <20030606143310.C11869@crank.slack.net>

* Roy S. Rapoport <mod_python@ols.inorganic.org> [2003-06-06 14:11]:

> On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> > This I'm too new and inexperienced to comment on. I can say it
> > eternally frustrates me that almost every ISP in the world supports
> > mod_php but near-zero mod_python. Hopefully this will improve
> 
> I'm not tremendously surprised by this, actually.

Oh me neither, I said 'frustrates' not 'suprises' :-)

Perhaps a better comparison would be java servlets running in Tomcat or Resin, a java Web App container. Definitely not widely available for low-end ISP accounts, admittedly has the Sun marketing muscle behind it, but seems more focused.

While there are multiple containers (tomcat,resin,jetty,sun-one,etc.), pretty much every app built on them (every?) leverages the java.servlet.* classes and or jsp (built on top of servlets). I guess my point is this lets everyone focus efforts on higher-level frameworks - Struts, Turbine, whatever - extending the base plumbing (classes) when needed, but not inventing the wheel over and over again, which fun as it may be, appears to me to be hindering overall progress of Python on the web and/or mod_python.

31 flavors is great, but when you're wondering "how do I eat ice cream?", 31 choices before starting is a bit intimidating (sorry for the commercial advertisement there).

Am I completely off-base here?


-- 

___________________________
toddgrimason*todd@slack.net


From jack_diederich at email.com  Fri Jun  6 13:55:45 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
    "folding" mod_psp
Message-ID: <20030606185545.18394.qmail@email.com>

From: Todd Grimason <todd@slack.net>
> Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

No one can read all mailing lists, but this has been covered
at length on comp.lang.python.  The general feeling is that
there are a lot of frameworks for a couple reasons:
  * No one has written a killer framework yet
  * Different users have different needs

>From a marketing perspective it sucks because you can't say
python is _this_ excact collection of tools.  But python
is a language and not a framework (and only sometimes a
language coupled with a WWW framework).  No one laments
the variety of C web servers and frameworks.

This is only a problem if you compare python to PHP.  PHP
isn't a language, (or if it is, it is a nasty little hack of
a language) it is a specific framework for web stuff.
I prefer python for web apps because I prefer python for
everything (for a reasonable value of everything).
But python isn't PHP and their goals & capabilities shouldn't
be confused or compared.

-jack
-- 
_______________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From geert at boskant.nl  Fri Jun  6 22:19:15 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <10513932398.20030606125129@symbolist.ru>
Message-ID: <000001c32c68$e6a54e80$1004a8c0@GREETOP>

Spyce wrote:

> GL> And now for something completely different...
> 
> GL> I'd like to announce my new mod_python project "Roadkill".
> 
> GL> Roadkill is a Python-language version of PHP/ASP.  It 
> lets you embed
> GL> Python code within a .epy webpage to generate dynamic 
> content.  This 
> GL> lets you edit your code with your favorite GUI webpage 
> editor instead 
> GL> of pasting HTML into your CGI or keeping a bunch of 
> templates that 
> GL> your CGI imports.
> 
> GL> The homepage for Roadkill can be found at:
> GL> http://roadkill.sourceforge.net/
> 
> There is a similar project at http://spyce.sourceforge.net. 
> And, yes, it uses mod_python too.

And there are numerous other projects out there which are similar or not
so similar. If you check the WebProgramming wiki at python.org, you'll
find some 40 different systems, including one I am responsible for which
I won't mention here because I don't want to do any false advertising.

The situation about Python web frameworks is a bit confusing and I think
there is no "killer app" yet. However, I have a strong personal opinion
that the standard <p> <% print "Hello, world!" %> templating systems
don't cut it. When you create a big dynamic web site, you need something
more powerful and on a much higher abstraction level. Creating a large
site with a traditional ASP system is like writing a GUI word processor
with only a setPixel() call.

Of course I wish the original author of this thread all the best with
his Roadkill project. I would advise to look around and learn from the
many good ideas that are present in the current Python Web frameworks.

Cheers,
Geert

From neel at mediapulse.com  Fri Jun  6 16:51:47 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>

I'll take a moment in this thread to plug Albatross
(http://www.object-craft.com.au/projects/albatross/) as the "killer"
template system for python, or at least a strong contender.  It doesn't
look like PHP, it's far from any perl package; it solves the
template/state problem in a very python way.  Documentation is there,
but it's currently getting a rewrite for clarity (which most agree it
needs).  Docs aside, within a day I had it running with mod_python and
in 3 days extended the framework with a custom tag; and I was also
learning python at the same time.

If you are open to see there might be a better way to do things, you can
find python very helpful.  If you're looking to use the same "perl
logic" or PHP that you always have, python will go against the grain
with you.  It's really not that much different than C programmer moving
to C++; the syntax change is deceptively simple and hide the real
differences.

Mike

From todd at slack.net  Fri Jun  6 17:07:38 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>;
	from neel@mediapulse.com on Fri, Jun 06, 2003 at 04:51:47PM -0400
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606170738.E11869@crank.slack.net>

* Michael C. Neel <neel@mediapulse.com> [2003-06-06 16:55]:

> If you are open to see there might be a better way to do things, you can
> find python very helpful.  If you're looking to use the same "perl
> logic" or PHP that you always have, python will go against the grain
> with you.  It's really not that much different than C programmer moving
> to C++; the syntax change is deceptively simple and hide the real
> differences.

I'm not sure if this was specifically in response to my earlier post, but since I don't think anyone else mentioned PHP, I'm guessing so...

I clouded the issue by mentioning PHP - I only meant to point it out for it's widespread availablity - most definitely not for the language itself or the "PHP way" of doing things. Wishing I never mentioned it! ;-)

I will look into Albatross again, thanks.

-- 

___________________________
toddgrimason*todd@slack.net


From grisha at modpython.org  Fri Jun  6 17:52:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606174027.J48945-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender.

The problem with Albatross for me is the same one with all the others - it
is yet another language to learn:

<al-for iter="name" expr="keys">
    <tr>
         <td><al-value expr="name.value()"></td>
         <td><al-value expr="environ[name.value()]"></td>
    <tr>
</al-for>

This is not Python. Nor is it HTML.

Grisha

From djc at object-craft.com.au  Sat Jun  7 13:27:12 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <m3of1aefe7.fsf@ferret.object-craft.com.au>


> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the
> > "killer" template system for python, or at least a strong
> > contender.
> 
> The problem with Albatross for me is the same one with all the
> others - it is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

That is true.  If you restrict yourself to Python and HTML you are
forced to do something like this:

for name in keys:
    print '<tr>'
    print '  <td>%s</td>' % name
    print '  <td>%s</td>' % environ[name]
    print '<tr>'

That does not look bad until you build a semi-complex application.

You find yourself in the situation where you cannot change the HTML
presentation without refactoring the surrounding Python application
logic.  Likewise you find it next to impossible to change the
application structure without breaking the presentation.  The above
approach leads to the escalating difficulty and cost (in time and/or
money) of enhancements.

The introduction of a mechanism (or third "language") that allows
and/or imposes a clear interface between the presentation and
implementation increases the ability to change one without major
impact on the other.  This is a huge win for applications that will
change over time.

In the world of GUI application development the model-view-controller
approach has proven itself as a mechanism to manage the same
complexity.  It provides a clear separation of the GUI, the business
logic, and the code that glues them together.  Before the adoption of
MVC (and related patterns), applications tended to be an undisciplined
mixture of GUI and application code.  Over time companies that were
not able to enhance or evolve their products could not compete and
went out of business.  The approach to web applications encouraged PHP
(and similar approaches) is reminiscent of GUI application development
before MVC.

The Albatross approach to the "third" language is not perfect.  I am
not sure that any approach to achieving this separation is perfect.
In my opinion, if there was a perfect approach we would not be having
this discussion, we would all just use the perfect approach.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 08:58:14 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <000001c32cc2$2a97e0e0$1004a8c0@GREETOP>

Michael,

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the 
> "killer" template system for python, or at least a strong 
> contender.  It doesn't look like PHP, it's far from any perl 
> package; it solves the template/state problem in a very 
> python way.  Documentation is there, but it's currently 
> getting a rewrite for clarity (which most agree it needs).  
> Docs aside, within a day I had it running with mod_python and 
> in 3 days extended the framework with a custom tag; and I was 
> also learning python at the same time.

what is the template/state problem?

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:19:02 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <000101c32cc5$12687180$1004a8c0@GREETOP>

Dave,

> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> That is true.  If you restrict yourself to Python and HTML 
> you are forced to do something like this:
> 
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'
> 
> That does not look bad until you build a semi-complex application.
> 
> You find yourself in the situation where you cannot change 
> the HTML presentation without refactoring the surrounding 
> Python application logic.  Likewise you find it next to 
> impossible to change the application structure without 
> breaking the presentation.  The above approach leads to the 
> escalating difficulty and cost (in time and/or
> money) of enhancements.
>
> The introduction of a mechanism (or third "language") that 
> allows and/or imposes a clear interface between the 
> presentation and implementation increases the ability to 
> change one without major impact on the other.  This is a huge 
> win for applications that will change over time.

I don't agree with you that banning a 3rd party language implies that
you're stuck with the horrible

<%
	long and tedious python fragment here
%>

style of coding.

Draco tries to solve this problem in a different way, by still using
only Python as the scripting language. This works by dividing your code
in a functional part and a formatting part. The function part is put in
a so-called handler, which resides in a separate file (1 per directory).
The functional code execute the user request and puts all the results in
a dictionary dubbed the interface. This almost always reduces your
formatting code to something like this:
 
<%
    for tr in rows:
        print """
            html formatted string
             """ % tr
%>

The rows variable is set in the handler and contains completely
processed and ready to print data.

Using a special notation:

<%
    for tr in rows:
        print """%%>
            html formatted string
             <%%""" % tr
%>

you can even edit the html format string with your favourite
Dreamweaver/Frontpage/whatever.

The premise on which I've built Draco is that you can't elimiate all
code from the template, but you can minimize it. A possible solution is
to use a different templating language but IMHO this just adds
complexity because you now have two languages (plus html) instead of
one. Because Python is just as easy to learn as any old templating
language I don't see how this helps. Maybe at first Python code is a bit
scary but this should pass quickly.

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:25:57 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
Message-ID: <000201c32cc6$09bddb50$1004a8c0@GREETOP>

Ramon,

> I wanted to post earlier, but I didn't find the time. I find
> this "folding" to be a little troubling. Why not fold Zope 
> into mod_python? Why not Spyce? Why not Roadkill? Why not 
> Draco? Why not Cheetah, or WebWare?
>   http://www.zope.org/
>   http://spyce.sourceforge.net/
>   http://roadkill.sourceforge.net/
>   http://draco.boskant.nl/
>   http://www.cheetahtemplate.org/
>   http://webware.sourceforge.net/
>
> There are many others at:
>   http://spyce.sourceforge.net/doc-add_related.html
 
[...]

> Should it simply be a pure Python handler, or should it be
> extended with more functionality? There is a difference 
> between mod_python compatability and mod_python inclusion. 
> Should there be a modular extension and/or installation 
> mechanism or should there be a "folding" for all willing 
> projects? If mod_python picks one candidate, what will it 
> mod_python do to the other projects? Will some other projects 
> begin to fork mod_python as a result? Do we want a 
> duplication of effort of either the mod_python-type or the 
> mod_psp-type code?

As the author of one of the systems you mention above, I was worried a
bit too when the announcement was made to add PSP to mod_python.
However, my understanding is that the component is implemented as a
mod_python handler so that it is completely optional. I hope that it
remains like this: mod_python as a fast and pure Apache-Python interface
with an optional templating system.

The good thing about this move is that new users will have something to
get started with. On the other hand, a web framework that does a bit
more than the standard ASP stuff is probably much larger in scope than
mod_python, so then it would be like adding mod_python to the framework
instead of the other way around.

> I humbly recommend that mod_python remain pure, and serve as
> a Python handler. It does this job very well! I think that 
> what mod_python needs is the creation and documentation of a 
> standard extension mechanism to allow for 
> psp/spyce/draco/roadkill/etc. type of extensions. They would 
> not be included with mod_python, but would involve a simple .rpm (or
> whatever) installation. (That's where the standardization 
> helps!) This will allow projects like Spyce, which works well 
> with FastCGI, mod_python, CGI, via proxying and even with 
> other webservers (Xitami) to continue to perform efficiently 
> within Apache and also to broaden the user base with support 
> for other web platforms.

It is already quite easy to add an extension to mod_python. Mostly it is
just the definition of the appropriate "PythonHandler" directives. What
would really help IMHO is a good and independent web site describing the
current situation with the many different frameworks that lists and
rates the different options.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 18:46:31 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000101c32cc5$12687180$1004a8c0@GREETOP>
References: <000101c32cc5$12687180$1004a8c0@GREETOP>
Message-ID: <m3of1a9swo.fsf@ferret.object-craft.com.au>


> Dave,

> > > <al-for iter="name" expr="keys">
> > >     <tr>
> > >          <td><al-value expr="name.value()"></td>
> > >          <td><al-value expr="environ[name.value()]"></td>
> > >     <tr>
> > > </al-for>
> > > 
> > > This is not Python. Nor is it HTML.
> > 
> > That is true.  If you restrict yourself to Python and HTML 
> > you are forced to do something like this:
> > 
> > for name in keys:
> >     print '<tr>'
> >     print '  <td>%s</td>' % name
> >     print '  <td>%s</td>' % environ[name]
> >     print '<tr>'

[snip]

> > The introduction of a mechanism (or third "language") that 
> > allows and/or imposes a clear interface between the 
> > presentation and implementation increases the ability to 
> > change one without major impact on the other.  This is a huge 
> > win for applications that will change over time.

> I don't agree with you that banning a 3rd party language implies
> that you're stuck with the horrible
> 
> <%
> 	long and tedious python fragment here
> %>
> 
> style of coding.

You are of course correct.  The <% python code %> construct just makes
it a lot easier to place application code in the wrong place.  That is
not really a criticism of the mechanism, it is a criticism of people
who do that.

Mind you, I could argue that while you have not introduced a third
language, you have introduced a new mechanism.  That was part of the
point I was trying to make.  You need either a new language or a
special mechanism.

> Draco tries to solve this problem in a different way, by still using
> only Python as the scripting language. This works by dividing your
> code in a functional part and a formatting part. The function part
> is put in a so-called handler, which resides in a separate file (1
> per directory).  The functional code execute the user request and
> puts all the results in a dictionary dubbed the interface. This
> almost always reduces your formatting code to something like this:
>  
> <%
>     for tr in rows:
>         print """
>             html formatted string
>              """ % tr
> %>

How is the application namespace made available to the templating?

> The rows variable is set in the handler and contains completely
> processed and ready to print data.
> 
> Using a special notation:
> 
> <%
>     for tr in rows:
>         print """%%>
>             html formatted string
>              <%%""" % tr
> %>

Very sneaky.  I like it.

> The premise on which I've built Draco is that you can't elimiate all
> code from the template, but you can minimize it. A possible solution
> is to use a different templating language but IMHO this just adds
> complexity because you now have two languages (plus html) instead of
> one. Because Python is just as easy to learn as any old templating
> language I don't see how this helps. Maybe at first Python code is a
> bit scary but this should pass quickly.

No argument here.

I have toyed with the idea of experimenting with different templating
mechanisms in Albatross.  The templating is only part of the problem
that Albatross is trying to address.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 11:02:10 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3of1a9swo.fsf@ferret.object-craft.com.au>
Message-ID: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>


> You are of course correct.  The <% python code %> construct 
> just makes it a lot easier to place application code in the 
> wrong place.  That is not really a criticism of the 
> mechanism, it is a criticism of people who do that.

Yes, I agree fully.

> Mind you, I could argue that while you have not introduced a 
> third language, you have introduced a new mechanism.  That 
> was part of the point I was trying to make.  You need either 
> a new language or a special mechanism.

Ok, fair enough.
 
> > reduces your formatting code to something like this:
> >  
> > <%
> >     for tr in rows:
> >         print """
> >             html formatted string
> >              """ % tr
> > %>
> 
> How is the application namespace made available to the templating?

Funny that you should say namespace, because that is the 3rd and last
central concept in Draco ;-) (the others are templates and handlers).
The variables from the "interface" namespace are available as global
variables to all code in templates.

Other namespaces include "session", "user", "cookie", "config" and
"args". All of these have a different meaning and putting variables in
them does different things. Namespaces are _the_ mechanism in Draco to
use for persistency.

> No argument here.
> 
> I have toyed with the idea of experimenting with different 
> templating mechanisms in Albatross.  The templating is only 
> part of the problem that Albatross is trying to address.

Yes, the same goes for Draco here. I've had some requests to support TAL
(OpenTAL) as the templating language, as this is becoming a sort of
de-facto standard. If I get to it one day I will.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 20:23:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
References: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
Message-ID: <m3llwe6vac.fsf@ferret.object-craft.com.au>

>>>>> "Geert" == Geert Jansen <geert@boskant.nl> writes:

>> How is the application namespace made available to the templating?

Geert> Funny that you should say namespace, because that is the 3rd
Geert> and last central concept in Draco ;-) (the others are templates
Geert> and handlers).  The variables from the "interface" namespace
Geert> are available as global variables to all code in templates.

I ask about namespaces as they are central to all of these solutions
that separate presentation from implementation.  The namespace is the
conduit.

Geert> Other namespaces include "session", "user", "cookie", "config"
Geert> and "args". All of these have a different meaning and putting
Geert> variables in them does different things. Namespaces are _the_
Geert> mechanism in Draco to use for persistency.

In Albatross there are only two namespaces; local and global.  This
makes expressions in the template language easier to handle.  Both
namespaces are managed by the execution context.  A new execution
context and local namespace is created for every browser request.
Session values are loaded into and saved from the local namespace by
the toolkit.  Session values are a subset of the values in the local
namespace.

The global namespace for template expressions is set to the globals of
the code that executed the template.  This allows you to do things
like this in a page module (code that handles an application page):

    import os

    def page_display(ctx):
        ctx.run_template('env.html')

And then in the env.html template:

    Path is <al-value expr="os.environ['PATH']">

I have been browsing through the Draco documentation.  It looks like
Draco and Albatross are trying to solve slightly different problems.  

Correct me if I am wrong, but Draco is designed to run via mod_python.
It also seems more narrowly focused than Albatross.  This can be
either a good thing or a bad thing depending upon the problem you are
trying to solve.  If the problem fits within the area that Draco
targets, then Draco will solve more application problems than
Albatross.

Albatross is designed as a set of classes that you can mix and match
to allow many different deployment options.  Currently Request classes
are provided for CGI and mod_python deployment.  It should be
relatively painless to build Request classes for other deployment
platforms (Medusa, SimpleHTTPServer, Twisted).  Just this week someone
sent us 24 lines of code (including blank lines) that allows FastCGI
deployment.

Session management is implemented via a different set of mixin
classes.  This currently allows us to store sessions in a session
server or in the local filesystem.  In the not too distant future we
will probably add a new mixin for keeping sessions in memory for
FastCGI deployed applications.  This will eliminate all of the
pickling overhead.

>> No argument here.
>> 
>> I have toyed with the idea of experimenting with different
>> templating mechanisms in Albatross.  The templating is only part of
>> the problem that Albatross is trying to address.

Geert> Yes, the same goes for Draco here. I've had some requests to
Geert> support TAL (OpenTAL) as the templating language, as this is
Geert> becoming a sort of de-facto standard. If I get to it one day I
Geert> will.

I had a serious look at TAL.  I really like the attribute and tag
level manipulation.  I am convinced that the control flow in TAL is
not a good idea.  Trouble is, I cannot think of anything better for
control flow that is consistent with TAL.

- Dave

-- 
http://www.object-craft.com.au

From matt at pollenation.net  Sat Jun  7 14:05:58 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <1054991158.29991.283.camel@localhost>

On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> template/state problem in a very python way.

I don't want to turn this into an Albatross advocacy session but I
couldn't agree with the above. Albatross is extremely simple to use but
remarkably powerful.

I've spent a while looking through a number of the available frameworks.
They are all pretty good but, to me, Albatross stood out.

> Documentation is there, but it's currently getting a rewrite for clarity (which most agree it
> needs).

I would just like to mention that the Albatross documentation is already
remarkably good, especially for an open source product where the docs
often lag the code (not that commercial docs are any better!). I got a
really good idea about what Albatross could do just by spending an
evening reading. The new docs look even better.

Anyway, enough advocacy.

Cheers, Matt

From matt at pollenation.net  Sat Jun  7 14:26:37 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <1054991158.29991.283.camel@localhost>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
	 <1054991158.29991.283.camel@localhost>
Message-ID: <1054992397.20821.286.camel@localhost>

On Sat, 2003-06-07 at 14:05, Matt Goodall wrote:
> On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> > template/state problem in a very python way.
> 
> I don't want to turn this into an Albatross advocacy session but I
> couldn't agree with the above. Albatross is extremely simple to use but
> remarkably powerful.

Oops, that should have said "couldn't agree _more_ with the above".

- Matt

From rpinder at usc.edu  Sat Jun  7 07:48:35 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030530191059.N36634-100000@oldchief.reply.net>
References: <20030530191059.N36634-100000@oldchief.reply.net>
Message-ID: <3EE1FB43.2020102@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From rpinder at usc.edu  Sat Jun  7 08:25:04 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] Simple 'redirect' question
Message-ID: <3EE203D0.9030407@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From verence at web.de  Sat Jun  7 17:27:49 2003
From: verence at web.de (martin voigt)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] <no subject>
Message-ID: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>

hi *,

how do i use a content handler to send binary data to the client? the write method supports only strings.

thanks in advance,

martin
______________________________________________________________________________
UNICEF bittet um Spenden fur die Kinder im Irak! Hier online an
UNICEF spenden: https://spenden.web.de/unicef/special/?mc=021101

From tree at basistech.com  Sat Jun  7 11:30:17 2003
From: tree at basistech.com (Tom Emerson)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <16098.1289.684252.548084@magrathea.basistech.com>

martin voigt writes:
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Strings of 8-bit bytes: it "just works" as long as you set the
appropriate content-type.

-- 
Tom Emerson                                          Basis Technology Corp.
Software Architect                                 http://www.basistech.com
  "Beware the lollipop of mediocrity: lick it once and you suck forever"
From rpinder at usc.edu  Sat Jun  7 08:36:06 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030607150319.GE1192@eleanor.internal.ywlcs.org>
References: <20030530191059.N36634-100000@oldchief.reply.net>
 <3EE1FB43.2020102@usc.edu> <20030607150319.GE1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE20666.5010900@usc.edu>

Thanks Dustin,

So you define  HTTP_MOVED_TEMPORARILY  to be the string constant of the 
actual url ??

Thanks
r

Dustin Mitchell wrote:

>On Sat, Jun 07, 2003 at 07:48:35AM -0700, rpinder wrote:
>  
>
>>Rather than load up the end of my python script with html, how can I 
>>redirect the users browser out of the script, and to an html file 
>>located in another directory within my htdocs directory structure ??
>>    
>>
>
>Send a "Location" header and return HTTP code 302, a.k.a.
>
>  return apache.HTTP_MOVED_TEMPORARILY
>
>or
>
>  raise apache.SERVER_RETURN, apache.HTTP_MOVED_TEMPORARILY
>
>Dustin
>
>  
>

From i at mindlace.net  Sat Jun  7 11:46:51 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions
 vs.	"folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
References: <20030606174027.J48945-100000@oldchief.reply.net>
 <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <2147483647.1054986411@[10.0.1.2]>

--On 7 Saturday, June 2003 13:27 +1000 Dave Cole 
<djc@object-craft.com.au> wrote:

> That is true.  If you restrict yourself to Python and HTML you are
> forced to do something like this:
>
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'

That's certainly not the only other possible approach. I think PyMeld 
is the beginning of a better solution. It gives an example almost 
exactly like the one above at <http://www.entrian.com/PyMeld/>

My only problem with it is its repitition of id tags in successive 
nodes, but that's fixable - the important part, the very pythonic 
object model it gives you for the nodes of the page you care about- is 
there.

This is obviously not a state solution or any of the rest of the things 
Albatross helps you with.

~mindlace               GPG Key: http://mindlace.net/public_key
http://mindlace.net                          Enough is a feast.
From dustin at ywlcs.org  Sat Jun  7 14:14:19 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <20030607191418.GG1192@eleanor.internal.ywlcs.org>

On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> hi *,
> 
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Python holds arbitrary binary data in strings.  So you can do, e.g.,

data = open("my.gif", "r").read()
req.content_type = 'image/gif'
req.send_http_header()
req.write(data)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From neel at mediapulse.com  Sat Jun  7 19:17:20 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>

I suppose it's all a matter of taste really, to me the problem with the
PHP-like methods is there is no seperation of logic from design; or the
method doesn't lend itself well to it.  I'm willing to learn some
special tags if I know all real the python code is in a .py file and the
html in a .html file.

Mike

     > The problem with Albatross for me is the same one with 
     > all the others - it
     > is yet another language to learn:
     > 
     > <al-for iter="name" expr="keys">
     >     <tr>
     >          <td><al-value expr="name.value()"></td>
     >          <td><al-value expr="environ[name.value()]"></td>
     >     <tr>
     > </al-for>
     > 
     > This is not Python. Nor is it HTML.
     > 
     > Grisha
     > 
     > 

From neel at mediapulse.com  Sat Jun  7 19:22:32 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>

     > what is the template/state problem?
     > 
     > Cheers,
     > Geert

The bane of my existance as a web programmer.  I need a template system
that works well with the output from design tools like Dreamweave so I
don't find myself spending hours vi'ng design tags to get it to work in
the app.

The other is the web is a stateless application.  The web browser and
server treat ever click as a completely separate action, and has no
knoweldge of what came before.  That's left as an exercise of the
programmer.  Tools like Albatross that provide me with a base
appliaction that appears stateful to me while behind the scenes coping
with the reality of the web let me focus on the "cool" parts of the
application.

Mike

From verence at web.de  Sun Jun  8 01:56:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
	<20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE27BA7.7010405@web.de>

Dustin Mitchell wrote:

> On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> 
>>hi *,
>>
>>how do i use a content handler to send binary data to the client? the write method supports only strings.
> 
> 
> Python holds arbitrary binary data in strings.  So you can do, e.g.,
> 
> data = open("my.gif", "r").read()
> req.content_type = 'image/gif'
> req.send_http_header()
> req.write(data)
> 
> Dustin
> 
thanks, shame on my, never tried the simplest one... :)

greets

From andy at nervebox.com  Sat Jun  7 22:35:33 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] PYTHONPATH question
Message-ID: <3680743.1055039733708.JavaMail.SYSTEM@chango>

I'm new to [mod_]python and I'm having trouble with PYTHONPATH.  
When I import MySQLdb using the interactive command line,it works fine.  When I import MySQLdb into a module called by mod_python, I get this: 

ImportError: No module named MySQLdb

I've tried setting the PYTHONPATH environment var in httpd.conf using the Apache directive SetEnv, but still no good.

What am I missing?  Does mod_python run python modules as the Apache user?  If so, what's the best way to set the value of PYTHONPATH?

 - thanks in advance,
 - andy 
      
      
      
    
From grisha at modpython.org  Sat Jun  7 22:39:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <20030607223735.H69064-100000@oldchief.reply.net>



On Sat, 7 Jun 2003, Dustin Mitchell wrote:

> req.send_http_header()

in mod_python 3.x this is a noop - in httpd 2.0 you don't have control
over when the headers go out - they will be sent just before the first
byte of output.

Grisha

From jgardner at jonathangardner.net  Sat Jun  7 22:11:44 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054918964.11887.13.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
	<200306060735.36876.jgardner@jonathangardner.net>
	<1054918964.11887.13.camel@eemsystems.com>
Message-ID: <200306072211.45891.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 10:02, Julio Mendoza wrote:
> the problem is here:***
>
> what is wrong in this code. this is for reading a cookie from brower.
>
> Thanks..
>
> def verificaraut(req, ID):
> 	import re
> 	galleta=getCookie(req.headers_in, ID) ******************
>
> 	if galleta==None:
> 	     return '0',''
> 	lista=re.split(":",galleta)
>
> 	if lista[0]=='0':
> 		return '0',lista
> 	if lista[3]<>req.connection.remote_ip:
> 		return '0',lista
>
> 	return lista[0], lista
>
> def getCookie(headers_in, key):
>     if headers_in.has_key('Cookie'):
>         import Cookie
>         C = Cookie.SmartCookie(headers_in['Cookie'])
>         C.load(headers_in['Cookie'])
>         if C.has_key(key):
>             return C[key].value
>     return None
>

What line in getCookie is giving you the problem?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
KBAjmIpvSI1xVJJxAUPDyLM=
=Kjlg
-----END PGP SIGNATURE-----


From jgardner at jonathangardner.net  Sat Jun  7 22:31:53 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <200306072231.54572.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 13:19, Geert Jansen wrote:
> The situation about Python web frameworks is a bit confusing and I think
> there is no "killer app" yet. However, I have a strong personal opinion
> that the standard <p> <% print "Hello, world!" %> templating systems
> don't cut it. When you create a big dynamic web site, you need something
> more powerful and on a much higher abstraction level. Creating a large
> site with a traditional ASP system is like writing a GUI word processor
> with only a setPixel() call.
>

Let's make the killer app, right here, right now. I am building the 
framework for my sites, and a commercial project. I know that I want to use 
mod_python because there are so many benefits to it, even above perl.

What would you suggest, within the limitations of current HTTP technology?

Some ideas I came up with are as follows. Let's discuss -- be honest about 
the ideas. You add your own.

- - Forms. It seems nice to have the code that processes the form input right 
next to the code that makes the form HTML code. This screams "put it all in 
a class!" So I came up with a few classes that should be subclassed:
	- Text input
	- Int input
	- Float input
	- Zip Code input
	... etc ...

You can do the same with the other form elements -- select, checkboxes, and 
radio buttons.

- - Groups of form elements. Sometimes I want a group of elements that go 
together. Example: Login box (name/email, password, submit), address 
(line1, line2, city, state, zip, phone) and cc info (cc #, address, name, 
etc..) I thought of having a class that does the whole thing together. You 
give it some namespace, and it puts its element in that namespace in the 
args. For instanc, if you have an address group of elements, and you give 
it the namespace "fred", then the args come back as fred.line1, fred.line2, 
fred.city, fred.state, fred.whatever.

- - Permanent and temporary sessions. Every website uses cookies for only one 
thing - sessions. We should have this built in by default. Some pages have 
it turned on, some pages won't need it and have it turned off. What happens 
is when the guy visits a page that needs a session, it sets the session 
cookie, or gets the existing one. Then it goes to the database and grabs 
the associated data, and it unserializes the data into a python object. 
Tada - you have a session. It also does some rudimentary checking to see if 
the browser has cookies turned on, redirecting them to another page if they 
do not.

- - Keeping HTML totall separate from the code is a very good idea. 
Unfortunately, it makes things like loops or iterations (like listing some 
results) difficult. I believe the best way around this is to allow some 
python code, in its pure python form, in the page somehow. However, this 
should be extremely light and only when necessary. Is there anyway around 
this?

- - Database connection. This is something that is really important, even 
though it isn't part of the web server per se. I believe that DB-API (and 
perl DBI) just doesn't cut it because it is too low-level. There are so 
many better ways to do things. One of the biggest problems I have is 
getting data-driven SQL statement put together without taking 100 lines of 
code to do it. I found that by writing select as a function that takes 
parameters (like columns, from tables, join tables, where parameters, 
etc...) things get a lot easier. I believe we should build a system that 
has this in there.

- - Code-generated HTML. Every once in a while, we need to build our HTML 
elements manually in the code, putting every argument in precisely. This is 
annoying, and the code is always ugly. What I do is use a function that 
does it all for me. Example:
	html.select("state", (... list of states...)) -> A select list of states
	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
class="big_link") -> a link with properly formatted arguments and all.

If we can agree on what we REALLY want, and if we take advantage of Python, 
expecially the things that make it so much more specialer than perl and 
Java, I think we can come up with THE KILLER SOLUTION. How about that for a 
project name? TKS?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4spJWgwF3QvpWNwRAp9hAJ9R/eXSdhIJ/4g0x0mYOeWEMD6qhwCfZOVv
HJD8G8mUY8fNeyW50PlMEeM=
=nfz+
-----END PGP SIGNATURE-----


From etienne at cs.vu.nl  Sun Jun  8 12:59:35 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
 <200306072231.54572.jgardner@jonathangardner.net>
Message-ID: <Pine.GSO.4.53.0306081250050.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Jonathan Gardner wrote:
> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that I want to use
<snip>

Hi Jonathan,

Many of the suggestions you make have already been implemented by someone
in one form or the other. My two cents is that you don't need to go out
and re-do the entire killer app, but you have the luxury of picking and
choosing between the various web application frameworks that exists for
Python. Many frameworks are modular enough to mix and match.

So spend some time playing with existing frameworks and you will most
likely find most of you requirements already fulfilled in one way or the
other.

When I did the same, I came up with:
Quixote + Medusa
with the option of mod_python replacing Medusa if necessary for
performance issues or Apache integration in future,
and the option of PyMeld supplementing the Quixote Templates if ever
necessary. But for now the Quixote Template idea is a joy to use.

For persistence I use a RDF-inspired layer on top of a SQL basis. (and
because Medusa is single-threaded I simply use sqlite as the database.
Simple and quick)


Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From etienne at cs.vu.nl  Sun Jun  8 13:01:43 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 21:47:27 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
 mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
Message-ID: <Pine.GSO.4.53.0306081259550.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Michael C. Neel wrote:
> The other is the web is a stateless application.  The web browser and
> server treat ever click as a completely separate action, and has no
> knoweldge of what came before.  That's left as an exercise of the
> programmer.  Tools like Albatross that provide me with a base
> appliaction that appears stateful to me while behind the scenes coping
> with the reality of the web let me focus on the "cool" parts of the
> application.

An alternative is to drink the REST magic Kool-Aid and go with the
statelessness as a feature and not a problem... ;-)

Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From geert at boskant.nl  Sun Jun  8 17:35:13 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <000001c32dd3$8dce4200$1001a8c0@GREETOP>

Hi Johathan,

> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that 
> I want to use 
> mod_python because there are so many benefits to it, even above perl.

A lot of good ideas, but I agree with other posters that most of them
are present in the current web application solutions.

> What would you suggest, within the limitations of current
> HTTP technology?
> 
> Some ideas I came up with are as follows. Let's discuss -- be
> honest about 
> the ideas. You add your own.
> 
> - - Forms. It seems nice to have the code that processes the
> form input right 
> next to the code that makes the form HTML code. This screams 
> "put it all in 
> a class!" So I came up with a few classes that should be subclassed:
> 	- Text input
> 	- Int input
> 	- Float input
> 	- Zip Code input
> 	... etc ...

Draco has this. It provides the following classes: Field, StringField,
AsciiField, IntField, FloatField, EnumField.
 
> - - Groups of form elements. Sometimes I want a group of
> elements that go 
> together. Example: Login box (name/email, password, submit), address 
> (line1, line2, city, state, zip, phone) and cc info (cc #, 
> address, name, 
> etc..) I thought of having a class that does the whole thing 
> together. You 
> give it some namespace, and it puts its element in that 
> namespace in the 
> args. For instanc, if you have an address group of elements, 
> and you give 
> it the namespace "fred", then the args come back as 
> fred.line1, fred.line2, 
> fred.city, fred.state, fred.whatever.

Draco has a Form class that does this. You add Field (sub)classes to it
in the constructor, and then call parse() on a namespace (usually, the
http GET/POST) namespace). The result is a new namespace with your
parsed args, or a FormError exception on error.

> - - Permanent and temporary sessions. Every website uses
> cookies for only one 
> thing - sessions. We should have this built in by default. 
> Some pages have 
> it turned on, some pages won't need it and have it turned 
> off. What happens 
> is when the guy visits a page that needs a session, it sets 
> the session 
> cookie, or gets the existing one. Then it goes to the 
> database and grabs 
> the associated data, and it unserializes the data into a 
> python object. 
> Tada - you have a session. It also does some rudimentary 
> checking to see if 
> the browser has cookies turned on, redirecting them to 
> another page if they 
> do not.

Again, Draco has this, except that sessions are always enabled, not only
for specific pages. Any variables assigned to the "session" namespace
are automatically put in a db table that is bound to the current session
via a session-id (either stored in a cookie or from the URL or both).
The namespace is typed, you can put in any object that can be pickled.

Additionaly, there is the "user" namespace, containing variables bound
to the current user (if the session is logged-in), "application",
"server"  namespaces, etc.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like 
> listing some 
> results) difficult. I believe the best way around this is to 
> allow some 
> python code, in its pure python form, in the page somehow. 
> However, this 
> should be extremely light and only when necessary. Is there 
> anyway around 
> this?

I agree with you completely. My preference is also to use a pure form of
Python for loops, conditionals, etc. Another option that is used by
Albatross and Zope is that you have a 3rd language in the form of extra
tags.

> - - Database connection. This is something that is really
> important, even 
> though it isn't part of the web server per se. I believe that 
> DB-API (and 
> perl DBI) just doesn't cut it because it is too low-level. 
> There are so 
> many better ways to do things. One of the biggest problems I have is 
> getting data-driven SQL statement put together without taking 
> 100 lines of 
> code to do it. I found that by writing select as a function 
> that takes 
> parameters (like columns, from tables, join tables, where parameters, 
> etc...) things get a lot easier. I believe we should build a 
> system that 
> has this in there.

I think that a db-api should be part of the core of any web framework.
Draco implements a "database" object that provides access to the system
database (database that Draco itself uses too for session data, etc).
This object implements methods to get new cursors, open transactions,
etc. An object oriented, namespace like API for
querying/adding/modifying tables and records should be available too. I
have this but it's rather immature so I did not yet add it to Draco.

> - - Code-generated HTML. Every once in a while, we need to
> build our HTML 
> elements manually in the code, putting every argument in 
> precisely. This is 
> annoying, and the code is always ugly. What I do is use a 
> function that 
> does it all for me. Example:
> 	html.select("state", (... list of states...)) -> A 
> select list of states
> 	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
> class="big_link") -> a link with properly formatted arguments and all

I'm not a big fan of these because generating html from code makes the
separation of the job of the web designer and the programmer more
difficult. Draco implements "tag rewriting" that transparently plugs
back form variables into the html. This at least alleviates the problem
because the html can be pure, and doesn't need any code for form
feedback.

> If we can agree on what we REALLY want, and if we take
> advantage of Python, 
> expecially the things that make it so much more specialer 
> than perl and 
> Java, I think we can come up with THE KILLER SOLUTION. How 
> about that for a 
> project name? TKS?

Without too much shameless self promotion I think that Draco is pretty
close to a killer web application framework. It just needs some more
developers and users to see how it performs for a broad audience and to
improve it accordingly. I am willing to do concessions to make it better
and more accepted. My time is very limited at the moment, however.

Cheers,
Geert

From dustin at ywlcs.org  Sun Jun  8 11:29:18 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
References: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
Message-ID: <20030608162918.GI1192@eleanor.internal.ywlcs.org>

Let's take a step back and look at what we're doing here.

We're trying to invent the perfect solution to everyone's problems.  Now, any
of us that have done any appreciable amount of web development know that
there is an enormous variety in the tasks that are out there.  No single
solution is going to hack it for every problem.  Personally, I use Zope, PHP,
mod_python with publisher, mod_python directly, Python CGI, and occasionally
the Python interpreter and GNU make.  Every task calls for different tools.

If you want to design a killer app, take all of the "I like this feature" and
"$PRODUCT has that" that you see here, generalize completely, and build a
framework into which each can be plugged on an as-needed basis.

What you'll end up with will be Apache with mod_python, though perhaps with a
little bit more pluggability on mod_python's part.  Right now, that's where
we should be focusing our attention.  What are the paradigms under which you
wish your web server would invoke your scripts?  How can the Python-facing
end of mod_python be structured to support that paradigm?

My $0.05

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jm at eemsystems.cjb.net  Sun Jun  8 11:40:07 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306072211.45891.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
	 <1054918964.11887.13.camel@eemsystems.com>
	 <200306072211.45891.jgardner@jonathangardner.net>
Message-ID: <1055090407.949.6.camel@eemsystems.com>

thanks,  I change it to:

def _getCookie(headers_in, key):
	if headers_in.has_key('Cookie'):
		import Cookie
		C = Cookie.SimpleCookie(headers_in['Cookie'])
		if C.has_key(key):
		    return C[key].value
		else:
			return None
	return None


and all is working fine.

El dom, 08-06-2003 a las 00:11, Jonathan Gardner escribi?:

> >
> > def getCookie(headers_in, key):
> >     if headers_in.has_key('Cookie'):
> >         import Cookie
> >         C = Cookie.SmartCookie(headers_in['Cookie'])
> >         C.load(headers_in['Cookie'])
> >         if C.has_key(key):
> >             return C[key].value
> >     return None
> >
> 
> What line in getCookie is giving you the problem?
> 
> - -- 
> Jonathan Gardner
> jgardner@jonathangardner.net
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
> KBAjmIpvSI1xVJJxAUPDyLM=
> =Kjlg
> -----END PGP SIGNATURE-----
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 11:24:33 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <3EE31CF1.11381.D637E22@localhost>

> - - Permanent and temporary sessions. Every website uses cookies for
> only one thing - sessions. We should have this built in by default.

Personally, I prefer to pass a variable SID around with each link and 
form.  Yeah, it's not as convenient as a cookie, but at least you 
don't have to worry about cookies being enabled.  Plus, it is 
available on the first page load and it is compatible with CGI's I 
wrote before getting into mod_python, where it was too tricky to 
modify headers to set one.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like listing
> some results) difficult. I believe the best way around this is to
> allow some python code, in its pure python form, in the page somehow.
> However, this should be extremely light and only when necessary. Is
> there anyway around this? 

When I code with templates, I use the following syntax in my HTML to 
bury loops:

<!-- var: BlockName --> ( text to be repeated ) <!-- /var -->

My template class can also handle <!-- /var (VarName) --> which 
doesn't affect operation, but it can make the HTML easier to decypher 
when you stack these.

I embed variables in the traditional way:

%(VarName)s

And then to do the loop in Python, I do something like:

Block = T["BlockName"]
while Condition:
  T["VarName"] = "value"
  T.Add()

print T

To conditionally remove a block:

if Condition:
  T["BlockName"]

Lastly, I bury constants in my HTML with:

<!-- var: VarName="value" -->

And access it with:

VarName = T["VarName"]

Of course, none of this is ground breaking.  I'm sure a million 
programmers have made a similar tool as well.  However, if anyone 
would like a copy of my class, just drop me a note.

I thought about putting it up as a project on SourceForge, but after 
embarassing myself so with RoadKill since I didn't realize spyce 
existed, I'm a tad hesitant.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From dustin at ywlcs.org  Sun Jun  8 12:39:17 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE31CF1.11381.D637E22@localhost>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
Message-ID: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> > - - Permanent and temporary sessions. Every website uses cookies for
> > only one thing - sessions. We should have this built in by default.
> 
> Personally, I prefer to pass a variable SID around with each link and 
> form.  Yeah, it's not as convenient as a cookie, but at least you 
> don't have to worry about cookies being enabled.  Plus, it is 
> available on the first page load and it is compatible with CGI's I 
> wrote before getting into mod_python, where it was too tricky to 
> modify headers to set one.

And it's less secure.  If I hand someone a link like

  http://www.yoursite.com/SID=209354634

Then get them to log in (and thus initiate that session), then I can hijack
their session by using the same URL.  At least with cookies it's much harder
to get someone to install a cookie for a foreign site on their browser.

Be careful!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From verence at web.de  Sun Jun  8 20:17:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE37DB3.8060401@web.de>

Dustin Mitchell wrote:
> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> 
>>>- - Permanent and temporary sessions. Every website uses cookies for
>>>only one thing - sessions. We should have this built in by default.
>>
>>Personally, I prefer to pass a variable SID around with each link and 
>>form.  Yeah, it's not as convenient as a cookie, but at least you 
>>don't have to worry about cookies being enabled.  Plus, it is 
>>available on the first page load and it is compatible with CGI's I 
>>wrote before getting into mod_python, where it was too tricky to 
>>modify headers to set one.
> 
> 
> And it's less secure.  If I hand someone a link like
> 
>   http://www.yoursite.com/SID=209354634
> 
> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.
> 
> Be careful!
> 
> Dustin
> 
hi,

this common problem was solved very often, one way is to recalculate the 
SID for every response you send back according to the SID you got from 
the request (and keep track of the SIDs during a session). a much easier 
way is to maintain a pool of SIDs actually beeing used and throw away 
the unused ones (after a session timeout), wether with a scheduled 
thread or a check everytime a SID arrives from a client. in fact, this 
mechanism most java servlet engines use (wether they store the id in a 
cookie or as a parameter). and it only seem that cookies are more 
secure, it is easy to fake them. this session thingy is (from my pov) a 
real security bottleneck, so i just can repeat your words...

be carful... :)

greets


From andy at nervebox.com  Sun Jun  8 14:39:54 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] python to javascript lib
Message-ID: <1834236.1055097594608.JavaMail.SYSTEM@chango>

This group seem like the folks who would know about this.

Is there a Python lib or module that will translate python data structures into javascript and vice-versa?  Some implememtations of WDDX do this and it's sooo handy.

If there isn't one, I'll write one and share it.  But if there is one, it would save me a lot 
of time. :)

 - thanks,
 - andy c
      
      
      
    
From barr at cs.cornell.edu  Sun Jun  8 15:34:00 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <20030608162918.GI1192@eleanor.internal.ywlcs.org>
Message-ID: <Pine.LNX.4.44.0306081454200.12610-100000@pompom.cs.cornell.edu>

Hi Dustin,

I agree. And, let me follow up on that by expounding on an earlier
suggestion that I made... I think that mod_python should focus on
building a standard extension mechanism rather than begin folding
"killer" features such as mod_psp. This will mature the entire Python
web community.

What I mean by standard extension mechanism is to define something
similar to the Linux Standard Base project, albeit much smaller in
scope. mod_python needs a configuration file/directory for extensions
with a specific location. It needs a versioning mechanism, a way to find
the Python interpretter, some scratch disk space (for caching, or
whatever a plugin needs), etc. It needs a simple extension namespace and
registry (i.e. files in some directory) to find out what other modules
are available, or perhaps an RPM (or Windows registry) naming
convention... little details that allow for automated installation and
configuration across multiple platforms and configurations. They really
are just little details, but they can make the difference to a new user
between perceiving the project as a hackish solution versus a polished
one.

This is the major advantage that PHP has - it just plugs in to Apache.
And that's why ISPs just plug it in! It would be nice if mod_python just
plugged into Apache, and then Spyce/Draco/WebWare/etc just plugged into
mod_python to form a working Python web-serving system. Ideally, I think
it should be a two RPM installation, or just two setup executables on
Windows. This this exactly the situation with Apache/PHP/Pear and it
works well.

On the API front, I think that mod_python needs to make threaded output
more efficient, and possibly support output buffering. Currently, I'm
performing hacks in Spyce for both of these, and they could be
implemented more efficiently inside mod_python (and in C) with
substantial performance gains on the output path. Other frameworks would
benefit from this as well.

In general, the concern that I have with the "folding" of mod_psp into
mod_python is two fold. First, it may integrate with mod_python via APIs
that would otherwise have been exposed and have benefitted all the
Python-based web projects. Secondly, it may become the defacto standard,
no matter how it compares with other tools for a specific task, simply
because of its tighter integration and automatic inclusion. It will be
seen as a standard, and it will stifle the creation of useful tools in
the space. PHP, for example, has recognized this problem, and has
created PEAR. Perl did the same with CPAN.

We don't need to have something as extensive, but it would be nice to
have a basic extensible Python-based web infrastructure of some kind,
and mod_python is the place to do it, since it is now part of the Apache
Foundation and therefore a central member of the Python web community.

My two cents,
Rimon.

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

>Let's take a step back and look at what we're doing here.
>
>We're trying to invent the perfect solution to everyone's problems.  Now, any
>of us that have done any appreciable amount of web development know that
>there is an enormous variety in the tasks that are out there.  No single
>solution is going to hack it for every problem.  Personally, I use Zope, PHP,
>mod_python with publisher, mod_python directly, Python CGI, and occasionally
>the Python interpreter and GNU make.  Every task calls for different tools.
>
>If you want to design a killer app, take all of the "I like this feature" and
>"$PRODUCT has that" that you see here, generalize completely, and build a
>framework into which each can be plugged on an as-needed basis.
>
>What you'll end up with will be Apache with mod_python, though perhaps with a
>little bit more pluggability on mod_python's part.  Right now, that's where
>we should be focusing our attention.  What are the paradigms under which you
>wish your web server would invoke your scripts?  How can the Python-facing
>end of mod_python be structured to support that paradigm?
>
>My $0.05
>
>Dustin
>
>

From davidf at sjsoft.com  Sun Jun  8 22:11:16 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE37DB3.8060401@web.de>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org> <3EE37DB3.8060401@web.de>
Message-ID: <3EE39864.6020602@sjsoft.com>

verence wrote:

> Dustin Mitchell wrote:
>
>> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
>>
>>>> - - Permanent and temporary sessions. Every website uses cookies for
>>>> only one thing - sessions. We should have this built in by default.
>>>
>>>
>>> Personally, I prefer to pass a variable SID around with each link 
>>> and form. Yeah, it's not as convenient as a cookie, but at least you 
>>> don't have to worry about cookies being enabled. Plus, it is 
>>> available on the first page load and it is compatible with CGI's I 
>>> wrote before getting into mod_python, where it was too tricky to 
>>> modify headers to set one.
>>
>>
>>
>> And it's less secure. If I hand someone a link like
>>
>> http://www.yoursite.com/SID=209354634
>>
>> Then get them to log in (and thus initiate that session), then I can 
>> hijack
>> their session by using the same URL. At least with cookies it's much 
>> harder
>> to get someone to install a cookie for a foreign site on their browser.
>>
>> Be careful!
>>
>> Dustin
>>
> hi,
>
> this common problem was solved very often, one way is to recalculate 
> the SID for every response you send back according to the SID you got 
> from the request (and keep track of the SIDs during a session). a much 
> easier way is to maintain a pool of SIDs actually beeing used and 
> throw away the unused ones (after a session timeout), wether with a 
> scheduled thread or a check everytime a SID arrives from a client. in 
> fact, this mechanism most java servlet engines use (wether they store 
> the id in a cookie or as a parameter). and it only seem that cookies 
> are more secure, it is easy to fake them. this session thingy is (from 
> my pov) a real security bottleneck, so i just can repeat your words...
>
> be carful... :)
>
> greets 

Actually what needs to be ensured is that the SID is secure.
We have a system where we use cookies, and the SID is a md5 hash of the 
timestamp, username, password, and a secret string. That way it can't be 
forged and we can keep track of sessions based on timestamp.

David

From barr at cs.cornell.edu  Sun Jun  8 16:18:07 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606164118.16841.qmail@email.com>
Message-ID: <Pine.LNX.4.44.0306081556500.12961-100000@pompom.cs.cornell.edu>

Dear Jack,

>Holy Cross Posting Batman!
>I'm just replying to the proper forum (python-dev@apache)

I feel that this topic involves more than the just the mod_python
development list. It involves also the developers that use mod_python to
create Python frameworks based on mod_python, and also the users of
those systems. I selected only a few frameworks that I have posted to
before, and that I know are rather mature projects. You are free to
address your replies as you please.

>No need to freak out.  Per the original discussions of psp it will be
>seperate enough so you can use the psp stuff in a regular CGI or even
>to generate text offline altogether.

Then why the integration? It seems like it should operate just like
WebWare, Zope, Spyce and the rest: as one possible framework that you
could place on top of the mod_python base. Futhermore, my concern is not
with the generality of mod_psp, but rather with the generality of
mod_python.

>This would lend it to being generic enough that the same hooks it uses
>could be used by any other templating engine. IMO the reason psp was
>folded into mod_python and not something else is just that the guy who
>did psp was willing to put in some time and many people (mostly noobs)
>expect a php-alike with thier mod_whatever.

Installing two rpms instead of one is not a big deal, and is not a valid
reason to combine the development. PHP and Pear are seperate installs,
for example. Furthermore, Spyce and many other systems work perfectly
against the exposed mod_python API. Therefore, all the "integration
work" that you speak of has been done by others as well. Unless, of
course, there is some unexposed mod_python functionality that mod_psp is
using...

There is no performance disadvantage from this modular approach. In
fact, it is this modular approach that has made Apache popular, that has
lead to the success of Python, Perl, PHP and many other systems. People
like to plug in components. But, for that you need a component
infrastructure, and you need to resist the urge to tack on quick fixes
or integrate with this or that project to get another neat feature.
Rather, you want to create an open platform that allows others to easily
create their own extensions.

>So it solved a couple minor problems without adding any new ones. No
>big deal or conspiracy here.

The concern is not about conspiracy, but on the effect of the inclusion.
The inclusion of mod_psp, excludes other frameworks, because it becomes
the defacto standard through an arbitrary linkage to mod_python rather
than through its independent merits. It thereby stifles the progress and
interest in other solutions unnecessarily.

All the best,
Rimon.


From barr at cs.cornell.edu  Sun Jun  8 16:43:50 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <000201c32cc6$09bddb50$1004a8c0@GREETOP>
Message-ID: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>

Hi Geert,

>As the author of one of the systems you mention above, I was worried a
>bit too when the announcement was made to add PSP to mod_python.
>However, my understanding is that the component is implemented as a
>mod_python handler so that it is completely optional. I hope that it
>remains like this: mod_python as a fast and pure Apache-Python interface
>with an optional templating system.

As you are no-doubt aware, I am also an author of one of these systems:
Spyce. :) I well-aware of how to interface with mod_python. I've built
an abstraction layer underneath Spyce that allows it to operate
efficiently with mod_python and also with FastCGI, the Xitami web
server, CGI and as a web proxy.

>The good thing about this move is that new users will have something to
>get started with. On the other hand, a web framework that does a bit
>more than the standard ASP stuff is probably much larger in scope than
>mod_python, so then it would be like adding mod_python to the framework
>instead of the other way around.

I see the benefits as well. My concern is that the automatic inclusion
of mod_psp will have two effects. First, it will become a "good enough"
standard and users will not bother to look at other possibilities, which
are quite good and creative, and certainly more mature than mod_psp at
this point. I put up a web page, for example:
  http://spyce.sourceforge.net/doc-add_related.html
so that users will be able to see all the interesting things that people
are doing, and be able to select the tools that are most appropriate for
their needs. I, for example, think that I've contributed to the
community with spyce modules, spyce lambdas and spyce active tags. If
you're interested, then have a look at:
  http://spyce.sourceforge.net/doc-mod.html
  http://spyce.sourceforge.net/doc-lang_lambda.html
  http://spyce.sourceforge.net/doc-tag.html
I also recognize the value in the design of CherryPy, of WebWare, of
Draco, etc. I've learned interesting things from looking at each of
these systems, and I hope that their development continues to introduce
more useful concepts.

My second concern regarding the inclusion of mod_psp is that it will end
up being a much larger codebase than mod_python, and will influence the
focus of the project from being a platform (i.e. infrastructure) for
Python-based Apache integration to being a project like Spyce and others
that are focussed on the language issues or application frameworks.
These two goals can be kept separate, but then why merge the two
projects?

Good boundaries make for good design, because short-cuts are not
possible. You, I and all other developers (and the users of our systems)
that use the mod_python infrastructure to operate within Apache have an
interest in ensuring that mod_python remains open and focussed on that
small, but most important goal: infrastructure. As a developer that uses
mod_python, I think that the most important next steps are performance
and configuration issues, not a handler for a new Python-web language.
Are there any technical merits for merging mod_psp with mod_python?

My two cents,
Rimon.

On Sat, 7 Jun 2003, Geert Jansen wrote:

>Ramon,
>
>> I wanted to post earlier, but I didn't find the time. I find
>> this "folding" to be a little troubling. Why not fold Zope
>> into mod_python? Why not Spyce? Why not Roadkill? Why not
>> Draco? Why not Cheetah, or WebWare?
>>   http://www.zope.org/
>>   http://spyce.sourceforge.net/
>>   http://roadkill.sourceforge.net/
>>   http://draco.boskant.nl/
>>   http://www.cheetahtemplate.org/
>>   http://webware.sourceforge.net/
>>
>> There are many others at:
>>   http://spyce.sourceforge.net/doc-add_related.html
>
>[...]
>
>> Should it simply be a pure Python handler, or should it be
>> extended with more functionality? There is a difference
>> between mod_python compatability and mod_python inclusion.
>> Should there be a modular extension and/or installation
>> mechanism or should there be a "folding" for all willing
>> projects? If mod_python picks one candidate, what will it
>> mod_python do to the other projects? Will some other projects
>> begin to fork mod_python as a result? Do we want a
>> duplication of effort of either the mod_python-type or the
>> mod_psp-type code?
>
>> I humbly recommend that mod_python remain pure, and serve as
>> a Python handler. It does this job very well! I think that
>> what mod_python needs is the creation and documentation of a
>> standard extension mechanism to allow for
>> psp/spyce/draco/roadkill/etc. type of extensions. They would
>> not be included with mod_python, but would involve a simple .rpm (or
>> whatever) installation. (That's where the standardization
>> helps!) This will allow projects like Spyce, which works well
>> with FastCGI, mod_python, CGI, via proxying and even with
>> other webservers (Xitami) to continue to perform efficiently
>> within Apache and also to broaden the user base with support
>> for other web platforms.
>
>It is already quite easy to add an extension to mod_python. Mostly it is
>just the definition of the appropriate "PythonHandler" directives. What
>would really help IMHO is a good and independent web site describing the
>current situation with the many different frameworks that lists and
>rates the different options.
>
>Cheers,
>Geert

From gstein at lyra.org  Sun Jun  8 14:13:27 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
Message-ID: <20030608211327.GH19908@lyra.org>

I do all of my templating using my ezt.py module. It has no algorithmic
constructs in it at all. It simply renders data that the Python app has
provided to it. It has simple iteration and simple control flow, but no
variable assignment, method invocation, etc. In fact, it really only has
about six basic directives. I've used it with success in ViewCVS, edna,
SubWiki, and some internal apps at the ASF and at home.

I think the latest version of it is part of the SubWiki project, so you can
fetch it right out of the SVN repository:

  http://svn.webdav.org/repos/projects/subwiki/trunk/lib/ezt.py

I find the module makes for a nice separation between logic and rendering.

Yes, this is a bit of advocacy :-), but I'm not asking for any change. Just
pointing out a module that I think can help people...

Cheers,
-g

On Sat, Jun 07, 2003 at 07:17:20PM -0400, Michael C. Neel wrote:
> I suppose it's all a matter of taste really, to me the problem with the
> PHP-like methods is there is no seperation of logic from design; or the
> method doesn't lend itself well to it.  I'm willing to learn some
> special tags if I know all real the python code is in a .py file and the
> html in a .html file.
> 
> Mike
> 
>      > The problem with Albatross for me is the same one with 
>      > all the others - it
>      > is yet another language to learn:
>      > 
>      > <al-for iter="name" expr="keys">
>      >     <tr>
>      >          <td><al-value expr="name.value()"></td>
>      >          <td><al-value expr="environ[name.value()]"></td>
>      >     <tr>
>      > </al-for>
>      > 
>      > This is not Python. Nor is it HTML.
>      > 
>      > Grisha
>      > 
>      > 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 15:43:12 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <3EE31CF1.11381.D637E22@localhost>
Message-ID: <3EE35990.2860.E504CF8@localhost>

> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.

I suppose I didn't mention it, but I do test the remote IP address 
against the IP address recorded in the session pickle.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

         I want to be the master of time and space, a living god,
                            ...and then I'd like to visit Europe.
From sterling at bumblebury.com  Sun Jun  8 18:00:06 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
Message-ID: <1055109606.1603.18.camel@hasele>

Ok, I'll bite.

> I see the benefits as well. My concern is that the automatic inclusion
> of mod_psp will have two effects. First, it will become a "good enough"
> standard and users will not bother to look at other possibilities, which
> are quite good and creative, and certainly more mature than mod_psp at
> this point. I put up a web page, for example:

I think you make the opposite point right here.  If PSP is "good
enough," then why should they investigate other options?  I'm not going
to say anything bad about the other systems, I like some of them, others
less: they all have their advantages and their different approaches,
such diversity is imho a good thing.  However, the goal of mod_python,
as I understand it, is to be the best toolkit for developing web
applications with Python.  It is a pretty common request to embed python
code within HTML, if we can find a solution that is "good enough," I
think that's an admirable achievement.

PSP's integration with mod_python does not preclude the usage of spyce
or any of these other systems.  In fact, I happen to use cheetah for
some of my sites, I think its a superb product.  It just provides users
with a simple, fast system that works "out of the box."  That's never a
bad thing.

> 
> My second concern regarding the inclusion of mod_psp is that it will end
> up being a much larger codebase than mod_python, and will influence the
> focus of the project from being a platform (i.e. infrastructure) for
> Python-based Apache integration to being a project like Spyce and others
> that are focussed on the language issues or application frameworks.
> These two goals can be kept separate, but then why merge the two
> projects?
> 
> Good boundaries make for good design, because short-cuts are not
> possible. You, I and all other developers (and the users of our systems)
> that use the mod_python infrastructure to operate within Apache have an
> interest in ensuring that mod_python remains open and focussed on that
> small, but most important goal: infrastructure. As a developer that uses
> mod_python, I think that the most important next steps are performance
> and configuration issues, not a handler for a new Python-web language.
> Are there any technical merits for merging mod_psp with mod_python?
> 

Good boundaries make for good design.  

PSP is a python handler, distributed with mod_python.  There is a clear
boundary between the two pieces of code.  I can see your political
reasoning for not including PSP, but what is your technical reason?  The
other systems will not be technically disadvantaged in anyway, and psp 
certainly doesn't muddy things up from a technical perspective.

Good Fences Make Good Neighbors,

Sterling

-- 
Good judgement comes from experience, and experience comes from 
bad judgement. 
    - Fred Brooks
From dustin at ywlcs.org  Sun Jun  8 19:15:04 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE35990.2860.E504CF8@localhost>
References: <3EE31CF1.11381.D637E22@localhost>
	<3EE35990.2860.E504CF8@localhost>
Message-ID: <20030609001504.GK1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > Then get them to log in (and thus initiate that session), then I can hijack
> > their session by using the same URL.  At least with cookies it's much harder
> > to get someone to install a cookie for a foreign site on their browser.
> 
> I suppose I didn't mention it, but I do test the remote IP address 
> against the IP address recorded in the session pickle.

That can cause trouble for people behind multiple, layer-4 switched caches..
the remote IP will be different for different requests..

That's rare, but it does happen.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From grisha at modpython.org  Sun Jun  8 23:36:08 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:28 2004
Subject: Cookies [was: [mod_python] Announcement: Roadkill version 0.01
 "Kitten"]
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <20030608233011.G83392-100000@oldchief.reply.net>


Just as a sidenote to this discussion -

It is surprising how little decent info is available about them. By far
the best description of everything relating to cookies from history to
issues with them and why they are needed is in this paper:

"HTTP Cookies: Standards, Privacy, and Politics" by David M. Kristol

http://arxiv.org/abs/cs.SE/0105018

Grisha

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), then I can hijack
> > > their session by using the same URL.  At least with cookies it's much harder
> > > to get someone to install a cookie for a foreign site on their browser.
> >
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
>
> That can cause trouble for people behind multiple, layer-4 switched caches..
> the remote IP will be different for different requests..
>
> That's rare, but it does happen.
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org/djmitche@alumni.uchicago.edu
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Sun Jun  8 22:46:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Write your own appserver in mod_python!
Message-ID: <200306082246.58019.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I had no idea that there were so many mature app servers in mod_python. I 
feel humbled.

I'll admit, I wrote my own, and I think it has a catchy name -- PyT. I'll be 
releasing it soon enough. This makes me one of the 500 others who have 
written their own appserver for mod_python. I don't mind that at all. 
Secretly, I wish mine will become the next JSP or PHP, but I won't hold my 
breath, because I know all of you do too.

The real strength of python is that anyone can write their own stuff without 
too much effort. And no matter what their design decisions, the language 
seems to get out of the way. It comfortably molds itself into the image you 
want it to mold into, without losing its integrity or comprising its 
features. It seems perl, with its infinite complexity, actually ended up 
being "there's only a few ways you can actually do it right", while Python, 
with it rigid yet simple syntax, has rendered into "everyone does it their 
own way, and guess what, it all works!"

I take back my earlier comment about writing the killer solution. Maybe we 
shouldn't write the killer solution and label it as such. Maybe we should 
emphasize that mod_python is the basis for a million killer solutions! 
Maybe we should advertise that if you don't like what you see, you can 
write your own in a weekend!

I think the mod_python community should be a community of diverse opinions 
and diverser projects. Topics like "What is the best way to handle a 
session?" will always yield at least five different answers. At least we 
will be able to cherry pick the one that works best for our situaton, and 
coding it up will be no problem. Let's encourage others to explore the app 
server solution space, and to share their creations with our community. And 
then at the end of the day, let's go back to the hawking of our wares in 
the bazaar.

So, in that regard, I do fear PSP becoming integrated into the mod_python 
project. I fear because it will give the wrong impression to the newbies. 
It will give them the impression that there is only one good app server out 
there, and PSP is it. This is incredibly false, and dangerously deceptive. 
I would hope that somewhere on the introduction page to mod_python, it says 
in big bold letters:

	PSP is an example of what *you* can do with mod_python. If you like it, use
	it. If anything is disagreeable, go check out these other projects. If
	nothing suits your tastes, *write* *your* *own* and share it with us!

So, here's a toast to the future of mod_python! Choice is king, diversity 
our strength, and community our spirit!

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5B9OWgwF3QvpWNwRAp16AJ4o+9vEfCq68rrIw7z701+RckCgHwCgteew
5CkyolwOdQXU9L4FyO4JrxM=
=OZey
-----END PGP SIGNATURE-----


From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 00:13:02 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <3EE3D10E.32463.10230FF7@localhost>

> I take back my earlier comment about writing the killer solution.
> Maybe we shouldn't write the killer solution and label it as such.
> Maybe we should emphasize that mod_python is the basis for a million
> killer solutions! Maybe we should advertise that if you don't like
> what you see, you can write your own in a weekend! 

The more I think about "a killer app" the more disenchanted I am with 
the idea.

In my mind, Python's greatest strength is that every time I got to a 
point in my code where I said, "Now, if only I had a gizmo that did 
X", that's when I noticed that Python COMES WITH a gizmo that does X 
built in.

Also, while I have the floor, I want to say that I did look around at 
some of the frameworks when I started writing CGI's in Python and I 
found them... (pardon me while I grope for a word)... intimidating.  
I found myself saying "but all I want is a class that does X!".

Now, I'll be the first to admit that I did end up adding X, Y, and Z 
to my code, not just X, so it's very possible that some of the 
frameworks that I found scary because they did X, Y, and Z instead of 
just X would have been a perfect fit, but the fact remains that they 
were more intimidating and felt like they had more commitment 
required than just including one of the standard libs.  (Sorry for 
the run-on, it's late.)

Anyhow, my point is, that if we broke down the problem into small 
bite size pieces, and tossed out the classes as separate .py files, 
perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
dread of commitment to a framework.  They could just say, "I need a 
class to handle sessions."  Boom!  "I need a class that makes HTML 
from templates."  Pow!  "I want to handle my form inputs as class 
members."   Biff!  (Couldn't resist.)

These functions are really separate, so why should anyone have to 
take the whole cow if they just want a hamburger?

Perhaps we should take all these competing frameworks, split them 
into their classes, and make them all a-la-carte?  A session from 
here... a template from there...  That would let us program the way 
we like to (or at least how I like to) by taking just the stuff we 
want and leaving the other stuff behind.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From davidf at sjsoft.com  Mon Jun  9 09:17:54 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <3EE434A2.6080409@sjsoft.com>

Gre7g Luterman wrote:

>Perhaps we should take all these competing frameworks, split them 
>into their classes, and make them all a-la-carte?  A session from 
>here... a template from there...  That would let us program the way 
>we like to (or at least how I like to) by taking just the stuff we 
>want and leaving the other stuff behind.
>
In fact, maybe what we need is just a nice "map" to all the frameworks, 
explaining each one's focus, and giving a short code example for each...
That would be a first step to helping people find what they need

David

From fitnah55 at hotmail.com  Mon Jun  9 04:16:17 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] 
	need working fix for 'import site' aka 'ImportError' aka
	'make_obcallback' error
Message-ID: <000101c32e5f$66cb0da0$18c0c20a@computer>


i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


From neo at https.ru  Mon Jun  9 12:29:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <1603919375.20030609122914@https.ru>


> The more I think about "a killer app" the more disenchanted I am with 
> the idea.

> In my mind, Python's greatest strength is that every time I got to a 
> point in my code where I said, "Now, if only I had a gizmo that did 
> X", that's when I noticed that Python COMES WITH a gizmo that does X 
> built in.

> Also, while I have the floor, I want to say that I did look around at 
> some of the frameworks when I started writing CGI's in Python and I 
> found them... (pardon me while I grope for a word)... intimidating.  
> I found myself saying "but all I want is a class that does X!".

> Now, I'll be the first to admit that I did end up adding X, Y, and Z 
> to my code, not just X, so it's very possible that some of the 
> frameworks that I found scary because they did X, Y, and Z instead of 
> just X would have been a perfect fit, but the fact remains that they 
> were more intimidating and felt like they had more commitment 
> required than just including one of the standard libs.  (Sorry for 
> the run-on, it's late.)

> Anyhow, my point is, that if we broke down the problem into small 
> bite size pieces, and tossed out the classes as separate .py files, 
> perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
> dread of commitment to a framework.  They could just say, "I need a 
> class to handle sessions."  Boom!  "I need a class that makes HTML 
> from templates."  Pow!  "I want to handle my form inputs as class 
> members."   Biff!  (Couldn't resist.)

> These functions are really separate, so why should anyone have to 
> take the whole cow if they just want a hamburger?


  Here are very smart ideas. I totally agree with the above.




> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

>         I want to die peacefully in my sleep, like my grandfather
>                   ...not screaming in terror like his passengers.


--- 
Neo Eureka / mailto:neo@https.ru

From neo at https.ru  Mon Jun  9 12:35:41 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
References: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <494306522.20030609123541@https.ru>


> I think the mod_python community should be a community of diverse
> opinions 
> and diverser projects. Topics like "What is the best way to handle a 
> session?" will always yield at least five different answers. At least we 
> will be able to cherry pick the one that works best for our situaton,
> and 
> coding it up will be no problem. Let's encourage others to explore the
> app 
> server solution space, and to share their creations with our community.

> So, in that regard, I do fear PSP becoming integrated into the mod_python 
> project. I fear because it will give the wrong impression to the newbies. 
> It will give them the impression that there is only one good app server out 
> there, and PSP is it. This is incredibly false, and dangerously deceptive. 
> I would hope that somewhere on the introduction page to mod_python, it says 
> in big bold letters:

>         PSP is an example of what *you* can do with mod_python. If you like it, use
>         it. If anything is disagreeable, go check out these other projects. If
>         nothing suits your tastes, *write* *your* *own* and share it with us!


  I just want to wholeheartedly support the authors' opinions!


--- 
Neo Eureka / mailto:neo@https.ru

From geert at boskant.nl  Mon Jun  9 12:45:25 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <000001c32e74$3c794390$1001a8c0@GREETOP>


> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), 
> then I can 
> > > hijack their session by using the same URL.  At least 
> with cookies 
> > > it's much harder to get someone to install a cookie for a foreign 
> > > site on their browser.
> > 
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
> 
> That can cause trouble for people behind multiple, layer-4 
> switched caches.. the remote IP will be different for 
> different requests..
> 
> That's rare, but it does happen.

Something that will cause trouble with this too are on-demand dialing
ISDN modems which usually have a hangup timeout of about 120 seconds. If
the user stays idle for more than two minutes, the modem will hangup,
then redial and get a different IP address.

Geert

From geert at boskant.nl  Mon Jun  9 13:05:41 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055109606.1603.18.camel@hasele>
Message-ID: <000501c32e77$114709c0$1001a8c0@GREETOP>


> PSP is a python handler, distributed with mod_python.  There 
> is a clear boundary between the two pieces of code.  I can 
> see your political reasoning for not including PSP, but what 
> is your technical reason?  The other systems will not be 
> technically disadvantaged in anyway, and psp 
> certainly doesn't muddy things up from a technical perspective.

The fact that mod_psp hasn't proved anything yet while other frameworks
have seems a technical reason to me.

What do you (as the mod_psp author) think of the remarks that have been
made already by two people that a complete web application framework is
much larger in scope than mod_python. This would mean that adding it to
mod_python is like adding mod_python to the framework. At that time can
only hope that the focus of mod_python doesn't shift from being a
general and high performance Python layer for Apache to being the Apache
enablement of mod_psp.

Cheers,
Geert

From sterling at bumblebury.com  Mon Jun  9 10:58:36 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000501c32e77$114709c0$1001a8c0@GREETOP>
References: <000501c32e77$114709c0$1001a8c0@GREETOP>
Message-ID: <1055170715.22155.44.camel@hasele>

On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> > PSP is a python handler, distributed with mod_python.  There 
> > is a clear boundary between the two pieces of code.  I can 
> > see your political reasoning for not including PSP, but what 
> > is your technical reason?  The other systems will not be 
> > technically disadvantaged in anyway, and psp 
> > certainly doesn't muddy things up from a technical perspective.
> 
> The fact that mod_psp hasn't proved anything yet while other frameworks
> have seems a technical reason to me.
> 

That's a reason against bundling?  I can see that's a reason against
bundling PSP, but Rimon is talking about the chastity of mod_python
here.  

And btw, that's an advantage from a bundling perpsective - It doesn't
need to support legacy userbases, so the code itself is very malleable,
as witnessed by some of grisha's recent changes.

> What do you (as the mod_psp author) think of the remarks that have been
> made already by two people that a complete web application framework is
> much larger in scope than mod_python. This would mean that adding it to
> mod_python is like adding mod_python to the framework. At that time can
> only hope that the focus of mod_python doesn't shift from being a
> general and high performance Python layer for Apache to being the Apache
> enablement of mod_psp.
> 

I don't think that focus will switch.

For one thing, Rimon didn't have a problem with the "purity" of
mod_python when he proposed that spyce be integrated, it was only after
that fell through in private mail that he refocused the issue, and
brought it to the mailing lists.

PSP is a very small, very fast alternative, it doesn't preclude you from
using any of the listed solutions.  In fact you can use PSP in
conjunction with any of the solutions listed, or you can even ignore its
existence altogether and use something else, or code directly with
req.write().  There is *zero* performance loss if you choose to use
another option, like spyce.

As for the shift of development focus.  I'm touched Rimon cares so much
about how developers spend their time.  I guess only experience will
tell, but generally I think the people who develop mod_python are
capable of deciding what they want to spend their time on, and what
requires attention at the moment.  We don't need to be put in a crib so
that we don't chew on the electric cords.

If you want to re-invent the wheel, go for it!  Including Python with a
Linux distribution doesn't stop you from using PHP.  PSP is a common
feature request, and it lives as a standard module for the 99% of users
who just want a solution that works, and don't care how efficient '[['
is to type.  That doesn't mean alternatives aren't allowed and
encouraged, they just aren't bundled.

-Sterling

-- 
"C makes it easy to shoot yourself in the foot; C++ makes it harder,  
 but when you do, it blows away your whole leg." 
    - Bjarne Stroustrup
From barr at cs.cornell.edu  Mon Jun  9 13:05:18 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:47:28 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055170715.22155.44.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>

Dear Sterling,

On 9 Jun 2003, Sterling Hughes wrote:

>On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
>> > PSP is a python handler, distributed with mod_python.  There
>> > is a clear boundary between the two pieces of code.  I can
>> > see your political reasoning for not including PSP, but what
>> > is your technical reason?  The other systems will not be
>> > technically disadvantaged in anyway, and psp
>> > certainly doesn't muddy things up from a technical perspective.
>>
>> The fact that mod_psp hasn't proved anything yet while other frameworks
>> have seems a technical reason to me.
>
>That's a reason against bundling?  I can see that's a reason against
>bundling PSP, but Rimon is talking about the chastity of mod_python
>here.

I agree with Geert here, and also with Ian's prior email. PSP has not
proven itself, while other projects have. There are also prior projects
with that name and concept, that are many years older than mod_psp. Does
mod_psp even have any users yet?

>For one thing, Rimon didn't have a problem with the "purity" of
>mod_python when he proposed that spyce be integrated, it was only after
>that fell through in private mail that he refocused the issue, and
>brought it to the mailing lists.

First, please do not get personal. It's not necessary. I'm only trying
to help the OSS community, just like you. And, second, please don't
misquote me. I suggested to you, in that private email, that what you
were doing had similar goals to Spyce. And what I then suggested, to see
whether you were interested, is that you help with the Spyce parser. I
only wanted to combine efforts with you, so that we could build
something bigger and better. I saw that you were working on a C-based
parser for psp, and I asked you whether you were interested in working
on such a parser for the Spyce language. The rationale is that although
the parser does not matter much for performance, because the compiled
files are cached, it would be nice as an option for developers, since
the current Spyce parser is implemented in Python and is relatively
slow. I also, thinking that you work with the Apache Foundation, I
offered to donate Spyce to the AF. Donating to the AF does not mean, in
my mind, merging the Spyce and mod_python projects.

You seem to be attacking me as an individual rather than discussing the
idea. I'm not interested in this. I am only interested in making Python
a more web-friendly language, and I think mod_python is an important
project in this regard. I also don't have a Spyce agenda, as you seem to
imply. It's just a project that I work on, because I like it, and
because I wanted to implement some features that I didn't find in other
systems.

>PSP is a very small, very fast alternative, it doesn't preclude you from
>using any of the listed solutions.  In fact you can use PSP in
>conjunction with any of the solutions listed, or you can even ignore its
>existence altogether and use something else, or code directly with
>req.write().  There is *zero* performance loss if you choose to use
>another option, like spyce.

Ok, but will PSP be any faster than any of the other solutions?
Possibly. Perhaps you are a better designer, and that's great. But, if
it's because of its integration with mod_python, then this means that
there is something missing in the mod_python API, and we should expose
that functionality. I'm concerned that this will not be the focus of
mod_python any longer, just as it was not the focus of PHP. Have you
looked at the performance of PHP -- it took years to get it to where it
is currently, and it's still not great.

>As for the shift of development focus.  I'm touched Rimon cares so much
>about how developers spend their time.

Again with the personal attacks and sarcasm! Please...

>If you want to re-invent the wheel, go for it!  Including Python with a
>Linux distribution doesn't stop you from using PHP.  PSP is a common
>feature request, and it lives as a standard module for the 99% of users
>who just want a solution that works, and don't care how efficient '[['
>is to type.  That doesn't mean alternatives aren't allowed and
>encouraged, they just aren't bundled.

It seems to me, based on everything that is currently out there, that it
is you who are re-inventing the wheel.

BTW, Spyce supports the more common <% syntax as well.

You know, come to think of it... You're making the same bundling
arguments that I've heard used before to extend monopoly positions: it's
good for the user. How would you know what's good for the user without
any mod_psp users? Just a thought..

But, as I said earlier. I'm trying to help the OSS community, as are
you. So good luck, and thank you for your efforts.

All the best,
Rimon.

From sterling at bumblebury.com  Mon Jun  9 14:14:57 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
Message-ID: <1055182496.2853.59.camel@hasele>

On Mon, 2003-06-09 at 13:05, Rimon Barr wrote:
> Dear Sterling,
> 
> On 9 Jun 2003, Sterling Hughes wrote:
> 
> >On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> >> > PSP is a python handler, distributed with mod_python.  There
> >> > is a clear boundary between the two pieces of code.  I can
> >> > see your political reasoning for not including PSP, but what
> >> > is your technical reason?  The other systems will not be
> >> > technically disadvantaged in anyway, and psp
> >> > certainly doesn't muddy things up from a technical perspective.
> >>
> >> The fact that mod_psp hasn't proved anything yet while other frameworks
> >> have seems a technical reason to me.
> >
> >That's a reason against bundling?  I can see that's a reason against
> >bundling PSP, but Rimon is talking about the chastity of mod_python
> >here.
> 
> I agree with Geert here, and also with Ian's prior email. PSP has not
> proven itself, while other projects have. There are also prior projects
> with that name and concept, that are many years older than mod_psp. Does
> mod_psp even have any users yet?
> 

Well, I believe it actually has a few.  But again, I don't see your
point here?  Is your point that PSP is not the right library to bundle
or that no libraries in general should be bundled?  

> >For one thing, Rimon didn't have a problem with the "purity" of
> >mod_python when he proposed that spyce be integrated, it was only after
> >that fell through in private mail that he refocused the issue, and
> >brought it to the mailing lists.
> 
> First, please do not get personal. It's not necessary. I'm only trying
> to help the OSS community, just like you. And, second, please don't

Don't get personal?  This is not a personal attack.  And it is
*certainly* not off-topic.  I was just pointing out that you had
previously suggested the integration of Spyce into the fold.  I'm
pointing out that you might have other motives than the "purity" of
mod_python, and I think that's very relevant to the context of this
discussion.

> misquote me. I suggested to you, in that private email, that what you
> were doing had similar goals to Spyce. And what I then suggested, to see
> whether you were interested, is that you help with the Spyce parser. I
> only wanted to combine efforts with you, so that we could build
> something bigger and better. I saw that you were working on a C-based
> parser for psp, and I asked you whether you were interested in working
> on such a parser for the Spyce language. The rationale is that although
> the parser does not matter much for performance, because the compiled
> files are cached, it would be nice as an option for developers, since
> the current Spyce parser is implemented in Python and is relatively
> slow. I also, thinking that you work with the Apache Foundation, I
> offered to donate Spyce to the AF. Donating to the AF does not mean, in
> my mind, merging the Spyce and mod_python projects.
> 

I can certainly dig up the messages if need be.  It was my understanding
from the messages that you wished to donate your code to the ASF, so it
could be included in mod_python.  Which certainly seems to make more
sense then donating your sources to the ASF, just so that I'm able to
work on them (especially when I never made that an issue).


> You seem to be attacking me as an individual rather than discussing the
> idea. I'm not interested in this. I am only interested in making Python
> a more web-friendly language, and I think mod_python is an important
> project in this regard. I also don't have a Spyce agenda, as you seem to
> imply. It's just a project that I work on, because I like it, and
> because I wanted to implement some features that I didn't find in other
> systems.

I'm not attacking you personally, but its convient to paint it that
way.  Your claim is that you have no spyce agenda, excuse me if I find
that quite hard to swallow.  Especially since out of the many lists you
Cc'ed, spyce really has the most to lose.

What is your point by the way?  From what I read, it seems to me that
your point is: 'Spyce will be adversely affected because people will use
the bundled solution.'[1]  Whenever people start using purity as an
argument in and of itself, its a good sign the issue hasn't been in the
crucible long enough.

If you don't want to bring yourself into the argument, then make some
technical claims against it.  Instead of being the maurder who doesn't
want mod_python to be defiled.  You still haven't explained why:

a) Including PSP disadvantages other solutions from a *technical*
perspective.
b) What is wrong with PSP from a technical perspective?  Have you
encountered any bugs when using PSP?  What do you think can be improved?
c) What problems you've had with mod_python since PSP was integrated

> 
> >PSP is a very small, very fast alternative, it doesn't preclude you from
> >using any of the listed solutions.  In fact you can use PSP in
> >conjunction with any of the solutions listed, or you can even ignore its
> >existence altogether and use something else, or code directly with
> >req.write().  There is *zero* performance loss if you choose to use
> >another option, like spyce.
> 
> Ok, but will PSP be any faster than any of the other solutions?
> Possibly. Perhaps you are a better designer, and that's great. But, if

>From the benchmarks I've seen its much faster. But I didn't make that
claim.  I just claimed it was fast, which is subjective (but i think it
is, so there ;-).  

> it's because of its integration with mod_python, then this means that
> there is something missing in the mod_python API, and we should expose
> that functionality. I'm concerned that this will not be the focus of

It doesn't at all take advantage of the mod_python api in anyway than
any other module does.  PSP is a pure python module, with the parser 
written in C (with flex.)  

> mod_python any longer, just as it was not the focus of PHP. Have you
> looked at the performance of PHP -- it took years to get it to where it
> is currently, and it's still not great.
> 

Have I looked at the performance?  I'm a PHP core developer for god
sakes :)  PHP btw, is a language that has become popular because of its
ability to provide a solution for a broad variety of web problems.

And btw, as for PHP's performance.  Its good enough for Yahoo! :)

> >As for the shift of development focus.  I'm touched Rimon cares so much
> >about how developers spend their time.
> 
> Again with the personal attacks and sarcasm! Please...
> 

Gosh, you're touchy.   I'm not personally attacking you, just pointing
out that your primary concern is probably not how I spend my time.

> >If you want to re-invent the wheel, go for it!  Including Python with a
> >Linux distribution doesn't stop you from using PHP.  PSP is a common
> >feature request, and it lives as a standard module for the 99% of users
> >who just want a solution that works, and don't care how efficient '[['
> >is to type.  That doesn't mean alternatives aren't allowed and
> >encouraged, they just aren't bundled.
> 
> It seems to me, based on everything that is currently out there, that it
> is you who are re-inventing the wheel.
> 

Well, isn't your point that people should reinvent the wheel - that's
how better solutions evolve?

> BTW, Spyce supports the more common <% syntax as well.
> 

I know, I was joking :)

> You know, come to think of it... You're making the same bundling
> arguments that I've heard used before to extend monopoly positions: it's
> good for the user. How would you know what's good for the user without
> any mod_psp users? Just a thought..
> 

Again with the personal attacks and sarcasm! Please... ;-)

Well, I'm not the only one who thinks this way.  But I would think being
a core developer of a web scripting language that powers 12 million
domains might give me a little inkling (how many users does spyce have
btw?).  I also think the fact that grisha thought it was a good idea to
adopt PSP might lend me a bit more credibility.  

But what's your argument here anyway - screw the users, viva la spyce?
;-) 

-Sterling
-- 
"That stuff's easy compared to installing Horde" 
    - Alan Knowles, In response to my applause for creating a LALR 
    parser for PHP.
From matt at pollenation.net  Mon Jun  9 19:39:07 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE434A2.6080409@sjsoft.com>
References: <3EE3D10E.32463.10230FF7@localhost>
	 <3EE434A2.6080409@sjsoft.com>
Message-ID: <1055183947.3960.6.camel@localhost>

I used this to get started, very helpful:

	http://www.python.org/cgi-bin/moinmoin/WebProgramming

- Matt

On Mon, 2003-06-09 at 08:17, David Fraser wrote:
> Gre7g Luterman wrote:
> 
> In fact, maybe what we need is just a nice "map" to all the frameworks, 
> explaining each one's focus, and giving a short code example for each...
> That would be a first step to helping people find what they need
> 
> David
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From tpc at csua.berkeley.edu  Mon Jun  9 11:39:10 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] python print
Message-ID: <20030609105857.C11138-100000@localhost.name>


Hello, I have a script meant to be run from the command line that for each
command line argument, iterates through the characters, returns the value
from a dictionary, and prints out the joined string with no spaces:

<code>
#!/usr/bin/env python

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine'
        }

for argument in sys.argv[1:]:
    print ''.join([dict1[character] for character in argument])
    print '\n'

</code>

I know 'print' and 'echo' are not valid in mod python, and I have tried:

<code>
def convert(numbers):
    for argument in numbers:
        w = ''.join([dict1[character] for character in argument])
        return w
</code>

although 'return' seems to exit after the first character.  I have also
tried:

<code>
x = []
def convert(numbers):
    for argument in numbers:
        x.append([dict1[character] for character in argument])
    return x
</code>

although I get a KeyError.
Is there a mod python alternative to 'print' so I may simply substitute ?

From fitnah55 at hotmail.com  Mon Jun  9 14:44:55 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka 'ImportError'
	aka'make_obcallback' error
In-Reply-To: <000101c32e5f$66cb0da0$18c0c20a@computer>
Message-ID: <000001c32eb7$380f1030$18c0c20a@computer>


this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required
for passwd, so there's no way (even with a completely minimal install)
to
run w/o a python carcass laying around w/o screwing things up a bit one
way
or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From todd at slack.net  Mon Jun  9 14:58:24 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
	<1055182496.2853.59.camel@hasele>
Message-ID: <20030609145824.C17197@crank.slack.net>


Hi,

A bit of 3rd-party arbitration re: spyce/folding/"bundling":

If all *SP-type modules are on equal technical footing regarding access to APIs and integration, this is a completely political/marketing situation. From the bit I've gleaned out of this thread, that is indeed the case.

As an (I believe) relevant comparison, JSP is the "blessed" approach from Sun for java - that has not stopped others from arising, i.e. Velocity, Tapestry, etc., and newer libraries such as JSTL which I believe(?) are the result of good ideas being contributed and then embraced by the community, and "adopted" by the official group (Sun).

Will PSP gain a bit of an (initial) edge in visiblity over other templating modules on mod_python? Most certainly, but the combination of the increased visiblity of this feature "officially" available with mod_python, and the ease and equal technical footing of adding any of many other modules to accomplish this I think is win-win. I'd bet (if I was a betting man) that the number of new people an "official" templating module distributed with mod_python will attract would *increase* the number of users of the other packages as well - Spyce, Cheetah, wt, etc. etc.

Just my opinions as a newcomer here struggling to choose from 31 flavors - and at least this is all debating between a number of good options and not a search for just one elusive "OK" option...

-- 

___________________________
toddgrimason*todd@slack.net


From tpc at csua.berkeley.edu  Mon Jun  9 12:25:02 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] python print
In-Reply-To: <1055185349.10716.30.camel@localhost>
Message-ID: <20030609121231.L11532-100000@localhost.name>


Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
The KeyError is generated when mod python encounters the space when I
submit multiple sequences of numbers, which is why I had the 'for
argument in numbers' which in command line mode delimits arguments but as
a POST seems to break the code.  I could always put a value in dict1
where:

 ' ' : '/n',
 ',' : '/n'

On 9 Jun 2003, Scott Russell wrote:

> On Mon, 2003-06-09 at 14:39, tpc@csua.berkeley.edu wrote:
>
> >Hello, I have a script meant to be run from the command line that
> > for each command line argument, iterates through the characters,
> > returns the value from a dictionary, and prints out the joined
> > string with no spaces:
>
> <snip>
>
> I'm new on the list, but this looks like a python issue, not a
> mod_python issue.  Your middle example should work fine, when you stop
> returning in the middle of it:
>
> def convert(numbers):
>    w = ""
>    for argument in numbers:
>        W += ''.join([dict1[character] for character in argument])
>    return w
>
> Do I not understand the problem?  Note, I wrote this with the assumption
> that you were passing a sequence (list, tuple, dict) of character
> strings, as your second and third examples seem to.  Your original
> "print" code did not make this assumption.
>
> BTW, I would expect you to get keyerrors if you're not validating inputs
> - this code doesn't check for exceptions at all.
>
> - Scott
>
>

From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 13:41:00 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] python print
In-Reply-To: <20030609105857.C11138-100000@localhost.name>
Message-ID: <3EE48E6C.9546.FEFE5B@localhost>

On 9 Jun 2003 at 11:39, tpc@csua.berkeley.edu wrote:

<snipped>

> although 'return' seems to exit after the first character.

You have two options, one is assemble all the text you want to output 
in a single variable:

A = "one"
A += "two"
A += "three"
return A

or use the write statement:

req.write("one")
req.write("two")
req.write("three")

I think you may even be allowed to:

print >> req, "one"
print >> req, "two"
print >> req, "three"

Which is very similar to using the write statement.

Gre7g.Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From jgardner at jonathangardner.net  Mon Jun  9 13:51:05 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] python print
In-Reply-To: <3EE48E6C.9546.FEFE5B@localhost>
References: <3EE48E6C.9546.FEFE5B@localhost>
Message-ID: <200306091351.06895.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:41, Gre7g Luterman wrote:
> I think you may even be allowed to:
>
> print >> req, "one"
> print >> req, "two"
> print >> req, "three"
>
> Which is very similar to using the write statement.
>

If you get tired of print >> req, give this a try:

sys.stdout = req
print "one"
print "two"
print "three"

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5PM5WgwF3QvpWNwRAviBAKDnFOtnyTLCxv0BYwwhD5msPIPRGgCguVeH
SOmHE6OBt5QMTBtQqB7R6Qs=
=7cZI
-----END PGP SIGNATURE-----

From fitnah55 at hotmail.com  Mon Jun  9 17:30:45 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32eb7$380f1030$18c0c20a@computer>
Message-ID: <000001c32ece$6341c060$18c0c20a@computer>


does anyone who actually has apache2/mod_python3 working even read this
list?


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 2:45 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error



this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required for passwd, so there's no way (even with a completely minimal
install) to run w/o a python carcass laying around w/o screwing things
up a bit one way or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From tpc at csua.berkeley.edu  Mon Jun  9 14:37:28 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka
 'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609143523.T12439-100000@localhost.name>


> -----
> 'import site' failed; use -v for traceback
> ImportError: No module named mod_python.apache
> [Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
> mod_python.apache.
> -----
>


I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke in
the first place.

From fitnah55 at hotmail.com  Mon Jun  9 18:26:40 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609143523.T12439-100000@localhost.name>
Message-ID: <000001c32ed6$3279d4b0$18c0c20a@computer>


nothing works!!!

tried reinstalling a couple different ways, no dice



-----Original Message-----
From: tpc@csua.berkeley.edu [mailto:tpc@csua.berkeley.edu] 
Sent: Monday, June 09, 2003 5:37 PM
To: kevin douglas
Cc: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error

I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke
in the first place.

From grisha at modpython.org  Mon Jun  9 18:58:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] python print
In-Reply-To: <200306091351.06895.jgardner@jonathangardner.net>
Message-ID: <20030609185646.S97880-100000@oldchief.reply.net>



On Mon, 9 Jun 2003, Jonathan Gardner wrote:

> If you get tired of print >> req, give this a try:
>
> sys.stdout = req
> print "one"
> print "two"
> print "three"
>

A word of caution - just like chdir(), this is not thread safe since there
is only one stdout per interpreter which could be executing multiple
threads simutaneously.

Grisha

From barr at cs.cornell.edu  Mon Jun  9 19:31:43 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055182496.2853.59.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091428200.29506-100000@glengoyne.cs.cornell.edu>

Dear Sterling,

>Well, I believe it actually has a few.  But again, I don't see your
>point here?  Is your point that PSP is not the right library to bundle
>or that no libraries in general should be bundled?

Both. I'm not sure that PSP is the right library to bundle (if you must
bundle something) because it needs to be measured against a *LOT* of
existing work which seems to be going ignored. See:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming, or
  http://spyce.sourceforge.net/doc-add_related.html
Even the name PSP has been used at least twice already. Why are none of
these, more mature projects being folded into mod_python instead of
developing something new?

However, for reasons stated in previous emails and others stated below,
I think that it would be even better to not include any library, and
simply make it simple to extend mod_python with application frameworks
or languages, by standardizing the Apache Python infrastructure.

>I'm not attacking you personally, but its convient to paint it that
>way.  Your claim is that you have no spyce agenda, excuse me if I find
>that quite hard to swallow.  Especially since out of the many lists you
>Cc'ed, spyce really has the most to lose.

I'm contributing code to the public domain in good will. I don't have an
agenda, and I'm not sure why that's hard to swallow. I wrote the code
for myself, and I found it useful. So, I released it so that others
could benefit too. It's users that win or lose, not Spyce. Nowadays, I
spend some free time maintaining the project, but I am not backed by any
company or foundation. It's not my work or research. I'm not planning to
write a book. It's just a small hobby of mine, and sometimes it's even a
bit of a headache to maintain the uninteresting parts. I'm happy to
share it with any others who are interested. I imagine that your
intentions in writing mod_psp are similar.

>If you don't want to bring yourself into the argument, then make some
>technical claims against it.  Instead of being the maurder who doesn't
>want mod_python to be defiled.  You still haven't explained why:
>
>a) Including PSP disadvantages other solutions from a *technical*
>   perspective.

- PSP will inevitably become bigger than mod_python and mod_python may
start to look like the PHP project did a few years ago before the focus
on Zend and PEAR finally emerged. - mod_python may start developing
special "fast" hooks to the PSP engine, that will not be properly
exposed and tested against other frameworks. - Release deadlines and bug
fixes will be end up being oriented around mod_psp changes, rather than
around fundamental changes to the framework making the versioning of the
framework more complex, and thereby also integration of other frameworks
that are not as closely bound to it as mod_psp. ... etc.

>b) What is wrong with PSP from a technical perspective?  Have you
>   encountered any bugs when using PSP?  What do you think can be improved?

I don't know where to start... How about here:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming ?
mod_psp is quite a late-comer to this space. Spyce is too, actually.
But mod_psp hasn't even scratched the surface compared to some of the
other projects out there. Or, if you're looking for something "simpler",
then there's lots of simple projects too.

I performed an extensive search before starting out on Spyce, and I
implemented Spyce only because I wanted spyce lambda functions, modules,
and active tags. I think they are useful; you told me that you thought
lambdas were cool too. :) I simply didn't see them anywhere else when I
started working on the project.

>c) What problems you've had with mod_python since PSP was integrated

None, but that's also because I haven't used the newest code. You see,
for me there's no need to upgrade, because there haven't been many
significant changes (from the Spyce interface perspective) to the core
framework. I like it when the infrastructure is efficient and stable:
see (b).

>It doesn't at all take advantage of the mod_python api in anyway than
>any other module does.  PSP is a pure python module, with the parser
>written in C (with flex.)

That's quite interesting. So, by your own admission, you don't really
gain any technical benefit from integration? Ok, then what's the good
reason to integrate, technical or otherwise? Is it just because you can,
being a member of the Apache Foundation and all? If it's merely to
attract users through bundling, then that's an abuse, especially since
there are so many other frameworks out there, that are far more mature
than mod_psp. Don't get me wrong... Please do continue developing
mod_psp, or join one of the other efforts. The issue is not that. It's
the folding of the projects.

Why not sideline this entire issue and be inclusive by creating a nice
standard extension mechanism, a repository of mod_python compatible
modules, a prominent placement on the Apache website, etc.? A modular
design, after all, is the design of Apache, and it has been pretty
successful, I think. Have the Apache and the PHP code bases been
"folded" yet? Why not? PHP is the most popular language used within
Apache! The argument here is similar, I believe.

I know that the AF is trying to move away from language specific
extensions, but it would be nice also to have a website for mod_python
that looked like Jakarta, or mod_tcl, or mod_perl. It would help a lot
to attract users, if that is your interest. BTW, the mod_tcl guys
decided to separate mod_tcl from Rivet. mod_perl went one step further
and created a repository of mod_perl compatible modules and also a
section with code library contributed by the user community.

>I'm a PHP core developer for god sakes :) [...]

I sincerely respect your experience as a core mod_php developer and
congratulate you. PHP is a wonderful project and a run-away success. I
hope that your input to the Python web community will be equally
dramatic.

All the best,
Rimon.


From mod_python at mikebell.org  Mon Jun  9 16:54:24 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609235423.GI20628@netvista.mikebell.org>

On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?

Yup, works just fine for me, never had such a problem, with worker or
prefork.
From gnb at itga.com.au  Tue Jun 10 11:10:23 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error 
In-Reply-To: Your message of Mon, 09 Jun 2003 17:30:45 -0400.
Message-ID: <200306100110.LAA01683@lightning.itga.com.au>

>does anyone who actually has apache2/mod_python3 working even read this
>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:15:37 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <200306100110.LAA01683@lightning.itga.com.au>
Message-ID: <000001c32ef6$2e8beb20$18c0c20a@computer>

I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:32:21 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site'
	aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef6$2e8beb20$18c0c20a@computer>
Message-ID: <000001c32ef8$84cb50f0$18c0c20a@computer>

when I do an strace on httpd like it says with that no obCallBack error
in
the faq (a different problem than i am having anyway), there's not even
a
reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:04:43 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import
	site'aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef8$84cb50f0$18c0c20a@computer>
Message-ID: <000001c32efd$0a4ce140$18c0c20a@computer>


if I do an 'apachectl restart' several times, the amount of 'import
site'
errors grows accordingly :p

four restarts and its 7 times... five restarts and its 8 times... six
restarts
and its 9 times:

[Sun Jun 08 19:00:52 2003] [error] make_obcallback: could not import
mod_python.apache.

-----

'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 19:00:52 2003] [notice] SIGHUP received.  Attempting to
restart
[Sun Jun 08 19:00:53 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming normal operations

-----

to make matters worse, it worked once for no reason - and mod_python
just
displayed the 'test' handler as plaintext:

[Sun Jun 08 18:56:32 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming 
normal operations
[Sun Jun 08 18:56:50 2003] [notice] mod_python: (Re)importing module
'test'

now i can't get it to work again and nothing changed between the three
or
four start/restarts..



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:32 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import
site'aka'ImportError'aka'make_obcallback' error


when I do an strace on httpd like it says with that no obCallBack error
in the faq (a different problem than i am having anyway), there's not
even a reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:38:36 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] 
	working fix [FAQ: 'import site' failed; use -v for traceback]
In-Reply-To: <000001c32efd$0a4ce140$18c0c20a@computer>
Message-ID: <000501c32f01$c6600480$18c0c20a@computer>


as stated in the make_obcallback FAQ entry, this is a sys.path
problem...

the main problem (i believe) is that the path that is available at
runtime is not always the same as it was with the previous run of
apache

with a linux distro that requires python as part of the base install
(even
with a minimal install) - the python in /usr is going to supercede
the python in /usr/local even if the path properly includes /usr/lib
and site-packages/mod_python is pointed to properly

what you should do is axe all the python rpm's that you can
(python-base is required for libuser which is required for passwd)
and then take the file list from python-base and manually delete it
(/usr/lib/python2.2 and /usr/bin/python)

this will free up the proper /usr/local/lib/python2.2 to be first in
line in the path

what's confusing is that you link to /usr/local/bin/python2.2 explicitly
to compile mod_python, but it still ends up with /usr/lib/python2.2
as the primary lib source... and even if you get the paths added as the
other FAQ entry states - you're still going to be running the old
site.py from /usr/lib...

and to make matters even worse sometimes it randomly decides to work
even before you axe the default distro install..

:o



kd
From jafo at tummy.com  Mon Jun  9 23:59:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <20030610055927.GB28085@tummy.com>

I've been trying to build a web application system using mod_python, and
I've been running into some weirdness.  Some of it is just sporadic
behavior, some of it seems to be pretty consistent.  Before I get
started, my main development system is running Red Hat 9 with Python
2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
3.0.3.

Basically, I'm building up a package that contains my system.  In it I
have a module which contains my handler:

   AddHandler python-program .html
   PythonHandler jotweb.jotweb_mod_python::handler

Basically, my handler is using SimpleTAL to parse some HTML, which will
result in my code getting called, which will import things from the
jotweb package:

   fileName = path + '.py'
   fp = open(fileName, 'r')
   module = imp.load_source(path, fileName, fp)

So, basically, I am trying to load a module from a specific file.

The first problem I'm seeing is that imports are just weird.  For
example, if I have code which does "import jotweb.input.Request",
unless my __init__.py in jotweb/input includes:

   import Request

I will get an error to the effect that the module object contains no
element "Request".  Of course, from a regular Python program, I can do
"import jotweb.input.Request" just fine either way.

Basically, because of the above, my entire code-base has to be imported
when you do an "import jotweb".

Further, I'm running into weird issues with headers_out.  If from my
jotweb_mod_python.handler code I do:

   req.headers_out.add('key', 'value')

it will properly add the specified header.  And if this code is executed
from the module that is imported as above, it seems to work.  If,
however, in this imported module I do:

   import jotweb
   jotweb.auth.Sessions.processLogin()

where "processLogin()" gets a handle to the request object and does
req.headers_out.add(), the headers aren't showing up in my browser.
HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
same URL that I issued in the GET request, the headers are *NOT* getting
return as far as I can tell (no cookie is getting set, doing "View
Documenat Information" shows not those headers, but if I set headers in
my main mod_python handler, it WILL show it.

I've verified that the call to headers_out.add() is happening by adding
a syslog before it, it's definitely calling that code.

It seems like at some point something is making it so that
headers_out.add() doesn't work any more.  Would pulling the form data
out of the request cause that?  Any thoughts on why the imports seem to
work quite differently on a name-space basis from how they happen from
the interpreter:

   AttributeError: 'module' object has no attribute 'input'

Is there something about being in mod_python that makes it a "toy"
interpreter in some ways, that mean I'm constantly going to be bumping
into weird things?

Thoughts?

Thanks,
Sean
-- 
 I like to be different, so I built a lowercase a-frame house.
                 -- Sean Reifschneider, 2000
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 09:04:12 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609235423.GI20628@netvista.mikebell.org>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
	<20030609235423.GI20628@netvista.mikebell.org>
Message-ID: <3EE582EC.3070901@sjsoft.com>

mod_python@mikebell.org wrote:

>On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
>  
>
>>does anyone who actually has apache2/mod_python3 working even read this
>>list?
>>    
>>
>
>Yup, works just fine for me, never had such a problem, with worker or
>prefork.
>  
>
Works fine for me too.
When I had problems with import site in apache1.3/mod_python2, what I 
did was go and patch the mod_python source code to dump traces of 
variables at various points ... that helped me clean up exactly how it 
worked... to start off, I hardcoded a PythonPath inside mod_python 
because I couldn't work out why it didn't seem to work. Maybe you could 
try a similar approach?

David

From davidf at sjsoft.com  Tue Jun 10 09:12:46 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610055927.GB28085@tummy.com>
References: <20030610055927.GB28085@tummy.com>
Message-ID: <3EE584EE.9090503@sjsoft.com>

Sean Reifschneider wrote:

>I've been trying to build a web application system using mod_python, and
>I've been running into some weirdness.  Some of it is just sporadic
>behavior, some of it seems to be pretty consistent.  Before I get
>started, my main development system is running Red Hat 9 with Python
>2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
>3.0.3.
>
>Basically, I'm building up a package that contains my system.  In it I
>have a module which contains my handler:
>
>   AddHandler python-program .html
>   PythonHandler jotweb.jotweb_mod_python::handler
>
>Basically, my handler is using SimpleTAL to parse some HTML, which will
>result in my code getting called, which will import things from the
>jotweb package:
>
>   fileName = path + '.py'
>   fp = open(fileName, 'r')
>   module = imp.load_source(path, fileName, fp)
>
>So, basically, I am trying to load a module from a specific file.
>  
>
Do you mean you're using this import mechanism when you have the problem 
with jotweb.input.Request below?

>The first problem I'm seeing is that imports are just weird.  For
>example, if I have code which does "import jotweb.input.Request",
>unless my __init__.py in jotweb/input includes:
>
>   import Request
>
Have you tried using __all__ = [Request, ...] in __init__.py ?

>I will get an error to the effect that the module object contains no
>element "Request".  Of course, from a regular Python program, I can do
>"import jotweb.input.Request" just fine either way.
>
>Basically, because of the above, my entire code-base has to be imported
>when you do an "import jotweb".
>
mod_python does have some import hooks to handle things specially, but 
I'm not an expect here, someone else will have to comment...

>Further, I'm running into weird issues with headers_out.  If from my
>jotweb_mod_python.handler code I do:
>
>   req.headers_out.add('key', 'value')
>
>it will properly add the specified header.  And if this code is executed
>from the module that is imported as above, it seems to work.  If,
>however, in this imported module I do:
>
>   import jotweb
>   jotweb.auth.Sessions.processLogin()
>
>where "processLogin()" gets a handle to the request object and does
>req.headers_out.add(), the headers aren't showing up in my browser.
>HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
>same URL that I issued in the GET request, the headers are *NOT* getting
>return as far as I can tell (no cookie is getting set, doing "View
>Documenat Information" shows not those headers, but if I set headers in
>my main mod_python handler, it WILL show it.
>
>I've verified that the call to headers_out.add() is happening by adding
>a syslog before it, it's definitely calling that code.
>
How do you pass the request object into processLogin (it doesn't seem to 
be part of the call)?
It seems like you may be trying to use an old request object or something...

>It seems like at some point something is making it so that
>headers_out.add() doesn't work any more.  Would pulling the form data
>out of the request cause that?  Any thoughts on why the imports seem to
>work quite differently on a name-space basis from how they happen from
>the interpreter:
>
Pulling the form data won't cause it, but writing anything to the 
request will (it automatically outputs the headers as soon as any 
content is written).

>
>   AttributeError: 'module' object has no attribute 'input'
>
>Is there something about being in mod_python that makes it a "toy"
>interpreter in some ways, that mean I'm constantly going to be bumping
>into weird things?
>
No. But it is a bit more complex running a python interpreter inside 
Apache than standalone.

>Thoughts?
>
Hope that helps,

David


From jafo at tummy.com  Tue Jun 10 02:14:22 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE584EE.9090503@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
Message-ID: <20030610081422.GC28085@tummy.com>

On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>Do you mean you're using this import mechanism when you have the problem 
>with jotweb.input.Request below?

I mean that the imp module call is loading a module which then does an
"import jotweb.input".  If in the jotweb I don't have the __init__.py
import all sub-packages or sub-modules, I will get an AttributeError
such as:

  AttributeError: 'module' object has no attribute 'input'

>>  import Request
>Have you tried using __all__ = [Request, ...] in __init__.py ?

I believe I did try that at one point, but it's my understanding that
setting "__all__" only has an impact if you do "from jotweb import *",
which I don't do anywhere.  Also, as I said before, I can import the
code fine outside of mod_python.  "python -c 'import jotweb.input'", for
example...

>mod_python does have some import hooks to handle things specially, but 
>I'm not an expect here, someone else will have to comment...

I wonder if I'm running into something there.  I've tried simplifying it
to:

   include current directory in path
   module = __import__(basename, globals(), locals(), [])
   return sys.path to old layout

that doesn't really seem to help the problem with imports though...

>How do you pass the request object into processLogin (it doesn't seem to 
>be part of the call)?
>It seems like you may be trying to use an old request object or something...

The request object is stored into a module, where other parts of my
system will pick it up when they need either the headers or the request.

I've verified that the id() of the header_out object is the same in the
higher-level and lower-level code.  I'm not calling request.write()
anywhere except at the end of my top-level code, nor am I doing a print
anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
to access the Apache request object, but maybe it's doing a print?

>No. But it is a bit more complex running a python interpreter inside 
>Apache than standalone.

Sure, I understand that, and I'm ok with it being more complicated.  I'm
just not happy about running into sporadic problems where sometimes
things work, sometimes they don't.

For example, *ANY* time I submit a request for a URL via a telnet
connection, I get the headers back:

   guin:jafo$ telnet 127.0.0.1 80
   Trying 127.0.0.1...
   Connected to 127.0.0.1.
   Escape character is '^]'.
   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0

   HTTP/1.0 200 OK
   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
   Cache-control: max-age=0
   Expires: Thu, 01 Dec 1994 16:00:00 GMT
   Content-Length: 405
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

   [...]

If I paste the URL:

   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1

into Konqueror, the headers I'm getting back are:

   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

(according to Konqueror).  I've tried Mozilla and galeon as well, all
with similar results.  Yes, I have cookies enabled from localhost.  If I
put the headers_out.add() at the top of my handler, it showes up in
Konqueror's "View Page Info" output...

Sean
-- 
 Do you think reading about cowboys is sufficient to ride a horse?
 Like horses, real programs tend to throw you.  -- John Shipman, 1997
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 12:46:41 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610081422.GC28085@tummy.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com>
Message-ID: <3EE5B711.5080408@sjsoft.com>

Sean Reifschneider wrote:

>On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>  
>
>>Do you mean you're using this import mechanism when you have the problem 
>>with jotweb.input.Request below?
>>    
>>
>I mean that the imp module call is loading a module which then does an
>"import jotweb.input".  If in the jotweb I don't have the __init__.py
>import all sub-packages or sub-modules, I will get an AttributeError
>such as:
>
>  AttributeError: 'module' object has no attribute 'input'
>  
>
>>> import Request
>>>      
>>>
>>Have you tried using __all__ = [Request, ...] in __init__.py ?
>>    
>>
>I believe I did try that at one point, but it's my understanding that
>setting "__all__" only has an impact if you do "from jotweb import *",
>which I don't do anywhere.  Also, as I said before, I can import the
>code fine outside of mod_python.  "python -c 'import jotweb.input'", for
>example...
>  
>
>>mod_python does have some import hooks to handle things specially, but 
>>I'm not an expect here, someone else will have to comment...
>>    
>>
>I wonder if I'm running into something there.  I've tried simplifying it
>to:
>
>   include current directory in path
>   module = __import__(basename, globals(), locals(), [])
>   return sys.path to old layout
>
>that doesn't really seem to help the problem with imports though...
>  
>
Hmmm ... sorry, no further ideas here...

>>How do you pass the request object into processLogin (it doesn't seem to 
>>be part of the call)?
>>It seems like you may be trying to use an old request object or something...
>>    
>>
>
>The request object is stored into a module, where other parts of my
>system will pick it up when they need either the headers or the request.
>  
>
Might need to be careful of thread safety etc here...

>I've verified that the id() of the header_out object is the same in the
>higher-level and lower-level code.  I'm not calling request.write()
>anywhere except at the end of my top-level code, nor am I doing a print
>anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
>to access the Apache request object, but maybe it's doing a print?
>
I don't know much about SimpleTAL, but from what you've described, 
that's where you need to investigate ...
Try wrapping the req object in another one which logs any calls to 
req.write and then pass that through to SimpleTAL?

>>No. But it is a bit more complex running a python interpreter inside 
>>Apache than standalone.
>>    
>>
>
>Sure, I understand that, and I'm ok with it being more complicated.  I'm
>just not happy about running into sporadic problems where sometimes
>things work, sometimes they don't.
>
>For example, *ANY* time I submit a request for a URL via a telnet
>connection, I get the headers back:
>
>   guin:jafo$ telnet 127.0.0.1 80
>   Trying 127.0.0.1...
>   Connected to 127.0.0.1.
>   Escape character is '^]'.
>   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0
>
>   HTTP/1.0 200 OK
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
>   Cache-control: max-age=0
>   Expires: Thu, 01 Dec 1994 16:00:00 GMT
>   Content-Length: 405
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>   [...]
>
>If I paste the URL:
>
>   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1
>
>into Konqueror, the headers I'm getting back are:
>
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>(according to Konqueror).  I've tried Mozilla and galeon as well, all
>with similar results.  Yes, I have cookies enabled from localhost.  If I
>put the headers_out.add() at the top of my handler, it showes up in
>Konqueror's "View Page Info" output...
>
Yikes ... bizarre ... no ideas other than setting up something that 
watches the actual socket through which the message goes, to see what 
the difference is

Hope somebody else can help...
David

From jafo at tummy.com  Tue Jun 10 04:58:26 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE5B711.5080408@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com> <3EE5B711.5080408@sjsoft.com>
Message-ID: <20030610105826.GD28085@tummy.com>

On Tue, Jun 10, 2003 at 12:46:41PM +0200, David Fraser wrote:
>I don't know much about SimpleTAL, but from what you've described, 
>that's where you need to investigate ...

Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
it to be.  It'd be nice if in debug mode mod_python would throw an
exception or something if you tried adding headers after there had been
a write.

I'm still looking for information on the weird importing issues
though...  One other thing on that front is that to even get started I
found that at the top-level of my main mod_python handler, I had to add:

   from encodings import latin_1
   from encodings import iso8859_1

or I just couldn't use the SimpleTAL code in my handler -- it would fail
related to encodings.  They can't be imported at other times, they
already have to be there.  This seems to be similar in nature to the
weird ness I'm seeing importing my own modules, but I can't find any
mod_python documentation about how import is weird or broken under
mod_python.

Thanks,
Sean
-- 
 Well son, a funny thing about regret is that it's better to regret something
 you HAVE done than regret something you haven't done.
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mike.looijmans at asml.com  Tue Jun 10 13:23:43 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <01c32f42$bfe04980$926a1e6e@wsasd464>

>Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
>it to be.  It'd be nice if in debug mode mod_python would throw an
>exception or something if you tried adding headers after there had been
>a write.


You could do this at runtime without having to patch the mod_python code, in
the handler just do:

def handler(req):
    req.write = mywrite
    req.header_out = myheaderout(req)

def mywrite(self, data):
    self.write(data)
    self.headers_sent = 1

class myheaderout():
    ... # init stuff
    def __init__(self, req):
        self.req = req
        self.__get__ = req.header_out.__get__
        # etc. etc.
    def __set__(self, key, value):
        if self.req.headers_sent:
            raise EHeadersSent
        req.header_out[key] = value






-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From jgardner at jonathangardner.net  Tue Jun 10 06:35:43 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:29 2004
Subject: [mod_python] python print
In-Reply-To: <20030609121231.L11532-100000@localhost.name>
References: <20030609121231.L11532-100000@localhost.name>
Message-ID: <200306100635.47755.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> Dear Mr. Russell, thank you I forgot about '+=', which did the trick.

One more thing I thought you might want to know about. There are really two 
ways to go about concatenating stuff to the end of strings:

A)
	s = "something"
	s += "something more"
	...
	print s

B)
	s = []
	s.append('something')
	s.appent('something more')
	...
	print "".join(s)

B is far more efficient than A. This really shows up when you are 
concatenating hundreds or more elements. Anything below that, it really 
doesn't make too much of a difference.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
oDZOcz6mtB1hiavXnelVodo=
=oy+6
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 09:49:23 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>

I'll give a second on ezt.py; even though Albatross is my first choice.
Ezt.py follows many of the same ideals of Albatross when it comes to
templates, and also is not geared only for the web like albatross so it
can be handly in other apps too.

I use edna and ViewCVS daily and found no trouble customizing both with
the ezt.py module.

(which btw, both are great pojects!)

From scott at towngeek.com  Tue Jun 10 10:49:54 2003
From: scott at towngeek.com (Scott Russell)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] python print
In-Reply-To: <200306100635.47755.jgardner@jonathangardner.net>
References: <20030609121231.L11532-100000@localhost.name>
	 <200306100635.47755.jgardner@jonathangardner.net>
Message-ID: <1055256594.1995.15.camel@localhost>

Momma always says, "Make sure you can read it first, only optimize it
after you profile." :)

On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> > Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
> 
> One more thing I thought you might want to know about. There are really two 
> ways to go about concatenating stuff to the end of strings:
> 
> A)
> 	s = "something"
> 	s += "something more"
> 	...
> 	print s
> 
> B)
> 	s = []
> 	s.append('something')
> 	s.appent('something more')
> 	...
> 	print "".join(s)
> 
> B is far more efficient than A. This really shows up when you are 
> concatenating hundreds or more elements. Anything below that, it really 
> doesn't make too much of a difference.
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
> oDZOcz6mtB1hiavXnelVodo=
> =oy+6
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mmckerns at its.caltech.edu  Tue Jun 10 08:53:41 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] importing errno
Message-ID: <Pine.GSO.4.44.0306100849110.18061-100000@clyde>

The following is a problem with the RedHat8 rpm's, but
also may apply to the source.  I thought I'd kick it out
to see if somebody has gone through this already, or if
the new source takes care of this...
-------------------------------------

In python2.1, "import errno" looked for
/usr/lib/python2.1/lib-dynload/errno.so

In python2.2, errno.so was moved to a built-in module.

Using the most current rpm builds from RHN for RedHat8
(python-2.2.2-7, mod_python-3.0.0-10, httpd-2.0.40-11.5),
the following causes an error because apache (?) looks to the
old location of errno.so when browser pointed to pyweb.py URL.

I'm assuming that RedHat is just a little behind, but I could be wrong.
I guess I will try to build from source from the latest
versions on the mod_python website to see if this bug
has been fixed, and if it is just a redhat rpm bug...



EXAMPLE:
---------------------------------------------
#! /usr/bin/env python
############################################################
# pyweb.py              06/09/03        mmckerns@caltech.edu
# testing python web handler
############################################################

# the next line causes the error...
import errno

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK

---------------------------------------------



FROM httpd.conf:
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------




ERROR FROM error_log:
----------------------------------------------
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: Traceback (most
recent c
all last):
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 274, in HandlerDispatch!
module
= import_module(module_name, _req)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 429, in import_module!
module =
imp.load_module(mname, f, p, d)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/home/mmckerns/p
ublic_html/pyweb.py", line 5, in ?!    import errno
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: ImportError: No
module n
amed errno
----------------------------------------------




---

Mike McKerns
mmckerns@caltech.edu





From thm at duke.edu  Tue Jun 10 11:53:33 2003
From: thm at duke.edu (Hunter Matthews)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <1055260413.2007.11.camel@jade.biology.duke.edu>

On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender.
> 
> The problem with Albatross for me is the same one with all the others - it
> is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

I recently discovered PyMeld.py, which fixes this problem. There is also
"simpleTAL"

I prefer PyMeld really, except for the license.

> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Hunter Matthews                          Unix / Network Administrator
Office: BioScience 145/244               Duke Univ. Biology Department
Key: F0F88438 / FFB5 34C0 B350 99A4 BB02  9779 A5DB 8B09 F0F8 8438
Never take candy from strangers. Especially on the internet.

From gstein at lyra.org  Tue Jun 10 12:30:55 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] 
	templating (was: supporting modular mod_python extensions vs.
	"folding" mod_psp)
In-Reply-To: <1055260413.2007.11.camel@jade.biology.duke.edu>
References: <20030606174027.J48945-100000@oldchief.reply.net>
	<1055260413.2007.11.camel@jade.biology.duke.edu>
Message-ID: <20030610193055.GC25150@lyra.org>

On Tue, Jun 10, 2003 at 11:53:33AM -0400, Hunter Matthews wrote:
> On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
>...
> > The problem with Albatross for me is the same one with all the others - it
> > is yet another language to learn:
> > 
> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> I recently discovered PyMeld.py, which fixes this problem. There is also
> "simpleTAL"

Hunh. Just looked at this. It is a *very* neat approach (gonna have to keep
it in mind; the approach might be very useful in some contexts). But I
disagree that it "separates logic from HTML". As a specific counterexample,
take my edna mp3 streamer. For each song found in the "current" directory,
it extracts a whole bunch of ID3 tag information and makes that available to
the template. The default HTML template does not display that. But if you
switch over to the XML template, then it *is* present. (at one point, there
was a GUI that read the XML pages, so it wanted richer info)

With PyMeld, the logic must insert all the data somewhere in the page
(either as element contents or as an attribute). I don't see how you can
avoid putting _all_ the data into a PyMeld template. Thus, the logic is
intrinsically tied to the template.

IMO, there is never any true separation. Even with EZT, the logic must
provide "all" potential data, and let the template pull in what it needs.
(of course, there are things you can do to avoid pregenerating all data, but
semantically, the logic and template are still tied)

There will always be tying between the template and the logic because of the
data. If you say, "well, let the template define/generate the data it
needs", then you've just moved logic/processing into the template :-) Since
you can't get away from it, I built ezt with the view of "figure out the
relevant data, and then use *that* to render it." IOW, I took more of a
"render only" approach rather than some lofty, but unreachable, goal of
separation of logic.

> I prefer PyMeld really, except for the license.

EZT is under a BSD license, fwiw.

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Tue Jun 10 12:27:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] python print
In-Reply-To: <1055256594.1995.15.camel@localhost>
References: <20030609121231.L11532-100000@localhost.name>
	<200306100635.47755.jgardner@jonathangardner.net>
	<1055256594.1995.15.camel@localhost>
Message-ID: <200306101227.08600.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > B)
> > 	s = []
> > 	s.append('something')
> > 	s.appent('something more')
> > 	...
> > 	print "".join(s)
> >
> > B is far more efficient than A. This really shows up when you are
> > concatenating hundreds or more elements. Anything below that, it really
> > doesn't make too much of a difference.
> >
>
> Momma always says, "Make sure you can read it first, only optimize it
> after you profile." :)
>

You're right. This particular algorithm has been tested and profiled. I gave 
you the numbers I have found when I have done profiling. That is why I use 
this almost everywhere I have to concatenate multiple strings together. While 
it is true you shouldn't spend too much time optimizing on your first 
iteration of writing your code, it is silly to use methods you know are 
inefficient when comparable methods that are efficient exist and are 
well-tested. It just makes more work for the second and beyond iterations.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
p82lLQ5P+TDytSP2zHDkZHE=
=gHW1
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 17:23:30 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] templating (was: supporting modular mod_python
	extensions vs."folding" mod_psp)
Message-ID: <C0FC22C08B82074A88B50061764157775C74@johnson.mediapulse.net>

     > > > <al-for iter="name" expr="keys">
     > > >     <tr>
     > > >          <td><al-value expr="name.value()"></td>
     > > >          <td><al-value expr="environ[name.value()]"></td>
     > > >     <tr>
     > > > </al-for>

I think this snippet doesn't show all of albatross; it acts much closer
to ezt.py than let on here.

In albatross, edna could do something like (warning, python-style sudo
code follows; do not attempt to run this at home):

In edna.py:

class edna_pages:

  def page_process(self, ctx):
    #called to process a page, ctx is the object with the request data
and methods
    if ctx.req_equals("show_dir"):
      #the "Show Directory" button was clicked
      file_list = get_files_in_dir(ctx.locals.directory) #defined
elsewhere, directory come from the broswer
	
      results = [] #list of results, will hold mp3 objects to pass to
template
      for file in file_list:
	  results.append(mp3(file)) # mp3 class defined elsewhere, gets
all the tag/size info

      ctx.locals.results = results # place results in the namespace of
the template

  def page_display(self, ctx):
    # load and run the template
    ctx.run_template('edna.html')

in edny.html:
<html>
<body>
	<table>
		<tr>
			<td>Filename</td>
			<td>Size</td>
			<td>Length</td>
		</tr>
		<al-for expr="results" iter="row">
			<al-exec expr="mp3 = row.value()"> <!-- I do
this for sanity, we could very easily
	
use row.value().field instead -->
			<tr>
				<td><al-value expr="mp3.filename"></td>
				<td><al-value expr="mp3.size"> Kb</td>
				<td><al-value expr="'%0d:%02d' %
(mp3.minutes, mp3.seconds)"></td>
			</tr>
		</al-for>
	</table>
</body>
</html>

That's the basic idea, showing the seperation of logic and display of
Albatross.  There is a lot of cool stuff to Albatross as well, for
example it could easily with a few tags break the results into 30 per
page and provide prev and next buttons, but this give you the general
idea.

Mike


From djc at object-craft.com.au  Wed Jun 11 14:52:01 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
Message-ID: <m3k7btrzbi.fsf@ferret.object-craft.com.au>

>>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:

Michael> I'll give a second on ezt.py; even though Albatross is my
Michael> first choice.  Ezt.py follows many of the same ideals of
Michael> Albatross when it comes to templates, and also is not geared
Michael> only for the web like albatross so it can be handly in other
Michael> apps too.

Just had a look at ezt.py.  It is very similar in structure and
approach to the Albatross templates.  Looking at the CVS logs it seems
like ezt.py and Albatross sprung into existence at almost the same
time.  Bizarre.

- Dave

-- 
http://www.object-craft.com.au

From tbrauch at mindless.com  Wed Jun 11 01:26:19 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Load Error
Message-ID: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>

I am running Apache 2.0.40-11.5 on a Red Hat 8.0 box with Python 2.2.1 and
mod_python 3.0.1.  Apache and Python were installed when I installed Red Hat
and have been updated using up2date.  I installed mod_python using an RPM I
found on http://www.rpmfind.net.  In the docs on the modpython website, I
assumed I could skip all steps up to 2.3.2.  I then added the line

LoadModule python_module libexec/mod_python.so

to my httpd.conf file at the end of all of the other LoadModule commands.
And I added

<Directory /var/www/python>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

To the end of my httpd.conf file.  Then, I did apachectl stop and apachectl
start.  I got errors

[warn] module python_module is already loaded, skipping

both on the stop and start.  Okay, I thought, it was already loaded (but I
didn't see anything in my httpd.conf file for it), and it's not loading it
again, there shouldn't be any problems.  So, I removed the LoadModule line
from the httpd.conf file and all is right in the world.  My question, how is
this module being loaded?  Some sort of magic I suspect.

If you answer this question for me, I have one or two more just waiting.
Hopefully they will be just as easy.

From bkesuma at ml.gaijinweb.com  Wed Jun 11 22:27:02 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Load Error
In-Reply-To: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
References: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
Message-ID: <20030611222702.6af0878c.bkesuma@ml.gaijinweb.com>

Hi Timothy,

On Wed, 11 Jun 2003 01:26:19 -0400
"Timothy M. Brauch" <tbrauch@mindless.com> wrote:

e stop and start.  Okay, I thought, it was already loaded (but
> I didn't see anything in my httpd.conf file for it), and it's not
> loading it again, there shouldn't be any problems.  So, I removed the
> LoadModule line from the httpd.conf file and all is right in the world. 
> My question, how is this module being loaded?  Some sort of magic I
> suspect.

Just a guess, check /etc/httpd/conf.d
See if there is a .conf file over there.

From mark at camazotz.com  Wed Jun 11 12:26:55 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <200306111700.h5BH02BQ002186@slash.mediapulse.com>
Message-ID: <83F0108E-9C29-11D7-89CD-00039364CE50@camazotz.com>

Michael C. Neel" <neel@mediapulse.com> wrote:
 > (warning, python-style sudo code follows;
 > do not attempt to run this at home):

Heh.  Good advice however you spell [p]s[e]udo. :)

From paul.robinson at groupbc.com  Wed Jun 11 17:45:17 2003
From: paul.robinson at groupbc.com (Paul Robinson)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <3EE75C9D.2000900@groupbc.com>

I'm trying to understand Apache and mod_python in order to understand 
how to approach the design of some fairly generic concepts with regard 
to database backed, web front ended applications.
Let me start by saying everything I say assumes Apache 2 and mod_python 
3.0.3 currently.

Apache has a number of modes of operation when it comes to threading and 
forking, I would like to understand how these things interact with 
Python subinterpreters 
[http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and 
issues such as the Python global interpreter lock (GIL) 
[http://www.python.org/doc/current/api/threads.html].

For example, on a Windows platform where there is a single 
multi-threaded Apache process (mpm_wint 
[http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
say that mod_python would not be able to take advantage of a 
multi-processor machine due to the GIL?

In another, given Apache running in the prefork MPM 
[http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
or b) useful to have a global, per-Apache-process persitant data 
strucuture sharing a pool of (threadsafe) database connections. I would 
say not useful since that process will only ever be running a single 
mod_python request at a time - hence more than one item in the pool 
would be useless. Given the "worker MPM" 
[http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
useful but it's not clear to me if it would be possible.

Taking the specific example of database connections (let me note I have 
read and believe I understand FAQ 3.3) is it ever useful or possible to 
share a pool of database connectors, rather than a single connector in 
the global namespace. I assume that code such as that in FAQ 3.3 would 
require additional locking mechanisms in order to function correctly in 
a multi-threaded Apache environment?

I bet there must be some code in existing projects that does stuff like 
this. Any pointers?

Maybe I'm confusing myself at the moment - maybe some other people as 
well ;-)

Thanks in advance,
	Paul

From tpc at csua.berkeley.edu  Wed Jun 11 10:06:11 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] python print
In-Reply-To: <200306101227.08600.jgardner@jonathangardner.net>
Message-ID: <20030611094521.D23467-100000@localhost.name>


curiosity impels me, if list append is most efficient in concatenating to
the end of a string, how would I use it where I previously had string
concatenation ?  I can only print out the values
surrounded by [[''],[''], etc]:

<code>

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine',
            ' ' : '\n',
        }

def convert(numbers):
    w = []
    for argument in numbers:
        w.append([dict1[digit] for digit in argument])
#        w += ''.join([dict1[digit] for digit in argument])
    return w

</code>

On Tue, 10 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> > On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > > B)
> > > 	s = []
> > > 	s.append('something')
> > > 	s.appent('something more')
> > > 	...
> > > 	print "".join(s)
> > >
> > > B is far more efficient than A. This really shows up when you are
> > > concatenating hundreds or more elements. Anything below that, it really
> > > doesn't make too much of a difference.
> > >
> >
> > Momma always says, "Make sure you can read it first, only optimize it
> > after you profile." :)
> >
>
> You're right. This particular algorithm has been tested and profiled. I gave
> you the numbers I have found when I have done profiling. That is why I use
> this almost everywhere I have to concatenate multiple strings together. While
> it is true you shouldn't spend too much time optimizing on your first
> iteration of writing your code, it is silly to use methods you know are
> inefficient when comparable methods that are efficient exist and are
> well-tested. It just makes more work for the second and beyond iterations.
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
> p82lLQ5P+TDytSP2zHDkZHE=
> =gHW1
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Wed Jun 11 10:31:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] python print
In-Reply-To: <20030611094521.D23467-100000@localhost.name>
References: <20030611094521.D23467-100000@localhost.name>
Message-ID: <200306111031.05502.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> curiosity impels me, if list append is most efficient in concatenating to
> the end of a string, how would I use it where I previously had string
> concatenation ?  I can only print out the values
> surrounded by [[''],[''], etc]:
>

Your curiosity served you well. If you missed this point, the whole thing is 
kinda pointless. ;-)

'join' is the answer. You 'join' the list together into a string after you've 
put the list together.

<snip>
> def convert(numbers):
>     w = []
>     for argument in numbers:
>         w.append([dict1[digit] for digit in argument])
> #        w += ''.join([dict1[digit] for digit in argument])
>     return w
>

Change the line:
	return w
to:
	return "".join(w)

This is a demonstration on how join works:
>>> l = ['A', 'B', 'C', 'D']
>>> " - ".join(l)
'A - B - C - D'
>>> "".join(l)
'ABCD'

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
d8M139orE/YjDJV5optSTn4=
=Mqq5
-----END PGP SIGNATURE-----

From tpc at csua.berkeley.edu  Wed Jun 11 10:48:51 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] python print
In-Reply-To: <200306111031.05502.jgardner@jonathangardner.net>
Message-ID: <20030611104619.E23713-100000@localhost.name>


I tried something like that, and I just tried it with "".join and
both times I got this error:

TypeError: sequence item 0: expected string, list found

On Wed, 11 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > curiosity impels me, if list append is most efficient in concatenating to
> > the end of a string, how would I use it where I previously had string
> > concatenation ?  I can only print out the values
> > surrounded by [[''],[''], etc]:
> >
>
> Your curiosity served you well. If you missed this point, the whole thing is
> kinda pointless. ;-)
>
> 'join' is the answer. You 'join' the list together into a string after you've
> put the list together.
>
> <snip>
> > def convert(numbers):
> >     w = []
> >     for argument in numbers:
> >         w.append([dict1[digit] for digit in argument])
> > #        w += ''.join([dict1[digit] for digit in argument])
> >     return w
> >
>
> Change the line:
> 	return w
> to:
> 	return "".join(w)
>
> This is a demonstration on how join works:
> >>> l = ['A', 'B', 'C', 'D']
> >>> " - ".join(l)
> 'A - B - C - D'
> >>> "".join(l)
> 'ABCD'
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
> d8M139orE/YjDJV5optSTn4=
> =Mqq5
> -----END PGP SIGNATURE-----
>

From big.stick at bol.com.br  Wed Jun 11 15:03:12 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <5221067273.20030611150312@bol.com.br>

Em 11/6/2003 ?s 14:48, tpc escreveu:

> I tried something like that, and I just tried it with "".join and
> both times I got this error:
> TypeError: sequence item 0: expected string, list found

This is because you?re trying to concatenate a list of lists, not a
list of strings. Try this instead:

def convert(numbers):
    w = []
    for argument in numbers:
        w.append(dict1[argument])
    return ''.join(w)

-- stick
From jgardner at jonathangardner.net  Wed Jun 11 11:17:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <200306111117.56203.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:48, tpc@csua.berkeley.edu wrote:
> On Wed, 11 Jun 2003, Jonathan Gardner wrote:
> > On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > >
> > > def convert(numbers):
> > >     w = []
> > >     for argument in numbers:
> > >         w.append([dict1[digit] for digit in argument])
> > > #        w += ''.join([dict1[digit] for digit in argument])
> > >     return w
> >
> > Change the line:
> > 	return w
> > to:
> > 	return "".join(w)
> >
>
> I tried something like that, and I just tried it with "".join and
> both times I got this error:
>
> TypeError: sequence item 0: expected string, list found
>

Oops. You'll also want to change:
	w.append([dict1[digit] for digit in argument])
to:
	[w.append(x) for x in [dict1[digit] for digit in argument]]
or:
	w.append(''.join([dict1[digit] for digit in argument]))

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53JSWgwF3QvpWNwRAm2yAJ404BiA7lGl/PU2NNJ5Lt4DSwaMyQCeJeqg
OB7LJEwIS23C9PdLCk+meb4=
=0I1k
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 11 11:34:03 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] tcltkaqua and IDLE
Message-ID: <2147483647.1055331243@[10.0.1.2]>

Hello,

I've installed TclTkAquaBl-8.4.2.0 and i installed IDLE from the 
package manager. When I run it, it launches and quits.
When I open it from the command line it does the same.

When I do:

pythonw 
/Applications/MacPython-2.3/IDLE.app/Contents/Resources/idlelib/idle.py

I get:

RuntimeError: tcl.h version (8.4) doesn't match libtcl.a version (8.4)

If I comment out the test for if tcl_version != _tkinter.TCL_VERSION 
everything works fine.

Is this because I installed 8.4.2 instead of 8.4.1?

(on a tangental note, if I ever don't want these packages any more, 
what can I do?)

Thanks,

~mindlace
http://mindlace.net
From jgardner at jonathangardner.net  Wed Jun 11 11:52:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
References: <3EE75C9D.2000900@groupbc.com>
Message-ID: <200306111152.32398.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading and
> forking, I would like to understand how these things interact with
> Python subinterpreters
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and
> issues such as the Python global interpreter lock (GIL)
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process. There 
is *no* *way* that any process can communicate with each other except through 
shared memory or pipes. I am no expert on the inner workings of mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that at 
all. That is there just to ensure that no thread is caught with its pants 
down. Or, in more technical terms, that the state of the python interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I do know 
that threads are like "lightweight" processes. They can and will be run on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the impression I 
get from the documentation is that this is not so. It sounds like each thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible
> or b) useful to have a global, per-Apache-process persitant data
> strucuture sharing a pool of (threadsafe) database connections. I would
> say not useful since that process will only ever be running a single
> mod_python request at a time - hence more than one item in the pool
> would be useless. Given the "worker MPM"
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I have
> read and believe I understand FAQ 3.3) is it ever useful or possible to
> share a pool of database connectors, rather than a single connector in
> the global namespace. I assume that code such as that in FAQ 3.3 would
> require additional locking mechanisms in order to function correctly in
> a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a request, 
then it can share with the same database connections in that apache thread.

However, I don't think what you really want (independent processes or threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff like
> this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python, and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and 
connect at the beginning of the request. Some databases have more overhead 
than others.

Remember I said that the only way to talk between processes is via shared 
memory or pipes. Shared memory isn't supported well (if at all) in python. 
Pipes are something you already are familiar with -- TCP sockets are pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays your 
commands word for word to the database. When you disconnect, it puts the 
connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a pain in 
the butt to write right, and they are always a nightmare to manage. And you 
always have to have a plan for scaleability, or it will eventually bite you.

> Maybe I'm confusing myself at the moment - maybe some other people as
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

From grisha at modpython.org  Wed Jun 11 15:26:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
Message-ID: <20030611152022.X28576-100000@oldchief.reply.net>



On Wed, 11 Jun 2003, Paul Robinson wrote:

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?

The answer, unfortunately, is yes. Here is a google search that has some
info on the subject: http://www.google.com/search?q=python+free-threading

AFAIK the state of things has not changed with respect to SMP and GIL.

Grisha

From fitnah55 at hotmail.com  Wed Jun 11 15:40:16 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <200306111152.32398.jgardner@jonathangardner.net>
Message-ID: <000001c33051$48583390$18c0c20a@computer>


as far as i understand, apache2 was supposed to fix and/or make possible
the memory pooling issue... i don't think MMDBMS w/ an effective apache
interface is a reality yet, but that's certainly going to be the
intent..

for connection pooling and other stuff you obviously have to design and
write proper multiplexing code to allocate your resources effectively,
but as far as windows goes i wouldn't have a clue and wouldn't want to

I do believe that there is one main interpreter in mod_python and each
thread has sub-interpreters.. Although with the new worker model it
might
be one main interpreter per child and one sub-interpreter per thread..
regardless you can munge it to work all in one interpreter or a couple
other ways with the config options which should allow memory pooling to
some extent

mysql just got $15M in financing though so I don't think a MMDBMS module
from them is going to be free, if it even ever becomes available

python mapping objects are pretty easy to cache though, as long as you
don't
have to manage consistency across disparate processes

just my two cents :p




-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of Jonathan Gardner
Sent: Wednesday, June 11, 2003 2:53 PM
To: Paul Robinson; Mod_python@modpython.org
Subject: Re: [mod_python] Apache, Threading and Multi-Processing Modules


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading 
> and forking, I would like to understand how these things interact with

> Python subinterpreters 
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] 
> and issues such as the Python global interpreter lock (GIL) 
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process.
There 
is *no* *way* that any process can communicate with each other except
through 
shared memory or pipes. I am no expert on the inner workings of
mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters
are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that
at 
all. That is there just to ensure that no thread is caught with its
pants 
down. Or, in more technical terms, that the state of the python
interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct 
> to say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I
do know 
that threads are like "lightweight" processes. They can and will be run
on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the
impression I 
get from the documentation is that this is not so. It sounds like each
thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters
are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible

> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. I 
> would say not useful since that process will only ever be running a 
> single mod_python request at a time - hence more than one item in the 
> pool would be useless. Given the "worker MPM" 
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I 
> have read and believe I understand FAQ 3.3) is it ever useful or 
> possible to share a pool of database connectors, rather than a single 
> connector in the global namespace. I assume that code such as that in 
> FAQ 3.3 would require additional locking mechanisms in order to 
> function correctly in a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a
request, 
then it can share with the same database connections in that apache
thread.

However, I don't think what you really want (independent processes or
threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff 
> like this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python,
and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and

connect at the beginning of the request. Some databases have more
overhead 
than others.

Remember I said that the only way to talk between processes is via
shared 
memory or pipes. Shared memory isn't supported well (if at all) in
python. 
Pipes are something you already are familiar with -- TCP sockets are
pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to
implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays
your 
commands word for word to the database. When you disconnect, it puts the

connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a
pain in 
the butt to write right, and they are always a nightmare to manage. And
you 
always have to have a plan for scaleability, or it will eventually bite
you.

> Maybe I'm confusing myself at the moment - maybe some other people as 
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty
of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From jgardner at jonathangardner.net  Mon Jun  9 22:43:28 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <200306092243.32448.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 14:30, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?
>

I'm using the RedHat 9 RPMs.They work great.
- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5XACWgwF3QvpWNwRAgH+AKDrlLxwrcs/8K1TaOZVrG4OaBCLnwCfV+6B
CD0Qxms2q+aHtCmp8elnX78=
=+FrE
-----END PGP SIGNATURE-----


From bkesuma at ml.gaijinweb.com  Thu Jun 12 12:15:38 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Mod_python in real world
Message-ID: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>

Hi,

I am looking for real world experience with mod_python. Anybody wants to
share stories?

From mike.looijmans at asml.com  Thu Jun 12 07:22:51 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <200306120522.HAA29819@wsasd464.asml.nl>


> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint 
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
> say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?

I don't know what a "GIL" is, but Windows (NT) and apache are both definitely 
capable of taking advantage of multi-processor machines correctly.

> In another, given Apache running in the prefork MPM 
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. 

As you already concluded, there is not shared data among the processes, so 
setting up communication between them is probably not worth considering. Just 
keep a single DB connection per process, something like:

db = None

def connect():
    if not db:
    	db = MySQLdb.connect(...)
    return db

> Taking the specific example of database connections (let me note I have 
> read and believe I understand FAQ 3.3) is it ever useful or possible to 
> share a pool of database connectors, rather than a single connector in 
> the global namespace. I assume that code such as that in FAQ 3.3 would 
> require additional locking mechanisms in order to function correctly in 
> a multi-threaded Apache environment?

It is both useful and possible to do so. Especially when the DBMS is on another 
machine.

Most databases allow only one session per thread, and as such the best thing to 
do is to make sure that a connection is used by only one thread at a time.
 
> I bet there must be some code in existing projects that does stuff like 
> this. Any pointers?


No pointers, but what I have been using here for months now on a "worker" mpm:

- Create a threading.Lock object.
- Create a dictionary (of lists) or list for the db connection pool (I use a 
dictionary because I have 4 databases where my clients want to grab data)

To get a connection, the lock is aquired and the first matching db connection is 
taken and removed from the pool, if possible. The lock is released and the 
connection returned. If the pool was empty, a new db conenction object is 
created and returned.

When a thread finishes handling a request, it returns the connection object back 
to the pool. (obtain lock, put connection into pool, release lock)

This guarantees that no two threads share the same connection, and still creates 
no more connections than neccesary.

--
Mike Looijmans
ASML: http://www5nl.asml.nl/~mlooijma
Private: http://www.milosoftware.com
-- MY text ends here --



-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From tbrauch at mindless.com  Thu Jun 12 01:50:36 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Directory or Location?
Message-ID: <003201c330a6$8c22c860$6600a8c0@tbrauch>

Okay, I just want to go over a small frustration I just had and spent a few
hours trouble shooting.  In the tutorial,
http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
mptest script you must type:

<Directory /some/directory/htdocs/test>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

in the python.conf file.  However, in the default python.conf file that was
installed with the mod_python 3.0.0-10 rpm, the examples say

# This will cause files beneath /var/www/html with the extension .spam
# to be handled by the Python script /var/www/html/eggs.py
#
#<Directory /var/www/html>
#    AddHandler python-program .spam
#    PythonHandler eggs
#</Directory>
...
# This will cause all requests to the /python heirachy **<--note typo** of
your
# webserver to be handled by mod_python's Publisher handler
# (see http://localhost/manual/mod/mod_python/hand-pub.html)
#
#<Location /python>
#    SetHandler python-program
#    PythonHandler mod_python.publisher
#</Location>


What is the difference between using "Location" and "Directory"?  When do I
use each one?

As I found out, there is a difference and if you use "Location" where you
should use "Directory".  You get a 500 Internal Server Error that I never
quite understood and spent some time trying to fix.  There doesn't seem to
be anything in the documentation I've read to describe the difference

 - Tim

From mod_python at ols.inorganic.org  Wed Jun 11 23:08:30 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <20030612060830.GA18376@nag.inorganic.org>

On Thu, Jun 12, 2003 at 01:50:36AM -0400, Timothy M. Brauch wrote:
> Okay, I just want to go over a small frustration I just had and spent a few
> hours trouble shooting.  In the tutorial,
> http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
> mptest script you must type:
[...]
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
> 
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference

That's because you haven't read the right documentation :)

Sorry, I don't mean to be flip about this, but in the end, this shows
something of the problem in trying to use something like mod_python
without having a good understanding of the underlying application.
"<Directory>" and "<Location>" directives are Apache directives, and
they're well-documented in the Apache docs.  I don't feel like looking
at the mod_python docs, but either they say that you should look into
the Apache config file format to at least understand it somewhat or ...
well, they should.

-roy
From tbrauch at mindless.com  Thu Jun 12 02:25:34 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Directory or Location?
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
Message-ID: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>

> > What is the difference between using "Location" and "Directory"?  When
do I
> > use each one?
> >
> > As I found out, there is a difference and if you use "Location" where
you
> > should use "Directory".  You get a 500 Internal Server Error that I
never
> > quite understood and spent some time trying to fix.  There doesn't seem
to
> > be anything in the documentation I've read to describe the difference
>
> That's because you haven't read the right documentation :)
>
> Sorry, I don't mean to be flip about this, but in the end, this shows
> something of the problem in trying to use something like mod_python
> without having a good understanding of the underlying application.
> "<Directory>" and "<Location>" directives are Apache directives, and
> they're well-documented in the Apache docs.  I don't feel like looking
> at the mod_python docs, but either they say that you should look into
> the Apache config file format to at least understand it somewhat or ...
> well, they should.
>
> -roy

That would help explain things a lot.  I've been using Python for quite a
few years now and I am new to Apache, probably opposite of most users.  I
just did a default install of Apache and haven't learned/played with it too
much.  Python, however, I use everyday and can do most anything with it by
now (except using mod_python it would seem).

I didn't see anywhere in the mod_python docs the mention that Directory and
Location are Apache directives.  They are just used.  But, now that I know
it, I've got some reading to do over at apache.org.

Thanks,

 - Tim

From sk at medien.fh-wiesbaden.de  Thu Jun 12 08:26:04 2003
From: sk at medien.fh-wiesbaden.de (Stefan Kanitz)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <200306120826.05057.sk@medien.fh-wiesbaden.de>

Am Donnerstag, 12. Juni 2003 07:50 schrieb Timothy M. Brauch:
> <Directory /some/directory/htdocs/test>
>   AddHandler python-program .py
>   PythonHandler mptest
>   PythonDebug On
> </Directory>
>
> in the python.conf file.  However, in the default python.conf file that was
> installed with the mod_python 3.0.0-10 rpm, the examples say
>

I think, when the mod_python documentation talks about "main server 
configuration file", it means httpd.conf (Apache configuration file) and not 
python.conf.

Steve


> # This will cause files beneath /var/www/html with the extension .spam
> # to be handled by the Python script /var/www/html/eggs.py
> #
> #<Directory /var/www/html>
> #    AddHandler python-program .spam
> #    PythonHandler eggs
> #</Directory>
> ...
> # This will cause all requests to the /python heirachy **<--note typo** of
> your
> # webserver to be handled by mod_python's Publisher handler
> # (see http://localhost/manual/mod/mod_python/hand-pub.html)
> #
> #<Location /python>
> #    SetHandler python-program
> #    PythonHandler mod_python.publisher
> #</Location>
>
>
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
>
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference
>
>  - Tim
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mod_python at ols.inorganic.org  Wed Jun 11 23:41:25 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
	<005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
Message-ID: <20030612064124.GA19135@nag.inorganic.org>

On Thu, Jun 12, 2003 at 02:25:34AM -0400, Timothy M. Brauch wrote:
> > That's because you haven't read the right documentation :)
> >
> > Sorry, I don't mean to be flip about this, but in the end, this shows
> > something of the problem in trying to use something like mod_python
> > without having a good understanding of the underlying application.
> > "<Directory>" and "<Location>" directives are Apache directives, and
> > they're well-documented in the Apache docs.  I don't feel like looking
> > at the mod_python docs, but either they say that you should look into
> > the Apache config file format to at least understand it somewhat or ...
> > well, they should.
> >
> > -roy
> 
> That would help explain things a lot.  I've been using Python for quite a
> few years now and I am new to Apache, probably opposite of most users.  I
> just did a default install of Apache and haven't learned/played with it too
> much.  Python, however, I use everyday and can do most anything with it by
> now (except using mod_python it would seem).
> 
> I didn't see anywhere in the mod_python docs the mention that Directory and
> Location are Apache directives.  They are just used.  But, now that I know
> it, I've got some reading to do over at apache.org.

Actually, I'll go a step further than that -- every single item you put
in the httpd.conf file (including the 'AuthName' and 'AuthType'
directives in 3.4) is an Apache directive.  Linking mod_python into
Apache lets you use some Apache directives that you wouldn't have access
to otherwise (all the Python*Handler directives), but they're still
_Apache_ directives -- and it's important to keep that in mind.

You're right, by the way --  you and I are coming at this from opposite
ends.  I've been managing Apache for years now, and am new to Python.

So yeah, this definitely indicates something of a shortcoming of the
mod_python tutorial (not really the only one, I think, judging by how
many people have problems getting mod_python to work as they'd expect).

-roy
From i at mindlace.net  Thu Jun 12 08:43:14 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:47:30 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <2147483647.1055407394@[10.0.1.2]>

--On 12 Thursday, June 2003 12:15 +0900 Batara Kesuma 
<bkesuma@ml.gaijinweb.com> wrote:

> Hi,
>
> I am looking for real world experience with mod_python. Anybody wants
> to share stories?

Sorry, I only use mod_python in Tir nan og, which as everyone knows 
isn't a real place.

~mindlace
http://mindlace.net
From i at mindlace.net  Thu Jun 12 08:55:22 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <2147483647.1055408122@[10.0.1.2]>

--On 12 Thursday, June 2003 01:50 -0400 "Timothy M. Brauch" 
<tbrauch@mindless.com> wrote:


> What is the difference between using "Location" and "Directory"?
> When do I use each one?

I battled with this for hours the other day, so maybe I can help.

This is the important document: 
<http://httpd.apache.org/docs/sections.html>

The key thing to take away is: Location gets applied after Directory.

What I wanted was to handle everything with my PythonHandler but 
exclude certain directories.*

So at first I tried a Directory directive with SetHandler 
python-program and other directory directives with SetHandler None; the 
latter only worked for the exact directory name, and only if I 
specified the absolute path (more general regular expressions, like 
"^/donthandlethis*", didn't work).

Finally I used <Location /donthandlethis> SetHandler None </Location> 
for those directories I didn't want handled by my handler, and now 
everything works fine.

* I battled for a while with TransHandler, but it seems to me that if 
you write a TransHandler it must do everything that the regular 
TransHandler does as well as whatever you want; there's no way to make 
a TransHandler that only translates some requests, and punts the rest 
to apache's normal handling. (someone please correct me if I'm wrong.)

Additionally, I never got 
req.add_handler("PythonHandler",myhandlername) to do what I expected - 
i.e. act like SetHandler for that request (but if it doesn't work that 
way, how come you can't specify extension in .add_handler() ?

HTH,

~mindlace
http://mindlace.net
From davidf at sjsoft.com  Thu Jun 12 18:15:17 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <3EE8A715.3090405@sjsoft.com>

Batara Kesuma wrote:

>Hi,
>
>I am looking for real world experience with mod_python. Anybody wants to
>share stories?
>  
>
Hi

We use mod_python for a number of projects, including an electronic 
logging application that stores logs in the database and is highly 
configurable. We are about to do the first deployment, for ninety 
concurrent users ; I'll let you know then...

David

From grisha at modpython.org  Thu Jun 12 14:20:10 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <2147483647.1055408122@[10.0.1.2]>
Message-ID: <20030612141039.T44199-100000@oldchief.reply.net>



On Thu, 12 Jun 2003, emf wrote:

> * I battled for a while with TransHandler, but it seems to me that if
> you write a TransHandler it must do everything that the regular
> TransHandler does as well as whatever you want; there's no way to make
> a TransHandler that only translates some requests, and punts the rest
> to apache's normal handling. (someone please correct me if I'm wrong.)

You should be able to return DECLINED in which case Apache will do its
default thing.

> Additionally, I never got req.add_handler("PythonHandler",myhandlername)
> to do what I expected - i.e. act like SetHandler for that request

Not sure what you mean by this. It should execute, though if you have
another PythonHandler, that handler will execute first.

> (but if it doesn't work that way, how come you can't specify extension
> in .add_handler() ?

Because you can first look at the extension, then decide whether to
add_handler()?, e.g.:

	if ext == ".foo":
		req.add_handler("PythonHandler", myfoohandler)
	else:
		# do something else

Grisha

From fitnah55 at hotmail.com  Thu Jun 12 14:37:48 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <3EE8A715.3090405@sjsoft.com>
Message-ID: <000001c33111$b8e44ac0$18c0c20a@computer>

once upon a time StarMedia's "geocities" like product ran on
mod_python..

re: 28M guest users and 1.5M subscribers

3 ultra sparcs.. f5 load balancer.. terabyte raid behind it..

it's not designed to be plug and play though.. if you want to get expert
functionality out of it you have to know how to design expert
functionality

there's plenty of horrible persistent java setups out there, mod_python
is
never that bad

tweak up on your multiplexing skills make sure you follow the
application
path exactly as it really is under the hood, and you're as good as
golden

solaris context switching is still superior I believe, but the new xeon
architecture seems promising as long as you design around it

unfortunately my xeon box w/ hyperthreading is not my dev box :/  can't
comment more on that

From gstein at lyra.org  Thu Jun 12 15:12:44 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3k7btrzbi.fsf@ferret.object-craft.com.au>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
Message-ID: <20030612221244.GB29668@lyra.org>

On Wed, Jun 11, 2003 at 02:52:01PM +1000, Dave Cole wrote:
> >>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:
> 
> Michael> I'll give a second on ezt.py; even though Albatross is my
> Michael> first choice.  Ezt.py follows many of the same ideals of
> Michael> Albatross when it comes to templates, and also is not geared
> Michael> only for the web like albatross so it can be handly in other
> Michael> apps too.
> 
> Just had a look at ezt.py.  It is very similar in structure and
> approach to the Albatross templates.  Looking at the CVS logs it seems
> like ezt.py and Albatross sprung into existence at almost the same
> time.  Bizarre.

The CVS logs from edna are the original location. It was started in February
2001. Then I copied a version over into ViewCVS. Then another copy over into
SubWiki. Oh, and there is a copy in Subversion now -- we use it in the build
system for generating MSVC Project files (.dsp and .dsw) and for VC.Net
files. I also have a couple home projects that use it.

One of these days (with all that spare time), I'm going to create a little
SVN project area and check in the "reference copy" there, and maintain it
there. Then, in SubWiki and SVN (at least), I can simply use the
svn:externals feature to yank it into my projects. Eventually, I'll get
ViewCVS and edna into SVN and they can directly reference it too...

Oh, just for a bit more time each day... :-)

But yes, there are some similarities to Albatross. But it seems like
Albatross has variables and also makes function calls explicit. I wonder,
though: can Albatross be used outside of a markup-based system? Does it
assume and take advantage of within-markup-style-text templating?

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From djc at object-craft.com.au  Fri Jun 13 12:14:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <20030612221244.GB29668@lyra.org>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
	<20030612221244.GB29668@lyra.org>
Message-ID: <m3llw6k9kw.fsf@ferret.object-craft.com.au>

>>>>> "Greg" == Greg Stein <gstein@lyra.org> writes:

Greg> But yes, there are some similarities to Albatross. But it seems
Greg> like Albatross has variables and also makes function calls
Greg> explicit. I wonder, though: can Albatross be used outside of a
Greg> markup-based system? Does it assume and take advantage of
Greg> within-markup-style-text templating?

Some of the tags rely on functionality in the application framework,
but most don't.  You get quite precise control over the text that is
produced.

Check this out.  It is a standalone program that only uses the
templating functionality.

   http://www.object-craft.com.au/projects/albatross/albatross/tug-tree.html

- Dave

-- 
http://www.object-craft.com.au

From skremer at q.cis.uoguelph.ca  Fri Jun 13 14:37:23 2003
From: skremer at q.cis.uoguelph.ca (Stefan C. Kremer)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Server side includes.
Message-ID: <Pine.LNX.4.44.0306131431420.22685-100000@q.cis.uoguelph.ca>


Is there any easy way to perform server side include type processing with 
my mod_python handler?

I have written a handler which delivers *.html files *.shtml files, etc. 
and also runs *.py scripts and also handles *.cgi, but I would like to 
post process each of these using the standard server-side include type 
processing.

I realize that I could write the code to do it manually in my handler, but 
am wondering if there is a better way.

Thanks,

	-SK

-- 
--
Dr. Stefan C. Kremer, Associate Prof.
Reynolds Building, 106
Dept. of Computing and Information Science
University of Guelph, Guelph, Ontario	N1G 2W1

WWW: http://q.cis.uoguelph.ca/~skremer
Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
E-mail:  skremer@uoguelph.ca

From neel at mediapulse.com  Fri Jun 13 14:54:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Server side includes.
Message-ID: <C0FC22C08B82074A88B50061764157776B9531@johnson.mediapulse.net>

If you are using Apache 2.0; then you can chain together content
handlers to do this (or so I've been told but I've yet to try it).  If
you are using Apache 1.3 then you'll have to handle it yourself, or not
handle .shtml files (which may or may not be an option depending on what
you are doing).

HTH,
Mike

     > -----Original Message-----
     > From: Stefan C. Kremer [mailto:skremer@q.cis.uoguelph.ca] 
     > Sent: Friday, June 13, 2003 2:37 PM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Server side includes.
     > 
     > 
     > 
     > Is there any easy way to perform server side include 
     > type processing with 
     > my mod_python handler?
     > 
     > I have written a handler which delivers *.html files 
     > *.shtml files, etc. 
     > and also runs *.py scripts and also handles *.cgi, but I 
     > would like to 
     > post process each of these using the standard 
     > server-side include type 
     > processing.
     > 
     > I realize that I could write the code to do it manually 
     > in my handler, but 
     > am wondering if there is a better way.
     > 
     > Thanks,
     > 
     > 	-SK
     > 
     > -- 
     > --
     > Dr. Stefan C. Kremer, Associate Prof.
     > Reynolds Building, 106
     > Dept. of Computing and Information Science
     > University of Guelph, Guelph, Ontario	N1G 2W1
     > 
     > WWW: http://q.cis.uoguelph.ca/~skremer
     > Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
     > E-mail:  skremer@uoguelph.ca
     > 
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From dustin at ywlcs.org  Fri Jun 13 15:34:59 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] mod_python proposal
Message-ID: <20030613203459.GF2664@eleanor.internal.ywlcs.org>

I've been thinking a lot about the extensibility requirements of mod_python
users, in light of recent discussion.  Basically, the degree of flexibility
desired of mod_python is the same degree of flexibility delivered by Apache
itself.

To explain in more detail, most of the low-level frameworks people have been
discussing here would be /best/ implemented as an Apache module -- best in
terms of speed, flexibility, configurability, and installability.  In fact,
mod_psp is an Apache module.

mod_python's raison d'etre is to allow Apache modules to be written in
Python.  However, it's grown somewhat beyond that in extent, while also
omitting a few capabilities of native C modules.  My proposal is to separate
and enhance the mod_python core so that it supports the full functionality of
a C module, and no more.  The project would then reference other Apache
modules, coded fully in Python, which implement specific capabilities.  It
would probably also be helpful for mod_python to include some utility
functionality, e.g., query processing, html quoting, etc.

To bring it down to the level of configuration files, I'd like to have this
in my Apache config:

----
LoadModule python_module /path/to/mod_python.so
..
# Parallel to LoadModule, but they're written in Python!
LoadPythonModule mod_psp /path/to/mod_psp.py
LoadPythonModule publisher_module /path/to/publisher.py

..
# and act just like other Apache modules
AddHandler psp-script .psp
..

<VirtualHost ...>
  SetHandler publisher # references publisher_module above
  # publisher module defines its own Apache configs
  PublisherRoot /path/path/path
</VirtualHost>
----

I don't know how possible this is in the specifics, although I think it will
make an interesting project.  As a general design scheme, what do you think?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From michel_ts at yahoo.com.br  Sun Jun 15 12:48:24 2003
From: michel_ts at yahoo.com.br (=?iso-8859-1?q?Michel=20Thadeu?=)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Some problems with mod_python.publisher
Message-ID: <20030615154824.64623.qmail@web40402.mail.yahoo.com>

Hi guys!

I having trouble with mod_python.publisher, I using a apache 1.2.27 and
the mod_python 2.7 (the standard version of debian testing).

I have configured the apache like this:

   <Directory /var/www/modpython>
     AddHandler python-program .py
     PythonHandler mod_python.publisher
   </Directory>

And have made a script named index.py with the next code:

   from mod_python import apache
   def executar(req):
           req.content_type="text/html"
           req.send_http_header()
           req.write('<H1>Some test of executar!</H1>')
           return apache.OK

But when I execute this script, using the next url...

   http://localhost/modpython/index.py/executar

The page is open, rendening html code, and all the things, but with a
error message:

   Some test of executar!
   HTTP/1.1 200 OK Date: Tue, 17 Jun 2003 23:36:26 GMT Server: 
   Apache/1.3.27 (Unix) Debian GNU/Linux mod_python/2.7.8 Python/2.2.2 
   PHP/4.1.2 Connection: close Transfer-Encoding: chunked Content-Type:

   text/html; charset=iso-8859-1
   OK
   The server encountered an internal error or misconfiguration and was

   unable to complete your request.

   Please contact the server administrator, webmaster@capsulecorp and 
   inform them of the time the error occurred, and anything you might 
   have done that may have caused the error.

   More information about this error may be available in the server 
   error log.

But if I use PythonHanldler and name executar as handler, the error is
not shown... I read the last lines of error.log of apache, but I don't
found a critical error:

   [Tue Jun 17 21:42:29 2003] [alert] apache: Could not determine the 
   server's fully qualified domain name, using 127.0.0.1 for ServerName
   [Tue Jun 17 21:42:30 2003] [notice] Apache/1.3.27 (Unix) Debian 
   GNU/Linux mod_python/2.7.8 Python/2.2.2 PHP/4.1.2 configured -- 
   resuming normal operations
   [Tue Jun 17 21:42:30 2003] [notice] suEXEC mechanism enabled 
   (wrapper: /usr/lib/apache/suexec)
   [Tue Jun 17 21:42:30 2003] [notice] Accept mutex: sysvsem (Default: 
   sysvsem)

This is the last errors since the last restart of apache...

Well, I don't know what error I made, can someone help me?

thanks
--
Michel Thadeu Sabchuk
Curitiba - Paran? - Brazil

=====
--
Michel Thadeu Sabchuk
Curitiba/PR

_______________________________________________________________________
Yahoo! Mail
Mais espa?o, mais seguran?a e gratuito: caixa postal de 6MB, antiv?rus, prote??o contra spam.
http://br.mail.yahoo.com/
From gnb at itga.com.au  Mon Jun 16 10:25:38 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing? 
In-Reply-To: Your message of Tue, 10 Jun 2003 02:14:22 -0600.
Message-ID: <200306160025.KAA13272@lightning.itga.com.au>

>    include current directory in path
>    module = __import__(basename, globals(), locals(), [])
>    return sys.path to old layout

This might be your problem.  Inside mod_python the current directory is 
probably "/".  It's not like CGI where the current directory is the CGI dir.



From jafo at tummy.com  Sun Jun 15 18:54:19 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <200306160025.KAA13272@lightning.itga.com.au>
References: <200306160025.KAA13272@lightning.itga.com.au>
Message-ID: <20030616005419.GM8892@tummy.com>

On Mon, Jun 16, 2003 at 10:25:38AM +1000, Gregory Bond wrote:
>>    include current directory in path
>>    module = __import__(basename, globals(), locals(), [])
>>    return sys.path to old layout
>
>This might be your problem.  Inside mod_python the current directory is 
>probably "/".  It's not like CGI where the current directory is the CGI dir.

By "current" directory, I mean the directory that I am currently looking
for the module in.  For example, the directory in "filename" the request
object.

My problem isn't that it's not importing the module.  The problem is
that it seems like mod_python has done something weird and possibly just
wrong with the import semantics, so that if I import a package, modules
within that package aren't available unless I explicitly import them in
the init.

Also, I'm running into cases where I'm setting values within modules in
my handler, and then when I call code in the module those values are
reset.  I've resorted to shoving request-persistent data into
__builtins__, which works around the latter problem, and re-structuring
some code so that my entire object heirarchy *CAN* be imported all at
once.

Sean
-- 
 -rw-rw-rw-:  File permissions of the beast.  (Chuck Phillips)
 mknod /dev/beast c 6 66
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mark at camazotz.com  Mon Jun 16 08:54:20 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Some problems with mod_python.publisher
In-Reply-To: <200306151700.h5FH01BQ015762@slash.mediapulse.com>
Message-ID: <A5558BE2-9FF9-11D7-BFFF-0003939F6178@camazotz.com>

Michel Thadeu <michel_ts@yahoo.com.br> wrote:
>    def executar(req):
>            req.content_type="text/html"
>            req.send_http_header()
>            req.write('<H1>Some test of executar!</H1>')
>            return apache.OK

The publisher handler expects your handler to return the page body 
rather than the status.

   def executar(req):
     return '<H1>Some test of executar!<H1>'

You can still use req.write() if you prefer; in that case, use

   return ''

at the end.

From ballums at swbell.net  Mon Jun 16 09:16:47 2003
From: ballums at swbell.net (Ben Allums)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] mod_python proposal
In-Reply-To: <20030613203459.GF2664@eleanor.internal.ywlcs.org>
Message-ID: <r01050400-1026-2A9B3B4AA00511D7B639003065489174@[216.141.190.73]>

On 6/13/03 at 3:34 PM, dustin@ywlcs.org (Dustin Mitchell) wrote:

> mod_python's raison d'etre is to allow Apache modules to be written
> in Python.  However, it's grown somewhat beyond that in extent, while
> also omitting a few capabilities of native C modules.  My proposal is
> to separate and enhance the mod_python core so that it supports the
> full functionality of a C module, and no more.

Here, here.

I'd like to second this approach.  Keep mod_python focused and complete.


Ben
From vmanera at manord.com  Tue Jun 17 18:42:22 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] 
	mod_python was restarted from apache with error:3221225477
Message-ID: <52DC70C1C1575C418CB033523A29CF141048C0@exchange2000.manord.com>


Today this happened 10 time.  why?

apache version 2.0.46 mod_python version 3.0.3

platform win 2000


apache log:

[Tue Jun 17 09:30:44 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.
[Tue Jun 17 09:30:45 2003] [notice] Parent: Created child process 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(505):
Parent: Sent the scoreboard to the child
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Child process is running
[Tue Jun 17 09:30:45 2003] [info] Parent: Duplicating socket 236 and sending
it to child process 4440
board from the parent.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(623):
Parent: Sent 1 listeners to child 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(582):
Child 4440: retrieved 1 listeners from parent
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Acquired the start mutex.
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Starting 50 worker threads.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 0 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 16 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 27 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 39 starting.
........


Villiam 
From peter at outputdsj.com.au  Fri Jun 20 00:58:09 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Mod_python won't install
Message-ID: <003f01c33673$33a16520$0200a8c0@peterhome>

Hi

I know this is a list for experienced developers but I have ttried the web
to no avail so thought someone here may be able to help with my problems on
installing mod_python.

I am having trouble installing Mod_pythong.

This is my setup:

OS: Windows XP
Web Server: Apache v2.0.46
Mod_python install: v3.0.3.0

I also have PHP installed

I added the line:

LoadModule python_module modules/mod_python.so

to my httpd.conf file (the location is correct).

But then as soon as I try starting Apache after entering this line and
saving the config file, it fails to start. I then comment the line out and
everything works OK again.

These lines in my error.log may be of interest:

[Fri Jun 20 00:52:48 2003] [notice] Child 1184: Exit event signaled. Child
process is ending.
[Fri Jun 20 00:52:48 2003] [warn] (OS 995)The I/O operation has been aborted
because of either a thread exit or an application request.  : winnt_accept:
Asynchronous AcceptEx failed.

Can anyone point me in the right direction here.

Thanks
Peter




***********************************************************************
This e-mail message, including any attachments, is for the sole use of the
intended recipient(s) and may contain confidential
and privileged information.  No-one else may read, print, store, copy,
forward or act in reliance on all or any of it or its attachments.  If you
receive this e-mail in error, please telephone us on 1300 302 115 or contact
the sender by reply e-mail and destroy all copies of the original message.
Thank you.
***********************************************************************


From bill at rfa.org  Fri Jun 20 10:23:42 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] mod_python on Windows with Python 2.3b1?
Message-ID: <3EF318EE.4000709@rfa.org>


Trying to run mod_python on Apache 2.0.46
on WIn2K using Python 2.3b1, as soon as
I uncomment the LoadModule line for mod_python.so,
Apache won't start up (even though it seems
to get past loading the mod_python module,
but gives no message on why it dies).

I'm not compiling myself, using the straight
binaries downloaded from Apache and Sourceforge.
Any ideas?

Thanks,
Bill

From mod_python at ols.inorganic.org  Sun Jun 22 12:59:08 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values
Message-ID: <20030622195908.GA23104@nag.inorganic.org>

Greetings all,

I'm working on my first real useful mod_python project and I'm finding that
I feel a little clueless here.

I've got an authent handler that works perfectly; one of the things it does
is create a ConfigParser object.  

Now, I want that object to be available for other parts of this
interpreter.  Specifically:

http://mydomain.com/directory

is controlled by dispatcher.py's authenhandler (the function that creates
the configparser object).  

http://mydomain.com/directory/dispatcher.py/init

is, obviously, the init function in dispatcher.py (using the Publisher
handler).  I'd like that function to have access to the CP object without
having to re-initialize the object (after all, that's the whole point of
mod_python).  Simply referring to the same value results in "NameError:
global name 'configp' is not defined."

Suggestions of which part of the documentation to re-read?

-roy


From gnb at itga.com.au  Mon Jun 23 10:12:22 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values 
In-Reply-To: Your message of Sun, 22 Jun 2003 12:59:08 -0700.
Message-ID: <200306230012.KAA00095@lightning.itga.com.au>

> Suggestions of which part of the documentation to re-read?

You need persistent session information.  Check the FAQ 3.8
	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp


From dustin at ywlcs.org  Sun Jun 22 19:20:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values
In-Reply-To: <200306230012.KAA00095@lightning.itga.com.au>
References: <200306230012.KAA00095@lightning.itga.com.au>
Message-ID: <20030623002013.GG14253@eleanor.internal.ywlcs.org>

On Mon, Jun 23, 2003 at 10:12:22AM +1000, Gregory Bond wrote:
> > Suggestions of which part of the documentation to re-read?
> 
> You need persistent session information.  Check the FAQ 3.8
> 	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp

If I understood the question correctly, Mr. Bond needed to know how to keep
information from one handler to another in the same request.  If that ws
indeed what he meant, then the solution is to attach the information to the
request, e.g.

(authenhandler)
  req.cp = my_config_parser
...
(handler)
  config_parser = req.cp

works like a charm.  Just be careful not to create a reference loop (e.g.,
don't let the config parser have a reference to req buried inside of it..).
This has caused memory leakage for me in the past.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From bill at rfa.org  Mon Jun 23 11:57:33 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <14348759489.20030621002129@centurytel.net>
References: <14348759489.20030621002129@centurytel.net>
Message-ID: <3EF7236D.70907@rfa.org>

Brian Lenihan wrote:

>You are both having similar problems according to your posts to the
>mod_python list.
>
>For unknown reasons, the mod_python binary is compiled using MSVC 7,
>which is a problem for most people.
>
>The instructions here:
>
>http://www.modpython.org/pipermail/mod_python/2002-December/002714.html
>
>still apply to mod_python 3.0.3
>
>The mod_python binary available from apache.org is linked to Python
>2.2, so you can't use Python 2.3, Bill, you have to use 2.2.x.  I am
>currently using 2.2.3 without any problems.
>  
>
Okay, it loads with 2.2.3, but I'm getting the ImportError: No module 
named _apache
from my cgi-bin (when run from within Apache, *NOT* from the the command 
line.
Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
I assume should be loaded from the c:\Program Files\Apache 
Group\Apache2\modules dir,
with the LoadModule python-module modules/mod_python.so  directive, but 
doesn't
seem to be).

Thanks,
Bill

>Apache2 requires XP service Pack 1, Peter, so that may be why you
>are having problems with Apache, in addition to the mod_python crash
>at start up.
>  
>


From peter at outputdsj.com.au  Mon Jun 23 21:06:05 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Re: mod_python on Windows
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org>
Message-ID: <001901c33977$7342e080$0200a8c0@peterhome>

// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
// named _apache
// from my cgi-bin (when run from within Apache, *NOT* from the the command
//l ine.
// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
// I assume should be loaded from the c:\Program Files\Apache
// Group\Apache2\modules dir,
// with the LoadModule python-module modules/mod_python.so  directive, but
// doesn't
// seem to be).

With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
got the ole fave "Hello World" to work a few times.

Now when I run it mod_python loads OK but I get the following error: I guess
some changes I made to the Apache config file caused the problem. Buggered
if I know what. So if anyone has any ideas I will be more than welcome to
hear them.

Anyhow here's the error:

Mod_python error: "PythonHandler test"

Traceback (most recent call last):

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 320, in
HandlerDispatch
    module = import_module(module_name, config)

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 499, in
import_module
    module = imp.load_module(mname, f, p, d)

  File "C:/Program Files/Apache Group/Apache2/htdocs/music/\test.py", line 2

    def handler(req):

    ^

SyntaxError: invalid syntax



From bill at rfa.org  Mon Jun 23 14:39:55 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <001901c33977$7342e080$0200a8c0@peterhome>
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org> <001901c33977$7342e080$0200a8c0@peterhome>
Message-ID: <3EF7497B.2080601@rfa.org>

Peter Brown wrote:

>// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
>// named _apache
>// from my cgi-bin (when run from within Apache, *NOT* from the the command
>//l ine.
>// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
>// I assume should be loaded from the c:\Program Files\Apache
>// Group\Apache2\modules dir,
>// with the LoadModule python-module modules/mod_python.so  directive, but
>// doesn't
>// seem to be).
>
>With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
>got the ole fave "Hello World" to work a few times.
>
>Now when I run it mod_python loads OK but I get the following error: I guess
>some changes I made to the Apache config file caused the problem. Buggered
>if I know what. So if anyone has any ideas I will be more than welcome to
>hear them.
>  
>

You should only need something in your <directory cgi-bin> like:
<Directory "C:/Program Files/Apache Group/Apache2/cgi-bin">^M
    AllowOverride None^M
    Options None^M
    Order allow,deny^M
    Allow from all^M
    AddHandler python-program .pys
    PythonHandler myhandler
    PythonDebug On
<directory "c:/Program Files/Gpache Group

which will send anything to a name (existing or not) like "bill.pys"
off to cgi-bin/myhandler.py

(my guess is you messed up the AddHandler or PythonHandler statements)

I also had some luck doing this with Python 2.3, but made some changes
and never made it back to Kansas. Basically, I was just binary editing
the DLL and changing the one occurence of python22.dll to python23.dll.
Mostly caused no harm :()

From jafo at tummy.com  Mon Jun 23 15:30:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623002013.GG14253@eleanor.internal.ywlcs.org>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
Message-ID: <20030623213027.GC4640@tummy.com>

On Sun, Jun 22, 2003 at 07:20:13PM -0500, Dustin Mitchell wrote:
>(handler)
>  config_parser = req.cp
>
>works like a charm.  Just be careful not to create a reference loop (e.g.,
>don't let the config parser have a reference to req buried inside of it..).

I didn't realize that you could set values on the request...
Unfortunately, in my case I am calling into the SimpleTAL code and that
is calling back into my code, by which point I no longer have access to
the request object.

One of the weirdnesses I've found about mod_python is that it seems to
be losing values that I set on module-level name-spaces.  If I import a
module, set a value on it, then later try to access it, sometimes it
works and sometimes it doesn't.  This may or may not be related to the
weirdness about how mod_python imports modules or PythonAutoReload...

I've finally just broken down and set up an object in __builtins__ that
I store request-related data on (including a link to the request and
other information).  I hate doing it this way, but it has allowed me to
reliably set and get data that I need to get access to.

Sean
-- 
 If we don't survive, we don't do anything else.
                 -- John Sinclair
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From grisha at modpython.org  Mon Jun 23 18:31:47 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623213027.GC4640@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com>
Message-ID: <20030623182702.U2204@onyx.ispol.com>



On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> One of the weirdnesses I've found about mod_python is that it seems to
> be losing values that I set on module-level name-spaces.  If I import a
> module, set a value on it, then later try to access it, sometimes it
> works and sometimes it doesn't.

If you could come up with a way to replicate this weirdness, that would be
great.

> This may or may not be related to the weirdness about how mod_python
> imports modules or PythonAutoReload...

There isn't anything unusual about the way mod_python imports modules.
PythonAutoReload can yeld strange results after a lot of changes and a lot
of reloading, but that's not unusual during development. A cleanly started
Apache should (and does for me at least) behave 100% predictably.

Grisha
From jafo at tummy.com  Mon Jun 23 16:56:38 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623182702.U2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
Message-ID: <20030623225638.GC4076@tummy.com>

On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
>There isn't anything unusual about the way mod_python imports modules.

Someone on this list replied to one of my earlier messages and said that
mod_python hooks into the import mechanism for some reason.

There definitely are issues related to importing of packages...  From
mod_python, if I import a package that has a module within it, I can't
access that name unless the package __init__.py imports that name.  For
example, the following works from Python:

   guin:p$ mkdir pkg
   guin:p$ echo >pkg/__init__.py
   guin:p$ echo 'foo = "bar"' >pkg/baz.py
   guin:p$ python -c 'from pkg import baz; print baz.foo'
   bar
   guin:p$

IIRC, in mod_python that would give me an AttributeError on the "from
pkg import baz", unless I do:

   echo 'import baz' >pkg/__init__.py

Of course, this means that my entire package structure must be imported
through the __init__.py files, even if not all of it is used.  Worse,
this means that I can't have a module which imports another module, that
imports the first module...

>PythonAutoReload can yeld strange results after a lot of changes and a lot
>of reloading, but that's not unusual during development. A cleanly started
>Apache should (and does for me at least) behave 100% predictably.

That's not been my experience, where "predictably" is defined as
"behaving as I expect Python code to".  I mean, it's predictable in it's
unpredictability.  ;-)

Sean
-- 
 What we see depends on mainly what we look for.
                 -- John Lubbock
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From gnb at itga.com.au  Tue Jun 24 10:21:36 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Re: mod_python on Windows 
In-Reply-To: Your message of Mon, 23 Jun 2003 21:06:05 +1000.
Message-ID: <200306240021.KAA19222@lightning.itga.com.au>

>     def handler(req):
> 
>     ^
> 
> SyntaxError: invalid syntax

This really looks like a plain python indentation/whitespace error, not a
mod_python thing.  Can you run "python test.py" without syntax errors? (I know
it will fail in the import stage, but your error message says it isn't even
getting that far.)


From grisha at modpython.org  Mon Jun 23 21:28:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623225638.GC4076@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com><20030623225638.GC4076@tummy.com>
Message-ID: <20030623212426.H2204@onyx.ispol.com>


I just tried it and it works fine for me. I followed the steps you
outlined with "/home/grisha/www/htdocs" as my current directory, here is
an excerpt from apache config:

LoadModule python_module modules/mod_python.so

<Directory /home/grisha/www/htdocs>
        SetHandler python-program
        PythonHandler blah
</Directory>

And here is /home/grisha/www/htdocs/blah.py:


from mod_python import apache

from pkg import baz

def handler(req):
    req.write(baz.foo)
    return apache.OK


There's got a detail that I'm missing here.

Grisha

On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
> >There isn't anything unusual about the way mod_python imports modules.
>
> Someone on this list replied to one of my earlier messages and said that
> mod_python hooks into the import mechanism for some reason.
>
> There definitely are issues related to importing of packages...  From
> mod_python, if I import a package that has a module within it, I can't
> access that name unless the package __init__.py imports that name.  For
> example, the following works from Python:
>
>    guin:p$ mkdir pkg
>    guin:p$ echo >pkg/__init__.py
>    guin:p$ echo 'foo = "bar"' >pkg/baz.py
>    guin:p$ python -c 'from pkg import baz; print baz.foo'
>    bar
>    guin:p$
>
> IIRC, in mod_python that would give me an AttributeError on the "from
> pkg import baz", unless I do:
>
>    echo 'import baz' >pkg/__init__.py
>
> Of course, this means that my entire package structure must be imported
> through the __init__.py files, even if not all of it is used.  Worse,
> this means that I can't have a module which imports another module, that
> imports the first module...
>
> >PythonAutoReload can yeld strange results after a lot of changes and a lot
> >of reloading, but that's not unusual during development. A cleanly started
> >Apache should (and does for me at least) behave 100% predictably.
>
> That's not been my experience, where "predictably" is defined as
> "behaving as I expect Python code to".  I mean, it's predictable in it's
> unpredictability.  ;-)
>
> Sean
> --
>  What we see depends on mainly what we look for.
>                  -- John Lubbock
> Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
> tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
>
From jafo at tummy.com  Mon Jun 23 21:33:24 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623212426.H2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
	<20030623225638.GC4076@tummy.com> <20030623212426.H2204@onyx.ispol.com>
Message-ID: <20030624033324.GE4076@tummy.com>

On Mon, Jun 23, 2003 at 09:28:58PM -0400, Gregory (Grisha) Trubetskoy wrote:
>I just tried it and it works fine for me. I followed the steps you
>outlined with "/home/grisha/www/htdocs" as my current directory, here is
>an excerpt from apache config:

Ugh, you are right and I am wrong...  I don't actually use packages very
often, and when I was seeing decidedly different behavior from
mod_python and the interpreter, it must have been using two different
versions of the package when I thought I was using one.

Sorry about that.

Thanks,
Sean
-- 
 A computer is like an Old Testament god, with a lot of rules and no mercy.
                -- Joseph Campbell
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mod_py at ua.fm  Tue Jun 24 11:11:09 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] global persistence
Message-ID: <web-26094356@ua.fm>

Greetings to all,

I'm using Apache 1.3.24 + mod_py 2.7.8.

The idea is to make mod_py have global variables that 
will be accessible from any request untill apache restarts.

I added another dictionary to mod_python.c next to 

	static PyObject * interpreters = NULL;
like:
	PyObject * python_globals = NULL;
	
I initialize it on apache start in
	void python_init(server_rec *s, pool *p)	
like:
	if (!python_globals)
	{
		python_globals = PyDict_New();
		ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, s,
			 "python_init: Initializing globals dict");
	}
	
and logging shows it really initializes once per apache start.

then I just trying to use it via req object (maybe not the best way but 
fastest to me)
I define it as attribute '__globals__' of req object 
so it's accessible as req.__globals__
module requestobject.c
procedure 
static PyObject * request_getattr(requestobject *self, char *name)

like:
	else if (strcmp(name, "__globals__") == 0)
	{
		Py_INCREF(python_globals);
		return (PyObject *) python_globals;
	}

works fine with single apache child process.
means I can set 
	req.__globals__[key] = anyobject
and read it in next page hit
	anyobject = req.__globals__[key]
	
but when I start to use few such apache processes (access it from diff ip) I 
have strange situation.

req.__globals__ has same physical address like 0x810108c but different 
content.

Even dumping that 'python_globals' dictionary in requestobject.c shows 
different content of PyDict object.

It looks like each apache child process has own address space and same address 
points 
to physically different memory.

Any suggestion has can I fix that?

Thanx,
Anatoly Artamonov
----

-> CTAPT -> http://start.alkar.net 
From tuan-huy.la at muenchen.de  Tue Jun 24 17:01:12 2003
From: tuan-huy.la at muenchen.de (Tuan-Huy La)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] Can't compile mod_python-3.0.3 on solaris 8 (sparc)
Message-ID: <3EF867B8.70805@muenchen.de>

I'm trying to install mod_python-3.0.3 on a sparc machine  running 
solaris 8, Apache 2.0.46, gcc 3.2.3, gnu ld 2.11.2 (binutil) and Python 
2.2.3.

I always get the following error when trying the make (gnu make 3.79) 
command:

(last few lines:)
    ...
    <unknown>                           0x12f8      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    <unknown>                           0x12fc      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x140       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x3c8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    PyTuple_Fini                        0x1974      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    PyTuple_Fini                        0x1b40      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    _PyObject_GC_Resize                 0x2cc       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_Resize                 0x3a8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    ld: fatal: relocations remain against allocatable but non-writable 
sections
    collect2: ld returned 1 exit status
    apxs:Error: Command failed with rc=65536
    .
    make[1]: *** [mod_python.so] Error 1
    make[1]: Leaving directory `/export/home/root/mod_python-3.0.3/src'
    make: *** [do_dso] Error 2

What's wrong? Any ideas?

From azaroth at liverpool.ac.uk  Tue Jun 24 18:28:47 2003
From: azaroth at liverpool.ac.uk (Dr Robert Sanderson)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
Message-ID: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>


When trying to write a trivial connection handler that only works when 
accessed from a certain port, I found that trying to 
read connection.local_addr results in a seg fault.

I'm running:
Server version: Apache/2.0.40
Server built:   May 20 2003 10:15:29

Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current 
Redhat RPM.

My server config addition looks like:
Listen 2100
PythonPath "sys.path+['/home/cheshire/']"
PythonConnectionHandler ztest
PythonDebug On

And then /home/cheshire/ztest.py reads:

-------------
from mod_python import apache
def connectionhandler(conn):
    conn.write("Trying to do something ...")
    try:
        conn.write(repr(conn.local_addr))
    except Exception, err:
        conn.write("Broke")
    conn.write("Done it.")
    return apache.OK
-------------

[cheshire@mithlond cheshire]$ telnet localhost 2100
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Trying to do something ...Connection closed by foreign host.

[Tue Jun 24 18:14:39 2003] [notice] mod_python: (Re)importing module 'ztest'
[Tue Jun 24 18:14:40 2003] [notice] child pid 2193 exit signal Segmentation 
  fault (11)

Any ideas?  Has this been fixed in a more recent version, and I should get 
stuck in and recompile everything from source?

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Tue Jun 24 14:14:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:31 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030624140701.M38636@onyx.ispol.com>


On Tue, 24 Jun 2003, Dr Robert Sanderson wrote:

>
> When trying to write a trivial connection handler that only works when
> accessed from a certain port, I found that trying to
> read connection.local_addr results in a seg fault.
>
> I'm running:
> Server version: Apache/2.0.40
> Server built:   May 20 2003 10:15:29
>
> Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> Redhat RPM.

2.0.40 is a version of Apache a few major releases and almost a year
behind...

Connection support in 3.0.1 is very immature, you should really upgrade to
apache 2.0.46 and mod_python 3.0.3.

Grisha
From gnb at itga.com.au  Wed Jun 25 09:10:01 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence 
In-Reply-To: Your message of Tue, 24 Jun 2003 11:11:09 +0300.
Message-ID: <200306242310.JAA05334@lightning.itga.com.au>

> It looks like each apache child process has own address space and same addres
> s 
> points 
> to physically different memory.
> 
> Any suggestion has can I fix that?

That's true.  When the Apache process forks, each child process has different 
copy of the address space.  Same address, different contents.
You will need to use some explicity shared memory, either from a mmap'd file or
a shm segment.  This will imply a custom memory allocator and custom malloc()/
free() - like functions.  But you will need to make python use this shared
memory, and I have no idea if that is possible.


From jgardner at jonathangardner.net  Tue Jun 24 17:07:29 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26094356@ua.fm>
References: <web-26094356@ua.fm>
Message-ID: <200306241707.30622.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 01:11, 1 1 wrote:
> Greetings to all,
>
> I'm using Apache 1.3.24 + mod_py 2.7.8.
>
> The idea is to make mod_py have global variables that
> will be accessible from any request untill apache restarts.
>

Start over. Rethink what you are trying to do.

Let's examine things fundamentally. How does apache work? It listens on port 
80. It spawns a bunch of children. When it gets an incoming connection, it 
passes the connection off to one of the children.

These children are seperate processes. There is no way for them to 
communicate with each other outside of pipes and shared memory. (Well, 
there are other ways, but they aren't as useful as you would hope).

So far, no one has figured out how to use shared memory and python. However, 
everyone and their sister knows how to use pipes. It's called "sockets" and 
you can use TCP over IP or one of a million other protocols.

So, these processes have to communicate with each other. How are they going 
to find each other, let alone let each other know when something changes 
and how it changes? Why, we need a central location for all of them to call 
in to. Let's call it a server.

And what will this server do? It will hold data. Maybe we should call it a 
"database". So, any process running out in the wild can connect to this 
database, grab data, change data, and everyone will work together.

That's your "global variables" accessible anywhere. That's the current best 
way to do it. You'll find a terrifying amount of research done on 
everything you can possibly imagine doing with a database.

I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
Oracle, or Sybase.

So go start learning about databases, and how best to use them! ;-)

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++OfBWgwF3QvpWNwRAsq8AKC0R3Xp1xmJDWu6cmUD2KDTNo9EbgCgiODn
yVGztiDpf5ZizHramVNSUw8=
=RvEH
-----END PGP SIGNATURE-----


From grisha at modpython.org  Wed Jun 25 00:16:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625001438.M40924@onyx.ispol.com>



On Tue, 24 Jun 2003, Jonathan Gardner wrote:

> So far, no one has figured out how to use shared memory and python.

http://www.python.org/doc/current/lib/module-mmap.html

http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

:-)

Grisha
From mod_python at mikebell.org  Tue Jun 24 21:27:23 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <20030625042723.GR1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> http://www.python.org/doc/current/lib/module-mmap.html

The only problem with the mmap module is that it just gives you a
string-like object. How do you put something like a mutex in there so
you can access the shared memory area safely?
From mod_python at mikebell.org  Tue Jun 24 21:32:50 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625043250.GS1198@netvista.mikebell.org>

On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
> Oracle, or Sybase.
> 
> So go start learning about databases, and how best to use them! ;-)

Of course, some people prefer not to use a giant, bloated SQL database
every time they need to store any sort of data. :-)

If your data storage needs are a little less complicated and you're
having trouble justifying SQL, try something like berkeley db or just
the filesystem.
From grisha at modpython.org  Wed Jun 25 00:40:41 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625042723.GR1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
Message-ID: <20030625003543.O40924@onyx.ispol.com>


On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:

> On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > http://www.python.org/doc/current/lib/module-mmap.html
>
> The only problem with the mmap module is that it just gives you a
> string-like object. How do you put something like a mutex in there so
> you can access the shared memory area safely?
>

To quote Guido - "Good question!"

(here is the link
http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

:-)

OK, on a serious note - I believe the shm module provides locking. I'm
also going to look into the APR for possibly including some locking
interface in the next version of mp.

Grisha

From mod_python at mikebell.org  Tue Jun 24 21:48:09 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
	<20030625003543.O40924@onyx.ispol.com>
Message-ID: <20030625044808.GT1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:40:41AM -0400, Gregory (Grisha) Trubetskoy wrote:
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

For anyone who's curious, you _can_ do it by using fcntl's file locking
before making any changes to your shared memory region, but this means
you only get one lock per file. So if you've got one variable, just lock
the file you're mmaping. If you've got dozens, you're going to need a
lot of lockfiles.

From jakubec at san.rr.com  Tue Jun 24 22:11:10 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001c01c33ad8$31f56aa0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.


From sterling at bumblebury.com  Wed Jun 25 01:16:51 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	 <200306241707.30622.jgardner@jonathangardner.net>
	 <20030625042723.GR1198@netvista.mikebell.org>
	 <20030625003543.O40924@onyx.ispol.com>
Message-ID: <1056518211.28555.72.camel@hasele>

The way you handle locking with mmap() is by using a combination of a
file and a mmap(), it isn't that expensive so long as MAP_NOSYNC is
specified (if MAP_NOSYNC isn't specified than most operating systems
default to it).  

Outside of that, the proper way to do this is to use a semaphore.

-Sterling

On Wed, 2003-06-25 at 00:40, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:
> 
> > On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > > http://www.python.org/doc/current/lib/module-mmap.html
> >
> > The only problem with the mmap module is that it just gives you a
> > string-like object. How do you put something like a mutex in there so
> > you can access the shared memory area safely?
> >
> 
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)
> 
> :-)
> 
> OK, on a serious note - I believe the shm module provides locking. I'm
> also going to look into the APR for possibly including some locking
> interface in the next version of mp.
> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
"Programming today is a race between software engineers stirring to  
 build bigger and better idiot-proof programs, and the universe trying  
 to produce bigger and better idiots. So far, the universe is winning." 
    - Unknown
From mod_py at ua.fm  Wed Jun 25 09:58:01 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
Message-ID: <web-26333903@ua.fm>

>>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
>>Oracle, or Sybase.
>>So go start learning about databases, and how best to use them! ;-)

Yes, I'm using PgSQL and have possibly hundreds of simultaneous connections.
That's why I tried to cache all in memory.
Thanx for advice anyway.

----

-> CTAPT -> http://start.alkar.net 
From mod_py at ua.fm  Wed Jun 25 10:18:02 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence 
In-Reply-To: <200306242310.JAA05334@lightning.itga.com.au>
Message-ID: <web-26336311@ua.fm>


> You will need to use some explicity shared memory, either from a mmap'd file 
> or
> a shm segment.  This will imply a custom memory allocator and custom 
> malloc()/
> free() - like functions.  But you will need to make python use this shared
> memory, and I have no idea if that is possible.

yes, there's shm module for py
I actually learned all about it before post to conference.
Problem with it - it provides file-like behaviour.
So I can use files as well (but without locking shm module provides).
But I have to store my data after each change.
Storing to file (or shm memory) mean pickle/unpickle.
While placing object in shared memory with direct access would save a lot of 
hassle.
So actually I was hoping someone will tell me how to allocate py object in 
apache 2.0 shared memory and attach that space to python interpreter address 
space (is such things are possible)
----

-> CTAPT -> http://start.alkar.net 
From jgardner at jonathangardner.net  Wed Jun 25 06:54:41 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <200306250654.42792.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:16, Gregory (Grisha) Trubetskoy wrote:
>
> http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html
>

This is the way to go in "1 1"'s case. I have been looking for a shared memory 
module for python for the longest time, and now I am happy that you pointed 
it out.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++amhWgwF3QvpWNwRAsKNAJ9B5+xcxzXKfgfUHcLd7qsCyEZWpgCdHec1
UF+Y027v3sEu547f+OvqPwQ=
=Qukb
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 06:58:45 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625043250.GS1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
Message-ID: <200306250658.46386.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:32, mod_python@mikebell.org wrote:
> On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> > I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> > Server, Oracle, or Sybase.
> >
> > So go start learning about databases, and how best to use them! ;-)
>
> Of course, some people prefer not to use a giant, bloated SQL database
> every time they need to store any sort of data. :-)
>

So don't use SQL Server, Oracle, Sybase or MySQL. Use PostgreSQL. ;-)

> If your data storage needs are a little less complicated and you're
> having trouble justifying SQL, try something like berkeley db or just
> the filesystem.

This is equally valid. My problem is that every time I get to start using one 
of these, it ends up with so much data that I should've gone with the 
database from the very beginning. If you *know* your data set is never going 
to get very large, then using files or Berkeley DB is a very, very good idea.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++aqVWgwF3QvpWNwRArz4AJ4s3bBs8sfTxBBY268ZdAa1eFNHIQCfTx6R
yKehz2nY6SKKDcowthMhC9c=
=BObc
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:01:12 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <200306250701.14900.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 23:58, 1 1 wrote:
> >>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> >> Server, Oracle, or Sybase.
> >>So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.
>

In this case, if you are just caching some data, just have the processes query 
the database and cache it once. Then you can just use the cache for every 
subsequent result. Or you can store it in the modules hard-coded, and just be 
very careful not to change it during the lifetime of the processes.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++asoWgwF3QvpWNwRAjlJAJ4rxu6qOQnTpg1FBdBRi4gCaZLSaACeLY4p
zNL5/N1kVTZx3tzYzjmV65A=
=JnBM
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:32:14 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <200306250732.15699.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I am thinking of implementing a shared memory module that does more than just 
"read" and "write". Instead, I want something more transparent to the 
developer, so that you say "Go get this dict at this shared memory key" or 
"Create a new dict in shared memory at this key", and have the entire dict 
available like a namespace.

Obvious applications would include the ever-present problem of shared data 
between apache mod_python processes. This would solve it once and for all. 
Perhaps one day we could get it working with RPC and have processes on 
seperate machines sharing data as well.

The scope of this project would be implimenting new types that derive from all 
of the basic types so that:

1) When accessing the data in the type, it would gain a lock on the shared 
memory segment that stores its data using a semaphore, read the data and 
unserialize it, then return that data.
2) When storing the data in that type, it would gain a lock on the shared 
memory segment, then store the data over the existing data.

I am thinking there are really two ways to go about this.
1) Implementing it all in Python. The idea here would be that we would 
serialize and unserialize the data using cPickle.
2) Implementing it all in C. The idea here is that we would reuse the same 
data structures that the basic data types use. We would store and read the 
binary data behind the basic data types so that they can be as easily stored 
in shared memory as they are stored in real memory.

Does anyone know if something like this is implemented or in the process of 
being implemented? Does anyone want to join me in this endeavor? 

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
/ID5Uq/oK8hAYQfmvvIGliE=
=4zo4
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 25 07:59:56 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <2147483647.1056527996@[10.0.1.2]>

--On 25 Wednesday, June 2003 09:58 +0300 1 1 <mod_py@ua.fm> wrote:

>>> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
>>> Server,  Oracle, or Sybase.
>>> So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.

Is there any reason why you haven't used the ZODB for this? With ZEO, 
you can access persistent values from multiple processes. As long as 
your application doesn't heavily write to the same objects, it should 
be just what you need (and has been tested and deployed in quite large 
environments.)

Here's an intro:
<http://www.amk.ca/zodb/zodb-zeo.html>

Here's where to get it:

<http://www.zope.org/Products/StandaloneZODB>

~mindlace
http://mindlace.net
From vlindberg at verio.net  Wed Jun 25 10:43:44 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <3EF9D140.6010108@verio.net>


>Does anyone know if something like this is implemented or in the process of 
>being implemented? Does anyone want to join me in this endeavor? 
>

I haven't used it, but I think that POSH is what you are looking for:

http://poshmodule.sourceforge.net/posh/html/

Not sure if it compatible with mod_python.  If it is, though, it sounds 
like exactly what everyone wants.

VanL

From jm at eemsystems.cjb.net  Wed Jun 25 13:04:20 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] value too large for PgNumeric
Message-ID: <1056564260.1950.176.camel@eemsystems.com>

this error:


File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
__init__
    raise OverflowError, "value too large for PgNumeric"



is produced by this query:

"""select  q1.Area,q1.Prop_disponibles,q1.MinCompra,q1.MaxCompra,q1.MinAlquiler,q1.MaxAlquiler from (select  areas.descripcion as Area,count(*) as Prop_disponibles,min(coalesce(prop.precio_venta,0)) as MinCompra,max(coalesce(prop.precio_venta,0)) as MaxCompra,min(coalesce(prop.precio_alquiler,0)) as MinAlquiler,max(coalesce(prop.precio_alquiler,0)) as MaxAlquiler from propiedades prop, tipo_de_propiedades tdp,Sectores sector,areas where prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id and sector.area_id = areas.area_id and prop.sector_area_id = sector.area_id and prop.sector_id = sector.sector_id and prop.propiedad_id in (select fot.propiedad_id from fotos fot where fot.propiedad_id = prop.propiedad_id) and current_date between prop.efectivo_desde and prop.efectivo_hasta and prop.activa = 'Y' and prop.tipo_de_propiedad_id=%s  group by areas.descripcion) as "q1"  order by q1.prop_disponibles desc limit 2;""" % (i[2])))


only for a few alternatives.


Any help? thanks.

jm


-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From mod_python at mikebell.org  Wed Jun 25 12:17:13 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306250658.46386.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
	<200306250658.46386.jgardner@jonathangardner.net>
Message-ID: <20030625191712.GU1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 06:58:45AM -0700, Jonathan Gardner wrote:
> This is equally valid. My problem is that every time I get to start using one 
> of these, it ends up with so much data that I should've gone with the 
> database from the very beginning. If you *know* your data set is never going 
> to get very large, then using files or Berkeley DB is a very, very good idea.

There's no reason not to use either one of those just because your
dataset is going to be large. Berkeley DB in particular is quite good.
You're not using SQL for the backend implementation, you're using it for
the front end, the query language which abstracts away the back end.
From mod_python at ols.inorganic.org  Thu Jun 26 01:04:02 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using mod_python pythonauthenhandler with PSO
Message-ID: <20030626080402.GA6653@nag.inorganic.org>

Hey guys,

Anyone have any experience integrating mod_python with Python Service
Objects?

I've got a problem where if I'm dealing with an authenhandler, I end up
with an error message that says:
---
Mod_python error: "PythonLogHandler pso.modpython::cleanup"

Traceback (most recent call last):

  File
"/usr/local/Python/lib/python2.2/site-packages/mod_python/apache.py", line
332, in HandlerDispatch
    result = object(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/modpython.py",
line 36, in cleanup
    service.cleanup(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/service.py", line
52, in cleanup
    req.pso().close()

AttributeError: 'mp_request' object has no attribute 'pso'
---

I'm pretty sure this is related to authenhandler because if you then try to
access a resource under this directory -- which means that now you're not
going through authenhandler -- it works.


My script looks like this:

---
from mod_python import apache

def foo(req):
	try:
		req.pso().session['visits'] +=1
	except:
		req.pso().session['visits'] =1
	f = "Hello World!  ~ Your visit number: %(visits)d ~ Try Reload !" %  req.pso().session
	return f

def authenhandler(req):
	user = req.user
	pw = req.get_basic_auth_pw()

	if (user == "foo" and pw == "bar"):
		return apache.OK
	else:
		return apache.HTTP_UNAUTHORIZED
---

my .htaccess looks like this:
---
AddHandler python-program .py
PythonHandler mod_python.publisher
pythonauthenhandler quicktest
PythonFixupHandler pso.modpython::fixup
PythonLogHandler pso.modpython::cleanup
PythonDebug On
AuthType Basic
AuthName "Enter your email username and password"
require valid-user
---

To test this:
Go to http://www.inorganic.org/~rsr/python2/quicktest.py/foo
Authenticate with foo/bar
This should pause for a moment and then give you the error message.
If you hit 'reload,' you don't go through authenhandler (since you're
already authenticated) and you get the correct output.

Thoughts?

-roy


From rien at YEEPA.ORG  Thu Jun 26 10:36:08 2003
From: rien at YEEPA.ORG (Adrien Plisson)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] value too large for PgNumeric
References: <1056564260.1950.176.camel@eemsystems.com>
Message-ID: <3EFAB078.2080207@yeepa.org>

Julio Mendoza wrote:
> this error:
> 
> File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
> __init__
>     raise OverflowError, "value too large for PgNumeric"
> 
> is produced by this query:
>       ...
> only for a few alternatives.
 >
> Any help? thanks.

This exception seems to be thrown from PgSQL, so has nothing to do with mod_python.
It may surely tell you that you have to much result to be stored in a variable, 
causing an overflow. try decomposing your query to see which part is erroneous.

by the way, try to simplify your query: this does not seem to be efective...
	prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id
	and prop.tipo_de_propiedad_id=%s
this too...
	prop.propiedad_id in (
			select
				fot.propiedad_id
			from
				fotos fot
			where
				fot.propiedad_id = prop.propiedad_id
		)


-- 
rien

From azaroth at liverpool.ac.uk  Thu Jun 26 13:40:03 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030624140701.M38636@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>


> > Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> > Redhat RPM.
> 2.0.40 is a version of Apache a few major releases and almost a year
> behind...
> Connection support in 3.0.1 is very immature, you should really upgrade to
> apache 2.0.46 and mod_python 3.0.3.

Having upgraded my trivial port checking code works fine. Thanks :)

However, the connection object is a little too high level ... are there 
plans for implementing a lower level 'socket' like interface, rather than 
a blocking line or character reader?  The mod_perl module has this sort of 
interface for example (AFAICT)

For example, I need to be able to consume all of the data currently 
waiting into one chunk to process ... which may or may not end in a 
linebreak character, can be of arbitrary length and the connection 
doesn't close after sending.  So I can't use either read() or readline(), 
with or without arguments :/

In particular, I'm looking at the possibility of handling Z39.50 
connections, which has messages sent in a binary encoded form to be 
decoded using rules in ASN1 and BER.

Cheers,

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I

From gstein at lyra.org  Thu Jun 26 11:36:42 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <20030626183642.GB5652@lyra.org>

APR has facilities to do shared memory in a portable fashion; APR is part of
Apache 2.0, so there isn't much reason to go grab any other library.

You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
shared memory segments. The problem is that a shared memory segment could be
mapped to different addresses in different processes. Thus, you want to hold
onto offsets into a shared memory segment. apr_rmm.h helps with managing
these subblocks and working with offsets rather than direct pointers. Note
that apr_rmm also handles locking so that you can have multiple processes
allocating (simultaneously) from a shared mem segment.

You can then layer additional Python facilities on top of this substrate.

Cheers,
-g

On Wed, Jun 25, 2003 at 07:32:14AM -0700, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> I am thinking of implementing a shared memory module that does more than just 
> "read" and "write". Instead, I want something more transparent to the 
> developer, so that you say "Go get this dict at this shared memory key" or 
> "Create a new dict in shared memory at this key", and have the entire dict 
> available like a namespace.
> 
> Obvious applications would include the ever-present problem of shared data 
> between apache mod_python processes. This would solve it once and for all. 
> Perhaps one day we could get it working with RPC and have processes on 
> seperate machines sharing data as well.
> 
> The scope of this project would be implimenting new types that derive from all 
> of the basic types so that:
> 
> 1) When accessing the data in the type, it would gain a lock on the shared 
> memory segment that stores its data using a semaphore, read the data and 
> unserialize it, then return that data.
> 2) When storing the data in that type, it would gain a lock on the shared 
> memory segment, then store the data over the existing data.
> 
> I am thinking there are really two ways to go about this.
> 1) Implementing it all in Python. The idea here would be that we would 
> serialize and unserialize the data using cPickle.
> 2) Implementing it all in C. The idea here is that we would reuse the same 
> data structures that the basic data types use. We would store and read the 
> binary data behind the basic data types so that they can be as easily stored 
> in shared memory as they are stored in real memory.
> 
> Does anyone know if something like this is implemented or in the process of 
> being implemented? Does anyone want to join me in this endeavor? 
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
> /ID5Uq/oK8hAYQfmvvIGliE=
> =4zo4
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Thu Jun 26 11:45:57 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626183642.GB5652@lyra.org>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
Message-ID: <200306261145.59286.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 26 June 2003 11:36, Greg Stein wrote:
> APR has facilities to do shared memory in a portable fashion; APR is part
> of Apache 2.0, so there isn't much reason to go grab any other library.
>
> You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
> shared memory segments. The problem is that a shared memory segment could
> be mapped to different addresses in different processes. Thus, you want to
> hold onto offsets into a shared memory segment. apr_rmm.h helps with
> managing these subblocks and working with offsets rather than direct
> pointers. Note that apr_rmm also handles locking so that you can have
> multiple processes allocating (simultaneously) from a shared mem segment.
>
> You can then layer additional Python facilities on top of this substrate.
>

The python facility would be something like POSH.

So, based on this new information, the project scope would now become:

1) Expand POSH so that it can use shared objects that were shared by a foreign 
process (provided with some information on which shared memory segment they 
are using)

2) Integrate POSH with mod_python and APR.

The problem I see now: How to communicate between all of the processes that 
there are shared objects available, and detail where those shared objects 
are? I don't think it is possible to create shared objects via mod_python 
before the processes are seperated. Even if it was, is it possible to 
transfer references to those shared objects to each process?

The only solution I see right now is to have some central repository that any 
process can access and declare the existence of shared objects, their 
location, and whatever else is needed. Other processes can read the 
repository and find currently existing shared objects by a unique string.

The exact nature of the repository isn't important. It could be a bit of 
shared memory in a special location, a file, a Berkely DB, or even something 
more exotic. The point is that the processes can declare new shares, or find 
existing shares by a unique identifier.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++z9mWgwF3QvpWNwRAmawAKDDzpi9kOyIu88CZaCxVTsCqYQ1uwCgymzr
n6NkA9YggvsuqJcdzmnzpdc=
=rHuV
-----END PGP SIGNATURE-----

From vlindberg at verio.net  Thu Jun 26 14:44:24 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306261145.59286.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
	<200306261145.59286.jgardner@jonathangardner.net>
Message-ID: <3EFB5B28.2010103@verio.net>

Jonathan Gardner wrote:

> The problem I see now: How to communicate between all of the processes 
> that
>
>there are shared objects available, and detail where those shared objects 
>are? I don't think it is possible to create shared objects via mod_python 
>before the processes are seperated. Even if it was, is it possible to 
>transfer references to those shared objects to each process?
>
>The only solution I see right now is to have some central repository that any 
>process can access and declare the existence of shared objects, their 
>location, and whatever else is needed. Other processes can read the 
>repository and find currently existing shared objects by a unique string.
>

I think that the nicest solution (in terms of API, at least) would be to 
have an explicit namespace that is instantiated when mod_python is first 
loaded.  Applications could then access this shared namespace by 
importing it; anything declared in the namespace would be automatically 
shared.

For example.

[in code_run from mod_python]

from mod_python import apache.shared as shared

shared.myvar = 'something here'

if not hasattr(shared, 'anothervar'): shared.anothervar = 'something else'

it could be an option declared in the httpd.conf, optionally specifying 
a type of backing store:

<PythonOption shared-memory> # just uses a piece of memory
or
<PythonOption shared-memory mmapstorage file="shared.dat">
or
<PythonOption shared-memory berkeleystorage file="shared.db">
or
<PythonOption shared-memory zodbstorage file="shared.zodb">

VanL

From jack_diederich at email.com  Thu Jun 26 18:58:25 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <20030626235825.19765.qmail@email.com>

From: VanL <vlindberg@verio.net>
> I think that the nicest solution (in terms of API, at least) would be to 
> have an explicit namespace that is instantiated when mod_python is first 
> loaded.  Applications could then access this shared namespace by 
> importing it; anything declared in the namespace would be automatically 
> shared.
> 
> For example.
> from mod_python import apache.shared as shared
> 
> shared.myvar = 'something here'
> 

In the future setting variables in other module spaces may be
outlawed in python.  Treating modules like classes/objects
is also strongly discouraged.

I think your use of dicts is dead on, something like:
def do_calc():
  cache = mod_python.shared
  if ('foo' not in cache):
    cache['foo'] = 'bar'
  return cache['foo']

As I mentioned during the long thread on what frameworks
should do, we could add two dicts to mod_python,
mod_python.page_cache # caching dict created per-request
mod_python.perm_cache # cache valid accross all processes for ever

perm_cache could actually lie and just keep the last X least
recently used entries, but the main idea is that it is long
lasting and valid accross all processes.  An intermediate
mod_python.proc_cache that is similarly 'permenent' for the
life of the process, but only caches values locally to the
current process might be useful in a pure-forking server
because it doesn't have to worry about locking.  If you are
threading you have to do locking anyway, so perm_cache is
more useful.

-jack


-- 
__________________________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From ronwalf at wam.umd.edu  Thu Jun 26 21:53:00 2003
From: ronwalf at wam.umd.edu (Ron Alford)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Disabling restricted execution mode?
Message-ID: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>

Is there a way of disabling restricted user mode in mod_python 2.7.x?  
I'm using some third party libraries, and the rexec seems to be getting in 
the way without any tangible benefits.

Thanks,
-Ron

--
Ron Alford, KB0NUV
http://volus.net/~ronwalf


From mmckerns at its.caltech.edu  Thu Jun 26 20:31:36 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] I don't understand this error
Message-ID: <Pine.GSO.4.44.0306262030220.2262-100000@sue>

I think the error here has something to do with PyXML or 4Suite, so
this probably isn't an error caused by mod_python, but I don't know
where else to try.  I tried the Python XML-SIG list, and I was told
that this is a common error, and I should ask here.  So here I am...
Anyone recognize this error?

----- Begin Forwarded Message -----
I'm working on a distributed computing project, and I'm trying to
port the server we built to another computer.  On the current server,
our this test code works -- on the new machine it fails...
Apache tests pass, & mod_python tests pass. I get failures on some of
the 4Suite tests.  Any help or advice I can get is greatly appreciated.
Thanks.



OS/BUILD INFO: (NEW)			(OLD)
---------------------------------------------
Red Hat Linux 8.0 3.2-7			Red Hat Linux 7.1 2.96-85
Python 2.2.2-7				Python 2.2.1
PyXML 0.8.2 (without xslt & xpath)      PyXML 0.8.0 (with xslt & xpath)
4Suite 1.0a1				4Suite 0.10.1-1
httpd 2.0.40-11.5			apache 1.3.22-5.7.1
mod_python 3.0.3			mod_python 2.7.1-1
pycrypto 1.9a6				pycrypto 1.9a3
xmlrpclib 1.0.1				xmlrpclib 1.0.1
jonpy 0.05				jonpy 0.04
---------------------------------------------



TEST CODE:
---------------------------------------------
#! /usr/bin/env python
#################################
# pyweb.py
# testing python web handler
#################################

import jon.session as session
import jon.cgi
import jon.modpy as modpy
import xmlrpclib
import sys

# without the next line, this test works.
from xml.dom.ext.reader.Sax2 import FromXml

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK
---------------------------------------------



CHANGES TO HTTPD.CONF
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------



ERRORS PRODUCED:
---------------------------------------------
Mod_python error: "PythonHandler pyweb"

Traceback (most recent call last):

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 320,
in HandlerDispatch
    module = import_module(module_name, config)

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 499,
in import_module
    module = imp.load_module(mname, f, p, d)

  File "/home/mmckerns/public_html/pyweb.py", line 9, in ?
    from xml.dom.ext.reader.Sax2 import FromXml

  File "/usr/lib/python2.2/site-packages/_xmlplus/dom/ext/reader/__init__.py",
line 21, in ?
    encoder = codecs.lookup("utf-8")[0] # encode,decode,reader,writer

  File "/var/tmp/python-2.2.2-root/usr/lib/python2.2/encodings/__init__.py",
line 51, in search_function

RuntimeError: cannot unmarshal code objects in restricted execution mode
---------------------------------------------



Please speak slowly, so even I can understand...
I'm Mat.Sci., not Comp.Sci.

---

Mike McKerns
Caltech Materials Science
mmckerns@caltech.edu




From big.stick at bol.com.br  Fri Jun 27 01:09:50 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] I don't understand this error
In-Reply-To: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
References: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
Message-ID: <1595782234.20030627010950@bol.com.br>

Friday, June 27, 2003, 12:31:36 AM, you wrote:

MM> (...) Anyone recognize this error? (...)
MM> RuntimeError: cannot  unmarshal code objects in restricted
MM> execution mode 

I got the same error when using Python 2.2.2 and I was told it was
related to a 'codec registry and Python embedding problem'. It seems
that it's fixed on Python 2.3.

HTH

-- stick


From grisha at modpython.org  Fri Jun 27 00:40:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030627003659.B86123@onyx.ispol.com>



On Thu, 26 Jun 2003, Robert Sanderson wrote:

> However, the connection object is a little too high level ... are there
> plans for implementing a lower level 'socket' like interface, rather than
> a blocking line or character reader?  The mod_perl module has this sort of
> interface for example (AFAICT)
>
> For example, I need to be able to consume all of the data currently
> waiting into one chunk to process ... which may or may not end in a
> linebreak character, can be of arbitrary length and the connection
> doesn't close after sending.  So I can't use either read() or readline(),
> with or without arguments :/

I'm curious what mod_perl folks are doing, I haven't looked at it.

Unless I'm mising something, the only way you can deal with this kind of
data is read a character at a time.

(Or non-blocking IO, but off the top of my head I don't even know if
Apache supports it)

Grisha
From grisha at modpython.org  Fri Jun 27 00:48:00 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Disabling restricted execution mode?
In-Reply-To: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
References: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
Message-ID: <20030627004441.G86123@onyx.ispol.com>


Appearance of restricted mode is a bug - mod_python doesn't use restricted
mode, but it appears this way because the way Python knows that we're
running in restricted mode is by comparing frame pointers (iirc), and they
happen to be different sometimes (but I don't remember now exactly why).

I think if you upgrade to a newer version of Python it will go away.

Grisha

On Thu, 26 Jun 2003, Ron Alford wrote:

> Is there a way of disabling restricted user mode in mod_python 2.7.x?
> I'm using some third party libraries, and the rexec seems to be getting in
> the way without any tangible benefits.
>
> Thanks,
> -Ron
>
> --
> Ron Alford, KB0NUV
> http://volus.net/~ronwalf
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From vlindberg at verio.net  Fri Jun 27 09:02:51 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 21:47:32 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626235825.19765.qmail@email.com>
References: <20030626235825.19765.qmail@email.com>
Message-ID: <3EFC5C9B.6060703@verio.net>

Jack Diederich wrote:

> In the future setting variables in other module spaces may be
>
>outlawed in python.  Treating modules like classes/objects
>is also strongly discouraged.
>

Hmm. But who said that "shared" had to be a module?  It could just as 
easily be an instantiation of a class that is instantiated when 
mod_python starts.  That might actually make more sense, as someone 
implementing a shared module would only need to override the __getattr__ 
and __setattr__ hooks.

For example, in the mod_python initialization:

if options.has_key('shared-memory'):
    global shared
    shared = sharedmemoryimplementation()

The rest of the code I provided when then work unchanged.  It doesn't 
have to be a module, just a *namespace*.

>mod_python.page_cache # caching dict created per-request
>mod_python.perm_cache # cache valid accross all processes for ever
>

This is a good idea.  +1.

VanL

From azaroth at liverpool.ac.uk  Mon Jun 30 14:14:45 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 21:47:33 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030627003659.B86123@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>

On Fri, 27 Jun 2003, Gregory (Grisha) Trubetskoy wrote:
> On Thu, 26 Jun 2003, Robert Sanderson wrote:

> > However, the connection object is a little too high level ... are there
> > plans for implementing a lower level 'socket' like interface, rather than
> > a blocking line or character reader?  The mod_perl module has this sort of
> > interface for example (AFAICT)
> > For example, I need to be able to consume all of the data currently
> > waiting into one chunk to process ... which may or may not end in a

> I'm curious what mod_perl folks are doing, I haven't looked at it.

I'm by no means an expert, in fact I've only just started looking at the 
connection handling stuff in Apache, but:

http://perl.apache.org/docs/2.0/api/Apache/Filter.html#Streaming_Filter_API

Read
  $f->read(my $buffer, $read_len);
Reads at most $read_len characters into $buffer. It returns a true value 
as long as it had something to read, and a false value otherwise.


> Unless I'm mising something, the only way you can deal with this kind of
> data is read a character at a time.
> (Or non-blocking IO, but off the top of my head I don't even know if
> Apache supports it)

There's a flag: APR_NONBLOCK_READ that can be passed to apr_bucket_read()

Have a look at:
  http://www-106.ibm.com/developerworks/linux/library/l-apache/
for example  (Which uses mod_python as an example :) )

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Mon Jun 30 09:42:13 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:33 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030630092522.B53253@onyx.ispol.com>



On Mon, 30 Jun 2003, Robert Sanderson wrote:

> Read
>   $f->read(my $buffer, $read_len);
> Reads at most $read_len characters into $buffer. It returns a true value
> as long as it had something to read, and a false value otherwise.

This looks like a filter read, mod_python's behaves in the same way. But
filter semantics are different, because filters aren't called unless there
is something to read.

I know that there is the APR_NONBLOCK_READ flag, but it isn't very useful,
since it would mean that your program would have to read in a loop wasting
cpu time until it has what it needs.

The normal way of dealing with this sort of thing is by calling select()
on a socket which will then call your function when there is anything to
read. I don't know whether APR provides this.

I think your only option is to read a byte at a time, making sure that
when you receivie a complete frame/packet/whatever you stop reading so as
to not block indefinitely.

Grisha

From michael.medland at acterna.com  Mon Jun 30 17:01:49 2003
From: michael.medland at acterna.com (Michael Medland)
Date: Fri Jan  9 21:47:33 2004
Subject: [mod_python] Mod_python xml parsing problem
Message-ID: <OF783867B1.3D0B6EBD-ONC1256D55.00574BE1-80256D55.005D62D6@eng.eni.wago.de>

Hi, I am currently using Python 2.2.3, apache 1.3.27 and mod_python 2.7.8. 
Under Solaris 8 on a sun.
The configuration appears to be working fine but, the problem that i am 
having is in parsing xml files, when i do for example:

xmlfile = minidom.parse(file)
root = xmlfile.childNodes

It creates a dom instance but it contains nothing at all, and root returns 
a 'nonetype'. I believe that it may be an encoding problem but i dont know 
how to fix it.
When i tried the same code using cgi instead of mod_python it worked fine.
Any suggestions would be greatly appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/29604ed9/attachment.htm
From jakubec at san.rr.com  Mon Jun 30 21:06:36 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 21:47:33 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001801c33f86$2d84a0a0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.
-dj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/94a11f98/attachment.htm
From rey4 at columbia.edu  Sun Jun  1 17:27:33 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 21:53:32 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <bbdqu2$cog$1@main.gmane.org>

Hi, I'm trying to get write a multithreaded script to run under mod_python
and apache 1.3 on linux, but the script seems to just freeze up at the point
of thread creation leaving the http connection open but not doing anything
else.

I isolated the problem in a little test script:

-- begin mptest.py --
from mod_python import apache

def handler(req):
  w = Worker(req)
  req.write("Starting thread...\n")
  w.start()
  req.write("Joining thread...\n")
  w.join()
  req.write("Done.\n")
  return apache.OK

import threading

class Worker(threading.Thread):
  def __init__(self, req):
    self.req = req
    threading.Thread.__init__(self)

  def run(self):
    self.req.write("  Hello from thread!\n")
-- end mptest.py --

-- begin .htaccess --
AddHandler python-program .py
PythonHandler mptest
PythonDebug On
-- end .htaccess --

The script runs fine on a windows box running Apache 2.0.46, Mod_Python
3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
1.3.27, Mod_Python 2.7.8, and Python 2.2.2.

The place where it seems to freeze is at w.start(). If you comment that line
out, it does complete execution. Is this problem a bug in mod_python, or
have I done something wrong?

- Russ



From daniel at copyleft.no  Sun Jun  1 23:39:27 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
In-Reply-To: <bbdqu2$cog$1@main.gmane.org>
Message-ID: <20030601233903.P58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hi, I'm trying to get write a multithreaded script to run under mod_python
> and apache 1.3 on linux, but the script seems to just freeze up at the point
> of thread creation leaving the http connection open but not doing anything
> else.

Apache 1.3 doesn't support threading. So neither does mod_python when combined
with it. Upgrade Apache.

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 18:39:25 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
References: <bbdqu2$cog$1@main.gmane.org>
	<20030601233903.P58312-100000@unity.copyleft.no>
Message-ID: <bbdv4s$4ar$1@main.gmane.org>

Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
calling Thread.start() in an apache process would cause it to lock up. I'm
trying to add mod_python support to an open source project (ViewCVS) and I'd
like to avoid making apache 2 a requirement for it, although I will try
upgrading apache on my own server. Any more information on mod_python 2.x
and threading would be much appreciated.

- Russ


Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Hi, I'm trying to get write a multithreaded script to run under
>> mod_python and apache 1.3 on linux, but the script seems to just
>> freeze up at the point of thread creation leaving the http
>> connection open but not doing anything else.
>
> Apache 1.3 doesn't support threading. So neither does mod_python when
> combined with it. Upgrade Apache.
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 00:55:11 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbdv4s$4ar$1@main.gmane.org>
Message-ID: <20030602005124.I58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
> calling Thread.start() in an apache process would cause it to lock up. I'm
> trying to add mod_python support to an open source project (ViewCVS) and I'd
> like to avoid making apache 2 a requirement for it, although I will try
> upgrading apache on my own server. Any more information on mod_python 2.x
> and threading would be much appreciated.

Apache 1.3 is not threadsafe. In my experience, it will crash when it's linked
to the threading libs - which is what happens if you load a threaded version of
mod_python.

I've always had to build a separate python without threading support, for use
with mod_python, when I want to use Apache 1.3.

This is probably what you've done too, or the system has done for you (or the
guy who made the binaries did). Loading "threading" in Python when Python is
built without threading support might lock it up - that could be what you're
seeing.

Either way, you will have to switch to Apache 2.0 if you want to use threading
with mod_python. This is the nature of mod_python. :)

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 19:58:30 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
References: <bbdv4s$4ar$1@main.gmane.org>
	<20030602005124.I58312-100000@unity.copyleft.no>
Message-ID: <bbe3pa$r2b$1@main.gmane.org>

Hey, thanks for your help. I installed apache 2 and everything began to
work! I still don't understand the behavior with apache 1.3. The fact that
apache code is not threadsafe doesn't explain why threading.Thread.start()
(which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
one version of python installed on my system and it does support threading.
Oh well, hopefully apache 1.3 will go away soon.

- Russ

Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Apache 1.3 doesn't _use_ threading, but this doesn't explain why
>> merely calling Thread.start() in an apache process would cause it to
>> lock up. I'm trying to add mod_python support to an open source
>> project (ViewCVS) and I'd like to avoid making apache 2 a
>> requirement for it, although I will try upgrading apache on my own
>> server. Any more information on mod_python 2.x and threading would
>> be much appreciated.
>
> Apache 1.3 is not threadsafe. In my experience, it will crash when
> it's linked to the threading libs - which is what happens if you load
> a threaded version of mod_python.
>
> I've always had to build a separate python without threading support,
> for use with mod_python, when I want to use Apache 1.3.
>
> This is probably what you've done too, or the system has done for you
> (or the guy who made the binaries did). Loading "threading" in Python
> when Python is built without threading support might lock it up -
> that could be what you're seeing.
>
> Either way, you will have to switch to Apache 2.0 if you want to use
> threading with mod_python. This is the nature of mod_python. :)
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 02:13:06 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbe3pa$r2b$1@main.gmane.org>
Message-ID: <20030602020851.V58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hey, thanks for your help. I installed apache 2 and everything began to
> work! I still don't understand the behavior with apache 1.3. The fact that
> apache code is not threadsafe doesn't explain why threading.Thread.start()
> (which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
> one version of python installed on my system and it does support threading.
> Oh well, hopefully apache 1.3 will go away soon.

Well, things are set up differently on different systems, I have experience
with OpenBSD and FreeBSD. If I tried to do what you did, I would have ended up
in one of two situations:

1) If I used a threaded Python for my mod_python, and attempted to load
mod_python in apache, I would get error messages about unresolved symbols
belonging to libpt. Since obviously, Apache isn't linked against that library.

2) If I used an unthreaded version, I would be able to load things and get
going, but I'd get undefined behaviour if I tried to use threading in my python
script, since the python binary doesn't support the calls the threading module
needs. This is probably what's happening to you.

-- Daniel

From fraser at wehave.net  Sun Jun  1 21:48:46 2003
From: fraser at wehave.net (Fraser Campbell)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Urgent Help Needed
In-Reply-To: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
References: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
Message-ID: <200306012148.46546.fraser@wehave.net>

On May 27, 2003 11:18 pm, Graeme Matthew wrote:

> Does anyone know where one can get a mod_python binary install for linux
> just like the one that exists for Windows as I cannot afford to spend my 2
> coding days trying to get mod_python working, if there is no such file then
> thats fine, ill forget it all together.

This reply is very late, very off-topic and wouldn't have helped you given 
your time constraints anyway but ... my apologies if anyone is offended.

Try Debian, 8000+ packages installable (python 2.1 is default but 1.5 and 2.2 
are available), runs on 11 architectures, will likely (sooner or later) 
support multiple kernels (linux, hurd and a few BSDs).  Anyway, once Debian 
is running type "apt-get install libapache-mod-python" and you're done.

Debian is stable as a rock which means you don't often get upgrades, it's not 
for everyone.  OTOH, running apache 1.3.26 with mod_python 2.7.8 makes me 
quite happy considering the recurring security issues with apache2.

-- 
Fraser Campbell <fraser@wehave.net>                 http://www.wehave.net/
Halton Hills, Ontario, Canada                                 Debian GNU/Linux

From mike.looijmans at asml.com  Mon Jun  2 07:40:29 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <01c328c9$79974480$926a1e6e@wsasd464>

Probably, the freeze is because apache 1.3 doesn't support threading.

I guess the same applies to the "req" object as most GUIs: Only access the
Request object from the thread that created it. It might work if you make the
thread object like this:

    def run(self):
        self.result = "Hello from thread!\n"

then after the join, use "req.write(w.result)" to output the result from the
thread.

Solution would be to remove the threading, since it is useless in a HTTP
server anyway. The client has to wait for the data to be sent back anyway. If
you want to use another handler for parts of the message, just send the client
a "304" (redirect) response, or (if you feel like having fun) send a HTTP
request to your own HTTP server, which will use another process or thread to
handle it.

I use HTTP client connections inside the HTTP server on our replication server
(which acts as a sort of 'proxy': work on a replication slave of the MySQL
master database and also caches files) to fetch files from the master server.

--
Mike Looijmans

-----Original Message-----
From: Russell Yanofsky <rey4@columbia.edu>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Sunday, June 01, 2003 11:34 PM
Subject: [mod_python] Mod_Python 2.7.8 and threading


>Hi, I'm trying to get write a multithreaded script to run under mod_python
>and apache 1.3 on linux, but the script seems to just freeze up at the point
>of thread creation leaving the http connection open but not doing anything
>else.
>
>I isolated the problem in a little test script:
>
>-- begin mptest.py --
>from mod_python import apache
>
>def handler(req):
>  w = Worker(req)
>  req.write("Starting thread...\n")
>  w.start()
>  req.write("Joining thread...\n")
>  w.join()
>  req.write("Done.\n")
>  return apache.OK
>
>import threading
>
>class Worker(threading.Thread):
>  def __init__(self, req):
>    self.req = req
>    threading.Thread.__init__(self)
>
>  def run(self):
>    self.req.write("  Hello from thread!\n")
>-- end mptest.py --
>
>-- begin .htaccess --
>AddHandler python-program .py
>PythonHandler mptest
>PythonDebug On
>-- end .htaccess --
>
>The script runs fine on a windows box running Apache 2.0.46, Mod_Python
>3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
>1.3.27, Mod_Python 2.7.8, and Python 2.2.2.
>
>The place where it seems to freeze is at w.start(). If you comment that line
>out, it does complete execution. Is this problem a bug in mod_python, or
>have I done something wrong?
>
>- Russ
>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From jorge.lopez at scati.com  Mon Jun  2 10:50:46 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Troubles of Memory
Message-ID: <5.1.0.14.0.20030602091426.00b344c8@pop3.scati.com>

Hello:
I labor in a company from Spain and I'm having troubles of memory when I 
use mod_python.
I'm get time of remote computer using 'sockets'. Looking at Task Admin of 
Windows, I observe that 'Memory Use' augment every time until my computer die.
Script tries to connect socket and sends a request of time. Then, socket 
receives time.
Code is:

def getTime(host):
     t = "Error"
     try:
         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         s.connect((host,8000))
         s.send('DAMELAAHORA\0')
         t = receive(s,15)
     finally:
         if s != None:
             s.close()
         return t

def receive(socket, size):
     buffer=''
     while size != 0:
         data = socket.recv(size)
         buffer += data
         size = size-len(data)
     return buffer

I write this 'time' in a file XML. Then, page HTML loads this file with 
JavaScript every second.
I use Window 2000 with Apache 2.0.44,  mod_python 3.0.1 and Python 2.2.2.
I wait for your answer
Thanks 



From tohmas.ash at takashi.zzn.com  Mon Jun  2 17:11:34 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <7ECE174E8B55C774D902B465F5258462@tohmas.ash.takashi.zzn.com>

Hi, it's again me with some php-to-mod_python problems :)

I use some 'forms' and went a user put some html tags into inputs that
put my html pages in a big mess...

like in my last query, in know how to stop this problem in php with
the fonction 'htmlentities' but I didn't found something like that for
mod_python.

sorry to compare all the time this two scritp language, the cause it's
just my personnal experience...

thanks in advance for your answers

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From dustin at ywlcs.org  Mon Jun  2 11:02:29 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <20030602160229.GJ26794@eleanor.internal.ywlcs.org>

On Mon, Jun 02, 2003 at 05:11:34PM +0200, tohmas ash wrote:
> Hi, it's again me with some php-to-mod_python problems :)
> 
> I use some 'forms' and went a user put some html tags into inputs that
> put my html pages in a big mess...
> 
> like in my last query, in know how to stop this problem in php with
> the fonction 'htmlentities' but I didn't found something like that for
> mod_python.

If you import the Python cgi module (don't use its FormData class!!), it has
a function 'escape' which does what you'd like.

Perhaps this is a candidate for inclusion in mod_python's utils module?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jorge.lopez at scati.com  Tue Jun  3 15:57:27 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] How Free Memory?
Message-ID: <5.1.0.14.0.20030603153817.00b73c08@pop3.scati.com>

Hello:
I try this simple code:

	from mod_python import apache
	def handler(req):
		req.write("Hello World!\n")
		return apache.OK

My Apache's configuration is:

	<Directory "C:/Archivos de programa/Apache Group/Apache2/htdocs/python/">
		AddHandler python-program .py
		PythonHandler mptest
		PythonDebug On
	</Directory>

Well, I open the page 'http://localhost/python/mptest.py' and, of course, I 
see 'Hello World' at screen.
Then, I press down F5 (to update) and hold down the key. I observe 'Admin 
Task' and use of memory is increasing!!!
Process is named 'Apache' always continues growing. I close navigator and 
memory isn't freed.
How can I free this memory?
Thanks.

I use: Apache 2.0.44, Python 2.2.2, mod_python 3.0



From i at mindlace.net  Tue Jun  3 14:38:19 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] PythonTransHandler contract requirements?
Message-ID: <2147483647.1054651099@[10.0.1.2]>

Hello,

I'm trying to implement a transhandler, but I cannot figure out what I am 
supposed to provide apache to allow it to continue handling the request. 
Documentation pointers gratefully accepted.

Given a path, I want to provide a handler for the request.

My simplistic translation handler is like so:

def transhandler(req):
    # First check if we're configured to handle this request.
    checkHandle(req)
    root = req.document_root()
    raw_filename = path.join(root,req.uri)
    raw_fileparts = path.split(raw_filename)
    if path.exists(raw_filename):
       if raw_filename[-3:] != '.py':
           raise apache.SERVER_RETURN, apache.DECLINED
       else:
           req.filename=raw_fileparts[0]
           req.modpath=raw_fileparts[0]
           sys.path.append(raw_filename)
           req.add_handler("PythonHandler",raw_fileparts[1][-3:])
           return apache.OK
    raise apache.SERVER_RETURN, apache.DECLINED

And the handler at the location in question:

def handler(req):
    req.write(body % "Ni!")
    return apache.OK

What I get back is the raw text of the module containing the handler.

~mindlace
http://mindlace.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20030603/ca478f73/attachment-0001.bin
From dustin at ywlcs.org  Tue Jun  3 17:24:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] PythonTransHandler contract requirements?
In-Reply-To: <2147483647.1054651099@[10.0.1.2]>
References: <2147483647.1054651099@[10.0.1.2]>
Message-ID: <20030603222413.GO26794@eleanor.internal.ywlcs.org>

You need to set req.filename to a file that actually exists; since you're
using a PythonHandler, it shouldn't really matter which file you choose, so
it's safe to just point it at your script (__FILE__) or some other
known-present file.

I hope that answers your query.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From tohmas.ash at takashi.zzn.com  Wed Jun  4 10:14:24 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <38B29A4DEB2D9224F8B77AE85C18B633@tohmas.ash.takashi.zzn.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030604/5389ae9a/attachment-0001.htm
From ireneponti at yahoo.com  Thu Jun  5 10:51:29 2003
From: ireneponti at yahoo.com (Irene Ponti)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <20030605175129.58563.qmail@web40703.mail.yahoo.com>

Hi to all

I have to put into a SQL database the content of some
variables coming from an Internet form.

If this variables have some caracters as ' or "
inside, the sql server return an error because the
query is not in correct sintax.

Now in php exist a standard function that add slashes
in front of ' or " in a variable and another that
remove slashes.

Is there in python a function like this?

Thank you.

__________________________________
Do you Yahoo!?
Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
http://calendar.yahoo.com
From mod_python at ols.inorganic.org  Thu Jun  5 11:12:50 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
References: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
Message-ID: <20030605181249.GA3360@nag.inorganic.org>

On Thu, Jun 05, 2003 at 10:51:29AM -0700, Irene Ponti wrote:
> I have to put into a SQL database the content of some
> variables coming from an Internet form.
> 
> If this variables have some caracters as ' or "
> inside, the sql server return an error because the
> query is not in correct sintax.
> 
> Now in php exist a standard function that add slashes
> in front of ' or " in a variable and another that
> remove slashes.
> 
> Is there in python a function like this?

Yes.
No.
Maybe.

How are you accessing the database?

I'm using MySQLdb; I just confirmed that it automatically adds the
proper escapist magic to make this stuff just plain work.

I'm guessing that, depending on the module you're using to access the
database, it may offer the proper mechanisms (much like in Perl's
DBD/DBI, there's a database-specific way to escape strings).

-roy
From tohmas.ash at takashi.zzn.com  Thu Jun  5 22:48:58 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <B27DD9D06BE5D18419F9663B09169141@tohmas.ash.takashi.zzn.com>

I use posgresql and had this problem, I solve it with the 'remplace'
fonction on the string module.
(cf http://python.org/doc/current/lib/module-string.html)

remplace(string "'", "\'")

but maybe there is a more simple fonction for do that...

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From rien at yeepa.org  Thu Jun  5 23:08:14 2003
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <3EDFB13E.8010305@yeepa.org>

Irene Ponti wrote:
 > Now in php exist a standard function that add slashes
 > in front of ' or " in a variable and another that
 > remove slashes.
 >
 >Is there in python a function like this?

Hi Irene,

you have 2 choices:
- string objects in python offers a replace() member.
   so you can write:
	query = """a string with 'quotes' and "doublequotes" """
  	new_query = query.replace('"', '\\"')	

- the re module allows for regular expression searching and replacement
   but this mail is far too short too explain regular expression.
   just have a look at the python manuals (chapter 4.2 of the library
   reference).

Just beware that '\' is a special character inside python string:
"\\'" is totally different from "\'". the first form describe a 
backslash preceding a single quote character, the second describe a 
string which only contains a single quote. idem for double quotes.

 > Thank you.
you're welcome...

-- 
rien

From neel at mediapulse.com  Thu Jun  5 18:59:06 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>

I'm surprised no one has mentioned this yet, but you really need to be
using placeholders with the cursor; otherwise you are writing
exploitable code.

Consider this:

C.execute("SELECT name FROM users WHERE user_id='" +
cgi_submitted_userid + "'")

Now I send my userid as "hackyou'; DELETE FROM users --"

You get:

SELECT name FROM users WHERE user_id='hackyou'; DELETE FROM users --'

Not good (MySQL seperates stmts with ;'s, other DBs do it differently
but we'll leave that as an exersice for the reader.  The -- comments out
the rest of the line).  So you do a addSlash to userid and get:

SELECT name FROM users WHERE user_id='hackyou\'; DELETE FROM users --'

Okay if you're MySQL, MSSQL escapes a ' as ''.  
But we have a good hacker, so he tries userid as "hackyou\'; DELETE FROM
users --"

SELECT name FROM users WHERE user_id='hackyou\\'; DELETE FROM users --'

Doh!

But, if we do this:

C.execute("SELECT name FROM users WHERE
user_id=%s",(cgi_submitted_userid,) )

The query is sent seperatly from the data, so the server can handle
anything it's own way correctly (i.e. MySQL will use a \', MS SQL will
use a '').  And you don't have to think about it.  Simpler and safer.

Mike

From mod_python at ols.inorganic.org  Thu Jun  5 16:18:07 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
Message-ID: <20030605231807.GC6513@nag.inorganic.org>

On Thu, Jun 05, 2003 at 06:59:06PM -0400, Michael C. Neel wrote:
> I'm surprised no one has mentioned this yet, but you really need to be
> using placeholders with the cursor; otherwise you are writing
> exploitable code.
> 
> Consider this:
> 
> C.execute("SELECT name FROM users WHERE user_id='" +
> cgi_submitted_userid + "'")
> 
> Now I send my userid as "hackyou'; DELETE FROM users --"

Back up there.

You don't need to use placeholders with the cursor.
You need to write non-exploitable CGI code.

I really like Perl's "warn me if I actually use anything given to me
from the outside without validating it" option, but hey, we're Python
programmers -- we shouldn't need our hands held.  Validate, validate,
validate.

-roy
From jm at eemsystems.cjb.net  Thu Jun  5 18:37:11 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] segmentation fault
Message-ID: <1054856231.1465.17.camel@eemsystems.com>

I'm using postgresql 7.3 and python from debian unstable.

After varios upgrades my scripts are working bad.

I can not find what happens.


JM



[Thu Jun  5 18:08:21 2003] [notice] child pid 865 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:24 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:24 2003] [notice] child pid 867 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing
mod_python.publisher from None
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] child pid 870 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:29 2003] [notice] child pid 868 exit signal
Segmentation fault (11)

-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From max.zhang at converzal.com  Fri Jun  6 11:07:02 2003
From: max.zhang at converzal.com (max.zhang)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Virtual host and mod_python
Message-ID: <000a01c32bd8$b42882f0$1700a8c0@converzamax>

Hi all,

My Redhat 7.3 +apache1.3 + mod_python2.7

http.conf

<VirtualHost *>
...
</VirtualHost *>
 ...   
<VirtualHost *>
   DocumentRoot /www/htdocs/xy.com/
    ServerName xy.xy.com
    ScriptAlias /cgi-bin/ "/www/htdocs/xy.com/cgi-bin/"

    <Directory "/www/htdocs/xy.com/bulletin">
         AddHandler python-program .py
        PythonHandler mod_python.publisher # this part works well
        PythonDebug On
    </Directory>

    <Directory "/www/htdocs/xy.com/fileman">
         AddHandler python-program .py
        PythonHandler filemanager # this mod_python program can't work .apache display code of filemanager.py in IE client 
        PythonDebug On    
    </Directory>

</VirtualHost>
......

why? The mod_python can't work with virtual host ?
Thanks


Max

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030606/7e64c428/attachment-0001.htm
From dustin at ywlcs.org  Thu Jun  5 22:23:02 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605231807.GC6513@nag.inorganic.org>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
	<20030605231807.GC6513@nag.inorganic.org>
Message-ID: <20030606032302.GB1192@eleanor.internal.ywlcs.org>

> I really like Perl's "warn me if I actually use anything given to me
> from the outside without validating it" option, but hey, we're Python
> programmers -- we shouldn't need our hands held.  Validate, validate,
> validate.

No, we're smart programmers who use reusable code.  Validate. (once)

And someone's already written validation code for each specific DB engine, in
the form of placeholders in cursors.  If you don't want to use placeholders,
at least be sure to write a single, **correct** validation function which you
use religiously.

Perl's taint feature bugs me because it's fairly liberal about what it meants
to "validate", so it's possible to convince Perl that everything's cool while
still leaving yourself open.  That's why we Pythonistas don't like our hands
being held. 'nuf said.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From gre7g-k-modpython.e475ec at wolfhome.com  Thu Jun  5 22:35:39 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <3EDFC5BB.11618.56D33C@localhost>

And now for something completely different...  

I'd like to announce my new mod_python project "Roadkill".

Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
Python code within a .epy webpage to generate dynamic content.  This 
lets you edit your code with your favorite GUI webpage editor instead 
of pasting HTML into your CGI or keeping a bunch of templates that 
your CGI imports.

The homepage for Roadkill can be found at: 
http://roadkill.sourceforge.net/

The documentation is thin and the bugs are most likely numerous (what 
can you expect for version 0.01?), but if any of you would like to 
play with it, I would certainly appreciate comments and bug reports.  
It may not be much to look at now, but hopefully you'll agree that it 
has great potential.

I now return you to your regularly scheduled mailing list.  ;-)

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From mike.looijmans at asml.com  Fri Jun  6 07:53:21 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <01c32bef$ef641e80$926a1e6e@wsasd464>

If you use MySQL, just use the "escape" function:

# Quote a string for the database. Returns "NULL" for empty strings.
def dbescape(val):
    if val:
        return MySQLdb.string_literal(val)
    else:
        return "NULL"



Now you can do:

db.cursor().execute("INSERT INTO foo (foo_id, name) VALUES (%s, %s)" %
(foo_id, dbescape(form['fooname'].value))

You can use this function for anything you like.

Note that this also makes this stuff a lot more secure: Your application must
be able to cope with a user typing
hi" ; DROP DATABASE monty;


For many other database engines, you can used parameterized (a.k.a.
pre-compiled) queries, a query that is sent to the DBMS with some open
parameters which can be re-used several times with varying parameters. This
eliminates query optimization overhead. These may also offer a performance
advantage.

By the way, does MySQL support this? I've done this quite often with many
databases and clients (Delphi for example), and it makes a huge performance
difference.

--
Mike Looijmans
Private: http://www.milosoftware.com

-----Original Message-----
From: Irene Ponti <ireneponti@yahoo.com>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Thursday, June 05, 2003 7:53 PM
Subject: [mod_python] addSlashes() in python, sql cgi question


>Hi to all
>
>I have to put into a SQL database the content of some
>variables coming from an Internet form.
>
>If this variables have some caracters as ' or "
>inside, the sql server return an error because the
>query is not in correct sintax.
>
>Now in php exist a standard function that add slashes
>in front of ' or " in a variable and another that
>remove slashes.
>
>Is there in python a function like this?
>
>Thank you.
>
>__________________________________
>Do you Yahoo!?
>Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
>http://calendar.yahoo.com
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From spyce at symbolist.ru  Fri Jun  6 12:51:29 2003
From: spyce at symbolist.ru (Spyce)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <10513932398.20030606125129@symbolist.ru>

Hello Gre7g,

Friday, June 6, 2003, 8:35:39 AM, you wrote:

GL> And now for something completely different...  

GL> I'd like to announce my new mod_python project "Roadkill".

GL> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
GL> Python code within a .epy webpage to generate dynamic content.  This 
GL> lets you edit your code with your favorite GUI webpage editor instead 
GL> of pasting HTML into your CGI or keeping a bunch of templates that 
GL> your CGI imports.

GL> The homepage for Roadkill can be found at: 
GL> http://roadkill.sourceforge.net/

There is a similar project at http://spyce.sourceforge.net. And, yes,
it uses mod_python too.

-- 
Best regards,
 Spyce                            mailto:spyce@symbolist.ru

From neo at https.ru  Fri Jun  6 13:48:00 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <262700112.20030606134800@https.ru>


  Not "completely" I think... It should be very very similar to the
old well-known "mod_snake", a open project that was closed for some
reason...


> And now for something completely different...  

> I'd like to announce my new mod_python project "Roadkill".

> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> Python code within a .epy webpage to generate dynamic content.  This 
> lets you edit your code with your favorite GUI webpage editor instead 
> of pasting HTML into your CGI or keeping a bunch of templates that 
> your CGI imports.

  This is not true. Not true. Not true.
With my templating system I use exactlty ONE XML-file as a template
for a huge and complex Web-site, and I can edit it with "my favorite"
editor. Did you try to write a big site with your "PHP/ASP"-ish Python
"templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .


> The homepage for Roadkill can be found at: 
> http://roadkill.sourceforge.net/

> The documentation is thin and the bugs are most likely numerous (what 
> can you expect for version 0.01?), but if any of you would like to 
> play with it, I would certainly appreciate comments and bug reports.  
> It may not be much to look at now, but hopefully you'll agree that it 
> has great potential.

> I now return you to your regularly scheduled mailing list.  ;-)

> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
>                       Into each wound, a little salt must fall...
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:31:24 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <262700112.20030606134800@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	 <262700112.20030606134800@https.ru>
Message-ID: <1054895483.3142.24.camel@Presario>

Hi Neo

So where can we look at this great template engine?

Cheers

Conrad

On Fri, 2003-06-06 at 02:48, Neo Eureka wrote:
>   Not "completely" I think... It should be very very similar to the
> old well-known "mod_snake", a open project that was closed for some
> reason...
> 
> 
> > And now for something completely different...  
> 
> > I'd like to announce my new mod_python project "Roadkill".
> 
> > Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> > Python code within a .epy webpage to generate dynamic content.  This 
> > lets you edit your code with your favorite GUI webpage editor instead 
> > of pasting HTML into your CGI or keeping a bunch of templates that 
> > your CGI imports.
> 
>   This is not true. Not true. Not true.
> With my templating system I use exactlty ONE XML-file as a template
> for a huge and complex Web-site, and I can edit it with "my favorite"
> editor. Did you try to write a big site with your "PHP/ASP"-ish Python
> "templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .
> 
> 
> > The homepage for Roadkill can be found at: 
> > http://roadkill.sourceforge.net/
> 
> > The documentation is thin and the bugs are most likely numerous (what 
> > can you expect for version 0.01?), but if any of you would like to 
> > play with it, I would certainly appreciate comments and bug reports.  
> > It may not be much to look at now, but hopefully you'll agree that it 
> > has great potential.
> 
> > I now return you to your regularly scheduled mailing list.  ;-)
> 
> > Gre7g.
> 
> > =================================================================
> > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
> >                       Into each wound, a little salt must fall...
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 14:47:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:53:33 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <1054895483.3142.24.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
Message-ID: <466254823.20030606144714@https.ru>


  Hi, Conrad!

> So where can we look at this great template engine?

  In action, you mean? Well, when the site is ready I can give you a
link. Though it is all in Russian, I think it will not confuse you :).
  I did not say that this "engine" is great, I only sad that the
"advertisement" contained many arguable points...


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:54:38 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Announcement: Roadkill version 0.01
	"Kitten"
In-Reply-To: <466254823.20030606144714@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	<1054895483.3142.24.camel@Presario>
	<466254823.20030606144714@https.ru>
Message-ID: <1054896878.5988.0.camel@Presario>

Hi

In action or in source ;-)

Cheers

On Fri, 2003-06-06 at 03:47, Neo Eureka wrote:
>   Hi, Conrad!
> 
> > So where can we look at this great template engine?
> 
>   In action, you mean? Well, when the site is ready I can give you a
> link. Though it is all in Russian, I think it will not confuse you :).
>   I did not say that this "engine" is great, I only sad that the
> "advertisement" contained many arguable points...
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 15:19:03 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Re[4]:
In-Reply-To: <1054896878.5988.0.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
 <466254823.20030606144714@https.ru> <1054896878.5988.0.camel@Presario>
Message-ID: <858163919.20030606151903@https.ru>


> In action or in source ;-)

  Well, I think about it, but it is still unfinished, I'm considering
how to add some useful functionality to it.
  In the beginning it used DOM to parse XML-templates, but... mmm...
folks, NEVER use DOM if you do not want very slow and memory-consuming
code, so, I've rewritten it all in Python using Expat.

  Of course, I'll send announcement to this list when I have
something that is worth others' attention. 


--- 
Neo Eureka / mailto:neo@https.ru

From neel at mediapulse.com  Fri Jun  6 10:19:54 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6B@johnson.mediapulse.net>

     > Back up there.
     > 
     > You don't need to use placeholders with the cursor.
     > You need to write non-exploitable CGI code.

Actually, using the placeholder is writing non-exploitable CGI code.
It's standard across drivers that support it, and every major DB does
support placeholders.  It's well tested code too, you're more likely to
make an error writing your own validation routine than find one in the
cursor/database server.


     > 
     > I really like Perl's "warn me if I actually use anything 
     > given to me
     > from the outside without validating it" option, but hey, 
     > we're Python
     > programmers -- we shouldn't need our hands held.  
     > Validate, validate,
     > validate.
     > 

This problem lies in the safest of areas, concatataion of strings.  All
the use strict, taint's, etc will still allow this to happen.  It's like
using hidden fields for price information in an online store; there is
no compiler warnings to say that's a bad idea.

Placeholders are safer, faster, and simpler.  Really no reason not to
use them.

Mike

From neel at mediapulse.com  Fri Jun  6 10:30:35 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>

You should post this in the mod_python dev list as well; currenty there
is discussion of mod_psp (python server pages) being folded into
mod_python, and I'm sure your experience in tackling the same issues
would be helpful.

Thanks,
Mike

     > -----Original Message-----
     > From: Gre7g Luterman 
     > [mailto:gre7g-k-modpython.e475ec@wolfhome.com] 
     > Sent: Friday, June 06, 2003 12:36 AM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Announcement: Roadkill version 
     > 0.01 "Kitten"
     > 
     > 
     > And now for something completely different...  
     > 
     > I'd like to announce my new mod_python project "Roadkill".
     > 
     > Roadkill is a Python-language version of PHP/ASP.  It 
     > lets you embed 
     > Python code within a .epy webpage to generate dynamic 
     > content.  This 
     > lets you edit your code with your favorite GUI webpage 
     > editor instead 
     > of pasting HTML into your CGI or keeping a bunch of 
     > templates that 
     > your CGI imports.
     > 
     > The homepage for Roadkill can be found at: 
     > http://roadkill.sourceforge.net/
     > 
     > The documentation is thin and the bugs are most likely 
     > numerous (what 
     > can you expect for version 0.01?), but if any of you 
     > would like to 
     > play with it, I would certainly appreciate comments and 
     > bug reports.  
     > It may not be much to look at now, but hopefully you'll 
     > agree that it 
     > has great potential.
     > 
     > I now return you to your regularly scheduled mailing list.  ;-)
     > 
     > Gre7g.
     > 
     > =================================================================
     > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
     > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
     >                       Into each wound, a little salt must fall...
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From jgardner at jonathangardner.net  Fri Jun  6 07:35:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054856231.1465.17.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
Message-ID: <200306060735.36876.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> I'm using postgresql 7.3 and python from debian unstable.
>
> After varios upgrades my scripts are working bad.
>
> I can not find what happens.
>

Segfaults are always troublesome.

What I used to do in mod_perl was isolate the page or behavior that was giving 
the seg fault. Then I would try and see which version (you're using a version 
control system, right?) introduced the problem. If it wasn't obvious by then, 
I would put various log messages throughout the suspected handler.

Usually that would lead me to one line of code that was giving the problem. At 
least then I can post to the mailing list about what was causing the problem.

I think the same kind of strategy would work for mod_python as well.

Good luck, you have a fun journey ahead of you!

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
SklnZ2tHiMWzTjyEd5hZJ/8=
=Szy2
-----END PGP SIGNATURE-----

From grisha at modpython.org  Fri Jun  6 11:05:03 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>
Message-ID: <20030606110400.N43535-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> You should post this in the mod_python dev list as well; currenty there
> is discussion of mod_psp (python server pages) being folded into
> mod_python

It's not in discussion, this already has happened... :-)

Grisha

From barr at cs.cornell.edu  Fri Jun  6 12:13:57 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606110400.N43535-100000@oldchief.reply.net>
Message-ID: <Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>

>> You should post this in the mod_python dev list as well; currenty there
>> is discussion of mod_psp (python server pages) being folded into
>> mod_python
>
>It's not in discussion, this already has happened... :-)

Dear Grisha,

I wanted to post earlier, but I didn't find the time. I find this
"folding" to be a little troubling. Why not fold Zope into mod_python?
Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
WebWare?
  http://www.zope.org/
  http://spyce.sourceforge.net/
  http://roadkill.sourceforge.net/
  http://draco.boskant.nl/
  http://www.cheetahtemplate.org/
  http://webware.sourceforge.net/
There are many others at:
  http://spyce.sourceforge.net/doc-add_related.html

mod_psp is, I think, the newest of ALL of these projects. Most of the
alternatives above have reasonable user bases. So why has mod_psp been
folded into mod_python? Why not other, similar, projects? Is this an
internal Apache Foundation issue? If so, then I have already mentioned
that I am willing to contribute the Spyce codebase to the AF for
integration with mod_python. But, I'm not sure that's the right solution
either...

I think that mod_python holds an esteemed position now that the project
has decided to go with the Apache Foundation. It has added visibility
and clout. Perhaps, we should consider and plan its development so as to
attract a larger user base.

Should it simply be a pure Python handler, or should it be extended with
more functionality? There is a difference between mod_python
compatability and mod_python inclusion. Should there be a modular
extension and/or installation mechanism or should there be a "folding"
for all willing projects? If mod_python picks one candidate, what will
it mod_python do to the other projects? Will some other projects begin
to fork mod_python as a result? Do we want a duplication of effort of
either the mod_python-type or the mod_psp-type code?

I humbly recommend that mod_python remain pure, and serve as a Python
handler. It does this job very well! I think that what mod_python needs
is the creation and documentation of a standard extension mechanism to
allow for psp/spyce/draco/roadkill/etc. type of extensions. They would
not be included with mod_python, but would involve a simple .rpm (or
whatever) installation. (That's where the standardization helps!) This
will allow projects like Spyce, which works well with FastCGI,
mod_python, CGI, via proxying and even with other webservers (Xitami) to
continue to perform efficiently within Apache and also to broaden the
user base with support for other web platforms.

Thoughts?

All the best,
Rimon.

From jm at eemsystems.cjb.net  Fri Jun  6 12:02:44 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306060735.36876.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
Message-ID: <1054918964.11887.13.camel@eemsystems.com>

the problem is here:***

what is wrong in this code. this is for reading a cookie from brower.

Thanks..

def verificaraut(req, ID):
	import re
	galleta=getCookie(req.headers_in, ID) ******************
	
	if galleta==None:
	     return '0',''
	lista=re.split(":",galleta)
	
	if lista[0]=='0':
		return '0',lista
	if lista[3]<>req.connection.remote_ip:
		return '0',lista
	
	return lista[0], lista

def getCookie(headers_in, key):
    if headers_in.has_key('Cookie'):
        import Cookie
        C = Cookie.SmartCookie(headers_in['Cookie'])
        C.load(headers_in['Cookie'])
        if C.has_key(key):
            return C[key].value
    return None





El vie, 06-06-2003 a las 09:35, Jonathan Gardner escribi?:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> > I'm using postgresql 7.3 and python from debian unstable.
> >
> > After varios upgrades my scripts are working bad.
> >
> > I can not find what happens.
> >
> 
> Segfaults are always troublesome.
> 
> What I used to do in mod_perl was isolate the page or behavior that was giving 
> the seg fault. Then I would try and see which version (you're using a version 
> control system, right?) introduced the problem. If it wasn't obvious by then, 
> I would put various log messages throughout the suspected handler.
> 
> Usually that would lead me to one line of code that was giving the problem. At 
> least then I can post to the mailing list about what was causing the problem.
> 
> I think the same kind of strategy would work for mod_python as well.
> 
> Good luck, you have a fun journey ahead of you!
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
> SklnZ2tHiMWzTjyEd5hZJ/8=
> =Szy2
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From todd at slack.net  Fri Jun  6 13:56:09 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
Message-ID: <20030606135609.B11869@crank.slack.net>

Hello all,

* Rimon Barr <barr@cs.cornell.edu> [2003-06-06 12:19]:

> I wanted to post earlier, but I didn't find the time. I find this
> "folding" to be a little troubling. Why not fold Zope into mod_python?
> Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
> WebWare?

As a recent "I have seen the light" arrival to Python, I have to agree that this is becoming overwhelming - at least for someone wandering into the room and wanting to work with Python/mod_python-type applications.

Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

> I think that mod_python holds an esteemed position now that the project
> has decided to go with the Apache Foundation. It has added visibility
> and clout. Perhaps, we should consider and plan its development so as to
> attract a larger user base.

Very much agree - most arrivals at mod_python are likely perl/php/apache/jakarta users, and Apache status definitely holds clout and "brand recognition" - and likely not just with developers, also managers and similar types.

> Should it simply be a pure Python handler, or should it be extended with
> more functionality? There is a difference between mod_python
> compatability and mod_python inclusion. Should there be a modular
> extension and/or installation mechanism or should there be a "folding"
> for all willing projects? If mod_python picks one candidate, what will

This I'm too new and inexperienced to comment on. I can say it eternally frustrates me that almost every ISP in the world supports mod_php but near-zero mod_python. Hopefully this will improve (someday) with Apache2/MPM or something, but in the short-term this kills mod_(python|perl) community numbers compared to PHP, the quality of those communities being besides the point I think (debatable yes).

Looking forward to what transpires!

-- 

___________________________
toddgrimason*todd@slack.net


From mod_python at ols.inorganic.org  Fri Jun  6 11:16:03 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606135609.B11869@crank.slack.net>
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
Message-ID: <20030606181603.GB8728@nag.inorganic.org>

On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> This I'm too new and inexperienced to comment on. I can say it
> eternally frustrates me that almost every ISP in the world supports
> mod_php but near-zero mod_python. Hopefully this will improve

I'm not tremendously surprised by this, actually.

By way of background, I should note that I've been programming Perl for
about 11 years now, PHP for about two years, and Python for about two
months.  You can guess which one's my favourite (though they're not
exactly interchangeable).

In my experience, it's easier to integrate PHP into a light-weight web
system than, say, Python.  This is both from the installation
perspective (I had to battle mod_python a little to get it to work on my
system) and from the authoring perspective, where PHP is the VisualBasic
of the programming world; it's closer to ASP in its simplicity than
Python is.  I was authoring PHP code within about a day of getting it
installed; I still haven't done anything useful with mod_python, though
I'm working on it. 

Now, mind you, that comes at a cost -- in my experience, it's much more
likely to see brute-force PHP projects that have just amazingly nasty
code (I recently had to put some bugfixes into a 12,000 PHP project and
was ... horrified at some of the practices), and Python almost forces
you to write nice code.  Partially, it's that old OOP concept -- even
after using PHP for about two years, I only realized a few months ago it
had classes -- nobody I talked to ever used them, mentioned them, or
referred to them in any documentation.  

-roy
From todd at slack.net  Fri Jun  6 14:33:10 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606181603.GB8728@nag.inorganic.org>;
	from mod_python@ols.inorganic.org on Fri, Jun 06, 2003 at 11:16:03AM -0700
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
	<20030606181603.GB8728@nag.inorganic.org>
Message-ID: <20030606143310.C11869@crank.slack.net>

* Roy S. Rapoport <mod_python@ols.inorganic.org> [2003-06-06 14:11]:

> On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> > This I'm too new and inexperienced to comment on. I can say it
> > eternally frustrates me that almost every ISP in the world supports
> > mod_php but near-zero mod_python. Hopefully this will improve
> 
> I'm not tremendously surprised by this, actually.

Oh me neither, I said 'frustrates' not 'suprises' :-)

Perhaps a better comparison would be java servlets running in Tomcat or Resin, a java Web App container. Definitely not widely available for low-end ISP accounts, admittedly has the Sun marketing muscle behind it, but seems more focused.

While there are multiple containers (tomcat,resin,jetty,sun-one,etc.), pretty much every app built on them (every?) leverages the java.servlet.* classes and or jsp (built on top of servlets). I guess my point is this lets everyone focus efforts on higher-level frameworks - Struts, Turbine, whatever - extending the base plumbing (classes) when needed, but not inventing the wheel over and over again, which fun as it may be, appears to me to be hindering overall progress of Python on the web and/or mod_python.

31 flavors is great, but when you're wondering "how do I eat ice cream?", 31 choices before starting is a bit intimidating (sorry for the commercial advertisement there).

Am I completely off-base here?


-- 

___________________________
toddgrimason*todd@slack.net


From jack_diederich at email.com  Fri Jun  6 13:55:45 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
    "folding" mod_psp
Message-ID: <20030606185545.18394.qmail@email.com>

From: Todd Grimason <todd@slack.net>
> Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

No one can read all mailing lists, but this has been covered
at length on comp.lang.python.  The general feeling is that
there are a lot of frameworks for a couple reasons:
  * No one has written a killer framework yet
  * Different users have different needs

>From a marketing perspective it sucks because you can't say
python is _this_ excact collection of tools.  But python
is a language and not a framework (and only sometimes a
language coupled with a WWW framework).  No one laments
the variety of C web servers and frameworks.

This is only a problem if you compare python to PHP.  PHP
isn't a language, (or if it is, it is a nasty little hack of
a language) it is a specific framework for web stuff.
I prefer python for web apps because I prefer python for
everything (for a reasonable value of everything).
But python isn't PHP and their goals & capabilities shouldn't
be confused or compared.

-jack
-- 
_______________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From geert at boskant.nl  Fri Jun  6 22:19:15 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <10513932398.20030606125129@symbolist.ru>
Message-ID: <000001c32c68$e6a54e80$1004a8c0@GREETOP>

Spyce wrote:

> GL> And now for something completely different...
> 
> GL> I'd like to announce my new mod_python project "Roadkill".
> 
> GL> Roadkill is a Python-language version of PHP/ASP.  It 
> lets you embed
> GL> Python code within a .epy webpage to generate dynamic 
> content.  This 
> GL> lets you edit your code with your favorite GUI webpage 
> editor instead 
> GL> of pasting HTML into your CGI or keeping a bunch of 
> templates that 
> GL> your CGI imports.
> 
> GL> The homepage for Roadkill can be found at:
> GL> http://roadkill.sourceforge.net/
> 
> There is a similar project at http://spyce.sourceforge.net. 
> And, yes, it uses mod_python too.

And there are numerous other projects out there which are similar or not
so similar. If you check the WebProgramming wiki at python.org, you'll
find some 40 different systems, including one I am responsible for which
I won't mention here because I don't want to do any false advertising.

The situation about Python web frameworks is a bit confusing and I think
there is no "killer app" yet. However, I have a strong personal opinion
that the standard <p> <% print "Hello, world!" %> templating systems
don't cut it. When you create a big dynamic web site, you need something
more powerful and on a much higher abstraction level. Creating a large
site with a traditional ASP system is like writing a GUI word processor
with only a setPixel() call.

Of course I wish the original author of this thread all the best with
his Roadkill project. I would advise to look around and learn from the
many good ideas that are present in the current Python Web frameworks.

Cheers,
Geert

From neel at mediapulse.com  Fri Jun  6 16:51:47 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>

I'll take a moment in this thread to plug Albatross
(http://www.object-craft.com.au/projects/albatross/) as the "killer"
template system for python, or at least a strong contender.  It doesn't
look like PHP, it's far from any perl package; it solves the
template/state problem in a very python way.  Documentation is there,
but it's currently getting a rewrite for clarity (which most agree it
needs).  Docs aside, within a day I had it running with mod_python and
in 3 days extended the framework with a custom tag; and I was also
learning python at the same time.

If you are open to see there might be a better way to do things, you can
find python very helpful.  If you're looking to use the same "perl
logic" or PHP that you always have, python will go against the grain
with you.  It's really not that much different than C programmer moving
to C++; the syntax change is deceptively simple and hide the real
differences.

Mike

From todd at slack.net  Fri Jun  6 17:07:38 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>;
	from neel@mediapulse.com on Fri, Jun 06, 2003 at 04:51:47PM -0400
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606170738.E11869@crank.slack.net>

* Michael C. Neel <neel@mediapulse.com> [2003-06-06 16:55]:

> If you are open to see there might be a better way to do things, you can
> find python very helpful.  If you're looking to use the same "perl
> logic" or PHP that you always have, python will go against the grain
> with you.  It's really not that much different than C programmer moving
> to C++; the syntax change is deceptively simple and hide the real
> differences.

I'm not sure if this was specifically in response to my earlier post, but since I don't think anyone else mentioned PHP, I'm guessing so...

I clouded the issue by mentioning PHP - I only meant to point it out for it's widespread availablity - most definitely not for the language itself or the "PHP way" of doing things. Wishing I never mentioned it! ;-)

I will look into Albatross again, thanks.

-- 

___________________________
toddgrimason*todd@slack.net


From grisha at modpython.org  Fri Jun  6 17:52:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606174027.J48945-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender.

The problem with Albatross for me is the same one with all the others - it
is yet another language to learn:

<al-for iter="name" expr="keys">
    <tr>
         <td><al-value expr="name.value()"></td>
         <td><al-value expr="environ[name.value()]"></td>
    <tr>
</al-for>

This is not Python. Nor is it HTML.

Grisha

From djc at object-craft.com.au  Sat Jun  7 13:27:12 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <m3of1aefe7.fsf@ferret.object-craft.com.au>


> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the
> > "killer" template system for python, or at least a strong
> > contender.
> 
> The problem with Albatross for me is the same one with all the
> others - it is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

That is true.  If you restrict yourself to Python and HTML you are
forced to do something like this:

for name in keys:
    print '<tr>'
    print '  <td>%s</td>' % name
    print '  <td>%s</td>' % environ[name]
    print '<tr>'

That does not look bad until you build a semi-complex application.

You find yourself in the situation where you cannot change the HTML
presentation without refactoring the surrounding Python application
logic.  Likewise you find it next to impossible to change the
application structure without breaking the presentation.  The above
approach leads to the escalating difficulty and cost (in time and/or
money) of enhancements.

The introduction of a mechanism (or third "language") that allows
and/or imposes a clear interface between the presentation and
implementation increases the ability to change one without major
impact on the other.  This is a huge win for applications that will
change over time.

In the world of GUI application development the model-view-controller
approach has proven itself as a mechanism to manage the same
complexity.  It provides a clear separation of the GUI, the business
logic, and the code that glues them together.  Before the adoption of
MVC (and related patterns), applications tended to be an undisciplined
mixture of GUI and application code.  Over time companies that were
not able to enhance or evolve their products could not compete and
went out of business.  The approach to web applications encouraged PHP
(and similar approaches) is reminiscent of GUI application development
before MVC.

The Albatross approach to the "third" language is not perfect.  I am
not sure that any approach to achieving this separation is perfect.
In my opinion, if there was a perfect approach we would not be having
this discussion, we would all just use the perfect approach.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 08:58:14 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <000001c32cc2$2a97e0e0$1004a8c0@GREETOP>

Michael,

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the 
> "killer" template system for python, or at least a strong 
> contender.  It doesn't look like PHP, it's far from any perl 
> package; it solves the template/state problem in a very 
> python way.  Documentation is there, but it's currently 
> getting a rewrite for clarity (which most agree it needs).  
> Docs aside, within a day I had it running with mod_python and 
> in 3 days extended the framework with a custom tag; and I was 
> also learning python at the same time.

what is the template/state problem?

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:19:02 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <000101c32cc5$12687180$1004a8c0@GREETOP>

Dave,

> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> That is true.  If you restrict yourself to Python and HTML 
> you are forced to do something like this:
> 
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'
> 
> That does not look bad until you build a semi-complex application.
> 
> You find yourself in the situation where you cannot change 
> the HTML presentation without refactoring the surrounding 
> Python application logic.  Likewise you find it next to 
> impossible to change the application structure without 
> breaking the presentation.  The above approach leads to the 
> escalating difficulty and cost (in time and/or
> money) of enhancements.
>
> The introduction of a mechanism (or third "language") that 
> allows and/or imposes a clear interface between the 
> presentation and implementation increases the ability to 
> change one without major impact on the other.  This is a huge 
> win for applications that will change over time.

I don't agree with you that banning a 3rd party language implies that
you're stuck with the horrible

<%
	long and tedious python fragment here
%>

style of coding.

Draco tries to solve this problem in a different way, by still using
only Python as the scripting language. This works by dividing your code
in a functional part and a formatting part. The function part is put in
a so-called handler, which resides in a separate file (1 per directory).
The functional code execute the user request and puts all the results in
a dictionary dubbed the interface. This almost always reduces your
formatting code to something like this:
 
<%
    for tr in rows:
        print """
            html formatted string
             """ % tr
%>

The rows variable is set in the handler and contains completely
processed and ready to print data.

Using a special notation:

<%
    for tr in rows:
        print """%%>
            html formatted string
             <%%""" % tr
%>

you can even edit the html format string with your favourite
Dreamweaver/Frontpage/whatever.

The premise on which I've built Draco is that you can't elimiate all
code from the template, but you can minimize it. A possible solution is
to use a different templating language but IMHO this just adds
complexity because you now have two languages (plus html) instead of
one. Because Python is just as easy to learn as any old templating
language I don't see how this helps. Maybe at first Python code is a bit
scary but this should pass quickly.

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:25:57 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
Message-ID: <000201c32cc6$09bddb50$1004a8c0@GREETOP>

Ramon,

> I wanted to post earlier, but I didn't find the time. I find
> this "folding" to be a little troubling. Why not fold Zope 
> into mod_python? Why not Spyce? Why not Roadkill? Why not 
> Draco? Why not Cheetah, or WebWare?
>   http://www.zope.org/
>   http://spyce.sourceforge.net/
>   http://roadkill.sourceforge.net/
>   http://draco.boskant.nl/
>   http://www.cheetahtemplate.org/
>   http://webware.sourceforge.net/
>
> There are many others at:
>   http://spyce.sourceforge.net/doc-add_related.html
 
[...]

> Should it simply be a pure Python handler, or should it be
> extended with more functionality? There is a difference 
> between mod_python compatability and mod_python inclusion. 
> Should there be a modular extension and/or installation 
> mechanism or should there be a "folding" for all willing 
> projects? If mod_python picks one candidate, what will it 
> mod_python do to the other projects? Will some other projects 
> begin to fork mod_python as a result? Do we want a 
> duplication of effort of either the mod_python-type or the 
> mod_psp-type code?

As the author of one of the systems you mention above, I was worried a
bit too when the announcement was made to add PSP to mod_python.
However, my understanding is that the component is implemented as a
mod_python handler so that it is completely optional. I hope that it
remains like this: mod_python as a fast and pure Apache-Python interface
with an optional templating system.

The good thing about this move is that new users will have something to
get started with. On the other hand, a web framework that does a bit
more than the standard ASP stuff is probably much larger in scope than
mod_python, so then it would be like adding mod_python to the framework
instead of the other way around.

> I humbly recommend that mod_python remain pure, and serve as
> a Python handler. It does this job very well! I think that 
> what mod_python needs is the creation and documentation of a 
> standard extension mechanism to allow for 
> psp/spyce/draco/roadkill/etc. type of extensions. They would 
> not be included with mod_python, but would involve a simple .rpm (or
> whatever) installation. (That's where the standardization 
> helps!) This will allow projects like Spyce, which works well 
> with FastCGI, mod_python, CGI, via proxying and even with 
> other webservers (Xitami) to continue to perform efficiently 
> within Apache and also to broaden the user base with support 
> for other web platforms.

It is already quite easy to add an extension to mod_python. Mostly it is
just the definition of the appropriate "PythonHandler" directives. What
would really help IMHO is a good and independent web site describing the
current situation with the many different frameworks that lists and
rates the different options.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 18:46:31 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000101c32cc5$12687180$1004a8c0@GREETOP>
References: <000101c32cc5$12687180$1004a8c0@GREETOP>
Message-ID: <m3of1a9swo.fsf@ferret.object-craft.com.au>


> Dave,

> > > <al-for iter="name" expr="keys">
> > >     <tr>
> > >          <td><al-value expr="name.value()"></td>
> > >          <td><al-value expr="environ[name.value()]"></td>
> > >     <tr>
> > > </al-for>
> > > 
> > > This is not Python. Nor is it HTML.
> > 
> > That is true.  If you restrict yourself to Python and HTML 
> > you are forced to do something like this:
> > 
> > for name in keys:
> >     print '<tr>'
> >     print '  <td>%s</td>' % name
> >     print '  <td>%s</td>' % environ[name]
> >     print '<tr>'

[snip]

> > The introduction of a mechanism (or third "language") that 
> > allows and/or imposes a clear interface between the 
> > presentation and implementation increases the ability to 
> > change one without major impact on the other.  This is a huge 
> > win for applications that will change over time.

> I don't agree with you that banning a 3rd party language implies
> that you're stuck with the horrible
> 
> <%
> 	long and tedious python fragment here
> %>
> 
> style of coding.

You are of course correct.  The <% python code %> construct just makes
it a lot easier to place application code in the wrong place.  That is
not really a criticism of the mechanism, it is a criticism of people
who do that.

Mind you, I could argue that while you have not introduced a third
language, you have introduced a new mechanism.  That was part of the
point I was trying to make.  You need either a new language or a
special mechanism.

> Draco tries to solve this problem in a different way, by still using
> only Python as the scripting language. This works by dividing your
> code in a functional part and a formatting part. The function part
> is put in a so-called handler, which resides in a separate file (1
> per directory).  The functional code execute the user request and
> puts all the results in a dictionary dubbed the interface. This
> almost always reduces your formatting code to something like this:
>  
> <%
>     for tr in rows:
>         print """
>             html formatted string
>              """ % tr
> %>

How is the application namespace made available to the templating?

> The rows variable is set in the handler and contains completely
> processed and ready to print data.
> 
> Using a special notation:
> 
> <%
>     for tr in rows:
>         print """%%>
>             html formatted string
>              <%%""" % tr
> %>

Very sneaky.  I like it.

> The premise on which I've built Draco is that you can't elimiate all
> code from the template, but you can minimize it. A possible solution
> is to use a different templating language but IMHO this just adds
> complexity because you now have two languages (plus html) instead of
> one. Because Python is just as easy to learn as any old templating
> language I don't see how this helps. Maybe at first Python code is a
> bit scary but this should pass quickly.

No argument here.

I have toyed with the idea of experimenting with different templating
mechanisms in Albatross.  The templating is only part of the problem
that Albatross is trying to address.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 11:02:10 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3of1a9swo.fsf@ferret.object-craft.com.au>
Message-ID: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>


> You are of course correct.  The <% python code %> construct 
> just makes it a lot easier to place application code in the 
> wrong place.  That is not really a criticism of the 
> mechanism, it is a criticism of people who do that.

Yes, I agree fully.

> Mind you, I could argue that while you have not introduced a 
> third language, you have introduced a new mechanism.  That 
> was part of the point I was trying to make.  You need either 
> a new language or a special mechanism.

Ok, fair enough.
 
> > reduces your formatting code to something like this:
> >  
> > <%
> >     for tr in rows:
> >         print """
> >             html formatted string
> >              """ % tr
> > %>
> 
> How is the application namespace made available to the templating?

Funny that you should say namespace, because that is the 3rd and last
central concept in Draco ;-) (the others are templates and handlers).
The variables from the "interface" namespace are available as global
variables to all code in templates.

Other namespaces include "session", "user", "cookie", "config" and
"args". All of these have a different meaning and putting variables in
them does different things. Namespaces are _the_ mechanism in Draco to
use for persistency.

> No argument here.
> 
> I have toyed with the idea of experimenting with different 
> templating mechanisms in Albatross.  The templating is only 
> part of the problem that Albatross is trying to address.

Yes, the same goes for Draco here. I've had some requests to support TAL
(OpenTAL) as the templating language, as this is becoming a sort of
de-facto standard. If I get to it one day I will.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 20:23:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
References: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
Message-ID: <m3llwe6vac.fsf@ferret.object-craft.com.au>

>>>>> "Geert" == Geert Jansen <geert@boskant.nl> writes:

>> How is the application namespace made available to the templating?

Geert> Funny that you should say namespace, because that is the 3rd
Geert> and last central concept in Draco ;-) (the others are templates
Geert> and handlers).  The variables from the "interface" namespace
Geert> are available as global variables to all code in templates.

I ask about namespaces as they are central to all of these solutions
that separate presentation from implementation.  The namespace is the
conduit.

Geert> Other namespaces include "session", "user", "cookie", "config"
Geert> and "args". All of these have a different meaning and putting
Geert> variables in them does different things. Namespaces are _the_
Geert> mechanism in Draco to use for persistency.

In Albatross there are only two namespaces; local and global.  This
makes expressions in the template language easier to handle.  Both
namespaces are managed by the execution context.  A new execution
context and local namespace is created for every browser request.
Session values are loaded into and saved from the local namespace by
the toolkit.  Session values are a subset of the values in the local
namespace.

The global namespace for template expressions is set to the globals of
the code that executed the template.  This allows you to do things
like this in a page module (code that handles an application page):

    import os

    def page_display(ctx):
        ctx.run_template('env.html')

And then in the env.html template:

    Path is <al-value expr="os.environ['PATH']">

I have been browsing through the Draco documentation.  It looks like
Draco and Albatross are trying to solve slightly different problems.  

Correct me if I am wrong, but Draco is designed to run via mod_python.
It also seems more narrowly focused than Albatross.  This can be
either a good thing or a bad thing depending upon the problem you are
trying to solve.  If the problem fits within the area that Draco
targets, then Draco will solve more application problems than
Albatross.

Albatross is designed as a set of classes that you can mix and match
to allow many different deployment options.  Currently Request classes
are provided for CGI and mod_python deployment.  It should be
relatively painless to build Request classes for other deployment
platforms (Medusa, SimpleHTTPServer, Twisted).  Just this week someone
sent us 24 lines of code (including blank lines) that allows FastCGI
deployment.

Session management is implemented via a different set of mixin
classes.  This currently allows us to store sessions in a session
server or in the local filesystem.  In the not too distant future we
will probably add a new mixin for keeping sessions in memory for
FastCGI deployed applications.  This will eliminate all of the
pickling overhead.

>> No argument here.
>> 
>> I have toyed with the idea of experimenting with different
>> templating mechanisms in Albatross.  The templating is only part of
>> the problem that Albatross is trying to address.

Geert> Yes, the same goes for Draco here. I've had some requests to
Geert> support TAL (OpenTAL) as the templating language, as this is
Geert> becoming a sort of de-facto standard. If I get to it one day I
Geert> will.

I had a serious look at TAL.  I really like the attribute and tag
level manipulation.  I am convinced that the control flow in TAL is
not a good idea.  Trouble is, I cannot think of anything better for
control flow that is consistent with TAL.

- Dave

-- 
http://www.object-craft.com.au

From matt at pollenation.net  Sat Jun  7 14:05:58 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <1054991158.29991.283.camel@localhost>

On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> template/state problem in a very python way.

I don't want to turn this into an Albatross advocacy session but I
couldn't agree with the above. Albatross is extremely simple to use but
remarkably powerful.

I've spent a while looking through a number of the available frameworks.
They are all pretty good but, to me, Albatross stood out.

> Documentation is there, but it's currently getting a rewrite for clarity (which most agree it
> needs).

I would just like to mention that the Albatross documentation is already
remarkably good, especially for an open source product where the docs
often lag the code (not that commercial docs are any better!). I got a
really good idea about what Albatross could do just by spending an
evening reading. The new docs look even better.

Anyway, enough advocacy.

Cheers, Matt

From matt at pollenation.net  Sat Jun  7 14:26:37 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <1054991158.29991.283.camel@localhost>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
	 <1054991158.29991.283.camel@localhost>
Message-ID: <1054992397.20821.286.camel@localhost>

On Sat, 2003-06-07 at 14:05, Matt Goodall wrote:
> On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> > template/state problem in a very python way.
> 
> I don't want to turn this into an Albatross advocacy session but I
> couldn't agree with the above. Albatross is extremely simple to use but
> remarkably powerful.

Oops, that should have said "couldn't agree _more_ with the above".

- Matt

From rpinder at usc.edu  Sat Jun  7 07:48:35 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030530191059.N36634-100000@oldchief.reply.net>
References: <20030530191059.N36634-100000@oldchief.reply.net>
Message-ID: <3EE1FB43.2020102@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From rpinder at usc.edu  Sat Jun  7 08:25:04 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Simple 'redirect' question
Message-ID: <3EE203D0.9030407@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From verence at web.de  Sat Jun  7 17:27:49 2003
From: verence at web.de (martin voigt)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] <no subject>
Message-ID: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>

hi *,

how do i use a content handler to send binary data to the client? the write method supports only strings.

thanks in advance,

martin
______________________________________________________________________________
UNICEF bittet um Spenden fur die Kinder im Irak! Hier online an
UNICEF spenden: https://spenden.web.de/unicef/special/?mc=021101

From tree at basistech.com  Sat Jun  7 11:30:17 2003
From: tree at basistech.com (Tom Emerson)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <16098.1289.684252.548084@magrathea.basistech.com>

martin voigt writes:
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Strings of 8-bit bytes: it "just works" as long as you set the
appropriate content-type.

-- 
Tom Emerson                                          Basis Technology Corp.
Software Architect                                 http://www.basistech.com
  "Beware the lollipop of mediocrity: lick it once and you suck forever"
From rpinder at usc.edu  Sat Jun  7 08:36:06 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 21:53:34 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030607150319.GE1192@eleanor.internal.ywlcs.org>
References: <20030530191059.N36634-100000@oldchief.reply.net>
 <3EE1FB43.2020102@usc.edu> <20030607150319.GE1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE20666.5010900@usc.edu>

Thanks Dustin,

So you define  HTTP_MOVED_TEMPORARILY  to be the string constant of the 
actual url ??

Thanks
r

Dustin Mitchell wrote:

>On Sat, Jun 07, 2003 at 07:48:35AM -0700, rpinder wrote:
>  
>
>>Rather than load up the end of my python script with html, how can I 
>>redirect the users browser out of the script, and to an html file 
>>located in another directory within my htdocs directory structure ??
>>    
>>
>
>Send a "Location" header and return HTTP code 302, a.k.a.
>
>  return apache.HTTP_MOVED_TEMPORARILY
>
>or
>
>  raise apache.SERVER_RETURN, apache.HTTP_MOVED_TEMPORARILY
>
>Dustin
>
>  
>

From i at mindlace.net  Sat Jun  7 11:46:51 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] supporting modular mod_python extensions
 vs.	"folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
References: <20030606174027.J48945-100000@oldchief.reply.net>
 <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <2147483647.1054986411@[10.0.1.2]>

--On 7 Saturday, June 2003 13:27 +1000 Dave Cole 
<djc@object-craft.com.au> wrote:

> That is true.  If you restrict yourself to Python and HTML you are
> forced to do something like this:
>
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'

That's certainly not the only other possible approach. I think PyMeld 
is the beginning of a better solution. It gives an example almost 
exactly like the one above at <http://www.entrian.com/PyMeld/>

My only problem with it is its repitition of id tags in successive 
nodes, but that's fixable - the important part, the very pythonic 
object model it gives you for the nodes of the page you care about- is 
there.

This is obviously not a state solution or any of the rest of the things 
Albatross helps you with.

~mindlace               GPG Key: http://mindlace.net/public_key
http://mindlace.net                          Enough is a feast.
From dustin at ywlcs.org  Sat Jun  7 14:14:19 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <20030607191418.GG1192@eleanor.internal.ywlcs.org>

On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> hi *,
> 
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Python holds arbitrary binary data in strings.  So you can do, e.g.,

data = open("my.gif", "r").read()
req.content_type = 'image/gif'
req.send_http_header()
req.write(data)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From neel at mediapulse.com  Sat Jun  7 19:17:20 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>

I suppose it's all a matter of taste really, to me the problem with the
PHP-like methods is there is no seperation of logic from design; or the
method doesn't lend itself well to it.  I'm willing to learn some
special tags if I know all real the python code is in a .py file and the
html in a .html file.

Mike

     > The problem with Albatross for me is the same one with 
     > all the others - it
     > is yet another language to learn:
     > 
     > <al-for iter="name" expr="keys">
     >     <tr>
     >          <td><al-value expr="name.value()"></td>
     >          <td><al-value expr="environ[name.value()]"></td>
     >     <tr>
     > </al-for>
     > 
     > This is not Python. Nor is it HTML.
     > 
     > Grisha
     > 
     > 

From neel at mediapulse.com  Sat Jun  7 19:22:32 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>

     > what is the template/state problem?
     > 
     > Cheers,
     > Geert

The bane of my existance as a web programmer.  I need a template system
that works well with the output from design tools like Dreamweave so I
don't find myself spending hours vi'ng design tags to get it to work in
the app.

The other is the web is a stateless application.  The web browser and
server treat ever click as a completely separate action, and has no
knoweldge of what came before.  That's left as an exercise of the
programmer.  Tools like Albatross that provide me with a base
appliaction that appears stateful to me while behind the scenes coping
with the reality of the web let me focus on the "cool" parts of the
application.

Mike

From verence at web.de  Sun Jun  8 01:56:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
	<20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE27BA7.7010405@web.de>

Dustin Mitchell wrote:

> On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> 
>>hi *,
>>
>>how do i use a content handler to send binary data to the client? the write method supports only strings.
> 
> 
> Python holds arbitrary binary data in strings.  So you can do, e.g.,
> 
> data = open("my.gif", "r").read()
> req.content_type = 'image/gif'
> req.send_http_header()
> req.write(data)
> 
> Dustin
> 
thanks, shame on my, never tried the simplest one... :)

greets

From andy at nervebox.com  Sat Jun  7 22:35:33 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] PYTHONPATH question
Message-ID: <3680743.1055039733708.JavaMail.SYSTEM@chango>

I'm new to [mod_]python and I'm having trouble with PYTHONPATH.  
When I import MySQLdb using the interactive command line,it works fine.  When I import MySQLdb into a module called by mod_python, I get this: 

ImportError: No module named MySQLdb

I've tried setting the PYTHONPATH environment var in httpd.conf using the Apache directive SetEnv, but still no good.

What am I missing?  Does mod_python run python modules as the Apache user?  If so, what's the best way to set the value of PYTHONPATH?

 - thanks in advance,
 - andy 
      
      
      
    
From grisha at modpython.org  Sat Jun  7 22:39:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <20030607223735.H69064-100000@oldchief.reply.net>



On Sat, 7 Jun 2003, Dustin Mitchell wrote:

> req.send_http_header()

in mod_python 3.x this is a noop - in httpd 2.0 you don't have control
over when the headers go out - they will be sent just before the first
byte of output.

Grisha

From jgardner at jonathangardner.net  Sat Jun  7 22:11:44 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054918964.11887.13.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
	<200306060735.36876.jgardner@jonathangardner.net>
	<1054918964.11887.13.camel@eemsystems.com>
Message-ID: <200306072211.45891.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 10:02, Julio Mendoza wrote:
> the problem is here:***
>
> what is wrong in this code. this is for reading a cookie from brower.
>
> Thanks..
>
> def verificaraut(req, ID):
> 	import re
> 	galleta=getCookie(req.headers_in, ID) ******************
>
> 	if galleta==None:
> 	     return '0',''
> 	lista=re.split(":",galleta)
>
> 	if lista[0]=='0':
> 		return '0',lista
> 	if lista[3]<>req.connection.remote_ip:
> 		return '0',lista
>
> 	return lista[0], lista
>
> def getCookie(headers_in, key):
>     if headers_in.has_key('Cookie'):
>         import Cookie
>         C = Cookie.SmartCookie(headers_in['Cookie'])
>         C.load(headers_in['Cookie'])
>         if C.has_key(key):
>             return C[key].value
>     return None
>

What line in getCookie is giving you the problem?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
KBAjmIpvSI1xVJJxAUPDyLM=
=Kjlg
-----END PGP SIGNATURE-----


From jgardner at jonathangardner.net  Sat Jun  7 22:31:53 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <200306072231.54572.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 13:19, Geert Jansen wrote:
> The situation about Python web frameworks is a bit confusing and I think
> there is no "killer app" yet. However, I have a strong personal opinion
> that the standard <p> <% print "Hello, world!" %> templating systems
> don't cut it. When you create a big dynamic web site, you need something
> more powerful and on a much higher abstraction level. Creating a large
> site with a traditional ASP system is like writing a GUI word processor
> with only a setPixel() call.
>

Let's make the killer app, right here, right now. I am building the 
framework for my sites, and a commercial project. I know that I want to use 
mod_python because there are so many benefits to it, even above perl.

What would you suggest, within the limitations of current HTTP technology?

Some ideas I came up with are as follows. Let's discuss -- be honest about 
the ideas. You add your own.

- - Forms. It seems nice to have the code that processes the form input right 
next to the code that makes the form HTML code. This screams "put it all in 
a class!" So I came up with a few classes that should be subclassed:
	- Text input
	- Int input
	- Float input
	- Zip Code input
	... etc ...

You can do the same with the other form elements -- select, checkboxes, and 
radio buttons.

- - Groups of form elements. Sometimes I want a group of elements that go 
together. Example: Login box (name/email, password, submit), address 
(line1, line2, city, state, zip, phone) and cc info (cc #, address, name, 
etc..) I thought of having a class that does the whole thing together. You 
give it some namespace, and it puts its element in that namespace in the 
args. For instanc, if you have an address group of elements, and you give 
it the namespace "fred", then the args come back as fred.line1, fred.line2, 
fred.city, fred.state, fred.whatever.

- - Permanent and temporary sessions. Every website uses cookies for only one 
thing - sessions. We should have this built in by default. Some pages have 
it turned on, some pages won't need it and have it turned off. What happens 
is when the guy visits a page that needs a session, it sets the session 
cookie, or gets the existing one. Then it goes to the database and grabs 
the associated data, and it unserializes the data into a python object. 
Tada - you have a session. It also does some rudimentary checking to see if 
the browser has cookies turned on, redirecting them to another page if they 
do not.

- - Keeping HTML totall separate from the code is a very good idea. 
Unfortunately, it makes things like loops or iterations (like listing some 
results) difficult. I believe the best way around this is to allow some 
python code, in its pure python form, in the page somehow. However, this 
should be extremely light and only when necessary. Is there anyway around 
this?

- - Database connection. This is something that is really important, even 
though it isn't part of the web server per se. I believe that DB-API (and 
perl DBI) just doesn't cut it because it is too low-level. There are so 
many better ways to do things. One of the biggest problems I have is 
getting data-driven SQL statement put together without taking 100 lines of 
code to do it. I found that by writing select as a function that takes 
parameters (like columns, from tables, join tables, where parameters, 
etc...) things get a lot easier. I believe we should build a system that 
has this in there.

- - Code-generated HTML. Every once in a while, we need to build our HTML 
elements manually in the code, putting every argument in precisely. This is 
annoying, and the code is always ugly. What I do is use a function that 
does it all for me. Example:
	html.select("state", (... list of states...)) -> A select list of states
	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
class="big_link") -> a link with properly formatted arguments and all.

If we can agree on what we REALLY want, and if we take advantage of Python, 
expecially the things that make it so much more specialer than perl and 
Java, I think we can come up with THE KILLER SOLUTION. How about that for a 
project name? TKS?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4spJWgwF3QvpWNwRAp9hAJ9R/eXSdhIJ/4g0x0mYOeWEMD6qhwCfZOVv
HJD8G8mUY8fNeyW50PlMEeM=
=nfz+
-----END PGP SIGNATURE-----


From etienne at cs.vu.nl  Sun Jun  8 12:59:35 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
 <200306072231.54572.jgardner@jonathangardner.net>
Message-ID: <Pine.GSO.4.53.0306081250050.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Jonathan Gardner wrote:
> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that I want to use
<snip>

Hi Jonathan,

Many of the suggestions you make have already been implemented by someone
in one form or the other. My two cents is that you don't need to go out
and re-do the entire killer app, but you have the luxury of picking and
choosing between the various web application frameworks that exists for
Python. Many frameworks are modular enough to mix and match.

So spend some time playing with existing frameworks and you will most
likely find most of you requirements already fulfilled in one way or the
other.

When I did the same, I came up with:
Quixote + Medusa
with the option of mod_python replacing Medusa if necessary for
performance issues or Apache integration in future,
and the option of PyMeld supplementing the Quixote Templates if ever
necessary. But for now the Quixote Template idea is a joy to use.

For persistence I use a RDF-inspired layer on top of a SQL basis. (and
because Medusa is single-threaded I simply use sqlite as the database.
Simple and quick)


Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From etienne at cs.vu.nl  Sun Jun  8 13:01:43 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
 mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
Message-ID: <Pine.GSO.4.53.0306081259550.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Michael C. Neel wrote:
> The other is the web is a stateless application.  The web browser and
> server treat ever click as a completely separate action, and has no
> knoweldge of what came before.  That's left as an exercise of the
> programmer.  Tools like Albatross that provide me with a base
> appliaction that appears stateful to me while behind the scenes coping
> with the reality of the web let me focus on the "cool" parts of the
> application.

An alternative is to drink the REST magic Kool-Aid and go with the
statelessness as a feature and not a problem... ;-)

Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From geert at boskant.nl  Sun Jun  8 17:35:13 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <000001c32dd3$8dce4200$1001a8c0@GREETOP>

Hi Johathan,

> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that 
> I want to use 
> mod_python because there are so many benefits to it, even above perl.

A lot of good ideas, but I agree with other posters that most of them
are present in the current web application solutions.

> What would you suggest, within the limitations of current
> HTTP technology?
> 
> Some ideas I came up with are as follows. Let's discuss -- be
> honest about 
> the ideas. You add your own.
> 
> - - Forms. It seems nice to have the code that processes the
> form input right 
> next to the code that makes the form HTML code. This screams 
> "put it all in 
> a class!" So I came up with a few classes that should be subclassed:
> 	- Text input
> 	- Int input
> 	- Float input
> 	- Zip Code input
> 	... etc ...

Draco has this. It provides the following classes: Field, StringField,
AsciiField, IntField, FloatField, EnumField.
 
> - - Groups of form elements. Sometimes I want a group of
> elements that go 
> together. Example: Login box (name/email, password, submit), address 
> (line1, line2, city, state, zip, phone) and cc info (cc #, 
> address, name, 
> etc..) I thought of having a class that does the whole thing 
> together. You 
> give it some namespace, and it puts its element in that 
> namespace in the 
> args. For instanc, if you have an address group of elements, 
> and you give 
> it the namespace "fred", then the args come back as 
> fred.line1, fred.line2, 
> fred.city, fred.state, fred.whatever.

Draco has a Form class that does this. You add Field (sub)classes to it
in the constructor, and then call parse() on a namespace (usually, the
http GET/POST) namespace). The result is a new namespace with your
parsed args, or a FormError exception on error.

> - - Permanent and temporary sessions. Every website uses
> cookies for only one 
> thing - sessions. We should have this built in by default. 
> Some pages have 
> it turned on, some pages won't need it and have it turned 
> off. What happens 
> is when the guy visits a page that needs a session, it sets 
> the session 
> cookie, or gets the existing one. Then it goes to the 
> database and grabs 
> the associated data, and it unserializes the data into a 
> python object. 
> Tada - you have a session. It also does some rudimentary 
> checking to see if 
> the browser has cookies turned on, redirecting them to 
> another page if they 
> do not.

Again, Draco has this, except that sessions are always enabled, not only
for specific pages. Any variables assigned to the "session" namespace
are automatically put in a db table that is bound to the current session
via a session-id (either stored in a cookie or from the URL or both).
The namespace is typed, you can put in any object that can be pickled.

Additionaly, there is the "user" namespace, containing variables bound
to the current user (if the session is logged-in), "application",
"server"  namespaces, etc.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like 
> listing some 
> results) difficult. I believe the best way around this is to 
> allow some 
> python code, in its pure python form, in the page somehow. 
> However, this 
> should be extremely light and only when necessary. Is there 
> anyway around 
> this?

I agree with you completely. My preference is also to use a pure form of
Python for loops, conditionals, etc. Another option that is used by
Albatross and Zope is that you have a 3rd language in the form of extra
tags.

> - - Database connection. This is something that is really
> important, even 
> though it isn't part of the web server per se. I believe that 
> DB-API (and 
> perl DBI) just doesn't cut it because it is too low-level. 
> There are so 
> many better ways to do things. One of the biggest problems I have is 
> getting data-driven SQL statement put together without taking 
> 100 lines of 
> code to do it. I found that by writing select as a function 
> that takes 
> parameters (like columns, from tables, join tables, where parameters, 
> etc...) things get a lot easier. I believe we should build a 
> system that 
> has this in there.

I think that a db-api should be part of the core of any web framework.
Draco implements a "database" object that provides access to the system
database (database that Draco itself uses too for session data, etc).
This object implements methods to get new cursors, open transactions,
etc. An object oriented, namespace like API for
querying/adding/modifying tables and records should be available too. I
have this but it's rather immature so I did not yet add it to Draco.

> - - Code-generated HTML. Every once in a while, we need to
> build our HTML 
> elements manually in the code, putting every argument in 
> precisely. This is 
> annoying, and the code is always ugly. What I do is use a 
> function that 
> does it all for me. Example:
> 	html.select("state", (... list of states...)) -> A 
> select list of states
> 	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
> class="big_link") -> a link with properly formatted arguments and all

I'm not a big fan of these because generating html from code makes the
separation of the job of the web designer and the programmer more
difficult. Draco implements "tag rewriting" that transparently plugs
back form variables into the html. This at least alleviates the problem
because the html can be pure, and doesn't need any code for form
feedback.

> If we can agree on what we REALLY want, and if we take
> advantage of Python, 
> expecially the things that make it so much more specialer 
> than perl and 
> Java, I think we can come up with THE KILLER SOLUTION. How 
> about that for a 
> project name? TKS?

Without too much shameless self promotion I think that Draco is pretty
close to a killer web application framework. It just needs some more
developers and users to see how it performs for a broad audience and to
improve it accordingly. I am willing to do concessions to make it better
and more accepted. My time is very limited at the moment, however.

Cheers,
Geert

From dustin at ywlcs.org  Sun Jun  8 11:29:18 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
References: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
Message-ID: <20030608162918.GI1192@eleanor.internal.ywlcs.org>

Let's take a step back and look at what we're doing here.

We're trying to invent the perfect solution to everyone's problems.  Now, any
of us that have done any appreciable amount of web development know that
there is an enormous variety in the tasks that are out there.  No single
solution is going to hack it for every problem.  Personally, I use Zope, PHP,
mod_python with publisher, mod_python directly, Python CGI, and occasionally
the Python interpreter and GNU make.  Every task calls for different tools.

If you want to design a killer app, take all of the "I like this feature" and
"$PRODUCT has that" that you see here, generalize completely, and build a
framework into which each can be plugged on an as-needed basis.

What you'll end up with will be Apache with mod_python, though perhaps with a
little bit more pluggability on mod_python's part.  Right now, that's where
we should be focusing our attention.  What are the paradigms under which you
wish your web server would invoke your scripts?  How can the Python-facing
end of mod_python be structured to support that paradigm?

My $0.05

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jm at eemsystems.cjb.net  Sun Jun  8 11:40:07 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306072211.45891.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
	 <1054918964.11887.13.camel@eemsystems.com>
	 <200306072211.45891.jgardner@jonathangardner.net>
Message-ID: <1055090407.949.6.camel@eemsystems.com>

thanks,  I change it to:

def _getCookie(headers_in, key):
	if headers_in.has_key('Cookie'):
		import Cookie
		C = Cookie.SimpleCookie(headers_in['Cookie'])
		if C.has_key(key):
		    return C[key].value
		else:
			return None
	return None


and all is working fine.

El dom, 08-06-2003 a las 00:11, Jonathan Gardner escribi?:

> >
> > def getCookie(headers_in, key):
> >     if headers_in.has_key('Cookie'):
> >         import Cookie
> >         C = Cookie.SmartCookie(headers_in['Cookie'])
> >         C.load(headers_in['Cookie'])
> >         if C.has_key(key):
> >             return C[key].value
> >     return None
> >
> 
> What line in getCookie is giving you the problem?
> 
> - -- 
> Jonathan Gardner
> jgardner@jonathangardner.net
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
> KBAjmIpvSI1xVJJxAUPDyLM=
> =Kjlg
> -----END PGP SIGNATURE-----
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 11:24:33 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <3EE31CF1.11381.D637E22@localhost>

> - - Permanent and temporary sessions. Every website uses cookies for
> only one thing - sessions. We should have this built in by default.

Personally, I prefer to pass a variable SID around with each link and 
form.  Yeah, it's not as convenient as a cookie, but at least you 
don't have to worry about cookies being enabled.  Plus, it is 
available on the first page load and it is compatible with CGI's I 
wrote before getting into mod_python, where it was too tricky to 
modify headers to set one.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like listing
> some results) difficult. I believe the best way around this is to
> allow some python code, in its pure python form, in the page somehow.
> However, this should be extremely light and only when necessary. Is
> there anyway around this? 

When I code with templates, I use the following syntax in my HTML to 
bury loops:

<!-- var: BlockName --> ( text to be repeated ) <!-- /var -->

My template class can also handle <!-- /var (VarName) --> which 
doesn't affect operation, but it can make the HTML easier to decypher 
when you stack these.

I embed variables in the traditional way:

%(VarName)s

And then to do the loop in Python, I do something like:

Block = T["BlockName"]
while Condition:
  T["VarName"] = "value"
  T.Add()

print T

To conditionally remove a block:

if Condition:
  T["BlockName"]

Lastly, I bury constants in my HTML with:

<!-- var: VarName="value" -->

And access it with:

VarName = T["VarName"]

Of course, none of this is ground breaking.  I'm sure a million 
programmers have made a similar tool as well.  However, if anyone 
would like a copy of my class, just drop me a note.

I thought about putting it up as a project on SourceForge, but after 
embarassing myself so with RoadKill since I didn't realize spyce 
existed, I'm a tad hesitant.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From dustin at ywlcs.org  Sun Jun  8 12:39:17 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE31CF1.11381.D637E22@localhost>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
Message-ID: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> > - - Permanent and temporary sessions. Every website uses cookies for
> > only one thing - sessions. We should have this built in by default.
> 
> Personally, I prefer to pass a variable SID around with each link and 
> form.  Yeah, it's not as convenient as a cookie, but at least you 
> don't have to worry about cookies being enabled.  Plus, it is 
> available on the first page load and it is compatible with CGI's I 
> wrote before getting into mod_python, where it was too tricky to 
> modify headers to set one.

And it's less secure.  If I hand someone a link like

  http://www.yoursite.com/SID=209354634

Then get them to log in (and thus initiate that session), then I can hijack
their session by using the same URL.  At least with cookies it's much harder
to get someone to install a cookie for a foreign site on their browser.

Be careful!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From verence at web.de  Sun Jun  8 20:17:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE37DB3.8060401@web.de>

Dustin Mitchell wrote:
> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> 
>>>- - Permanent and temporary sessions. Every website uses cookies for
>>>only one thing - sessions. We should have this built in by default.
>>
>>Personally, I prefer to pass a variable SID around with each link and 
>>form.  Yeah, it's not as convenient as a cookie, but at least you 
>>don't have to worry about cookies being enabled.  Plus, it is 
>>available on the first page load and it is compatible with CGI's I 
>>wrote before getting into mod_python, where it was too tricky to 
>>modify headers to set one.
> 
> 
> And it's less secure.  If I hand someone a link like
> 
>   http://www.yoursite.com/SID=209354634
> 
> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.
> 
> Be careful!
> 
> Dustin
> 
hi,

this common problem was solved very often, one way is to recalculate the 
SID for every response you send back according to the SID you got from 
the request (and keep track of the SIDs during a session). a much easier 
way is to maintain a pool of SIDs actually beeing used and throw away 
the unused ones (after a session timeout), wether with a scheduled 
thread or a check everytime a SID arrives from a client. in fact, this 
mechanism most java servlet engines use (wether they store the id in a 
cookie or as a parameter). and it only seem that cookies are more 
secure, it is easy to fake them. this session thingy is (from my pov) a 
real security bottleneck, so i just can repeat your words...

be carful... :)

greets


From andy at nervebox.com  Sun Jun  8 14:39:54 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] python to javascript lib
Message-ID: <1834236.1055097594608.JavaMail.SYSTEM@chango>

This group seem like the folks who would know about this.

Is there a Python lib or module that will translate python data structures into javascript and vice-versa?  Some implememtations of WDDX do this and it's sooo handy.

If there isn't one, I'll write one and share it.  But if there is one, it would save me a lot 
of time. :)

 - thanks,
 - andy c
      
      
      
    
From barr at cs.cornell.edu  Sun Jun  8 15:34:00 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <20030608162918.GI1192@eleanor.internal.ywlcs.org>
Message-ID: <Pine.LNX.4.44.0306081454200.12610-100000@pompom.cs.cornell.edu>

Hi Dustin,

I agree. And, let me follow up on that by expounding on an earlier
suggestion that I made... I think that mod_python should focus on
building a standard extension mechanism rather than begin folding
"killer" features such as mod_psp. This will mature the entire Python
web community.

What I mean by standard extension mechanism is to define something
similar to the Linux Standard Base project, albeit much smaller in
scope. mod_python needs a configuration file/directory for extensions
with a specific location. It needs a versioning mechanism, a way to find
the Python interpretter, some scratch disk space (for caching, or
whatever a plugin needs), etc. It needs a simple extension namespace and
registry (i.e. files in some directory) to find out what other modules
are available, or perhaps an RPM (or Windows registry) naming
convention... little details that allow for automated installation and
configuration across multiple platforms and configurations. They really
are just little details, but they can make the difference to a new user
between perceiving the project as a hackish solution versus a polished
one.

This is the major advantage that PHP has - it just plugs in to Apache.
And that's why ISPs just plug it in! It would be nice if mod_python just
plugged into Apache, and then Spyce/Draco/WebWare/etc just plugged into
mod_python to form a working Python web-serving system. Ideally, I think
it should be a two RPM installation, or just two setup executables on
Windows. This this exactly the situation with Apache/PHP/Pear and it
works well.

On the API front, I think that mod_python needs to make threaded output
more efficient, and possibly support output buffering. Currently, I'm
performing hacks in Spyce for both of these, and they could be
implemented more efficiently inside mod_python (and in C) with
substantial performance gains on the output path. Other frameworks would
benefit from this as well.

In general, the concern that I have with the "folding" of mod_psp into
mod_python is two fold. First, it may integrate with mod_python via APIs
that would otherwise have been exposed and have benefitted all the
Python-based web projects. Secondly, it may become the defacto standard,
no matter how it compares with other tools for a specific task, simply
because of its tighter integration and automatic inclusion. It will be
seen as a standard, and it will stifle the creation of useful tools in
the space. PHP, for example, has recognized this problem, and has
created PEAR. Perl did the same with CPAN.

We don't need to have something as extensive, but it would be nice to
have a basic extensible Python-based web infrastructure of some kind,
and mod_python is the place to do it, since it is now part of the Apache
Foundation and therefore a central member of the Python web community.

My two cents,
Rimon.

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

>Let's take a step back and look at what we're doing here.
>
>We're trying to invent the perfect solution to everyone's problems.  Now, any
>of us that have done any appreciable amount of web development know that
>there is an enormous variety in the tasks that are out there.  No single
>solution is going to hack it for every problem.  Personally, I use Zope, PHP,
>mod_python with publisher, mod_python directly, Python CGI, and occasionally
>the Python interpreter and GNU make.  Every task calls for different tools.
>
>If you want to design a killer app, take all of the "I like this feature" and
>"$PRODUCT has that" that you see here, generalize completely, and build a
>framework into which each can be plugged on an as-needed basis.
>
>What you'll end up with will be Apache with mod_python, though perhaps with a
>little bit more pluggability on mod_python's part.  Right now, that's where
>we should be focusing our attention.  What are the paradigms under which you
>wish your web server would invoke your scripts?  How can the Python-facing
>end of mod_python be structured to support that paradigm?
>
>My $0.05
>
>Dustin
>
>

From davidf at sjsoft.com  Sun Jun  8 22:11:16 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE37DB3.8060401@web.de>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org> <3EE37DB3.8060401@web.de>
Message-ID: <3EE39864.6020602@sjsoft.com>

verence wrote:

> Dustin Mitchell wrote:
>
>> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
>>
>>>> - - Permanent and temporary sessions. Every website uses cookies for
>>>> only one thing - sessions. We should have this built in by default.
>>>
>>>
>>> Personally, I prefer to pass a variable SID around with each link 
>>> and form. Yeah, it's not as convenient as a cookie, but at least you 
>>> don't have to worry about cookies being enabled. Plus, it is 
>>> available on the first page load and it is compatible with CGI's I 
>>> wrote before getting into mod_python, where it was too tricky to 
>>> modify headers to set one.
>>
>>
>>
>> And it's less secure. If I hand someone a link like
>>
>> http://www.yoursite.com/SID=209354634
>>
>> Then get them to log in (and thus initiate that session), then I can 
>> hijack
>> their session by using the same URL. At least with cookies it's much 
>> harder
>> to get someone to install a cookie for a foreign site on their browser.
>>
>> Be careful!
>>
>> Dustin
>>
> hi,
>
> this common problem was solved very often, one way is to recalculate 
> the SID for every response you send back according to the SID you got 
> from the request (and keep track of the SIDs during a session). a much 
> easier way is to maintain a pool of SIDs actually beeing used and 
> throw away the unused ones (after a session timeout), wether with a 
> scheduled thread or a check everytime a SID arrives from a client. in 
> fact, this mechanism most java servlet engines use (wether they store 
> the id in a cookie or as a parameter). and it only seem that cookies 
> are more secure, it is easy to fake them. this session thingy is (from 
> my pov) a real security bottleneck, so i just can repeat your words...
>
> be carful... :)
>
> greets 

Actually what needs to be ensured is that the SID is secure.
We have a system where we use cookies, and the SID is a md5 hash of the 
timestamp, username, password, and a secret string. That way it can't be 
forged and we can keep track of sessions based on timestamp.

David

From barr at cs.cornell.edu  Sun Jun  8 16:18:07 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606164118.16841.qmail@email.com>
Message-ID: <Pine.LNX.4.44.0306081556500.12961-100000@pompom.cs.cornell.edu>

Dear Jack,

>Holy Cross Posting Batman!
>I'm just replying to the proper forum (python-dev@apache)

I feel that this topic involves more than the just the mod_python
development list. It involves also the developers that use mod_python to
create Python frameworks based on mod_python, and also the users of
those systems. I selected only a few frameworks that I have posted to
before, and that I know are rather mature projects. You are free to
address your replies as you please.

>No need to freak out.  Per the original discussions of psp it will be
>seperate enough so you can use the psp stuff in a regular CGI or even
>to generate text offline altogether.

Then why the integration? It seems like it should operate just like
WebWare, Zope, Spyce and the rest: as one possible framework that you
could place on top of the mod_python base. Futhermore, my concern is not
with the generality of mod_psp, but rather with the generality of
mod_python.

>This would lend it to being generic enough that the same hooks it uses
>could be used by any other templating engine. IMO the reason psp was
>folded into mod_python and not something else is just that the guy who
>did psp was willing to put in some time and many people (mostly noobs)
>expect a php-alike with thier mod_whatever.

Installing two rpms instead of one is not a big deal, and is not a valid
reason to combine the development. PHP and Pear are seperate installs,
for example. Furthermore, Spyce and many other systems work perfectly
against the exposed mod_python API. Therefore, all the "integration
work" that you speak of has been done by others as well. Unless, of
course, there is some unexposed mod_python functionality that mod_psp is
using...

There is no performance disadvantage from this modular approach. In
fact, it is this modular approach that has made Apache popular, that has
lead to the success of Python, Perl, PHP and many other systems. People
like to plug in components. But, for that you need a component
infrastructure, and you need to resist the urge to tack on quick fixes
or integrate with this or that project to get another neat feature.
Rather, you want to create an open platform that allows others to easily
create their own extensions.

>So it solved a couple minor problems without adding any new ones. No
>big deal or conspiracy here.

The concern is not about conspiracy, but on the effect of the inclusion.
The inclusion of mod_psp, excludes other frameworks, because it becomes
the defacto standard through an arbitrary linkage to mod_python rather
than through its independent merits. It thereby stifles the progress and
interest in other solutions unnecessarily.

All the best,
Rimon.


From barr at cs.cornell.edu  Sun Jun  8 16:43:50 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <000201c32cc6$09bddb50$1004a8c0@GREETOP>
Message-ID: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>

Hi Geert,

>As the author of one of the systems you mention above, I was worried a
>bit too when the announcement was made to add PSP to mod_python.
>However, my understanding is that the component is implemented as a
>mod_python handler so that it is completely optional. I hope that it
>remains like this: mod_python as a fast and pure Apache-Python interface
>with an optional templating system.

As you are no-doubt aware, I am also an author of one of these systems:
Spyce. :) I well-aware of how to interface with mod_python. I've built
an abstraction layer underneath Spyce that allows it to operate
efficiently with mod_python and also with FastCGI, the Xitami web
server, CGI and as a web proxy.

>The good thing about this move is that new users will have something to
>get started with. On the other hand, a web framework that does a bit
>more than the standard ASP stuff is probably much larger in scope than
>mod_python, so then it would be like adding mod_python to the framework
>instead of the other way around.

I see the benefits as well. My concern is that the automatic inclusion
of mod_psp will have two effects. First, it will become a "good enough"
standard and users will not bother to look at other possibilities, which
are quite good and creative, and certainly more mature than mod_psp at
this point. I put up a web page, for example:
  http://spyce.sourceforge.net/doc-add_related.html
so that users will be able to see all the interesting things that people
are doing, and be able to select the tools that are most appropriate for
their needs. I, for example, think that I've contributed to the
community with spyce modules, spyce lambdas and spyce active tags. If
you're interested, then have a look at:
  http://spyce.sourceforge.net/doc-mod.html
  http://spyce.sourceforge.net/doc-lang_lambda.html
  http://spyce.sourceforge.net/doc-tag.html
I also recognize the value in the design of CherryPy, of WebWare, of
Draco, etc. I've learned interesting things from looking at each of
these systems, and I hope that their development continues to introduce
more useful concepts.

My second concern regarding the inclusion of mod_psp is that it will end
up being a much larger codebase than mod_python, and will influence the
focus of the project from being a platform (i.e. infrastructure) for
Python-based Apache integration to being a project like Spyce and others
that are focussed on the language issues or application frameworks.
These two goals can be kept separate, but then why merge the two
projects?

Good boundaries make for good design, because short-cuts are not
possible. You, I and all other developers (and the users of our systems)
that use the mod_python infrastructure to operate within Apache have an
interest in ensuring that mod_python remains open and focussed on that
small, but most important goal: infrastructure. As a developer that uses
mod_python, I think that the most important next steps are performance
and configuration issues, not a handler for a new Python-web language.
Are there any technical merits for merging mod_psp with mod_python?

My two cents,
Rimon.

On Sat, 7 Jun 2003, Geert Jansen wrote:

>Ramon,
>
>> I wanted to post earlier, but I didn't find the time. I find
>> this "folding" to be a little troubling. Why not fold Zope
>> into mod_python? Why not Spyce? Why not Roadkill? Why not
>> Draco? Why not Cheetah, or WebWare?
>>   http://www.zope.org/
>>   http://spyce.sourceforge.net/
>>   http://roadkill.sourceforge.net/
>>   http://draco.boskant.nl/
>>   http://www.cheetahtemplate.org/
>>   http://webware.sourceforge.net/
>>
>> There are many others at:
>>   http://spyce.sourceforge.net/doc-add_related.html
>
>[...]
>
>> Should it simply be a pure Python handler, or should it be
>> extended with more functionality? There is a difference
>> between mod_python compatability and mod_python inclusion.
>> Should there be a modular extension and/or installation
>> mechanism or should there be a "folding" for all willing
>> projects? If mod_python picks one candidate, what will it
>> mod_python do to the other projects? Will some other projects
>> begin to fork mod_python as a result? Do we want a
>> duplication of effort of either the mod_python-type or the
>> mod_psp-type code?
>
>> I humbly recommend that mod_python remain pure, and serve as
>> a Python handler. It does this job very well! I think that
>> what mod_python needs is the creation and documentation of a
>> standard extension mechanism to allow for
>> psp/spyce/draco/roadkill/etc. type of extensions. They would
>> not be included with mod_python, but would involve a simple .rpm (or
>> whatever) installation. (That's where the standardization
>> helps!) This will allow projects like Spyce, which works well
>> with FastCGI, mod_python, CGI, via proxying and even with
>> other webservers (Xitami) to continue to perform efficiently
>> within Apache and also to broaden the user base with support
>> for other web platforms.
>
>It is already quite easy to add an extension to mod_python. Mostly it is
>just the definition of the appropriate "PythonHandler" directives. What
>would really help IMHO is a good and independent web site describing the
>current situation with the many different frameworks that lists and
>rates the different options.
>
>Cheers,
>Geert

From gstein at lyra.org  Sun Jun  8 14:13:27 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
Message-ID: <20030608211327.GH19908@lyra.org>

I do all of my templating using my ezt.py module. It has no algorithmic
constructs in it at all. It simply renders data that the Python app has
provided to it. It has simple iteration and simple control flow, but no
variable assignment, method invocation, etc. In fact, it really only has
about six basic directives. I've used it with success in ViewCVS, edna,
SubWiki, and some internal apps at the ASF and at home.

I think the latest version of it is part of the SubWiki project, so you can
fetch it right out of the SVN repository:

  http://svn.webdav.org/repos/projects/subwiki/trunk/lib/ezt.py

I find the module makes for a nice separation between logic and rendering.

Yes, this is a bit of advocacy :-), but I'm not asking for any change. Just
pointing out a module that I think can help people...

Cheers,
-g

On Sat, Jun 07, 2003 at 07:17:20PM -0400, Michael C. Neel wrote:
> I suppose it's all a matter of taste really, to me the problem with the
> PHP-like methods is there is no seperation of logic from design; or the
> method doesn't lend itself well to it.  I'm willing to learn some
> special tags if I know all real the python code is in a .py file and the
> html in a .html file.
> 
> Mike
> 
>      > The problem with Albatross for me is the same one with 
>      > all the others - it
>      > is yet another language to learn:
>      > 
>      > <al-for iter="name" expr="keys">
>      >     <tr>
>      >          <td><al-value expr="name.value()"></td>
>      >          <td><al-value expr="environ[name.value()]"></td>
>      >     <tr>
>      > </al-for>
>      > 
>      > This is not Python. Nor is it HTML.
>      > 
>      > Grisha
>      > 
>      > 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 15:43:12 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <3EE31CF1.11381.D637E22@localhost>
Message-ID: <3EE35990.2860.E504CF8@localhost>

> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.

I suppose I didn't mention it, but I do test the remote IP address 
against the IP address recorded in the session pickle.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

         I want to be the master of time and space, a living god,
                            ...and then I'd like to visit Europe.
From sterling at bumblebury.com  Sun Jun  8 18:00:06 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
Message-ID: <1055109606.1603.18.camel@hasele>

Ok, I'll bite.

> I see the benefits as well. My concern is that the automatic inclusion
> of mod_psp will have two effects. First, it will become a "good enough"
> standard and users will not bother to look at other possibilities, which
> are quite good and creative, and certainly more mature than mod_psp at
> this point. I put up a web page, for example:

I think you make the opposite point right here.  If PSP is "good
enough," then why should they investigate other options?  I'm not going
to say anything bad about the other systems, I like some of them, others
less: they all have their advantages and their different approaches,
such diversity is imho a good thing.  However, the goal of mod_python,
as I understand it, is to be the best toolkit for developing web
applications with Python.  It is a pretty common request to embed python
code within HTML, if we can find a solution that is "good enough," I
think that's an admirable achievement.

PSP's integration with mod_python does not preclude the usage of spyce
or any of these other systems.  In fact, I happen to use cheetah for
some of my sites, I think its a superb product.  It just provides users
with a simple, fast system that works "out of the box."  That's never a
bad thing.

> 
> My second concern regarding the inclusion of mod_psp is that it will end
> up being a much larger codebase than mod_python, and will influence the
> focus of the project from being a platform (i.e. infrastructure) for
> Python-based Apache integration to being a project like Spyce and others
> that are focussed on the language issues or application frameworks.
> These two goals can be kept separate, but then why merge the two
> projects?
> 
> Good boundaries make for good design, because short-cuts are not
> possible. You, I and all other developers (and the users of our systems)
> that use the mod_python infrastructure to operate within Apache have an
> interest in ensuring that mod_python remains open and focussed on that
> small, but most important goal: infrastructure. As a developer that uses
> mod_python, I think that the most important next steps are performance
> and configuration issues, not a handler for a new Python-web language.
> Are there any technical merits for merging mod_psp with mod_python?
> 

Good boundaries make for good design.  

PSP is a python handler, distributed with mod_python.  There is a clear
boundary between the two pieces of code.  I can see your political
reasoning for not including PSP, but what is your technical reason?  The
other systems will not be technically disadvantaged in anyway, and psp 
certainly doesn't muddy things up from a technical perspective.

Good Fences Make Good Neighbors,

Sterling

-- 
Good judgement comes from experience, and experience comes from 
bad judgement. 
    - Fred Brooks
From dustin at ywlcs.org  Sun Jun  8 19:15:04 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE35990.2860.E504CF8@localhost>
References: <3EE31CF1.11381.D637E22@localhost>
	<3EE35990.2860.E504CF8@localhost>
Message-ID: <20030609001504.GK1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > Then get them to log in (and thus initiate that session), then I can hijack
> > their session by using the same URL.  At least with cookies it's much harder
> > to get someone to install a cookie for a foreign site on their browser.
> 
> I suppose I didn't mention it, but I do test the remote IP address 
> against the IP address recorded in the session pickle.

That can cause trouble for people behind multiple, layer-4 switched caches..
the remote IP will be different for different requests..

That's rare, but it does happen.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From grisha at modpython.org  Sun Jun  8 23:36:08 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:35 2004
Subject: Cookies [was: [mod_python] Announcement: Roadkill version 0.01
 "Kitten"]
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <20030608233011.G83392-100000@oldchief.reply.net>


Just as a sidenote to this discussion -

It is surprising how little decent info is available about them. By far
the best description of everything relating to cookies from history to
issues with them and why they are needed is in this paper:

"HTTP Cookies: Standards, Privacy, and Politics" by David M. Kristol

http://arxiv.org/abs/cs.SE/0105018

Grisha

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), then I can hijack
> > > their session by using the same URL.  At least with cookies it's much harder
> > > to get someone to install a cookie for a foreign site on their browser.
> >
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
>
> That can cause trouble for people behind multiple, layer-4 switched caches..
> the remote IP will be different for different requests..
>
> That's rare, but it does happen.
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org/djmitche@alumni.uchicago.edu
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Sun Jun  8 22:46:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Write your own appserver in mod_python!
Message-ID: <200306082246.58019.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I had no idea that there were so many mature app servers in mod_python. I 
feel humbled.

I'll admit, I wrote my own, and I think it has a catchy name -- PyT. I'll be 
releasing it soon enough. This makes me one of the 500 others who have 
written their own appserver for mod_python. I don't mind that at all. 
Secretly, I wish mine will become the next JSP or PHP, but I won't hold my 
breath, because I know all of you do too.

The real strength of python is that anyone can write their own stuff without 
too much effort. And no matter what their design decisions, the language 
seems to get out of the way. It comfortably molds itself into the image you 
want it to mold into, without losing its integrity or comprising its 
features. It seems perl, with its infinite complexity, actually ended up 
being "there's only a few ways you can actually do it right", while Python, 
with it rigid yet simple syntax, has rendered into "everyone does it their 
own way, and guess what, it all works!"

I take back my earlier comment about writing the killer solution. Maybe we 
shouldn't write the killer solution and label it as such. Maybe we should 
emphasize that mod_python is the basis for a million killer solutions! 
Maybe we should advertise that if you don't like what you see, you can 
write your own in a weekend!

I think the mod_python community should be a community of diverse opinions 
and diverser projects. Topics like "What is the best way to handle a 
session?" will always yield at least five different answers. At least we 
will be able to cherry pick the one that works best for our situaton, and 
coding it up will be no problem. Let's encourage others to explore the app 
server solution space, and to share their creations with our community. And 
then at the end of the day, let's go back to the hawking of our wares in 
the bazaar.

So, in that regard, I do fear PSP becoming integrated into the mod_python 
project. I fear because it will give the wrong impression to the newbies. 
It will give them the impression that there is only one good app server out 
there, and PSP is it. This is incredibly false, and dangerously deceptive. 
I would hope that somewhere on the introduction page to mod_python, it says 
in big bold letters:

	PSP is an example of what *you* can do with mod_python. If you like it, use
	it. If anything is disagreeable, go check out these other projects. If
	nothing suits your tastes, *write* *your* *own* and share it with us!

So, here's a toast to the future of mod_python! Choice is king, diversity 
our strength, and community our spirit!

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5B9OWgwF3QvpWNwRAp16AJ4o+9vEfCq68rrIw7z701+RckCgHwCgteew
5CkyolwOdQXU9L4FyO4JrxM=
=OZey
-----END PGP SIGNATURE-----


From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 00:13:02 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:53:35 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <3EE3D10E.32463.10230FF7@localhost>

> I take back my earlier comment about writing the killer solution.
> Maybe we shouldn't write the killer solution and label it as such.
> Maybe we should emphasize that mod_python is the basis for a million
> killer solutions! Maybe we should advertise that if you don't like
> what you see, you can write your own in a weekend! 

The more I think about "a killer app" the more disenchanted I am with 
the idea.

In my mind, Python's greatest strength is that every time I got to a 
point in my code where I said, "Now, if only I had a gizmo that did 
X", that's when I noticed that Python COMES WITH a gizmo that does X 
built in.

Also, while I have the floor, I want to say that I did look around at 
some of the frameworks when I started writing CGI's in Python and I 
found them... (pardon me while I grope for a word)... intimidating.  
I found myself saying "but all I want is a class that does X!".

Now, I'll be the first to admit that I did end up adding X, Y, and Z 
to my code, not just X, so it's very possible that some of the 
frameworks that I found scary because they did X, Y, and Z instead of 
just X would have been a perfect fit, but the fact remains that they 
were more intimidating and felt like they had more commitment 
required than just including one of the standard libs.  (Sorry for 
the run-on, it's late.)

Anyhow, my point is, that if we broke down the problem into small 
bite size pieces, and tossed out the classes as separate .py files, 
perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
dread of commitment to a framework.  They could just say, "I need a 
class to handle sessions."  Boom!  "I need a class that makes HTML 
from templates."  Pow!  "I want to handle my form inputs as class 
members."   Biff!  (Couldn't resist.)

These functions are really separate, so why should anyone have to 
take the whole cow if they just want a hamburger?

Perhaps we should take all these competing frameworks, split them 
into their classes, and make them all a-la-carte?  A session from 
here... a template from there...  That would let us program the way 
we like to (or at least how I like to) by taking just the stuff we 
want and leaving the other stuff behind.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From davidf at sjsoft.com  Mon Jun  9 09:17:54 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <3EE434A2.6080409@sjsoft.com>

Gre7g Luterman wrote:

>Perhaps we should take all these competing frameworks, split them 
>into their classes, and make them all a-la-carte?  A session from 
>here... a template from there...  That would let us program the way 
>we like to (or at least how I like to) by taking just the stuff we 
>want and leaving the other stuff behind.
>
In fact, maybe what we need is just a nice "map" to all the frameworks, 
explaining each one's focus, and giving a short code example for each...
That would be a first step to helping people find what they need

David

From fitnah55 at hotmail.com  Mon Jun  9 04:16:17 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] 
	need working fix for 'import site' aka 'ImportError' aka
	'make_obcallback' error
Message-ID: <000101c32e5f$66cb0da0$18c0c20a@computer>


i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


From neo at https.ru  Mon Jun  9 12:29:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <1603919375.20030609122914@https.ru>


> The more I think about "a killer app" the more disenchanted I am with 
> the idea.

> In my mind, Python's greatest strength is that every time I got to a 
> point in my code where I said, "Now, if only I had a gizmo that did 
> X", that's when I noticed that Python COMES WITH a gizmo that does X 
> built in.

> Also, while I have the floor, I want to say that I did look around at 
> some of the frameworks when I started writing CGI's in Python and I 
> found them... (pardon me while I grope for a word)... intimidating.  
> I found myself saying "but all I want is a class that does X!".

> Now, I'll be the first to admit that I did end up adding X, Y, and Z 
> to my code, not just X, so it's very possible that some of the 
> frameworks that I found scary because they did X, Y, and Z instead of 
> just X would have been a perfect fit, but the fact remains that they 
> were more intimidating and felt like they had more commitment 
> required than just including one of the standard libs.  (Sorry for 
> the run-on, it's late.)

> Anyhow, my point is, that if we broke down the problem into small 
> bite size pieces, and tossed out the classes as separate .py files, 
> perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
> dread of commitment to a framework.  They could just say, "I need a 
> class to handle sessions."  Boom!  "I need a class that makes HTML 
> from templates."  Pow!  "I want to handle my form inputs as class 
> members."   Biff!  (Couldn't resist.)

> These functions are really separate, so why should anyone have to 
> take the whole cow if they just want a hamburger?


  Here are very smart ideas. I totally agree with the above.




> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

>         I want to die peacefully in my sleep, like my grandfather
>                   ...not screaming in terror like his passengers.


--- 
Neo Eureka / mailto:neo@https.ru

From neo at https.ru  Mon Jun  9 12:35:41 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
References: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <494306522.20030609123541@https.ru>


> I think the mod_python community should be a community of diverse
> opinions 
> and diverser projects. Topics like "What is the best way to handle a 
> session?" will always yield at least five different answers. At least we 
> will be able to cherry pick the one that works best for our situaton,
> and 
> coding it up will be no problem. Let's encourage others to explore the
> app 
> server solution space, and to share their creations with our community.

> So, in that regard, I do fear PSP becoming integrated into the mod_python 
> project. I fear because it will give the wrong impression to the newbies. 
> It will give them the impression that there is only one good app server out 
> there, and PSP is it. This is incredibly false, and dangerously deceptive. 
> I would hope that somewhere on the introduction page to mod_python, it says 
> in big bold letters:

>         PSP is an example of what *you* can do with mod_python. If you like it, use
>         it. If anything is disagreeable, go check out these other projects. If
>         nothing suits your tastes, *write* *your* *own* and share it with us!


  I just want to wholeheartedly support the authors' opinions!


--- 
Neo Eureka / mailto:neo@https.ru

From geert at boskant.nl  Mon Jun  9 12:45:25 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <000001c32e74$3c794390$1001a8c0@GREETOP>


> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), 
> then I can 
> > > hijack their session by using the same URL.  At least 
> with cookies 
> > > it's much harder to get someone to install a cookie for a foreign 
> > > site on their browser.
> > 
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
> 
> That can cause trouble for people behind multiple, layer-4 
> switched caches.. the remote IP will be different for 
> different requests..
> 
> That's rare, but it does happen.

Something that will cause trouble with this too are on-demand dialing
ISDN modems which usually have a hangup timeout of about 120 seconds. If
the user stays idle for more than two minutes, the modem will hangup,
then redial and get a different IP address.

Geert

From geert at boskant.nl  Mon Jun  9 13:05:41 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055109606.1603.18.camel@hasele>
Message-ID: <000501c32e77$114709c0$1001a8c0@GREETOP>


> PSP is a python handler, distributed with mod_python.  There 
> is a clear boundary between the two pieces of code.  I can 
> see your political reasoning for not including PSP, but what 
> is your technical reason?  The other systems will not be 
> technically disadvantaged in anyway, and psp 
> certainly doesn't muddy things up from a technical perspective.

The fact that mod_psp hasn't proved anything yet while other frameworks
have seems a technical reason to me.

What do you (as the mod_psp author) think of the remarks that have been
made already by two people that a complete web application framework is
much larger in scope than mod_python. This would mean that adding it to
mod_python is like adding mod_python to the framework. At that time can
only hope that the focus of mod_python doesn't shift from being a
general and high performance Python layer for Apache to being the Apache
enablement of mod_psp.

Cheers,
Geert

From sterling at bumblebury.com  Mon Jun  9 10:58:36 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000501c32e77$114709c0$1001a8c0@GREETOP>
References: <000501c32e77$114709c0$1001a8c0@GREETOP>
Message-ID: <1055170715.22155.44.camel@hasele>

On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> > PSP is a python handler, distributed with mod_python.  There 
> > is a clear boundary between the two pieces of code.  I can 
> > see your political reasoning for not including PSP, but what 
> > is your technical reason?  The other systems will not be 
> > technically disadvantaged in anyway, and psp 
> > certainly doesn't muddy things up from a technical perspective.
> 
> The fact that mod_psp hasn't proved anything yet while other frameworks
> have seems a technical reason to me.
> 

That's a reason against bundling?  I can see that's a reason against
bundling PSP, but Rimon is talking about the chastity of mod_python
here.  

And btw, that's an advantage from a bundling perpsective - It doesn't
need to support legacy userbases, so the code itself is very malleable,
as witnessed by some of grisha's recent changes.

> What do you (as the mod_psp author) think of the remarks that have been
> made already by two people that a complete web application framework is
> much larger in scope than mod_python. This would mean that adding it to
> mod_python is like adding mod_python to the framework. At that time can
> only hope that the focus of mod_python doesn't shift from being a
> general and high performance Python layer for Apache to being the Apache
> enablement of mod_psp.
> 

I don't think that focus will switch.

For one thing, Rimon didn't have a problem with the "purity" of
mod_python when he proposed that spyce be integrated, it was only after
that fell through in private mail that he refocused the issue, and
brought it to the mailing lists.

PSP is a very small, very fast alternative, it doesn't preclude you from
using any of the listed solutions.  In fact you can use PSP in
conjunction with any of the solutions listed, or you can even ignore its
existence altogether and use something else, or code directly with
req.write().  There is *zero* performance loss if you choose to use
another option, like spyce.

As for the shift of development focus.  I'm touched Rimon cares so much
about how developers spend their time.  I guess only experience will
tell, but generally I think the people who develop mod_python are
capable of deciding what they want to spend their time on, and what
requires attention at the moment.  We don't need to be put in a crib so
that we don't chew on the electric cords.

If you want to re-invent the wheel, go for it!  Including Python with a
Linux distribution doesn't stop you from using PHP.  PSP is a common
feature request, and it lives as a standard module for the 99% of users
who just want a solution that works, and don't care how efficient '[['
is to type.  That doesn't mean alternatives aren't allowed and
encouraged, they just aren't bundled.

-Sterling

-- 
"C makes it easy to shoot yourself in the foot; C++ makes it harder,  
 but when you do, it blows away your whole leg." 
    - Bjarne Stroustrup
From barr at cs.cornell.edu  Mon Jun  9 13:05:18 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055170715.22155.44.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>

Dear Sterling,

On 9 Jun 2003, Sterling Hughes wrote:

>On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
>> > PSP is a python handler, distributed with mod_python.  There
>> > is a clear boundary between the two pieces of code.  I can
>> > see your political reasoning for not including PSP, but what
>> > is your technical reason?  The other systems will not be
>> > technically disadvantaged in anyway, and psp
>> > certainly doesn't muddy things up from a technical perspective.
>>
>> The fact that mod_psp hasn't proved anything yet while other frameworks
>> have seems a technical reason to me.
>
>That's a reason against bundling?  I can see that's a reason against
>bundling PSP, but Rimon is talking about the chastity of mod_python
>here.

I agree with Geert here, and also with Ian's prior email. PSP has not
proven itself, while other projects have. There are also prior projects
with that name and concept, that are many years older than mod_psp. Does
mod_psp even have any users yet?

>For one thing, Rimon didn't have a problem with the "purity" of
>mod_python when he proposed that spyce be integrated, it was only after
>that fell through in private mail that he refocused the issue, and
>brought it to the mailing lists.

First, please do not get personal. It's not necessary. I'm only trying
to help the OSS community, just like you. And, second, please don't
misquote me. I suggested to you, in that private email, that what you
were doing had similar goals to Spyce. And what I then suggested, to see
whether you were interested, is that you help with the Spyce parser. I
only wanted to combine efforts with you, so that we could build
something bigger and better. I saw that you were working on a C-based
parser for psp, and I asked you whether you were interested in working
on such a parser for the Spyce language. The rationale is that although
the parser does not matter much for performance, because the compiled
files are cached, it would be nice as an option for developers, since
the current Spyce parser is implemented in Python and is relatively
slow. I also, thinking that you work with the Apache Foundation, I
offered to donate Spyce to the AF. Donating to the AF does not mean, in
my mind, merging the Spyce and mod_python projects.

You seem to be attacking me as an individual rather than discussing the
idea. I'm not interested in this. I am only interested in making Python
a more web-friendly language, and I think mod_python is an important
project in this regard. I also don't have a Spyce agenda, as you seem to
imply. It's just a project that I work on, because I like it, and
because I wanted to implement some features that I didn't find in other
systems.

>PSP is a very small, very fast alternative, it doesn't preclude you from
>using any of the listed solutions.  In fact you can use PSP in
>conjunction with any of the solutions listed, or you can even ignore its
>existence altogether and use something else, or code directly with
>req.write().  There is *zero* performance loss if you choose to use
>another option, like spyce.

Ok, but will PSP be any faster than any of the other solutions?
Possibly. Perhaps you are a better designer, and that's great. But, if
it's because of its integration with mod_python, then this means that
there is something missing in the mod_python API, and we should expose
that functionality. I'm concerned that this will not be the focus of
mod_python any longer, just as it was not the focus of PHP. Have you
looked at the performance of PHP -- it took years to get it to where it
is currently, and it's still not great.

>As for the shift of development focus.  I'm touched Rimon cares so much
>about how developers spend their time.

Again with the personal attacks and sarcasm! Please...

>If you want to re-invent the wheel, go for it!  Including Python with a
>Linux distribution doesn't stop you from using PHP.  PSP is a common
>feature request, and it lives as a standard module for the 99% of users
>who just want a solution that works, and don't care how efficient '[['
>is to type.  That doesn't mean alternatives aren't allowed and
>encouraged, they just aren't bundled.

It seems to me, based on everything that is currently out there, that it
is you who are re-inventing the wheel.

BTW, Spyce supports the more common <% syntax as well.

You know, come to think of it... You're making the same bundling
arguments that I've heard used before to extend monopoly positions: it's
good for the user. How would you know what's good for the user without
any mod_psp users? Just a thought..

But, as I said earlier. I'm trying to help the OSS community, as are
you. So good luck, and thank you for your efforts.

All the best,
Rimon.

From sterling at bumblebury.com  Mon Jun  9 14:14:57 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
Message-ID: <1055182496.2853.59.camel@hasele>

On Mon, 2003-06-09 at 13:05, Rimon Barr wrote:
> Dear Sterling,
> 
> On 9 Jun 2003, Sterling Hughes wrote:
> 
> >On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> >> > PSP is a python handler, distributed with mod_python.  There
> >> > is a clear boundary between the two pieces of code.  I can
> >> > see your political reasoning for not including PSP, but what
> >> > is your technical reason?  The other systems will not be
> >> > technically disadvantaged in anyway, and psp
> >> > certainly doesn't muddy things up from a technical perspective.
> >>
> >> The fact that mod_psp hasn't proved anything yet while other frameworks
> >> have seems a technical reason to me.
> >
> >That's a reason against bundling?  I can see that's a reason against
> >bundling PSP, but Rimon is talking about the chastity of mod_python
> >here.
> 
> I agree with Geert here, and also with Ian's prior email. PSP has not
> proven itself, while other projects have. There are also prior projects
> with that name and concept, that are many years older than mod_psp. Does
> mod_psp even have any users yet?
> 

Well, I believe it actually has a few.  But again, I don't see your
point here?  Is your point that PSP is not the right library to bundle
or that no libraries in general should be bundled?  

> >For one thing, Rimon didn't have a problem with the "purity" of
> >mod_python when he proposed that spyce be integrated, it was only after
> >that fell through in private mail that he refocused the issue, and
> >brought it to the mailing lists.
> 
> First, please do not get personal. It's not necessary. I'm only trying
> to help the OSS community, just like you. And, second, please don't

Don't get personal?  This is not a personal attack.  And it is
*certainly* not off-topic.  I was just pointing out that you had
previously suggested the integration of Spyce into the fold.  I'm
pointing out that you might have other motives than the "purity" of
mod_python, and I think that's very relevant to the context of this
discussion.

> misquote me. I suggested to you, in that private email, that what you
> were doing had similar goals to Spyce. And what I then suggested, to see
> whether you were interested, is that you help with the Spyce parser. I
> only wanted to combine efforts with you, so that we could build
> something bigger and better. I saw that you were working on a C-based
> parser for psp, and I asked you whether you were interested in working
> on such a parser for the Spyce language. The rationale is that although
> the parser does not matter much for performance, because the compiled
> files are cached, it would be nice as an option for developers, since
> the current Spyce parser is implemented in Python and is relatively
> slow. I also, thinking that you work with the Apache Foundation, I
> offered to donate Spyce to the AF. Donating to the AF does not mean, in
> my mind, merging the Spyce and mod_python projects.
> 

I can certainly dig up the messages if need be.  It was my understanding
from the messages that you wished to donate your code to the ASF, so it
could be included in mod_python.  Which certainly seems to make more
sense then donating your sources to the ASF, just so that I'm able to
work on them (especially when I never made that an issue).


> You seem to be attacking me as an individual rather than discussing the
> idea. I'm not interested in this. I am only interested in making Python
> a more web-friendly language, and I think mod_python is an important
> project in this regard. I also don't have a Spyce agenda, as you seem to
> imply. It's just a project that I work on, because I like it, and
> because I wanted to implement some features that I didn't find in other
> systems.

I'm not attacking you personally, but its convient to paint it that
way.  Your claim is that you have no spyce agenda, excuse me if I find
that quite hard to swallow.  Especially since out of the many lists you
Cc'ed, spyce really has the most to lose.

What is your point by the way?  From what I read, it seems to me that
your point is: 'Spyce will be adversely affected because people will use
the bundled solution.'[1]  Whenever people start using purity as an
argument in and of itself, its a good sign the issue hasn't been in the
crucible long enough.

If you don't want to bring yourself into the argument, then make some
technical claims against it.  Instead of being the maurder who doesn't
want mod_python to be defiled.  You still haven't explained why:

a) Including PSP disadvantages other solutions from a *technical*
perspective.
b) What is wrong with PSP from a technical perspective?  Have you
encountered any bugs when using PSP?  What do you think can be improved?
c) What problems you've had with mod_python since PSP was integrated

> 
> >PSP is a very small, very fast alternative, it doesn't preclude you from
> >using any of the listed solutions.  In fact you can use PSP in
> >conjunction with any of the solutions listed, or you can even ignore its
> >existence altogether and use something else, or code directly with
> >req.write().  There is *zero* performance loss if you choose to use
> >another option, like spyce.
> 
> Ok, but will PSP be any faster than any of the other solutions?
> Possibly. Perhaps you are a better designer, and that's great. But, if

>From the benchmarks I've seen its much faster. But I didn't make that
claim.  I just claimed it was fast, which is subjective (but i think it
is, so there ;-).  

> it's because of its integration with mod_python, then this means that
> there is something missing in the mod_python API, and we should expose
> that functionality. I'm concerned that this will not be the focus of

It doesn't at all take advantage of the mod_python api in anyway than
any other module does.  PSP is a pure python module, with the parser 
written in C (with flex.)  

> mod_python any longer, just as it was not the focus of PHP. Have you
> looked at the performance of PHP -- it took years to get it to where it
> is currently, and it's still not great.
> 

Have I looked at the performance?  I'm a PHP core developer for god
sakes :)  PHP btw, is a language that has become popular because of its
ability to provide a solution for a broad variety of web problems.

And btw, as for PHP's performance.  Its good enough for Yahoo! :)

> >As for the shift of development focus.  I'm touched Rimon cares so much
> >about how developers spend their time.
> 
> Again with the personal attacks and sarcasm! Please...
> 

Gosh, you're touchy.   I'm not personally attacking you, just pointing
out that your primary concern is probably not how I spend my time.

> >If you want to re-invent the wheel, go for it!  Including Python with a
> >Linux distribution doesn't stop you from using PHP.  PSP is a common
> >feature request, and it lives as a standard module for the 99% of users
> >who just want a solution that works, and don't care how efficient '[['
> >is to type.  That doesn't mean alternatives aren't allowed and
> >encouraged, they just aren't bundled.
> 
> It seems to me, based on everything that is currently out there, that it
> is you who are re-inventing the wheel.
> 

Well, isn't your point that people should reinvent the wheel - that's
how better solutions evolve?

> BTW, Spyce supports the more common <% syntax as well.
> 

I know, I was joking :)

> You know, come to think of it... You're making the same bundling
> arguments that I've heard used before to extend monopoly positions: it's
> good for the user. How would you know what's good for the user without
> any mod_psp users? Just a thought..
> 

Again with the personal attacks and sarcasm! Please... ;-)

Well, I'm not the only one who thinks this way.  But I would think being
a core developer of a web scripting language that powers 12 million
domains might give me a little inkling (how many users does spyce have
btw?).  I also think the fact that grisha thought it was a good idea to
adopt PSP might lend me a bit more credibility.  

But what's your argument here anyway - screw the users, viva la spyce?
;-) 

-Sterling
-- 
"That stuff's easy compared to installing Horde" 
    - Alan Knowles, In response to my applause for creating a LALR 
    parser for PHP.
From matt at pollenation.net  Mon Jun  9 19:39:07 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE434A2.6080409@sjsoft.com>
References: <3EE3D10E.32463.10230FF7@localhost>
	 <3EE434A2.6080409@sjsoft.com>
Message-ID: <1055183947.3960.6.camel@localhost>

I used this to get started, very helpful:

	http://www.python.org/cgi-bin/moinmoin/WebProgramming

- Matt

On Mon, 2003-06-09 at 08:17, David Fraser wrote:
> Gre7g Luterman wrote:
> 
> In fact, maybe what we need is just a nice "map" to all the frameworks, 
> explaining each one's focus, and giving a short code example for each...
> That would be a first step to helping people find what they need
> 
> David
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From tpc at csua.berkeley.edu  Mon Jun  9 11:39:10 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] python print
Message-ID: <20030609105857.C11138-100000@localhost.name>


Hello, I have a script meant to be run from the command line that for each
command line argument, iterates through the characters, returns the value
from a dictionary, and prints out the joined string with no spaces:

<code>
#!/usr/bin/env python

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine'
        }

for argument in sys.argv[1:]:
    print ''.join([dict1[character] for character in argument])
    print '\n'

</code>

I know 'print' and 'echo' are not valid in mod python, and I have tried:

<code>
def convert(numbers):
    for argument in numbers:
        w = ''.join([dict1[character] for character in argument])
        return w
</code>

although 'return' seems to exit after the first character.  I have also
tried:

<code>
x = []
def convert(numbers):
    for argument in numbers:
        x.append([dict1[character] for character in argument])
    return x
</code>

although I get a KeyError.
Is there a mod python alternative to 'print' so I may simply substitute ?

From fitnah55 at hotmail.com  Mon Jun  9 14:44:55 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site' aka 'ImportError'
	aka'make_obcallback' error
In-Reply-To: <000101c32e5f$66cb0da0$18c0c20a@computer>
Message-ID: <000001c32eb7$380f1030$18c0c20a@computer>


this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required
for passwd, so there's no way (even with a completely minimal install)
to
run w/o a python carcass laying around w/o screwing things up a bit one
way
or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From todd at slack.net  Mon Jun  9 14:58:24 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
	<1055182496.2853.59.camel@hasele>
Message-ID: <20030609145824.C17197@crank.slack.net>


Hi,

A bit of 3rd-party arbitration re: spyce/folding/"bundling":

If all *SP-type modules are on equal technical footing regarding access to APIs and integration, this is a completely political/marketing situation. From the bit I've gleaned out of this thread, that is indeed the case.

As an (I believe) relevant comparison, JSP is the "blessed" approach from Sun for java - that has not stopped others from arising, i.e. Velocity, Tapestry, etc., and newer libraries such as JSTL which I believe(?) are the result of good ideas being contributed and then embraced by the community, and "adopted" by the official group (Sun).

Will PSP gain a bit of an (initial) edge in visiblity over other templating modules on mod_python? Most certainly, but the combination of the increased visiblity of this feature "officially" available with mod_python, and the ease and equal technical footing of adding any of many other modules to accomplish this I think is win-win. I'd bet (if I was a betting man) that the number of new people an "official" templating module distributed with mod_python will attract would *increase* the number of users of the other packages as well - Spyce, Cheetah, wt, etc. etc.

Just my opinions as a newcomer here struggling to choose from 31 flavors - and at least this is all debating between a number of good options and not a search for just one elusive "OK" option...

-- 

___________________________
toddgrimason*todd@slack.net


From tpc at csua.berkeley.edu  Mon Jun  9 12:25:02 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] python print
In-Reply-To: <1055185349.10716.30.camel@localhost>
Message-ID: <20030609121231.L11532-100000@localhost.name>


Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
The KeyError is generated when mod python encounters the space when I
submit multiple sequences of numbers, which is why I had the 'for
argument in numbers' which in command line mode delimits arguments but as
a POST seems to break the code.  I could always put a value in dict1
where:

 ' ' : '/n',
 ',' : '/n'

On 9 Jun 2003, Scott Russell wrote:

> On Mon, 2003-06-09 at 14:39, tpc@csua.berkeley.edu wrote:
>
> >Hello, I have a script meant to be run from the command line that
> > for each command line argument, iterates through the characters,
> > returns the value from a dictionary, and prints out the joined
> > string with no spaces:
>
> <snip>
>
> I'm new on the list, but this looks like a python issue, not a
> mod_python issue.  Your middle example should work fine, when you stop
> returning in the middle of it:
>
> def convert(numbers):
>    w = ""
>    for argument in numbers:
>        W += ''.join([dict1[character] for character in argument])
>    return w
>
> Do I not understand the problem?  Note, I wrote this with the assumption
> that you were passing a sequence (list, tuple, dict) of character
> strings, as your second and third examples seem to.  Your original
> "print" code did not make this assumption.
>
> BTW, I would expect you to get keyerrors if you're not validating inputs
> - this code doesn't check for exceptions at all.
>
> - Scott
>
>

From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 13:41:00 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] python print
In-Reply-To: <20030609105857.C11138-100000@localhost.name>
Message-ID: <3EE48E6C.9546.FEFE5B@localhost>

On 9 Jun 2003 at 11:39, tpc@csua.berkeley.edu wrote:

<snipped>

> although 'return' seems to exit after the first character.

You have two options, one is assemble all the text you want to output 
in a single variable:

A = "one"
A += "two"
A += "three"
return A

or use the write statement:

req.write("one")
req.write("two")
req.write("three")

I think you may even be allowed to:

print >> req, "one"
print >> req, "two"
print >> req, "three"

Which is very similar to using the write statement.

Gre7g.Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From jgardner at jonathangardner.net  Mon Jun  9 13:51:05 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] python print
In-Reply-To: <3EE48E6C.9546.FEFE5B@localhost>
References: <3EE48E6C.9546.FEFE5B@localhost>
Message-ID: <200306091351.06895.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:41, Gre7g Luterman wrote:
> I think you may even be allowed to:
>
> print >> req, "one"
> print >> req, "two"
> print >> req, "three"
>
> Which is very similar to using the write statement.
>

If you get tired of print >> req, give this a try:

sys.stdout = req
print "one"
print "two"
print "three"

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5PM5WgwF3QvpWNwRAviBAKDnFOtnyTLCxv0BYwwhD5msPIPRGgCguVeH
SOmHE6OBt5QMTBtQqB7R6Qs=
=7cZI
-----END PGP SIGNATURE-----

From fitnah55 at hotmail.com  Mon Jun  9 17:30:45 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32eb7$380f1030$18c0c20a@computer>
Message-ID: <000001c32ece$6341c060$18c0c20a@computer>


does anyone who actually has apache2/mod_python3 working even read this
list?


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 2:45 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error



this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required for passwd, so there's no way (even with a completely minimal
install) to run w/o a python carcass laying around w/o screwing things
up a bit one way or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From tpc at csua.berkeley.edu  Mon Jun  9 14:37:28 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site' aka
 'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609143523.T12439-100000@localhost.name>


> -----
> 'import site' failed; use -v for traceback
> ImportError: No module named mod_python.apache
> [Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
> mod_python.apache.
> -----
>


I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke in
the first place.

From fitnah55 at hotmail.com  Mon Jun  9 18:26:40 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609143523.T12439-100000@localhost.name>
Message-ID: <000001c32ed6$3279d4b0$18c0c20a@computer>


nothing works!!!

tried reinstalling a couple different ways, no dice



-----Original Message-----
From: tpc@csua.berkeley.edu [mailto:tpc@csua.berkeley.edu] 
Sent: Monday, June 09, 2003 5:37 PM
To: kevin douglas
Cc: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error

I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke
in the first place.

From grisha at modpython.org  Mon Jun  9 18:58:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] python print
In-Reply-To: <200306091351.06895.jgardner@jonathangardner.net>
Message-ID: <20030609185646.S97880-100000@oldchief.reply.net>



On Mon, 9 Jun 2003, Jonathan Gardner wrote:

> If you get tired of print >> req, give this a try:
>
> sys.stdout = req
> print "one"
> print "two"
> print "three"
>

A word of caution - just like chdir(), this is not thread safe since there
is only one stdout per interpreter which could be executing multiple
threads simutaneously.

Grisha

From barr at cs.cornell.edu  Mon Jun  9 19:31:43 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055182496.2853.59.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091428200.29506-100000@glengoyne.cs.cornell.edu>

Dear Sterling,

>Well, I believe it actually has a few.  But again, I don't see your
>point here?  Is your point that PSP is not the right library to bundle
>or that no libraries in general should be bundled?

Both. I'm not sure that PSP is the right library to bundle (if you must
bundle something) because it needs to be measured against a *LOT* of
existing work which seems to be going ignored. See:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming, or
  http://spyce.sourceforge.net/doc-add_related.html
Even the name PSP has been used at least twice already. Why are none of
these, more mature projects being folded into mod_python instead of
developing something new?

However, for reasons stated in previous emails and others stated below,
I think that it would be even better to not include any library, and
simply make it simple to extend mod_python with application frameworks
or languages, by standardizing the Apache Python infrastructure.

>I'm not attacking you personally, but its convient to paint it that
>way.  Your claim is that you have no spyce agenda, excuse me if I find
>that quite hard to swallow.  Especially since out of the many lists you
>Cc'ed, spyce really has the most to lose.

I'm contributing code to the public domain in good will. I don't have an
agenda, and I'm not sure why that's hard to swallow. I wrote the code
for myself, and I found it useful. So, I released it so that others
could benefit too. It's users that win or lose, not Spyce. Nowadays, I
spend some free time maintaining the project, but I am not backed by any
company or foundation. It's not my work or research. I'm not planning to
write a book. It's just a small hobby of mine, and sometimes it's even a
bit of a headache to maintain the uninteresting parts. I'm happy to
share it with any others who are interested. I imagine that your
intentions in writing mod_psp are similar.

>If you don't want to bring yourself into the argument, then make some
>technical claims against it.  Instead of being the maurder who doesn't
>want mod_python to be defiled.  You still haven't explained why:
>
>a) Including PSP disadvantages other solutions from a *technical*
>   perspective.

- PSP will inevitably become bigger than mod_python and mod_python may
start to look like the PHP project did a few years ago before the focus
on Zend and PEAR finally emerged. - mod_python may start developing
special "fast" hooks to the PSP engine, that will not be properly
exposed and tested against other frameworks. - Release deadlines and bug
fixes will be end up being oriented around mod_psp changes, rather than
around fundamental changes to the framework making the versioning of the
framework more complex, and thereby also integration of other frameworks
that are not as closely bound to it as mod_psp. ... etc.

>b) What is wrong with PSP from a technical perspective?  Have you
>   encountered any bugs when using PSP?  What do you think can be improved?

I don't know where to start... How about here:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming ?
mod_psp is quite a late-comer to this space. Spyce is too, actually.
But mod_psp hasn't even scratched the surface compared to some of the
other projects out there. Or, if you're looking for something "simpler",
then there's lots of simple projects too.

I performed an extensive search before starting out on Spyce, and I
implemented Spyce only because I wanted spyce lambda functions, modules,
and active tags. I think they are useful; you told me that you thought
lambdas were cool too. :) I simply didn't see them anywhere else when I
started working on the project.

>c) What problems you've had with mod_python since PSP was integrated

None, but that's also because I haven't used the newest code. You see,
for me there's no need to upgrade, because there haven't been many
significant changes (from the Spyce interface perspective) to the core
framework. I like it when the infrastructure is efficient and stable:
see (b).

>It doesn't at all take advantage of the mod_python api in anyway than
>any other module does.  PSP is a pure python module, with the parser
>written in C (with flex.)

That's quite interesting. So, by your own admission, you don't really
gain any technical benefit from integration? Ok, then what's the good
reason to integrate, technical or otherwise? Is it just because you can,
being a member of the Apache Foundation and all? If it's merely to
attract users through bundling, then that's an abuse, especially since
there are so many other frameworks out there, that are far more mature
than mod_psp. Don't get me wrong... Please do continue developing
mod_psp, or join one of the other efforts. The issue is not that. It's
the folding of the projects.

Why not sideline this entire issue and be inclusive by creating a nice
standard extension mechanism, a repository of mod_python compatible
modules, a prominent placement on the Apache website, etc.? A modular
design, after all, is the design of Apache, and it has been pretty
successful, I think. Have the Apache and the PHP code bases been
"folded" yet? Why not? PHP is the most popular language used within
Apache! The argument here is similar, I believe.

I know that the AF is trying to move away from language specific
extensions, but it would be nice also to have a website for mod_python
that looked like Jakarta, or mod_tcl, or mod_perl. It would help a lot
to attract users, if that is your interest. BTW, the mod_tcl guys
decided to separate mod_tcl from Rivet. mod_perl went one step further
and created a repository of mod_perl compatible modules and also a
section with code library contributed by the user community.

>I'm a PHP core developer for god sakes :) [...]

I sincerely respect your experience as a core mod_php developer and
congratulate you. PHP is a wonderful project and a run-away success. I
hope that your input to the Python web community will be equally
dramatic.

All the best,
Rimon.


From mod_python at mikebell.org  Mon Jun  9 16:54:24 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609235423.GI20628@netvista.mikebell.org>

On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?

Yup, works just fine for me, never had such a problem, with worker or
prefork.
From gnb at itga.com.au  Tue Jun 10 11:10:23 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error 
In-Reply-To: Your message of Mon, 09 Jun 2003 17:30:45 -0400.
Message-ID: <200306100110.LAA01683@lightning.itga.com.au>

>does anyone who actually has apache2/mod_python3 working even read this
>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:15:37 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <200306100110.LAA01683@lightning.itga.com.au>
Message-ID: <000001c32ef6$2e8beb20$18c0c20a@computer>

I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:32:21 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import site'
	aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef6$2e8beb20$18c0c20a@computer>
Message-ID: <000001c32ef8$84cb50f0$18c0c20a@computer>

when I do an strace on httpd like it says with that no obCallBack error
in
the faq (a different problem than i am having anyway), there's not even
a
reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:04:43 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] need working fix for 'import
	site'aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef8$84cb50f0$18c0c20a@computer>
Message-ID: <000001c32efd$0a4ce140$18c0c20a@computer>


if I do an 'apachectl restart' several times, the amount of 'import
site'
errors grows accordingly :p

four restarts and its 7 times... five restarts and its 8 times... six
restarts
and its 9 times:

[Sun Jun 08 19:00:52 2003] [error] make_obcallback: could not import
mod_python.apache.

-----

'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 19:00:52 2003] [notice] SIGHUP received.  Attempting to
restart
[Sun Jun 08 19:00:53 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming normal operations

-----

to make matters worse, it worked once for no reason - and mod_python
just
displayed the 'test' handler as plaintext:

[Sun Jun 08 18:56:32 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming 
normal operations
[Sun Jun 08 18:56:50 2003] [notice] mod_python: (Re)importing module
'test'

now i can't get it to work again and nothing changed between the three
or
four start/restarts..



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:32 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import
site'aka'ImportError'aka'make_obcallback' error


when I do an strace on httpd like it says with that no obCallBack error
in the faq (a different problem than i am having anyway), there's not
even a reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:38:36 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] 
	working fix [FAQ: 'import site' failed; use -v for traceback]
In-Reply-To: <000001c32efd$0a4ce140$18c0c20a@computer>
Message-ID: <000501c32f01$c6600480$18c0c20a@computer>


as stated in the make_obcallback FAQ entry, this is a sys.path
problem...

the main problem (i believe) is that the path that is available at
runtime is not always the same as it was with the previous run of
apache

with a linux distro that requires python as part of the base install
(even
with a minimal install) - the python in /usr is going to supercede
the python in /usr/local even if the path properly includes /usr/lib
and site-packages/mod_python is pointed to properly

what you should do is axe all the python rpm's that you can
(python-base is required for libuser which is required for passwd)
and then take the file list from python-base and manually delete it
(/usr/lib/python2.2 and /usr/bin/python)

this will free up the proper /usr/local/lib/python2.2 to be first in
line in the path

what's confusing is that you link to /usr/local/bin/python2.2 explicitly
to compile mod_python, but it still ends up with /usr/lib/python2.2
as the primary lib source... and even if you get the paths added as the
other FAQ entry states - you're still going to be running the old
site.py from /usr/lib...

and to make matters even worse sometimes it randomly decides to work
even before you axe the default distro install..

:o



kd
From jafo at tummy.com  Mon Jun  9 23:59:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:53:36 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <20030610055927.GB28085@tummy.com>

I've been trying to build a web application system using mod_python, and
I've been running into some weirdness.  Some of it is just sporadic
behavior, some of it seems to be pretty consistent.  Before I get
started, my main development system is running Red Hat 9 with Python
2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
3.0.3.

Basically, I'm building up a package that contains my system.  In it I
have a module which contains my handler:

   AddHandler python-program .html
   PythonHandler jotweb.jotweb_mod_python::handler

Basically, my handler is using SimpleTAL to parse some HTML, which will
result in my code getting called, which will import things from the
jotweb package:

   fileName = path + '.py'
   fp = open(fileName, 'r')
   module = imp.load_source(path, fileName, fp)

So, basically, I am trying to load a module from a specific file.

The first problem I'm seeing is that imports are just weird.  For
example, if I have code which does "import jotweb.input.Request",
unless my __init__.py in jotweb/input includes:

   import Request

I will get an error to the effect that the module object contains no
element "Request".  Of course, from a regular Python program, I can do
"import jotweb.input.Request" just fine either way.

Basically, because of the above, my entire code-base has to be imported
when you do an "import jotweb".

Further, I'm running into weird issues with headers_out.  If from my
jotweb_mod_python.handler code I do:

   req.headers_out.add('key', 'value')

it will properly add the specified header.  And if this code is executed
from the module that is imported as above, it seems to work.  If,
however, in this imported module I do:

   import jotweb
   jotweb.auth.Sessions.processLogin()

where "processLogin()" gets a handle to the request object and does
req.headers_out.add(), the headers aren't showing up in my browser.
HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
same URL that I issued in the GET request, the headers are *NOT* getting
return as far as I can tell (no cookie is getting set, doing "View
Documenat Information" shows not those headers, but if I set headers in
my main mod_python handler, it WILL show it.

I've verified that the call to headers_out.add() is happening by adding
a syslog before it, it's definitely calling that code.

It seems like at some point something is making it so that
headers_out.add() doesn't work any more.  Would pulling the form data
out of the request cause that?  Any thoughts on why the imports seem to
work quite differently on a name-space basis from how they happen from
the interpreter:

   AttributeError: 'module' object has no attribute 'input'

Is there something about being in mod_python that makes it a "toy"
interpreter in some ways, that mean I'm constantly going to be bumping
into weird things?

Thoughts?

Thanks,
Sean
-- 
 I like to be different, so I built a lowercase a-frame house.
                 -- Sean Reifschneider, 2000
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 09:04:12 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609235423.GI20628@netvista.mikebell.org>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
	<20030609235423.GI20628@netvista.mikebell.org>
Message-ID: <3EE582EC.3070901@sjsoft.com>

mod_python@mikebell.org wrote:

>On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
>  
>
>>does anyone who actually has apache2/mod_python3 working even read this
>>list?
>>    
>>
>
>Yup, works just fine for me, never had such a problem, with worker or
>prefork.
>  
>
Works fine for me too.
When I had problems with import site in apache1.3/mod_python2, what I 
did was go and patch the mod_python source code to dump traces of 
variables at various points ... that helped me clean up exactly how it 
worked... to start off, I hardcoded a PythonPath inside mod_python 
because I couldn't work out why it didn't seem to work. Maybe you could 
try a similar approach?

David

From davidf at sjsoft.com  Tue Jun 10 09:12:46 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610055927.GB28085@tummy.com>
References: <20030610055927.GB28085@tummy.com>
Message-ID: <3EE584EE.9090503@sjsoft.com>

Sean Reifschneider wrote:

>I've been trying to build a web application system using mod_python, and
>I've been running into some weirdness.  Some of it is just sporadic
>behavior, some of it seems to be pretty consistent.  Before I get
>started, my main development system is running Red Hat 9 with Python
>2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
>3.0.3.
>
>Basically, I'm building up a package that contains my system.  In it I
>have a module which contains my handler:
>
>   AddHandler python-program .html
>   PythonHandler jotweb.jotweb_mod_python::handler
>
>Basically, my handler is using SimpleTAL to parse some HTML, which will
>result in my code getting called, which will import things from the
>jotweb package:
>
>   fileName = path + '.py'
>   fp = open(fileName, 'r')
>   module = imp.load_source(path, fileName, fp)
>
>So, basically, I am trying to load a module from a specific file.
>  
>
Do you mean you're using this import mechanism when you have the problem 
with jotweb.input.Request below?

>The first problem I'm seeing is that imports are just weird.  For
>example, if I have code which does "import jotweb.input.Request",
>unless my __init__.py in jotweb/input includes:
>
>   import Request
>
Have you tried using __all__ = [Request, ...] in __init__.py ?

>I will get an error to the effect that the module object contains no
>element "Request".  Of course, from a regular Python program, I can do
>"import jotweb.input.Request" just fine either way.
>
>Basically, because of the above, my entire code-base has to be imported
>when you do an "import jotweb".
>
mod_python does have some import hooks to handle things specially, but 
I'm not an expect here, someone else will have to comment...

>Further, I'm running into weird issues with headers_out.  If from my
>jotweb_mod_python.handler code I do:
>
>   req.headers_out.add('key', 'value')
>
>it will properly add the specified header.  And if this code is executed
>from the module that is imported as above, it seems to work.  If,
>however, in this imported module I do:
>
>   import jotweb
>   jotweb.auth.Sessions.processLogin()
>
>where "processLogin()" gets a handle to the request object and does
>req.headers_out.add(), the headers aren't showing up in my browser.
>HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
>same URL that I issued in the GET request, the headers are *NOT* getting
>return as far as I can tell (no cookie is getting set, doing "View
>Documenat Information" shows not those headers, but if I set headers in
>my main mod_python handler, it WILL show it.
>
>I've verified that the call to headers_out.add() is happening by adding
>a syslog before it, it's definitely calling that code.
>
How do you pass the request object into processLogin (it doesn't seem to 
be part of the call)?
It seems like you may be trying to use an old request object or something...

>It seems like at some point something is making it so that
>headers_out.add() doesn't work any more.  Would pulling the form data
>out of the request cause that?  Any thoughts on why the imports seem to
>work quite differently on a name-space basis from how they happen from
>the interpreter:
>
Pulling the form data won't cause it, but writing anything to the 
request will (it automatically outputs the headers as soon as any 
content is written).

>
>   AttributeError: 'module' object has no attribute 'input'
>
>Is there something about being in mod_python that makes it a "toy"
>interpreter in some ways, that mean I'm constantly going to be bumping
>into weird things?
>
No. But it is a bit more complex running a python interpreter inside 
Apache than standalone.

>Thoughts?
>
Hope that helps,

David


From jafo at tummy.com  Tue Jun 10 02:14:22 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE584EE.9090503@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
Message-ID: <20030610081422.GC28085@tummy.com>

On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>Do you mean you're using this import mechanism when you have the problem 
>with jotweb.input.Request below?

I mean that the imp module call is loading a module which then does an
"import jotweb.input".  If in the jotweb I don't have the __init__.py
import all sub-packages or sub-modules, I will get an AttributeError
such as:

  AttributeError: 'module' object has no attribute 'input'

>>  import Request
>Have you tried using __all__ = [Request, ...] in __init__.py ?

I believe I did try that at one point, but it's my understanding that
setting "__all__" only has an impact if you do "from jotweb import *",
which I don't do anywhere.  Also, as I said before, I can import the
code fine outside of mod_python.  "python -c 'import jotweb.input'", for
example...

>mod_python does have some import hooks to handle things specially, but 
>I'm not an expect here, someone else will have to comment...

I wonder if I'm running into something there.  I've tried simplifying it
to:

   include current directory in path
   module = __import__(basename, globals(), locals(), [])
   return sys.path to old layout

that doesn't really seem to help the problem with imports though...

>How do you pass the request object into processLogin (it doesn't seem to 
>be part of the call)?
>It seems like you may be trying to use an old request object or something...

The request object is stored into a module, where other parts of my
system will pick it up when they need either the headers or the request.

I've verified that the id() of the header_out object is the same in the
higher-level and lower-level code.  I'm not calling request.write()
anywhere except at the end of my top-level code, nor am I doing a print
anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
to access the Apache request object, but maybe it's doing a print?

>No. But it is a bit more complex running a python interpreter inside 
>Apache than standalone.

Sure, I understand that, and I'm ok with it being more complicated.  I'm
just not happy about running into sporadic problems where sometimes
things work, sometimes they don't.

For example, *ANY* time I submit a request for a URL via a telnet
connection, I get the headers back:

   guin:jafo$ telnet 127.0.0.1 80
   Trying 127.0.0.1...
   Connected to 127.0.0.1.
   Escape character is '^]'.
   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0

   HTTP/1.0 200 OK
   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
   Cache-control: max-age=0
   Expires: Thu, 01 Dec 1994 16:00:00 GMT
   Content-Length: 405
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

   [...]

If I paste the URL:

   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1

into Konqueror, the headers I'm getting back are:

   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

(according to Konqueror).  I've tried Mozilla and galeon as well, all
with similar results.  Yes, I have cookies enabled from localhost.  If I
put the headers_out.add() at the top of my handler, it showes up in
Konqueror's "View Page Info" output...

Sean
-- 
 Do you think reading about cowboys is sufficient to ride a horse?
 Like horses, real programs tend to throw you.  -- John Shipman, 1997
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 12:46:41 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610081422.GC28085@tummy.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com>
Message-ID: <3EE5B711.5080408@sjsoft.com>

Sean Reifschneider wrote:

>On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>  
>
>>Do you mean you're using this import mechanism when you have the problem 
>>with jotweb.input.Request below?
>>    
>>
>I mean that the imp module call is loading a module which then does an
>"import jotweb.input".  If in the jotweb I don't have the __init__.py
>import all sub-packages or sub-modules, I will get an AttributeError
>such as:
>
>  AttributeError: 'module' object has no attribute 'input'
>  
>
>>> import Request
>>>      
>>>
>>Have you tried using __all__ = [Request, ...] in __init__.py ?
>>    
>>
>I believe I did try that at one point, but it's my understanding that
>setting "__all__" only has an impact if you do "from jotweb import *",
>which I don't do anywhere.  Also, as I said before, I can import the
>code fine outside of mod_python.  "python -c 'import jotweb.input'", for
>example...
>  
>
>>mod_python does have some import hooks to handle things specially, but 
>>I'm not an expect here, someone else will have to comment...
>>    
>>
>I wonder if I'm running into something there.  I've tried simplifying it
>to:
>
>   include current directory in path
>   module = __import__(basename, globals(), locals(), [])
>   return sys.path to old layout
>
>that doesn't really seem to help the problem with imports though...
>  
>
Hmmm ... sorry, no further ideas here...

>>How do you pass the request object into processLogin (it doesn't seem to 
>>be part of the call)?
>>It seems like you may be trying to use an old request object or something...
>>    
>>
>
>The request object is stored into a module, where other parts of my
>system will pick it up when they need either the headers or the request.
>  
>
Might need to be careful of thread safety etc here...

>I've verified that the id() of the header_out object is the same in the
>higher-level and lower-level code.  I'm not calling request.write()
>anywhere except at the end of my top-level code, nor am I doing a print
>anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
>to access the Apache request object, but maybe it's doing a print?
>
I don't know much about SimpleTAL, but from what you've described, 
that's where you need to investigate ...
Try wrapping the req object in another one which logs any calls to 
req.write and then pass that through to SimpleTAL?

>>No. But it is a bit more complex running a python interpreter inside 
>>Apache than standalone.
>>    
>>
>
>Sure, I understand that, and I'm ok with it being more complicated.  I'm
>just not happy about running into sporadic problems where sometimes
>things work, sometimes they don't.
>
>For example, *ANY* time I submit a request for a URL via a telnet
>connection, I get the headers back:
>
>   guin:jafo$ telnet 127.0.0.1 80
>   Trying 127.0.0.1...
>   Connected to 127.0.0.1.
>   Escape character is '^]'.
>   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0
>
>   HTTP/1.0 200 OK
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
>   Cache-control: max-age=0
>   Expires: Thu, 01 Dec 1994 16:00:00 GMT
>   Content-Length: 405
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>   [...]
>
>If I paste the URL:
>
>   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1
>
>into Konqueror, the headers I'm getting back are:
>
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>(according to Konqueror).  I've tried Mozilla and galeon as well, all
>with similar results.  Yes, I have cookies enabled from localhost.  If I
>put the headers_out.add() at the top of my handler, it showes up in
>Konqueror's "View Page Info" output...
>
Yikes ... bizarre ... no ideas other than setting up something that 
watches the actual socket through which the message goes, to see what 
the difference is

Hope somebody else can help...
David

From jafo at tummy.com  Tue Jun 10 04:58:26 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE5B711.5080408@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com> <3EE5B711.5080408@sjsoft.com>
Message-ID: <20030610105826.GD28085@tummy.com>

On Tue, Jun 10, 2003 at 12:46:41PM +0200, David Fraser wrote:
>I don't know much about SimpleTAL, but from what you've described, 
>that's where you need to investigate ...

Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
it to be.  It'd be nice if in debug mode mod_python would throw an
exception or something if you tried adding headers after there had been
a write.

I'm still looking for information on the weird importing issues
though...  One other thing on that front is that to even get started I
found that at the top-level of my main mod_python handler, I had to add:

   from encodings import latin_1
   from encodings import iso8859_1

or I just couldn't use the SimpleTAL code in my handler -- it would fail
related to encodings.  They can't be imported at other times, they
already have to be there.  This seems to be similar in nature to the
weird ness I'm seeing importing my own modules, but I can't find any
mod_python documentation about how import is weird or broken under
mod_python.

Thanks,
Sean
-- 
 Well son, a funny thing about regret is that it's better to regret something
 you HAVE done than regret something you haven't done.
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mike.looijmans at asml.com  Tue Jun 10 13:23:43 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <01c32f42$bfe04980$926a1e6e@wsasd464>

>Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
>it to be.  It'd be nice if in debug mode mod_python would throw an
>exception or something if you tried adding headers after there had been
>a write.


You could do this at runtime without having to patch the mod_python code, in
the handler just do:

def handler(req):
    req.write = mywrite
    req.header_out = myheaderout(req)

def mywrite(self, data):
    self.write(data)
    self.headers_sent = 1

class myheaderout():
    ... # init stuff
    def __init__(self, req):
        self.req = req
        self.__get__ = req.header_out.__get__
        # etc. etc.
    def __set__(self, key, value):
        if self.req.headers_sent:
            raise EHeadersSent
        req.header_out[key] = value






-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From jgardner at jonathangardner.net  Tue Jun 10 06:35:43 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <20030609121231.L11532-100000@localhost.name>
References: <20030609121231.L11532-100000@localhost.name>
Message-ID: <200306100635.47755.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> Dear Mr. Russell, thank you I forgot about '+=', which did the trick.

One more thing I thought you might want to know about. There are really two 
ways to go about concatenating stuff to the end of strings:

A)
	s = "something"
	s += "something more"
	...
	print s

B)
	s = []
	s.append('something')
	s.appent('something more')
	...
	print "".join(s)

B is far more efficient than A. This really shows up when you are 
concatenating hundreds or more elements. Anything below that, it really 
doesn't make too much of a difference.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
oDZOcz6mtB1hiavXnelVodo=
=oy+6
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 09:49:23 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>

I'll give a second on ezt.py; even though Albatross is my first choice.
Ezt.py follows many of the same ideals of Albatross when it comes to
templates, and also is not geared only for the web like albatross so it
can be handly in other apps too.

I use edna and ViewCVS daily and found no trouble customizing both with
the ezt.py module.

(which btw, both are great pojects!)

From scott at towngeek.com  Tue Jun 10 10:49:54 2003
From: scott at towngeek.com (Scott Russell)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <200306100635.47755.jgardner@jonathangardner.net>
References: <20030609121231.L11532-100000@localhost.name>
	 <200306100635.47755.jgardner@jonathangardner.net>
Message-ID: <1055256594.1995.15.camel@localhost>

Momma always says, "Make sure you can read it first, only optimize it
after you profile." :)

On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> > Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
> 
> One more thing I thought you might want to know about. There are really two 
> ways to go about concatenating stuff to the end of strings:
> 
> A)
> 	s = "something"
> 	s += "something more"
> 	...
> 	print s
> 
> B)
> 	s = []
> 	s.append('something')
> 	s.appent('something more')
> 	...
> 	print "".join(s)
> 
> B is far more efficient than A. This really shows up when you are 
> concatenating hundreds or more elements. Anything below that, it really 
> doesn't make too much of a difference.
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
> oDZOcz6mtB1hiavXnelVodo=
> =oy+6
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mmckerns at its.caltech.edu  Tue Jun 10 08:53:41 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] importing errno
Message-ID: <Pine.GSO.4.44.0306100849110.18061-100000@clyde>

The following is a problem with the RedHat8 rpm's, but
also may apply to the source.  I thought I'd kick it out
to see if somebody has gone through this already, or if
the new source takes care of this...
-------------------------------------

In python2.1, "import errno" looked for
/usr/lib/python2.1/lib-dynload/errno.so

In python2.2, errno.so was moved to a built-in module.

Using the most current rpm builds from RHN for RedHat8
(python-2.2.2-7, mod_python-3.0.0-10, httpd-2.0.40-11.5),
the following causes an error because apache (?) looks to the
old location of errno.so when browser pointed to pyweb.py URL.

I'm assuming that RedHat is just a little behind, but I could be wrong.
I guess I will try to build from source from the latest
versions on the mod_python website to see if this bug
has been fixed, and if it is just a redhat rpm bug...



EXAMPLE:
---------------------------------------------
#! /usr/bin/env python
############################################################
# pyweb.py              06/09/03        mmckerns@caltech.edu
# testing python web handler
############################################################

# the next line causes the error...
import errno

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK

---------------------------------------------



FROM httpd.conf:
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------




ERROR FROM error_log:
----------------------------------------------
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: Traceback (most
recent c
all last):
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 274, in HandlerDispatch!
module
= import_module(module_name, _req)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 429, in import_module!
module =
imp.load_module(mname, f, p, d)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/home/mmckerns/p
ublic_html/pyweb.py", line 5, in ?!    import errno
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: ImportError: No
module n
amed errno
----------------------------------------------




---

Mike McKerns
mmckerns@caltech.edu





From thm at duke.edu  Tue Jun 10 11:53:33 2003
From: thm at duke.edu (Hunter Matthews)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <1055260413.2007.11.camel@jade.biology.duke.edu>

On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender.
> 
> The problem with Albatross for me is the same one with all the others - it
> is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

I recently discovered PyMeld.py, which fixes this problem. There is also
"simpleTAL"

I prefer PyMeld really, except for the license.

> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Hunter Matthews                          Unix / Network Administrator
Office: BioScience 145/244               Duke Univ. Biology Department
Key: F0F88438 / FFB5 34C0 B350 99A4 BB02  9779 A5DB 8B09 F0F8 8438
Never take candy from strangers. Especially on the internet.

From gstein at lyra.org  Tue Jun 10 12:30:55 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] 
	templating (was: supporting modular mod_python extensions vs.
	"folding" mod_psp)
In-Reply-To: <1055260413.2007.11.camel@jade.biology.duke.edu>
References: <20030606174027.J48945-100000@oldchief.reply.net>
	<1055260413.2007.11.camel@jade.biology.duke.edu>
Message-ID: <20030610193055.GC25150@lyra.org>

On Tue, Jun 10, 2003 at 11:53:33AM -0400, Hunter Matthews wrote:
> On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
>...
> > The problem with Albatross for me is the same one with all the others - it
> > is yet another language to learn:
> > 
> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> I recently discovered PyMeld.py, which fixes this problem. There is also
> "simpleTAL"

Hunh. Just looked at this. It is a *very* neat approach (gonna have to keep
it in mind; the approach might be very useful in some contexts). But I
disagree that it "separates logic from HTML". As a specific counterexample,
take my edna mp3 streamer. For each song found in the "current" directory,
it extracts a whole bunch of ID3 tag information and makes that available to
the template. The default HTML template does not display that. But if you
switch over to the XML template, then it *is* present. (at one point, there
was a GUI that read the XML pages, so it wanted richer info)

With PyMeld, the logic must insert all the data somewhere in the page
(either as element contents or as an attribute). I don't see how you can
avoid putting _all_ the data into a PyMeld template. Thus, the logic is
intrinsically tied to the template.

IMO, there is never any true separation. Even with EZT, the logic must
provide "all" potential data, and let the template pull in what it needs.
(of course, there are things you can do to avoid pregenerating all data, but
semantically, the logic and template are still tied)

There will always be tying between the template and the logic because of the
data. If you say, "well, let the template define/generate the data it
needs", then you've just moved logic/processing into the template :-) Since
you can't get away from it, I built ezt with the view of "figure out the
relevant data, and then use *that* to render it." IOW, I took more of a
"render only" approach rather than some lofty, but unreachable, goal of
separation of logic.

> I prefer PyMeld really, except for the license.

EZT is under a BSD license, fwiw.

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Tue Jun 10 12:27:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <1055256594.1995.15.camel@localhost>
References: <20030609121231.L11532-100000@localhost.name>
	<200306100635.47755.jgardner@jonathangardner.net>
	<1055256594.1995.15.camel@localhost>
Message-ID: <200306101227.08600.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > B)
> > 	s = []
> > 	s.append('something')
> > 	s.appent('something more')
> > 	...
> > 	print "".join(s)
> >
> > B is far more efficient than A. This really shows up when you are
> > concatenating hundreds or more elements. Anything below that, it really
> > doesn't make too much of a difference.
> >
>
> Momma always says, "Make sure you can read it first, only optimize it
> after you profile." :)
>

You're right. This particular algorithm has been tested and profiled. I gave 
you the numbers I have found when I have done profiling. That is why I use 
this almost everywhere I have to concatenate multiple strings together. While 
it is true you shouldn't spend too much time optimizing on your first 
iteration of writing your code, it is silly to use methods you know are 
inefficient when comparable methods that are efficient exist and are 
well-tested. It just makes more work for the second and beyond iterations.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
p82lLQ5P+TDytSP2zHDkZHE=
=gHW1
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 17:23:30 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] templating (was: supporting modular mod_python
	extensions vs."folding" mod_psp)
Message-ID: <C0FC22C08B82074A88B50061764157775C74@johnson.mediapulse.net>

     > > > <al-for iter="name" expr="keys">
     > > >     <tr>
     > > >          <td><al-value expr="name.value()"></td>
     > > >          <td><al-value expr="environ[name.value()]"></td>
     > > >     <tr>
     > > > </al-for>

I think this snippet doesn't show all of albatross; it acts much closer
to ezt.py than let on here.

In albatross, edna could do something like (warning, python-style sudo
code follows; do not attempt to run this at home):

In edna.py:

class edna_pages:

  def page_process(self, ctx):
    #called to process a page, ctx is the object with the request data
and methods
    if ctx.req_equals("show_dir"):
      #the "Show Directory" button was clicked
      file_list = get_files_in_dir(ctx.locals.directory) #defined
elsewhere, directory come from the broswer
	
      results = [] #list of results, will hold mp3 objects to pass to
template
      for file in file_list:
	  results.append(mp3(file)) # mp3 class defined elsewhere, gets
all the tag/size info

      ctx.locals.results = results # place results in the namespace of
the template

  def page_display(self, ctx):
    # load and run the template
    ctx.run_template('edna.html')

in edny.html:
<html>
<body>
	<table>
		<tr>
			<td>Filename</td>
			<td>Size</td>
			<td>Length</td>
		</tr>
		<al-for expr="results" iter="row">
			<al-exec expr="mp3 = row.value()"> <!-- I do
this for sanity, we could very easily
	
use row.value().field instead -->
			<tr>
				<td><al-value expr="mp3.filename"></td>
				<td><al-value expr="mp3.size"> Kb</td>
				<td><al-value expr="'%0d:%02d' %
(mp3.minutes, mp3.seconds)"></td>
			</tr>
		</al-for>
	</table>
</body>
</html>

That's the basic idea, showing the seperation of logic and display of
Albatross.  There is a lot of cool stuff to Albatross as well, for
example it could easily with a few tags break the results into 30 per
page and provide prev and next buttons, but this give you the general
idea.

Mike


From djc at object-craft.com.au  Wed Jun 11 14:52:01 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
Message-ID: <m3k7btrzbi.fsf@ferret.object-craft.com.au>

>>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:

Michael> I'll give a second on ezt.py; even though Albatross is my
Michael> first choice.  Ezt.py follows many of the same ideals of
Michael> Albatross when it comes to templates, and also is not geared
Michael> only for the web like albatross so it can be handly in other
Michael> apps too.

Just had a look at ezt.py.  It is very similar in structure and
approach to the Albatross templates.  Looking at the CVS logs it seems
like ezt.py and Albatross sprung into existence at almost the same
time.  Bizarre.

- Dave

-- 
http://www.object-craft.com.au

From tbrauch at mindless.com  Wed Jun 11 01:26:19 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] Load Error
Message-ID: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>

I am running Apache 2.0.40-11.5 on a Red Hat 8.0 box with Python 2.2.1 and
mod_python 3.0.1.  Apache and Python were installed when I installed Red Hat
and have been updated using up2date.  I installed mod_python using an RPM I
found on http://www.rpmfind.net.  In the docs on the modpython website, I
assumed I could skip all steps up to 2.3.2.  I then added the line

LoadModule python_module libexec/mod_python.so

to my httpd.conf file at the end of all of the other LoadModule commands.
And I added

<Directory /var/www/python>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

To the end of my httpd.conf file.  Then, I did apachectl stop and apachectl
start.  I got errors

[warn] module python_module is already loaded, skipping

both on the stop and start.  Okay, I thought, it was already loaded (but I
didn't see anything in my httpd.conf file for it), and it's not loading it
again, there shouldn't be any problems.  So, I removed the LoadModule line
from the httpd.conf file and all is right in the world.  My question, how is
this module being loaded?  Some sort of magic I suspect.

If you answer this question for me, I have one or two more just waiting.
Hopefully they will be just as easy.

From bkesuma at ml.gaijinweb.com  Wed Jun 11 22:27:02 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] Load Error
In-Reply-To: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
References: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
Message-ID: <20030611222702.6af0878c.bkesuma@ml.gaijinweb.com>

Hi Timothy,

On Wed, 11 Jun 2003 01:26:19 -0400
"Timothy M. Brauch" <tbrauch@mindless.com> wrote:

e stop and start.  Okay, I thought, it was already loaded (but
> I didn't see anything in my httpd.conf file for it), and it's not
> loading it again, there shouldn't be any problems.  So, I removed the
> LoadModule line from the httpd.conf file and all is right in the world. 
> My question, how is this module being loaded?  Some sort of magic I
> suspect.

Just a guess, check /etc/httpd/conf.d
See if there is a .conf file over there.

From mark at camazotz.com  Wed Jun 11 12:26:55 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <200306111700.h5BH02BQ002186@slash.mediapulse.com>
Message-ID: <83F0108E-9C29-11D7-89CD-00039364CE50@camazotz.com>

Michael C. Neel" <neel@mediapulse.com> wrote:
 > (warning, python-style sudo code follows;
 > do not attempt to run this at home):

Heh.  Good advice however you spell [p]s[e]udo. :)

From paul.robinson at groupbc.com  Wed Jun 11 17:45:17 2003
From: paul.robinson at groupbc.com (Paul Robinson)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <3EE75C9D.2000900@groupbc.com>

I'm trying to understand Apache and mod_python in order to understand 
how to approach the design of some fairly generic concepts with regard 
to database backed, web front ended applications.
Let me start by saying everything I say assumes Apache 2 and mod_python 
3.0.3 currently.

Apache has a number of modes of operation when it comes to threading and 
forking, I would like to understand how these things interact with 
Python subinterpreters 
[http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and 
issues such as the Python global interpreter lock (GIL) 
[http://www.python.org/doc/current/api/threads.html].

For example, on a Windows platform where there is a single 
multi-threaded Apache process (mpm_wint 
[http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
say that mod_python would not be able to take advantage of a 
multi-processor machine due to the GIL?

In another, given Apache running in the prefork MPM 
[http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
or b) useful to have a global, per-Apache-process persitant data 
strucuture sharing a pool of (threadsafe) database connections. I would 
say not useful since that process will only ever be running a single 
mod_python request at a time - hence more than one item in the pool 
would be useless. Given the "worker MPM" 
[http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
useful but it's not clear to me if it would be possible.

Taking the specific example of database connections (let me note I have 
read and believe I understand FAQ 3.3) is it ever useful or possible to 
share a pool of database connectors, rather than a single connector in 
the global namespace. I assume that code such as that in FAQ 3.3 would 
require additional locking mechanisms in order to function correctly in 
a multi-threaded Apache environment?

I bet there must be some code in existing projects that does stuff like 
this. Any pointers?

Maybe I'm confusing myself at the moment - maybe some other people as 
well ;-)

Thanks in advance,
	Paul

From tpc at csua.berkeley.edu  Wed Jun 11 10:06:11 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <200306101227.08600.jgardner@jonathangardner.net>
Message-ID: <20030611094521.D23467-100000@localhost.name>


curiosity impels me, if list append is most efficient in concatenating to
the end of a string, how would I use it where I previously had string
concatenation ?  I can only print out the values
surrounded by [[''],[''], etc]:

<code>

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine',
            ' ' : '\n',
        }

def convert(numbers):
    w = []
    for argument in numbers:
        w.append([dict1[digit] for digit in argument])
#        w += ''.join([dict1[digit] for digit in argument])
    return w

</code>

On Tue, 10 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> > On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > > B)
> > > 	s = []
> > > 	s.append('something')
> > > 	s.appent('something more')
> > > 	...
> > > 	print "".join(s)
> > >
> > > B is far more efficient than A. This really shows up when you are
> > > concatenating hundreds or more elements. Anything below that, it really
> > > doesn't make too much of a difference.
> > >
> >
> > Momma always says, "Make sure you can read it first, only optimize it
> > after you profile." :)
> >
>
> You're right. This particular algorithm has been tested and profiled. I gave
> you the numbers I have found when I have done profiling. That is why I use
> this almost everywhere I have to concatenate multiple strings together. While
> it is true you shouldn't spend too much time optimizing on your first
> iteration of writing your code, it is silly to use methods you know are
> inefficient when comparable methods that are efficient exist and are
> well-tested. It just makes more work for the second and beyond iterations.
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
> p82lLQ5P+TDytSP2zHDkZHE=
> =gHW1
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Wed Jun 11 10:31:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <20030611094521.D23467-100000@localhost.name>
References: <20030611094521.D23467-100000@localhost.name>
Message-ID: <200306111031.05502.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> curiosity impels me, if list append is most efficient in concatenating to
> the end of a string, how would I use it where I previously had string
> concatenation ?  I can only print out the values
> surrounded by [[''],[''], etc]:
>

Your curiosity served you well. If you missed this point, the whole thing is 
kinda pointless. ;-)

'join' is the answer. You 'join' the list together into a string after you've 
put the list together.

<snip>
> def convert(numbers):
>     w = []
>     for argument in numbers:
>         w.append([dict1[digit] for digit in argument])
> #        w += ''.join([dict1[digit] for digit in argument])
>     return w
>

Change the line:
	return w
to:
	return "".join(w)

This is a demonstration on how join works:
>>> l = ['A', 'B', 'C', 'D']
>>> " - ".join(l)
'A - B - C - D'
>>> "".join(l)
'ABCD'

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
d8M139orE/YjDJV5optSTn4=
=Mqq5
-----END PGP SIGNATURE-----

From tpc at csua.berkeley.edu  Wed Jun 11 10:48:51 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <200306111031.05502.jgardner@jonathangardner.net>
Message-ID: <20030611104619.E23713-100000@localhost.name>


I tried something like that, and I just tried it with "".join and
both times I got this error:

TypeError: sequence item 0: expected string, list found

On Wed, 11 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > curiosity impels me, if list append is most efficient in concatenating to
> > the end of a string, how would I use it where I previously had string
> > concatenation ?  I can only print out the values
> > surrounded by [[''],[''], etc]:
> >
>
> Your curiosity served you well. If you missed this point, the whole thing is
> kinda pointless. ;-)
>
> 'join' is the answer. You 'join' the list together into a string after you've
> put the list together.
>
> <snip>
> > def convert(numbers):
> >     w = []
> >     for argument in numbers:
> >         w.append([dict1[digit] for digit in argument])
> > #        w += ''.join([dict1[digit] for digit in argument])
> >     return w
> >
>
> Change the line:
> 	return w
> to:
> 	return "".join(w)
>
> This is a demonstration on how join works:
> >>> l = ['A', 'B', 'C', 'D']
> >>> " - ".join(l)
> 'A - B - C - D'
> >>> "".join(l)
> 'ABCD'
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
> d8M139orE/YjDJV5optSTn4=
> =Mqq5
> -----END PGP SIGNATURE-----
>

From big.stick at bol.com.br  Wed Jun 11 15:03:12 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <5221067273.20030611150312@bol.com.br>

Em 11/6/2003 ?s 14:48, tpc escreveu:

> I tried something like that, and I just tried it with "".join and
> both times I got this error:
> TypeError: sequence item 0: expected string, list found

This is because you?re trying to concatenate a list of lists, not a
list of strings. Try this instead:

def convert(numbers):
    w = []
    for argument in numbers:
        w.append(dict1[argument])
    return ''.join(w)

-- stick
From jgardner at jonathangardner.net  Wed Jun 11 11:17:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <200306111117.56203.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:48, tpc@csua.berkeley.edu wrote:
> On Wed, 11 Jun 2003, Jonathan Gardner wrote:
> > On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > >
> > > def convert(numbers):
> > >     w = []
> > >     for argument in numbers:
> > >         w.append([dict1[digit] for digit in argument])
> > > #        w += ''.join([dict1[digit] for digit in argument])
> > >     return w
> >
> > Change the line:
> > 	return w
> > to:
> > 	return "".join(w)
> >
>
> I tried something like that, and I just tried it with "".join and
> both times I got this error:
>
> TypeError: sequence item 0: expected string, list found
>

Oops. You'll also want to change:
	w.append([dict1[digit] for digit in argument])
to:
	[w.append(x) for x in [dict1[digit] for digit in argument]]
or:
	w.append(''.join([dict1[digit] for digit in argument]))

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53JSWgwF3QvpWNwRAm2yAJ404BiA7lGl/PU2NNJ5Lt4DSwaMyQCeJeqg
OB7LJEwIS23C9PdLCk+meb4=
=0I1k
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 11 11:34:03 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] tcltkaqua and IDLE
Message-ID: <2147483647.1055331243@[10.0.1.2]>

Hello,

I've installed TclTkAquaBl-8.4.2.0 and i installed IDLE from the 
package manager. When I run it, it launches and quits.
When I open it from the command line it does the same.

When I do:

pythonw 
/Applications/MacPython-2.3/IDLE.app/Contents/Resources/idlelib/idle.py

I get:

RuntimeError: tcl.h version (8.4) doesn't match libtcl.a version (8.4)

If I comment out the test for if tcl_version != _tkinter.TCL_VERSION 
everything works fine.

Is this because I installed 8.4.2 instead of 8.4.1?

(on a tangental note, if I ever don't want these packages any more, 
what can I do?)

Thanks,

~mindlace
http://mindlace.net
From jgardner at jonathangardner.net  Wed Jun 11 11:52:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
References: <3EE75C9D.2000900@groupbc.com>
Message-ID: <200306111152.32398.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading and
> forking, I would like to understand how these things interact with
> Python subinterpreters
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and
> issues such as the Python global interpreter lock (GIL)
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process. There 
is *no* *way* that any process can communicate with each other except through 
shared memory or pipes. I am no expert on the inner workings of mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that at 
all. That is there just to ensure that no thread is caught with its pants 
down. Or, in more technical terms, that the state of the python interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I do know 
that threads are like "lightweight" processes. They can and will be run on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the impression I 
get from the documentation is that this is not so. It sounds like each thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible
> or b) useful to have a global, per-Apache-process persitant data
> strucuture sharing a pool of (threadsafe) database connections. I would
> say not useful since that process will only ever be running a single
> mod_python request at a time - hence more than one item in the pool
> would be useless. Given the "worker MPM"
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I have
> read and believe I understand FAQ 3.3) is it ever useful or possible to
> share a pool of database connectors, rather than a single connector in
> the global namespace. I assume that code such as that in FAQ 3.3 would
> require additional locking mechanisms in order to function correctly in
> a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a request, 
then it can share with the same database connections in that apache thread.

However, I don't think what you really want (independent processes or threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff like
> this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python, and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and 
connect at the beginning of the request. Some databases have more overhead 
than others.

Remember I said that the only way to talk between processes is via shared 
memory or pipes. Shared memory isn't supported well (if at all) in python. 
Pipes are something you already are familiar with -- TCP sockets are pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays your 
commands word for word to the database. When you disconnect, it puts the 
connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a pain in 
the butt to write right, and they are always a nightmare to manage. And you 
always have to have a plan for scaleability, or it will eventually bite you.

> Maybe I'm confusing myself at the moment - maybe some other people as
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

From grisha at modpython.org  Wed Jun 11 15:26:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:37 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
Message-ID: <20030611152022.X28576-100000@oldchief.reply.net>



On Wed, 11 Jun 2003, Paul Robinson wrote:

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?

The answer, unfortunately, is yes. Here is a google search that has some
info on the subject: http://www.google.com/search?q=python+free-threading

AFAIK the state of things has not changed with respect to SMP and GIL.

Grisha

From fitnah55 at hotmail.com  Wed Jun 11 15:40:16 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <200306111152.32398.jgardner@jonathangardner.net>
Message-ID: <000001c33051$48583390$18c0c20a@computer>


as far as i understand, apache2 was supposed to fix and/or make possible
the memory pooling issue... i don't think MMDBMS w/ an effective apache
interface is a reality yet, but that's certainly going to be the
intent..

for connection pooling and other stuff you obviously have to design and
write proper multiplexing code to allocate your resources effectively,
but as far as windows goes i wouldn't have a clue and wouldn't want to

I do believe that there is one main interpreter in mod_python and each
thread has sub-interpreters.. Although with the new worker model it
might
be one main interpreter per child and one sub-interpreter per thread..
regardless you can munge it to work all in one interpreter or a couple
other ways with the config options which should allow memory pooling to
some extent

mysql just got $15M in financing though so I don't think a MMDBMS module
from them is going to be free, if it even ever becomes available

python mapping objects are pretty easy to cache though, as long as you
don't
have to manage consistency across disparate processes

just my two cents :p




-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of Jonathan Gardner
Sent: Wednesday, June 11, 2003 2:53 PM
To: Paul Robinson; Mod_python@modpython.org
Subject: Re: [mod_python] Apache, Threading and Multi-Processing Modules


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading 
> and forking, I would like to understand how these things interact with

> Python subinterpreters 
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] 
> and issues such as the Python global interpreter lock (GIL) 
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process.
There 
is *no* *way* that any process can communicate with each other except
through 
shared memory or pipes. I am no expert on the inner workings of
mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters
are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that
at 
all. That is there just to ensure that no thread is caught with its
pants 
down. Or, in more technical terms, that the state of the python
interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct 
> to say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I
do know 
that threads are like "lightweight" processes. They can and will be run
on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the
impression I 
get from the documentation is that this is not so. It sounds like each
thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters
are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible

> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. I 
> would say not useful since that process will only ever be running a 
> single mod_python request at a time - hence more than one item in the 
> pool would be useless. Given the "worker MPM" 
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I 
> have read and believe I understand FAQ 3.3) is it ever useful or 
> possible to share a pool of database connectors, rather than a single 
> connector in the global namespace. I assume that code such as that in 
> FAQ 3.3 would require additional locking mechanisms in order to 
> function correctly in a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a
request, 
then it can share with the same database connections in that apache
thread.

However, I don't think what you really want (independent processes or
threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff 
> like this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python,
and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and

connect at the beginning of the request. Some databases have more
overhead 
than others.

Remember I said that the only way to talk between processes is via
shared 
memory or pipes. Shared memory isn't supported well (if at all) in
python. 
Pipes are something you already are familiar with -- TCP sockets are
pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to
implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays
your 
commands word for word to the database. When you disconnect, it puts the

connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a
pain in 
the butt to write right, and they are always a nightmare to manage. And
you 
always have to have a plan for scaleability, or it will eventually bite
you.

> Maybe I'm confusing myself at the moment - maybe some other people as 
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty
of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From jgardner at jonathangardner.net  Mon Jun  9 22:43:28 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <200306092243.32448.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 14:30, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?
>

I'm using the RedHat 9 RPMs.They work great.
- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5XACWgwF3QvpWNwRAgH+AKDrlLxwrcs/8K1TaOZVrG4OaBCLnwCfV+6B
CD0Qxms2q+aHtCmp8elnX78=
=+FrE
-----END PGP SIGNATURE-----


From bkesuma at ml.gaijinweb.com  Thu Jun 12 12:15:38 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Mod_python in real world
Message-ID: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>

Hi,

I am looking for real world experience with mod_python. Anybody wants to
share stories?

From mike.looijmans at asml.com  Thu Jun 12 07:22:51 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <200306120522.HAA29819@wsasd464.asml.nl>


> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint 
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
> say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?

I don't know what a "GIL" is, but Windows (NT) and apache are both definitely 
capable of taking advantage of multi-processor machines correctly.

> In another, given Apache running in the prefork MPM 
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. 

As you already concluded, there is not shared data among the processes, so 
setting up communication between them is probably not worth considering. Just 
keep a single DB connection per process, something like:

db = None

def connect():
    if not db:
    	db = MySQLdb.connect(...)
    return db

> Taking the specific example of database connections (let me note I have 
> read and believe I understand FAQ 3.3) is it ever useful or possible to 
> share a pool of database connectors, rather than a single connector in 
> the global namespace. I assume that code such as that in FAQ 3.3 would 
> require additional locking mechanisms in order to function correctly in 
> a multi-threaded Apache environment?

It is both useful and possible to do so. Especially when the DBMS is on another 
machine.

Most databases allow only one session per thread, and as such the best thing to 
do is to make sure that a connection is used by only one thread at a time.
 
> I bet there must be some code in existing projects that does stuff like 
> this. Any pointers?


No pointers, but what I have been using here for months now on a "worker" mpm:

- Create a threading.Lock object.
- Create a dictionary (of lists) or list for the db connection pool (I use a 
dictionary because I have 4 databases where my clients want to grab data)

To get a connection, the lock is aquired and the first matching db connection is 
taken and removed from the pool, if possible. The lock is released and the 
connection returned. If the pool was empty, a new db conenction object is 
created and returned.

When a thread finishes handling a request, it returns the connection object back 
to the pool. (obtain lock, put connection into pool, release lock)

This guarantees that no two threads share the same connection, and still creates 
no more connections than neccesary.

--
Mike Looijmans
ASML: http://www5nl.asml.nl/~mlooijma
Private: http://www.milosoftware.com
-- MY text ends here --



-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From tbrauch at mindless.com  Thu Jun 12 01:50:36 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Directory or Location?
Message-ID: <003201c330a6$8c22c860$6600a8c0@tbrauch>

Okay, I just want to go over a small frustration I just had and spent a few
hours trouble shooting.  In the tutorial,
http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
mptest script you must type:

<Directory /some/directory/htdocs/test>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

in the python.conf file.  However, in the default python.conf file that was
installed with the mod_python 3.0.0-10 rpm, the examples say

# This will cause files beneath /var/www/html with the extension .spam
# to be handled by the Python script /var/www/html/eggs.py
#
#<Directory /var/www/html>
#    AddHandler python-program .spam
#    PythonHandler eggs
#</Directory>
...
# This will cause all requests to the /python heirachy **<--note typo** of
your
# webserver to be handled by mod_python's Publisher handler
# (see http://localhost/manual/mod/mod_python/hand-pub.html)
#
#<Location /python>
#    SetHandler python-program
#    PythonHandler mod_python.publisher
#</Location>


What is the difference between using "Location" and "Directory"?  When do I
use each one?

As I found out, there is a difference and if you use "Location" where you
should use "Directory".  You get a 500 Internal Server Error that I never
quite understood and spent some time trying to fix.  There doesn't seem to
be anything in the documentation I've read to describe the difference

 - Tim

From mod_python at ols.inorganic.org  Wed Jun 11 23:08:30 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <20030612060830.GA18376@nag.inorganic.org>

On Thu, Jun 12, 2003 at 01:50:36AM -0400, Timothy M. Brauch wrote:
> Okay, I just want to go over a small frustration I just had and spent a few
> hours trouble shooting.  In the tutorial,
> http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
> mptest script you must type:
[...]
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
> 
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference

That's because you haven't read the right documentation :)

Sorry, I don't mean to be flip about this, but in the end, this shows
something of the problem in trying to use something like mod_python
without having a good understanding of the underlying application.
"<Directory>" and "<Location>" directives are Apache directives, and
they're well-documented in the Apache docs.  I don't feel like looking
at the mod_python docs, but either they say that you should look into
the Apache config file format to at least understand it somewhat or ...
well, they should.

-roy
From tbrauch at mindless.com  Thu Jun 12 02:25:34 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Directory or Location?
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
Message-ID: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>

> > What is the difference between using "Location" and "Directory"?  When
do I
> > use each one?
> >
> > As I found out, there is a difference and if you use "Location" where
you
> > should use "Directory".  You get a 500 Internal Server Error that I
never
> > quite understood and spent some time trying to fix.  There doesn't seem
to
> > be anything in the documentation I've read to describe the difference
>
> That's because you haven't read the right documentation :)
>
> Sorry, I don't mean to be flip about this, but in the end, this shows
> something of the problem in trying to use something like mod_python
> without having a good understanding of the underlying application.
> "<Directory>" and "<Location>" directives are Apache directives, and
> they're well-documented in the Apache docs.  I don't feel like looking
> at the mod_python docs, but either they say that you should look into
> the Apache config file format to at least understand it somewhat or ...
> well, they should.
>
> -roy

That would help explain things a lot.  I've been using Python for quite a
few years now and I am new to Apache, probably opposite of most users.  I
just did a default install of Apache and haven't learned/played with it too
much.  Python, however, I use everyday and can do most anything with it by
now (except using mod_python it would seem).

I didn't see anywhere in the mod_python docs the mention that Directory and
Location are Apache directives.  They are just used.  But, now that I know
it, I've got some reading to do over at apache.org.

Thanks,

 - Tim

From sk at medien.fh-wiesbaden.de  Thu Jun 12 08:26:04 2003
From: sk at medien.fh-wiesbaden.de (Stefan Kanitz)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <200306120826.05057.sk@medien.fh-wiesbaden.de>

Am Donnerstag, 12. Juni 2003 07:50 schrieb Timothy M. Brauch:
> <Directory /some/directory/htdocs/test>
>   AddHandler python-program .py
>   PythonHandler mptest
>   PythonDebug On
> </Directory>
>
> in the python.conf file.  However, in the default python.conf file that was
> installed with the mod_python 3.0.0-10 rpm, the examples say
>

I think, when the mod_python documentation talks about "main server 
configuration file", it means httpd.conf (Apache configuration file) and not 
python.conf.

Steve


> # This will cause files beneath /var/www/html with the extension .spam
> # to be handled by the Python script /var/www/html/eggs.py
> #
> #<Directory /var/www/html>
> #    AddHandler python-program .spam
> #    PythonHandler eggs
> #</Directory>
> ...
> # This will cause all requests to the /python heirachy **<--note typo** of
> your
> # webserver to be handled by mod_python's Publisher handler
> # (see http://localhost/manual/mod/mod_python/hand-pub.html)
> #
> #<Location /python>
> #    SetHandler python-program
> #    PythonHandler mod_python.publisher
> #</Location>
>
>
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
>
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference
>
>  - Tim
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mod_python at ols.inorganic.org  Wed Jun 11 23:41:25 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
	<005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
Message-ID: <20030612064124.GA19135@nag.inorganic.org>

On Thu, Jun 12, 2003 at 02:25:34AM -0400, Timothy M. Brauch wrote:
> > That's because you haven't read the right documentation :)
> >
> > Sorry, I don't mean to be flip about this, but in the end, this shows
> > something of the problem in trying to use something like mod_python
> > without having a good understanding of the underlying application.
> > "<Directory>" and "<Location>" directives are Apache directives, and
> > they're well-documented in the Apache docs.  I don't feel like looking
> > at the mod_python docs, but either they say that you should look into
> > the Apache config file format to at least understand it somewhat or ...
> > well, they should.
> >
> > -roy
> 
> That would help explain things a lot.  I've been using Python for quite a
> few years now and I am new to Apache, probably opposite of most users.  I
> just did a default install of Apache and haven't learned/played with it too
> much.  Python, however, I use everyday and can do most anything with it by
> now (except using mod_python it would seem).
> 
> I didn't see anywhere in the mod_python docs the mention that Directory and
> Location are Apache directives.  They are just used.  But, now that I know
> it, I've got some reading to do over at apache.org.

Actually, I'll go a step further than that -- every single item you put
in the httpd.conf file (including the 'AuthName' and 'AuthType'
directives in 3.4) is an Apache directive.  Linking mod_python into
Apache lets you use some Apache directives that you wouldn't have access
to otherwise (all the Python*Handler directives), but they're still
_Apache_ directives -- and it's important to keep that in mind.

You're right, by the way --  you and I are coming at this from opposite
ends.  I've been managing Apache for years now, and am new to Python.

So yeah, this definitely indicates something of a shortcoming of the
mod_python tutorial (not really the only one, I think, judging by how
many people have problems getting mod_python to work as they'd expect).

-roy
From i at mindlace.net  Thu Jun 12 08:43:14 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <2147483647.1055407394@[10.0.1.2]>

--On 12 Thursday, June 2003 12:15 +0900 Batara Kesuma 
<bkesuma@ml.gaijinweb.com> wrote:

> Hi,
>
> I am looking for real world experience with mod_python. Anybody wants
> to share stories?

Sorry, I only use mod_python in Tir nan og, which as everyone knows 
isn't a real place.

~mindlace
http://mindlace.net
From i at mindlace.net  Thu Jun 12 08:55:22 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <2147483647.1055408122@[10.0.1.2]>

--On 12 Thursday, June 2003 01:50 -0400 "Timothy M. Brauch" 
<tbrauch@mindless.com> wrote:


> What is the difference between using "Location" and "Directory"?
> When do I use each one?

I battled with this for hours the other day, so maybe I can help.

This is the important document: 
<http://httpd.apache.org/docs/sections.html>

The key thing to take away is: Location gets applied after Directory.

What I wanted was to handle everything with my PythonHandler but 
exclude certain directories.*

So at first I tried a Directory directive with SetHandler 
python-program and other directory directives with SetHandler None; the 
latter only worked for the exact directory name, and only if I 
specified the absolute path (more general regular expressions, like 
"^/donthandlethis*", didn't work).

Finally I used <Location /donthandlethis> SetHandler None </Location> 
for those directories I didn't want handled by my handler, and now 
everything works fine.

* I battled for a while with TransHandler, but it seems to me that if 
you write a TransHandler it must do everything that the regular 
TransHandler does as well as whatever you want; there's no way to make 
a TransHandler that only translates some requests, and punts the rest 
to apache's normal handling. (someone please correct me if I'm wrong.)

Additionally, I never got 
req.add_handler("PythonHandler",myhandlername) to do what I expected - 
i.e. act like SetHandler for that request (but if it doesn't work that 
way, how come you can't specify extension in .add_handler() ?

HTH,

~mindlace
http://mindlace.net
From davidf at sjsoft.com  Thu Jun 12 18:15:17 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <3EE8A715.3090405@sjsoft.com>

Batara Kesuma wrote:

>Hi,
>
>I am looking for real world experience with mod_python. Anybody wants to
>share stories?
>  
>
Hi

We use mod_python for a number of projects, including an electronic 
logging application that stores logs in the database and is highly 
configurable. We are about to do the first deployment, for ninety 
concurrent users ; I'll let you know then...

David

From grisha at modpython.org  Thu Jun 12 14:20:10 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <2147483647.1055408122@[10.0.1.2]>
Message-ID: <20030612141039.T44199-100000@oldchief.reply.net>



On Thu, 12 Jun 2003, emf wrote:

> * I battled for a while with TransHandler, but it seems to me that if
> you write a TransHandler it must do everything that the regular
> TransHandler does as well as whatever you want; there's no way to make
> a TransHandler that only translates some requests, and punts the rest
> to apache's normal handling. (someone please correct me if I'm wrong.)

You should be able to return DECLINED in which case Apache will do its
default thing.

> Additionally, I never got req.add_handler("PythonHandler",myhandlername)
> to do what I expected - i.e. act like SetHandler for that request

Not sure what you mean by this. It should execute, though if you have
another PythonHandler, that handler will execute first.

> (but if it doesn't work that way, how come you can't specify extension
> in .add_handler() ?

Because you can first look at the extension, then decide whether to
add_handler()?, e.g.:

	if ext == ".foo":
		req.add_handler("PythonHandler", myfoohandler)
	else:
		# do something else

Grisha

From fitnah55 at hotmail.com  Thu Jun 12 14:37:48 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <3EE8A715.3090405@sjsoft.com>
Message-ID: <000001c33111$b8e44ac0$18c0c20a@computer>

once upon a time StarMedia's "geocities" like product ran on
mod_python..

re: 28M guest users and 1.5M subscribers

3 ultra sparcs.. f5 load balancer.. terabyte raid behind it..

it's not designed to be plug and play though.. if you want to get expert
functionality out of it you have to know how to design expert
functionality

there's plenty of horrible persistent java setups out there, mod_python
is
never that bad

tweak up on your multiplexing skills make sure you follow the
application
path exactly as it really is under the hood, and you're as good as
golden

solaris context switching is still superior I believe, but the new xeon
architecture seems promising as long as you design around it

unfortunately my xeon box w/ hyperthreading is not my dev box :/  can't
comment more on that

From gstein at lyra.org  Thu Jun 12 15:12:44 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3k7btrzbi.fsf@ferret.object-craft.com.au>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
Message-ID: <20030612221244.GB29668@lyra.org>

On Wed, Jun 11, 2003 at 02:52:01PM +1000, Dave Cole wrote:
> >>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:
> 
> Michael> I'll give a second on ezt.py; even though Albatross is my
> Michael> first choice.  Ezt.py follows many of the same ideals of
> Michael> Albatross when it comes to templates, and also is not geared
> Michael> only for the web like albatross so it can be handly in other
> Michael> apps too.
> 
> Just had a look at ezt.py.  It is very similar in structure and
> approach to the Albatross templates.  Looking at the CVS logs it seems
> like ezt.py and Albatross sprung into existence at almost the same
> time.  Bizarre.

The CVS logs from edna are the original location. It was started in February
2001. Then I copied a version over into ViewCVS. Then another copy over into
SubWiki. Oh, and there is a copy in Subversion now -- we use it in the build
system for generating MSVC Project files (.dsp and .dsw) and for VC.Net
files. I also have a couple home projects that use it.

One of these days (with all that spare time), I'm going to create a little
SVN project area and check in the "reference copy" there, and maintain it
there. Then, in SubWiki and SVN (at least), I can simply use the
svn:externals feature to yank it into my projects. Eventually, I'll get
ViewCVS and edna into SVN and they can directly reference it too...

Oh, just for a bit more time each day... :-)

But yes, there are some similarities to Albatross. But it seems like
Albatross has variables and also makes function calls explicit. I wonder,
though: can Albatross be used outside of a markup-based system? Does it
assume and take advantage of within-markup-style-text templating?

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From djc at object-craft.com.au  Fri Jun 13 12:14:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <20030612221244.GB29668@lyra.org>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
	<20030612221244.GB29668@lyra.org>
Message-ID: <m3llw6k9kw.fsf@ferret.object-craft.com.au>

>>>>> "Greg" == Greg Stein <gstein@lyra.org> writes:

Greg> But yes, there are some similarities to Albatross. But it seems
Greg> like Albatross has variables and also makes function calls
Greg> explicit. I wonder, though: can Albatross be used outside of a
Greg> markup-based system? Does it assume and take advantage of
Greg> within-markup-style-text templating?

Some of the tags rely on functionality in the application framework,
but most don't.  You get quite precise control over the text that is
produced.

Check this out.  It is a standalone program that only uses the
templating functionality.

   http://www.object-craft.com.au/projects/albatross/albatross/tug-tree.html

- Dave

-- 
http://www.object-craft.com.au

From skremer at q.cis.uoguelph.ca  Fri Jun 13 14:37:23 2003
From: skremer at q.cis.uoguelph.ca (Stefan C. Kremer)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Server side includes.
Message-ID: <Pine.LNX.4.44.0306131431420.22685-100000@q.cis.uoguelph.ca>


Is there any easy way to perform server side include type processing with 
my mod_python handler?

I have written a handler which delivers *.html files *.shtml files, etc. 
and also runs *.py scripts and also handles *.cgi, but I would like to 
post process each of these using the standard server-side include type 
processing.

I realize that I could write the code to do it manually in my handler, but 
am wondering if there is a better way.

Thanks,

	-SK

-- 
--
Dr. Stefan C. Kremer, Associate Prof.
Reynolds Building, 106
Dept. of Computing and Information Science
University of Guelph, Guelph, Ontario	N1G 2W1

WWW: http://q.cis.uoguelph.ca/~skremer
Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
E-mail:  skremer@uoguelph.ca

From neel at mediapulse.com  Fri Jun 13 14:54:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Server side includes.
Message-ID: <C0FC22C08B82074A88B50061764157776B9531@johnson.mediapulse.net>

If you are using Apache 2.0; then you can chain together content
handlers to do this (or so I've been told but I've yet to try it).  If
you are using Apache 1.3 then you'll have to handle it yourself, or not
handle .shtml files (which may or may not be an option depending on what
you are doing).

HTH,
Mike

     > -----Original Message-----
     > From: Stefan C. Kremer [mailto:skremer@q.cis.uoguelph.ca] 
     > Sent: Friday, June 13, 2003 2:37 PM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Server side includes.
     > 
     > 
     > 
     > Is there any easy way to perform server side include 
     > type processing with 
     > my mod_python handler?
     > 
     > I have written a handler which delivers *.html files 
     > *.shtml files, etc. 
     > and also runs *.py scripts and also handles *.cgi, but I 
     > would like to 
     > post process each of these using the standard 
     > server-side include type 
     > processing.
     > 
     > I realize that I could write the code to do it manually 
     > in my handler, but 
     > am wondering if there is a better way.
     > 
     > Thanks,
     > 
     > 	-SK
     > 
     > -- 
     > --
     > Dr. Stefan C. Kremer, Associate Prof.
     > Reynolds Building, 106
     > Dept. of Computing and Information Science
     > University of Guelph, Guelph, Ontario	N1G 2W1
     > 
     > WWW: http://q.cis.uoguelph.ca/~skremer
     > Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
     > E-mail:  skremer@uoguelph.ca
     > 
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From dustin at ywlcs.org  Fri Jun 13 15:34:59 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] mod_python proposal
Message-ID: <20030613203459.GF2664@eleanor.internal.ywlcs.org>

I've been thinking a lot about the extensibility requirements of mod_python
users, in light of recent discussion.  Basically, the degree of flexibility
desired of mod_python is the same degree of flexibility delivered by Apache
itself.

To explain in more detail, most of the low-level frameworks people have been
discussing here would be /best/ implemented as an Apache module -- best in
terms of speed, flexibility, configurability, and installability.  In fact,
mod_psp is an Apache module.

mod_python's raison d'etre is to allow Apache modules to be written in
Python.  However, it's grown somewhat beyond that in extent, while also
omitting a few capabilities of native C modules.  My proposal is to separate
and enhance the mod_python core so that it supports the full functionality of
a C module, and no more.  The project would then reference other Apache
modules, coded fully in Python, which implement specific capabilities.  It
would probably also be helpful for mod_python to include some utility
functionality, e.g., query processing, html quoting, etc.

To bring it down to the level of configuration files, I'd like to have this
in my Apache config:

----
LoadModule python_module /path/to/mod_python.so
..
# Parallel to LoadModule, but they're written in Python!
LoadPythonModule mod_psp /path/to/mod_psp.py
LoadPythonModule publisher_module /path/to/publisher.py

..
# and act just like other Apache modules
AddHandler psp-script .psp
..

<VirtualHost ...>
  SetHandler publisher # references publisher_module above
  # publisher module defines its own Apache configs
  PublisherRoot /path/path/path
</VirtualHost>
----

I don't know how possible this is in the specifics, although I think it will
make an interesting project.  As a general design scheme, what do you think?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From michel_ts at yahoo.com.br  Sun Jun 15 12:48:24 2003
From: michel_ts at yahoo.com.br (=?iso-8859-1?q?Michel=20Thadeu?=)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Some problems with mod_python.publisher
Message-ID: <20030615154824.64623.qmail@web40402.mail.yahoo.com>

Hi guys!

I having trouble with mod_python.publisher, I using a apache 1.2.27 and
the mod_python 2.7 (the standard version of debian testing).

I have configured the apache like this:

   <Directory /var/www/modpython>
     AddHandler python-program .py
     PythonHandler mod_python.publisher
   </Directory>

And have made a script named index.py with the next code:

   from mod_python import apache
   def executar(req):
           req.content_type="text/html"
           req.send_http_header()
           req.write('<H1>Some test of executar!</H1>')
           return apache.OK

But when I execute this script, using the next url...

   http://localhost/modpython/index.py/executar

The page is open, rendening html code, and all the things, but with a
error message:

   Some test of executar!
   HTTP/1.1 200 OK Date: Tue, 17 Jun 2003 23:36:26 GMT Server: 
   Apache/1.3.27 (Unix) Debian GNU/Linux mod_python/2.7.8 Python/2.2.2 
   PHP/4.1.2 Connection: close Transfer-Encoding: chunked Content-Type:

   text/html; charset=iso-8859-1
   OK
   The server encountered an internal error or misconfiguration and was

   unable to complete your request.

   Please contact the server administrator, webmaster@capsulecorp and 
   inform them of the time the error occurred, and anything you might 
   have done that may have caused the error.

   More information about this error may be available in the server 
   error log.

But if I use PythonHanldler and name executar as handler, the error is
not shown... I read the last lines of error.log of apache, but I don't
found a critical error:

   [Tue Jun 17 21:42:29 2003] [alert] apache: Could not determine the 
   server's fully qualified domain name, using 127.0.0.1 for ServerName
   [Tue Jun 17 21:42:30 2003] [notice] Apache/1.3.27 (Unix) Debian 
   GNU/Linux mod_python/2.7.8 Python/2.2.2 PHP/4.1.2 configured -- 
   resuming normal operations
   [Tue Jun 17 21:42:30 2003] [notice] suEXEC mechanism enabled 
   (wrapper: /usr/lib/apache/suexec)
   [Tue Jun 17 21:42:30 2003] [notice] Accept mutex: sysvsem (Default: 
   sysvsem)

This is the last errors since the last restart of apache...

Well, I don't know what error I made, can someone help me?

thanks
--
Michel Thadeu Sabchuk
Curitiba - Paran? - Brazil

=====
--
Michel Thadeu Sabchuk
Curitiba/PR

_______________________________________________________________________
Yahoo! Mail
Mais espa?o, mais seguran?a e gratuito: caixa postal de 6MB, antiv?rus, prote??o contra spam.
http://br.mail.yahoo.com/
From gnb at itga.com.au  Mon Jun 16 10:25:38 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing? 
In-Reply-To: Your message of Tue, 10 Jun 2003 02:14:22 -0600.
Message-ID: <200306160025.KAA13272@lightning.itga.com.au>

>    include current directory in path
>    module = __import__(basename, globals(), locals(), [])
>    return sys.path to old layout

This might be your problem.  Inside mod_python the current directory is 
probably "/".  It's not like CGI where the current directory is the CGI dir.



From jafo at tummy.com  Sun Jun 15 18:54:19 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <200306160025.KAA13272@lightning.itga.com.au>
References: <200306160025.KAA13272@lightning.itga.com.au>
Message-ID: <20030616005419.GM8892@tummy.com>

On Mon, Jun 16, 2003 at 10:25:38AM +1000, Gregory Bond wrote:
>>    include current directory in path
>>    module = __import__(basename, globals(), locals(), [])
>>    return sys.path to old layout
>
>This might be your problem.  Inside mod_python the current directory is 
>probably "/".  It's not like CGI where the current directory is the CGI dir.

By "current" directory, I mean the directory that I am currently looking
for the module in.  For example, the directory in "filename" the request
object.

My problem isn't that it's not importing the module.  The problem is
that it seems like mod_python has done something weird and possibly just
wrong with the import semantics, so that if I import a package, modules
within that package aren't available unless I explicitly import them in
the init.

Also, I'm running into cases where I'm setting values within modules in
my handler, and then when I call code in the module those values are
reset.  I've resorted to shoving request-persistent data into
__builtins__, which works around the latter problem, and re-structuring
some code so that my entire object heirarchy *CAN* be imported all at
once.

Sean
-- 
 -rw-rw-rw-:  File permissions of the beast.  (Chuck Phillips)
 mknod /dev/beast c 6 66
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mark at camazotz.com  Mon Jun 16 08:54:20 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Some problems with mod_python.publisher
In-Reply-To: <200306151700.h5FH01BQ015762@slash.mediapulse.com>
Message-ID: <A5558BE2-9FF9-11D7-BFFF-0003939F6178@camazotz.com>

Michel Thadeu <michel_ts@yahoo.com.br> wrote:
>    def executar(req):
>            req.content_type="text/html"
>            req.send_http_header()
>            req.write('<H1>Some test of executar!</H1>')
>            return apache.OK

The publisher handler expects your handler to return the page body 
rather than the status.

   def executar(req):
     return '<H1>Some test of executar!<H1>'

You can still use req.write() if you prefer; in that case, use

   return ''

at the end.

From ballums at swbell.net  Mon Jun 16 09:16:47 2003
From: ballums at swbell.net (Ben Allums)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] mod_python proposal
In-Reply-To: <20030613203459.GF2664@eleanor.internal.ywlcs.org>
Message-ID: <r01050400-1026-2A9B3B4AA00511D7B639003065489174@[216.141.190.73]>

On 6/13/03 at 3:34 PM, dustin@ywlcs.org (Dustin Mitchell) wrote:

> mod_python's raison d'etre is to allow Apache modules to be written
> in Python.  However, it's grown somewhat beyond that in extent, while
> also omitting a few capabilities of native C modules.  My proposal is
> to separate and enhance the mod_python core so that it supports the
> full functionality of a C module, and no more.

Here, here.

I'd like to second this approach.  Keep mod_python focused and complete.


Ben
From vmanera at manord.com  Tue Jun 17 18:42:22 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] 
	mod_python was restarted from apache with error:3221225477
Message-ID: <52DC70C1C1575C418CB033523A29CF141048C0@exchange2000.manord.com>


Today this happened 10 time.  why?

apache version 2.0.46 mod_python version 3.0.3

platform win 2000


apache log:

[Tue Jun 17 09:30:44 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.
[Tue Jun 17 09:30:45 2003] [notice] Parent: Created child process 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(505):
Parent: Sent the scoreboard to the child
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Child process is running
[Tue Jun 17 09:30:45 2003] [info] Parent: Duplicating socket 236 and sending
it to child process 4440
board from the parent.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(623):
Parent: Sent 1 listeners to child 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(582):
Child 4440: retrieved 1 listeners from parent
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Acquired the start mutex.
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Starting 50 worker threads.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 0 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 16 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 27 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 39 starting.
........


Villiam 
From peter at outputdsj.com.au  Fri Jun 20 00:58:09 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Mod_python won't install
Message-ID: <003f01c33673$33a16520$0200a8c0@peterhome>

Hi

I know this is a list for experienced developers but I have ttried the web
to no avail so thought someone here may be able to help with my problems on
installing mod_python.

I am having trouble installing Mod_pythong.

This is my setup:

OS: Windows XP
Web Server: Apache v2.0.46
Mod_python install: v3.0.3.0

I also have PHP installed

I added the line:

LoadModule python_module modules/mod_python.so

to my httpd.conf file (the location is correct).

But then as soon as I try starting Apache after entering this line and
saving the config file, it fails to start. I then comment the line out and
everything works OK again.

These lines in my error.log may be of interest:

[Fri Jun 20 00:52:48 2003] [notice] Child 1184: Exit event signaled. Child
process is ending.
[Fri Jun 20 00:52:48 2003] [warn] (OS 995)The I/O operation has been aborted
because of either a thread exit or an application request.  : winnt_accept:
Asynchronous AcceptEx failed.

Can anyone point me in the right direction here.

Thanks
Peter




***********************************************************************
This e-mail message, including any attachments, is for the sole use of the
intended recipient(s) and may contain confidential
and privileged information.  No-one else may read, print, store, copy,
forward or act in reliance on all or any of it or its attachments.  If you
receive this e-mail in error, please telephone us on 1300 302 115 or contact
the sender by reply e-mail and destroy all copies of the original message.
Thank you.
***********************************************************************


From bill at rfa.org  Fri Jun 20 10:23:42 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] mod_python on Windows with Python 2.3b1?
Message-ID: <3EF318EE.4000709@rfa.org>


Trying to run mod_python on Apache 2.0.46
on WIn2K using Python 2.3b1, as soon as
I uncomment the LoadModule line for mod_python.so,
Apache won't start up (even though it seems
to get past loading the mod_python module,
but gives no message on why it dies).

I'm not compiling myself, using the straight
binaries downloaded from Apache and Sourceforge.
Any ideas?

Thanks,
Bill

From mod_python at ols.inorganic.org  Sun Jun 22 12:59:08 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] persistent values
Message-ID: <20030622195908.GA23104@nag.inorganic.org>

Greetings all,

I'm working on my first real useful mod_python project and I'm finding that
I feel a little clueless here.

I've got an authent handler that works perfectly; one of the things it does
is create a ConfigParser object.  

Now, I want that object to be available for other parts of this
interpreter.  Specifically:

http://mydomain.com/directory

is controlled by dispatcher.py's authenhandler (the function that creates
the configparser object).  

http://mydomain.com/directory/dispatcher.py/init

is, obviously, the init function in dispatcher.py (using the Publisher
handler).  I'd like that function to have access to the CP object without
having to re-initialize the object (after all, that's the whole point of
mod_python).  Simply referring to the same value results in "NameError:
global name 'configp' is not defined."

Suggestions of which part of the documentation to re-read?

-roy


From gnb at itga.com.au  Mon Jun 23 10:12:22 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] persistent values 
In-Reply-To: Your message of Sun, 22 Jun 2003 12:59:08 -0700.
Message-ID: <200306230012.KAA00095@lightning.itga.com.au>

> Suggestions of which part of the documentation to re-read?

You need persistent session information.  Check the FAQ 3.8
	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp


From dustin at ywlcs.org  Sun Jun 22 19:20:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] persistent values
In-Reply-To: <200306230012.KAA00095@lightning.itga.com.au>
References: <200306230012.KAA00095@lightning.itga.com.au>
Message-ID: <20030623002013.GG14253@eleanor.internal.ywlcs.org>

On Mon, Jun 23, 2003 at 10:12:22AM +1000, Gregory Bond wrote:
> > Suggestions of which part of the documentation to re-read?
> 
> You need persistent session information.  Check the FAQ 3.8
> 	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp

If I understood the question correctly, Mr. Bond needed to know how to keep
information from one handler to another in the same request.  If that ws
indeed what he meant, then the solution is to attach the information to the
request, e.g.

(authenhandler)
  req.cp = my_config_parser
...
(handler)
  config_parser = req.cp

works like a charm.  Just be careful not to create a reference loop (e.g.,
don't let the config parser have a reference to req buried inside of it..).
This has caused memory leakage for me in the past.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From bill at rfa.org  Mon Jun 23 11:57:33 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 21:53:38 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <14348759489.20030621002129@centurytel.net>
References: <14348759489.20030621002129@centurytel.net>
Message-ID: <3EF7236D.70907@rfa.org>

Brian Lenihan wrote:

>You are both having similar problems according to your posts to the
>mod_python list.
>
>For unknown reasons, the mod_python binary is compiled using MSVC 7,
>which is a problem for most people.
>
>The instructions here:
>
>http://www.modpython.org/pipermail/mod_python/2002-December/002714.html
>
>still apply to mod_python 3.0.3
>
>The mod_python binary available from apache.org is linked to Python
>2.2, so you can't use Python 2.3, Bill, you have to use 2.2.x.  I am
>currently using 2.2.3 without any problems.
>  
>
Okay, it loads with 2.2.3, but I'm getting the ImportError: No module 
named _apache
from my cgi-bin (when run from within Apache, *NOT* from the the command 
line.
Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
I assume should be loaded from the c:\Program Files\Apache 
Group\Apache2\modules dir,
with the LoadModule python-module modules/mod_python.so  directive, but 
doesn't
seem to be).

Thanks,
Bill

>Apache2 requires XP service Pack 1, Peter, so that may be why you
>are having problems with Apache, in addition to the mod_python crash
>at start up.
>  
>


From peter at outputdsj.com.au  Mon Jun 23 21:06:05 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] Re: mod_python on Windows
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org>
Message-ID: <001901c33977$7342e080$0200a8c0@peterhome>

// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
// named _apache
// from my cgi-bin (when run from within Apache, *NOT* from the the command
//l ine.
// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
// I assume should be loaded from the c:\Program Files\Apache
// Group\Apache2\modules dir,
// with the LoadModule python-module modules/mod_python.so  directive, but
// doesn't
// seem to be).

With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
got the ole fave "Hello World" to work a few times.

Now when I run it mod_python loads OK but I get the following error: I guess
some changes I made to the Apache config file caused the problem. Buggered
if I know what. So if anyone has any ideas I will be more than welcome to
hear them.

Anyhow here's the error:

Mod_python error: "PythonHandler test"

Traceback (most recent call last):

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 320, in
HandlerDispatch
    module = import_module(module_name, config)

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 499, in
import_module
    module = imp.load_module(mname, f, p, d)

  File "C:/Program Files/Apache Group/Apache2/htdocs/music/\test.py", line 2

    def handler(req):

    ^

SyntaxError: invalid syntax



From bill at rfa.org  Mon Jun 23 14:39:55 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <001901c33977$7342e080$0200a8c0@peterhome>
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org> <001901c33977$7342e080$0200a8c0@peterhome>
Message-ID: <3EF7497B.2080601@rfa.org>

Peter Brown wrote:

>// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
>// named _apache
>// from my cgi-bin (when run from within Apache, *NOT* from the the command
>//l ine.
>// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
>// I assume should be loaded from the c:\Program Files\Apache
>// Group\Apache2\modules dir,
>// with the LoadModule python-module modules/mod_python.so  directive, but
>// doesn't
>// seem to be).
>
>With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
>got the ole fave "Hello World" to work a few times.
>
>Now when I run it mod_python loads OK but I get the following error: I guess
>some changes I made to the Apache config file caused the problem. Buggered
>if I know what. So if anyone has any ideas I will be more than welcome to
>hear them.
>  
>

You should only need something in your <directory cgi-bin> like:
<Directory "C:/Program Files/Apache Group/Apache2/cgi-bin">^M
    AllowOverride None^M
    Options None^M
    Order allow,deny^M
    Allow from all^M
    AddHandler python-program .pys
    PythonHandler myhandler
    PythonDebug On
<directory "c:/Program Files/Gpache Group

which will send anything to a name (existing or not) like "bill.pys"
off to cgi-bin/myhandler.py

(my guess is you messed up the AddHandler or PythonHandler statements)

I also had some luck doing this with Python 2.3, but made some changes
and never made it back to Kansas. Basically, I was just binary editing
the DLL and changing the one occurence of python22.dll to python23.dll.
Mostly caused no harm :()

From jafo at tummy.com  Mon Jun 23 15:30:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623002013.GG14253@eleanor.internal.ywlcs.org>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
Message-ID: <20030623213027.GC4640@tummy.com>

On Sun, Jun 22, 2003 at 07:20:13PM -0500, Dustin Mitchell wrote:
>(handler)
>  config_parser = req.cp
>
>works like a charm.  Just be careful not to create a reference loop (e.g.,
>don't let the config parser have a reference to req buried inside of it..).

I didn't realize that you could set values on the request...
Unfortunately, in my case I am calling into the SimpleTAL code and that
is calling back into my code, by which point I no longer have access to
the request object.

One of the weirdnesses I've found about mod_python is that it seems to
be losing values that I set on module-level name-spaces.  If I import a
module, set a value on it, then later try to access it, sometimes it
works and sometimes it doesn't.  This may or may not be related to the
weirdness about how mod_python imports modules or PythonAutoReload...

I've finally just broken down and set up an object in __builtins__ that
I store request-related data on (including a link to the request and
other information).  I hate doing it this way, but it has allowed me to
reliably set and get data that I need to get access to.

Sean
-- 
 If we don't survive, we don't do anything else.
                 -- John Sinclair
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From grisha at modpython.org  Mon Jun 23 18:31:47 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623213027.GC4640@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com>
Message-ID: <20030623182702.U2204@onyx.ispol.com>



On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> One of the weirdnesses I've found about mod_python is that it seems to
> be losing values that I set on module-level name-spaces.  If I import a
> module, set a value on it, then later try to access it, sometimes it
> works and sometimes it doesn't.

If you could come up with a way to replicate this weirdness, that would be
great.

> This may or may not be related to the weirdness about how mod_python
> imports modules or PythonAutoReload...

There isn't anything unusual about the way mod_python imports modules.
PythonAutoReload can yeld strange results after a lot of changes and a lot
of reloading, but that's not unusual during development. A cleanly started
Apache should (and does for me at least) behave 100% predictably.

Grisha
From jafo at tummy.com  Mon Jun 23 16:56:38 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623182702.U2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
Message-ID: <20030623225638.GC4076@tummy.com>

On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
>There isn't anything unusual about the way mod_python imports modules.

Someone on this list replied to one of my earlier messages and said that
mod_python hooks into the import mechanism for some reason.

There definitely are issues related to importing of packages...  From
mod_python, if I import a package that has a module within it, I can't
access that name unless the package __init__.py imports that name.  For
example, the following works from Python:

   guin:p$ mkdir pkg
   guin:p$ echo >pkg/__init__.py
   guin:p$ echo 'foo = "bar"' >pkg/baz.py
   guin:p$ python -c 'from pkg import baz; print baz.foo'
   bar
   guin:p$

IIRC, in mod_python that would give me an AttributeError on the "from
pkg import baz", unless I do:

   echo 'import baz' >pkg/__init__.py

Of course, this means that my entire package structure must be imported
through the __init__.py files, even if not all of it is used.  Worse,
this means that I can't have a module which imports another module, that
imports the first module...

>PythonAutoReload can yeld strange results after a lot of changes and a lot
>of reloading, but that's not unusual during development. A cleanly started
>Apache should (and does for me at least) behave 100% predictably.

That's not been my experience, where "predictably" is defined as
"behaving as I expect Python code to".  I mean, it's predictable in it's
unpredictability.  ;-)

Sean
-- 
 What we see depends on mainly what we look for.
                 -- John Lubbock
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From gnb at itga.com.au  Tue Jun 24 10:21:36 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] Re: mod_python on Windows 
In-Reply-To: Your message of Mon, 23 Jun 2003 21:06:05 +1000.
Message-ID: <200306240021.KAA19222@lightning.itga.com.au>

>     def handler(req):
> 
>     ^
> 
> SyntaxError: invalid syntax

This really looks like a plain python indentation/whitespace error, not a
mod_python thing.  Can you run "python test.py" without syntax errors? (I know
it will fail in the import stage, but your error message says it isn't even
getting that far.)


From grisha at modpython.org  Mon Jun 23 21:28:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623225638.GC4076@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com><20030623225638.GC4076@tummy.com>
Message-ID: <20030623212426.H2204@onyx.ispol.com>


I just tried it and it works fine for me. I followed the steps you
outlined with "/home/grisha/www/htdocs" as my current directory, here is
an excerpt from apache config:

LoadModule python_module modules/mod_python.so

<Directory /home/grisha/www/htdocs>
        SetHandler python-program
        PythonHandler blah
</Directory>

And here is /home/grisha/www/htdocs/blah.py:


from mod_python import apache

from pkg import baz

def handler(req):
    req.write(baz.foo)
    return apache.OK


There's got a detail that I'm missing here.

Grisha

On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
> >There isn't anything unusual about the way mod_python imports modules.
>
> Someone on this list replied to one of my earlier messages and said that
> mod_python hooks into the import mechanism for some reason.
>
> There definitely are issues related to importing of packages...  From
> mod_python, if I import a package that has a module within it, I can't
> access that name unless the package __init__.py imports that name.  For
> example, the following works from Python:
>
>    guin:p$ mkdir pkg
>    guin:p$ echo >pkg/__init__.py
>    guin:p$ echo 'foo = "bar"' >pkg/baz.py
>    guin:p$ python -c 'from pkg import baz; print baz.foo'
>    bar
>    guin:p$
>
> IIRC, in mod_python that would give me an AttributeError on the "from
> pkg import baz", unless I do:
>
>    echo 'import baz' >pkg/__init__.py
>
> Of course, this means that my entire package structure must be imported
> through the __init__.py files, even if not all of it is used.  Worse,
> this means that I can't have a module which imports another module, that
> imports the first module...
>
> >PythonAutoReload can yeld strange results after a lot of changes and a lot
> >of reloading, but that's not unusual during development. A cleanly started
> >Apache should (and does for me at least) behave 100% predictably.
>
> That's not been my experience, where "predictably" is defined as
> "behaving as I expect Python code to".  I mean, it's predictable in it's
> unpredictability.  ;-)
>
> Sean
> --
>  What we see depends on mainly what we look for.
>                  -- John Lubbock
> Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
> tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
>
From jafo at tummy.com  Mon Jun 23 21:33:24 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623212426.H2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
	<20030623225638.GC4076@tummy.com> <20030623212426.H2204@onyx.ispol.com>
Message-ID: <20030624033324.GE4076@tummy.com>

On Mon, Jun 23, 2003 at 09:28:58PM -0400, Gregory (Grisha) Trubetskoy wrote:
>I just tried it and it works fine for me. I followed the steps you
>outlined with "/home/grisha/www/htdocs" as my current directory, here is
>an excerpt from apache config:

Ugh, you are right and I am wrong...  I don't actually use packages very
often, and when I was seeing decidedly different behavior from
mod_python and the interpreter, it must have been using two different
versions of the package when I thought I was using one.

Sorry about that.

Thanks,
Sean
-- 
 A computer is like an Old Testament god, with a lot of rules and no mercy.
                -- Joseph Campbell
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mod_py at ua.fm  Tue Jun 24 11:11:09 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
Message-ID: <web-26094356@ua.fm>

Greetings to all,

I'm using Apache 1.3.24 + mod_py 2.7.8.

The idea is to make mod_py have global variables that 
will be accessible from any request untill apache restarts.

I added another dictionary to mod_python.c next to 

	static PyObject * interpreters = NULL;
like:
	PyObject * python_globals = NULL;
	
I initialize it on apache start in
	void python_init(server_rec *s, pool *p)	
like:
	if (!python_globals)
	{
		python_globals = PyDict_New();
		ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, s,
			 "python_init: Initializing globals dict");
	}
	
and logging shows it really initializes once per apache start.

then I just trying to use it via req object (maybe not the best way but 
fastest to me)
I define it as attribute '__globals__' of req object 
so it's accessible as req.__globals__
module requestobject.c
procedure 
static PyObject * request_getattr(requestobject *self, char *name)

like:
	else if (strcmp(name, "__globals__") == 0)
	{
		Py_INCREF(python_globals);
		return (PyObject *) python_globals;
	}

works fine with single apache child process.
means I can set 
	req.__globals__[key] = anyobject
and read it in next page hit
	anyobject = req.__globals__[key]
	
but when I start to use few such apache processes (access it from diff ip) I 
have strange situation.

req.__globals__ has same physical address like 0x810108c but different 
content.

Even dumping that 'python_globals' dictionary in requestobject.c shows 
different content of PyDict object.

It looks like each apache child process has own address space and same address 
points 
to physically different memory.

Any suggestion has can I fix that?

Thanx,
Anatoly Artamonov
----

-> CTAPT -> http://start.alkar.net 
From tuan-huy.la at muenchen.de  Tue Jun 24 17:01:12 2003
From: tuan-huy.la at muenchen.de (Tuan-Huy La)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] Can't compile mod_python-3.0.3 on solaris 8 (sparc)
Message-ID: <3EF867B8.70805@muenchen.de>

I'm trying to install mod_python-3.0.3 on a sparc machine  running 
solaris 8, Apache 2.0.46, gcc 3.2.3, gnu ld 2.11.2 (binutil) and Python 
2.2.3.

I always get the following error when trying the make (gnu make 3.79) 
command:

(last few lines:)
    ...
    <unknown>                           0x12f8      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    <unknown>                           0x12fc      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x140       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x3c8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    PyTuple_Fini                        0x1974      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    PyTuple_Fini                        0x1b40      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    _PyObject_GC_Resize                 0x2cc       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_Resize                 0x3a8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    ld: fatal: relocations remain against allocatable but non-writable 
sections
    collect2: ld returned 1 exit status
    apxs:Error: Command failed with rc=65536
    .
    make[1]: *** [mod_python.so] Error 1
    make[1]: Leaving directory `/export/home/root/mod_python-3.0.3/src'
    make: *** [do_dso] Error 2

What's wrong? Any ideas?

From azaroth at liverpool.ac.uk  Tue Jun 24 18:28:47 2003
From: azaroth at liverpool.ac.uk (Dr Robert Sanderson)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
Message-ID: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>


When trying to write a trivial connection handler that only works when 
accessed from a certain port, I found that trying to 
read connection.local_addr results in a seg fault.

I'm running:
Server version: Apache/2.0.40
Server built:   May 20 2003 10:15:29

Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current 
Redhat RPM.

My server config addition looks like:
Listen 2100
PythonPath "sys.path+['/home/cheshire/']"
PythonConnectionHandler ztest
PythonDebug On

And then /home/cheshire/ztest.py reads:

-------------
from mod_python import apache
def connectionhandler(conn):
    conn.write("Trying to do something ...")
    try:
        conn.write(repr(conn.local_addr))
    except Exception, err:
        conn.write("Broke")
    conn.write("Done it.")
    return apache.OK
-------------

[cheshire@mithlond cheshire]$ telnet localhost 2100
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Trying to do something ...Connection closed by foreign host.

[Tue Jun 24 18:14:39 2003] [notice] mod_python: (Re)importing module 'ztest'
[Tue Jun 24 18:14:40 2003] [notice] child pid 2193 exit signal Segmentation 
  fault (11)

Any ideas?  Has this been fixed in a more recent version, and I should get 
stuck in and recompile everything from source?

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Tue Jun 24 14:14:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030624140701.M38636@onyx.ispol.com>


On Tue, 24 Jun 2003, Dr Robert Sanderson wrote:

>
> When trying to write a trivial connection handler that only works when
> accessed from a certain port, I found that trying to
> read connection.local_addr results in a seg fault.
>
> I'm running:
> Server version: Apache/2.0.40
> Server built:   May 20 2003 10:15:29
>
> Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> Redhat RPM.

2.0.40 is a version of Apache a few major releases and almost a year
behind...

Connection support in 3.0.1 is very immature, you should really upgrade to
apache 2.0.46 and mod_python 3.0.3.

Grisha
From gnb at itga.com.au  Wed Jun 25 09:10:01 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence 
In-Reply-To: Your message of Tue, 24 Jun 2003 11:11:09 +0300.
Message-ID: <200306242310.JAA05334@lightning.itga.com.au>

> It looks like each apache child process has own address space and same addres
> s 
> points 
> to physically different memory.
> 
> Any suggestion has can I fix that?

That's true.  When the Apache process forks, each child process has different 
copy of the address space.  Same address, different contents.
You will need to use some explicity shared memory, either from a mmap'd file or
a shm segment.  This will imply a custom memory allocator and custom malloc()/
free() - like functions.  But you will need to make python use this shared
memory, and I have no idea if that is possible.


From jgardner at jonathangardner.net  Tue Jun 24 17:07:29 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26094356@ua.fm>
References: <web-26094356@ua.fm>
Message-ID: <200306241707.30622.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 01:11, 1 1 wrote:
> Greetings to all,
>
> I'm using Apache 1.3.24 + mod_py 2.7.8.
>
> The idea is to make mod_py have global variables that
> will be accessible from any request untill apache restarts.
>

Start over. Rethink what you are trying to do.

Let's examine things fundamentally. How does apache work? It listens on port 
80. It spawns a bunch of children. When it gets an incoming connection, it 
passes the connection off to one of the children.

These children are seperate processes. There is no way for them to 
communicate with each other outside of pipes and shared memory. (Well, 
there are other ways, but they aren't as useful as you would hope).

So far, no one has figured out how to use shared memory and python. However, 
everyone and their sister knows how to use pipes. It's called "sockets" and 
you can use TCP over IP or one of a million other protocols.

So, these processes have to communicate with each other. How are they going 
to find each other, let alone let each other know when something changes 
and how it changes? Why, we need a central location for all of them to call 
in to. Let's call it a server.

And what will this server do? It will hold data. Maybe we should call it a 
"database". So, any process running out in the wild can connect to this 
database, grab data, change data, and everyone will work together.

That's your "global variables" accessible anywhere. That's the current best 
way to do it. You'll find a terrifying amount of research done on 
everything you can possibly imagine doing with a database.

I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
Oracle, or Sybase.

So go start learning about databases, and how best to use them! ;-)

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++OfBWgwF3QvpWNwRAsq8AKC0R3Xp1xmJDWu6cmUD2KDTNo9EbgCgiODn
yVGztiDpf5ZizHramVNSUw8=
=RvEH
-----END PGP SIGNATURE-----


From grisha at modpython.org  Wed Jun 25 00:16:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625001438.M40924@onyx.ispol.com>



On Tue, 24 Jun 2003, Jonathan Gardner wrote:

> So far, no one has figured out how to use shared memory and python.

http://www.python.org/doc/current/lib/module-mmap.html

http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

:-)

Grisha
From mod_python at mikebell.org  Tue Jun 24 21:27:23 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <20030625042723.GR1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> http://www.python.org/doc/current/lib/module-mmap.html

The only problem with the mmap module is that it just gives you a
string-like object. How do you put something like a mutex in there so
you can access the shared memory area safely?
From mod_python at mikebell.org  Tue Jun 24 21:32:50 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625043250.GS1198@netvista.mikebell.org>

On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
> Oracle, or Sybase.
> 
> So go start learning about databases, and how best to use them! ;-)

Of course, some people prefer not to use a giant, bloated SQL database
every time they need to store any sort of data. :-)

If your data storage needs are a little less complicated and you're
having trouble justifying SQL, try something like berkeley db or just
the filesystem.
From grisha at modpython.org  Wed Jun 25 00:40:41 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625042723.GR1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
Message-ID: <20030625003543.O40924@onyx.ispol.com>


On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:

> On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > http://www.python.org/doc/current/lib/module-mmap.html
>
> The only problem with the mmap module is that it just gives you a
> string-like object. How do you put something like a mutex in there so
> you can access the shared memory area safely?
>

To quote Guido - "Good question!"

(here is the link
http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

:-)

OK, on a serious note - I believe the shm module provides locking. I'm
also going to look into the APR for possibly including some locking
interface in the next version of mp.

Grisha

From mod_python at mikebell.org  Tue Jun 24 21:48:09 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
	<20030625003543.O40924@onyx.ispol.com>
Message-ID: <20030625044808.GT1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:40:41AM -0400, Gregory (Grisha) Trubetskoy wrote:
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

For anyone who's curious, you _can_ do it by using fcntl's file locking
before making any changes to your shared memory region, but this means
you only get one lock per file. So if you've got one variable, just lock
the file you're mmaping. If you've got dozens, you're going to need a
lot of lockfiles.

From jakubec at san.rr.com  Tue Jun 24 22:11:10 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001c01c33ad8$31f56aa0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.


From sterling at bumblebury.com  Wed Jun 25 01:16:51 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	 <200306241707.30622.jgardner@jonathangardner.net>
	 <20030625042723.GR1198@netvista.mikebell.org>
	 <20030625003543.O40924@onyx.ispol.com>
Message-ID: <1056518211.28555.72.camel@hasele>

The way you handle locking with mmap() is by using a combination of a
file and a mmap(), it isn't that expensive so long as MAP_NOSYNC is
specified (if MAP_NOSYNC isn't specified than most operating systems
default to it).  

Outside of that, the proper way to do this is to use a semaphore.

-Sterling

On Wed, 2003-06-25 at 00:40, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:
> 
> > On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > > http://www.python.org/doc/current/lib/module-mmap.html
> >
> > The only problem with the mmap module is that it just gives you a
> > string-like object. How do you put something like a mutex in there so
> > you can access the shared memory area safely?
> >
> 
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)
> 
> :-)
> 
> OK, on a serious note - I believe the shm module provides locking. I'm
> also going to look into the APR for possibly including some locking
> interface in the next version of mp.
> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
"Programming today is a race between software engineers stirring to  
 build bigger and better idiot-proof programs, and the universe trying  
 to produce bigger and better idiots. So far, the universe is winning." 
    - Unknown
From mod_py at ua.fm  Wed Jun 25 09:58:01 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
Message-ID: <web-26333903@ua.fm>

>>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
>>Oracle, or Sybase.
>>So go start learning about databases, and how best to use them! ;-)

Yes, I'm using PgSQL and have possibly hundreds of simultaneous connections.
That's why I tried to cache all in memory.
Thanx for advice anyway.

----

-> CTAPT -> http://start.alkar.net 
From mod_py at ua.fm  Wed Jun 25 10:18:02 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence 
In-Reply-To: <200306242310.JAA05334@lightning.itga.com.au>
Message-ID: <web-26336311@ua.fm>


> You will need to use some explicity shared memory, either from a mmap'd file 
> or
> a shm segment.  This will imply a custom memory allocator and custom 
> malloc()/
> free() - like functions.  But you will need to make python use this shared
> memory, and I have no idea if that is possible.

yes, there's shm module for py
I actually learned all about it before post to conference.
Problem with it - it provides file-like behaviour.
So I can use files as well (but without locking shm module provides).
But I have to store my data after each change.
Storing to file (or shm memory) mean pickle/unpickle.
While placing object in shared memory with direct access would save a lot of 
hassle.
So actually I was hoping someone will tell me how to allocate py object in 
apache 2.0 shared memory and attach that space to python interpreter address 
space (is such things are possible)
----

-> CTAPT -> http://start.alkar.net 
From jgardner at jonathangardner.net  Wed Jun 25 06:54:41 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <200306250654.42792.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:16, Gregory (Grisha) Trubetskoy wrote:
>
> http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html
>

This is the way to go in "1 1"'s case. I have been looking for a shared memory 
module for python for the longest time, and now I am happy that you pointed 
it out.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++amhWgwF3QvpWNwRAsKNAJ9B5+xcxzXKfgfUHcLd7qsCyEZWpgCdHec1
UF+Y027v3sEu547f+OvqPwQ=
=Qukb
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 06:58:45 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625043250.GS1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
Message-ID: <200306250658.46386.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:32, mod_python@mikebell.org wrote:
> On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> > I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> > Server, Oracle, or Sybase.
> >
> > So go start learning about databases, and how best to use them! ;-)
>
> Of course, some people prefer not to use a giant, bloated SQL database
> every time they need to store any sort of data. :-)
>

So don't use SQL Server, Oracle, Sybase or MySQL. Use PostgreSQL. ;-)

> If your data storage needs are a little less complicated and you're
> having trouble justifying SQL, try something like berkeley db or just
> the filesystem.

This is equally valid. My problem is that every time I get to start using one 
of these, it ends up with so much data that I should've gone with the 
database from the very beginning. If you *know* your data set is never going 
to get very large, then using files or Berkeley DB is a very, very good idea.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++aqVWgwF3QvpWNwRArz4AJ4s3bBs8sfTxBBY268ZdAa1eFNHIQCfTx6R
yKehz2nY6SKKDcowthMhC9c=
=BObc
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:01:12 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <200306250701.14900.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 23:58, 1 1 wrote:
> >>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> >> Server, Oracle, or Sybase.
> >>So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.
>

In this case, if you are just caching some data, just have the processes query 
the database and cache it once. Then you can just use the cache for every 
subsequent result. Or you can store it in the modules hard-coded, and just be 
very careful not to change it during the lifetime of the processes.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++asoWgwF3QvpWNwRAjlJAJ4rxu6qOQnTpg1FBdBRi4gCaZLSaACeLY4p
zNL5/N1kVTZx3tzYzjmV65A=
=JnBM
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:32:14 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <200306250732.15699.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I am thinking of implementing a shared memory module that does more than just 
"read" and "write". Instead, I want something more transparent to the 
developer, so that you say "Go get this dict at this shared memory key" or 
"Create a new dict in shared memory at this key", and have the entire dict 
available like a namespace.

Obvious applications would include the ever-present problem of shared data 
between apache mod_python processes. This would solve it once and for all. 
Perhaps one day we could get it working with RPC and have processes on 
seperate machines sharing data as well.

The scope of this project would be implimenting new types that derive from all 
of the basic types so that:

1) When accessing the data in the type, it would gain a lock on the shared 
memory segment that stores its data using a semaphore, read the data and 
unserialize it, then return that data.
2) When storing the data in that type, it would gain a lock on the shared 
memory segment, then store the data over the existing data.

I am thinking there are really two ways to go about this.
1) Implementing it all in Python. The idea here would be that we would 
serialize and unserialize the data using cPickle.
2) Implementing it all in C. The idea here is that we would reuse the same 
data structures that the basic data types use. We would store and read the 
binary data behind the basic data types so that they can be as easily stored 
in shared memory as they are stored in real memory.

Does anyone know if something like this is implemented or in the process of 
being implemented? Does anyone want to join me in this endeavor? 

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
/ID5Uq/oK8hAYQfmvvIGliE=
=4zo4
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 25 07:59:56 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <2147483647.1056527996@[10.0.1.2]>

--On 25 Wednesday, June 2003 09:58 +0300 1 1 <mod_py@ua.fm> wrote:

>>> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
>>> Server,  Oracle, or Sybase.
>>> So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.

Is there any reason why you haven't used the ZODB for this? With ZEO, 
you can access persistent values from multiple processes. As long as 
your application doesn't heavily write to the same objects, it should 
be just what you need (and has been tested and deployed in quite large 
environments.)

Here's an intro:
<http://www.amk.ca/zodb/zodb-zeo.html>

Here's where to get it:

<http://www.zope.org/Products/StandaloneZODB>

~mindlace
http://mindlace.net
From vlindberg at verio.net  Wed Jun 25 10:43:44 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <3EF9D140.6010108@verio.net>


>Does anyone know if something like this is implemented or in the process of 
>being implemented? Does anyone want to join me in this endeavor? 
>

I haven't used it, but I think that POSH is what you are looking for:

http://poshmodule.sourceforge.net/posh/html/

Not sure if it compatible with mod_python.  If it is, though, it sounds 
like exactly what everyone wants.

VanL

From jm at eemsystems.cjb.net  Wed Jun 25 13:04:20 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] value too large for PgNumeric
Message-ID: <1056564260.1950.176.camel@eemsystems.com>

this error:


File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
__init__
    raise OverflowError, "value too large for PgNumeric"



is produced by this query:

"""select  q1.Area,q1.Prop_disponibles,q1.MinCompra,q1.MaxCompra,q1.MinAlquiler,q1.MaxAlquiler from (select  areas.descripcion as Area,count(*) as Prop_disponibles,min(coalesce(prop.precio_venta,0)) as MinCompra,max(coalesce(prop.precio_venta,0)) as MaxCompra,min(coalesce(prop.precio_alquiler,0)) as MinAlquiler,max(coalesce(prop.precio_alquiler,0)) as MaxAlquiler from propiedades prop, tipo_de_propiedades tdp,Sectores sector,areas where prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id and sector.area_id = areas.area_id and prop.sector_area_id = sector.area_id and prop.sector_id = sector.sector_id and prop.propiedad_id in (select fot.propiedad_id from fotos fot where fot.propiedad_id = prop.propiedad_id) and current_date between prop.efectivo_desde and prop.efectivo_hasta and prop.activa = 'Y' and prop.tipo_de_propiedad_id=%s  group by areas.descripcion) as "q1"  order by q1.prop_disponibles desc limit 2;""" % (i[2])))


only for a few alternatives.


Any help? thanks.

jm


-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From mod_python at mikebell.org  Wed Jun 25 12:17:13 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306250658.46386.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
	<200306250658.46386.jgardner@jonathangardner.net>
Message-ID: <20030625191712.GU1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 06:58:45AM -0700, Jonathan Gardner wrote:
> This is equally valid. My problem is that every time I get to start using one 
> of these, it ends up with so much data that I should've gone with the 
> database from the very beginning. If you *know* your data set is never going 
> to get very large, then using files or Berkeley DB is a very, very good idea.

There's no reason not to use either one of those just because your
dataset is going to be large. Berkeley DB in particular is quite good.
You're not using SQL for the backend implementation, you're using it for
the front end, the query language which abstracts away the back end.
From mod_python at ols.inorganic.org  Thu Jun 26 01:04:02 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 21:53:39 2004
Subject: [mod_python] Using mod_python pythonauthenhandler with PSO
Message-ID: <20030626080402.GA6653@nag.inorganic.org>

Hey guys,

Anyone have any experience integrating mod_python with Python Service
Objects?

I've got a problem where if I'm dealing with an authenhandler, I end up
with an error message that says:
---
Mod_python error: "PythonLogHandler pso.modpython::cleanup"

Traceback (most recent call last):

  File
"/usr/local/Python/lib/python2.2/site-packages/mod_python/apache.py", line
332, in HandlerDispatch
    result = object(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/modpython.py",
line 36, in cleanup
    service.cleanup(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/service.py", line
52, in cleanup
    req.pso().close()

AttributeError: 'mp_request' object has no attribute 'pso'
---

I'm pretty sure this is related to authenhandler because if you then try to
access a resource under this directory -- which means that now you're not
going through authenhandler -- it works.


My script looks like this:

---
from mod_python import apache

def foo(req):
	try:
		req.pso().session['visits'] +=1
	except:
		req.pso().session['visits'] =1
	f = "Hello World!  ~ Your visit number: %(visits)d ~ Try Reload !" %  req.pso().session
	return f

def authenhandler(req):
	user = req.user
	pw = req.get_basic_auth_pw()

	if (user == "foo" and pw == "bar"):
		return apache.OK
	else:
		return apache.HTTP_UNAUTHORIZED
---

my .htaccess looks like this:
---
AddHandler python-program .py
PythonHandler mod_python.publisher
pythonauthenhandler quicktest
PythonFixupHandler pso.modpython::fixup
PythonLogHandler pso.modpython::cleanup
PythonDebug On
AuthType Basic
AuthName "Enter your email username and password"
require valid-user
---

To test this:
Go to http://www.inorganic.org/~rsr/python2/quicktest.py/foo
Authenticate with foo/bar
This should pause for a moment and then give you the error message.
If you hit 'reload,' you don't go through authenhandler (since you're
already authenticated) and you get the correct output.

Thoughts?

-roy


From rien at YEEPA.ORG  Thu Jun 26 10:36:08 2003
From: rien at YEEPA.ORG (Adrien Plisson)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] value too large for PgNumeric
References: <1056564260.1950.176.camel@eemsystems.com>
Message-ID: <3EFAB078.2080207@yeepa.org>

Julio Mendoza wrote:
> this error:
> 
> File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
> __init__
>     raise OverflowError, "value too large for PgNumeric"
> 
> is produced by this query:
>       ...
> only for a few alternatives.
 >
> Any help? thanks.

This exception seems to be thrown from PgSQL, so has nothing to do with mod_python.
It may surely tell you that you have to much result to be stored in a variable, 
causing an overflow. try decomposing your query to see which part is erroneous.

by the way, try to simplify your query: this does not seem to be efective...
	prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id
	and prop.tipo_de_propiedad_id=%s
this too...
	prop.propiedad_id in (
			select
				fot.propiedad_id
			from
				fotos fot
			where
				fot.propiedad_id = prop.propiedad_id
		)


-- 
rien

From azaroth at liverpool.ac.uk  Thu Jun 26 13:40:03 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030624140701.M38636@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>


> > Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> > Redhat RPM.
> 2.0.40 is a version of Apache a few major releases and almost a year
> behind...
> Connection support in 3.0.1 is very immature, you should really upgrade to
> apache 2.0.46 and mod_python 3.0.3.

Having upgraded my trivial port checking code works fine. Thanks :)

However, the connection object is a little too high level ... are there 
plans for implementing a lower level 'socket' like interface, rather than 
a blocking line or character reader?  The mod_perl module has this sort of 
interface for example (AFAICT)

For example, I need to be able to consume all of the data currently 
waiting into one chunk to process ... which may or may not end in a 
linebreak character, can be of arbitrary length and the connection 
doesn't close after sending.  So I can't use either read() or readline(), 
with or without arguments :/

In particular, I'm looking at the possibility of handling Z39.50 
connections, which has messages sent in a binary encoded form to be 
decoded using rules in ASN1 and BER.

Cheers,

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I

From gstein at lyra.org  Thu Jun 26 11:36:42 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <20030626183642.GB5652@lyra.org>

APR has facilities to do shared memory in a portable fashion; APR is part of
Apache 2.0, so there isn't much reason to go grab any other library.

You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
shared memory segments. The problem is that a shared memory segment could be
mapped to different addresses in different processes. Thus, you want to hold
onto offsets into a shared memory segment. apr_rmm.h helps with managing
these subblocks and working with offsets rather than direct pointers. Note
that apr_rmm also handles locking so that you can have multiple processes
allocating (simultaneously) from a shared mem segment.

You can then layer additional Python facilities on top of this substrate.

Cheers,
-g

On Wed, Jun 25, 2003 at 07:32:14AM -0700, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> I am thinking of implementing a shared memory module that does more than just 
> "read" and "write". Instead, I want something more transparent to the 
> developer, so that you say "Go get this dict at this shared memory key" or 
> "Create a new dict in shared memory at this key", and have the entire dict 
> available like a namespace.
> 
> Obvious applications would include the ever-present problem of shared data 
> between apache mod_python processes. This would solve it once and for all. 
> Perhaps one day we could get it working with RPC and have processes on 
> seperate machines sharing data as well.
> 
> The scope of this project would be implimenting new types that derive from all 
> of the basic types so that:
> 
> 1) When accessing the data in the type, it would gain a lock on the shared 
> memory segment that stores its data using a semaphore, read the data and 
> unserialize it, then return that data.
> 2) When storing the data in that type, it would gain a lock on the shared 
> memory segment, then store the data over the existing data.
> 
> I am thinking there are really two ways to go about this.
> 1) Implementing it all in Python. The idea here would be that we would 
> serialize and unserialize the data using cPickle.
> 2) Implementing it all in C. The idea here is that we would reuse the same 
> data structures that the basic data types use. We would store and read the 
> binary data behind the basic data types so that they can be as easily stored 
> in shared memory as they are stored in real memory.
> 
> Does anyone know if something like this is implemented or in the process of 
> being implemented? Does anyone want to join me in this endeavor? 
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
> /ID5Uq/oK8hAYQfmvvIGliE=
> =4zo4
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Thu Jun 26 11:45:57 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626183642.GB5652@lyra.org>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
Message-ID: <200306261145.59286.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 26 June 2003 11:36, Greg Stein wrote:
> APR has facilities to do shared memory in a portable fashion; APR is part
> of Apache 2.0, so there isn't much reason to go grab any other library.
>
> You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
> shared memory segments. The problem is that a shared memory segment could
> be mapped to different addresses in different processes. Thus, you want to
> hold onto offsets into a shared memory segment. apr_rmm.h helps with
> managing these subblocks and working with offsets rather than direct
> pointers. Note that apr_rmm also handles locking so that you can have
> multiple processes allocating (simultaneously) from a shared mem segment.
>
> You can then layer additional Python facilities on top of this substrate.
>

The python facility would be something like POSH.

So, based on this new information, the project scope would now become:

1) Expand POSH so that it can use shared objects that were shared by a foreign 
process (provided with some information on which shared memory segment they 
are using)

2) Integrate POSH with mod_python and APR.

The problem I see now: How to communicate between all of the processes that 
there are shared objects available, and detail where those shared objects 
are? I don't think it is possible to create shared objects via mod_python 
before the processes are seperated. Even if it was, is it possible to 
transfer references to those shared objects to each process?

The only solution I see right now is to have some central repository that any 
process can access and declare the existence of shared objects, their 
location, and whatever else is needed. Other processes can read the 
repository and find currently existing shared objects by a unique string.

The exact nature of the repository isn't important. It could be a bit of 
shared memory in a special location, a file, a Berkely DB, or even something 
more exotic. The point is that the processes can declare new shares, or find 
existing shares by a unique identifier.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++z9mWgwF3QvpWNwRAmawAKDDzpi9kOyIu88CZaCxVTsCqYQ1uwCgymzr
n6NkA9YggvsuqJcdzmnzpdc=
=rHuV
-----END PGP SIGNATURE-----

From vlindberg at verio.net  Thu Jun 26 14:44:24 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306261145.59286.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
	<200306261145.59286.jgardner@jonathangardner.net>
Message-ID: <3EFB5B28.2010103@verio.net>

Jonathan Gardner wrote:

> The problem I see now: How to communicate between all of the processes 
> that
>
>there are shared objects available, and detail where those shared objects 
>are? I don't think it is possible to create shared objects via mod_python 
>before the processes are seperated. Even if it was, is it possible to 
>transfer references to those shared objects to each process?
>
>The only solution I see right now is to have some central repository that any 
>process can access and declare the existence of shared objects, their 
>location, and whatever else is needed. Other processes can read the 
>repository and find currently existing shared objects by a unique string.
>

I think that the nicest solution (in terms of API, at least) would be to 
have an explicit namespace that is instantiated when mod_python is first 
loaded.  Applications could then access this shared namespace by 
importing it; anything declared in the namespace would be automatically 
shared.

For example.

[in code_run from mod_python]

from mod_python import apache.shared as shared

shared.myvar = 'something here'

if not hasattr(shared, 'anothervar'): shared.anothervar = 'something else'

it could be an option declared in the httpd.conf, optionally specifying 
a type of backing store:

<PythonOption shared-memory> # just uses a piece of memory
or
<PythonOption shared-memory mmapstorage file="shared.dat">
or
<PythonOption shared-memory berkeleystorage file="shared.db">
or
<PythonOption shared-memory zodbstorage file="shared.zodb">

VanL

From jack_diederich at email.com  Thu Jun 26 18:58:25 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <20030626235825.19765.qmail@email.com>

From: VanL <vlindberg@verio.net>
> I think that the nicest solution (in terms of API, at least) would be to 
> have an explicit namespace that is instantiated when mod_python is first 
> loaded.  Applications could then access this shared namespace by 
> importing it; anything declared in the namespace would be automatically 
> shared.
> 
> For example.
> from mod_python import apache.shared as shared
> 
> shared.myvar = 'something here'
> 

In the future setting variables in other module spaces may be
outlawed in python.  Treating modules like classes/objects
is also strongly discouraged.

I think your use of dicts is dead on, something like:
def do_calc():
  cache = mod_python.shared
  if ('foo' not in cache):
    cache['foo'] = 'bar'
  return cache['foo']

As I mentioned during the long thread on what frameworks
should do, we could add two dicts to mod_python,
mod_python.page_cache # caching dict created per-request
mod_python.perm_cache # cache valid accross all processes for ever

perm_cache could actually lie and just keep the last X least
recently used entries, but the main idea is that it is long
lasting and valid accross all processes.  An intermediate
mod_python.proc_cache that is similarly 'permenent' for the
life of the process, but only caches values locally to the
current process might be useful in a pure-forking server
because it doesn't have to worry about locking.  If you are
threading you have to do locking anyway, so perm_cache is
more useful.

-jack


-- 
__________________________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From ronwalf at wam.umd.edu  Thu Jun 26 21:53:00 2003
From: ronwalf at wam.umd.edu (Ron Alford)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Disabling restricted execution mode?
Message-ID: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>

Is there a way of disabling restricted user mode in mod_python 2.7.x?  
I'm using some third party libraries, and the rexec seems to be getting in 
the way without any tangible benefits.

Thanks,
-Ron

--
Ron Alford, KB0NUV
http://volus.net/~ronwalf


From mmckerns at its.caltech.edu  Thu Jun 26 20:31:36 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] I don't understand this error
Message-ID: <Pine.GSO.4.44.0306262030220.2262-100000@sue>

I think the error here has something to do with PyXML or 4Suite, so
this probably isn't an error caused by mod_python, but I don't know
where else to try.  I tried the Python XML-SIG list, and I was told
that this is a common error, and I should ask here.  So here I am...
Anyone recognize this error?

----- Begin Forwarded Message -----
I'm working on a distributed computing project, and I'm trying to
port the server we built to another computer.  On the current server,
our this test code works -- on the new machine it fails...
Apache tests pass, & mod_python tests pass. I get failures on some of
the 4Suite tests.  Any help or advice I can get is greatly appreciated.
Thanks.



OS/BUILD INFO: (NEW)			(OLD)
---------------------------------------------
Red Hat Linux 8.0 3.2-7			Red Hat Linux 7.1 2.96-85
Python 2.2.2-7				Python 2.2.1
PyXML 0.8.2 (without xslt & xpath)      PyXML 0.8.0 (with xslt & xpath)
4Suite 1.0a1				4Suite 0.10.1-1
httpd 2.0.40-11.5			apache 1.3.22-5.7.1
mod_python 3.0.3			mod_python 2.7.1-1
pycrypto 1.9a6				pycrypto 1.9a3
xmlrpclib 1.0.1				xmlrpclib 1.0.1
jonpy 0.05				jonpy 0.04
---------------------------------------------



TEST CODE:
---------------------------------------------
#! /usr/bin/env python
#################################
# pyweb.py
# testing python web handler
#################################

import jon.session as session
import jon.cgi
import jon.modpy as modpy
import xmlrpclib
import sys

# without the next line, this test works.
from xml.dom.ext.reader.Sax2 import FromXml

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK
---------------------------------------------



CHANGES TO HTTPD.CONF
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------



ERRORS PRODUCED:
---------------------------------------------
Mod_python error: "PythonHandler pyweb"

Traceback (most recent call last):

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 320,
in HandlerDispatch
    module = import_module(module_name, config)

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 499,
in import_module
    module = imp.load_module(mname, f, p, d)

  File "/home/mmckerns/public_html/pyweb.py", line 9, in ?
    from xml.dom.ext.reader.Sax2 import FromXml

  File "/usr/lib/python2.2/site-packages/_xmlplus/dom/ext/reader/__init__.py",
line 21, in ?
    encoder = codecs.lookup("utf-8")[0] # encode,decode,reader,writer

  File "/var/tmp/python-2.2.2-root/usr/lib/python2.2/encodings/__init__.py",
line 51, in search_function

RuntimeError: cannot unmarshal code objects in restricted execution mode
---------------------------------------------



Please speak slowly, so even I can understand...
I'm Mat.Sci., not Comp.Sci.

---

Mike McKerns
Caltech Materials Science
mmckerns@caltech.edu




From big.stick at bol.com.br  Fri Jun 27 01:09:50 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] I don't understand this error
In-Reply-To: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
References: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
Message-ID: <1595782234.20030627010950@bol.com.br>

Friday, June 27, 2003, 12:31:36 AM, you wrote:

MM> (...) Anyone recognize this error? (...)
MM> RuntimeError: cannot  unmarshal code objects in restricted
MM> execution mode 

I got the same error when using Python 2.2.2 and I was told it was
related to a 'codec registry and Python embedding problem'. It seems
that it's fixed on Python 2.3.

HTH

-- stick


From grisha at modpython.org  Fri Jun 27 00:40:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030627003659.B86123@onyx.ispol.com>



On Thu, 26 Jun 2003, Robert Sanderson wrote:

> However, the connection object is a little too high level ... are there
> plans for implementing a lower level 'socket' like interface, rather than
> a blocking line or character reader?  The mod_perl module has this sort of
> interface for example (AFAICT)
>
> For example, I need to be able to consume all of the data currently
> waiting into one chunk to process ... which may or may not end in a
> linebreak character, can be of arbitrary length and the connection
> doesn't close after sending.  So I can't use either read() or readline(),
> with or without arguments :/

I'm curious what mod_perl folks are doing, I haven't looked at it.

Unless I'm mising something, the only way you can deal with this kind of
data is read a character at a time.

(Or non-blocking IO, but off the top of my head I don't even know if
Apache supports it)

Grisha
From grisha at modpython.org  Fri Jun 27 00:48:00 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Disabling restricted execution mode?
In-Reply-To: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
References: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
Message-ID: <20030627004441.G86123@onyx.ispol.com>


Appearance of restricted mode is a bug - mod_python doesn't use restricted
mode, but it appears this way because the way Python knows that we're
running in restricted mode is by comparing frame pointers (iirc), and they
happen to be different sometimes (but I don't remember now exactly why).

I think if you upgrade to a newer version of Python it will go away.

Grisha

On Thu, 26 Jun 2003, Ron Alford wrote:

> Is there a way of disabling restricted user mode in mod_python 2.7.x?
> I'm using some third party libraries, and the rexec seems to be getting in
> the way without any tangible benefits.
>
> Thanks,
> -Ron
>
> --
> Ron Alford, KB0NUV
> http://volus.net/~ronwalf
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From vlindberg at verio.net  Fri Jun 27 09:02:51 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626235825.19765.qmail@email.com>
References: <20030626235825.19765.qmail@email.com>
Message-ID: <3EFC5C9B.6060703@verio.net>

Jack Diederich wrote:

> In the future setting variables in other module spaces may be
>
>outlawed in python.  Treating modules like classes/objects
>is also strongly discouraged.
>

Hmm. But who said that "shared" had to be a module?  It could just as 
easily be an instantiation of a class that is instantiated when 
mod_python starts.  That might actually make more sense, as someone 
implementing a shared module would only need to override the __getattr__ 
and __setattr__ hooks.

For example, in the mod_python initialization:

if options.has_key('shared-memory'):
    global shared
    shared = sharedmemoryimplementation()

The rest of the code I provided when then work unchanged.  It doesn't 
have to be a module, just a *namespace*.

>mod_python.page_cache # caching dict created per-request
>mod_python.perm_cache # cache valid accross all processes for ever
>

This is a good idea.  +1.

VanL

From azaroth at liverpool.ac.uk  Mon Jun 30 14:14:45 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030627003659.B86123@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>

On Fri, 27 Jun 2003, Gregory (Grisha) Trubetskoy wrote:
> On Thu, 26 Jun 2003, Robert Sanderson wrote:

> > However, the connection object is a little too high level ... are there
> > plans for implementing a lower level 'socket' like interface, rather than
> > a blocking line or character reader?  The mod_perl module has this sort of
> > interface for example (AFAICT)
> > For example, I need to be able to consume all of the data currently
> > waiting into one chunk to process ... which may or may not end in a

> I'm curious what mod_perl folks are doing, I haven't looked at it.

I'm by no means an expert, in fact I've only just started looking at the 
connection handling stuff in Apache, but:

http://perl.apache.org/docs/2.0/api/Apache/Filter.html#Streaming_Filter_API

Read
  $f->read(my $buffer, $read_len);
Reads at most $read_len characters into $buffer. It returns a true value 
as long as it had something to read, and a false value otherwise.


> Unless I'm mising something, the only way you can deal with this kind of
> data is read a character at a time.
> (Or non-blocking IO, but off the top of my head I don't even know if
> Apache supports it)

There's a flag: APR_NONBLOCK_READ that can be passed to apr_bucket_read()

Have a look at:
  http://www-106.ibm.com/developerworks/linux/library/l-apache/
for example  (Which uses mod_python as an example :) )

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Mon Jun 30 09:42:13 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030630092522.B53253@onyx.ispol.com>



On Mon, 30 Jun 2003, Robert Sanderson wrote:

> Read
>   $f->read(my $buffer, $read_len);
> Reads at most $read_len characters into $buffer. It returns a true value
> as long as it had something to read, and a false value otherwise.

This looks like a filter read, mod_python's behaves in the same way. But
filter semantics are different, because filters aren't called unless there
is something to read.

I know that there is the APR_NONBLOCK_READ flag, but it isn't very useful,
since it would mean that your program would have to read in a loop wasting
cpu time until it has what it needs.

The normal way of dealing with this sort of thing is by calling select()
on a socket which will then call your function when there is anything to
read. I don't know whether APR provides this.

I think your only option is to read a byte at a time, making sure that
when you receivie a complete frame/packet/whatever you stop reading so as
to not block indefinitely.

Grisha

From michael.medland at acterna.com  Mon Jun 30 17:01:49 2003
From: michael.medland at acterna.com (Michael Medland)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] Mod_python xml parsing problem
Message-ID: <OF783867B1.3D0B6EBD-ONC1256D55.00574BE1-80256D55.005D62D6@eng.eni.wago.de>

Hi, I am currently using Python 2.2.3, apache 1.3.27 and mod_python 2.7.8. 
Under Solaris 8 on a sun.
The configuration appears to be working fine but, the problem that i am 
having is in parsing xml files, when i do for example:

xmlfile = minidom.parse(file)
root = xmlfile.childNodes

It creates a dom instance but it contains nothing at all, and root returns 
a 'nonetype'. I believe that it may be an encoding problem but i dont know 
how to fix it.
When i tried the same code using cgi instead of mod_python it worked fine.
Any suggestions would be greatly appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/29604ed9/attachment-0001.htm
From jakubec at san.rr.com  Mon Jun 30 21:06:36 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 21:53:40 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001801c33f86$2d84a0a0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.
-dj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/94a11f98/attachment-0001.htm
From rey4 at columbia.edu  Sun Jun  1 17:27:33 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <bbdqu2$cog$1@main.gmane.org>

Hi, I'm trying to get write a multithreaded script to run under mod_python
and apache 1.3 on linux, but the script seems to just freeze up at the point
of thread creation leaving the http connection open but not doing anything
else.

I isolated the problem in a little test script:

-- begin mptest.py --
from mod_python import apache

def handler(req):
  w = Worker(req)
  req.write("Starting thread...\n")
  w.start()
  req.write("Joining thread...\n")
  w.join()
  req.write("Done.\n")
  return apache.OK

import threading

class Worker(threading.Thread):
  def __init__(self, req):
    self.req = req
    threading.Thread.__init__(self)

  def run(self):
    self.req.write("  Hello from thread!\n")
-- end mptest.py --

-- begin .htaccess --
AddHandler python-program .py
PythonHandler mptest
PythonDebug On
-- end .htaccess --

The script runs fine on a windows box running Apache 2.0.46, Mod_Python
3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
1.3.27, Mod_Python 2.7.8, and Python 2.2.2.

The place where it seems to freeze is at w.start(). If you comment that line
out, it does complete execution. Is this problem a bug in mod_python, or
have I done something wrong?

- Russ



From daniel at copyleft.no  Sun Jun  1 23:39:27 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
In-Reply-To: <bbdqu2$cog$1@main.gmane.org>
Message-ID: <20030601233903.P58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hi, I'm trying to get write a multithreaded script to run under mod_python
> and apache 1.3 on linux, but the script seems to just freeze up at the point
> of thread creation leaving the http connection open but not doing anything
> else.

Apache 1.3 doesn't support threading. So neither does mod_python when combined
with it. Upgrade Apache.

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 18:39:25 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
References: <bbdqu2$cog$1@main.gmane.org>
	<20030601233903.P58312-100000@unity.copyleft.no>
Message-ID: <bbdv4s$4ar$1@main.gmane.org>

Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
calling Thread.start() in an apache process would cause it to lock up. I'm
trying to add mod_python support to an open source project (ViewCVS) and I'd
like to avoid making apache 2 a requirement for it, although I will try
upgrading apache on my own server. Any more information on mod_python 2.x
and threading would be much appreciated.

- Russ


Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Hi, I'm trying to get write a multithreaded script to run under
>> mod_python and apache 1.3 on linux, but the script seems to just
>> freeze up at the point of thread creation leaving the http
>> connection open but not doing anything else.
>
> Apache 1.3 doesn't support threading. So neither does mod_python when
> combined with it. Upgrade Apache.
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 00:55:11 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbdv4s$4ar$1@main.gmane.org>
Message-ID: <20030602005124.I58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
> calling Thread.start() in an apache process would cause it to lock up. I'm
> trying to add mod_python support to an open source project (ViewCVS) and I'd
> like to avoid making apache 2 a requirement for it, although I will try
> upgrading apache on my own server. Any more information on mod_python 2.x
> and threading would be much appreciated.

Apache 1.3 is not threadsafe. In my experience, it will crash when it's linked
to the threading libs - which is what happens if you load a threaded version of
mod_python.

I've always had to build a separate python without threading support, for use
with mod_python, when I want to use Apache 1.3.

This is probably what you've done too, or the system has done for you (or the
guy who made the binaries did). Loading "threading" in Python when Python is
built without threading support might lock it up - that could be what you're
seeing.

Either way, you will have to switch to Apache 2.0 if you want to use threading
with mod_python. This is the nature of mod_python. :)

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 19:58:30 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
References: <bbdv4s$4ar$1@main.gmane.org>
	<20030602005124.I58312-100000@unity.copyleft.no>
Message-ID: <bbe3pa$r2b$1@main.gmane.org>

Hey, thanks for your help. I installed apache 2 and everything began to
work! I still don't understand the behavior with apache 1.3. The fact that
apache code is not threadsafe doesn't explain why threading.Thread.start()
(which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
one version of python installed on my system and it does support threading.
Oh well, hopefully apache 1.3 will go away soon.

- Russ

Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Apache 1.3 doesn't _use_ threading, but this doesn't explain why
>> merely calling Thread.start() in an apache process would cause it to
>> lock up. I'm trying to add mod_python support to an open source
>> project (ViewCVS) and I'd like to avoid making apache 2 a
>> requirement for it, although I will try upgrading apache on my own
>> server. Any more information on mod_python 2.x and threading would
>> be much appreciated.
>
> Apache 1.3 is not threadsafe. In my experience, it will crash when
> it's linked to the threading libs - which is what happens if you load
> a threaded version of mod_python.
>
> I've always had to build a separate python without threading support,
> for use with mod_python, when I want to use Apache 1.3.
>
> This is probably what you've done too, or the system has done for you
> (or the guy who made the binaries did). Loading "threading" in Python
> when Python is built without threading support might lock it up -
> that could be what you're seeing.
>
> Either way, you will have to switch to Apache 2.0 if you want to use
> threading with mod_python. This is the nature of mod_python. :)
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 02:13:06 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbe3pa$r2b$1@main.gmane.org>
Message-ID: <20030602020851.V58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hey, thanks for your help. I installed apache 2 and everything began to
> work! I still don't understand the behavior with apache 1.3. The fact that
> apache code is not threadsafe doesn't explain why threading.Thread.start()
> (which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
> one version of python installed on my system and it does support threading.
> Oh well, hopefully apache 1.3 will go away soon.

Well, things are set up differently on different systems, I have experience
with OpenBSD and FreeBSD. If I tried to do what you did, I would have ended up
in one of two situations:

1) If I used a threaded Python for my mod_python, and attempted to load
mod_python in apache, I would get error messages about unresolved symbols
belonging to libpt. Since obviously, Apache isn't linked against that library.

2) If I used an unthreaded version, I would be able to load things and get
going, but I'd get undefined behaviour if I tried to use threading in my python
script, since the python binary doesn't support the calls the threading module
needs. This is probably what's happening to you.

-- Daniel

From fraser at wehave.net  Sun Jun  1 21:48:46 2003
From: fraser at wehave.net (Fraser Campbell)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Urgent Help Needed
In-Reply-To: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
References: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
Message-ID: <200306012148.46546.fraser@wehave.net>

On May 27, 2003 11:18 pm, Graeme Matthew wrote:

> Does anyone know where one can get a mod_python binary install for linux
> just like the one that exists for Windows as I cannot afford to spend my 2
> coding days trying to get mod_python working, if there is no such file then
> thats fine, ill forget it all together.

This reply is very late, very off-topic and wouldn't have helped you given 
your time constraints anyway but ... my apologies if anyone is offended.

Try Debian, 8000+ packages installable (python 2.1 is default but 1.5 and 2.2 
are available), runs on 11 architectures, will likely (sooner or later) 
support multiple kernels (linux, hurd and a few BSDs).  Anyway, once Debian 
is running type "apt-get install libapache-mod-python" and you're done.

Debian is stable as a rock which means you don't often get upgrades, it's not 
for everyone.  OTOH, running apache 1.3.26 with mod_python 2.7.8 makes me 
quite happy considering the recurring security issues with apache2.

-- 
Fraser Campbell <fraser@wehave.net>                 http://www.wehave.net/
Halton Hills, Ontario, Canada                                 Debian GNU/Linux

From mike.looijmans at asml.com  Mon Jun  2 07:40:29 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <01c328c9$79974480$926a1e6e@wsasd464>

Probably, the freeze is because apache 1.3 doesn't support threading.

I guess the same applies to the "req" object as most GUIs: Only access the
Request object from the thread that created it. It might work if you make the
thread object like this:

    def run(self):
        self.result = "Hello from thread!\n"

then after the join, use "req.write(w.result)" to output the result from the
thread.

Solution would be to remove the threading, since it is useless in a HTTP
server anyway. The client has to wait for the data to be sent back anyway. If
you want to use another handler for parts of the message, just send the client
a "304" (redirect) response, or (if you feel like having fun) send a HTTP
request to your own HTTP server, which will use another process or thread to
handle it.

I use HTTP client connections inside the HTTP server on our replication server
(which acts as a sort of 'proxy': work on a replication slave of the MySQL
master database and also caches files) to fetch files from the master server.

--
Mike Looijmans

-----Original Message-----
From: Russell Yanofsky <rey4@columbia.edu>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Sunday, June 01, 2003 11:34 PM
Subject: [mod_python] Mod_Python 2.7.8 and threading


>Hi, I'm trying to get write a multithreaded script to run under mod_python
>and apache 1.3 on linux, but the script seems to just freeze up at the point
>of thread creation leaving the http connection open but not doing anything
>else.
>
>I isolated the problem in a little test script:
>
>-- begin mptest.py --
>from mod_python import apache
>
>def handler(req):
>  w = Worker(req)
>  req.write("Starting thread...\n")
>  w.start()
>  req.write("Joining thread...\n")
>  w.join()
>  req.write("Done.\n")
>  return apache.OK
>
>import threading
>
>class Worker(threading.Thread):
>  def __init__(self, req):
>    self.req = req
>    threading.Thread.__init__(self)
>
>  def run(self):
>    self.req.write("  Hello from thread!\n")
>-- end mptest.py --
>
>-- begin .htaccess --
>AddHandler python-program .py
>PythonHandler mptest
>PythonDebug On
>-- end .htaccess --
>
>The script runs fine on a windows box running Apache 2.0.46, Mod_Python
>3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
>1.3.27, Mod_Python 2.7.8, and Python 2.2.2.
>
>The place where it seems to freeze is at w.start(). If you comment that line
>out, it does complete execution. Is this problem a bug in mod_python, or
>have I done something wrong?
>
>- Russ
>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From jorge.lopez at scati.com  Mon Jun  2 10:50:46 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] Troubles of Memory
Message-ID: <5.1.0.14.0.20030602091426.00b344c8@pop3.scati.com>

Hello:
I labor in a company from Spain and I'm having troubles of memory when I 
use mod_python.
I'm get time of remote computer using 'sockets'. Looking at Task Admin of 
Windows, I observe that 'Memory Use' augment every time until my computer die.
Script tries to connect socket and sends a request of time. Then, socket 
receives time.
Code is:

def getTime(host):
     t = "Error"
     try:
         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         s.connect((host,8000))
         s.send('DAMELAAHORA\0')
         t = receive(s,15)
     finally:
         if s != None:
             s.close()
         return t

def receive(socket, size):
     buffer=''
     while size != 0:
         data = socket.recv(size)
         buffer += data
         size = size-len(data)
     return buffer

I write this 'time' in a file XML. Then, page HTML loads this file with 
JavaScript every second.
I use Window 2000 with Apache 2.0.44,  mod_python 3.0.1 and Python 2.2.2.
I wait for your answer
Thanks 



From tohmas.ash at takashi.zzn.com  Mon Jun  2 17:11:34 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <7ECE174E8B55C774D902B465F5258462@tohmas.ash.takashi.zzn.com>

Hi, it's again me with some php-to-mod_python problems :)

I use some 'forms' and went a user put some html tags into inputs that
put my html pages in a big mess...

like in my last query, in know how to stop this problem in php with
the fonction 'htmlentities' but I didn't found something like that for
mod_python.

sorry to compare all the time this two scritp language, the cause it's
just my personnal experience...

thanks in advance for your answers

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From dustin at ywlcs.org  Mon Jun  2 11:02:29 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <20030602160229.GJ26794@eleanor.internal.ywlcs.org>

On Mon, Jun 02, 2003 at 05:11:34PM +0200, tohmas ash wrote:
> Hi, it's again me with some php-to-mod_python problems :)
> 
> I use some 'forms' and went a user put some html tags into inputs that
> put my html pages in a big mess...
> 
> like in my last query, in know how to stop this problem in php with
> the fonction 'htmlentities' but I didn't found something like that for
> mod_python.

If you import the Python cgi module (don't use its FormData class!!), it has
a function 'escape' which does what you'd like.

Perhaps this is a candidate for inclusion in mod_python's utils module?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jorge.lopez at scati.com  Tue Jun  3 15:57:27 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] How Free Memory?
Message-ID: <5.1.0.14.0.20030603153817.00b73c08@pop3.scati.com>

Hello:
I try this simple code:

	from mod_python import apache
	def handler(req):
		req.write("Hello World!\n")
		return apache.OK

My Apache's configuration is:

	<Directory "C:/Archivos de programa/Apache Group/Apache2/htdocs/python/">
		AddHandler python-program .py
		PythonHandler mptest
		PythonDebug On
	</Directory>

Well, I open the page 'http://localhost/python/mptest.py' and, of course, I 
see 'Hello World' at screen.
Then, I press down F5 (to update) and hold down the key. I observe 'Admin 
Task' and use of memory is increasing!!!
Process is named 'Apache' always continues growing. I close navigator and 
memory isn't freed.
How can I free this memory?
Thanks.

I use: Apache 2.0.44, Python 2.2.2, mod_python 3.0



From i at mindlace.net  Tue Jun  3 14:38:19 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] PythonTransHandler contract requirements?
Message-ID: <2147483647.1054651099@[10.0.1.2]>

Hello,

I'm trying to implement a transhandler, but I cannot figure out what I am 
supposed to provide apache to allow it to continue handling the request. 
Documentation pointers gratefully accepted.

Given a path, I want to provide a handler for the request.

My simplistic translation handler is like so:

def transhandler(req):
    # First check if we're configured to handle this request.
    checkHandle(req)
    root = req.document_root()
    raw_filename = path.join(root,req.uri)
    raw_fileparts = path.split(raw_filename)
    if path.exists(raw_filename):
       if raw_filename[-3:] != '.py':
           raise apache.SERVER_RETURN, apache.DECLINED
       else:
           req.filename=raw_fileparts[0]
           req.modpath=raw_fileparts[0]
           sys.path.append(raw_filename)
           req.add_handler("PythonHandler",raw_fileparts[1][-3:])
           return apache.OK
    raise apache.SERVER_RETURN, apache.DECLINED

And the handler at the location in question:

def handler(req):
    req.write(body % "Ni!")
    return apache.OK

What I get back is the raw text of the module containing the handler.

~mindlace
http://mindlace.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20030603/ca478f73/attachment-0002.bin
From dustin at ywlcs.org  Tue Jun  3 17:24:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] PythonTransHandler contract requirements?
In-Reply-To: <2147483647.1054651099@[10.0.1.2]>
References: <2147483647.1054651099@[10.0.1.2]>
Message-ID: <20030603222413.GO26794@eleanor.internal.ywlcs.org>

You need to set req.filename to a file that actually exists; since you're
using a PythonHandler, it shouldn't really matter which file you choose, so
it's safe to just point it at your script (__FILE__) or some other
known-present file.

I hope that answers your query.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From tohmas.ash at takashi.zzn.com  Wed Jun  4 10:14:24 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <38B29A4DEB2D9224F8B77AE85C18B633@tohmas.ash.takashi.zzn.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030604/5389ae9a/attachment-0002.htm
From ireneponti at yahoo.com  Thu Jun  5 10:51:29 2003
From: ireneponti at yahoo.com (Irene Ponti)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <20030605175129.58563.qmail@web40703.mail.yahoo.com>

Hi to all

I have to put into a SQL database the content of some
variables coming from an Internet form.

If this variables have some caracters as ' or "
inside, the sql server return an error because the
query is not in correct sintax.

Now in php exist a standard function that add slashes
in front of ' or " in a variable and another that
remove slashes.

Is there in python a function like this?

Thank you.

__________________________________
Do you Yahoo!?
Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
http://calendar.yahoo.com
From mod_python at ols.inorganic.org  Thu Jun  5 11:12:50 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
References: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
Message-ID: <20030605181249.GA3360@nag.inorganic.org>

On Thu, Jun 05, 2003 at 10:51:29AM -0700, Irene Ponti wrote:
> I have to put into a SQL database the content of some
> variables coming from an Internet form.
> 
> If this variables have some caracters as ' or "
> inside, the sql server return an error because the
> query is not in correct sintax.
> 
> Now in php exist a standard function that add slashes
> in front of ' or " in a variable and another that
> remove slashes.
> 
> Is there in python a function like this?

Yes.
No.
Maybe.

How are you accessing the database?

I'm using MySQLdb; I just confirmed that it automatically adds the
proper escapist magic to make this stuff just plain work.

I'm guessing that, depending on the module you're using to access the
database, it may offer the proper mechanisms (much like in Perl's
DBD/DBI, there's a database-specific way to escape strings).

-roy
From tohmas.ash at takashi.zzn.com  Thu Jun  5 22:48:58 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <B27DD9D06BE5D18419F9663B09169141@tohmas.ash.takashi.zzn.com>

I use posgresql and had this problem, I solve it with the 'remplace'
fonction on the string module.
(cf http://python.org/doc/current/lib/module-string.html)

remplace(string "'", "\'")

but maybe there is a more simple fonction for do that...

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From rien at yeepa.org  Thu Jun  5 23:08:14 2003
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 22:00:04 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <3EDFB13E.8010305@yeepa.org>

Irene Ponti wrote:
 > Now in php exist a standard function that add slashes
 > in front of ' or " in a variable and another that
 > remove slashes.
 >
 >Is there in python a function like this?

Hi Irene,

you have 2 choices:
- string objects in python offers a replace() member.
   so you can write:
	query = """a string with 'quotes' and "doublequotes" """
  	new_query = query.replace('"', '\\"')	

- the re module allows for regular expression searching and replacement
   but this mail is far too short too explain regular expression.
   just have a look at the python manuals (chapter 4.2 of the library
   reference).

Just beware that '\' is a special character inside python string:
"\\'" is totally different from "\'". the first form describe a 
backslash preceding a single quote character, the second describe a 
string which only contains a single quote. idem for double quotes.

 > Thank you.
you're welcome...

-- 
rien

From neel at mediapulse.com  Thu Jun  5 18:59:06 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>

I'm surprised no one has mentioned this yet, but you really need to be
using placeholders with the cursor; otherwise you are writing
exploitable code.

Consider this:

C.execute("SELECT name FROM users WHERE user_id='" +
cgi_submitted_userid + "'")

Now I send my userid as "hackyou'; DELETE FROM users --"

You get:

SELECT name FROM users WHERE user_id='hackyou'; DELETE FROM users --'

Not good (MySQL seperates stmts with ;'s, other DBs do it differently
but we'll leave that as an exersice for the reader.  The -- comments out
the rest of the line).  So you do a addSlash to userid and get:

SELECT name FROM users WHERE user_id='hackyou\'; DELETE FROM users --'

Okay if you're MySQL, MSSQL escapes a ' as ''.  
But we have a good hacker, so he tries userid as "hackyou\'; DELETE FROM
users --"

SELECT name FROM users WHERE user_id='hackyou\\'; DELETE FROM users --'

Doh!

But, if we do this:

C.execute("SELECT name FROM users WHERE
user_id=%s",(cgi_submitted_userid,) )

The query is sent seperatly from the data, so the server can handle
anything it's own way correctly (i.e. MySQL will use a \', MS SQL will
use a '').  And you don't have to think about it.  Simpler and safer.

Mike

From mod_python at ols.inorganic.org  Thu Jun  5 16:18:07 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
Message-ID: <20030605231807.GC6513@nag.inorganic.org>

On Thu, Jun 05, 2003 at 06:59:06PM -0400, Michael C. Neel wrote:
> I'm surprised no one has mentioned this yet, but you really need to be
> using placeholders with the cursor; otherwise you are writing
> exploitable code.
> 
> Consider this:
> 
> C.execute("SELECT name FROM users WHERE user_id='" +
> cgi_submitted_userid + "'")
> 
> Now I send my userid as "hackyou'; DELETE FROM users --"

Back up there.

You don't need to use placeholders with the cursor.
You need to write non-exploitable CGI code.

I really like Perl's "warn me if I actually use anything given to me
from the outside without validating it" option, but hey, we're Python
programmers -- we shouldn't need our hands held.  Validate, validate,
validate.

-roy
From jm at eemsystems.cjb.net  Thu Jun  5 18:37:11 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] segmentation fault
Message-ID: <1054856231.1465.17.camel@eemsystems.com>

I'm using postgresql 7.3 and python from debian unstable.

After varios upgrades my scripts are working bad.

I can not find what happens.


JM



[Thu Jun  5 18:08:21 2003] [notice] child pid 865 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:24 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:24 2003] [notice] child pid 867 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing
mod_python.publisher from None
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] child pid 870 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:29 2003] [notice] child pid 868 exit signal
Segmentation fault (11)

-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From max.zhang at converzal.com  Fri Jun  6 11:07:02 2003
From: max.zhang at converzal.com (max.zhang)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Virtual host and mod_python
Message-ID: <000a01c32bd8$b42882f0$1700a8c0@converzamax>

Hi all,

My Redhat 7.3 +apache1.3 + mod_python2.7

http.conf

<VirtualHost *>
...
</VirtualHost *>
 ...   
<VirtualHost *>
   DocumentRoot /www/htdocs/xy.com/
    ServerName xy.xy.com
    ScriptAlias /cgi-bin/ "/www/htdocs/xy.com/cgi-bin/"

    <Directory "/www/htdocs/xy.com/bulletin">
         AddHandler python-program .py
        PythonHandler mod_python.publisher # this part works well
        PythonDebug On
    </Directory>

    <Directory "/www/htdocs/xy.com/fileman">
         AddHandler python-program .py
        PythonHandler filemanager # this mod_python program can't work .apache display code of filemanager.py in IE client 
        PythonDebug On    
    </Directory>

</VirtualHost>
......

why? The mod_python can't work with virtual host ?
Thanks


Max

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030606/7e64c428/attachment-0002.htm
From dustin at ywlcs.org  Thu Jun  5 22:23:02 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605231807.GC6513@nag.inorganic.org>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
	<20030605231807.GC6513@nag.inorganic.org>
Message-ID: <20030606032302.GB1192@eleanor.internal.ywlcs.org>

> I really like Perl's "warn me if I actually use anything given to me
> from the outside without validating it" option, but hey, we're Python
> programmers -- we shouldn't need our hands held.  Validate, validate,
> validate.

No, we're smart programmers who use reusable code.  Validate. (once)

And someone's already written validation code for each specific DB engine, in
the form of placeholders in cursors.  If you don't want to use placeholders,
at least be sure to write a single, **correct** validation function which you
use religiously.

Perl's taint feature bugs me because it's fairly liberal about what it meants
to "validate", so it's possible to convince Perl that everything's cool while
still leaving yourself open.  That's why we Pythonistas don't like our hands
being held. 'nuf said.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From gre7g-k-modpython.e475ec at wolfhome.com  Thu Jun  5 22:35:39 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <3EDFC5BB.11618.56D33C@localhost>

And now for something completely different...  

I'd like to announce my new mod_python project "Roadkill".

Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
Python code within a .epy webpage to generate dynamic content.  This 
lets you edit your code with your favorite GUI webpage editor instead 
of pasting HTML into your CGI or keeping a bunch of templates that 
your CGI imports.

The homepage for Roadkill can be found at: 
http://roadkill.sourceforge.net/

The documentation is thin and the bugs are most likely numerous (what 
can you expect for version 0.01?), but if any of you would like to 
play with it, I would certainly appreciate comments and bug reports.  
It may not be much to look at now, but hopefully you'll agree that it 
has great potential.

I now return you to your regularly scheduled mailing list.  ;-)

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From mike.looijmans at asml.com  Fri Jun  6 07:53:21 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <01c32bef$ef641e80$926a1e6e@wsasd464>

If you use MySQL, just use the "escape" function:

# Quote a string for the database. Returns "NULL" for empty strings.
def dbescape(val):
    if val:
        return MySQLdb.string_literal(val)
    else:
        return "NULL"



Now you can do:

db.cursor().execute("INSERT INTO foo (foo_id, name) VALUES (%s, %s)" %
(foo_id, dbescape(form['fooname'].value))

You can use this function for anything you like.

Note that this also makes this stuff a lot more secure: Your application must
be able to cope with a user typing
hi" ; DROP DATABASE monty;


For many other database engines, you can used parameterized (a.k.a.
pre-compiled) queries, a query that is sent to the DBMS with some open
parameters which can be re-used several times with varying parameters. This
eliminates query optimization overhead. These may also offer a performance
advantage.

By the way, does MySQL support this? I've done this quite often with many
databases and clients (Delphi for example), and it makes a huge performance
difference.

--
Mike Looijmans
Private: http://www.milosoftware.com

-----Original Message-----
From: Irene Ponti <ireneponti@yahoo.com>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Thursday, June 05, 2003 7:53 PM
Subject: [mod_python] addSlashes() in python, sql cgi question


>Hi to all
>
>I have to put into a SQL database the content of some
>variables coming from an Internet form.
>
>If this variables have some caracters as ' or "
>inside, the sql server return an error because the
>query is not in correct sintax.
>
>Now in php exist a standard function that add slashes
>in front of ' or " in a variable and another that
>remove slashes.
>
>Is there in python a function like this?
>
>Thank you.
>
>__________________________________
>Do you Yahoo!?
>Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
>http://calendar.yahoo.com
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From spyce at symbolist.ru  Fri Jun  6 12:51:29 2003
From: spyce at symbolist.ru (Spyce)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <10513932398.20030606125129@symbolist.ru>

Hello Gre7g,

Friday, June 6, 2003, 8:35:39 AM, you wrote:

GL> And now for something completely different...  

GL> I'd like to announce my new mod_python project "Roadkill".

GL> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
GL> Python code within a .epy webpage to generate dynamic content.  This 
GL> lets you edit your code with your favorite GUI webpage editor instead 
GL> of pasting HTML into your CGI or keeping a bunch of templates that 
GL> your CGI imports.

GL> The homepage for Roadkill can be found at: 
GL> http://roadkill.sourceforge.net/

There is a similar project at http://spyce.sourceforge.net. And, yes,
it uses mod_python too.

-- 
Best regards,
 Spyce                            mailto:spyce@symbolist.ru

From neo at https.ru  Fri Jun  6 13:48:00 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <262700112.20030606134800@https.ru>


  Not "completely" I think... It should be very very similar to the
old well-known "mod_snake", a open project that was closed for some
reason...


> And now for something completely different...  

> I'd like to announce my new mod_python project "Roadkill".

> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> Python code within a .epy webpage to generate dynamic content.  This 
> lets you edit your code with your favorite GUI webpage editor instead 
> of pasting HTML into your CGI or keeping a bunch of templates that 
> your CGI imports.

  This is not true. Not true. Not true.
With my templating system I use exactlty ONE XML-file as a template
for a huge and complex Web-site, and I can edit it with "my favorite"
editor. Did you try to write a big site with your "PHP/ASP"-ish Python
"templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .


> The homepage for Roadkill can be found at: 
> http://roadkill.sourceforge.net/

> The documentation is thin and the bugs are most likely numerous (what 
> can you expect for version 0.01?), but if any of you would like to 
> play with it, I would certainly appreciate comments and bug reports.  
> It may not be much to look at now, but hopefully you'll agree that it 
> has great potential.

> I now return you to your regularly scheduled mailing list.  ;-)

> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
>                       Into each wound, a little salt must fall...
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:31:24 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <262700112.20030606134800@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	 <262700112.20030606134800@https.ru>
Message-ID: <1054895483.3142.24.camel@Presario>

Hi Neo

So where can we look at this great template engine?

Cheers

Conrad

On Fri, 2003-06-06 at 02:48, Neo Eureka wrote:
>   Not "completely" I think... It should be very very similar to the
> old well-known "mod_snake", a open project that was closed for some
> reason...
> 
> 
> > And now for something completely different...  
> 
> > I'd like to announce my new mod_python project "Roadkill".
> 
> > Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> > Python code within a .epy webpage to generate dynamic content.  This 
> > lets you edit your code with your favorite GUI webpage editor instead 
> > of pasting HTML into your CGI or keeping a bunch of templates that 
> > your CGI imports.
> 
>   This is not true. Not true. Not true.
> With my templating system I use exactlty ONE XML-file as a template
> for a huge and complex Web-site, and I can edit it with "my favorite"
> editor. Did you try to write a big site with your "PHP/ASP"-ish Python
> "templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .
> 
> 
> > The homepage for Roadkill can be found at: 
> > http://roadkill.sourceforge.net/
> 
> > The documentation is thin and the bugs are most likely numerous (what 
> > can you expect for version 0.01?), but if any of you would like to 
> > play with it, I would certainly appreciate comments and bug reports.  
> > It may not be much to look at now, but hopefully you'll agree that it 
> > has great potential.
> 
> > I now return you to your regularly scheduled mailing list.  ;-)
> 
> > Gre7g.
> 
> > =================================================================
> > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
> >                       Into each wound, a little salt must fall...
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 14:47:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <1054895483.3142.24.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
Message-ID: <466254823.20030606144714@https.ru>


  Hi, Conrad!

> So where can we look at this great template engine?

  In action, you mean? Well, when the site is ready I can give you a
link. Though it is all in Russian, I think it will not confuse you :).
  I did not say that this "engine" is great, I only sad that the
"advertisement" contained many arguable points...


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:54:38 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01
	"Kitten"
In-Reply-To: <466254823.20030606144714@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	<1054895483.3142.24.camel@Presario>
	<466254823.20030606144714@https.ru>
Message-ID: <1054896878.5988.0.camel@Presario>

Hi

In action or in source ;-)

Cheers

On Fri, 2003-06-06 at 03:47, Neo Eureka wrote:
>   Hi, Conrad!
> 
> > So where can we look at this great template engine?
> 
>   In action, you mean? Well, when the site is ready I can give you a
> link. Though it is all in Russian, I think it will not confuse you :).
>   I did not say that this "engine" is great, I only sad that the
> "advertisement" contained many arguable points...
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 15:19:03 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Re[4]:
In-Reply-To: <1054896878.5988.0.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
 <466254823.20030606144714@https.ru> <1054896878.5988.0.camel@Presario>
Message-ID: <858163919.20030606151903@https.ru>


> In action or in source ;-)

  Well, I think about it, but it is still unfinished, I'm considering
how to add some useful functionality to it.
  In the beginning it used DOM to parse XML-templates, but... mmm...
folks, NEVER use DOM if you do not want very slow and memory-consuming
code, so, I've rewritten it all in Python using Expat.

  Of course, I'll send announcement to this list when I have
something that is worth others' attention. 


--- 
Neo Eureka / mailto:neo@https.ru

From neel at mediapulse.com  Fri Jun  6 10:19:54 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6B@johnson.mediapulse.net>

     > Back up there.
     > 
     > You don't need to use placeholders with the cursor.
     > You need to write non-exploitable CGI code.

Actually, using the placeholder is writing non-exploitable CGI code.
It's standard across drivers that support it, and every major DB does
support placeholders.  It's well tested code too, you're more likely to
make an error writing your own validation routine than find one in the
cursor/database server.


     > 
     > I really like Perl's "warn me if I actually use anything 
     > given to me
     > from the outside without validating it" option, but hey, 
     > we're Python
     > programmers -- we shouldn't need our hands held.  
     > Validate, validate,
     > validate.
     > 

This problem lies in the safest of areas, concatataion of strings.  All
the use strict, taint's, etc will still allow this to happen.  It's like
using hidden fields for price information in an online store; there is
no compiler warnings to say that's a bad idea.

Placeholders are safer, faster, and simpler.  Really no reason not to
use them.

Mike

From neel at mediapulse.com  Fri Jun  6 10:30:35 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>

You should post this in the mod_python dev list as well; currenty there
is discussion of mod_psp (python server pages) being folded into
mod_python, and I'm sure your experience in tackling the same issues
would be helpful.

Thanks,
Mike

     > -----Original Message-----
     > From: Gre7g Luterman 
     > [mailto:gre7g-k-modpython.e475ec@wolfhome.com] 
     > Sent: Friday, June 06, 2003 12:36 AM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Announcement: Roadkill version 
     > 0.01 "Kitten"
     > 
     > 
     > And now for something completely different...  
     > 
     > I'd like to announce my new mod_python project "Roadkill".
     > 
     > Roadkill is a Python-language version of PHP/ASP.  It 
     > lets you embed 
     > Python code within a .epy webpage to generate dynamic 
     > content.  This 
     > lets you edit your code with your favorite GUI webpage 
     > editor instead 
     > of pasting HTML into your CGI or keeping a bunch of 
     > templates that 
     > your CGI imports.
     > 
     > The homepage for Roadkill can be found at: 
     > http://roadkill.sourceforge.net/
     > 
     > The documentation is thin and the bugs are most likely 
     > numerous (what 
     > can you expect for version 0.01?), but if any of you 
     > would like to 
     > play with it, I would certainly appreciate comments and 
     > bug reports.  
     > It may not be much to look at now, but hopefully you'll 
     > agree that it 
     > has great potential.
     > 
     > I now return you to your regularly scheduled mailing list.  ;-)
     > 
     > Gre7g.
     > 
     > =================================================================
     > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
     > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
     >                       Into each wound, a little salt must fall...
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From jgardner at jonathangardner.net  Fri Jun  6 07:35:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054856231.1465.17.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
Message-ID: <200306060735.36876.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> I'm using postgresql 7.3 and python from debian unstable.
>
> After varios upgrades my scripts are working bad.
>
> I can not find what happens.
>

Segfaults are always troublesome.

What I used to do in mod_perl was isolate the page or behavior that was giving 
the seg fault. Then I would try and see which version (you're using a version 
control system, right?) introduced the problem. If it wasn't obvious by then, 
I would put various log messages throughout the suspected handler.

Usually that would lead me to one line of code that was giving the problem. At 
least then I can post to the mailing list about what was causing the problem.

I think the same kind of strategy would work for mod_python as well.

Good luck, you have a fun journey ahead of you!

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
SklnZ2tHiMWzTjyEd5hZJ/8=
=Szy2
-----END PGP SIGNATURE-----

From grisha at modpython.org  Fri Jun  6 11:05:03 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>
Message-ID: <20030606110400.N43535-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> You should post this in the mod_python dev list as well; currenty there
> is discussion of mod_psp (python server pages) being folded into
> mod_python

It's not in discussion, this already has happened... :-)

Grisha

From barr at cs.cornell.edu  Fri Jun  6 12:13:57 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606110400.N43535-100000@oldchief.reply.net>
Message-ID: <Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>

>> You should post this in the mod_python dev list as well; currenty there
>> is discussion of mod_psp (python server pages) being folded into
>> mod_python
>
>It's not in discussion, this already has happened... :-)

Dear Grisha,

I wanted to post earlier, but I didn't find the time. I find this
"folding" to be a little troubling. Why not fold Zope into mod_python?
Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
WebWare?
  http://www.zope.org/
  http://spyce.sourceforge.net/
  http://roadkill.sourceforge.net/
  http://draco.boskant.nl/
  http://www.cheetahtemplate.org/
  http://webware.sourceforge.net/
There are many others at:
  http://spyce.sourceforge.net/doc-add_related.html

mod_psp is, I think, the newest of ALL of these projects. Most of the
alternatives above have reasonable user bases. So why has mod_psp been
folded into mod_python? Why not other, similar, projects? Is this an
internal Apache Foundation issue? If so, then I have already mentioned
that I am willing to contribute the Spyce codebase to the AF for
integration with mod_python. But, I'm not sure that's the right solution
either...

I think that mod_python holds an esteemed position now that the project
has decided to go with the Apache Foundation. It has added visibility
and clout. Perhaps, we should consider and plan its development so as to
attract a larger user base.

Should it simply be a pure Python handler, or should it be extended with
more functionality? There is a difference between mod_python
compatability and mod_python inclusion. Should there be a modular
extension and/or installation mechanism or should there be a "folding"
for all willing projects? If mod_python picks one candidate, what will
it mod_python do to the other projects? Will some other projects begin
to fork mod_python as a result? Do we want a duplication of effort of
either the mod_python-type or the mod_psp-type code?

I humbly recommend that mod_python remain pure, and serve as a Python
handler. It does this job very well! I think that what mod_python needs
is the creation and documentation of a standard extension mechanism to
allow for psp/spyce/draco/roadkill/etc. type of extensions. They would
not be included with mod_python, but would involve a simple .rpm (or
whatever) installation. (That's where the standardization helps!) This
will allow projects like Spyce, which works well with FastCGI,
mod_python, CGI, via proxying and even with other webservers (Xitami) to
continue to perform efficiently within Apache and also to broaden the
user base with support for other web platforms.

Thoughts?

All the best,
Rimon.

From jm at eemsystems.cjb.net  Fri Jun  6 12:02:44 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306060735.36876.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
Message-ID: <1054918964.11887.13.camel@eemsystems.com>

the problem is here:***

what is wrong in this code. this is for reading a cookie from brower.

Thanks..

def verificaraut(req, ID):
	import re
	galleta=getCookie(req.headers_in, ID) ******************
	
	if galleta==None:
	     return '0',''
	lista=re.split(":",galleta)
	
	if lista[0]=='0':
		return '0',lista
	if lista[3]<>req.connection.remote_ip:
		return '0',lista
	
	return lista[0], lista

def getCookie(headers_in, key):
    if headers_in.has_key('Cookie'):
        import Cookie
        C = Cookie.SmartCookie(headers_in['Cookie'])
        C.load(headers_in['Cookie'])
        if C.has_key(key):
            return C[key].value
    return None





El vie, 06-06-2003 a las 09:35, Jonathan Gardner escribi?:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> > I'm using postgresql 7.3 and python from debian unstable.
> >
> > After varios upgrades my scripts are working bad.
> >
> > I can not find what happens.
> >
> 
> Segfaults are always troublesome.
> 
> What I used to do in mod_perl was isolate the page or behavior that was giving 
> the seg fault. Then I would try and see which version (you're using a version 
> control system, right?) introduced the problem. If it wasn't obvious by then, 
> I would put various log messages throughout the suspected handler.
> 
> Usually that would lead me to one line of code that was giving the problem. At 
> least then I can post to the mailing list about what was causing the problem.
> 
> I think the same kind of strategy would work for mod_python as well.
> 
> Good luck, you have a fun journey ahead of you!
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
> SklnZ2tHiMWzTjyEd5hZJ/8=
> =Szy2
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From todd at slack.net  Fri Jun  6 13:56:09 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
Message-ID: <20030606135609.B11869@crank.slack.net>

Hello all,

* Rimon Barr <barr@cs.cornell.edu> [2003-06-06 12:19]:

> I wanted to post earlier, but I didn't find the time. I find this
> "folding" to be a little troubling. Why not fold Zope into mod_python?
> Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
> WebWare?

As a recent "I have seen the light" arrival to Python, I have to agree that this is becoming overwhelming - at least for someone wandering into the room and wanting to work with Python/mod_python-type applications.

Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

> I think that mod_python holds an esteemed position now that the project
> has decided to go with the Apache Foundation. It has added visibility
> and clout. Perhaps, we should consider and plan its development so as to
> attract a larger user base.

Very much agree - most arrivals at mod_python are likely perl/php/apache/jakarta users, and Apache status definitely holds clout and "brand recognition" - and likely not just with developers, also managers and similar types.

> Should it simply be a pure Python handler, or should it be extended with
> more functionality? There is a difference between mod_python
> compatability and mod_python inclusion. Should there be a modular
> extension and/or installation mechanism or should there be a "folding"
> for all willing projects? If mod_python picks one candidate, what will

This I'm too new and inexperienced to comment on. I can say it eternally frustrates me that almost every ISP in the world supports mod_php but near-zero mod_python. Hopefully this will improve (someday) with Apache2/MPM or something, but in the short-term this kills mod_(python|perl) community numbers compared to PHP, the quality of those communities being besides the point I think (debatable yes).

Looking forward to what transpires!

-- 

___________________________
toddgrimason*todd@slack.net


From mod_python at ols.inorganic.org  Fri Jun  6 11:16:03 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606135609.B11869@crank.slack.net>
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
Message-ID: <20030606181603.GB8728@nag.inorganic.org>

On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> This I'm too new and inexperienced to comment on. I can say it
> eternally frustrates me that almost every ISP in the world supports
> mod_php but near-zero mod_python. Hopefully this will improve

I'm not tremendously surprised by this, actually.

By way of background, I should note that I've been programming Perl for
about 11 years now, PHP for about two years, and Python for about two
months.  You can guess which one's my favourite (though they're not
exactly interchangeable).

In my experience, it's easier to integrate PHP into a light-weight web
system than, say, Python.  This is both from the installation
perspective (I had to battle mod_python a little to get it to work on my
system) and from the authoring perspective, where PHP is the VisualBasic
of the programming world; it's closer to ASP in its simplicity than
Python is.  I was authoring PHP code within about a day of getting it
installed; I still haven't done anything useful with mod_python, though
I'm working on it. 

Now, mind you, that comes at a cost -- in my experience, it's much more
likely to see brute-force PHP projects that have just amazingly nasty
code (I recently had to put some bugfixes into a 12,000 PHP project and
was ... horrified at some of the practices), and Python almost forces
you to write nice code.  Partially, it's that old OOP concept -- even
after using PHP for about two years, I only realized a few months ago it
had classes -- nobody I talked to ever used them, mentioned them, or
referred to them in any documentation.  

-roy
From todd at slack.net  Fri Jun  6 14:33:10 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606181603.GB8728@nag.inorganic.org>;
	from mod_python@ols.inorganic.org on Fri, Jun 06, 2003 at 11:16:03AM -0700
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
	<20030606181603.GB8728@nag.inorganic.org>
Message-ID: <20030606143310.C11869@crank.slack.net>

* Roy S. Rapoport <mod_python@ols.inorganic.org> [2003-06-06 14:11]:

> On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> > This I'm too new and inexperienced to comment on. I can say it
> > eternally frustrates me that almost every ISP in the world supports
> > mod_php but near-zero mod_python. Hopefully this will improve
> 
> I'm not tremendously surprised by this, actually.

Oh me neither, I said 'frustrates' not 'suprises' :-)

Perhaps a better comparison would be java servlets running in Tomcat or Resin, a java Web App container. Definitely not widely available for low-end ISP accounts, admittedly has the Sun marketing muscle behind it, but seems more focused.

While there are multiple containers (tomcat,resin,jetty,sun-one,etc.), pretty much every app built on them (every?) leverages the java.servlet.* classes and or jsp (built on top of servlets). I guess my point is this lets everyone focus efforts on higher-level frameworks - Struts, Turbine, whatever - extending the base plumbing (classes) when needed, but not inventing the wheel over and over again, which fun as it may be, appears to me to be hindering overall progress of Python on the web and/or mod_python.

31 flavors is great, but when you're wondering "how do I eat ice cream?", 31 choices before starting is a bit intimidating (sorry for the commercial advertisement there).

Am I completely off-base here?


-- 

___________________________
toddgrimason*todd@slack.net


From jack_diederich at email.com  Fri Jun  6 13:55:45 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
    "folding" mod_psp
Message-ID: <20030606185545.18394.qmail@email.com>

From: Todd Grimason <todd@slack.net>
> Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

No one can read all mailing lists, but this has been covered
at length on comp.lang.python.  The general feeling is that
there are a lot of frameworks for a couple reasons:
  * No one has written a killer framework yet
  * Different users have different needs

>From a marketing perspective it sucks because you can't say
python is _this_ excact collection of tools.  But python
is a language and not a framework (and only sometimes a
language coupled with a WWW framework).  No one laments
the variety of C web servers and frameworks.

This is only a problem if you compare python to PHP.  PHP
isn't a language, (or if it is, it is a nasty little hack of
a language) it is a specific framework for web stuff.
I prefer python for web apps because I prefer python for
everything (for a reasonable value of everything).
But python isn't PHP and their goals & capabilities shouldn't
be confused or compared.

-jack
-- 
_______________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From geert at boskant.nl  Fri Jun  6 22:19:15 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <10513932398.20030606125129@symbolist.ru>
Message-ID: <000001c32c68$e6a54e80$1004a8c0@GREETOP>

Spyce wrote:

> GL> And now for something completely different...
> 
> GL> I'd like to announce my new mod_python project "Roadkill".
> 
> GL> Roadkill is a Python-language version of PHP/ASP.  It 
> lets you embed
> GL> Python code within a .epy webpage to generate dynamic 
> content.  This 
> GL> lets you edit your code with your favorite GUI webpage 
> editor instead 
> GL> of pasting HTML into your CGI or keeping a bunch of 
> templates that 
> GL> your CGI imports.
> 
> GL> The homepage for Roadkill can be found at:
> GL> http://roadkill.sourceforge.net/
> 
> There is a similar project at http://spyce.sourceforge.net. 
> And, yes, it uses mod_python too.

And there are numerous other projects out there which are similar or not
so similar. If you check the WebProgramming wiki at python.org, you'll
find some 40 different systems, including one I am responsible for which
I won't mention here because I don't want to do any false advertising.

The situation about Python web frameworks is a bit confusing and I think
there is no "killer app" yet. However, I have a strong personal opinion
that the standard <p> <% print "Hello, world!" %> templating systems
don't cut it. When you create a big dynamic web site, you need something
more powerful and on a much higher abstraction level. Creating a large
site with a traditional ASP system is like writing a GUI word processor
with only a setPixel() call.

Of course I wish the original author of this thread all the best with
his Roadkill project. I would advise to look around and learn from the
many good ideas that are present in the current Python Web frameworks.

Cheers,
Geert

From neel at mediapulse.com  Fri Jun  6 16:51:47 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>

I'll take a moment in this thread to plug Albatross
(http://www.object-craft.com.au/projects/albatross/) as the "killer"
template system for python, or at least a strong contender.  It doesn't
look like PHP, it's far from any perl package; it solves the
template/state problem in a very python way.  Documentation is there,
but it's currently getting a rewrite for clarity (which most agree it
needs).  Docs aside, within a day I had it running with mod_python and
in 3 days extended the framework with a custom tag; and I was also
learning python at the same time.

If you are open to see there might be a better way to do things, you can
find python very helpful.  If you're looking to use the same "perl
logic" or PHP that you always have, python will go against the grain
with you.  It's really not that much different than C programmer moving
to C++; the syntax change is deceptively simple and hide the real
differences.

Mike

From todd at slack.net  Fri Jun  6 17:07:38 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>;
	from neel@mediapulse.com on Fri, Jun 06, 2003 at 04:51:47PM -0400
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606170738.E11869@crank.slack.net>

* Michael C. Neel <neel@mediapulse.com> [2003-06-06 16:55]:

> If you are open to see there might be a better way to do things, you can
> find python very helpful.  If you're looking to use the same "perl
> logic" or PHP that you always have, python will go against the grain
> with you.  It's really not that much different than C programmer moving
> to C++; the syntax change is deceptively simple and hide the real
> differences.

I'm not sure if this was specifically in response to my earlier post, but since I don't think anyone else mentioned PHP, I'm guessing so...

I clouded the issue by mentioning PHP - I only meant to point it out for it's widespread availablity - most definitely not for the language itself or the "PHP way" of doing things. Wishing I never mentioned it! ;-)

I will look into Albatross again, thanks.

-- 

___________________________
toddgrimason*todd@slack.net


From grisha at modpython.org  Fri Jun  6 17:52:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606174027.J48945-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender.

The problem with Albatross for me is the same one with all the others - it
is yet another language to learn:

<al-for iter="name" expr="keys">
    <tr>
         <td><al-value expr="name.value()"></td>
         <td><al-value expr="environ[name.value()]"></td>
    <tr>
</al-for>

This is not Python. Nor is it HTML.

Grisha

From djc at object-craft.com.au  Sat Jun  7 13:27:12 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <m3of1aefe7.fsf@ferret.object-craft.com.au>


> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the
> > "killer" template system for python, or at least a strong
> > contender.
> 
> The problem with Albatross for me is the same one with all the
> others - it is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

That is true.  If you restrict yourself to Python and HTML you are
forced to do something like this:

for name in keys:
    print '<tr>'
    print '  <td>%s</td>' % name
    print '  <td>%s</td>' % environ[name]
    print '<tr>'

That does not look bad until you build a semi-complex application.

You find yourself in the situation where you cannot change the HTML
presentation without refactoring the surrounding Python application
logic.  Likewise you find it next to impossible to change the
application structure without breaking the presentation.  The above
approach leads to the escalating difficulty and cost (in time and/or
money) of enhancements.

The introduction of a mechanism (or third "language") that allows
and/or imposes a clear interface between the presentation and
implementation increases the ability to change one without major
impact on the other.  This is a huge win for applications that will
change over time.

In the world of GUI application development the model-view-controller
approach has proven itself as a mechanism to manage the same
complexity.  It provides a clear separation of the GUI, the business
logic, and the code that glues them together.  Before the adoption of
MVC (and related patterns), applications tended to be an undisciplined
mixture of GUI and application code.  Over time companies that were
not able to enhance or evolve their products could not compete and
went out of business.  The approach to web applications encouraged PHP
(and similar approaches) is reminiscent of GUI application development
before MVC.

The Albatross approach to the "third" language is not perfect.  I am
not sure that any approach to achieving this separation is perfect.
In my opinion, if there was a perfect approach we would not be having
this discussion, we would all just use the perfect approach.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 08:58:14 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <000001c32cc2$2a97e0e0$1004a8c0@GREETOP>

Michael,

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the 
> "killer" template system for python, or at least a strong 
> contender.  It doesn't look like PHP, it's far from any perl 
> package; it solves the template/state problem in a very 
> python way.  Documentation is there, but it's currently 
> getting a rewrite for clarity (which most agree it needs).  
> Docs aside, within a day I had it running with mod_python and 
> in 3 days extended the framework with a custom tag; and I was 
> also learning python at the same time.

what is the template/state problem?

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:19:02 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:05 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <000101c32cc5$12687180$1004a8c0@GREETOP>

Dave,

> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> That is true.  If you restrict yourself to Python and HTML 
> you are forced to do something like this:
> 
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'
> 
> That does not look bad until you build a semi-complex application.
> 
> You find yourself in the situation where you cannot change 
> the HTML presentation without refactoring the surrounding 
> Python application logic.  Likewise you find it next to 
> impossible to change the application structure without 
> breaking the presentation.  The above approach leads to the 
> escalating difficulty and cost (in time and/or
> money) of enhancements.
>
> The introduction of a mechanism (or third "language") that 
> allows and/or imposes a clear interface between the 
> presentation and implementation increases the ability to 
> change one without major impact on the other.  This is a huge 
> win for applications that will change over time.

I don't agree with you that banning a 3rd party language implies that
you're stuck with the horrible

<%
	long and tedious python fragment here
%>

style of coding.

Draco tries to solve this problem in a different way, by still using
only Python as the scripting language. This works by dividing your code
in a functional part and a formatting part. The function part is put in
a so-called handler, which resides in a separate file (1 per directory).
The functional code execute the user request and puts all the results in
a dictionary dubbed the interface. This almost always reduces your
formatting code to something like this:
 
<%
    for tr in rows:
        print """
            html formatted string
             """ % tr
%>

The rows variable is set in the handler and contains completely
processed and ready to print data.

Using a special notation:

<%
    for tr in rows:
        print """%%>
            html formatted string
             <%%""" % tr
%>

you can even edit the html format string with your favourite
Dreamweaver/Frontpage/whatever.

The premise on which I've built Draco is that you can't elimiate all
code from the template, but you can minimize it. A possible solution is
to use a different templating language but IMHO this just adds
complexity because you now have two languages (plus html) instead of
one. Because Python is just as easy to learn as any old templating
language I don't see how this helps. Maybe at first Python code is a bit
scary but this should pass quickly.

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:25:57 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
Message-ID: <000201c32cc6$09bddb50$1004a8c0@GREETOP>

Ramon,

> I wanted to post earlier, but I didn't find the time. I find
> this "folding" to be a little troubling. Why not fold Zope 
> into mod_python? Why not Spyce? Why not Roadkill? Why not 
> Draco? Why not Cheetah, or WebWare?
>   http://www.zope.org/
>   http://spyce.sourceforge.net/
>   http://roadkill.sourceforge.net/
>   http://draco.boskant.nl/
>   http://www.cheetahtemplate.org/
>   http://webware.sourceforge.net/
>
> There are many others at:
>   http://spyce.sourceforge.net/doc-add_related.html
 
[...]

> Should it simply be a pure Python handler, or should it be
> extended with more functionality? There is a difference 
> between mod_python compatability and mod_python inclusion. 
> Should there be a modular extension and/or installation 
> mechanism or should there be a "folding" for all willing 
> projects? If mod_python picks one candidate, what will it 
> mod_python do to the other projects? Will some other projects 
> begin to fork mod_python as a result? Do we want a 
> duplication of effort of either the mod_python-type or the 
> mod_psp-type code?

As the author of one of the systems you mention above, I was worried a
bit too when the announcement was made to add PSP to mod_python.
However, my understanding is that the component is implemented as a
mod_python handler so that it is completely optional. I hope that it
remains like this: mod_python as a fast and pure Apache-Python interface
with an optional templating system.

The good thing about this move is that new users will have something to
get started with. On the other hand, a web framework that does a bit
more than the standard ASP stuff is probably much larger in scope than
mod_python, so then it would be like adding mod_python to the framework
instead of the other way around.

> I humbly recommend that mod_python remain pure, and serve as
> a Python handler. It does this job very well! I think that 
> what mod_python needs is the creation and documentation of a 
> standard extension mechanism to allow for 
> psp/spyce/draco/roadkill/etc. type of extensions. They would 
> not be included with mod_python, but would involve a simple .rpm (or
> whatever) installation. (That's where the standardization 
> helps!) This will allow projects like Spyce, which works well 
> with FastCGI, mod_python, CGI, via proxying and even with 
> other webservers (Xitami) to continue to perform efficiently 
> within Apache and also to broaden the user base with support 
> for other web platforms.

It is already quite easy to add an extension to mod_python. Mostly it is
just the definition of the appropriate "PythonHandler" directives. What
would really help IMHO is a good and independent web site describing the
current situation with the many different frameworks that lists and
rates the different options.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 18:46:31 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000101c32cc5$12687180$1004a8c0@GREETOP>
References: <000101c32cc5$12687180$1004a8c0@GREETOP>
Message-ID: <m3of1a9swo.fsf@ferret.object-craft.com.au>


> Dave,

> > > <al-for iter="name" expr="keys">
> > >     <tr>
> > >          <td><al-value expr="name.value()"></td>
> > >          <td><al-value expr="environ[name.value()]"></td>
> > >     <tr>
> > > </al-for>
> > > 
> > > This is not Python. Nor is it HTML.
> > 
> > That is true.  If you restrict yourself to Python and HTML 
> > you are forced to do something like this:
> > 
> > for name in keys:
> >     print '<tr>'
> >     print '  <td>%s</td>' % name
> >     print '  <td>%s</td>' % environ[name]
> >     print '<tr>'

[snip]

> > The introduction of a mechanism (or third "language") that 
> > allows and/or imposes a clear interface between the 
> > presentation and implementation increases the ability to 
> > change one without major impact on the other.  This is a huge 
> > win for applications that will change over time.

> I don't agree with you that banning a 3rd party language implies
> that you're stuck with the horrible
> 
> <%
> 	long and tedious python fragment here
> %>
> 
> style of coding.

You are of course correct.  The <% python code %> construct just makes
it a lot easier to place application code in the wrong place.  That is
not really a criticism of the mechanism, it is a criticism of people
who do that.

Mind you, I could argue that while you have not introduced a third
language, you have introduced a new mechanism.  That was part of the
point I was trying to make.  You need either a new language or a
special mechanism.

> Draco tries to solve this problem in a different way, by still using
> only Python as the scripting language. This works by dividing your
> code in a functional part and a formatting part. The function part
> is put in a so-called handler, which resides in a separate file (1
> per directory).  The functional code execute the user request and
> puts all the results in a dictionary dubbed the interface. This
> almost always reduces your formatting code to something like this:
>  
> <%
>     for tr in rows:
>         print """
>             html formatted string
>              """ % tr
> %>

How is the application namespace made available to the templating?

> The rows variable is set in the handler and contains completely
> processed and ready to print data.
> 
> Using a special notation:
> 
> <%
>     for tr in rows:
>         print """%%>
>             html formatted string
>              <%%""" % tr
> %>

Very sneaky.  I like it.

> The premise on which I've built Draco is that you can't elimiate all
> code from the template, but you can minimize it. A possible solution
> is to use a different templating language but IMHO this just adds
> complexity because you now have two languages (plus html) instead of
> one. Because Python is just as easy to learn as any old templating
> language I don't see how this helps. Maybe at first Python code is a
> bit scary but this should pass quickly.

No argument here.

I have toyed with the idea of experimenting with different templating
mechanisms in Albatross.  The templating is only part of the problem
that Albatross is trying to address.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 11:02:10 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3of1a9swo.fsf@ferret.object-craft.com.au>
Message-ID: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>


> You are of course correct.  The <% python code %> construct 
> just makes it a lot easier to place application code in the 
> wrong place.  That is not really a criticism of the 
> mechanism, it is a criticism of people who do that.

Yes, I agree fully.

> Mind you, I could argue that while you have not introduced a 
> third language, you have introduced a new mechanism.  That 
> was part of the point I was trying to make.  You need either 
> a new language or a special mechanism.

Ok, fair enough.
 
> > reduces your formatting code to something like this:
> >  
> > <%
> >     for tr in rows:
> >         print """
> >             html formatted string
> >              """ % tr
> > %>
> 
> How is the application namespace made available to the templating?

Funny that you should say namespace, because that is the 3rd and last
central concept in Draco ;-) (the others are templates and handlers).
The variables from the "interface" namespace are available as global
variables to all code in templates.

Other namespaces include "session", "user", "cookie", "config" and
"args". All of these have a different meaning and putting variables in
them does different things. Namespaces are _the_ mechanism in Draco to
use for persistency.

> No argument here.
> 
> I have toyed with the idea of experimenting with different 
> templating mechanisms in Albatross.  The templating is only 
> part of the problem that Albatross is trying to address.

Yes, the same goes for Draco here. I've had some requests to support TAL
(OpenTAL) as the templating language, as this is becoming a sort of
de-facto standard. If I get to it one day I will.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 20:23:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
References: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
Message-ID: <m3llwe6vac.fsf@ferret.object-craft.com.au>

>>>>> "Geert" == Geert Jansen <geert@boskant.nl> writes:

>> How is the application namespace made available to the templating?

Geert> Funny that you should say namespace, because that is the 3rd
Geert> and last central concept in Draco ;-) (the others are templates
Geert> and handlers).  The variables from the "interface" namespace
Geert> are available as global variables to all code in templates.

I ask about namespaces as they are central to all of these solutions
that separate presentation from implementation.  The namespace is the
conduit.

Geert> Other namespaces include "session", "user", "cookie", "config"
Geert> and "args". All of these have a different meaning and putting
Geert> variables in them does different things. Namespaces are _the_
Geert> mechanism in Draco to use for persistency.

In Albatross there are only two namespaces; local and global.  This
makes expressions in the template language easier to handle.  Both
namespaces are managed by the execution context.  A new execution
context and local namespace is created for every browser request.
Session values are loaded into and saved from the local namespace by
the toolkit.  Session values are a subset of the values in the local
namespace.

The global namespace for template expressions is set to the globals of
the code that executed the template.  This allows you to do things
like this in a page module (code that handles an application page):

    import os

    def page_display(ctx):
        ctx.run_template('env.html')

And then in the env.html template:

    Path is <al-value expr="os.environ['PATH']">

I have been browsing through the Draco documentation.  It looks like
Draco and Albatross are trying to solve slightly different problems.  

Correct me if I am wrong, but Draco is designed to run via mod_python.
It also seems more narrowly focused than Albatross.  This can be
either a good thing or a bad thing depending upon the problem you are
trying to solve.  If the problem fits within the area that Draco
targets, then Draco will solve more application problems than
Albatross.

Albatross is designed as a set of classes that you can mix and match
to allow many different deployment options.  Currently Request classes
are provided for CGI and mod_python deployment.  It should be
relatively painless to build Request classes for other deployment
platforms (Medusa, SimpleHTTPServer, Twisted).  Just this week someone
sent us 24 lines of code (including blank lines) that allows FastCGI
deployment.

Session management is implemented via a different set of mixin
classes.  This currently allows us to store sessions in a session
server or in the local filesystem.  In the not too distant future we
will probably add a new mixin for keeping sessions in memory for
FastCGI deployed applications.  This will eliminate all of the
pickling overhead.

>> No argument here.
>> 
>> I have toyed with the idea of experimenting with different
>> templating mechanisms in Albatross.  The templating is only part of
>> the problem that Albatross is trying to address.

Geert> Yes, the same goes for Draco here. I've had some requests to
Geert> support TAL (OpenTAL) as the templating language, as this is
Geert> becoming a sort of de-facto standard. If I get to it one day I
Geert> will.

I had a serious look at TAL.  I really like the attribute and tag
level manipulation.  I am convinced that the control flow in TAL is
not a good idea.  Trouble is, I cannot think of anything better for
control flow that is consistent with TAL.

- Dave

-- 
http://www.object-craft.com.au

From matt at pollenation.net  Sat Jun  7 14:05:58 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <1054991158.29991.283.camel@localhost>

On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> template/state problem in a very python way.

I don't want to turn this into an Albatross advocacy session but I
couldn't agree with the above. Albatross is extremely simple to use but
remarkably powerful.

I've spent a while looking through a number of the available frameworks.
They are all pretty good but, to me, Albatross stood out.

> Documentation is there, but it's currently getting a rewrite for clarity (which most agree it
> needs).

I would just like to mention that the Albatross documentation is already
remarkably good, especially for an open source product where the docs
often lag the code (not that commercial docs are any better!). I got a
really good idea about what Albatross could do just by spending an
evening reading. The new docs look even better.

Anyway, enough advocacy.

Cheers, Matt

From matt at pollenation.net  Sat Jun  7 14:26:37 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <1054991158.29991.283.camel@localhost>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
	 <1054991158.29991.283.camel@localhost>
Message-ID: <1054992397.20821.286.camel@localhost>

On Sat, 2003-06-07 at 14:05, Matt Goodall wrote:
> On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> > template/state problem in a very python way.
> 
> I don't want to turn this into an Albatross advocacy session but I
> couldn't agree with the above. Albatross is extremely simple to use but
> remarkably powerful.

Oops, that should have said "couldn't agree _more_ with the above".

- Matt

From rpinder at usc.edu  Sat Jun  7 07:48:35 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030530191059.N36634-100000@oldchief.reply.net>
References: <20030530191059.N36634-100000@oldchief.reply.net>
Message-ID: <3EE1FB43.2020102@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From rpinder at usc.edu  Sat Jun  7 08:25:04 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Simple 'redirect' question
Message-ID: <3EE203D0.9030407@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From verence at web.de  Sat Jun  7 17:27:49 2003
From: verence at web.de (martin voigt)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] <no subject>
Message-ID: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>

hi *,

how do i use a content handler to send binary data to the client? the write method supports only strings.

thanks in advance,

martin
______________________________________________________________________________
UNICEF bittet um Spenden fur die Kinder im Irak! Hier online an
UNICEF spenden: https://spenden.web.de/unicef/special/?mc=021101

From tree at basistech.com  Sat Jun  7 11:30:17 2003
From: tree at basistech.com (Tom Emerson)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <16098.1289.684252.548084@magrathea.basistech.com>

martin voigt writes:
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Strings of 8-bit bytes: it "just works" as long as you set the
appropriate content-type.

-- 
Tom Emerson                                          Basis Technology Corp.
Software Architect                                 http://www.basistech.com
  "Beware the lollipop of mediocrity: lick it once and you suck forever"
From rpinder at usc.edu  Sat Jun  7 08:36:06 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030607150319.GE1192@eleanor.internal.ywlcs.org>
References: <20030530191059.N36634-100000@oldchief.reply.net>
 <3EE1FB43.2020102@usc.edu> <20030607150319.GE1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE20666.5010900@usc.edu>

Thanks Dustin,

So you define  HTTP_MOVED_TEMPORARILY  to be the string constant of the 
actual url ??

Thanks
r

Dustin Mitchell wrote:

>On Sat, Jun 07, 2003 at 07:48:35AM -0700, rpinder wrote:
>  
>
>>Rather than load up the end of my python script with html, how can I 
>>redirect the users browser out of the script, and to an html file 
>>located in another directory within my htdocs directory structure ??
>>    
>>
>
>Send a "Location" header and return HTTP code 302, a.k.a.
>
>  return apache.HTTP_MOVED_TEMPORARILY
>
>or
>
>  raise apache.SERVER_RETURN, apache.HTTP_MOVED_TEMPORARILY
>
>Dustin
>
>  
>

From i at mindlace.net  Sat Jun  7 11:46:51 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensions
 vs.	"folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
References: <20030606174027.J48945-100000@oldchief.reply.net>
 <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <2147483647.1054986411@[10.0.1.2]>

--On 7 Saturday, June 2003 13:27 +1000 Dave Cole 
<djc@object-craft.com.au> wrote:

> That is true.  If you restrict yourself to Python and HTML you are
> forced to do something like this:
>
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'

That's certainly not the only other possible approach. I think PyMeld 
is the beginning of a better solution. It gives an example almost 
exactly like the one above at <http://www.entrian.com/PyMeld/>

My only problem with it is its repitition of id tags in successive 
nodes, but that's fixable - the important part, the very pythonic 
object model it gives you for the nodes of the page you care about- is 
there.

This is obviously not a state solution or any of the rest of the things 
Albatross helps you with.

~mindlace               GPG Key: http://mindlace.net/public_key
http://mindlace.net                          Enough is a feast.
From dustin at ywlcs.org  Sat Jun  7 14:14:19 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <20030607191418.GG1192@eleanor.internal.ywlcs.org>

On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> hi *,
> 
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Python holds arbitrary binary data in strings.  So you can do, e.g.,

data = open("my.gif", "r").read()
req.content_type = 'image/gif'
req.send_http_header()
req.write(data)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From neel at mediapulse.com  Sat Jun  7 19:17:20 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>

I suppose it's all a matter of taste really, to me the problem with the
PHP-like methods is there is no seperation of logic from design; or the
method doesn't lend itself well to it.  I'm willing to learn some
special tags if I know all real the python code is in a .py file and the
html in a .html file.

Mike

     > The problem with Albatross for me is the same one with 
     > all the others - it
     > is yet another language to learn:
     > 
     > <al-for iter="name" expr="keys">
     >     <tr>
     >          <td><al-value expr="name.value()"></td>
     >          <td><al-value expr="environ[name.value()]"></td>
     >     <tr>
     > </al-for>
     > 
     > This is not Python. Nor is it HTML.
     > 
     > Grisha
     > 
     > 

From neel at mediapulse.com  Sat Jun  7 19:22:32 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>

     > what is the template/state problem?
     > 
     > Cheers,
     > Geert

The bane of my existance as a web programmer.  I need a template system
that works well with the output from design tools like Dreamweave so I
don't find myself spending hours vi'ng design tags to get it to work in
the app.

The other is the web is a stateless application.  The web browser and
server treat ever click as a completely separate action, and has no
knoweldge of what came before.  That's left as an exercise of the
programmer.  Tools like Albatross that provide me with a base
appliaction that appears stateful to me while behind the scenes coping
with the reality of the web let me focus on the "cool" parts of the
application.

Mike

From verence at web.de  Sun Jun  8 01:56:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
	<20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE27BA7.7010405@web.de>

Dustin Mitchell wrote:

> On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> 
>>hi *,
>>
>>how do i use a content handler to send binary data to the client? the write method supports only strings.
> 
> 
> Python holds arbitrary binary data in strings.  So you can do, e.g.,
> 
> data = open("my.gif", "r").read()
> req.content_type = 'image/gif'
> req.send_http_header()
> req.write(data)
> 
> Dustin
> 
thanks, shame on my, never tried the simplest one... :)

greets

From andy at nervebox.com  Sat Jun  7 22:35:33 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] PYTHONPATH question
Message-ID: <3680743.1055039733708.JavaMail.SYSTEM@chango>

I'm new to [mod_]python and I'm having trouble with PYTHONPATH.  
When I import MySQLdb using the interactive command line,it works fine.  When I import MySQLdb into a module called by mod_python, I get this: 

ImportError: No module named MySQLdb

I've tried setting the PYTHONPATH environment var in httpd.conf using the Apache directive SetEnv, but still no good.

What am I missing?  Does mod_python run python modules as the Apache user?  If so, what's the best way to set the value of PYTHONPATH?

 - thanks in advance,
 - andy 
      
      
      
    
From grisha at modpython.org  Sat Jun  7 22:39:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <20030607223735.H69064-100000@oldchief.reply.net>



On Sat, 7 Jun 2003, Dustin Mitchell wrote:

> req.send_http_header()

in mod_python 3.x this is a noop - in httpd 2.0 you don't have control
over when the headers go out - they will be sent just before the first
byte of output.

Grisha

From jgardner at jonathangardner.net  Sat Jun  7 22:11:44 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054918964.11887.13.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
	<200306060735.36876.jgardner@jonathangardner.net>
	<1054918964.11887.13.camel@eemsystems.com>
Message-ID: <200306072211.45891.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 10:02, Julio Mendoza wrote:
> the problem is here:***
>
> what is wrong in this code. this is for reading a cookie from brower.
>
> Thanks..
>
> def verificaraut(req, ID):
> 	import re
> 	galleta=getCookie(req.headers_in, ID) ******************
>
> 	if galleta==None:
> 	     return '0',''
> 	lista=re.split(":",galleta)
>
> 	if lista[0]=='0':
> 		return '0',lista
> 	if lista[3]<>req.connection.remote_ip:
> 		return '0',lista
>
> 	return lista[0], lista
>
> def getCookie(headers_in, key):
>     if headers_in.has_key('Cookie'):
>         import Cookie
>         C = Cookie.SmartCookie(headers_in['Cookie'])
>         C.load(headers_in['Cookie'])
>         if C.has_key(key):
>             return C[key].value
>     return None
>

What line in getCookie is giving you the problem?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
KBAjmIpvSI1xVJJxAUPDyLM=
=Kjlg
-----END PGP SIGNATURE-----


From jgardner at jonathangardner.net  Sat Jun  7 22:31:53 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <200306072231.54572.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 13:19, Geert Jansen wrote:
> The situation about Python web frameworks is a bit confusing and I think
> there is no "killer app" yet. However, I have a strong personal opinion
> that the standard <p> <% print "Hello, world!" %> templating systems
> don't cut it. When you create a big dynamic web site, you need something
> more powerful and on a much higher abstraction level. Creating a large
> site with a traditional ASP system is like writing a GUI word processor
> with only a setPixel() call.
>

Let's make the killer app, right here, right now. I am building the 
framework for my sites, and a commercial project. I know that I want to use 
mod_python because there are so many benefits to it, even above perl.

What would you suggest, within the limitations of current HTTP technology?

Some ideas I came up with are as follows. Let's discuss -- be honest about 
the ideas. You add your own.

- - Forms. It seems nice to have the code that processes the form input right 
next to the code that makes the form HTML code. This screams "put it all in 
a class!" So I came up with a few classes that should be subclassed:
	- Text input
	- Int input
	- Float input
	- Zip Code input
	... etc ...

You can do the same with the other form elements -- select, checkboxes, and 
radio buttons.

- - Groups of form elements. Sometimes I want a group of elements that go 
together. Example: Login box (name/email, password, submit), address 
(line1, line2, city, state, zip, phone) and cc info (cc #, address, name, 
etc..) I thought of having a class that does the whole thing together. You 
give it some namespace, and it puts its element in that namespace in the 
args. For instanc, if you have an address group of elements, and you give 
it the namespace "fred", then the args come back as fred.line1, fred.line2, 
fred.city, fred.state, fred.whatever.

- - Permanent and temporary sessions. Every website uses cookies for only one 
thing - sessions. We should have this built in by default. Some pages have 
it turned on, some pages won't need it and have it turned off. What happens 
is when the guy visits a page that needs a session, it sets the session 
cookie, or gets the existing one. Then it goes to the database and grabs 
the associated data, and it unserializes the data into a python object. 
Tada - you have a session. It also does some rudimentary checking to see if 
the browser has cookies turned on, redirecting them to another page if they 
do not.

- - Keeping HTML totall separate from the code is a very good idea. 
Unfortunately, it makes things like loops or iterations (like listing some 
results) difficult. I believe the best way around this is to allow some 
python code, in its pure python form, in the page somehow. However, this 
should be extremely light and only when necessary. Is there anyway around 
this?

- - Database connection. This is something that is really important, even 
though it isn't part of the web server per se. I believe that DB-API (and 
perl DBI) just doesn't cut it because it is too low-level. There are so 
many better ways to do things. One of the biggest problems I have is 
getting data-driven SQL statement put together without taking 100 lines of 
code to do it. I found that by writing select as a function that takes 
parameters (like columns, from tables, join tables, where parameters, 
etc...) things get a lot easier. I believe we should build a system that 
has this in there.

- - Code-generated HTML. Every once in a while, we need to build our HTML 
elements manually in the code, putting every argument in precisely. This is 
annoying, and the code is always ugly. What I do is use a function that 
does it all for me. Example:
	html.select("state", (... list of states...)) -> A select list of states
	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
class="big_link") -> a link with properly formatted arguments and all.

If we can agree on what we REALLY want, and if we take advantage of Python, 
expecially the things that make it so much more specialer than perl and 
Java, I think we can come up with THE KILLER SOLUTION. How about that for a 
project name? TKS?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4spJWgwF3QvpWNwRAp9hAJ9R/eXSdhIJ/4g0x0mYOeWEMD6qhwCfZOVv
HJD8G8mUY8fNeyW50PlMEeM=
=nfz+
-----END PGP SIGNATURE-----


From etienne at cs.vu.nl  Sun Jun  8 12:59:35 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
 <200306072231.54572.jgardner@jonathangardner.net>
Message-ID: <Pine.GSO.4.53.0306081250050.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Jonathan Gardner wrote:
> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that I want to use
<snip>

Hi Jonathan,

Many of the suggestions you make have already been implemented by someone
in one form or the other. My two cents is that you don't need to go out
and re-do the entire killer app, but you have the luxury of picking and
choosing between the various web application frameworks that exists for
Python. Many frameworks are modular enough to mix and match.

So spend some time playing with existing frameworks and you will most
likely find most of you requirements already fulfilled in one way or the
other.

When I did the same, I came up with:
Quixote + Medusa
with the option of mod_python replacing Medusa if necessary for
performance issues or Apache integration in future,
and the option of PyMeld supplementing the Quixote Templates if ever
necessary. But for now the Quixote Template idea is a joy to use.

For persistence I use a RDF-inspired layer on top of a SQL basis. (and
because Medusa is single-threaded I simply use sqlite as the database.
Simple and quick)


Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From etienne at cs.vu.nl  Sun Jun  8 13:01:43 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
 mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
Message-ID: <Pine.GSO.4.53.0306081259550.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Michael C. Neel wrote:
> The other is the web is a stateless application.  The web browser and
> server treat ever click as a completely separate action, and has no
> knoweldge of what came before.  That's left as an exercise of the
> programmer.  Tools like Albatross that provide me with a base
> appliaction that appears stateful to me while behind the scenes coping
> with the reality of the web let me focus on the "cool" parts of the
> application.

An alternative is to drink the REST magic Kool-Aid and go with the
statelessness as a feature and not a problem... ;-)

Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From geert at boskant.nl  Sun Jun  8 17:35:13 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <000001c32dd3$8dce4200$1001a8c0@GREETOP>

Hi Johathan,

> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that 
> I want to use 
> mod_python because there are so many benefits to it, even above perl.

A lot of good ideas, but I agree with other posters that most of them
are present in the current web application solutions.

> What would you suggest, within the limitations of current
> HTTP technology?
> 
> Some ideas I came up with are as follows. Let's discuss -- be
> honest about 
> the ideas. You add your own.
> 
> - - Forms. It seems nice to have the code that processes the
> form input right 
> next to the code that makes the form HTML code. This screams 
> "put it all in 
> a class!" So I came up with a few classes that should be subclassed:
> 	- Text input
> 	- Int input
> 	- Float input
> 	- Zip Code input
> 	... etc ...

Draco has this. It provides the following classes: Field, StringField,
AsciiField, IntField, FloatField, EnumField.
 
> - - Groups of form elements. Sometimes I want a group of
> elements that go 
> together. Example: Login box (name/email, password, submit), address 
> (line1, line2, city, state, zip, phone) and cc info (cc #, 
> address, name, 
> etc..) I thought of having a class that does the whole thing 
> together. You 
> give it some namespace, and it puts its element in that 
> namespace in the 
> args. For instanc, if you have an address group of elements, 
> and you give 
> it the namespace "fred", then the args come back as 
> fred.line1, fred.line2, 
> fred.city, fred.state, fred.whatever.

Draco has a Form class that does this. You add Field (sub)classes to it
in the constructor, and then call parse() on a namespace (usually, the
http GET/POST) namespace). The result is a new namespace with your
parsed args, or a FormError exception on error.

> - - Permanent and temporary sessions. Every website uses
> cookies for only one 
> thing - sessions. We should have this built in by default. 
> Some pages have 
> it turned on, some pages won't need it and have it turned 
> off. What happens 
> is when the guy visits a page that needs a session, it sets 
> the session 
> cookie, or gets the existing one. Then it goes to the 
> database and grabs 
> the associated data, and it unserializes the data into a 
> python object. 
> Tada - you have a session. It also does some rudimentary 
> checking to see if 
> the browser has cookies turned on, redirecting them to 
> another page if they 
> do not.

Again, Draco has this, except that sessions are always enabled, not only
for specific pages. Any variables assigned to the "session" namespace
are automatically put in a db table that is bound to the current session
via a session-id (either stored in a cookie or from the URL or both).
The namespace is typed, you can put in any object that can be pickled.

Additionaly, there is the "user" namespace, containing variables bound
to the current user (if the session is logged-in), "application",
"server"  namespaces, etc.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like 
> listing some 
> results) difficult. I believe the best way around this is to 
> allow some 
> python code, in its pure python form, in the page somehow. 
> However, this 
> should be extremely light and only when necessary. Is there 
> anyway around 
> this?

I agree with you completely. My preference is also to use a pure form of
Python for loops, conditionals, etc. Another option that is used by
Albatross and Zope is that you have a 3rd language in the form of extra
tags.

> - - Database connection. This is something that is really
> important, even 
> though it isn't part of the web server per se. I believe that 
> DB-API (and 
> perl DBI) just doesn't cut it because it is too low-level. 
> There are so 
> many better ways to do things. One of the biggest problems I have is 
> getting data-driven SQL statement put together without taking 
> 100 lines of 
> code to do it. I found that by writing select as a function 
> that takes 
> parameters (like columns, from tables, join tables, where parameters, 
> etc...) things get a lot easier. I believe we should build a 
> system that 
> has this in there.

I think that a db-api should be part of the core of any web framework.
Draco implements a "database" object that provides access to the system
database (database that Draco itself uses too for session data, etc).
This object implements methods to get new cursors, open transactions,
etc. An object oriented, namespace like API for
querying/adding/modifying tables and records should be available too. I
have this but it's rather immature so I did not yet add it to Draco.

> - - Code-generated HTML. Every once in a while, we need to
> build our HTML 
> elements manually in the code, putting every argument in 
> precisely. This is 
> annoying, and the code is always ugly. What I do is use a 
> function that 
> does it all for me. Example:
> 	html.select("state", (... list of states...)) -> A 
> select list of states
> 	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
> class="big_link") -> a link with properly formatted arguments and all

I'm not a big fan of these because generating html from code makes the
separation of the job of the web designer and the programmer more
difficult. Draco implements "tag rewriting" that transparently plugs
back form variables into the html. This at least alleviates the problem
because the html can be pure, and doesn't need any code for form
feedback.

> If we can agree on what we REALLY want, and if we take
> advantage of Python, 
> expecially the things that make it so much more specialer 
> than perl and 
> Java, I think we can come up with THE KILLER SOLUTION. How 
> about that for a 
> project name? TKS?

Without too much shameless self promotion I think that Draco is pretty
close to a killer web application framework. It just needs some more
developers and users to see how it performs for a broad audience and to
improve it accordingly. I am willing to do concessions to make it better
and more accepted. My time is very limited at the moment, however.

Cheers,
Geert

From dustin at ywlcs.org  Sun Jun  8 11:29:18 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
References: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
Message-ID: <20030608162918.GI1192@eleanor.internal.ywlcs.org>

Let's take a step back and look at what we're doing here.

We're trying to invent the perfect solution to everyone's problems.  Now, any
of us that have done any appreciable amount of web development know that
there is an enormous variety in the tasks that are out there.  No single
solution is going to hack it for every problem.  Personally, I use Zope, PHP,
mod_python with publisher, mod_python directly, Python CGI, and occasionally
the Python interpreter and GNU make.  Every task calls for different tools.

If you want to design a killer app, take all of the "I like this feature" and
"$PRODUCT has that" that you see here, generalize completely, and build a
framework into which each can be plugged on an as-needed basis.

What you'll end up with will be Apache with mod_python, though perhaps with a
little bit more pluggability on mod_python's part.  Right now, that's where
we should be focusing our attention.  What are the paradigms under which you
wish your web server would invoke your scripts?  How can the Python-facing
end of mod_python be structured to support that paradigm?

My $0.05

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jm at eemsystems.cjb.net  Sun Jun  8 11:40:07 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306072211.45891.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
	 <1054918964.11887.13.camel@eemsystems.com>
	 <200306072211.45891.jgardner@jonathangardner.net>
Message-ID: <1055090407.949.6.camel@eemsystems.com>

thanks,  I change it to:

def _getCookie(headers_in, key):
	if headers_in.has_key('Cookie'):
		import Cookie
		C = Cookie.SimpleCookie(headers_in['Cookie'])
		if C.has_key(key):
		    return C[key].value
		else:
			return None
	return None


and all is working fine.

El dom, 08-06-2003 a las 00:11, Jonathan Gardner escribi?:

> >
> > def getCookie(headers_in, key):
> >     if headers_in.has_key('Cookie'):
> >         import Cookie
> >         C = Cookie.SmartCookie(headers_in['Cookie'])
> >         C.load(headers_in['Cookie'])
> >         if C.has_key(key):
> >             return C[key].value
> >     return None
> >
> 
> What line in getCookie is giving you the problem?
> 
> - -- 
> Jonathan Gardner
> jgardner@jonathangardner.net
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
> KBAjmIpvSI1xVJJxAUPDyLM=
> =Kjlg
> -----END PGP SIGNATURE-----
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 11:24:33 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <3EE31CF1.11381.D637E22@localhost>

> - - Permanent and temporary sessions. Every website uses cookies for
> only one thing - sessions. We should have this built in by default.

Personally, I prefer to pass a variable SID around with each link and 
form.  Yeah, it's not as convenient as a cookie, but at least you 
don't have to worry about cookies being enabled.  Plus, it is 
available on the first page load and it is compatible with CGI's I 
wrote before getting into mod_python, where it was too tricky to 
modify headers to set one.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like listing
> some results) difficult. I believe the best way around this is to
> allow some python code, in its pure python form, in the page somehow.
> However, this should be extremely light and only when necessary. Is
> there anyway around this? 

When I code with templates, I use the following syntax in my HTML to 
bury loops:

<!-- var: BlockName --> ( text to be repeated ) <!-- /var -->

My template class can also handle <!-- /var (VarName) --> which 
doesn't affect operation, but it can make the HTML easier to decypher 
when you stack these.

I embed variables in the traditional way:

%(VarName)s

And then to do the loop in Python, I do something like:

Block = T["BlockName"]
while Condition:
  T["VarName"] = "value"
  T.Add()

print T

To conditionally remove a block:

if Condition:
  T["BlockName"]

Lastly, I bury constants in my HTML with:

<!-- var: VarName="value" -->

And access it with:

VarName = T["VarName"]

Of course, none of this is ground breaking.  I'm sure a million 
programmers have made a similar tool as well.  However, if anyone 
would like a copy of my class, just drop me a note.

I thought about putting it up as a project on SourceForge, but after 
embarassing myself so with RoadKill since I didn't realize spyce 
existed, I'm a tad hesitant.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From dustin at ywlcs.org  Sun Jun  8 12:39:17 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE31CF1.11381.D637E22@localhost>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
Message-ID: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> > - - Permanent and temporary sessions. Every website uses cookies for
> > only one thing - sessions. We should have this built in by default.
> 
> Personally, I prefer to pass a variable SID around with each link and 
> form.  Yeah, it's not as convenient as a cookie, but at least you 
> don't have to worry about cookies being enabled.  Plus, it is 
> available on the first page load and it is compatible with CGI's I 
> wrote before getting into mod_python, where it was too tricky to 
> modify headers to set one.

And it's less secure.  If I hand someone a link like

  http://www.yoursite.com/SID=209354634

Then get them to log in (and thus initiate that session), then I can hijack
their session by using the same URL.  At least with cookies it's much harder
to get someone to install a cookie for a foreign site on their browser.

Be careful!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From verence at web.de  Sun Jun  8 20:17:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE37DB3.8060401@web.de>

Dustin Mitchell wrote:
> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> 
>>>- - Permanent and temporary sessions. Every website uses cookies for
>>>only one thing - sessions. We should have this built in by default.
>>
>>Personally, I prefer to pass a variable SID around with each link and 
>>form.  Yeah, it's not as convenient as a cookie, but at least you 
>>don't have to worry about cookies being enabled.  Plus, it is 
>>available on the first page load and it is compatible with CGI's I 
>>wrote before getting into mod_python, where it was too tricky to 
>>modify headers to set one.
> 
> 
> And it's less secure.  If I hand someone a link like
> 
>   http://www.yoursite.com/SID=209354634
> 
> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.
> 
> Be careful!
> 
> Dustin
> 
hi,

this common problem was solved very often, one way is to recalculate the 
SID for every response you send back according to the SID you got from 
the request (and keep track of the SIDs during a session). a much easier 
way is to maintain a pool of SIDs actually beeing used and throw away 
the unused ones (after a session timeout), wether with a scheduled 
thread or a check everytime a SID arrives from a client. in fact, this 
mechanism most java servlet engines use (wether they store the id in a 
cookie or as a parameter). and it only seem that cookies are more 
secure, it is easy to fake them. this session thingy is (from my pov) a 
real security bottleneck, so i just can repeat your words...

be carful... :)

greets


From andy at nervebox.com  Sun Jun  8 14:39:54 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] python to javascript lib
Message-ID: <1834236.1055097594608.JavaMail.SYSTEM@chango>

This group seem like the folks who would know about this.

Is there a Python lib or module that will translate python data structures into javascript and vice-versa?  Some implememtations of WDDX do this and it's sooo handy.

If there isn't one, I'll write one and share it.  But if there is one, it would save me a lot 
of time. :)

 - thanks,
 - andy c
      
      
      
    
From barr at cs.cornell.edu  Sun Jun  8 15:34:00 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <20030608162918.GI1192@eleanor.internal.ywlcs.org>
Message-ID: <Pine.LNX.4.44.0306081454200.12610-100000@pompom.cs.cornell.edu>

Hi Dustin,

I agree. And, let me follow up on that by expounding on an earlier
suggestion that I made... I think that mod_python should focus on
building a standard extension mechanism rather than begin folding
"killer" features such as mod_psp. This will mature the entire Python
web community.

What I mean by standard extension mechanism is to define something
similar to the Linux Standard Base project, albeit much smaller in
scope. mod_python needs a configuration file/directory for extensions
with a specific location. It needs a versioning mechanism, a way to find
the Python interpretter, some scratch disk space (for caching, or
whatever a plugin needs), etc. It needs a simple extension namespace and
registry (i.e. files in some directory) to find out what other modules
are available, or perhaps an RPM (or Windows registry) naming
convention... little details that allow for automated installation and
configuration across multiple platforms and configurations. They really
are just little details, but they can make the difference to a new user
between perceiving the project as a hackish solution versus a polished
one.

This is the major advantage that PHP has - it just plugs in to Apache.
And that's why ISPs just plug it in! It would be nice if mod_python just
plugged into Apache, and then Spyce/Draco/WebWare/etc just plugged into
mod_python to form a working Python web-serving system. Ideally, I think
it should be a two RPM installation, or just two setup executables on
Windows. This this exactly the situation with Apache/PHP/Pear and it
works well.

On the API front, I think that mod_python needs to make threaded output
more efficient, and possibly support output buffering. Currently, I'm
performing hacks in Spyce for both of these, and they could be
implemented more efficiently inside mod_python (and in C) with
substantial performance gains on the output path. Other frameworks would
benefit from this as well.

In general, the concern that I have with the "folding" of mod_psp into
mod_python is two fold. First, it may integrate with mod_python via APIs
that would otherwise have been exposed and have benefitted all the
Python-based web projects. Secondly, it may become the defacto standard,
no matter how it compares with other tools for a specific task, simply
because of its tighter integration and automatic inclusion. It will be
seen as a standard, and it will stifle the creation of useful tools in
the space. PHP, for example, has recognized this problem, and has
created PEAR. Perl did the same with CPAN.

We don't need to have something as extensive, but it would be nice to
have a basic extensible Python-based web infrastructure of some kind,
and mod_python is the place to do it, since it is now part of the Apache
Foundation and therefore a central member of the Python web community.

My two cents,
Rimon.

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

>Let's take a step back and look at what we're doing here.
>
>We're trying to invent the perfect solution to everyone's problems.  Now, any
>of us that have done any appreciable amount of web development know that
>there is an enormous variety in the tasks that are out there.  No single
>solution is going to hack it for every problem.  Personally, I use Zope, PHP,
>mod_python with publisher, mod_python directly, Python CGI, and occasionally
>the Python interpreter and GNU make.  Every task calls for different tools.
>
>If you want to design a killer app, take all of the "I like this feature" and
>"$PRODUCT has that" that you see here, generalize completely, and build a
>framework into which each can be plugged on an as-needed basis.
>
>What you'll end up with will be Apache with mod_python, though perhaps with a
>little bit more pluggability on mod_python's part.  Right now, that's where
>we should be focusing our attention.  What are the paradigms under which you
>wish your web server would invoke your scripts?  How can the Python-facing
>end of mod_python be structured to support that paradigm?
>
>My $0.05
>
>Dustin
>
>

From davidf at sjsoft.com  Sun Jun  8 22:11:16 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:06 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE37DB3.8060401@web.de>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org> <3EE37DB3.8060401@web.de>
Message-ID: <3EE39864.6020602@sjsoft.com>

verence wrote:

> Dustin Mitchell wrote:
>
>> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
>>
>>>> - - Permanent and temporary sessions. Every website uses cookies for
>>>> only one thing - sessions. We should have this built in by default.
>>>
>>>
>>> Personally, I prefer to pass a variable SID around with each link 
>>> and form. Yeah, it's not as convenient as a cookie, but at least you 
>>> don't have to worry about cookies being enabled. Plus, it is 
>>> available on the first page load and it is compatible with CGI's I 
>>> wrote before getting into mod_python, where it was too tricky to 
>>> modify headers to set one.
>>
>>
>>
>> And it's less secure. If I hand someone a link like
>>
>> http://www.yoursite.com/SID=209354634
>>
>> Then get them to log in (and thus initiate that session), then I can 
>> hijack
>> their session by using the same URL. At least with cookies it's much 
>> harder
>> to get someone to install a cookie for a foreign site on their browser.
>>
>> Be careful!
>>
>> Dustin
>>
> hi,
>
> this common problem was solved very often, one way is to recalculate 
> the SID for every response you send back according to the SID you got 
> from the request (and keep track of the SIDs during a session). a much 
> easier way is to maintain a pool of SIDs actually beeing used and 
> throw away the unused ones (after a session timeout), wether with a 
> scheduled thread or a check everytime a SID arrives from a client. in 
> fact, this mechanism most java servlet engines use (wether they store 
> the id in a cookie or as a parameter). and it only seem that cookies 
> are more secure, it is easy to fake them. this session thingy is (from 
> my pov) a real security bottleneck, so i just can repeat your words...
>
> be carful... :)
>
> greets 

Actually what needs to be ensured is that the SID is secure.
We have a system where we use cookies, and the SID is a md5 hash of the 
timestamp, username, password, and a secret string. That way it can't be 
forged and we can keep track of sessions based on timestamp.

David

From barr at cs.cornell.edu  Sun Jun  8 16:18:07 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606164118.16841.qmail@email.com>
Message-ID: <Pine.LNX.4.44.0306081556500.12961-100000@pompom.cs.cornell.edu>

Dear Jack,

>Holy Cross Posting Batman!
>I'm just replying to the proper forum (python-dev@apache)

I feel that this topic involves more than the just the mod_python
development list. It involves also the developers that use mod_python to
create Python frameworks based on mod_python, and also the users of
those systems. I selected only a few frameworks that I have posted to
before, and that I know are rather mature projects. You are free to
address your replies as you please.

>No need to freak out.  Per the original discussions of psp it will be
>seperate enough so you can use the psp stuff in a regular CGI or even
>to generate text offline altogether.

Then why the integration? It seems like it should operate just like
WebWare, Zope, Spyce and the rest: as one possible framework that you
could place on top of the mod_python base. Futhermore, my concern is not
with the generality of mod_psp, but rather with the generality of
mod_python.

>This would lend it to being generic enough that the same hooks it uses
>could be used by any other templating engine. IMO the reason psp was
>folded into mod_python and not something else is just that the guy who
>did psp was willing to put in some time and many people (mostly noobs)
>expect a php-alike with thier mod_whatever.

Installing two rpms instead of one is not a big deal, and is not a valid
reason to combine the development. PHP and Pear are seperate installs,
for example. Furthermore, Spyce and many other systems work perfectly
against the exposed mod_python API. Therefore, all the "integration
work" that you speak of has been done by others as well. Unless, of
course, there is some unexposed mod_python functionality that mod_psp is
using...

There is no performance disadvantage from this modular approach. In
fact, it is this modular approach that has made Apache popular, that has
lead to the success of Python, Perl, PHP and many other systems. People
like to plug in components. But, for that you need a component
infrastructure, and you need to resist the urge to tack on quick fixes
or integrate with this or that project to get another neat feature.
Rather, you want to create an open platform that allows others to easily
create their own extensions.

>So it solved a couple minor problems without adding any new ones. No
>big deal or conspiracy here.

The concern is not about conspiracy, but on the effect of the inclusion.
The inclusion of mod_psp, excludes other frameworks, because it becomes
the defacto standard through an arbitrary linkage to mod_python rather
than through its independent merits. It thereby stifles the progress and
interest in other solutions unnecessarily.

All the best,
Rimon.


From barr at cs.cornell.edu  Sun Jun  8 16:43:50 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <000201c32cc6$09bddb50$1004a8c0@GREETOP>
Message-ID: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>

Hi Geert,

>As the author of one of the systems you mention above, I was worried a
>bit too when the announcement was made to add PSP to mod_python.
>However, my understanding is that the component is implemented as a
>mod_python handler so that it is completely optional. I hope that it
>remains like this: mod_python as a fast and pure Apache-Python interface
>with an optional templating system.

As you are no-doubt aware, I am also an author of one of these systems:
Spyce. :) I well-aware of how to interface with mod_python. I've built
an abstraction layer underneath Spyce that allows it to operate
efficiently with mod_python and also with FastCGI, the Xitami web
server, CGI and as a web proxy.

>The good thing about this move is that new users will have something to
>get started with. On the other hand, a web framework that does a bit
>more than the standard ASP stuff is probably much larger in scope than
>mod_python, so then it would be like adding mod_python to the framework
>instead of the other way around.

I see the benefits as well. My concern is that the automatic inclusion
of mod_psp will have two effects. First, it will become a "good enough"
standard and users will not bother to look at other possibilities, which
are quite good and creative, and certainly more mature than mod_psp at
this point. I put up a web page, for example:
  http://spyce.sourceforge.net/doc-add_related.html
so that users will be able to see all the interesting things that people
are doing, and be able to select the tools that are most appropriate for
their needs. I, for example, think that I've contributed to the
community with spyce modules, spyce lambdas and spyce active tags. If
you're interested, then have a look at:
  http://spyce.sourceforge.net/doc-mod.html
  http://spyce.sourceforge.net/doc-lang_lambda.html
  http://spyce.sourceforge.net/doc-tag.html
I also recognize the value in the design of CherryPy, of WebWare, of
Draco, etc. I've learned interesting things from looking at each of
these systems, and I hope that their development continues to introduce
more useful concepts.

My second concern regarding the inclusion of mod_psp is that it will end
up being a much larger codebase than mod_python, and will influence the
focus of the project from being a platform (i.e. infrastructure) for
Python-based Apache integration to being a project like Spyce and others
that are focussed on the language issues or application frameworks.
These two goals can be kept separate, but then why merge the two
projects?

Good boundaries make for good design, because short-cuts are not
possible. You, I and all other developers (and the users of our systems)
that use the mod_python infrastructure to operate within Apache have an
interest in ensuring that mod_python remains open and focussed on that
small, but most important goal: infrastructure. As a developer that uses
mod_python, I think that the most important next steps are performance
and configuration issues, not a handler for a new Python-web language.
Are there any technical merits for merging mod_psp with mod_python?

My two cents,
Rimon.

On Sat, 7 Jun 2003, Geert Jansen wrote:

>Ramon,
>
>> I wanted to post earlier, but I didn't find the time. I find
>> this "folding" to be a little troubling. Why not fold Zope
>> into mod_python? Why not Spyce? Why not Roadkill? Why not
>> Draco? Why not Cheetah, or WebWare?
>>   http://www.zope.org/
>>   http://spyce.sourceforge.net/
>>   http://roadkill.sourceforge.net/
>>   http://draco.boskant.nl/
>>   http://www.cheetahtemplate.org/
>>   http://webware.sourceforge.net/
>>
>> There are many others at:
>>   http://spyce.sourceforge.net/doc-add_related.html
>
>[...]
>
>> Should it simply be a pure Python handler, or should it be
>> extended with more functionality? There is a difference
>> between mod_python compatability and mod_python inclusion.
>> Should there be a modular extension and/or installation
>> mechanism or should there be a "folding" for all willing
>> projects? If mod_python picks one candidate, what will it
>> mod_python do to the other projects? Will some other projects
>> begin to fork mod_python as a result? Do we want a
>> duplication of effort of either the mod_python-type or the
>> mod_psp-type code?
>
>> I humbly recommend that mod_python remain pure, and serve as
>> a Python handler. It does this job very well! I think that
>> what mod_python needs is the creation and documentation of a
>> standard extension mechanism to allow for
>> psp/spyce/draco/roadkill/etc. type of extensions. They would
>> not be included with mod_python, but would involve a simple .rpm (or
>> whatever) installation. (That's where the standardization
>> helps!) This will allow projects like Spyce, which works well
>> with FastCGI, mod_python, CGI, via proxying and even with
>> other webservers (Xitami) to continue to perform efficiently
>> within Apache and also to broaden the user base with support
>> for other web platforms.
>
>It is already quite easy to add an extension to mod_python. Mostly it is
>just the definition of the appropriate "PythonHandler" directives. What
>would really help IMHO is a good and independent web site describing the
>current situation with the many different frameworks that lists and
>rates the different options.
>
>Cheers,
>Geert

From gstein at lyra.org  Sun Jun  8 14:13:27 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
Message-ID: <20030608211327.GH19908@lyra.org>

I do all of my templating using my ezt.py module. It has no algorithmic
constructs in it at all. It simply renders data that the Python app has
provided to it. It has simple iteration and simple control flow, but no
variable assignment, method invocation, etc. In fact, it really only has
about six basic directives. I've used it with success in ViewCVS, edna,
SubWiki, and some internal apps at the ASF and at home.

I think the latest version of it is part of the SubWiki project, so you can
fetch it right out of the SVN repository:

  http://svn.webdav.org/repos/projects/subwiki/trunk/lib/ezt.py

I find the module makes for a nice separation between logic and rendering.

Yes, this is a bit of advocacy :-), but I'm not asking for any change. Just
pointing out a module that I think can help people...

Cheers,
-g

On Sat, Jun 07, 2003 at 07:17:20PM -0400, Michael C. Neel wrote:
> I suppose it's all a matter of taste really, to me the problem with the
> PHP-like methods is there is no seperation of logic from design; or the
> method doesn't lend itself well to it.  I'm willing to learn some
> special tags if I know all real the python code is in a .py file and the
> html in a .html file.
> 
> Mike
> 
>      > The problem with Albatross for me is the same one with 
>      > all the others - it
>      > is yet another language to learn:
>      > 
>      > <al-for iter="name" expr="keys">
>      >     <tr>
>      >          <td><al-value expr="name.value()"></td>
>      >          <td><al-value expr="environ[name.value()]"></td>
>      >     <tr>
>      > </al-for>
>      > 
>      > This is not Python. Nor is it HTML.
>      > 
>      > Grisha
>      > 
>      > 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 15:43:12 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <3EE31CF1.11381.D637E22@localhost>
Message-ID: <3EE35990.2860.E504CF8@localhost>

> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.

I suppose I didn't mention it, but I do test the remote IP address 
against the IP address recorded in the session pickle.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

         I want to be the master of time and space, a living god,
                            ...and then I'd like to visit Europe.
From sterling at bumblebury.com  Sun Jun  8 18:00:06 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
Message-ID: <1055109606.1603.18.camel@hasele>

Ok, I'll bite.

> I see the benefits as well. My concern is that the automatic inclusion
> of mod_psp will have two effects. First, it will become a "good enough"
> standard and users will not bother to look at other possibilities, which
> are quite good and creative, and certainly more mature than mod_psp at
> this point. I put up a web page, for example:

I think you make the opposite point right here.  If PSP is "good
enough," then why should they investigate other options?  I'm not going
to say anything bad about the other systems, I like some of them, others
less: they all have their advantages and their different approaches,
such diversity is imho a good thing.  However, the goal of mod_python,
as I understand it, is to be the best toolkit for developing web
applications with Python.  It is a pretty common request to embed python
code within HTML, if we can find a solution that is "good enough," I
think that's an admirable achievement.

PSP's integration with mod_python does not preclude the usage of spyce
or any of these other systems.  In fact, I happen to use cheetah for
some of my sites, I think its a superb product.  It just provides users
with a simple, fast system that works "out of the box."  That's never a
bad thing.

> 
> My second concern regarding the inclusion of mod_psp is that it will end
> up being a much larger codebase than mod_python, and will influence the
> focus of the project from being a platform (i.e. infrastructure) for
> Python-based Apache integration to being a project like Spyce and others
> that are focussed on the language issues or application frameworks.
> These two goals can be kept separate, but then why merge the two
> projects?
> 
> Good boundaries make for good design, because short-cuts are not
> possible. You, I and all other developers (and the users of our systems)
> that use the mod_python infrastructure to operate within Apache have an
> interest in ensuring that mod_python remains open and focussed on that
> small, but most important goal: infrastructure. As a developer that uses
> mod_python, I think that the most important next steps are performance
> and configuration issues, not a handler for a new Python-web language.
> Are there any technical merits for merging mod_psp with mod_python?
> 

Good boundaries make for good design.  

PSP is a python handler, distributed with mod_python.  There is a clear
boundary between the two pieces of code.  I can see your political
reasoning for not including PSP, but what is your technical reason?  The
other systems will not be technically disadvantaged in anyway, and psp 
certainly doesn't muddy things up from a technical perspective.

Good Fences Make Good Neighbors,

Sterling

-- 
Good judgement comes from experience, and experience comes from 
bad judgement. 
    - Fred Brooks
From dustin at ywlcs.org  Sun Jun  8 19:15:04 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE35990.2860.E504CF8@localhost>
References: <3EE31CF1.11381.D637E22@localhost>
	<3EE35990.2860.E504CF8@localhost>
Message-ID: <20030609001504.GK1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > Then get them to log in (and thus initiate that session), then I can hijack
> > their session by using the same URL.  At least with cookies it's much harder
> > to get someone to install a cookie for a foreign site on their browser.
> 
> I suppose I didn't mention it, but I do test the remote IP address 
> against the IP address recorded in the session pickle.

That can cause trouble for people behind multiple, layer-4 switched caches..
the remote IP will be different for different requests..

That's rare, but it does happen.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From grisha at modpython.org  Sun Jun  8 23:36:08 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:07 2004
Subject: Cookies [was: [mod_python] Announcement: Roadkill version 0.01
 "Kitten"]
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <20030608233011.G83392-100000@oldchief.reply.net>


Just as a sidenote to this discussion -

It is surprising how little decent info is available about them. By far
the best description of everything relating to cookies from history to
issues with them and why they are needed is in this paper:

"HTTP Cookies: Standards, Privacy, and Politics" by David M. Kristol

http://arxiv.org/abs/cs.SE/0105018

Grisha

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), then I can hijack
> > > their session by using the same URL.  At least with cookies it's much harder
> > > to get someone to install a cookie for a foreign site on their browser.
> >
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
>
> That can cause trouble for people behind multiple, layer-4 switched caches..
> the remote IP will be different for different requests..
>
> That's rare, but it does happen.
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org/djmitche@alumni.uchicago.edu
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Sun Jun  8 22:46:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Write your own appserver in mod_python!
Message-ID: <200306082246.58019.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I had no idea that there were so many mature app servers in mod_python. I 
feel humbled.

I'll admit, I wrote my own, and I think it has a catchy name -- PyT. I'll be 
releasing it soon enough. This makes me one of the 500 others who have 
written their own appserver for mod_python. I don't mind that at all. 
Secretly, I wish mine will become the next JSP or PHP, but I won't hold my 
breath, because I know all of you do too.

The real strength of python is that anyone can write their own stuff without 
too much effort. And no matter what their design decisions, the language 
seems to get out of the way. It comfortably molds itself into the image you 
want it to mold into, without losing its integrity or comprising its 
features. It seems perl, with its infinite complexity, actually ended up 
being "there's only a few ways you can actually do it right", while Python, 
with it rigid yet simple syntax, has rendered into "everyone does it their 
own way, and guess what, it all works!"

I take back my earlier comment about writing the killer solution. Maybe we 
shouldn't write the killer solution and label it as such. Maybe we should 
emphasize that mod_python is the basis for a million killer solutions! 
Maybe we should advertise that if you don't like what you see, you can 
write your own in a weekend!

I think the mod_python community should be a community of diverse opinions 
and diverser projects. Topics like "What is the best way to handle a 
session?" will always yield at least five different answers. At least we 
will be able to cherry pick the one that works best for our situaton, and 
coding it up will be no problem. Let's encourage others to explore the app 
server solution space, and to share their creations with our community. And 
then at the end of the day, let's go back to the hawking of our wares in 
the bazaar.

So, in that regard, I do fear PSP becoming integrated into the mod_python 
project. I fear because it will give the wrong impression to the newbies. 
It will give them the impression that there is only one good app server out 
there, and PSP is it. This is incredibly false, and dangerously deceptive. 
I would hope that somewhere on the introduction page to mod_python, it says 
in big bold letters:

	PSP is an example of what *you* can do with mod_python. If you like it, use
	it. If anything is disagreeable, go check out these other projects. If
	nothing suits your tastes, *write* *your* *own* and share it with us!

So, here's a toast to the future of mod_python! Choice is king, diversity 
our strength, and community our spirit!

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5B9OWgwF3QvpWNwRAp16AJ4o+9vEfCq68rrIw7z701+RckCgHwCgteew
5CkyolwOdQXU9L4FyO4JrxM=
=OZey
-----END PGP SIGNATURE-----


From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 00:13:02 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <3EE3D10E.32463.10230FF7@localhost>

> I take back my earlier comment about writing the killer solution.
> Maybe we shouldn't write the killer solution and label it as such.
> Maybe we should emphasize that mod_python is the basis for a million
> killer solutions! Maybe we should advertise that if you don't like
> what you see, you can write your own in a weekend! 

The more I think about "a killer app" the more disenchanted I am with 
the idea.

In my mind, Python's greatest strength is that every time I got to a 
point in my code where I said, "Now, if only I had a gizmo that did 
X", that's when I noticed that Python COMES WITH a gizmo that does X 
built in.

Also, while I have the floor, I want to say that I did look around at 
some of the frameworks when I started writing CGI's in Python and I 
found them... (pardon me while I grope for a word)... intimidating.  
I found myself saying "but all I want is a class that does X!".

Now, I'll be the first to admit that I did end up adding X, Y, and Z 
to my code, not just X, so it's very possible that some of the 
frameworks that I found scary because they did X, Y, and Z instead of 
just X would have been a perfect fit, but the fact remains that they 
were more intimidating and felt like they had more commitment 
required than just including one of the standard libs.  (Sorry for 
the run-on, it's late.)

Anyhow, my point is, that if we broke down the problem into small 
bite size pieces, and tossed out the classes as separate .py files, 
perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
dread of commitment to a framework.  They could just say, "I need a 
class to handle sessions."  Boom!  "I need a class that makes HTML 
from templates."  Pow!  "I want to handle my form inputs as class 
members."   Biff!  (Couldn't resist.)

These functions are really separate, so why should anyone have to 
take the whole cow if they just want a hamburger?

Perhaps we should take all these competing frameworks, split them 
into their classes, and make them all a-la-carte?  A session from 
here... a template from there...  That would let us program the way 
we like to (or at least how I like to) by taking just the stuff we 
want and leaving the other stuff behind.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From davidf at sjsoft.com  Mon Jun  9 09:17:54 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <3EE434A2.6080409@sjsoft.com>

Gre7g Luterman wrote:

>Perhaps we should take all these competing frameworks, split them 
>into their classes, and make them all a-la-carte?  A session from 
>here... a template from there...  That would let us program the way 
>we like to (or at least how I like to) by taking just the stuff we 
>want and leaving the other stuff behind.
>
In fact, maybe what we need is just a nice "map" to all the frameworks, 
explaining each one's focus, and giving a short code example for each...
That would be a first step to helping people find what they need

David

From fitnah55 at hotmail.com  Mon Jun  9 04:16:17 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] 
	need working fix for 'import site' aka 'ImportError' aka
	'make_obcallback' error
Message-ID: <000101c32e5f$66cb0da0$18c0c20a@computer>


i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


From neo at https.ru  Mon Jun  9 12:29:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <1603919375.20030609122914@https.ru>


> The more I think about "a killer app" the more disenchanted I am with 
> the idea.

> In my mind, Python's greatest strength is that every time I got to a 
> point in my code where I said, "Now, if only I had a gizmo that did 
> X", that's when I noticed that Python COMES WITH a gizmo that does X 
> built in.

> Also, while I have the floor, I want to say that I did look around at 
> some of the frameworks when I started writing CGI's in Python and I 
> found them... (pardon me while I grope for a word)... intimidating.  
> I found myself saying "but all I want is a class that does X!".

> Now, I'll be the first to admit that I did end up adding X, Y, and Z 
> to my code, not just X, so it's very possible that some of the 
> frameworks that I found scary because they did X, Y, and Z instead of 
> just X would have been a perfect fit, but the fact remains that they 
> were more intimidating and felt like they had more commitment 
> required than just including one of the standard libs.  (Sorry for 
> the run-on, it's late.)

> Anyhow, my point is, that if we broke down the problem into small 
> bite size pieces, and tossed out the classes as separate .py files, 
> perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
> dread of commitment to a framework.  They could just say, "I need a 
> class to handle sessions."  Boom!  "I need a class that makes HTML 
> from templates."  Pow!  "I want to handle my form inputs as class 
> members."   Biff!  (Couldn't resist.)

> These functions are really separate, so why should anyone have to 
> take the whole cow if they just want a hamburger?


  Here are very smart ideas. I totally agree with the above.




> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

>         I want to die peacefully in my sleep, like my grandfather
>                   ...not screaming in terror like his passengers.


--- 
Neo Eureka / mailto:neo@https.ru

From neo at https.ru  Mon Jun  9 12:35:41 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
References: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <494306522.20030609123541@https.ru>


> I think the mod_python community should be a community of diverse
> opinions 
> and diverser projects. Topics like "What is the best way to handle a 
> session?" will always yield at least five different answers. At least we 
> will be able to cherry pick the one that works best for our situaton,
> and 
> coding it up will be no problem. Let's encourage others to explore the
> app 
> server solution space, and to share their creations with our community.

> So, in that regard, I do fear PSP becoming integrated into the mod_python 
> project. I fear because it will give the wrong impression to the newbies. 
> It will give them the impression that there is only one good app server out 
> there, and PSP is it. This is incredibly false, and dangerously deceptive. 
> I would hope that somewhere on the introduction page to mod_python, it says 
> in big bold letters:

>         PSP is an example of what *you* can do with mod_python. If you like it, use
>         it. If anything is disagreeable, go check out these other projects. If
>         nothing suits your tastes, *write* *your* *own* and share it with us!


  I just want to wholeheartedly support the authors' opinions!


--- 
Neo Eureka / mailto:neo@https.ru

From geert at boskant.nl  Mon Jun  9 12:45:25 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <000001c32e74$3c794390$1001a8c0@GREETOP>


> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), 
> then I can 
> > > hijack their session by using the same URL.  At least 
> with cookies 
> > > it's much harder to get someone to install a cookie for a foreign 
> > > site on their browser.
> > 
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
> 
> That can cause trouble for people behind multiple, layer-4 
> switched caches.. the remote IP will be different for 
> different requests..
> 
> That's rare, but it does happen.

Something that will cause trouble with this too are on-demand dialing
ISDN modems which usually have a hangup timeout of about 120 seconds. If
the user stays idle for more than two minutes, the modem will hangup,
then redial and get a different IP address.

Geert

From geert at boskant.nl  Mon Jun  9 13:05:41 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055109606.1603.18.camel@hasele>
Message-ID: <000501c32e77$114709c0$1001a8c0@GREETOP>


> PSP is a python handler, distributed with mod_python.  There 
> is a clear boundary between the two pieces of code.  I can 
> see your political reasoning for not including PSP, but what 
> is your technical reason?  The other systems will not be 
> technically disadvantaged in anyway, and psp 
> certainly doesn't muddy things up from a technical perspective.

The fact that mod_psp hasn't proved anything yet while other frameworks
have seems a technical reason to me.

What do you (as the mod_psp author) think of the remarks that have been
made already by two people that a complete web application framework is
much larger in scope than mod_python. This would mean that adding it to
mod_python is like adding mod_python to the framework. At that time can
only hope that the focus of mod_python doesn't shift from being a
general and high performance Python layer for Apache to being the Apache
enablement of mod_psp.

Cheers,
Geert

From sterling at bumblebury.com  Mon Jun  9 10:58:36 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000501c32e77$114709c0$1001a8c0@GREETOP>
References: <000501c32e77$114709c0$1001a8c0@GREETOP>
Message-ID: <1055170715.22155.44.camel@hasele>

On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> > PSP is a python handler, distributed with mod_python.  There 
> > is a clear boundary between the two pieces of code.  I can 
> > see your political reasoning for not including PSP, but what 
> > is your technical reason?  The other systems will not be 
> > technically disadvantaged in anyway, and psp 
> > certainly doesn't muddy things up from a technical perspective.
> 
> The fact that mod_psp hasn't proved anything yet while other frameworks
> have seems a technical reason to me.
> 

That's a reason against bundling?  I can see that's a reason against
bundling PSP, but Rimon is talking about the chastity of mod_python
here.  

And btw, that's an advantage from a bundling perpsective - It doesn't
need to support legacy userbases, so the code itself is very malleable,
as witnessed by some of grisha's recent changes.

> What do you (as the mod_psp author) think of the remarks that have been
> made already by two people that a complete web application framework is
> much larger in scope than mod_python. This would mean that adding it to
> mod_python is like adding mod_python to the framework. At that time can
> only hope that the focus of mod_python doesn't shift from being a
> general and high performance Python layer for Apache to being the Apache
> enablement of mod_psp.
> 

I don't think that focus will switch.

For one thing, Rimon didn't have a problem with the "purity" of
mod_python when he proposed that spyce be integrated, it was only after
that fell through in private mail that he refocused the issue, and
brought it to the mailing lists.

PSP is a very small, very fast alternative, it doesn't preclude you from
using any of the listed solutions.  In fact you can use PSP in
conjunction with any of the solutions listed, or you can even ignore its
existence altogether and use something else, or code directly with
req.write().  There is *zero* performance loss if you choose to use
another option, like spyce.

As for the shift of development focus.  I'm touched Rimon cares so much
about how developers spend their time.  I guess only experience will
tell, but generally I think the people who develop mod_python are
capable of deciding what they want to spend their time on, and what
requires attention at the moment.  We don't need to be put in a crib so
that we don't chew on the electric cords.

If you want to re-invent the wheel, go for it!  Including Python with a
Linux distribution doesn't stop you from using PHP.  PSP is a common
feature request, and it lives as a standard module for the 99% of users
who just want a solution that works, and don't care how efficient '[['
is to type.  That doesn't mean alternatives aren't allowed and
encouraged, they just aren't bundled.

-Sterling

-- 
"C makes it easy to shoot yourself in the foot; C++ makes it harder,  
 but when you do, it blows away your whole leg." 
    - Bjarne Stroustrup
From barr at cs.cornell.edu  Mon Jun  9 13:05:18 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055170715.22155.44.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>

Dear Sterling,

On 9 Jun 2003, Sterling Hughes wrote:

>On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
>> > PSP is a python handler, distributed with mod_python.  There
>> > is a clear boundary between the two pieces of code.  I can
>> > see your political reasoning for not including PSP, but what
>> > is your technical reason?  The other systems will not be
>> > technically disadvantaged in anyway, and psp
>> > certainly doesn't muddy things up from a technical perspective.
>>
>> The fact that mod_psp hasn't proved anything yet while other frameworks
>> have seems a technical reason to me.
>
>That's a reason against bundling?  I can see that's a reason against
>bundling PSP, but Rimon is talking about the chastity of mod_python
>here.

I agree with Geert here, and also with Ian's prior email. PSP has not
proven itself, while other projects have. There are also prior projects
with that name and concept, that are many years older than mod_psp. Does
mod_psp even have any users yet?

>For one thing, Rimon didn't have a problem with the "purity" of
>mod_python when he proposed that spyce be integrated, it was only after
>that fell through in private mail that he refocused the issue, and
>brought it to the mailing lists.

First, please do not get personal. It's not necessary. I'm only trying
to help the OSS community, just like you. And, second, please don't
misquote me. I suggested to you, in that private email, that what you
were doing had similar goals to Spyce. And what I then suggested, to see
whether you were interested, is that you help with the Spyce parser. I
only wanted to combine efforts with you, so that we could build
something bigger and better. I saw that you were working on a C-based
parser for psp, and I asked you whether you were interested in working
on such a parser for the Spyce language. The rationale is that although
the parser does not matter much for performance, because the compiled
files are cached, it would be nice as an option for developers, since
the current Spyce parser is implemented in Python and is relatively
slow. I also, thinking that you work with the Apache Foundation, I
offered to donate Spyce to the AF. Donating to the AF does not mean, in
my mind, merging the Spyce and mod_python projects.

You seem to be attacking me as an individual rather than discussing the
idea. I'm not interested in this. I am only interested in making Python
a more web-friendly language, and I think mod_python is an important
project in this regard. I also don't have a Spyce agenda, as you seem to
imply. It's just a project that I work on, because I like it, and
because I wanted to implement some features that I didn't find in other
systems.

>PSP is a very small, very fast alternative, it doesn't preclude you from
>using any of the listed solutions.  In fact you can use PSP in
>conjunction with any of the solutions listed, or you can even ignore its
>existence altogether and use something else, or code directly with
>req.write().  There is *zero* performance loss if you choose to use
>another option, like spyce.

Ok, but will PSP be any faster than any of the other solutions?
Possibly. Perhaps you are a better designer, and that's great. But, if
it's because of its integration with mod_python, then this means that
there is something missing in the mod_python API, and we should expose
that functionality. I'm concerned that this will not be the focus of
mod_python any longer, just as it was not the focus of PHP. Have you
looked at the performance of PHP -- it took years to get it to where it
is currently, and it's still not great.

>As for the shift of development focus.  I'm touched Rimon cares so much
>about how developers spend their time.

Again with the personal attacks and sarcasm! Please...

>If you want to re-invent the wheel, go for it!  Including Python with a
>Linux distribution doesn't stop you from using PHP.  PSP is a common
>feature request, and it lives as a standard module for the 99% of users
>who just want a solution that works, and don't care how efficient '[['
>is to type.  That doesn't mean alternatives aren't allowed and
>encouraged, they just aren't bundled.

It seems to me, based on everything that is currently out there, that it
is you who are re-inventing the wheel.

BTW, Spyce supports the more common <% syntax as well.

You know, come to think of it... You're making the same bundling
arguments that I've heard used before to extend monopoly positions: it's
good for the user. How would you know what's good for the user without
any mod_psp users? Just a thought..

But, as I said earlier. I'm trying to help the OSS community, as are
you. So good luck, and thank you for your efforts.

All the best,
Rimon.

From sterling at bumblebury.com  Mon Jun  9 14:14:57 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
Message-ID: <1055182496.2853.59.camel@hasele>

On Mon, 2003-06-09 at 13:05, Rimon Barr wrote:
> Dear Sterling,
> 
> On 9 Jun 2003, Sterling Hughes wrote:
> 
> >On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> >> > PSP is a python handler, distributed with mod_python.  There
> >> > is a clear boundary between the two pieces of code.  I can
> >> > see your political reasoning for not including PSP, but what
> >> > is your technical reason?  The other systems will not be
> >> > technically disadvantaged in anyway, and psp
> >> > certainly doesn't muddy things up from a technical perspective.
> >>
> >> The fact that mod_psp hasn't proved anything yet while other frameworks
> >> have seems a technical reason to me.
> >
> >That's a reason against bundling?  I can see that's a reason against
> >bundling PSP, but Rimon is talking about the chastity of mod_python
> >here.
> 
> I agree with Geert here, and also with Ian's prior email. PSP has not
> proven itself, while other projects have. There are also prior projects
> with that name and concept, that are many years older than mod_psp. Does
> mod_psp even have any users yet?
> 

Well, I believe it actually has a few.  But again, I don't see your
point here?  Is your point that PSP is not the right library to bundle
or that no libraries in general should be bundled?  

> >For one thing, Rimon didn't have a problem with the "purity" of
> >mod_python when he proposed that spyce be integrated, it was only after
> >that fell through in private mail that he refocused the issue, and
> >brought it to the mailing lists.
> 
> First, please do not get personal. It's not necessary. I'm only trying
> to help the OSS community, just like you. And, second, please don't

Don't get personal?  This is not a personal attack.  And it is
*certainly* not off-topic.  I was just pointing out that you had
previously suggested the integration of Spyce into the fold.  I'm
pointing out that you might have other motives than the "purity" of
mod_python, and I think that's very relevant to the context of this
discussion.

> misquote me. I suggested to you, in that private email, that what you
> were doing had similar goals to Spyce. And what I then suggested, to see
> whether you were interested, is that you help with the Spyce parser. I
> only wanted to combine efforts with you, so that we could build
> something bigger and better. I saw that you were working on a C-based
> parser for psp, and I asked you whether you were interested in working
> on such a parser for the Spyce language. The rationale is that although
> the parser does not matter much for performance, because the compiled
> files are cached, it would be nice as an option for developers, since
> the current Spyce parser is implemented in Python and is relatively
> slow. I also, thinking that you work with the Apache Foundation, I
> offered to donate Spyce to the AF. Donating to the AF does not mean, in
> my mind, merging the Spyce and mod_python projects.
> 

I can certainly dig up the messages if need be.  It was my understanding
from the messages that you wished to donate your code to the ASF, so it
could be included in mod_python.  Which certainly seems to make more
sense then donating your sources to the ASF, just so that I'm able to
work on them (especially when I never made that an issue).


> You seem to be attacking me as an individual rather than discussing the
> idea. I'm not interested in this. I am only interested in making Python
> a more web-friendly language, and I think mod_python is an important
> project in this regard. I also don't have a Spyce agenda, as you seem to
> imply. It's just a project that I work on, because I like it, and
> because I wanted to implement some features that I didn't find in other
> systems.

I'm not attacking you personally, but its convient to paint it that
way.  Your claim is that you have no spyce agenda, excuse me if I find
that quite hard to swallow.  Especially since out of the many lists you
Cc'ed, spyce really has the most to lose.

What is your point by the way?  From what I read, it seems to me that
your point is: 'Spyce will be adversely affected because people will use
the bundled solution.'[1]  Whenever people start using purity as an
argument in and of itself, its a good sign the issue hasn't been in the
crucible long enough.

If you don't want to bring yourself into the argument, then make some
technical claims against it.  Instead of being the maurder who doesn't
want mod_python to be defiled.  You still haven't explained why:

a) Including PSP disadvantages other solutions from a *technical*
perspective.
b) What is wrong with PSP from a technical perspective?  Have you
encountered any bugs when using PSP?  What do you think can be improved?
c) What problems you've had with mod_python since PSP was integrated

> 
> >PSP is a very small, very fast alternative, it doesn't preclude you from
> >using any of the listed solutions.  In fact you can use PSP in
> >conjunction with any of the solutions listed, or you can even ignore its
> >existence altogether and use something else, or code directly with
> >req.write().  There is *zero* performance loss if you choose to use
> >another option, like spyce.
> 
> Ok, but will PSP be any faster than any of the other solutions?
> Possibly. Perhaps you are a better designer, and that's great. But, if

>From the benchmarks I've seen its much faster. But I didn't make that
claim.  I just claimed it was fast, which is subjective (but i think it
is, so there ;-).  

> it's because of its integration with mod_python, then this means that
> there is something missing in the mod_python API, and we should expose
> that functionality. I'm concerned that this will not be the focus of

It doesn't at all take advantage of the mod_python api in anyway than
any other module does.  PSP is a pure python module, with the parser 
written in C (with flex.)  

> mod_python any longer, just as it was not the focus of PHP. Have you
> looked at the performance of PHP -- it took years to get it to where it
> is currently, and it's still not great.
> 

Have I looked at the performance?  I'm a PHP core developer for god
sakes :)  PHP btw, is a language that has become popular because of its
ability to provide a solution for a broad variety of web problems.

And btw, as for PHP's performance.  Its good enough for Yahoo! :)

> >As for the shift of development focus.  I'm touched Rimon cares so much
> >about how developers spend their time.
> 
> Again with the personal attacks and sarcasm! Please...
> 

Gosh, you're touchy.   I'm not personally attacking you, just pointing
out that your primary concern is probably not how I spend my time.

> >If you want to re-invent the wheel, go for it!  Including Python with a
> >Linux distribution doesn't stop you from using PHP.  PSP is a common
> >feature request, and it lives as a standard module for the 99% of users
> >who just want a solution that works, and don't care how efficient '[['
> >is to type.  That doesn't mean alternatives aren't allowed and
> >encouraged, they just aren't bundled.
> 
> It seems to me, based on everything that is currently out there, that it
> is you who are re-inventing the wheel.
> 

Well, isn't your point that people should reinvent the wheel - that's
how better solutions evolve?

> BTW, Spyce supports the more common <% syntax as well.
> 

I know, I was joking :)

> You know, come to think of it... You're making the same bundling
> arguments that I've heard used before to extend monopoly positions: it's
> good for the user. How would you know what's good for the user without
> any mod_psp users? Just a thought..
> 

Again with the personal attacks and sarcasm! Please... ;-)

Well, I'm not the only one who thinks this way.  But I would think being
a core developer of a web scripting language that powers 12 million
domains might give me a little inkling (how many users does spyce have
btw?).  I also think the fact that grisha thought it was a good idea to
adopt PSP might lend me a bit more credibility.  

But what's your argument here anyway - screw the users, viva la spyce?
;-) 

-Sterling
-- 
"That stuff's easy compared to installing Horde" 
    - Alan Knowles, In response to my applause for creating a LALR 
    parser for PHP.
From matt at pollenation.net  Mon Jun  9 19:39:07 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE434A2.6080409@sjsoft.com>
References: <3EE3D10E.32463.10230FF7@localhost>
	 <3EE434A2.6080409@sjsoft.com>
Message-ID: <1055183947.3960.6.camel@localhost>

I used this to get started, very helpful:

	http://www.python.org/cgi-bin/moinmoin/WebProgramming

- Matt

On Mon, 2003-06-09 at 08:17, David Fraser wrote:
> Gre7g Luterman wrote:
> 
> In fact, maybe what we need is just a nice "map" to all the frameworks, 
> explaining each one's focus, and giving a short code example for each...
> That would be a first step to helping people find what they need
> 
> David
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From tpc at csua.berkeley.edu  Mon Jun  9 11:39:10 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] python print
Message-ID: <20030609105857.C11138-100000@localhost.name>


Hello, I have a script meant to be run from the command line that for each
command line argument, iterates through the characters, returns the value
from a dictionary, and prints out the joined string with no spaces:

<code>
#!/usr/bin/env python

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine'
        }

for argument in sys.argv[1:]:
    print ''.join([dict1[character] for character in argument])
    print '\n'

</code>

I know 'print' and 'echo' are not valid in mod python, and I have tried:

<code>
def convert(numbers):
    for argument in numbers:
        w = ''.join([dict1[character] for character in argument])
        return w
</code>

although 'return' seems to exit after the first character.  I have also
tried:

<code>
x = []
def convert(numbers):
    for argument in numbers:
        x.append([dict1[character] for character in argument])
    return x
</code>

although I get a KeyError.
Is there a mod python alternative to 'print' so I may simply substitute ?

From fitnah55 at hotmail.com  Mon Jun  9 14:44:55 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] need working fix for 'import site' aka 'ImportError'
	aka'make_obcallback' error
In-Reply-To: <000101c32e5f$66cb0da0$18c0c20a@computer>
Message-ID: <000001c32eb7$380f1030$18c0c20a@computer>


this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required
for passwd, so there's no way (even with a completely minimal install)
to
run w/o a python carcass laying around w/o screwing things up a bit one
way
or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From todd at slack.net  Mon Jun  9 14:58:24 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
	<1055182496.2853.59.camel@hasele>
Message-ID: <20030609145824.C17197@crank.slack.net>


Hi,

A bit of 3rd-party arbitration re: spyce/folding/"bundling":

If all *SP-type modules are on equal technical footing regarding access to APIs and integration, this is a completely political/marketing situation. From the bit I've gleaned out of this thread, that is indeed the case.

As an (I believe) relevant comparison, JSP is the "blessed" approach from Sun for java - that has not stopped others from arising, i.e. Velocity, Tapestry, etc., and newer libraries such as JSTL which I believe(?) are the result of good ideas being contributed and then embraced by the community, and "adopted" by the official group (Sun).

Will PSP gain a bit of an (initial) edge in visiblity over other templating modules on mod_python? Most certainly, but the combination of the increased visiblity of this feature "officially" available with mod_python, and the ease and equal technical footing of adding any of many other modules to accomplish this I think is win-win. I'd bet (if I was a betting man) that the number of new people an "official" templating module distributed with mod_python will attract would *increase* the number of users of the other packages as well - Spyce, Cheetah, wt, etc. etc.

Just my opinions as a newcomer here struggling to choose from 31 flavors - and at least this is all debating between a number of good options and not a search for just one elusive "OK" option...

-- 

___________________________
toddgrimason*todd@slack.net


From tpc at csua.berkeley.edu  Mon Jun  9 12:25:02 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] python print
In-Reply-To: <1055185349.10716.30.camel@localhost>
Message-ID: <20030609121231.L11532-100000@localhost.name>


Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
The KeyError is generated when mod python encounters the space when I
submit multiple sequences of numbers, which is why I had the 'for
argument in numbers' which in command line mode delimits arguments but as
a POST seems to break the code.  I could always put a value in dict1
where:

 ' ' : '/n',
 ',' : '/n'

On 9 Jun 2003, Scott Russell wrote:

> On Mon, 2003-06-09 at 14:39, tpc@csua.berkeley.edu wrote:
>
> >Hello, I have a script meant to be run from the command line that
> > for each command line argument, iterates through the characters,
> > returns the value from a dictionary, and prints out the joined
> > string with no spaces:
>
> <snip>
>
> I'm new on the list, but this looks like a python issue, not a
> mod_python issue.  Your middle example should work fine, when you stop
> returning in the middle of it:
>
> def convert(numbers):
>    w = ""
>    for argument in numbers:
>        W += ''.join([dict1[character] for character in argument])
>    return w
>
> Do I not understand the problem?  Note, I wrote this with the assumption
> that you were passing a sequence (list, tuple, dict) of character
> strings, as your second and third examples seem to.  Your original
> "print" code did not make this assumption.
>
> BTW, I would expect you to get keyerrors if you're not validating inputs
> - this code doesn't check for exceptions at all.
>
> - Scott
>
>

From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 13:41:00 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] python print
In-Reply-To: <20030609105857.C11138-100000@localhost.name>
Message-ID: <3EE48E6C.9546.FEFE5B@localhost>

On 9 Jun 2003 at 11:39, tpc@csua.berkeley.edu wrote:

<snipped>

> although 'return' seems to exit after the first character.

You have two options, one is assemble all the text you want to output 
in a single variable:

A = "one"
A += "two"
A += "three"
return A

or use the write statement:

req.write("one")
req.write("two")
req.write("three")

I think you may even be allowed to:

print >> req, "one"
print >> req, "two"
print >> req, "three"

Which is very similar to using the write statement.

Gre7g.Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From jgardner at jonathangardner.net  Mon Jun  9 13:51:05 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] python print
In-Reply-To: <3EE48E6C.9546.FEFE5B@localhost>
References: <3EE48E6C.9546.FEFE5B@localhost>
Message-ID: <200306091351.06895.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:41, Gre7g Luterman wrote:
> I think you may even be allowed to:
>
> print >> req, "one"
> print >> req, "two"
> print >> req, "three"
>
> Which is very similar to using the write statement.
>

If you get tired of print >> req, give this a try:

sys.stdout = req
print "one"
print "two"
print "three"

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5PM5WgwF3QvpWNwRAviBAKDnFOtnyTLCxv0BYwwhD5msPIPRGgCguVeH
SOmHE6OBt5QMTBtQqB7R6Qs=
=7cZI
-----END PGP SIGNATURE-----

From fitnah55 at hotmail.com  Mon Jun  9 17:30:45 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32eb7$380f1030$18c0c20a@computer>
Message-ID: <000001c32ece$6341c060$18c0c20a@computer>


does anyone who actually has apache2/mod_python3 working even read this
list?


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 2:45 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error



this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required for passwd, so there's no way (even with a completely minimal
install) to run w/o a python carcass laying around w/o screwing things
up a bit one way or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From tpc at csua.berkeley.edu  Mon Jun  9 14:37:28 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:00:07 2004
Subject: [mod_python] need working fix for 'import site' aka
 'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609143523.T12439-100000@localhost.name>


> -----
> 'import site' failed; use -v for traceback
> ImportError: No module named mod_python.apache
> [Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
> mod_python.apache.
> -----
>


I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke in
the first place.

From fitnah55 at hotmail.com  Mon Jun  9 18:26:40 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609143523.T12439-100000@localhost.name>
Message-ID: <000001c32ed6$3279d4b0$18c0c20a@computer>


nothing works!!!

tried reinstalling a couple different ways, no dice



-----Original Message-----
From: tpc@csua.berkeley.edu [mailto:tpc@csua.berkeley.edu] 
Sent: Monday, June 09, 2003 5:37 PM
To: kevin douglas
Cc: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error

I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke
in the first place.

From grisha at modpython.org  Mon Jun  9 18:58:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] python print
In-Reply-To: <200306091351.06895.jgardner@jonathangardner.net>
Message-ID: <20030609185646.S97880-100000@oldchief.reply.net>



On Mon, 9 Jun 2003, Jonathan Gardner wrote:

> If you get tired of print >> req, give this a try:
>
> sys.stdout = req
> print "one"
> print "two"
> print "three"
>

A word of caution - just like chdir(), this is not thread safe since there
is only one stdout per interpreter which could be executing multiple
threads simutaneously.

Grisha

From barr at cs.cornell.edu  Mon Jun  9 19:31:43 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055182496.2853.59.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091428200.29506-100000@glengoyne.cs.cornell.edu>

Dear Sterling,

>Well, I believe it actually has a few.  But again, I don't see your
>point here?  Is your point that PSP is not the right library to bundle
>or that no libraries in general should be bundled?

Both. I'm not sure that PSP is the right library to bundle (if you must
bundle something) because it needs to be measured against a *LOT* of
existing work which seems to be going ignored. See:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming, or
  http://spyce.sourceforge.net/doc-add_related.html
Even the name PSP has been used at least twice already. Why are none of
these, more mature projects being folded into mod_python instead of
developing something new?

However, for reasons stated in previous emails and others stated below,
I think that it would be even better to not include any library, and
simply make it simple to extend mod_python with application frameworks
or languages, by standardizing the Apache Python infrastructure.

>I'm not attacking you personally, but its convient to paint it that
>way.  Your claim is that you have no spyce agenda, excuse me if I find
>that quite hard to swallow.  Especially since out of the many lists you
>Cc'ed, spyce really has the most to lose.

I'm contributing code to the public domain in good will. I don't have an
agenda, and I'm not sure why that's hard to swallow. I wrote the code
for myself, and I found it useful. So, I released it so that others
could benefit too. It's users that win or lose, not Spyce. Nowadays, I
spend some free time maintaining the project, but I am not backed by any
company or foundation. It's not my work or research. I'm not planning to
write a book. It's just a small hobby of mine, and sometimes it's even a
bit of a headache to maintain the uninteresting parts. I'm happy to
share it with any others who are interested. I imagine that your
intentions in writing mod_psp are similar.

>If you don't want to bring yourself into the argument, then make some
>technical claims against it.  Instead of being the maurder who doesn't
>want mod_python to be defiled.  You still haven't explained why:
>
>a) Including PSP disadvantages other solutions from a *technical*
>   perspective.

- PSP will inevitably become bigger than mod_python and mod_python may
start to look like the PHP project did a few years ago before the focus
on Zend and PEAR finally emerged. - mod_python may start developing
special "fast" hooks to the PSP engine, that will not be properly
exposed and tested against other frameworks. - Release deadlines and bug
fixes will be end up being oriented around mod_psp changes, rather than
around fundamental changes to the framework making the versioning of the
framework more complex, and thereby also integration of other frameworks
that are not as closely bound to it as mod_psp. ... etc.

>b) What is wrong with PSP from a technical perspective?  Have you
>   encountered any bugs when using PSP?  What do you think can be improved?

I don't know where to start... How about here:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming ?
mod_psp is quite a late-comer to this space. Spyce is too, actually.
But mod_psp hasn't even scratched the surface compared to some of the
other projects out there. Or, if you're looking for something "simpler",
then there's lots of simple projects too.

I performed an extensive search before starting out on Spyce, and I
implemented Spyce only because I wanted spyce lambda functions, modules,
and active tags. I think they are useful; you told me that you thought
lambdas were cool too. :) I simply didn't see them anywhere else when I
started working on the project.

>c) What problems you've had with mod_python since PSP was integrated

None, but that's also because I haven't used the newest code. You see,
for me there's no need to upgrade, because there haven't been many
significant changes (from the Spyce interface perspective) to the core
framework. I like it when the infrastructure is efficient and stable:
see (b).

>It doesn't at all take advantage of the mod_python api in anyway than
>any other module does.  PSP is a pure python module, with the parser
>written in C (with flex.)

That's quite interesting. So, by your own admission, you don't really
gain any technical benefit from integration? Ok, then what's the good
reason to integrate, technical or otherwise? Is it just because you can,
being a member of the Apache Foundation and all? If it's merely to
attract users through bundling, then that's an abuse, especially since
there are so many other frameworks out there, that are far more mature
than mod_psp. Don't get me wrong... Please do continue developing
mod_psp, or join one of the other efforts. The issue is not that. It's
the folding of the projects.

Why not sideline this entire issue and be inclusive by creating a nice
standard extension mechanism, a repository of mod_python compatible
modules, a prominent placement on the Apache website, etc.? A modular
design, after all, is the design of Apache, and it has been pretty
successful, I think. Have the Apache and the PHP code bases been
"folded" yet? Why not? PHP is the most popular language used within
Apache! The argument here is similar, I believe.

I know that the AF is trying to move away from language specific
extensions, but it would be nice also to have a website for mod_python
that looked like Jakarta, or mod_tcl, or mod_perl. It would help a lot
to attract users, if that is your interest. BTW, the mod_tcl guys
decided to separate mod_tcl from Rivet. mod_perl went one step further
and created a repository of mod_perl compatible modules and also a
section with code library contributed by the user community.

>I'm a PHP core developer for god sakes :) [...]

I sincerely respect your experience as a core mod_php developer and
congratulate you. PHP is a wonderful project and a run-away success. I
hope that your input to the Python web community will be equally
dramatic.

All the best,
Rimon.


From mod_python at mikebell.org  Mon Jun  9 16:54:24 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609235423.GI20628@netvista.mikebell.org>

On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?

Yup, works just fine for me, never had such a problem, with worker or
prefork.
From gnb at itga.com.au  Tue Jun 10 11:10:23 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error 
In-Reply-To: Your message of Mon, 09 Jun 2003 17:30:45 -0400.
Message-ID: <200306100110.LAA01683@lightning.itga.com.au>

>does anyone who actually has apache2/mod_python3 working even read this
>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:15:37 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <200306100110.LAA01683@lightning.itga.com.au>
Message-ID: <000001c32ef6$2e8beb20$18c0c20a@computer>

I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:32:21 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] need working fix for 'import site'
	aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef6$2e8beb20$18c0c20a@computer>
Message-ID: <000001c32ef8$84cb50f0$18c0c20a@computer>

when I do an strace on httpd like it says with that no obCallBack error
in
the faq (a different problem than i am having anyway), there's not even
a
reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:04:43 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] need working fix for 'import
	site'aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef8$84cb50f0$18c0c20a@computer>
Message-ID: <000001c32efd$0a4ce140$18c0c20a@computer>


if I do an 'apachectl restart' several times, the amount of 'import
site'
errors grows accordingly :p

four restarts and its 7 times... five restarts and its 8 times... six
restarts
and its 9 times:

[Sun Jun 08 19:00:52 2003] [error] make_obcallback: could not import
mod_python.apache.

-----

'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 19:00:52 2003] [notice] SIGHUP received.  Attempting to
restart
[Sun Jun 08 19:00:53 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming normal operations

-----

to make matters worse, it worked once for no reason - and mod_python
just
displayed the 'test' handler as plaintext:

[Sun Jun 08 18:56:32 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming 
normal operations
[Sun Jun 08 18:56:50 2003] [notice] mod_python: (Re)importing module
'test'

now i can't get it to work again and nothing changed between the three
or
four start/restarts..



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:32 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import
site'aka'ImportError'aka'make_obcallback' error


when I do an strace on httpd like it says with that no obCallBack error
in the faq (a different problem than i am having anyway), there's not
even a reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:38:36 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] 
	working fix [FAQ: 'import site' failed; use -v for traceback]
In-Reply-To: <000001c32efd$0a4ce140$18c0c20a@computer>
Message-ID: <000501c32f01$c6600480$18c0c20a@computer>


as stated in the make_obcallback FAQ entry, this is a sys.path
problem...

the main problem (i believe) is that the path that is available at
runtime is not always the same as it was with the previous run of
apache

with a linux distro that requires python as part of the base install
(even
with a minimal install) - the python in /usr is going to supercede
the python in /usr/local even if the path properly includes /usr/lib
and site-packages/mod_python is pointed to properly

what you should do is axe all the python rpm's that you can
(python-base is required for libuser which is required for passwd)
and then take the file list from python-base and manually delete it
(/usr/lib/python2.2 and /usr/bin/python)

this will free up the proper /usr/local/lib/python2.2 to be first in
line in the path

what's confusing is that you link to /usr/local/bin/python2.2 explicitly
to compile mod_python, but it still ends up with /usr/lib/python2.2
as the primary lib source... and even if you get the paths added as the
other FAQ entry states - you're still going to be running the old
site.py from /usr/lib...

and to make matters even worse sometimes it randomly decides to work
even before you axe the default distro install..

:o



kd
From jafo at tummy.com  Mon Jun  9 23:59:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <20030610055927.GB28085@tummy.com>

I've been trying to build a web application system using mod_python, and
I've been running into some weirdness.  Some of it is just sporadic
behavior, some of it seems to be pretty consistent.  Before I get
started, my main development system is running Red Hat 9 with Python
2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
3.0.3.

Basically, I'm building up a package that contains my system.  In it I
have a module which contains my handler:

   AddHandler python-program .html
   PythonHandler jotweb.jotweb_mod_python::handler

Basically, my handler is using SimpleTAL to parse some HTML, which will
result in my code getting called, which will import things from the
jotweb package:

   fileName = path + '.py'
   fp = open(fileName, 'r')
   module = imp.load_source(path, fileName, fp)

So, basically, I am trying to load a module from a specific file.

The first problem I'm seeing is that imports are just weird.  For
example, if I have code which does "import jotweb.input.Request",
unless my __init__.py in jotweb/input includes:

   import Request

I will get an error to the effect that the module object contains no
element "Request".  Of course, from a regular Python program, I can do
"import jotweb.input.Request" just fine either way.

Basically, because of the above, my entire code-base has to be imported
when you do an "import jotweb".

Further, I'm running into weird issues with headers_out.  If from my
jotweb_mod_python.handler code I do:

   req.headers_out.add('key', 'value')

it will properly add the specified header.  And if this code is executed
from the module that is imported as above, it seems to work.  If,
however, in this imported module I do:

   import jotweb
   jotweb.auth.Sessions.processLogin()

where "processLogin()" gets a handle to the request object and does
req.headers_out.add(), the headers aren't showing up in my browser.
HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
same URL that I issued in the GET request, the headers are *NOT* getting
return as far as I can tell (no cookie is getting set, doing "View
Documenat Information" shows not those headers, but if I set headers in
my main mod_python handler, it WILL show it.

I've verified that the call to headers_out.add() is happening by adding
a syslog before it, it's definitely calling that code.

It seems like at some point something is making it so that
headers_out.add() doesn't work any more.  Would pulling the form data
out of the request cause that?  Any thoughts on why the imports seem to
work quite differently on a name-space basis from how they happen from
the interpreter:

   AttributeError: 'module' object has no attribute 'input'

Is there something about being in mod_python that makes it a "toy"
interpreter in some ways, that mean I'm constantly going to be bumping
into weird things?

Thoughts?

Thanks,
Sean
-- 
 I like to be different, so I built a lowercase a-frame house.
                 -- Sean Reifschneider, 2000
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 09:04:12 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609235423.GI20628@netvista.mikebell.org>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
	<20030609235423.GI20628@netvista.mikebell.org>
Message-ID: <3EE582EC.3070901@sjsoft.com>

mod_python@mikebell.org wrote:

>On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
>  
>
>>does anyone who actually has apache2/mod_python3 working even read this
>>list?
>>    
>>
>
>Yup, works just fine for me, never had such a problem, with worker or
>prefork.
>  
>
Works fine for me too.
When I had problems with import site in apache1.3/mod_python2, what I 
did was go and patch the mod_python source code to dump traces of 
variables at various points ... that helped me clean up exactly how it 
worked... to start off, I hardcoded a PythonPath inside mod_python 
because I couldn't work out why it didn't seem to work. Maybe you could 
try a similar approach?

David

From davidf at sjsoft.com  Tue Jun 10 09:12:46 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610055927.GB28085@tummy.com>
References: <20030610055927.GB28085@tummy.com>
Message-ID: <3EE584EE.9090503@sjsoft.com>

Sean Reifschneider wrote:

>I've been trying to build a web application system using mod_python, and
>I've been running into some weirdness.  Some of it is just sporadic
>behavior, some of it seems to be pretty consistent.  Before I get
>started, my main development system is running Red Hat 9 with Python
>2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
>3.0.3.
>
>Basically, I'm building up a package that contains my system.  In it I
>have a module which contains my handler:
>
>   AddHandler python-program .html
>   PythonHandler jotweb.jotweb_mod_python::handler
>
>Basically, my handler is using SimpleTAL to parse some HTML, which will
>result in my code getting called, which will import things from the
>jotweb package:
>
>   fileName = path + '.py'
>   fp = open(fileName, 'r')
>   module = imp.load_source(path, fileName, fp)
>
>So, basically, I am trying to load a module from a specific file.
>  
>
Do you mean you're using this import mechanism when you have the problem 
with jotweb.input.Request below?

>The first problem I'm seeing is that imports are just weird.  For
>example, if I have code which does "import jotweb.input.Request",
>unless my __init__.py in jotweb/input includes:
>
>   import Request
>
Have you tried using __all__ = [Request, ...] in __init__.py ?

>I will get an error to the effect that the module object contains no
>element "Request".  Of course, from a regular Python program, I can do
>"import jotweb.input.Request" just fine either way.
>
>Basically, because of the above, my entire code-base has to be imported
>when you do an "import jotweb".
>
mod_python does have some import hooks to handle things specially, but 
I'm not an expect here, someone else will have to comment...

>Further, I'm running into weird issues with headers_out.  If from my
>jotweb_mod_python.handler code I do:
>
>   req.headers_out.add('key', 'value')
>
>it will properly add the specified header.  And if this code is executed
>from the module that is imported as above, it seems to work.  If,
>however, in this imported module I do:
>
>   import jotweb
>   jotweb.auth.Sessions.processLogin()
>
>where "processLogin()" gets a handle to the request object and does
>req.headers_out.add(), the headers aren't showing up in my browser.
>HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
>same URL that I issued in the GET request, the headers are *NOT* getting
>return as far as I can tell (no cookie is getting set, doing "View
>Documenat Information" shows not those headers, but if I set headers in
>my main mod_python handler, it WILL show it.
>
>I've verified that the call to headers_out.add() is happening by adding
>a syslog before it, it's definitely calling that code.
>
How do you pass the request object into processLogin (it doesn't seem to 
be part of the call)?
It seems like you may be trying to use an old request object or something...

>It seems like at some point something is making it so that
>headers_out.add() doesn't work any more.  Would pulling the form data
>out of the request cause that?  Any thoughts on why the imports seem to
>work quite differently on a name-space basis from how they happen from
>the interpreter:
>
Pulling the form data won't cause it, but writing anything to the 
request will (it automatically outputs the headers as soon as any 
content is written).

>
>   AttributeError: 'module' object has no attribute 'input'
>
>Is there something about being in mod_python that makes it a "toy"
>interpreter in some ways, that mean I'm constantly going to be bumping
>into weird things?
>
No. But it is a bit more complex running a python interpreter inside 
Apache than standalone.

>Thoughts?
>
Hope that helps,

David


From jafo at tummy.com  Tue Jun 10 02:14:22 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE584EE.9090503@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
Message-ID: <20030610081422.GC28085@tummy.com>

On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>Do you mean you're using this import mechanism when you have the problem 
>with jotweb.input.Request below?

I mean that the imp module call is loading a module which then does an
"import jotweb.input".  If in the jotweb I don't have the __init__.py
import all sub-packages or sub-modules, I will get an AttributeError
such as:

  AttributeError: 'module' object has no attribute 'input'

>>  import Request
>Have you tried using __all__ = [Request, ...] in __init__.py ?

I believe I did try that at one point, but it's my understanding that
setting "__all__" only has an impact if you do "from jotweb import *",
which I don't do anywhere.  Also, as I said before, I can import the
code fine outside of mod_python.  "python -c 'import jotweb.input'", for
example...

>mod_python does have some import hooks to handle things specially, but 
>I'm not an expect here, someone else will have to comment...

I wonder if I'm running into something there.  I've tried simplifying it
to:

   include current directory in path
   module = __import__(basename, globals(), locals(), [])
   return sys.path to old layout

that doesn't really seem to help the problem with imports though...

>How do you pass the request object into processLogin (it doesn't seem to 
>be part of the call)?
>It seems like you may be trying to use an old request object or something...

The request object is stored into a module, where other parts of my
system will pick it up when they need either the headers or the request.

I've verified that the id() of the header_out object is the same in the
higher-level and lower-level code.  I'm not calling request.write()
anywhere except at the end of my top-level code, nor am I doing a print
anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
to access the Apache request object, but maybe it's doing a print?

>No. But it is a bit more complex running a python interpreter inside 
>Apache than standalone.

Sure, I understand that, and I'm ok with it being more complicated.  I'm
just not happy about running into sporadic problems where sometimes
things work, sometimes they don't.

For example, *ANY* time I submit a request for a URL via a telnet
connection, I get the headers back:

   guin:jafo$ telnet 127.0.0.1 80
   Trying 127.0.0.1...
   Connected to 127.0.0.1.
   Escape character is '^]'.
   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0

   HTTP/1.0 200 OK
   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
   Cache-control: max-age=0
   Expires: Thu, 01 Dec 1994 16:00:00 GMT
   Content-Length: 405
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

   [...]

If I paste the URL:

   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1

into Konqueror, the headers I'm getting back are:

   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

(according to Konqueror).  I've tried Mozilla and galeon as well, all
with similar results.  Yes, I have cookies enabled from localhost.  If I
put the headers_out.add() at the top of my handler, it showes up in
Konqueror's "View Page Info" output...

Sean
-- 
 Do you think reading about cowboys is sufficient to ride a horse?
 Like horses, real programs tend to throw you.  -- John Shipman, 1997
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 12:46:41 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610081422.GC28085@tummy.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com>
Message-ID: <3EE5B711.5080408@sjsoft.com>

Sean Reifschneider wrote:

>On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>  
>
>>Do you mean you're using this import mechanism when you have the problem 
>>with jotweb.input.Request below?
>>    
>>
>I mean that the imp module call is loading a module which then does an
>"import jotweb.input".  If in the jotweb I don't have the __init__.py
>import all sub-packages or sub-modules, I will get an AttributeError
>such as:
>
>  AttributeError: 'module' object has no attribute 'input'
>  
>
>>> import Request
>>>      
>>>
>>Have you tried using __all__ = [Request, ...] in __init__.py ?
>>    
>>
>I believe I did try that at one point, but it's my understanding that
>setting "__all__" only has an impact if you do "from jotweb import *",
>which I don't do anywhere.  Also, as I said before, I can import the
>code fine outside of mod_python.  "python -c 'import jotweb.input'", for
>example...
>  
>
>>mod_python does have some import hooks to handle things specially, but 
>>I'm not an expect here, someone else will have to comment...
>>    
>>
>I wonder if I'm running into something there.  I've tried simplifying it
>to:
>
>   include current directory in path
>   module = __import__(basename, globals(), locals(), [])
>   return sys.path to old layout
>
>that doesn't really seem to help the problem with imports though...
>  
>
Hmmm ... sorry, no further ideas here...

>>How do you pass the request object into processLogin (it doesn't seem to 
>>be part of the call)?
>>It seems like you may be trying to use an old request object or something...
>>    
>>
>
>The request object is stored into a module, where other parts of my
>system will pick it up when they need either the headers or the request.
>  
>
Might need to be careful of thread safety etc here...

>I've verified that the id() of the header_out object is the same in the
>higher-level and lower-level code.  I'm not calling request.write()
>anywhere except at the end of my top-level code, nor am I doing a print
>anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
>to access the Apache request object, but maybe it's doing a print?
>
I don't know much about SimpleTAL, but from what you've described, 
that's where you need to investigate ...
Try wrapping the req object in another one which logs any calls to 
req.write and then pass that through to SimpleTAL?

>>No. But it is a bit more complex running a python interpreter inside 
>>Apache than standalone.
>>    
>>
>
>Sure, I understand that, and I'm ok with it being more complicated.  I'm
>just not happy about running into sporadic problems where sometimes
>things work, sometimes they don't.
>
>For example, *ANY* time I submit a request for a URL via a telnet
>connection, I get the headers back:
>
>   guin:jafo$ telnet 127.0.0.1 80
>   Trying 127.0.0.1...
>   Connected to 127.0.0.1.
>   Escape character is '^]'.
>   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0
>
>   HTTP/1.0 200 OK
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
>   Cache-control: max-age=0
>   Expires: Thu, 01 Dec 1994 16:00:00 GMT
>   Content-Length: 405
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>   [...]
>
>If I paste the URL:
>
>   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1
>
>into Konqueror, the headers I'm getting back are:
>
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>(according to Konqueror).  I've tried Mozilla and galeon as well, all
>with similar results.  Yes, I have cookies enabled from localhost.  If I
>put the headers_out.add() at the top of my handler, it showes up in
>Konqueror's "View Page Info" output...
>
Yikes ... bizarre ... no ideas other than setting up something that 
watches the actual socket through which the message goes, to see what 
the difference is

Hope somebody else can help...
David

From jafo at tummy.com  Tue Jun 10 04:58:26 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE5B711.5080408@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com> <3EE5B711.5080408@sjsoft.com>
Message-ID: <20030610105826.GD28085@tummy.com>

On Tue, Jun 10, 2003 at 12:46:41PM +0200, David Fraser wrote:
>I don't know much about SimpleTAL, but from what you've described, 
>that's where you need to investigate ...

Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
it to be.  It'd be nice if in debug mode mod_python would throw an
exception or something if you tried adding headers after there had been
a write.

I'm still looking for information on the weird importing issues
though...  One other thing on that front is that to even get started I
found that at the top-level of my main mod_python handler, I had to add:

   from encodings import latin_1
   from encodings import iso8859_1

or I just couldn't use the SimpleTAL code in my handler -- it would fail
related to encodings.  They can't be imported at other times, they
already have to be there.  This seems to be similar in nature to the
weird ness I'm seeing importing my own modules, but I can't find any
mod_python documentation about how import is weird or broken under
mod_python.

Thanks,
Sean
-- 
 Well son, a funny thing about regret is that it's better to regret something
 you HAVE done than regret something you haven't done.
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mike.looijmans at asml.com  Tue Jun 10 13:23:43 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <01c32f42$bfe04980$926a1e6e@wsasd464>

>Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
>it to be.  It'd be nice if in debug mode mod_python would throw an
>exception or something if you tried adding headers after there had been
>a write.


You could do this at runtime without having to patch the mod_python code, in
the handler just do:

def handler(req):
    req.write = mywrite
    req.header_out = myheaderout(req)

def mywrite(self, data):
    self.write(data)
    self.headers_sent = 1

class myheaderout():
    ... # init stuff
    def __init__(self, req):
        self.req = req
        self.__get__ = req.header_out.__get__
        # etc. etc.
    def __set__(self, key, value):
        if self.req.headers_sent:
            raise EHeadersSent
        req.header_out[key] = value






-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From jgardner at jonathangardner.net  Tue Jun 10 06:35:43 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] python print
In-Reply-To: <20030609121231.L11532-100000@localhost.name>
References: <20030609121231.L11532-100000@localhost.name>
Message-ID: <200306100635.47755.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> Dear Mr. Russell, thank you I forgot about '+=', which did the trick.

One more thing I thought you might want to know about. There are really two 
ways to go about concatenating stuff to the end of strings:

A)
	s = "something"
	s += "something more"
	...
	print s

B)
	s = []
	s.append('something')
	s.appent('something more')
	...
	print "".join(s)

B is far more efficient than A. This really shows up when you are 
concatenating hundreds or more elements. Anything below that, it really 
doesn't make too much of a difference.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
oDZOcz6mtB1hiavXnelVodo=
=oy+6
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 09:49:23 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>

I'll give a second on ezt.py; even though Albatross is my first choice.
Ezt.py follows many of the same ideals of Albatross when it comes to
templates, and also is not geared only for the web like albatross so it
can be handly in other apps too.

I use edna and ViewCVS daily and found no trouble customizing both with
the ezt.py module.

(which btw, both are great pojects!)

From scott at towngeek.com  Tue Jun 10 10:49:54 2003
From: scott at towngeek.com (Scott Russell)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] python print
In-Reply-To: <200306100635.47755.jgardner@jonathangardner.net>
References: <20030609121231.L11532-100000@localhost.name>
	 <200306100635.47755.jgardner@jonathangardner.net>
Message-ID: <1055256594.1995.15.camel@localhost>

Momma always says, "Make sure you can read it first, only optimize it
after you profile." :)

On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> > Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
> 
> One more thing I thought you might want to know about. There are really two 
> ways to go about concatenating stuff to the end of strings:
> 
> A)
> 	s = "something"
> 	s += "something more"
> 	...
> 	print s
> 
> B)
> 	s = []
> 	s.append('something')
> 	s.appent('something more')
> 	...
> 	print "".join(s)
> 
> B is far more efficient than A. This really shows up when you are 
> concatenating hundreds or more elements. Anything below that, it really 
> doesn't make too much of a difference.
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
> oDZOcz6mtB1hiavXnelVodo=
> =oy+6
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mmckerns at its.caltech.edu  Tue Jun 10 08:53:41 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] importing errno
Message-ID: <Pine.GSO.4.44.0306100849110.18061-100000@clyde>

The following is a problem with the RedHat8 rpm's, but
also may apply to the source.  I thought I'd kick it out
to see if somebody has gone through this already, or if
the new source takes care of this...
-------------------------------------

In python2.1, "import errno" looked for
/usr/lib/python2.1/lib-dynload/errno.so

In python2.2, errno.so was moved to a built-in module.

Using the most current rpm builds from RHN for RedHat8
(python-2.2.2-7, mod_python-3.0.0-10, httpd-2.0.40-11.5),
the following causes an error because apache (?) looks to the
old location of errno.so when browser pointed to pyweb.py URL.

I'm assuming that RedHat is just a little behind, but I could be wrong.
I guess I will try to build from source from the latest
versions on the mod_python website to see if this bug
has been fixed, and if it is just a redhat rpm bug...



EXAMPLE:
---------------------------------------------
#! /usr/bin/env python
############################################################
# pyweb.py              06/09/03        mmckerns@caltech.edu
# testing python web handler
############################################################

# the next line causes the error...
import errno

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK

---------------------------------------------



FROM httpd.conf:
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------




ERROR FROM error_log:
----------------------------------------------
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: Traceback (most
recent c
all last):
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 274, in HandlerDispatch!
module
= import_module(module_name, _req)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 429, in import_module!
module =
imp.load_module(mname, f, p, d)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/home/mmckerns/p
ublic_html/pyweb.py", line 5, in ?!    import errno
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: ImportError: No
module n
amed errno
----------------------------------------------




---

Mike McKerns
mmckerns@caltech.edu





From thm at duke.edu  Tue Jun 10 11:53:33 2003
From: thm at duke.edu (Hunter Matthews)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <1055260413.2007.11.camel@jade.biology.duke.edu>

On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender.
> 
> The problem with Albatross for me is the same one with all the others - it
> is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

I recently discovered PyMeld.py, which fixes this problem. There is also
"simpleTAL"

I prefer PyMeld really, except for the license.

> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Hunter Matthews                          Unix / Network Administrator
Office: BioScience 145/244               Duke Univ. Biology Department
Key: F0F88438 / FFB5 34C0 B350 99A4 BB02  9779 A5DB 8B09 F0F8 8438
Never take candy from strangers. Especially on the internet.

From gstein at lyra.org  Tue Jun 10 12:30:55 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] 
	templating (was: supporting modular mod_python extensions vs.
	"folding" mod_psp)
In-Reply-To: <1055260413.2007.11.camel@jade.biology.duke.edu>
References: <20030606174027.J48945-100000@oldchief.reply.net>
	<1055260413.2007.11.camel@jade.biology.duke.edu>
Message-ID: <20030610193055.GC25150@lyra.org>

On Tue, Jun 10, 2003 at 11:53:33AM -0400, Hunter Matthews wrote:
> On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
>...
> > The problem with Albatross for me is the same one with all the others - it
> > is yet another language to learn:
> > 
> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> I recently discovered PyMeld.py, which fixes this problem. There is also
> "simpleTAL"

Hunh. Just looked at this. It is a *very* neat approach (gonna have to keep
it in mind; the approach might be very useful in some contexts). But I
disagree that it "separates logic from HTML". As a specific counterexample,
take my edna mp3 streamer. For each song found in the "current" directory,
it extracts a whole bunch of ID3 tag information and makes that available to
the template. The default HTML template does not display that. But if you
switch over to the XML template, then it *is* present. (at one point, there
was a GUI that read the XML pages, so it wanted richer info)

With PyMeld, the logic must insert all the data somewhere in the page
(either as element contents or as an attribute). I don't see how you can
avoid putting _all_ the data into a PyMeld template. Thus, the logic is
intrinsically tied to the template.

IMO, there is never any true separation. Even with EZT, the logic must
provide "all" potential data, and let the template pull in what it needs.
(of course, there are things you can do to avoid pregenerating all data, but
semantically, the logic and template are still tied)

There will always be tying between the template and the logic because of the
data. If you say, "well, let the template define/generate the data it
needs", then you've just moved logic/processing into the template :-) Since
you can't get away from it, I built ezt with the view of "figure out the
relevant data, and then use *that* to render it." IOW, I took more of a
"render only" approach rather than some lofty, but unreachable, goal of
separation of logic.

> I prefer PyMeld really, except for the license.

EZT is under a BSD license, fwiw.

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Tue Jun 10 12:27:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] python print
In-Reply-To: <1055256594.1995.15.camel@localhost>
References: <20030609121231.L11532-100000@localhost.name>
	<200306100635.47755.jgardner@jonathangardner.net>
	<1055256594.1995.15.camel@localhost>
Message-ID: <200306101227.08600.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > B)
> > 	s = []
> > 	s.append('something')
> > 	s.appent('something more')
> > 	...
> > 	print "".join(s)
> >
> > B is far more efficient than A. This really shows up when you are
> > concatenating hundreds or more elements. Anything below that, it really
> > doesn't make too much of a difference.
> >
>
> Momma always says, "Make sure you can read it first, only optimize it
> after you profile." :)
>

You're right. This particular algorithm has been tested and profiled. I gave 
you the numbers I have found when I have done profiling. That is why I use 
this almost everywhere I have to concatenate multiple strings together. While 
it is true you shouldn't spend too much time optimizing on your first 
iteration of writing your code, it is silly to use methods you know are 
inefficient when comparable methods that are efficient exist and are 
well-tested. It just makes more work for the second and beyond iterations.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
p82lLQ5P+TDytSP2zHDkZHE=
=gHW1
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 17:23:30 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] templating (was: supporting modular mod_python
	extensions vs."folding" mod_psp)
Message-ID: <C0FC22C08B82074A88B50061764157775C74@johnson.mediapulse.net>

     > > > <al-for iter="name" expr="keys">
     > > >     <tr>
     > > >          <td><al-value expr="name.value()"></td>
     > > >          <td><al-value expr="environ[name.value()]"></td>
     > > >     <tr>
     > > > </al-for>

I think this snippet doesn't show all of albatross; it acts much closer
to ezt.py than let on here.

In albatross, edna could do something like (warning, python-style sudo
code follows; do not attempt to run this at home):

In edna.py:

class edna_pages:

  def page_process(self, ctx):
    #called to process a page, ctx is the object with the request data
and methods
    if ctx.req_equals("show_dir"):
      #the "Show Directory" button was clicked
      file_list = get_files_in_dir(ctx.locals.directory) #defined
elsewhere, directory come from the broswer
	
      results = [] #list of results, will hold mp3 objects to pass to
template
      for file in file_list:
	  results.append(mp3(file)) # mp3 class defined elsewhere, gets
all the tag/size info

      ctx.locals.results = results # place results in the namespace of
the template

  def page_display(self, ctx):
    # load and run the template
    ctx.run_template('edna.html')

in edny.html:
<html>
<body>
	<table>
		<tr>
			<td>Filename</td>
			<td>Size</td>
			<td>Length</td>
		</tr>
		<al-for expr="results" iter="row">
			<al-exec expr="mp3 = row.value()"> <!-- I do
this for sanity, we could very easily
	
use row.value().field instead -->
			<tr>
				<td><al-value expr="mp3.filename"></td>
				<td><al-value expr="mp3.size"> Kb</td>
				<td><al-value expr="'%0d:%02d' %
(mp3.minutes, mp3.seconds)"></td>
			</tr>
		</al-for>
	</table>
</body>
</html>

That's the basic idea, showing the seperation of logic and display of
Albatross.  There is a lot of cool stuff to Albatross as well, for
example it could easily with a few tags break the results into 30 per
page and provide prev and next buttons, but this give you the general
idea.

Mike


From djc at object-craft.com.au  Wed Jun 11 14:52:01 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
Message-ID: <m3k7btrzbi.fsf@ferret.object-craft.com.au>

>>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:

Michael> I'll give a second on ezt.py; even though Albatross is my
Michael> first choice.  Ezt.py follows many of the same ideals of
Michael> Albatross when it comes to templates, and also is not geared
Michael> only for the web like albatross so it can be handly in other
Michael> apps too.

Just had a look at ezt.py.  It is very similar in structure and
approach to the Albatross templates.  Looking at the CVS logs it seems
like ezt.py and Albatross sprung into existence at almost the same
time.  Bizarre.

- Dave

-- 
http://www.object-craft.com.au

From tbrauch at mindless.com  Wed Jun 11 01:26:19 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] Load Error
Message-ID: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>

I am running Apache 2.0.40-11.5 on a Red Hat 8.0 box with Python 2.2.1 and
mod_python 3.0.1.  Apache and Python were installed when I installed Red Hat
and have been updated using up2date.  I installed mod_python using an RPM I
found on http://www.rpmfind.net.  In the docs on the modpython website, I
assumed I could skip all steps up to 2.3.2.  I then added the line

LoadModule python_module libexec/mod_python.so

to my httpd.conf file at the end of all of the other LoadModule commands.
And I added

<Directory /var/www/python>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

To the end of my httpd.conf file.  Then, I did apachectl stop and apachectl
start.  I got errors

[warn] module python_module is already loaded, skipping

both on the stop and start.  Okay, I thought, it was already loaded (but I
didn't see anything in my httpd.conf file for it), and it's not loading it
again, there shouldn't be any problems.  So, I removed the LoadModule line
from the httpd.conf file and all is right in the world.  My question, how is
this module being loaded?  Some sort of magic I suspect.

If you answer this question for me, I have one or two more just waiting.
Hopefully they will be just as easy.

From bkesuma at ml.gaijinweb.com  Wed Jun 11 22:27:02 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] Load Error
In-Reply-To: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
References: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
Message-ID: <20030611222702.6af0878c.bkesuma@ml.gaijinweb.com>

Hi Timothy,

On Wed, 11 Jun 2003 01:26:19 -0400
"Timothy M. Brauch" <tbrauch@mindless.com> wrote:

e stop and start.  Okay, I thought, it was already loaded (but
> I didn't see anything in my httpd.conf file for it), and it's not
> loading it again, there shouldn't be any problems.  So, I removed the
> LoadModule line from the httpd.conf file and all is right in the world. 
> My question, how is this module being loaded?  Some sort of magic I
> suspect.

Just a guess, check /etc/httpd/conf.d
See if there is a .conf file over there.

From mark at camazotz.com  Wed Jun 11 12:26:55 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 22:00:08 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <200306111700.h5BH02BQ002186@slash.mediapulse.com>
Message-ID: <83F0108E-9C29-11D7-89CD-00039364CE50@camazotz.com>

Michael C. Neel" <neel@mediapulse.com> wrote:
 > (warning, python-style sudo code follows;
 > do not attempt to run this at home):

Heh.  Good advice however you spell [p]s[e]udo. :)

From paul.robinson at groupbc.com  Wed Jun 11 17:45:17 2003
From: paul.robinson at groupbc.com (Paul Robinson)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <3EE75C9D.2000900@groupbc.com>

I'm trying to understand Apache and mod_python in order to understand 
how to approach the design of some fairly generic concepts with regard 
to database backed, web front ended applications.
Let me start by saying everything I say assumes Apache 2 and mod_python 
3.0.3 currently.

Apache has a number of modes of operation when it comes to threading and 
forking, I would like to understand how these things interact with 
Python subinterpreters 
[http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and 
issues such as the Python global interpreter lock (GIL) 
[http://www.python.org/doc/current/api/threads.html].

For example, on a Windows platform where there is a single 
multi-threaded Apache process (mpm_wint 
[http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
say that mod_python would not be able to take advantage of a 
multi-processor machine due to the GIL?

In another, given Apache running in the prefork MPM 
[http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
or b) useful to have a global, per-Apache-process persitant data 
strucuture sharing a pool of (threadsafe) database connections. I would 
say not useful since that process will only ever be running a single 
mod_python request at a time - hence more than one item in the pool 
would be useless. Given the "worker MPM" 
[http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
useful but it's not clear to me if it would be possible.

Taking the specific example of database connections (let me note I have 
read and believe I understand FAQ 3.3) is it ever useful or possible to 
share a pool of database connectors, rather than a single connector in 
the global namespace. I assume that code such as that in FAQ 3.3 would 
require additional locking mechanisms in order to function correctly in 
a multi-threaded Apache environment?

I bet there must be some code in existing projects that does stuff like 
this. Any pointers?

Maybe I'm confusing myself at the moment - maybe some other people as 
well ;-)

Thanks in advance,
	Paul

From tpc at csua.berkeley.edu  Wed Jun 11 10:06:11 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] python print
In-Reply-To: <200306101227.08600.jgardner@jonathangardner.net>
Message-ID: <20030611094521.D23467-100000@localhost.name>


curiosity impels me, if list append is most efficient in concatenating to
the end of a string, how would I use it where I previously had string
concatenation ?  I can only print out the values
surrounded by [[''],[''], etc]:

<code>

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine',
            ' ' : '\n',
        }

def convert(numbers):
    w = []
    for argument in numbers:
        w.append([dict1[digit] for digit in argument])
#        w += ''.join([dict1[digit] for digit in argument])
    return w

</code>

On Tue, 10 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> > On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > > B)
> > > 	s = []
> > > 	s.append('something')
> > > 	s.appent('something more')
> > > 	...
> > > 	print "".join(s)
> > >
> > > B is far more efficient than A. This really shows up when you are
> > > concatenating hundreds or more elements. Anything below that, it really
> > > doesn't make too much of a difference.
> > >
> >
> > Momma always says, "Make sure you can read it first, only optimize it
> > after you profile." :)
> >
>
> You're right. This particular algorithm has been tested and profiled. I gave
> you the numbers I have found when I have done profiling. That is why I use
> this almost everywhere I have to concatenate multiple strings together. While
> it is true you shouldn't spend too much time optimizing on your first
> iteration of writing your code, it is silly to use methods you know are
> inefficient when comparable methods that are efficient exist and are
> well-tested. It just makes more work for the second and beyond iterations.
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
> p82lLQ5P+TDytSP2zHDkZHE=
> =gHW1
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Wed Jun 11 10:31:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] python print
In-Reply-To: <20030611094521.D23467-100000@localhost.name>
References: <20030611094521.D23467-100000@localhost.name>
Message-ID: <200306111031.05502.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> curiosity impels me, if list append is most efficient in concatenating to
> the end of a string, how would I use it where I previously had string
> concatenation ?  I can only print out the values
> surrounded by [[''],[''], etc]:
>

Your curiosity served you well. If you missed this point, the whole thing is 
kinda pointless. ;-)

'join' is the answer. You 'join' the list together into a string after you've 
put the list together.

<snip>
> def convert(numbers):
>     w = []
>     for argument in numbers:
>         w.append([dict1[digit] for digit in argument])
> #        w += ''.join([dict1[digit] for digit in argument])
>     return w
>

Change the line:
	return w
to:
	return "".join(w)

This is a demonstration on how join works:
>>> l = ['A', 'B', 'C', 'D']
>>> " - ".join(l)
'A - B - C - D'
>>> "".join(l)
'ABCD'

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
d8M139orE/YjDJV5optSTn4=
=Mqq5
-----END PGP SIGNATURE-----

From tpc at csua.berkeley.edu  Wed Jun 11 10:48:51 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] python print
In-Reply-To: <200306111031.05502.jgardner@jonathangardner.net>
Message-ID: <20030611104619.E23713-100000@localhost.name>


I tried something like that, and I just tried it with "".join and
both times I got this error:

TypeError: sequence item 0: expected string, list found

On Wed, 11 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > curiosity impels me, if list append is most efficient in concatenating to
> > the end of a string, how would I use it where I previously had string
> > concatenation ?  I can only print out the values
> > surrounded by [[''],[''], etc]:
> >
>
> Your curiosity served you well. If you missed this point, the whole thing is
> kinda pointless. ;-)
>
> 'join' is the answer. You 'join' the list together into a string after you've
> put the list together.
>
> <snip>
> > def convert(numbers):
> >     w = []
> >     for argument in numbers:
> >         w.append([dict1[digit] for digit in argument])
> > #        w += ''.join([dict1[digit] for digit in argument])
> >     return w
> >
>
> Change the line:
> 	return w
> to:
> 	return "".join(w)
>
> This is a demonstration on how join works:
> >>> l = ['A', 'B', 'C', 'D']
> >>> " - ".join(l)
> 'A - B - C - D'
> >>> "".join(l)
> 'ABCD'
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
> d8M139orE/YjDJV5optSTn4=
> =Mqq5
> -----END PGP SIGNATURE-----
>

From big.stick at bol.com.br  Wed Jun 11 15:03:12 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <5221067273.20030611150312@bol.com.br>

Em 11/6/2003 ?s 14:48, tpc escreveu:

> I tried something like that, and I just tried it with "".join and
> both times I got this error:
> TypeError: sequence item 0: expected string, list found

This is because you?re trying to concatenate a list of lists, not a
list of strings. Try this instead:

def convert(numbers):
    w = []
    for argument in numbers:
        w.append(dict1[argument])
    return ''.join(w)

-- stick
From jgardner at jonathangardner.net  Wed Jun 11 11:17:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <200306111117.56203.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:48, tpc@csua.berkeley.edu wrote:
> On Wed, 11 Jun 2003, Jonathan Gardner wrote:
> > On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > >
> > > def convert(numbers):
> > >     w = []
> > >     for argument in numbers:
> > >         w.append([dict1[digit] for digit in argument])
> > > #        w += ''.join([dict1[digit] for digit in argument])
> > >     return w
> >
> > Change the line:
> > 	return w
> > to:
> > 	return "".join(w)
> >
>
> I tried something like that, and I just tried it with "".join and
> both times I got this error:
>
> TypeError: sequence item 0: expected string, list found
>

Oops. You'll also want to change:
	w.append([dict1[digit] for digit in argument])
to:
	[w.append(x) for x in [dict1[digit] for digit in argument]]
or:
	w.append(''.join([dict1[digit] for digit in argument]))

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53JSWgwF3QvpWNwRAm2yAJ404BiA7lGl/PU2NNJ5Lt4DSwaMyQCeJeqg
OB7LJEwIS23C9PdLCk+meb4=
=0I1k
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 11 11:34:03 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] tcltkaqua and IDLE
Message-ID: <2147483647.1055331243@[10.0.1.2]>

Hello,

I've installed TclTkAquaBl-8.4.2.0 and i installed IDLE from the 
package manager. When I run it, it launches and quits.
When I open it from the command line it does the same.

When I do:

pythonw 
/Applications/MacPython-2.3/IDLE.app/Contents/Resources/idlelib/idle.py

I get:

RuntimeError: tcl.h version (8.4) doesn't match libtcl.a version (8.4)

If I comment out the test for if tcl_version != _tkinter.TCL_VERSION 
everything works fine.

Is this because I installed 8.4.2 instead of 8.4.1?

(on a tangental note, if I ever don't want these packages any more, 
what can I do?)

Thanks,

~mindlace
http://mindlace.net
From jgardner at jonathangardner.net  Wed Jun 11 11:52:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
References: <3EE75C9D.2000900@groupbc.com>
Message-ID: <200306111152.32398.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading and
> forking, I would like to understand how these things interact with
> Python subinterpreters
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and
> issues such as the Python global interpreter lock (GIL)
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process. There 
is *no* *way* that any process can communicate with each other except through 
shared memory or pipes. I am no expert on the inner workings of mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that at 
all. That is there just to ensure that no thread is caught with its pants 
down. Or, in more technical terms, that the state of the python interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I do know 
that threads are like "lightweight" processes. They can and will be run on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the impression I 
get from the documentation is that this is not so. It sounds like each thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible
> or b) useful to have a global, per-Apache-process persitant data
> strucuture sharing a pool of (threadsafe) database connections. I would
> say not useful since that process will only ever be running a single
> mod_python request at a time - hence more than one item in the pool
> would be useless. Given the "worker MPM"
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I have
> read and believe I understand FAQ 3.3) is it ever useful or possible to
> share a pool of database connectors, rather than a single connector in
> the global namespace. I assume that code such as that in FAQ 3.3 would
> require additional locking mechanisms in order to function correctly in
> a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a request, 
then it can share with the same database connections in that apache thread.

However, I don't think what you really want (independent processes or threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff like
> this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python, and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and 
connect at the beginning of the request. Some databases have more overhead 
than others.

Remember I said that the only way to talk between processes is via shared 
memory or pipes. Shared memory isn't supported well (if at all) in python. 
Pipes are something you already are familiar with -- TCP sockets are pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays your 
commands word for word to the database. When you disconnect, it puts the 
connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a pain in 
the butt to write right, and they are always a nightmare to manage. And you 
always have to have a plan for scaleability, or it will eventually bite you.

> Maybe I'm confusing myself at the moment - maybe some other people as
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

From grisha at modpython.org  Wed Jun 11 15:26:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
Message-ID: <20030611152022.X28576-100000@oldchief.reply.net>



On Wed, 11 Jun 2003, Paul Robinson wrote:

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?

The answer, unfortunately, is yes. Here is a google search that has some
info on the subject: http://www.google.com/search?q=python+free-threading

AFAIK the state of things has not changed with respect to SMP and GIL.

Grisha

From fitnah55 at hotmail.com  Wed Jun 11 15:40:16 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <200306111152.32398.jgardner@jonathangardner.net>
Message-ID: <000001c33051$48583390$18c0c20a@computer>


as far as i understand, apache2 was supposed to fix and/or make possible
the memory pooling issue... i don't think MMDBMS w/ an effective apache
interface is a reality yet, but that's certainly going to be the
intent..

for connection pooling and other stuff you obviously have to design and
write proper multiplexing code to allocate your resources effectively,
but as far as windows goes i wouldn't have a clue and wouldn't want to

I do believe that there is one main interpreter in mod_python and each
thread has sub-interpreters.. Although with the new worker model it
might
be one main interpreter per child and one sub-interpreter per thread..
regardless you can munge it to work all in one interpreter or a couple
other ways with the config options which should allow memory pooling to
some extent

mysql just got $15M in financing though so I don't think a MMDBMS module
from them is going to be free, if it even ever becomes available

python mapping objects are pretty easy to cache though, as long as you
don't
have to manage consistency across disparate processes

just my two cents :p




-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of Jonathan Gardner
Sent: Wednesday, June 11, 2003 2:53 PM
To: Paul Robinson; Mod_python@modpython.org
Subject: Re: [mod_python] Apache, Threading and Multi-Processing Modules


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading 
> and forking, I would like to understand how these things interact with

> Python subinterpreters 
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] 
> and issues such as the Python global interpreter lock (GIL) 
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process.
There 
is *no* *way* that any process can communicate with each other except
through 
shared memory or pipes. I am no expert on the inner workings of
mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters
are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that
at 
all. That is there just to ensure that no thread is caught with its
pants 
down. Or, in more technical terms, that the state of the python
interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct 
> to say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I
do know 
that threads are like "lightweight" processes. They can and will be run
on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the
impression I 
get from the documentation is that this is not so. It sounds like each
thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters
are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible

> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. I 
> would say not useful since that process will only ever be running a 
> single mod_python request at a time - hence more than one item in the 
> pool would be useless. Given the "worker MPM" 
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I 
> have read and believe I understand FAQ 3.3) is it ever useful or 
> possible to share a pool of database connectors, rather than a single 
> connector in the global namespace. I assume that code such as that in 
> FAQ 3.3 would require additional locking mechanisms in order to 
> function correctly in a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a
request, 
then it can share with the same database connections in that apache
thread.

However, I don't think what you really want (independent processes or
threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff 
> like this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python,
and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and

connect at the beginning of the request. Some databases have more
overhead 
than others.

Remember I said that the only way to talk between processes is via
shared 
memory or pipes. Shared memory isn't supported well (if at all) in
python. 
Pipes are something you already are familiar with -- TCP sockets are
pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to
implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays
your 
commands word for word to the database. When you disconnect, it puts the

connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a
pain in 
the butt to write right, and they are always a nightmare to manage. And
you 
always have to have a plan for scaleability, or it will eventually bite
you.

> Maybe I'm confusing myself at the moment - maybe some other people as 
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty
of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From jgardner at jonathangardner.net  Mon Jun  9 22:43:28 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <200306092243.32448.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 14:30, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?
>

I'm using the RedHat 9 RPMs.They work great.
- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5XACWgwF3QvpWNwRAgH+AKDrlLxwrcs/8K1TaOZVrG4OaBCLnwCfV+6B
CD0Qxms2q+aHtCmp8elnX78=
=+FrE
-----END PGP SIGNATURE-----


From bkesuma at ml.gaijinweb.com  Thu Jun 12 12:15:38 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Mod_python in real world
Message-ID: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>

Hi,

I am looking for real world experience with mod_python. Anybody wants to
share stories?

From mike.looijmans at asml.com  Thu Jun 12 07:22:51 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <200306120522.HAA29819@wsasd464.asml.nl>


> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint 
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
> say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?

I don't know what a "GIL" is, but Windows (NT) and apache are both definitely 
capable of taking advantage of multi-processor machines correctly.

> In another, given Apache running in the prefork MPM 
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. 

As you already concluded, there is not shared data among the processes, so 
setting up communication between them is probably not worth considering. Just 
keep a single DB connection per process, something like:

db = None

def connect():
    if not db:
    	db = MySQLdb.connect(...)
    return db

> Taking the specific example of database connections (let me note I have 
> read and believe I understand FAQ 3.3) is it ever useful or possible to 
> share a pool of database connectors, rather than a single connector in 
> the global namespace. I assume that code such as that in FAQ 3.3 would 
> require additional locking mechanisms in order to function correctly in 
> a multi-threaded Apache environment?

It is both useful and possible to do so. Especially when the DBMS is on another 
machine.

Most databases allow only one session per thread, and as such the best thing to 
do is to make sure that a connection is used by only one thread at a time.
 
> I bet there must be some code in existing projects that does stuff like 
> this. Any pointers?


No pointers, but what I have been using here for months now on a "worker" mpm:

- Create a threading.Lock object.
- Create a dictionary (of lists) or list for the db connection pool (I use a 
dictionary because I have 4 databases where my clients want to grab data)

To get a connection, the lock is aquired and the first matching db connection is 
taken and removed from the pool, if possible. The lock is released and the 
connection returned. If the pool was empty, a new db conenction object is 
created and returned.

When a thread finishes handling a request, it returns the connection object back 
to the pool. (obtain lock, put connection into pool, release lock)

This guarantees that no two threads share the same connection, and still creates 
no more connections than neccesary.

--
Mike Looijmans
ASML: http://www5nl.asml.nl/~mlooijma
Private: http://www.milosoftware.com
-- MY text ends here --



-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From tbrauch at mindless.com  Thu Jun 12 01:50:36 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Directory or Location?
Message-ID: <003201c330a6$8c22c860$6600a8c0@tbrauch>

Okay, I just want to go over a small frustration I just had and spent a few
hours trouble shooting.  In the tutorial,
http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
mptest script you must type:

<Directory /some/directory/htdocs/test>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

in the python.conf file.  However, in the default python.conf file that was
installed with the mod_python 3.0.0-10 rpm, the examples say

# This will cause files beneath /var/www/html with the extension .spam
# to be handled by the Python script /var/www/html/eggs.py
#
#<Directory /var/www/html>
#    AddHandler python-program .spam
#    PythonHandler eggs
#</Directory>
...
# This will cause all requests to the /python heirachy **<--note typo** of
your
# webserver to be handled by mod_python's Publisher handler
# (see http://localhost/manual/mod/mod_python/hand-pub.html)
#
#<Location /python>
#    SetHandler python-program
#    PythonHandler mod_python.publisher
#</Location>


What is the difference between using "Location" and "Directory"?  When do I
use each one?

As I found out, there is a difference and if you use "Location" where you
should use "Directory".  You get a 500 Internal Server Error that I never
quite understood and spent some time trying to fix.  There doesn't seem to
be anything in the documentation I've read to describe the difference

 - Tim

From mod_python at ols.inorganic.org  Wed Jun 11 23:08:30 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <20030612060830.GA18376@nag.inorganic.org>

On Thu, Jun 12, 2003 at 01:50:36AM -0400, Timothy M. Brauch wrote:
> Okay, I just want to go over a small frustration I just had and spent a few
> hours trouble shooting.  In the tutorial,
> http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
> mptest script you must type:
[...]
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
> 
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference

That's because you haven't read the right documentation :)

Sorry, I don't mean to be flip about this, but in the end, this shows
something of the problem in trying to use something like mod_python
without having a good understanding of the underlying application.
"<Directory>" and "<Location>" directives are Apache directives, and
they're well-documented in the Apache docs.  I don't feel like looking
at the mod_python docs, but either they say that you should look into
the Apache config file format to at least understand it somewhat or ...
well, they should.

-roy
From tbrauch at mindless.com  Thu Jun 12 02:25:34 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Directory or Location?
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
Message-ID: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>

> > What is the difference between using "Location" and "Directory"?  When
do I
> > use each one?
> >
> > As I found out, there is a difference and if you use "Location" where
you
> > should use "Directory".  You get a 500 Internal Server Error that I
never
> > quite understood and spent some time trying to fix.  There doesn't seem
to
> > be anything in the documentation I've read to describe the difference
>
> That's because you haven't read the right documentation :)
>
> Sorry, I don't mean to be flip about this, but in the end, this shows
> something of the problem in trying to use something like mod_python
> without having a good understanding of the underlying application.
> "<Directory>" and "<Location>" directives are Apache directives, and
> they're well-documented in the Apache docs.  I don't feel like looking
> at the mod_python docs, but either they say that you should look into
> the Apache config file format to at least understand it somewhat or ...
> well, they should.
>
> -roy

That would help explain things a lot.  I've been using Python for quite a
few years now and I am new to Apache, probably opposite of most users.  I
just did a default install of Apache and haven't learned/played with it too
much.  Python, however, I use everyday and can do most anything with it by
now (except using mod_python it would seem).

I didn't see anywhere in the mod_python docs the mention that Directory and
Location are Apache directives.  They are just used.  But, now that I know
it, I've got some reading to do over at apache.org.

Thanks,

 - Tim

From sk at medien.fh-wiesbaden.de  Thu Jun 12 08:26:04 2003
From: sk at medien.fh-wiesbaden.de (Stefan Kanitz)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <200306120826.05057.sk@medien.fh-wiesbaden.de>

Am Donnerstag, 12. Juni 2003 07:50 schrieb Timothy M. Brauch:
> <Directory /some/directory/htdocs/test>
>   AddHandler python-program .py
>   PythonHandler mptest
>   PythonDebug On
> </Directory>
>
> in the python.conf file.  However, in the default python.conf file that was
> installed with the mod_python 3.0.0-10 rpm, the examples say
>

I think, when the mod_python documentation talks about "main server 
configuration file", it means httpd.conf (Apache configuration file) and not 
python.conf.

Steve


> # This will cause files beneath /var/www/html with the extension .spam
> # to be handled by the Python script /var/www/html/eggs.py
> #
> #<Directory /var/www/html>
> #    AddHandler python-program .spam
> #    PythonHandler eggs
> #</Directory>
> ...
> # This will cause all requests to the /python heirachy **<--note typo** of
> your
> # webserver to be handled by mod_python's Publisher handler
> # (see http://localhost/manual/mod/mod_python/hand-pub.html)
> #
> #<Location /python>
> #    SetHandler python-program
> #    PythonHandler mod_python.publisher
> #</Location>
>
>
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
>
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference
>
>  - Tim
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mod_python at ols.inorganic.org  Wed Jun 11 23:41:25 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
	<005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
Message-ID: <20030612064124.GA19135@nag.inorganic.org>

On Thu, Jun 12, 2003 at 02:25:34AM -0400, Timothy M. Brauch wrote:
> > That's because you haven't read the right documentation :)
> >
> > Sorry, I don't mean to be flip about this, but in the end, this shows
> > something of the problem in trying to use something like mod_python
> > without having a good understanding of the underlying application.
> > "<Directory>" and "<Location>" directives are Apache directives, and
> > they're well-documented in the Apache docs.  I don't feel like looking
> > at the mod_python docs, but either they say that you should look into
> > the Apache config file format to at least understand it somewhat or ...
> > well, they should.
> >
> > -roy
> 
> That would help explain things a lot.  I've been using Python for quite a
> few years now and I am new to Apache, probably opposite of most users.  I
> just did a default install of Apache and haven't learned/played with it too
> much.  Python, however, I use everyday and can do most anything with it by
> now (except using mod_python it would seem).
> 
> I didn't see anywhere in the mod_python docs the mention that Directory and
> Location are Apache directives.  They are just used.  But, now that I know
> it, I've got some reading to do over at apache.org.

Actually, I'll go a step further than that -- every single item you put
in the httpd.conf file (including the 'AuthName' and 'AuthType'
directives in 3.4) is an Apache directive.  Linking mod_python into
Apache lets you use some Apache directives that you wouldn't have access
to otherwise (all the Python*Handler directives), but they're still
_Apache_ directives -- and it's important to keep that in mind.

You're right, by the way --  you and I are coming at this from opposite
ends.  I've been managing Apache for years now, and am new to Python.

So yeah, this definitely indicates something of a shortcoming of the
mod_python tutorial (not really the only one, I think, judging by how
many people have problems getting mod_python to work as they'd expect).

-roy
From i at mindlace.net  Thu Jun 12 08:43:14 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <2147483647.1055407394@[10.0.1.2]>

--On 12 Thursday, June 2003 12:15 +0900 Batara Kesuma 
<bkesuma@ml.gaijinweb.com> wrote:

> Hi,
>
> I am looking for real world experience with mod_python. Anybody wants
> to share stories?

Sorry, I only use mod_python in Tir nan og, which as everyone knows 
isn't a real place.

~mindlace
http://mindlace.net
From i at mindlace.net  Thu Jun 12 08:55:22 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <2147483647.1055408122@[10.0.1.2]>

--On 12 Thursday, June 2003 01:50 -0400 "Timothy M. Brauch" 
<tbrauch@mindless.com> wrote:


> What is the difference between using "Location" and "Directory"?
> When do I use each one?

I battled with this for hours the other day, so maybe I can help.

This is the important document: 
<http://httpd.apache.org/docs/sections.html>

The key thing to take away is: Location gets applied after Directory.

What I wanted was to handle everything with my PythonHandler but 
exclude certain directories.*

So at first I tried a Directory directive with SetHandler 
python-program and other directory directives with SetHandler None; the 
latter only worked for the exact directory name, and only if I 
specified the absolute path (more general regular expressions, like 
"^/donthandlethis*", didn't work).

Finally I used <Location /donthandlethis> SetHandler None </Location> 
for those directories I didn't want handled by my handler, and now 
everything works fine.

* I battled for a while with TransHandler, but it seems to me that if 
you write a TransHandler it must do everything that the regular 
TransHandler does as well as whatever you want; there's no way to make 
a TransHandler that only translates some requests, and punts the rest 
to apache's normal handling. (someone please correct me if I'm wrong.)

Additionally, I never got 
req.add_handler("PythonHandler",myhandlername) to do what I expected - 
i.e. act like SetHandler for that request (but if it doesn't work that 
way, how come you can't specify extension in .add_handler() ?

HTH,

~mindlace
http://mindlace.net
From davidf at sjsoft.com  Thu Jun 12 18:15:17 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <3EE8A715.3090405@sjsoft.com>

Batara Kesuma wrote:

>Hi,
>
>I am looking for real world experience with mod_python. Anybody wants to
>share stories?
>  
>
Hi

We use mod_python for a number of projects, including an electronic 
logging application that stores logs in the database and is highly 
configurable. We are about to do the first deployment, for ninety 
concurrent users ; I'll let you know then...

David

From grisha at modpython.org  Thu Jun 12 14:20:10 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <2147483647.1055408122@[10.0.1.2]>
Message-ID: <20030612141039.T44199-100000@oldchief.reply.net>



On Thu, 12 Jun 2003, emf wrote:

> * I battled for a while with TransHandler, but it seems to me that if
> you write a TransHandler it must do everything that the regular
> TransHandler does as well as whatever you want; there's no way to make
> a TransHandler that only translates some requests, and punts the rest
> to apache's normal handling. (someone please correct me if I'm wrong.)

You should be able to return DECLINED in which case Apache will do its
default thing.

> Additionally, I never got req.add_handler("PythonHandler",myhandlername)
> to do what I expected - i.e. act like SetHandler for that request

Not sure what you mean by this. It should execute, though if you have
another PythonHandler, that handler will execute first.

> (but if it doesn't work that way, how come you can't specify extension
> in .add_handler() ?

Because you can first look at the extension, then decide whether to
add_handler()?, e.g.:

	if ext == ".foo":
		req.add_handler("PythonHandler", myfoohandler)
	else:
		# do something else

Grisha

From fitnah55 at hotmail.com  Thu Jun 12 14:37:48 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <3EE8A715.3090405@sjsoft.com>
Message-ID: <000001c33111$b8e44ac0$18c0c20a@computer>

once upon a time StarMedia's "geocities" like product ran on
mod_python..

re: 28M guest users and 1.5M subscribers

3 ultra sparcs.. f5 load balancer.. terabyte raid behind it..

it's not designed to be plug and play though.. if you want to get expert
functionality out of it you have to know how to design expert
functionality

there's plenty of horrible persistent java setups out there, mod_python
is
never that bad

tweak up on your multiplexing skills make sure you follow the
application
path exactly as it really is under the hood, and you're as good as
golden

solaris context switching is still superior I believe, but the new xeon
architecture seems promising as long as you design around it

unfortunately my xeon box w/ hyperthreading is not my dev box :/  can't
comment more on that

From gstein at lyra.org  Thu Jun 12 15:12:44 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3k7btrzbi.fsf@ferret.object-craft.com.au>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
Message-ID: <20030612221244.GB29668@lyra.org>

On Wed, Jun 11, 2003 at 02:52:01PM +1000, Dave Cole wrote:
> >>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:
> 
> Michael> I'll give a second on ezt.py; even though Albatross is my
> Michael> first choice.  Ezt.py follows many of the same ideals of
> Michael> Albatross when it comes to templates, and also is not geared
> Michael> only for the web like albatross so it can be handly in other
> Michael> apps too.
> 
> Just had a look at ezt.py.  It is very similar in structure and
> approach to the Albatross templates.  Looking at the CVS logs it seems
> like ezt.py and Albatross sprung into existence at almost the same
> time.  Bizarre.

The CVS logs from edna are the original location. It was started in February
2001. Then I copied a version over into ViewCVS. Then another copy over into
SubWiki. Oh, and there is a copy in Subversion now -- we use it in the build
system for generating MSVC Project files (.dsp and .dsw) and for VC.Net
files. I also have a couple home projects that use it.

One of these days (with all that spare time), I'm going to create a little
SVN project area and check in the "reference copy" there, and maintain it
there. Then, in SubWiki and SVN (at least), I can simply use the
svn:externals feature to yank it into my projects. Eventually, I'll get
ViewCVS and edna into SVN and they can directly reference it too...

Oh, just for a bit more time each day... :-)

But yes, there are some similarities to Albatross. But it seems like
Albatross has variables and also makes function calls explicit. I wonder,
though: can Albatross be used outside of a markup-based system? Does it
assume and take advantage of within-markup-style-text templating?

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From djc at object-craft.com.au  Fri Jun 13 12:14:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <20030612221244.GB29668@lyra.org>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
	<20030612221244.GB29668@lyra.org>
Message-ID: <m3llw6k9kw.fsf@ferret.object-craft.com.au>

>>>>> "Greg" == Greg Stein <gstein@lyra.org> writes:

Greg> But yes, there are some similarities to Albatross. But it seems
Greg> like Albatross has variables and also makes function calls
Greg> explicit. I wonder, though: can Albatross be used outside of a
Greg> markup-based system? Does it assume and take advantage of
Greg> within-markup-style-text templating?

Some of the tags rely on functionality in the application framework,
but most don't.  You get quite precise control over the text that is
produced.

Check this out.  It is a standalone program that only uses the
templating functionality.

   http://www.object-craft.com.au/projects/albatross/albatross/tug-tree.html

- Dave

-- 
http://www.object-craft.com.au

From skremer at q.cis.uoguelph.ca  Fri Jun 13 14:37:23 2003
From: skremer at q.cis.uoguelph.ca (Stefan C. Kremer)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Server side includes.
Message-ID: <Pine.LNX.4.44.0306131431420.22685-100000@q.cis.uoguelph.ca>


Is there any easy way to perform server side include type processing with 
my mod_python handler?

I have written a handler which delivers *.html files *.shtml files, etc. 
and also runs *.py scripts and also handles *.cgi, but I would like to 
post process each of these using the standard server-side include type 
processing.

I realize that I could write the code to do it manually in my handler, but 
am wondering if there is a better way.

Thanks,

	-SK

-- 
--
Dr. Stefan C. Kremer, Associate Prof.
Reynolds Building, 106
Dept. of Computing and Information Science
University of Guelph, Guelph, Ontario	N1G 2W1

WWW: http://q.cis.uoguelph.ca/~skremer
Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
E-mail:  skremer@uoguelph.ca

From neel at mediapulse.com  Fri Jun 13 14:54:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Server side includes.
Message-ID: <C0FC22C08B82074A88B50061764157776B9531@johnson.mediapulse.net>

If you are using Apache 2.0; then you can chain together content
handlers to do this (or so I've been told but I've yet to try it).  If
you are using Apache 1.3 then you'll have to handle it yourself, or not
handle .shtml files (which may or may not be an option depending on what
you are doing).

HTH,
Mike

     > -----Original Message-----
     > From: Stefan C. Kremer [mailto:skremer@q.cis.uoguelph.ca] 
     > Sent: Friday, June 13, 2003 2:37 PM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Server side includes.
     > 
     > 
     > 
     > Is there any easy way to perform server side include 
     > type processing with 
     > my mod_python handler?
     > 
     > I have written a handler which delivers *.html files 
     > *.shtml files, etc. 
     > and also runs *.py scripts and also handles *.cgi, but I 
     > would like to 
     > post process each of these using the standard 
     > server-side include type 
     > processing.
     > 
     > I realize that I could write the code to do it manually 
     > in my handler, but 
     > am wondering if there is a better way.
     > 
     > Thanks,
     > 
     > 	-SK
     > 
     > -- 
     > --
     > Dr. Stefan C. Kremer, Associate Prof.
     > Reynolds Building, 106
     > Dept. of Computing and Information Science
     > University of Guelph, Guelph, Ontario	N1G 2W1
     > 
     > WWW: http://q.cis.uoguelph.ca/~skremer
     > Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
     > E-mail:  skremer@uoguelph.ca
     > 
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From dustin at ywlcs.org  Fri Jun 13 15:34:59 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] mod_python proposal
Message-ID: <20030613203459.GF2664@eleanor.internal.ywlcs.org>

I've been thinking a lot about the extensibility requirements of mod_python
users, in light of recent discussion.  Basically, the degree of flexibility
desired of mod_python is the same degree of flexibility delivered by Apache
itself.

To explain in more detail, most of the low-level frameworks people have been
discussing here would be /best/ implemented as an Apache module -- best in
terms of speed, flexibility, configurability, and installability.  In fact,
mod_psp is an Apache module.

mod_python's raison d'etre is to allow Apache modules to be written in
Python.  However, it's grown somewhat beyond that in extent, while also
omitting a few capabilities of native C modules.  My proposal is to separate
and enhance the mod_python core so that it supports the full functionality of
a C module, and no more.  The project would then reference other Apache
modules, coded fully in Python, which implement specific capabilities.  It
would probably also be helpful for mod_python to include some utility
functionality, e.g., query processing, html quoting, etc.

To bring it down to the level of configuration files, I'd like to have this
in my Apache config:

----
LoadModule python_module /path/to/mod_python.so
..
# Parallel to LoadModule, but they're written in Python!
LoadPythonModule mod_psp /path/to/mod_psp.py
LoadPythonModule publisher_module /path/to/publisher.py

..
# and act just like other Apache modules
AddHandler psp-script .psp
..

<VirtualHost ...>
  SetHandler publisher # references publisher_module above
  # publisher module defines its own Apache configs
  PublisherRoot /path/path/path
</VirtualHost>
----

I don't know how possible this is in the specifics, although I think it will
make an interesting project.  As a general design scheme, what do you think?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From michel_ts at yahoo.com.br  Sun Jun 15 12:48:24 2003
From: michel_ts at yahoo.com.br (=?iso-8859-1?q?Michel=20Thadeu?=)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] Some problems with mod_python.publisher
Message-ID: <20030615154824.64623.qmail@web40402.mail.yahoo.com>

Hi guys!

I having trouble with mod_python.publisher, I using a apache 1.2.27 and
the mod_python 2.7 (the standard version of debian testing).

I have configured the apache like this:

   <Directory /var/www/modpython>
     AddHandler python-program .py
     PythonHandler mod_python.publisher
   </Directory>

And have made a script named index.py with the next code:

   from mod_python import apache
   def executar(req):
           req.content_type="text/html"
           req.send_http_header()
           req.write('<H1>Some test of executar!</H1>')
           return apache.OK

But when I execute this script, using the next url...

   http://localhost/modpython/index.py/executar

The page is open, rendening html code, and all the things, but with a
error message:

   Some test of executar!
   HTTP/1.1 200 OK Date: Tue, 17 Jun 2003 23:36:26 GMT Server: 
   Apache/1.3.27 (Unix) Debian GNU/Linux mod_python/2.7.8 Python/2.2.2 
   PHP/4.1.2 Connection: close Transfer-Encoding: chunked Content-Type:

   text/html; charset=iso-8859-1
   OK
   The server encountered an internal error or misconfiguration and was

   unable to complete your request.

   Please contact the server administrator, webmaster@capsulecorp and 
   inform them of the time the error occurred, and anything you might 
   have done that may have caused the error.

   More information about this error may be available in the server 
   error log.

But if I use PythonHanldler and name executar as handler, the error is
not shown... I read the last lines of error.log of apache, but I don't
found a critical error:

   [Tue Jun 17 21:42:29 2003] [alert] apache: Could not determine the 
   server's fully qualified domain name, using 127.0.0.1 for ServerName
   [Tue Jun 17 21:42:30 2003] [notice] Apache/1.3.27 (Unix) Debian 
   GNU/Linux mod_python/2.7.8 Python/2.2.2 PHP/4.1.2 configured -- 
   resuming normal operations
   [Tue Jun 17 21:42:30 2003] [notice] suEXEC mechanism enabled 
   (wrapper: /usr/lib/apache/suexec)
   [Tue Jun 17 21:42:30 2003] [notice] Accept mutex: sysvsem (Default: 
   sysvsem)

This is the last errors since the last restart of apache...

Well, I don't know what error I made, can someone help me?

thanks
--
Michel Thadeu Sabchuk
Curitiba - Paran? - Brazil

=====
--
Michel Thadeu Sabchuk
Curitiba/PR

_______________________________________________________________________
Yahoo! Mail
Mais espa?o, mais seguran?a e gratuito: caixa postal de 6MB, antiv?rus, prote??o contra spam.
http://br.mail.yahoo.com/
From gnb at itga.com.au  Mon Jun 16 10:25:38 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:00:09 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing? 
In-Reply-To: Your message of Tue, 10 Jun 2003 02:14:22 -0600.
Message-ID: <200306160025.KAA13272@lightning.itga.com.au>

>    include current directory in path
>    module = __import__(basename, globals(), locals(), [])
>    return sys.path to old layout

This might be your problem.  Inside mod_python the current directory is 
probably "/".  It's not like CGI where the current directory is the CGI dir.



From jafo at tummy.com  Sun Jun 15 18:54:19 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <200306160025.KAA13272@lightning.itga.com.au>
References: <200306160025.KAA13272@lightning.itga.com.au>
Message-ID: <20030616005419.GM8892@tummy.com>

On Mon, Jun 16, 2003 at 10:25:38AM +1000, Gregory Bond wrote:
>>    include current directory in path
>>    module = __import__(basename, globals(), locals(), [])
>>    return sys.path to old layout
>
>This might be your problem.  Inside mod_python the current directory is 
>probably "/".  It's not like CGI where the current directory is the CGI dir.

By "current" directory, I mean the directory that I am currently looking
for the module in.  For example, the directory in "filename" the request
object.

My problem isn't that it's not importing the module.  The problem is
that it seems like mod_python has done something weird and possibly just
wrong with the import semantics, so that if I import a package, modules
within that package aren't available unless I explicitly import them in
the init.

Also, I'm running into cases where I'm setting values within modules in
my handler, and then when I call code in the module those values are
reset.  I've resorted to shoving request-persistent data into
__builtins__, which works around the latter problem, and re-structuring
some code so that my entire object heirarchy *CAN* be imported all at
once.

Sean
-- 
 -rw-rw-rw-:  File permissions of the beast.  (Chuck Phillips)
 mknod /dev/beast c 6 66
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mark at camazotz.com  Mon Jun 16 08:54:20 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] Some problems with mod_python.publisher
In-Reply-To: <200306151700.h5FH01BQ015762@slash.mediapulse.com>
Message-ID: <A5558BE2-9FF9-11D7-BFFF-0003939F6178@camazotz.com>

Michel Thadeu <michel_ts@yahoo.com.br> wrote:
>    def executar(req):
>            req.content_type="text/html"
>            req.send_http_header()
>            req.write('<H1>Some test of executar!</H1>')
>            return apache.OK

The publisher handler expects your handler to return the page body 
rather than the status.

   def executar(req):
     return '<H1>Some test of executar!<H1>'

You can still use req.write() if you prefer; in that case, use

   return ''

at the end.

From ballums at swbell.net  Mon Jun 16 09:16:47 2003
From: ballums at swbell.net (Ben Allums)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] mod_python proposal
In-Reply-To: <20030613203459.GF2664@eleanor.internal.ywlcs.org>
Message-ID: <r01050400-1026-2A9B3B4AA00511D7B639003065489174@[216.141.190.73]>

On 6/13/03 at 3:34 PM, dustin@ywlcs.org (Dustin Mitchell) wrote:

> mod_python's raison d'etre is to allow Apache modules to be written
> in Python.  However, it's grown somewhat beyond that in extent, while
> also omitting a few capabilities of native C modules.  My proposal is
> to separate and enhance the mod_python core so that it supports the
> full functionality of a C module, and no more.

Here, here.

I'd like to second this approach.  Keep mod_python focused and complete.


Ben
From vmanera at manord.com  Tue Jun 17 18:42:22 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] 
	mod_python was restarted from apache with error:3221225477
Message-ID: <52DC70C1C1575C418CB033523A29CF141048C0@exchange2000.manord.com>


Today this happened 10 time.  why?

apache version 2.0.46 mod_python version 3.0.3

platform win 2000


apache log:

[Tue Jun 17 09:30:44 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.
[Tue Jun 17 09:30:45 2003] [notice] Parent: Created child process 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(505):
Parent: Sent the scoreboard to the child
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Child process is running
[Tue Jun 17 09:30:45 2003] [info] Parent: Duplicating socket 236 and sending
it to child process 4440
board from the parent.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(623):
Parent: Sent 1 listeners to child 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(582):
Child 4440: retrieved 1 listeners from parent
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Acquired the start mutex.
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Starting 50 worker threads.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 0 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 16 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 27 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 39 starting.
........


Villiam 
From peter at outputdsj.com.au  Fri Jun 20 00:58:09 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] Mod_python won't install
Message-ID: <003f01c33673$33a16520$0200a8c0@peterhome>

Hi

I know this is a list for experienced developers but I have ttried the web
to no avail so thought someone here may be able to help with my problems on
installing mod_python.

I am having trouble installing Mod_pythong.

This is my setup:

OS: Windows XP
Web Server: Apache v2.0.46
Mod_python install: v3.0.3.0

I also have PHP installed

I added the line:

LoadModule python_module modules/mod_python.so

to my httpd.conf file (the location is correct).

But then as soon as I try starting Apache after entering this line and
saving the config file, it fails to start. I then comment the line out and
everything works OK again.

These lines in my error.log may be of interest:

[Fri Jun 20 00:52:48 2003] [notice] Child 1184: Exit event signaled. Child
process is ending.
[Fri Jun 20 00:52:48 2003] [warn] (OS 995)The I/O operation has been aborted
because of either a thread exit or an application request.  : winnt_accept:
Asynchronous AcceptEx failed.

Can anyone point me in the right direction here.

Thanks
Peter




***********************************************************************
This e-mail message, including any attachments, is for the sole use of the
intended recipient(s) and may contain confidential
and privileged information.  No-one else may read, print, store, copy,
forward or act in reliance on all or any of it or its attachments.  If you
receive this e-mail in error, please telephone us on 1300 302 115 or contact
the sender by reply e-mail and destroy all copies of the original message.
Thank you.
***********************************************************************


From bill at rfa.org  Fri Jun 20 10:23:42 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] mod_python on Windows with Python 2.3b1?
Message-ID: <3EF318EE.4000709@rfa.org>


Trying to run mod_python on Apache 2.0.46
on WIn2K using Python 2.3b1, as soon as
I uncomment the LoadModule line for mod_python.so,
Apache won't start up (even though it seems
to get past loading the mod_python module,
but gives no message on why it dies).

I'm not compiling myself, using the straight
binaries downloaded from Apache and Sourceforge.
Any ideas?

Thanks,
Bill

From mod_python at ols.inorganic.org  Sun Jun 22 12:59:08 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values
Message-ID: <20030622195908.GA23104@nag.inorganic.org>

Greetings all,

I'm working on my first real useful mod_python project and I'm finding that
I feel a little clueless here.

I've got an authent handler that works perfectly; one of the things it does
is create a ConfigParser object.  

Now, I want that object to be available for other parts of this
interpreter.  Specifically:

http://mydomain.com/directory

is controlled by dispatcher.py's authenhandler (the function that creates
the configparser object).  

http://mydomain.com/directory/dispatcher.py/init

is, obviously, the init function in dispatcher.py (using the Publisher
handler).  I'd like that function to have access to the CP object without
having to re-initialize the object (after all, that's the whole point of
mod_python).  Simply referring to the same value results in "NameError:
global name 'configp' is not defined."

Suggestions of which part of the documentation to re-read?

-roy


From gnb at itga.com.au  Mon Jun 23 10:12:22 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values 
In-Reply-To: Your message of Sun, 22 Jun 2003 12:59:08 -0700.
Message-ID: <200306230012.KAA00095@lightning.itga.com.au>

> Suggestions of which part of the documentation to re-read?

You need persistent session information.  Check the FAQ 3.8
	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp


From dustin at ywlcs.org  Sun Jun 22 19:20:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values
In-Reply-To: <200306230012.KAA00095@lightning.itga.com.au>
References: <200306230012.KAA00095@lightning.itga.com.au>
Message-ID: <20030623002013.GG14253@eleanor.internal.ywlcs.org>

On Mon, Jun 23, 2003 at 10:12:22AM +1000, Gregory Bond wrote:
> > Suggestions of which part of the documentation to re-read?
> 
> You need persistent session information.  Check the FAQ 3.8
> 	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp

If I understood the question correctly, Mr. Bond needed to know how to keep
information from one handler to another in the same request.  If that ws
indeed what he meant, then the solution is to attach the information to the
request, e.g.

(authenhandler)
  req.cp = my_config_parser
...
(handler)
  config_parser = req.cp

works like a charm.  Just be careful not to create a reference loop (e.g.,
don't let the config parser have a reference to req buried inside of it..).
This has caused memory leakage for me in the past.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From bill at rfa.org  Mon Jun 23 11:57:33 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <14348759489.20030621002129@centurytel.net>
References: <14348759489.20030621002129@centurytel.net>
Message-ID: <3EF7236D.70907@rfa.org>

Brian Lenihan wrote:

>You are both having similar problems according to your posts to the
>mod_python list.
>
>For unknown reasons, the mod_python binary is compiled using MSVC 7,
>which is a problem for most people.
>
>The instructions here:
>
>http://www.modpython.org/pipermail/mod_python/2002-December/002714.html
>
>still apply to mod_python 3.0.3
>
>The mod_python binary available from apache.org is linked to Python
>2.2, so you can't use Python 2.3, Bill, you have to use 2.2.x.  I am
>currently using 2.2.3 without any problems.
>  
>
Okay, it loads with 2.2.3, but I'm getting the ImportError: No module 
named _apache
from my cgi-bin (when run from within Apache, *NOT* from the the command 
line.
Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
I assume should be loaded from the c:\Program Files\Apache 
Group\Apache2\modules dir,
with the LoadModule python-module modules/mod_python.so  directive, but 
doesn't
seem to be).

Thanks,
Bill

>Apache2 requires XP service Pack 1, Peter, so that may be why you
>are having problems with Apache, in addition to the mod_python crash
>at start up.
>  
>


From peter at outputdsj.com.au  Mon Jun 23 21:06:05 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] Re: mod_python on Windows
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org>
Message-ID: <001901c33977$7342e080$0200a8c0@peterhome>

// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
// named _apache
// from my cgi-bin (when run from within Apache, *NOT* from the the command
//l ine.
// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
// I assume should be loaded from the c:\Program Files\Apache
// Group\Apache2\modules dir,
// with the LoadModule python-module modules/mod_python.so  directive, but
// doesn't
// seem to be).

With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
got the ole fave "Hello World" to work a few times.

Now when I run it mod_python loads OK but I get the following error: I guess
some changes I made to the Apache config file caused the problem. Buggered
if I know what. So if anyone has any ideas I will be more than welcome to
hear them.

Anyhow here's the error:

Mod_python error: "PythonHandler test"

Traceback (most recent call last):

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 320, in
HandlerDispatch
    module = import_module(module_name, config)

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 499, in
import_module
    module = imp.load_module(mname, f, p, d)

  File "C:/Program Files/Apache Group/Apache2/htdocs/music/\test.py", line 2

    def handler(req):

    ^

SyntaxError: invalid syntax



From bill at rfa.org  Mon Jun 23 14:39:55 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <001901c33977$7342e080$0200a8c0@peterhome>
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org> <001901c33977$7342e080$0200a8c0@peterhome>
Message-ID: <3EF7497B.2080601@rfa.org>

Peter Brown wrote:

>// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
>// named _apache
>// from my cgi-bin (when run from within Apache, *NOT* from the the command
>//l ine.
>// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
>// I assume should be loaded from the c:\Program Files\Apache
>// Group\Apache2\modules dir,
>// with the LoadModule python-module modules/mod_python.so  directive, but
>// doesn't
>// seem to be).
>
>With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
>got the ole fave "Hello World" to work a few times.
>
>Now when I run it mod_python loads OK but I get the following error: I guess
>some changes I made to the Apache config file caused the problem. Buggered
>if I know what. So if anyone has any ideas I will be more than welcome to
>hear them.
>  
>

You should only need something in your <directory cgi-bin> like:
<Directory "C:/Program Files/Apache Group/Apache2/cgi-bin">^M
    AllowOverride None^M
    Options None^M
    Order allow,deny^M
    Allow from all^M
    AddHandler python-program .pys
    PythonHandler myhandler
    PythonDebug On
<directory "c:/Program Files/Gpache Group

which will send anything to a name (existing or not) like "bill.pys"
off to cgi-bin/myhandler.py

(my guess is you messed up the AddHandler or PythonHandler statements)

I also had some luck doing this with Python 2.3, but made some changes
and never made it back to Kansas. Basically, I was just binary editing
the DLL and changing the one occurence of python22.dll to python23.dll.
Mostly caused no harm :()

From jafo at tummy.com  Mon Jun 23 15:30:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623002013.GG14253@eleanor.internal.ywlcs.org>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
Message-ID: <20030623213027.GC4640@tummy.com>

On Sun, Jun 22, 2003 at 07:20:13PM -0500, Dustin Mitchell wrote:
>(handler)
>  config_parser = req.cp
>
>works like a charm.  Just be careful not to create a reference loop (e.g.,
>don't let the config parser have a reference to req buried inside of it..).

I didn't realize that you could set values on the request...
Unfortunately, in my case I am calling into the SimpleTAL code and that
is calling back into my code, by which point I no longer have access to
the request object.

One of the weirdnesses I've found about mod_python is that it seems to
be losing values that I set on module-level name-spaces.  If I import a
module, set a value on it, then later try to access it, sometimes it
works and sometimes it doesn't.  This may or may not be related to the
weirdness about how mod_python imports modules or PythonAutoReload...

I've finally just broken down and set up an object in __builtins__ that
I store request-related data on (including a link to the request and
other information).  I hate doing it this way, but it has allowed me to
reliably set and get data that I need to get access to.

Sean
-- 
 If we don't survive, we don't do anything else.
                 -- John Sinclair
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From grisha at modpython.org  Mon Jun 23 18:31:47 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623213027.GC4640@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com>
Message-ID: <20030623182702.U2204@onyx.ispol.com>



On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> One of the weirdnesses I've found about mod_python is that it seems to
> be losing values that I set on module-level name-spaces.  If I import a
> module, set a value on it, then later try to access it, sometimes it
> works and sometimes it doesn't.

If you could come up with a way to replicate this weirdness, that would be
great.

> This may or may not be related to the weirdness about how mod_python
> imports modules or PythonAutoReload...

There isn't anything unusual about the way mod_python imports modules.
PythonAutoReload can yeld strange results after a lot of changes and a lot
of reloading, but that's not unusual during development. A cleanly started
Apache should (and does for me at least) behave 100% predictably.

Grisha
From jafo at tummy.com  Mon Jun 23 16:56:38 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623182702.U2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
Message-ID: <20030623225638.GC4076@tummy.com>

On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
>There isn't anything unusual about the way mod_python imports modules.

Someone on this list replied to one of my earlier messages and said that
mod_python hooks into the import mechanism for some reason.

There definitely are issues related to importing of packages...  From
mod_python, if I import a package that has a module within it, I can't
access that name unless the package __init__.py imports that name.  For
example, the following works from Python:

   guin:p$ mkdir pkg
   guin:p$ echo >pkg/__init__.py
   guin:p$ echo 'foo = "bar"' >pkg/baz.py
   guin:p$ python -c 'from pkg import baz; print baz.foo'
   bar
   guin:p$

IIRC, in mod_python that would give me an AttributeError on the "from
pkg import baz", unless I do:

   echo 'import baz' >pkg/__init__.py

Of course, this means that my entire package structure must be imported
through the __init__.py files, even if not all of it is used.  Worse,
this means that I can't have a module which imports another module, that
imports the first module...

>PythonAutoReload can yeld strange results after a lot of changes and a lot
>of reloading, but that's not unusual during development. A cleanly started
>Apache should (and does for me at least) behave 100% predictably.

That's not been my experience, where "predictably" is defined as
"behaving as I expect Python code to".  I mean, it's predictable in it's
unpredictability.  ;-)

Sean
-- 
 What we see depends on mainly what we look for.
                 -- John Lubbock
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From gnb at itga.com.au  Tue Jun 24 10:21:36 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] Re: mod_python on Windows 
In-Reply-To: Your message of Mon, 23 Jun 2003 21:06:05 +1000.
Message-ID: <200306240021.KAA19222@lightning.itga.com.au>

>     def handler(req):
> 
>     ^
> 
> SyntaxError: invalid syntax

This really looks like a plain python indentation/whitespace error, not a
mod_python thing.  Can you run "python test.py" without syntax errors? (I know
it will fail in the import stage, but your error message says it isn't even
getting that far.)


From grisha at modpython.org  Mon Jun 23 21:28:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623225638.GC4076@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com><20030623225638.GC4076@tummy.com>
Message-ID: <20030623212426.H2204@onyx.ispol.com>


I just tried it and it works fine for me. I followed the steps you
outlined with "/home/grisha/www/htdocs" as my current directory, here is
an excerpt from apache config:

LoadModule python_module modules/mod_python.so

<Directory /home/grisha/www/htdocs>
        SetHandler python-program
        PythonHandler blah
</Directory>

And here is /home/grisha/www/htdocs/blah.py:


from mod_python import apache

from pkg import baz

def handler(req):
    req.write(baz.foo)
    return apache.OK


There's got a detail that I'm missing here.

Grisha

On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
> >There isn't anything unusual about the way mod_python imports modules.
>
> Someone on this list replied to one of my earlier messages and said that
> mod_python hooks into the import mechanism for some reason.
>
> There definitely are issues related to importing of packages...  From
> mod_python, if I import a package that has a module within it, I can't
> access that name unless the package __init__.py imports that name.  For
> example, the following works from Python:
>
>    guin:p$ mkdir pkg
>    guin:p$ echo >pkg/__init__.py
>    guin:p$ echo 'foo = "bar"' >pkg/baz.py
>    guin:p$ python -c 'from pkg import baz; print baz.foo'
>    bar
>    guin:p$
>
> IIRC, in mod_python that would give me an AttributeError on the "from
> pkg import baz", unless I do:
>
>    echo 'import baz' >pkg/__init__.py
>
> Of course, this means that my entire package structure must be imported
> through the __init__.py files, even if not all of it is used.  Worse,
> this means that I can't have a module which imports another module, that
> imports the first module...
>
> >PythonAutoReload can yeld strange results after a lot of changes and a lot
> >of reloading, but that's not unusual during development. A cleanly started
> >Apache should (and does for me at least) behave 100% predictably.
>
> That's not been my experience, where "predictably" is defined as
> "behaving as I expect Python code to".  I mean, it's predictable in it's
> unpredictability.  ;-)
>
> Sean
> --
>  What we see depends on mainly what we look for.
>                  -- John Lubbock
> Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
> tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
>
From jafo at tummy.com  Mon Jun 23 21:33:24 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623212426.H2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
	<20030623225638.GC4076@tummy.com> <20030623212426.H2204@onyx.ispol.com>
Message-ID: <20030624033324.GE4076@tummy.com>

On Mon, Jun 23, 2003 at 09:28:58PM -0400, Gregory (Grisha) Trubetskoy wrote:
>I just tried it and it works fine for me. I followed the steps you
>outlined with "/home/grisha/www/htdocs" as my current directory, here is
>an excerpt from apache config:

Ugh, you are right and I am wrong...  I don't actually use packages very
often, and when I was seeing decidedly different behavior from
mod_python and the interpreter, it must have been using two different
versions of the package when I thought I was using one.

Sorry about that.

Thanks,
Sean
-- 
 A computer is like an Old Testament god, with a lot of rules and no mercy.
                -- Joseph Campbell
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mod_py at ua.fm  Tue Jun 24 11:11:09 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
Message-ID: <web-26094356@ua.fm>

Greetings to all,

I'm using Apache 1.3.24 + mod_py 2.7.8.

The idea is to make mod_py have global variables that 
will be accessible from any request untill apache restarts.

I added another dictionary to mod_python.c next to 

	static PyObject * interpreters = NULL;
like:
	PyObject * python_globals = NULL;
	
I initialize it on apache start in
	void python_init(server_rec *s, pool *p)	
like:
	if (!python_globals)
	{
		python_globals = PyDict_New();
		ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, s,
			 "python_init: Initializing globals dict");
	}
	
and logging shows it really initializes once per apache start.

then I just trying to use it via req object (maybe not the best way but 
fastest to me)
I define it as attribute '__globals__' of req object 
so it's accessible as req.__globals__
module requestobject.c
procedure 
static PyObject * request_getattr(requestobject *self, char *name)

like:
	else if (strcmp(name, "__globals__") == 0)
	{
		Py_INCREF(python_globals);
		return (PyObject *) python_globals;
	}

works fine with single apache child process.
means I can set 
	req.__globals__[key] = anyobject
and read it in next page hit
	anyobject = req.__globals__[key]
	
but when I start to use few such apache processes (access it from diff ip) I 
have strange situation.

req.__globals__ has same physical address like 0x810108c but different 
content.

Even dumping that 'python_globals' dictionary in requestobject.c shows 
different content of PyDict object.

It looks like each apache child process has own address space and same address 
points 
to physically different memory.

Any suggestion has can I fix that?

Thanx,
Anatoly Artamonov
----

-> CTAPT -> http://start.alkar.net 
From tuan-huy.la at muenchen.de  Tue Jun 24 17:01:12 2003
From: tuan-huy.la at muenchen.de (Tuan-Huy La)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] Can't compile mod_python-3.0.3 on solaris 8 (sparc)
Message-ID: <3EF867B8.70805@muenchen.de>

I'm trying to install mod_python-3.0.3 on a sparc machine  running 
solaris 8, Apache 2.0.46, gcc 3.2.3, gnu ld 2.11.2 (binutil) and Python 
2.2.3.

I always get the following error when trying the make (gnu make 3.79) 
command:

(last few lines:)
    ...
    <unknown>                           0x12f8      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    <unknown>                           0x12fc      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x140       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x3c8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    PyTuple_Fini                        0x1974      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    PyTuple_Fini                        0x1b40      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    _PyObject_GC_Resize                 0x2cc       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_Resize                 0x3a8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    ld: fatal: relocations remain against allocatable but non-writable 
sections
    collect2: ld returned 1 exit status
    apxs:Error: Command failed with rc=65536
    .
    make[1]: *** [mod_python.so] Error 1
    make[1]: Leaving directory `/export/home/root/mod_python-3.0.3/src'
    make: *** [do_dso] Error 2

What's wrong? Any ideas?

From azaroth at liverpool.ac.uk  Tue Jun 24 18:28:47 2003
From: azaroth at liverpool.ac.uk (Dr Robert Sanderson)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
Message-ID: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>


When trying to write a trivial connection handler that only works when 
accessed from a certain port, I found that trying to 
read connection.local_addr results in a seg fault.

I'm running:
Server version: Apache/2.0.40
Server built:   May 20 2003 10:15:29

Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current 
Redhat RPM.

My server config addition looks like:
Listen 2100
PythonPath "sys.path+['/home/cheshire/']"
PythonConnectionHandler ztest
PythonDebug On

And then /home/cheshire/ztest.py reads:

-------------
from mod_python import apache
def connectionhandler(conn):
    conn.write("Trying to do something ...")
    try:
        conn.write(repr(conn.local_addr))
    except Exception, err:
        conn.write("Broke")
    conn.write("Done it.")
    return apache.OK
-------------

[cheshire@mithlond cheshire]$ telnet localhost 2100
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Trying to do something ...Connection closed by foreign host.

[Tue Jun 24 18:14:39 2003] [notice] mod_python: (Re)importing module 'ztest'
[Tue Jun 24 18:14:40 2003] [notice] child pid 2193 exit signal Segmentation 
  fault (11)

Any ideas?  Has this been fixed in a more recent version, and I should get 
stuck in and recompile everything from source?

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Tue Jun 24 14:14:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030624140701.M38636@onyx.ispol.com>


On Tue, 24 Jun 2003, Dr Robert Sanderson wrote:

>
> When trying to write a trivial connection handler that only works when
> accessed from a certain port, I found that trying to
> read connection.local_addr results in a seg fault.
>
> I'm running:
> Server version: Apache/2.0.40
> Server built:   May 20 2003 10:15:29
>
> Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> Redhat RPM.

2.0.40 is a version of Apache a few major releases and almost a year
behind...

Connection support in 3.0.1 is very immature, you should really upgrade to
apache 2.0.46 and mod_python 3.0.3.

Grisha
From gnb at itga.com.au  Wed Jun 25 09:10:01 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence 
In-Reply-To: Your message of Tue, 24 Jun 2003 11:11:09 +0300.
Message-ID: <200306242310.JAA05334@lightning.itga.com.au>

> It looks like each apache child process has own address space and same addres
> s 
> points 
> to physically different memory.
> 
> Any suggestion has can I fix that?

That's true.  When the Apache process forks, each child process has different 
copy of the address space.  Same address, different contents.
You will need to use some explicity shared memory, either from a mmap'd file or
a shm segment.  This will imply a custom memory allocator and custom malloc()/
free() - like functions.  But you will need to make python use this shared
memory, and I have no idea if that is possible.


From jgardner at jonathangardner.net  Tue Jun 24 17:07:29 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26094356@ua.fm>
References: <web-26094356@ua.fm>
Message-ID: <200306241707.30622.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 01:11, 1 1 wrote:
> Greetings to all,
>
> I'm using Apache 1.3.24 + mod_py 2.7.8.
>
> The idea is to make mod_py have global variables that
> will be accessible from any request untill apache restarts.
>

Start over. Rethink what you are trying to do.

Let's examine things fundamentally. How does apache work? It listens on port 
80. It spawns a bunch of children. When it gets an incoming connection, it 
passes the connection off to one of the children.

These children are seperate processes. There is no way for them to 
communicate with each other outside of pipes and shared memory. (Well, 
there are other ways, but they aren't as useful as you would hope).

So far, no one has figured out how to use shared memory and python. However, 
everyone and their sister knows how to use pipes. It's called "sockets" and 
you can use TCP over IP or one of a million other protocols.

So, these processes have to communicate with each other. How are they going 
to find each other, let alone let each other know when something changes 
and how it changes? Why, we need a central location for all of them to call 
in to. Let's call it a server.

And what will this server do? It will hold data. Maybe we should call it a 
"database". So, any process running out in the wild can connect to this 
database, grab data, change data, and everyone will work together.

That's your "global variables" accessible anywhere. That's the current best 
way to do it. You'll find a terrifying amount of research done on 
everything you can possibly imagine doing with a database.

I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
Oracle, or Sybase.

So go start learning about databases, and how best to use them! ;-)

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++OfBWgwF3QvpWNwRAsq8AKC0R3Xp1xmJDWu6cmUD2KDTNo9EbgCgiODn
yVGztiDpf5ZizHramVNSUw8=
=RvEH
-----END PGP SIGNATURE-----


From grisha at modpython.org  Wed Jun 25 00:16:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625001438.M40924@onyx.ispol.com>



On Tue, 24 Jun 2003, Jonathan Gardner wrote:

> So far, no one has figured out how to use shared memory and python.

http://www.python.org/doc/current/lib/module-mmap.html

http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

:-)

Grisha
From mod_python at mikebell.org  Tue Jun 24 21:27:23 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <20030625042723.GR1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> http://www.python.org/doc/current/lib/module-mmap.html

The only problem with the mmap module is that it just gives you a
string-like object. How do you put something like a mutex in there so
you can access the shared memory area safely?
From mod_python at mikebell.org  Tue Jun 24 21:32:50 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625043250.GS1198@netvista.mikebell.org>

On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
> Oracle, or Sybase.
> 
> So go start learning about databases, and how best to use them! ;-)

Of course, some people prefer not to use a giant, bloated SQL database
every time they need to store any sort of data. :-)

If your data storage needs are a little less complicated and you're
having trouble justifying SQL, try something like berkeley db or just
the filesystem.
From grisha at modpython.org  Wed Jun 25 00:40:41 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625042723.GR1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
Message-ID: <20030625003543.O40924@onyx.ispol.com>


On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:

> On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > http://www.python.org/doc/current/lib/module-mmap.html
>
> The only problem with the mmap module is that it just gives you a
> string-like object. How do you put something like a mutex in there so
> you can access the shared memory area safely?
>

To quote Guido - "Good question!"

(here is the link
http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

:-)

OK, on a serious note - I believe the shm module provides locking. I'm
also going to look into the APR for possibly including some locking
interface in the next version of mp.

Grisha

From mod_python at mikebell.org  Tue Jun 24 21:48:09 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
	<20030625003543.O40924@onyx.ispol.com>
Message-ID: <20030625044808.GT1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:40:41AM -0400, Gregory (Grisha) Trubetskoy wrote:
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

For anyone who's curious, you _can_ do it by using fcntl's file locking
before making any changes to your shared memory region, but this means
you only get one lock per file. So if you've got one variable, just lock
the file you're mmaping. If you've got dozens, you're going to need a
lot of lockfiles.

From jakubec at san.rr.com  Tue Jun 24 22:11:10 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001c01c33ad8$31f56aa0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.


From sterling at bumblebury.com  Wed Jun 25 01:16:51 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	 <200306241707.30622.jgardner@jonathangardner.net>
	 <20030625042723.GR1198@netvista.mikebell.org>
	 <20030625003543.O40924@onyx.ispol.com>
Message-ID: <1056518211.28555.72.camel@hasele>

The way you handle locking with mmap() is by using a combination of a
file and a mmap(), it isn't that expensive so long as MAP_NOSYNC is
specified (if MAP_NOSYNC isn't specified than most operating systems
default to it).  

Outside of that, the proper way to do this is to use a semaphore.

-Sterling

On Wed, 2003-06-25 at 00:40, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:
> 
> > On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > > http://www.python.org/doc/current/lib/module-mmap.html
> >
> > The only problem with the mmap module is that it just gives you a
> > string-like object. How do you put something like a mutex in there so
> > you can access the shared memory area safely?
> >
> 
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)
> 
> :-)
> 
> OK, on a serious note - I believe the shm module provides locking. I'm
> also going to look into the APR for possibly including some locking
> interface in the next version of mp.
> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
"Programming today is a race between software engineers stirring to  
 build bigger and better idiot-proof programs, and the universe trying  
 to produce bigger and better idiots. So far, the universe is winning." 
    - Unknown
From mod_py at ua.fm  Wed Jun 25 09:58:01 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
Message-ID: <web-26333903@ua.fm>

>>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
>>Oracle, or Sybase.
>>So go start learning about databases, and how best to use them! ;-)

Yes, I'm using PgSQL and have possibly hundreds of simultaneous connections.
That's why I tried to cache all in memory.
Thanx for advice anyway.

----

-> CTAPT -> http://start.alkar.net 
From mod_py at ua.fm  Wed Jun 25 10:18:02 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence 
In-Reply-To: <200306242310.JAA05334@lightning.itga.com.au>
Message-ID: <web-26336311@ua.fm>


> You will need to use some explicity shared memory, either from a mmap'd file 
> or
> a shm segment.  This will imply a custom memory allocator and custom 
> malloc()/
> free() - like functions.  But you will need to make python use this shared
> memory, and I have no idea if that is possible.

yes, there's shm module for py
I actually learned all about it before post to conference.
Problem with it - it provides file-like behaviour.
So I can use files as well (but without locking shm module provides).
But I have to store my data after each change.
Storing to file (or shm memory) mean pickle/unpickle.
While placing object in shared memory with direct access would save a lot of 
hassle.
So actually I was hoping someone will tell me how to allocate py object in 
apache 2.0 shared memory and attach that space to python interpreter address 
space (is such things are possible)
----

-> CTAPT -> http://start.alkar.net 
From jgardner at jonathangardner.net  Wed Jun 25 06:54:41 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:10 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <200306250654.42792.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:16, Gregory (Grisha) Trubetskoy wrote:
>
> http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html
>

This is the way to go in "1 1"'s case. I have been looking for a shared memory 
module for python for the longest time, and now I am happy that you pointed 
it out.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++amhWgwF3QvpWNwRAsKNAJ9B5+xcxzXKfgfUHcLd7qsCyEZWpgCdHec1
UF+Y027v3sEu547f+OvqPwQ=
=Qukb
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 06:58:45 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625043250.GS1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
Message-ID: <200306250658.46386.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:32, mod_python@mikebell.org wrote:
> On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> > I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> > Server, Oracle, or Sybase.
> >
> > So go start learning about databases, and how best to use them! ;-)
>
> Of course, some people prefer not to use a giant, bloated SQL database
> every time they need to store any sort of data. :-)
>

So don't use SQL Server, Oracle, Sybase or MySQL. Use PostgreSQL. ;-)

> If your data storage needs are a little less complicated and you're
> having trouble justifying SQL, try something like berkeley db or just
> the filesystem.

This is equally valid. My problem is that every time I get to start using one 
of these, it ends up with so much data that I should've gone with the 
database from the very beginning. If you *know* your data set is never going 
to get very large, then using files or Berkeley DB is a very, very good idea.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++aqVWgwF3QvpWNwRArz4AJ4s3bBs8sfTxBBY268ZdAa1eFNHIQCfTx6R
yKehz2nY6SKKDcowthMhC9c=
=BObc
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:01:12 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <200306250701.14900.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 23:58, 1 1 wrote:
> >>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> >> Server, Oracle, or Sybase.
> >>So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.
>

In this case, if you are just caching some data, just have the processes query 
the database and cache it once. Then you can just use the cache for every 
subsequent result. Or you can store it in the modules hard-coded, and just be 
very careful not to change it during the lifetime of the processes.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++asoWgwF3QvpWNwRAjlJAJ4rxu6qOQnTpg1FBdBRi4gCaZLSaACeLY4p
zNL5/N1kVTZx3tzYzjmV65A=
=JnBM
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:32:14 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <200306250732.15699.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I am thinking of implementing a shared memory module that does more than just 
"read" and "write". Instead, I want something more transparent to the 
developer, so that you say "Go get this dict at this shared memory key" or 
"Create a new dict in shared memory at this key", and have the entire dict 
available like a namespace.

Obvious applications would include the ever-present problem of shared data 
between apache mod_python processes. This would solve it once and for all. 
Perhaps one day we could get it working with RPC and have processes on 
seperate machines sharing data as well.

The scope of this project would be implimenting new types that derive from all 
of the basic types so that:

1) When accessing the data in the type, it would gain a lock on the shared 
memory segment that stores its data using a semaphore, read the data and 
unserialize it, then return that data.
2) When storing the data in that type, it would gain a lock on the shared 
memory segment, then store the data over the existing data.

I am thinking there are really two ways to go about this.
1) Implementing it all in Python. The idea here would be that we would 
serialize and unserialize the data using cPickle.
2) Implementing it all in C. The idea here is that we would reuse the same 
data structures that the basic data types use. We would store and read the 
binary data behind the basic data types so that they can be as easily stored 
in shared memory as they are stored in real memory.

Does anyone know if something like this is implemented or in the process of 
being implemented? Does anyone want to join me in this endeavor? 

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
/ID5Uq/oK8hAYQfmvvIGliE=
=4zo4
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 25 07:59:56 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <2147483647.1056527996@[10.0.1.2]>

--On 25 Wednesday, June 2003 09:58 +0300 1 1 <mod_py@ua.fm> wrote:

>>> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
>>> Server,  Oracle, or Sybase.
>>> So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.

Is there any reason why you haven't used the ZODB for this? With ZEO, 
you can access persistent values from multiple processes. As long as 
your application doesn't heavily write to the same objects, it should 
be just what you need (and has been tested and deployed in quite large 
environments.)

Here's an intro:
<http://www.amk.ca/zodb/zodb-zeo.html>

Here's where to get it:

<http://www.zope.org/Products/StandaloneZODB>

~mindlace
http://mindlace.net
From vlindberg at verio.net  Wed Jun 25 10:43:44 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <3EF9D140.6010108@verio.net>


>Does anyone know if something like this is implemented or in the process of 
>being implemented? Does anyone want to join me in this endeavor? 
>

I haven't used it, but I think that POSH is what you are looking for:

http://poshmodule.sourceforge.net/posh/html/

Not sure if it compatible with mod_python.  If it is, though, it sounds 
like exactly what everyone wants.

VanL

From jm at eemsystems.cjb.net  Wed Jun 25 13:04:20 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] value too large for PgNumeric
Message-ID: <1056564260.1950.176.camel@eemsystems.com>

this error:


File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
__init__
    raise OverflowError, "value too large for PgNumeric"



is produced by this query:

"""select  q1.Area,q1.Prop_disponibles,q1.MinCompra,q1.MaxCompra,q1.MinAlquiler,q1.MaxAlquiler from (select  areas.descripcion as Area,count(*) as Prop_disponibles,min(coalesce(prop.precio_venta,0)) as MinCompra,max(coalesce(prop.precio_venta,0)) as MaxCompra,min(coalesce(prop.precio_alquiler,0)) as MinAlquiler,max(coalesce(prop.precio_alquiler,0)) as MaxAlquiler from propiedades prop, tipo_de_propiedades tdp,Sectores sector,areas where prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id and sector.area_id = areas.area_id and prop.sector_area_id = sector.area_id and prop.sector_id = sector.sector_id and prop.propiedad_id in (select fot.propiedad_id from fotos fot where fot.propiedad_id = prop.propiedad_id) and current_date between prop.efectivo_desde and prop.efectivo_hasta and prop.activa = 'Y' and prop.tipo_de_propiedad_id=%s  group by areas.descripcion) as "q1"  order by q1.prop_disponibles desc limit 2;""" % (i[2])))


only for a few alternatives.


Any help? thanks.

jm


-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From mod_python at mikebell.org  Wed Jun 25 12:17:13 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306250658.46386.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
	<200306250658.46386.jgardner@jonathangardner.net>
Message-ID: <20030625191712.GU1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 06:58:45AM -0700, Jonathan Gardner wrote:
> This is equally valid. My problem is that every time I get to start using one 
> of these, it ends up with so much data that I should've gone with the 
> database from the very beginning. If you *know* your data set is never going 
> to get very large, then using files or Berkeley DB is a very, very good idea.

There's no reason not to use either one of those just because your
dataset is going to be large. Berkeley DB in particular is quite good.
You're not using SQL for the backend implementation, you're using it for
the front end, the query language which abstracts away the back end.
From mod_python at ols.inorganic.org  Thu Jun 26 01:04:02 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using mod_python pythonauthenhandler with PSO
Message-ID: <20030626080402.GA6653@nag.inorganic.org>

Hey guys,

Anyone have any experience integrating mod_python with Python Service
Objects?

I've got a problem where if I'm dealing with an authenhandler, I end up
with an error message that says:
---
Mod_python error: "PythonLogHandler pso.modpython::cleanup"

Traceback (most recent call last):

  File
"/usr/local/Python/lib/python2.2/site-packages/mod_python/apache.py", line
332, in HandlerDispatch
    result = object(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/modpython.py",
line 36, in cleanup
    service.cleanup(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/service.py", line
52, in cleanup
    req.pso().close()

AttributeError: 'mp_request' object has no attribute 'pso'
---

I'm pretty sure this is related to authenhandler because if you then try to
access a resource under this directory -- which means that now you're not
going through authenhandler -- it works.


My script looks like this:

---
from mod_python import apache

def foo(req):
	try:
		req.pso().session['visits'] +=1
	except:
		req.pso().session['visits'] =1
	f = "Hello World!  ~ Your visit number: %(visits)d ~ Try Reload !" %  req.pso().session
	return f

def authenhandler(req):
	user = req.user
	pw = req.get_basic_auth_pw()

	if (user == "foo" and pw == "bar"):
		return apache.OK
	else:
		return apache.HTTP_UNAUTHORIZED
---

my .htaccess looks like this:
---
AddHandler python-program .py
PythonHandler mod_python.publisher
pythonauthenhandler quicktest
PythonFixupHandler pso.modpython::fixup
PythonLogHandler pso.modpython::cleanup
PythonDebug On
AuthType Basic
AuthName "Enter your email username and password"
require valid-user
---

To test this:
Go to http://www.inorganic.org/~rsr/python2/quicktest.py/foo
Authenticate with foo/bar
This should pause for a moment and then give you the error message.
If you hit 'reload,' you don't go through authenhandler (since you're
already authenticated) and you get the correct output.

Thoughts?

-roy


From rien at YEEPA.ORG  Thu Jun 26 10:36:08 2003
From: rien at YEEPA.ORG (Adrien Plisson)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] value too large for PgNumeric
References: <1056564260.1950.176.camel@eemsystems.com>
Message-ID: <3EFAB078.2080207@yeepa.org>

Julio Mendoza wrote:
> this error:
> 
> File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
> __init__
>     raise OverflowError, "value too large for PgNumeric"
> 
> is produced by this query:
>       ...
> only for a few alternatives.
 >
> Any help? thanks.

This exception seems to be thrown from PgSQL, so has nothing to do with mod_python.
It may surely tell you that you have to much result to be stored in a variable, 
causing an overflow. try decomposing your query to see which part is erroneous.

by the way, try to simplify your query: this does not seem to be efective...
	prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id
	and prop.tipo_de_propiedad_id=%s
this too...
	prop.propiedad_id in (
			select
				fot.propiedad_id
			from
				fotos fot
			where
				fot.propiedad_id = prop.propiedad_id
		)


-- 
rien

From azaroth at liverpool.ac.uk  Thu Jun 26 13:40:03 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030624140701.M38636@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>


> > Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> > Redhat RPM.
> 2.0.40 is a version of Apache a few major releases and almost a year
> behind...
> Connection support in 3.0.1 is very immature, you should really upgrade to
> apache 2.0.46 and mod_python 3.0.3.

Having upgraded my trivial port checking code works fine. Thanks :)

However, the connection object is a little too high level ... are there 
plans for implementing a lower level 'socket' like interface, rather than 
a blocking line or character reader?  The mod_perl module has this sort of 
interface for example (AFAICT)

For example, I need to be able to consume all of the data currently 
waiting into one chunk to process ... which may or may not end in a 
linebreak character, can be of arbitrary length and the connection 
doesn't close after sending.  So I can't use either read() or readline(), 
with or without arguments :/

In particular, I'm looking at the possibility of handling Z39.50 
connections, which has messages sent in a binary encoded form to be 
decoded using rules in ASN1 and BER.

Cheers,

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I

From gstein at lyra.org  Thu Jun 26 11:36:42 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <20030626183642.GB5652@lyra.org>

APR has facilities to do shared memory in a portable fashion; APR is part of
Apache 2.0, so there isn't much reason to go grab any other library.

You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
shared memory segments. The problem is that a shared memory segment could be
mapped to different addresses in different processes. Thus, you want to hold
onto offsets into a shared memory segment. apr_rmm.h helps with managing
these subblocks and working with offsets rather than direct pointers. Note
that apr_rmm also handles locking so that you can have multiple processes
allocating (simultaneously) from a shared mem segment.

You can then layer additional Python facilities on top of this substrate.

Cheers,
-g

On Wed, Jun 25, 2003 at 07:32:14AM -0700, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> I am thinking of implementing a shared memory module that does more than just 
> "read" and "write". Instead, I want something more transparent to the 
> developer, so that you say "Go get this dict at this shared memory key" or 
> "Create a new dict in shared memory at this key", and have the entire dict 
> available like a namespace.
> 
> Obvious applications would include the ever-present problem of shared data 
> between apache mod_python processes. This would solve it once and for all. 
> Perhaps one day we could get it working with RPC and have processes on 
> seperate machines sharing data as well.
> 
> The scope of this project would be implimenting new types that derive from all 
> of the basic types so that:
> 
> 1) When accessing the data in the type, it would gain a lock on the shared 
> memory segment that stores its data using a semaphore, read the data and 
> unserialize it, then return that data.
> 2) When storing the data in that type, it would gain a lock on the shared 
> memory segment, then store the data over the existing data.
> 
> I am thinking there are really two ways to go about this.
> 1) Implementing it all in Python. The idea here would be that we would 
> serialize and unserialize the data using cPickle.
> 2) Implementing it all in C. The idea here is that we would reuse the same 
> data structures that the basic data types use. We would store and read the 
> binary data behind the basic data types so that they can be as easily stored 
> in shared memory as they are stored in real memory.
> 
> Does anyone know if something like this is implemented or in the process of 
> being implemented? Does anyone want to join me in this endeavor? 
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
> /ID5Uq/oK8hAYQfmvvIGliE=
> =4zo4
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Thu Jun 26 11:45:57 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626183642.GB5652@lyra.org>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
Message-ID: <200306261145.59286.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 26 June 2003 11:36, Greg Stein wrote:
> APR has facilities to do shared memory in a portable fashion; APR is part
> of Apache 2.0, so there isn't much reason to go grab any other library.
>
> You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
> shared memory segments. The problem is that a shared memory segment could
> be mapped to different addresses in different processes. Thus, you want to
> hold onto offsets into a shared memory segment. apr_rmm.h helps with
> managing these subblocks and working with offsets rather than direct
> pointers. Note that apr_rmm also handles locking so that you can have
> multiple processes allocating (simultaneously) from a shared mem segment.
>
> You can then layer additional Python facilities on top of this substrate.
>

The python facility would be something like POSH.

So, based on this new information, the project scope would now become:

1) Expand POSH so that it can use shared objects that were shared by a foreign 
process (provided with some information on which shared memory segment they 
are using)

2) Integrate POSH with mod_python and APR.

The problem I see now: How to communicate between all of the processes that 
there are shared objects available, and detail where those shared objects 
are? I don't think it is possible to create shared objects via mod_python 
before the processes are seperated. Even if it was, is it possible to 
transfer references to those shared objects to each process?

The only solution I see right now is to have some central repository that any 
process can access and declare the existence of shared objects, their 
location, and whatever else is needed. Other processes can read the 
repository and find currently existing shared objects by a unique string.

The exact nature of the repository isn't important. It could be a bit of 
shared memory in a special location, a file, a Berkely DB, or even something 
more exotic. The point is that the processes can declare new shares, or find 
existing shares by a unique identifier.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++z9mWgwF3QvpWNwRAmawAKDDzpi9kOyIu88CZaCxVTsCqYQ1uwCgymzr
n6NkA9YggvsuqJcdzmnzpdc=
=rHuV
-----END PGP SIGNATURE-----

From vlindberg at verio.net  Thu Jun 26 14:44:24 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306261145.59286.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
	<200306261145.59286.jgardner@jonathangardner.net>
Message-ID: <3EFB5B28.2010103@verio.net>

Jonathan Gardner wrote:

> The problem I see now: How to communicate between all of the processes 
> that
>
>there are shared objects available, and detail where those shared objects 
>are? I don't think it is possible to create shared objects via mod_python 
>before the processes are seperated. Even if it was, is it possible to 
>transfer references to those shared objects to each process?
>
>The only solution I see right now is to have some central repository that any 
>process can access and declare the existence of shared objects, their 
>location, and whatever else is needed. Other processes can read the 
>repository and find currently existing shared objects by a unique string.
>

I think that the nicest solution (in terms of API, at least) would be to 
have an explicit namespace that is instantiated when mod_python is first 
loaded.  Applications could then access this shared namespace by 
importing it; anything declared in the namespace would be automatically 
shared.

For example.

[in code_run from mod_python]

from mod_python import apache.shared as shared

shared.myvar = 'something here'

if not hasattr(shared, 'anothervar'): shared.anothervar = 'something else'

it could be an option declared in the httpd.conf, optionally specifying 
a type of backing store:

<PythonOption shared-memory> # just uses a piece of memory
or
<PythonOption shared-memory mmapstorage file="shared.dat">
or
<PythonOption shared-memory berkeleystorage file="shared.db">
or
<PythonOption shared-memory zodbstorage file="shared.zodb">

VanL

From jack_diederich at email.com  Thu Jun 26 18:58:25 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <20030626235825.19765.qmail@email.com>

From: VanL <vlindberg@verio.net>
> I think that the nicest solution (in terms of API, at least) would be to 
> have an explicit namespace that is instantiated when mod_python is first 
> loaded.  Applications could then access this shared namespace by 
> importing it; anything declared in the namespace would be automatically 
> shared.
> 
> For example.
> from mod_python import apache.shared as shared
> 
> shared.myvar = 'something here'
> 

In the future setting variables in other module spaces may be
outlawed in python.  Treating modules like classes/objects
is also strongly discouraged.

I think your use of dicts is dead on, something like:
def do_calc():
  cache = mod_python.shared
  if ('foo' not in cache):
    cache['foo'] = 'bar'
  return cache['foo']

As I mentioned during the long thread on what frameworks
should do, we could add two dicts to mod_python,
mod_python.page_cache # caching dict created per-request
mod_python.perm_cache # cache valid accross all processes for ever

perm_cache could actually lie and just keep the last X least
recently used entries, but the main idea is that it is long
lasting and valid accross all processes.  An intermediate
mod_python.proc_cache that is similarly 'permenent' for the
life of the process, but only caches values locally to the
current process might be useful in a pure-forking server
because it doesn't have to worry about locking.  If you are
threading you have to do locking anyway, so perm_cache is
more useful.

-jack


-- 
__________________________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From ronwalf at wam.umd.edu  Thu Jun 26 21:53:00 2003
From: ronwalf at wam.umd.edu (Ron Alford)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Disabling restricted execution mode?
Message-ID: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>

Is there a way of disabling restricted user mode in mod_python 2.7.x?  
I'm using some third party libraries, and the rexec seems to be getting in 
the way without any tangible benefits.

Thanks,
-Ron

--
Ron Alford, KB0NUV
http://volus.net/~ronwalf


From mmckerns at its.caltech.edu  Thu Jun 26 20:31:36 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] I don't understand this error
Message-ID: <Pine.GSO.4.44.0306262030220.2262-100000@sue>

I think the error here has something to do with PyXML or 4Suite, so
this probably isn't an error caused by mod_python, but I don't know
where else to try.  I tried the Python XML-SIG list, and I was told
that this is a common error, and I should ask here.  So here I am...
Anyone recognize this error?

----- Begin Forwarded Message -----
I'm working on a distributed computing project, and I'm trying to
port the server we built to another computer.  On the current server,
our this test code works -- on the new machine it fails...
Apache tests pass, & mod_python tests pass. I get failures on some of
the 4Suite tests.  Any help or advice I can get is greatly appreciated.
Thanks.



OS/BUILD INFO: (NEW)			(OLD)
---------------------------------------------
Red Hat Linux 8.0 3.2-7			Red Hat Linux 7.1 2.96-85
Python 2.2.2-7				Python 2.2.1
PyXML 0.8.2 (without xslt & xpath)      PyXML 0.8.0 (with xslt & xpath)
4Suite 1.0a1				4Suite 0.10.1-1
httpd 2.0.40-11.5			apache 1.3.22-5.7.1
mod_python 3.0.3			mod_python 2.7.1-1
pycrypto 1.9a6				pycrypto 1.9a3
xmlrpclib 1.0.1				xmlrpclib 1.0.1
jonpy 0.05				jonpy 0.04
---------------------------------------------



TEST CODE:
---------------------------------------------
#! /usr/bin/env python
#################################
# pyweb.py
# testing python web handler
#################################

import jon.session as session
import jon.cgi
import jon.modpy as modpy
import xmlrpclib
import sys

# without the next line, this test works.
from xml.dom.ext.reader.Sax2 import FromXml

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK
---------------------------------------------



CHANGES TO HTTPD.CONF
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------



ERRORS PRODUCED:
---------------------------------------------
Mod_python error: "PythonHandler pyweb"

Traceback (most recent call last):

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 320,
in HandlerDispatch
    module = import_module(module_name, config)

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 499,
in import_module
    module = imp.load_module(mname, f, p, d)

  File "/home/mmckerns/public_html/pyweb.py", line 9, in ?
    from xml.dom.ext.reader.Sax2 import FromXml

  File "/usr/lib/python2.2/site-packages/_xmlplus/dom/ext/reader/__init__.py",
line 21, in ?
    encoder = codecs.lookup("utf-8")[0] # encode,decode,reader,writer

  File "/var/tmp/python-2.2.2-root/usr/lib/python2.2/encodings/__init__.py",
line 51, in search_function

RuntimeError: cannot unmarshal code objects in restricted execution mode
---------------------------------------------



Please speak slowly, so even I can understand...
I'm Mat.Sci., not Comp.Sci.

---

Mike McKerns
Caltech Materials Science
mmckerns@caltech.edu




From big.stick at bol.com.br  Fri Jun 27 01:09:50 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] I don't understand this error
In-Reply-To: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
References: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
Message-ID: <1595782234.20030627010950@bol.com.br>

Friday, June 27, 2003, 12:31:36 AM, you wrote:

MM> (...) Anyone recognize this error? (...)
MM> RuntimeError: cannot  unmarshal code objects in restricted
MM> execution mode 

I got the same error when using Python 2.2.2 and I was told it was
related to a 'codec registry and Python embedding problem'. It seems
that it's fixed on Python 2.3.

HTH

-- stick


From grisha at modpython.org  Fri Jun 27 00:40:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030627003659.B86123@onyx.ispol.com>



On Thu, 26 Jun 2003, Robert Sanderson wrote:

> However, the connection object is a little too high level ... are there
> plans for implementing a lower level 'socket' like interface, rather than
> a blocking line or character reader?  The mod_perl module has this sort of
> interface for example (AFAICT)
>
> For example, I need to be able to consume all of the data currently
> waiting into one chunk to process ... which may or may not end in a
> linebreak character, can be of arbitrary length and the connection
> doesn't close after sending.  So I can't use either read() or readline(),
> with or without arguments :/

I'm curious what mod_perl folks are doing, I haven't looked at it.

Unless I'm mising something, the only way you can deal with this kind of
data is read a character at a time.

(Or non-blocking IO, but off the top of my head I don't even know if
Apache supports it)

Grisha
From grisha at modpython.org  Fri Jun 27 00:48:00 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Disabling restricted execution mode?
In-Reply-To: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
References: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
Message-ID: <20030627004441.G86123@onyx.ispol.com>


Appearance of restricted mode is a bug - mod_python doesn't use restricted
mode, but it appears this way because the way Python knows that we're
running in restricted mode is by comparing frame pointers (iirc), and they
happen to be different sometimes (but I don't remember now exactly why).

I think if you upgrade to a newer version of Python it will go away.

Grisha

On Thu, 26 Jun 2003, Ron Alford wrote:

> Is there a way of disabling restricted user mode in mod_python 2.7.x?
> I'm using some third party libraries, and the rexec seems to be getting in
> the way without any tangible benefits.
>
> Thanks,
> -Ron
>
> --
> Ron Alford, KB0NUV
> http://volus.net/~ronwalf
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From vlindberg at verio.net  Fri Jun 27 09:02:51 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626235825.19765.qmail@email.com>
References: <20030626235825.19765.qmail@email.com>
Message-ID: <3EFC5C9B.6060703@verio.net>

Jack Diederich wrote:

> In the future setting variables in other module spaces may be
>
>outlawed in python.  Treating modules like classes/objects
>is also strongly discouraged.
>

Hmm. But who said that "shared" had to be a module?  It could just as 
easily be an instantiation of a class that is instantiated when 
mod_python starts.  That might actually make more sense, as someone 
implementing a shared module would only need to override the __getattr__ 
and __setattr__ hooks.

For example, in the mod_python initialization:

if options.has_key('shared-memory'):
    global shared
    shared = sharedmemoryimplementation()

The rest of the code I provided when then work unchanged.  It doesn't 
have to be a module, just a *namespace*.

>mod_python.page_cache # caching dict created per-request
>mod_python.perm_cache # cache valid accross all processes for ever
>

This is a good idea.  +1.

VanL

From azaroth at liverpool.ac.uk  Mon Jun 30 14:14:45 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030627003659.B86123@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>

On Fri, 27 Jun 2003, Gregory (Grisha) Trubetskoy wrote:
> On Thu, 26 Jun 2003, Robert Sanderson wrote:

> > However, the connection object is a little too high level ... are there
> > plans for implementing a lower level 'socket' like interface, rather than
> > a blocking line or character reader?  The mod_perl module has this sort of
> > interface for example (AFAICT)
> > For example, I need to be able to consume all of the data currently
> > waiting into one chunk to process ... which may or may not end in a

> I'm curious what mod_perl folks are doing, I haven't looked at it.

I'm by no means an expert, in fact I've only just started looking at the 
connection handling stuff in Apache, but:

http://perl.apache.org/docs/2.0/api/Apache/Filter.html#Streaming_Filter_API

Read
  $f->read(my $buffer, $read_len);
Reads at most $read_len characters into $buffer. It returns a true value 
as long as it had something to read, and a false value otherwise.


> Unless I'm mising something, the only way you can deal with this kind of
> data is read a character at a time.
> (Or non-blocking IO, but off the top of my head I don't even know if
> Apache supports it)

There's a flag: APR_NONBLOCK_READ that can be passed to apr_bucket_read()

Have a look at:
  http://www-106.ibm.com/developerworks/linux/library/l-apache/
for example  (Which uses mod_python as an example :) )

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Mon Jun 30 09:42:13 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030630092522.B53253@onyx.ispol.com>



On Mon, 30 Jun 2003, Robert Sanderson wrote:

> Read
>   $f->read(my $buffer, $read_len);
> Reads at most $read_len characters into $buffer. It returns a true value
> as long as it had something to read, and a false value otherwise.

This looks like a filter read, mod_python's behaves in the same way. But
filter semantics are different, because filters aren't called unless there
is something to read.

I know that there is the APR_NONBLOCK_READ flag, but it isn't very useful,
since it would mean that your program would have to read in a loop wasting
cpu time until it has what it needs.

The normal way of dealing with this sort of thing is by calling select()
on a socket which will then call your function when there is anything to
read. I don't know whether APR provides this.

I think your only option is to read a byte at a time, making sure that
when you receivie a complete frame/packet/whatever you stop reading so as
to not block indefinitely.

Grisha

From michael.medland at acterna.com  Mon Jun 30 17:01:49 2003
From: michael.medland at acterna.com (Michael Medland)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] Mod_python xml parsing problem
Message-ID: <OF783867B1.3D0B6EBD-ONC1256D55.00574BE1-80256D55.005D62D6@eng.eni.wago.de>

Hi, I am currently using Python 2.2.3, apache 1.3.27 and mod_python 2.7.8. 
Under Solaris 8 on a sun.
The configuration appears to be working fine but, the problem that i am 
having is in parsing xml files, when i do for example:

xmlfile = minidom.parse(file)
root = xmlfile.childNodes

It creates a dom instance but it contains nothing at all, and root returns 
a 'nonetype'. I believe that it may be an encoding problem but i dont know 
how to fix it.
When i tried the same code using cgi instead of mod_python it worked fine.
Any suggestions would be greatly appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/29604ed9/attachment-0002.htm
From jakubec at san.rr.com  Mon Jun 30 21:06:36 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 22:00:11 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001801c33f86$2d84a0a0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.
-dj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/94a11f98/attachment-0002.htm
From rey4 at columbia.edu  Sun Jun  1 17:27:33 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 22:03:53 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <bbdqu2$cog$1@main.gmane.org>

Hi, I'm trying to get write a multithreaded script to run under mod_python
and apache 1.3 on linux, but the script seems to just freeze up at the point
of thread creation leaving the http connection open but not doing anything
else.

I isolated the problem in a little test script:

-- begin mptest.py --
from mod_python import apache

def handler(req):
  w = Worker(req)
  req.write("Starting thread...\n")
  w.start()
  req.write("Joining thread...\n")
  w.join()
  req.write("Done.\n")
  return apache.OK

import threading

class Worker(threading.Thread):
  def __init__(self, req):
    self.req = req
    threading.Thread.__init__(self)

  def run(self):
    self.req.write("  Hello from thread!\n")
-- end mptest.py --

-- begin .htaccess --
AddHandler python-program .py
PythonHandler mptest
PythonDebug On
-- end .htaccess --

The script runs fine on a windows box running Apache 2.0.46, Mod_Python
3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
1.3.27, Mod_Python 2.7.8, and Python 2.2.2.

The place where it seems to freeze is at w.start(). If you comment that line
out, it does complete execution. Is this problem a bug in mod_python, or
have I done something wrong?

- Russ



From daniel at copyleft.no  Sun Jun  1 23:39:27 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 22:03:53 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
In-Reply-To: <bbdqu2$cog$1@main.gmane.org>
Message-ID: <20030601233903.P58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hi, I'm trying to get write a multithreaded script to run under mod_python
> and apache 1.3 on linux, but the script seems to just freeze up at the point
> of thread creation leaving the http connection open but not doing anything
> else.

Apache 1.3 doesn't support threading. So neither does mod_python when combined
with it. Upgrade Apache.

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 18:39:25 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 22:03:53 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
References: <bbdqu2$cog$1@main.gmane.org>
	<20030601233903.P58312-100000@unity.copyleft.no>
Message-ID: <bbdv4s$4ar$1@main.gmane.org>

Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
calling Thread.start() in an apache process would cause it to lock up. I'm
trying to add mod_python support to an open source project (ViewCVS) and I'd
like to avoid making apache 2 a requirement for it, although I will try
upgrading apache on my own server. Any more information on mod_python 2.x
and threading would be much appreciated.

- Russ


Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Hi, I'm trying to get write a multithreaded script to run under
>> mod_python and apache 1.3 on linux, but the script seems to just
>> freeze up at the point of thread creation leaving the http
>> connection open but not doing anything else.
>
> Apache 1.3 doesn't support threading. So neither does mod_python when
> combined with it. Upgrade Apache.
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 00:55:11 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 22:03:53 2004
Subject: [mod_python] Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbdv4s$4ar$1@main.gmane.org>
Message-ID: <20030602005124.I58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Apache 1.3 doesn't _use_ threading, but this doesn't explain why merely
> calling Thread.start() in an apache process would cause it to lock up. I'm
> trying to add mod_python support to an open source project (ViewCVS) and I'd
> like to avoid making apache 2 a requirement for it, although I will try
> upgrading apache on my own server. Any more information on mod_python 2.x
> and threading would be much appreciated.

Apache 1.3 is not threadsafe. In my experience, it will crash when it's linked
to the threading libs - which is what happens if you load a threaded version of
mod_python.

I've always had to build a separate python without threading support, for use
with mod_python, when I want to use Apache 1.3.

This is probably what you've done too, or the system has done for you (or the
guy who made the binaries did). Loading "threading" in Python when Python is
built without threading support might lock it up - that could be what you're
seeing.

Either way, you will have to switch to Apache 2.0 if you want to use threading
with mod_python. This is the nature of mod_python. :)

-- Daniel

From rey4 at columbia.edu  Sun Jun  1 19:58:30 2003
From: rey4 at columbia.edu (Russell Yanofsky)
Date: Fri Jan  9 22:03:53 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
References: <bbdv4s$4ar$1@main.gmane.org>
	<20030602005124.I58312-100000@unity.copyleft.no>
Message-ID: <bbe3pa$r2b$1@main.gmane.org>

Hey, thanks for your help. I installed apache 2 and everything began to
work! I still don't understand the behavior with apache 1.3. The fact that
apache code is not threadsafe doesn't explain why threading.Thread.start()
(which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
one version of python installed on my system and it does support threading.
Oh well, hopefully apache 1.3 will go away soon.

- Russ

Hr. Daniel Mikkelsen wrote:
> On Sun, 1 Jun 2003, Russell Yanofsky wrote:
>
>> Apache 1.3 doesn't _use_ threading, but this doesn't explain why
>> merely calling Thread.start() in an apache process would cause it to
>> lock up. I'm trying to add mod_python support to an open source
>> project (ViewCVS) and I'd like to avoid making apache 2 a
>> requirement for it, although I will try upgrading apache on my own
>> server. Any more information on mod_python 2.x and threading would
>> be much appreciated.
>
> Apache 1.3 is not threadsafe. In my experience, it will crash when
> it's linked to the threading libs - which is what happens if you load
> a threaded version of mod_python.
>
> I've always had to build a separate python without threading support,
> for use with mod_python, when I want to use Apache 1.3.
>
> This is probably what you've done too, or the system has done for you
> (or the guy who made the binaries did). Loading "threading" in Python
> when Python is built without threading support might lock it up -
> that could be what you're seeing.
>
> Either way, you will have to switch to Apache 2.0 if you want to use
> threading with mod_python. This is the nature of mod_python. :)
>
> -- Daniel



From daniel at copyleft.no  Mon Jun  2 02:13:06 2003
From: daniel at copyleft.no (Hr. Daniel Mikkelsen)
Date: Fri Jan  9 22:03:53 2004
Subject: [mod_python] Re: Re: Mod_Python 2.7.8 and threading
In-Reply-To: <bbe3pa$r2b$1@main.gmane.org>
Message-ID: <20030602020851.V58312-100000@unity.copyleft.no>

On Sun, 1 Jun 2003, Russell Yanofsky wrote:

> Hey, thanks for your help. I installed apache 2 and everything began to
> work! I still don't understand the behavior with apache 1.3. The fact that
> apache code is not threadsafe doesn't explain why threading.Thread.start()
> (which doesn't invoke any apache code) deadlocks. And AFAICT, there's only
> one version of python installed on my system and it does support threading.
> Oh well, hopefully apache 1.3 will go away soon.

Well, things are set up differently on different systems, I have experience
with OpenBSD and FreeBSD. If I tried to do what you did, I would have ended up
in one of two situations:

1) If I used a threaded Python for my mod_python, and attempted to load
mod_python in apache, I would get error messages about unresolved symbols
belonging to libpt. Since obviously, Apache isn't linked against that library.

2) If I used an unthreaded version, I would be able to load things and get
going, but I'd get undefined behaviour if I tried to use threading in my python
script, since the python binary doesn't support the calls the threading module
needs. This is probably what's happening to you.

-- Daniel

From fraser at wehave.net  Sun Jun  1 21:48:46 2003
From: fraser at wehave.net (Fraser Campbell)
Date: Fri Jan  9 22:03:53 2004
Subject: [mod_python] Urgent Help Needed
In-Reply-To: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
References: <BAY1-F165Vp20N39x6H00002eb6@hotmail.com>
Message-ID: <200306012148.46546.fraser@wehave.net>

On May 27, 2003 11:18 pm, Graeme Matthew wrote:

> Does anyone know where one can get a mod_python binary install for linux
> just like the one that exists for Windows as I cannot afford to spend my 2
> coding days trying to get mod_python working, if there is no such file then
> thats fine, ill forget it all together.

This reply is very late, very off-topic and wouldn't have helped you given 
your time constraints anyway but ... my apologies if anyone is offended.

Try Debian, 8000+ packages installable (python 2.1 is default but 1.5 and 2.2 
are available), runs on 11 architectures, will likely (sooner or later) 
support multiple kernels (linux, hurd and a few BSDs).  Anyway, once Debian 
is running type "apt-get install libapache-mod-python" and you're done.

Debian is stable as a rock which means you don't often get upgrades, it's not 
for everyone.  OTOH, running apache 1.3.26 with mod_python 2.7.8 makes me 
quite happy considering the recurring security issues with apache2.

-- 
Fraser Campbell <fraser@wehave.net>                 http://www.wehave.net/
Halton Hills, Ontario, Canada                                 Debian GNU/Linux

From mike.looijmans at asml.com  Mon Jun  2 07:40:29 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Mod_Python 2.7.8 and threading
Message-ID: <01c328c9$79974480$926a1e6e@wsasd464>

Probably, the freeze is because apache 1.3 doesn't support threading.

I guess the same applies to the "req" object as most GUIs: Only access the
Request object from the thread that created it. It might work if you make the
thread object like this:

    def run(self):
        self.result = "Hello from thread!\n"

then after the join, use "req.write(w.result)" to output the result from the
thread.

Solution would be to remove the threading, since it is useless in a HTTP
server anyway. The client has to wait for the data to be sent back anyway. If
you want to use another handler for parts of the message, just send the client
a "304" (redirect) response, or (if you feel like having fun) send a HTTP
request to your own HTTP server, which will use another process or thread to
handle it.

I use HTTP client connections inside the HTTP server on our replication server
(which acts as a sort of 'proxy': work on a replication slave of the MySQL
master database and also caches files) to fetch files from the master server.

--
Mike Looijmans

-----Original Message-----
From: Russell Yanofsky <rey4@columbia.edu>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Sunday, June 01, 2003 11:34 PM
Subject: [mod_python] Mod_Python 2.7.8 and threading


>Hi, I'm trying to get write a multithreaded script to run under mod_python
>and apache 1.3 on linux, but the script seems to just freeze up at the point
>of thread creation leaving the http connection open but not doing anything
>else.
>
>I isolated the problem in a little test script:
>
>-- begin mptest.py --
>from mod_python import apache
>
>def handler(req):
>  w = Worker(req)
>  req.write("Starting thread...\n")
>  w.start()
>  req.write("Joining thread...\n")
>  w.join()
>  req.write("Done.\n")
>  return apache.OK
>
>import threading
>
>class Worker(threading.Thread):
>  def __init__(self, req):
>    self.req = req
>    threading.Thread.__init__(self)
>
>  def run(self):
>    self.req.write("  Hello from thread!\n")
>-- end mptest.py --
>
>-- begin .htaccess --
>AddHandler python-program .py
>PythonHandler mptest
>PythonDebug On
>-- end .htaccess --
>
>The script runs fine on a windows box running Apache 2.0.46, Mod_Python
>3.0.3, and Python 2.2.2, but it freezes on my linux server running Apache
>1.3.27, Mod_Python 2.7.8, and Python 2.2.2.
>
>The place where it seems to freeze is at w.start(). If you comment that line
>out, it does complete execution. Is this problem a bug in mod_python, or
>have I done something wrong?
>
>- Russ
>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From jorge.lopez at scati.com  Mon Jun  2 10:50:46 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Troubles of Memory
Message-ID: <5.1.0.14.0.20030602091426.00b344c8@pop3.scati.com>

Hello:
I labor in a company from Spain and I'm having troubles of memory when I 
use mod_python.
I'm get time of remote computer using 'sockets'. Looking at Task Admin of 
Windows, I observe that 'Memory Use' augment every time until my computer die.
Script tries to connect socket and sends a request of time. Then, socket 
receives time.
Code is:

def getTime(host):
     t = "Error"
     try:
         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         s.connect((host,8000))
         s.send('DAMELAAHORA\0')
         t = receive(s,15)
     finally:
         if s != None:
             s.close()
         return t

def receive(socket, size):
     buffer=''
     while size != 0:
         data = socket.recv(size)
         buffer += data
         size = size-len(data)
     return buffer

I write this 'time' in a file XML. Then, page HTML loads this file with 
JavaScript every second.
I use Window 2000 with Apache 2.0.44,  mod_python 3.0.1 and Python 2.2.2.
I wait for your answer
Thanks 



From tohmas.ash at takashi.zzn.com  Mon Jun  2 17:11:34 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <7ECE174E8B55C774D902B465F5258462@tohmas.ash.takashi.zzn.com>

Hi, it's again me with some php-to-mod_python problems :)

I use some 'forms' and went a user put some html tags into inputs that
put my html pages in a big mess...

like in my last query, in know how to stop this problem in php with
the fonction 'htmlentities' but I didn't found something like that for
mod_python.

sorry to compare all the time this two scritp language, the cause it's
just my personnal experience...

thanks in advance for your answers

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From dustin at ywlcs.org  Mon Jun  2 11:02:29 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <20030602160229.GJ26794@eleanor.internal.ywlcs.org>

On Mon, Jun 02, 2003 at 05:11:34PM +0200, tohmas ash wrote:
> Hi, it's again me with some php-to-mod_python problems :)
> 
> I use some 'forms' and went a user put some html tags into inputs that
> put my html pages in a big mess...
> 
> like in my last query, in know how to stop this problem in php with
> the fonction 'htmlentities' but I didn't found something like that for
> mod_python.

If you import the Python cgi module (don't use its FormData class!!), it has
a function 'escape' which does what you'd like.

Perhaps this is a candidate for inclusion in mod_python's utils module?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jorge.lopez at scati.com  Tue Jun  3 15:57:27 2003
From: jorge.lopez at scati.com (Jorge =?iso-8859-1?Q?L=F3pez?=)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] How Free Memory?
Message-ID: <5.1.0.14.0.20030603153817.00b73c08@pop3.scati.com>

Hello:
I try this simple code:

	from mod_python import apache
	def handler(req):
		req.write("Hello World!\n")
		return apache.OK

My Apache's configuration is:

	<Directory "C:/Archivos de programa/Apache Group/Apache2/htdocs/python/">
		AddHandler python-program .py
		PythonHandler mptest
		PythonDebug On
	</Directory>

Well, I open the page 'http://localhost/python/mptest.py' and, of course, I 
see 'Hello World' at screen.
Then, I press down F5 (to update) and hold down the key. I observe 'Admin 
Task' and use of memory is increasing!!!
Process is named 'Apache' always continues growing. I close navigator and 
memory isn't freed.
How can I free this memory?
Thanks.

I use: Apache 2.0.44, Python 2.2.2, mod_python 3.0



From i at mindlace.net  Tue Jun  3 14:38:19 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] PythonTransHandler contract requirements?
Message-ID: <2147483647.1054651099@[10.0.1.2]>

Hello,

I'm trying to implement a transhandler, but I cannot figure out what I am 
supposed to provide apache to allow it to continue handling the request. 
Documentation pointers gratefully accepted.

Given a path, I want to provide a handler for the request.

My simplistic translation handler is like so:

def transhandler(req):
    # First check if we're configured to handle this request.
    checkHandle(req)
    root = req.document_root()
    raw_filename = path.join(root,req.uri)
    raw_fileparts = path.split(raw_filename)
    if path.exists(raw_filename):
       if raw_filename[-3:] != '.py':
           raise apache.SERVER_RETURN, apache.DECLINED
       else:
           req.filename=raw_fileparts[0]
           req.modpath=raw_fileparts[0]
           sys.path.append(raw_filename)
           req.add_handler("PythonHandler",raw_fileparts[1][-3:])
           return apache.OK
    raise apache.SERVER_RETURN, apache.DECLINED

And the handler at the location in question:

def handler(req):
    req.write(body % "Ni!")
    return apache.OK

What I get back is the raw text of the module containing the handler.

~mindlace
http://mindlace.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20030603/ca478f73/attachment-0003.bin
From dustin at ywlcs.org  Tue Jun  3 17:24:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] PythonTransHandler contract requirements?
In-Reply-To: <2147483647.1054651099@[10.0.1.2]>
References: <2147483647.1054651099@[10.0.1.2]>
Message-ID: <20030603222413.GO26794@eleanor.internal.ywlcs.org>

You need to set req.filename to a file that actually exists; since you're
using a PythonHandler, it shouldn't really matter which file you choose, so
it's safe to just point it at your script (__FILE__) or some other
known-present file.

I hope that answers your query.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From tohmas.ash at takashi.zzn.com  Wed Jun  4 10:14:24 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] how control "html tag" in input ?
Message-ID: <38B29A4DEB2D9224F8B77AE85C18B633@tohmas.ash.takashi.zzn.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030604/5389ae9a/attachment-0003.htm
From ireneponti at yahoo.com  Thu Jun  5 10:51:29 2003
From: ireneponti at yahoo.com (Irene Ponti)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <20030605175129.58563.qmail@web40703.mail.yahoo.com>

Hi to all

I have to put into a SQL database the content of some
variables coming from an Internet form.

If this variables have some caracters as ' or "
inside, the sql server return an error because the
query is not in correct sintax.

Now in php exist a standard function that add slashes
in front of ' or " in a variable and another that
remove slashes.

Is there in python a function like this?

Thank you.

__________________________________
Do you Yahoo!?
Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
http://calendar.yahoo.com
From mod_python at ols.inorganic.org  Thu Jun  5 11:12:50 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
References: <20030605175129.58563.qmail@web40703.mail.yahoo.com>
Message-ID: <20030605181249.GA3360@nag.inorganic.org>

On Thu, Jun 05, 2003 at 10:51:29AM -0700, Irene Ponti wrote:
> I have to put into a SQL database the content of some
> variables coming from an Internet form.
> 
> If this variables have some caracters as ' or "
> inside, the sql server return an error because the
> query is not in correct sintax.
> 
> Now in php exist a standard function that add slashes
> in front of ' or " in a variable and another that
> remove slashes.
> 
> Is there in python a function like this?

Yes.
No.
Maybe.

How are you accessing the database?

I'm using MySQLdb; I just confirmed that it automatically adds the
proper escapist magic to make this stuff just plain work.

I'm guessing that, depending on the module you're using to access the
database, it may offer the proper mechanisms (much like in Perl's
DBD/DBI, there's a database-specific way to escape strings).

-roy
From tohmas.ash at takashi.zzn.com  Thu Jun  5 22:48:58 2003
From: tohmas.ash at takashi.zzn.com (tohmas ash)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <B27DD9D06BE5D18419F9663B09169141@tohmas.ash.takashi.zzn.com>

I use posgresql and had this problem, I solve it with the 'remplace'
fonction on the string module.
(cf http://python.org/doc/current/lib/module-string.html)

remplace(string "'", "\'")

but maybe there is a more simple fonction for do that...

Get your Free E-mail at http://takashi.zzn.com
___________________________________________________________
Get your own Web-based E-mail Service at http://www.zzn.com
From rien at yeepa.org  Thu Jun  5 23:08:14 2003
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <3EDFB13E.8010305@yeepa.org>

Irene Ponti wrote:
 > Now in php exist a standard function that add slashes
 > in front of ' or " in a variable and another that
 > remove slashes.
 >
 >Is there in python a function like this?

Hi Irene,

you have 2 choices:
- string objects in python offers a replace() member.
   so you can write:
	query = """a string with 'quotes' and "doublequotes" """
  	new_query = query.replace('"', '\\"')	

- the re module allows for regular expression searching and replacement
   but this mail is far too short too explain regular expression.
   just have a look at the python manuals (chapter 4.2 of the library
   reference).

Just beware that '\' is a special character inside python string:
"\\'" is totally different from "\'". the first form describe a 
backslash preceding a single quote character, the second describe a 
string which only contains a single quote. idem for double quotes.

 > Thank you.
you're welcome...

-- 
rien

From neel at mediapulse.com  Thu Jun  5 18:59:06 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>

I'm surprised no one has mentioned this yet, but you really need to be
using placeholders with the cursor; otherwise you are writing
exploitable code.

Consider this:

C.execute("SELECT name FROM users WHERE user_id='" +
cgi_submitted_userid + "'")

Now I send my userid as "hackyou'; DELETE FROM users --"

You get:

SELECT name FROM users WHERE user_id='hackyou'; DELETE FROM users --'

Not good (MySQL seperates stmts with ;'s, other DBs do it differently
but we'll leave that as an exersice for the reader.  The -- comments out
the rest of the line).  So you do a addSlash to userid and get:

SELECT name FROM users WHERE user_id='hackyou\'; DELETE FROM users --'

Okay if you're MySQL, MSSQL escapes a ' as ''.  
But we have a good hacker, so he tries userid as "hackyou\'; DELETE FROM
users --"

SELECT name FROM users WHERE user_id='hackyou\\'; DELETE FROM users --'

Doh!

But, if we do this:

C.execute("SELECT name FROM users WHERE
user_id=%s",(cgi_submitted_userid,) )

The query is sent seperatly from the data, so the server can handle
anything it's own way correctly (i.e. MySQL will use a \', MS SQL will
use a '').  And you don't have to think about it.  Simpler and safer.

Mike

From mod_python at ols.inorganic.org  Thu Jun  5 16:18:07 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
Message-ID: <20030605231807.GC6513@nag.inorganic.org>

On Thu, Jun 05, 2003 at 06:59:06PM -0400, Michael C. Neel wrote:
> I'm surprised no one has mentioned this yet, but you really need to be
> using placeholders with the cursor; otherwise you are writing
> exploitable code.
> 
> Consider this:
> 
> C.execute("SELECT name FROM users WHERE user_id='" +
> cgi_submitted_userid + "'")
> 
> Now I send my userid as "hackyou'; DELETE FROM users --"

Back up there.

You don't need to use placeholders with the cursor.
You need to write non-exploitable CGI code.

I really like Perl's "warn me if I actually use anything given to me
from the outside without validating it" option, but hey, we're Python
programmers -- we shouldn't need our hands held.  Validate, validate,
validate.

-roy
From jm at eemsystems.cjb.net  Thu Jun  5 18:37:11 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] segmentation fault
Message-ID: <1054856231.1465.17.camel@eemsystems.com>

I'm using postgresql 7.3 and python from debian unstable.

After varios upgrades my scripts are working bad.

I can not find what happens.


JM



[Thu Jun  5 18:08:21 2003] [notice] child pid 865 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:24 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:24 2003] [notice] child pid 867 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing
mod_python.publisher from None
[Thu Jun  5 18:08:27 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] mod_python: (Re)importing domino
from ['/pub/web/cgi-bin']
[Thu Jun  5 18:08:29 2003] [notice] child pid 870 exit signal
Segmentation fault (11)
[Thu Jun  5 18:08:29 2003] [notice] child pid 868 exit signal
Segmentation fault (11)

-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From max.zhang at converzal.com  Fri Jun  6 11:07:02 2003
From: max.zhang at converzal.com (max.zhang)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Virtual host and mod_python
Message-ID: <000a01c32bd8$b42882f0$1700a8c0@converzamax>

Hi all,

My Redhat 7.3 +apache1.3 + mod_python2.7

http.conf

<VirtualHost *>
...
</VirtualHost *>
 ...   
<VirtualHost *>
   DocumentRoot /www/htdocs/xy.com/
    ServerName xy.xy.com
    ScriptAlias /cgi-bin/ "/www/htdocs/xy.com/cgi-bin/"

    <Directory "/www/htdocs/xy.com/bulletin">
         AddHandler python-program .py
        PythonHandler mod_python.publisher # this part works well
        PythonDebug On
    </Directory>

    <Directory "/www/htdocs/xy.com/fileman">
         AddHandler python-program .py
        PythonHandler filemanager # this mod_python program can't work .apache display code of filemanager.py in IE client 
        PythonDebug On    
    </Directory>

</VirtualHost>
......

why? The mod_python can't work with virtual host ?
Thanks


Max

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030606/7e64c428/attachment-0003.htm
From dustin at ywlcs.org  Thu Jun  5 22:23:02 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
In-Reply-To: <20030605231807.GC6513@nag.inorganic.org>
References: <C0FC22C08B82074A88B50061764157775C6A@johnson.mediapulse.net>
	<20030605231807.GC6513@nag.inorganic.org>
Message-ID: <20030606032302.GB1192@eleanor.internal.ywlcs.org>

> I really like Perl's "warn me if I actually use anything given to me
> from the outside without validating it" option, but hey, we're Python
> programmers -- we shouldn't need our hands held.  Validate, validate,
> validate.

No, we're smart programmers who use reusable code.  Validate. (once)

And someone's already written validation code for each specific DB engine, in
the form of placeholders in cursors.  If you don't want to use placeholders,
at least be sure to write a single, **correct** validation function which you
use religiously.

Perl's taint feature bugs me because it's fairly liberal about what it meants
to "validate", so it's possible to convince Perl that everything's cool while
still leaving yourself open.  That's why we Pythonistas don't like our hands
being held. 'nuf said.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From gre7g-k-modpython.e475ec at wolfhome.com  Thu Jun  5 22:35:39 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <3EDFC5BB.11618.56D33C@localhost>

And now for something completely different...  

I'd like to announce my new mod_python project "Roadkill".

Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
Python code within a .epy webpage to generate dynamic content.  This 
lets you edit your code with your favorite GUI webpage editor instead 
of pasting HTML into your CGI or keeping a bunch of templates that 
your CGI imports.

The homepage for Roadkill can be found at: 
http://roadkill.sourceforge.net/

The documentation is thin and the bugs are most likely numerous (what 
can you expect for version 0.01?), but if any of you would like to 
play with it, I would certainly appreciate comments and bug reports.  
It may not be much to look at now, but hopefully you'll agree that it 
has great potential.

I now return you to your regularly scheduled mailing list.  ;-)

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From mike.looijmans at asml.com  Fri Jun  6 07:53:21 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <01c32bef$ef641e80$926a1e6e@wsasd464>

If you use MySQL, just use the "escape" function:

# Quote a string for the database. Returns "NULL" for empty strings.
def dbescape(val):
    if val:
        return MySQLdb.string_literal(val)
    else:
        return "NULL"



Now you can do:

db.cursor().execute("INSERT INTO foo (foo_id, name) VALUES (%s, %s)" %
(foo_id, dbescape(form['fooname'].value))

You can use this function for anything you like.

Note that this also makes this stuff a lot more secure: Your application must
be able to cope with a user typing
hi" ; DROP DATABASE monty;


For many other database engines, you can used parameterized (a.k.a.
pre-compiled) queries, a query that is sent to the DBMS with some open
parameters which can be re-used several times with varying parameters. This
eliminates query optimization overhead. These may also offer a performance
advantage.

By the way, does MySQL support this? I've done this quite often with many
databases and clients (Delphi for example), and it makes a huge performance
difference.

--
Mike Looijmans
Private: http://www.milosoftware.com

-----Original Message-----
From: Irene Ponti <ireneponti@yahoo.com>
To: mod_python@modpython.org <mod_python@modpython.org>
Date: Thursday, June 05, 2003 7:53 PM
Subject: [mod_python] addSlashes() in python, sql cgi question


>Hi to all
>
>I have to put into a SQL database the content of some
>variables coming from an Internet form.
>
>If this variables have some caracters as ' or "
>inside, the sql server return an error because the
>query is not in correct sintax.
>
>Now in php exist a standard function that add slashes
>in front of ' or " in a variable and another that
>remove slashes.
>
>Is there in python a function like this?
>
>Thank you.
>
>__________________________________
>Do you Yahoo!?
>Yahoo! Calendar - Free online calendar with sync to Outlook(TM).
>http://calendar.yahoo.com
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


From spyce at symbolist.ru  Fri Jun  6 12:51:29 2003
From: spyce at symbolist.ru (Spyce)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <10513932398.20030606125129@symbolist.ru>

Hello Gre7g,

Friday, June 6, 2003, 8:35:39 AM, you wrote:

GL> And now for something completely different...  

GL> I'd like to announce my new mod_python project "Roadkill".

GL> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
GL> Python code within a .epy webpage to generate dynamic content.  This 
GL> lets you edit your code with your favorite GUI webpage editor instead 
GL> of pasting HTML into your CGI or keeping a bunch of templates that 
GL> your CGI imports.

GL> The homepage for Roadkill can be found at: 
GL> http://roadkill.sourceforge.net/

There is a similar project at http://spyce.sourceforge.net. And, yes,
it uses mod_python too.

-- 
Best regards,
 Spyce                            mailto:spyce@symbolist.ru

From neo at https.ru  Fri Jun  6 13:48:00 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EDFC5BB.11618.56D33C@localhost>
References: <3EDFC5BB.11618.56D33C@localhost>
Message-ID: <262700112.20030606134800@https.ru>


  Not "completely" I think... It should be very very similar to the
old well-known "mod_snake", a open project that was closed for some
reason...


> And now for something completely different...  

> I'd like to announce my new mod_python project "Roadkill".

> Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> Python code within a .epy webpage to generate dynamic content.  This 
> lets you edit your code with your favorite GUI webpage editor instead 
> of pasting HTML into your CGI or keeping a bunch of templates that 
> your CGI imports.

  This is not true. Not true. Not true.
With my templating system I use exactlty ONE XML-file as a template
for a huge and complex Web-site, and I can edit it with "my favorite"
editor. Did you try to write a big site with your "PHP/ASP"-ish Python
"templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .


> The homepage for Roadkill can be found at: 
> http://roadkill.sourceforge.net/

> The documentation is thin and the bugs are most likely numerous (what 
> can you expect for version 0.01?), but if any of you would like to 
> play with it, I would certainly appreciate comments and bug reports.  
> It may not be much to look at now, but hopefully you'll agree that it 
> has great potential.

> I now return you to your regularly scheduled mailing list.  ;-)

> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
>                       Into each wound, a little salt must fall...
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:31:24 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <262700112.20030606134800@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	 <262700112.20030606134800@https.ru>
Message-ID: <1054895483.3142.24.camel@Presario>

Hi Neo

So where can we look at this great template engine?

Cheers

Conrad

On Fri, 2003-06-06 at 02:48, Neo Eureka wrote:
>   Not "completely" I think... It should be very very similar to the
> old well-known "mod_snake", a open project that was closed for some
> reason...
> 
> 
> > And now for something completely different...  
> 
> > I'd like to announce my new mod_python project "Roadkill".
> 
> > Roadkill is a Python-language version of PHP/ASP.  It lets you embed 
> > Python code within a .epy webpage to generate dynamic content.  This 
> > lets you edit your code with your favorite GUI webpage editor instead 
> > of pasting HTML into your CGI or keeping a bunch of templates that 
> > your CGI imports.
> 
>   This is not true. Not true. Not true.
> With my templating system I use exactlty ONE XML-file as a template
> for a huge and complex Web-site, and I can edit it with "my favorite"
> editor. Did you try to write a big site with your "PHP/ASP"-ish Python
> "templates"? Not just "<h1>Hellow, <% print world %>! <h1>" .
> 
> 
> > The homepage for Roadkill can be found at: 
> > http://roadkill.sourceforge.net/
> 
> > The documentation is thin and the bugs are most likely numerous (what 
> > can you expect for version 0.01?), but if any of you would like to 
> > play with it, I would certainly appreciate comments and bug reports.  
> > It may not be much to look at now, but hopefully you'll agree that it 
> > has great potential.
> 
> > I now return you to your regularly scheduled mailing list.  ;-)
> 
> > Gre7g.
> 
> > =================================================================
> > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
> >                       Into each wound, a little salt must fall...
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 14:47:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <1054895483.3142.24.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
Message-ID: <466254823.20030606144714@https.ru>


  Hi, Conrad!

> So where can we look at this great template engine?

  In action, you mean? Well, when the site is ready I can give you a
link. Though it is all in Russian, I think it will not confuse you :).
  I did not say that this "engine" is great, I only sad that the
"advertisement" contained many arguable points...


--- 
Neo Eureka / mailto:neo@https.ru

From conrad at hep.caltech.edu  Fri Jun  6 03:54:38 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01
	"Kitten"
In-Reply-To: <466254823.20030606144714@https.ru>
References: <3EDFC5BB.11618.56D33C@localhost>
	<1054895483.3142.24.camel@Presario>
	<466254823.20030606144714@https.ru>
Message-ID: <1054896878.5988.0.camel@Presario>

Hi

In action or in source ;-)

Cheers

On Fri, 2003-06-06 at 03:47, Neo Eureka wrote:
>   Hi, Conrad!
> 
> > So where can we look at this great template engine?
> 
>   In action, you mean? Well, when the site is ready I can give you a
> link. Though it is all in Russian, I think it will not confuse you :).
>   I did not say that this "engine" is great, I only sad that the
> "advertisement" contained many arguable points...
> 
> 
> --- 
> Neo Eureka / mailto:neo@https.ru
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From neo at https.ru  Fri Jun  6 15:19:03 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Re[4]:
In-Reply-To: <1054896878.5988.0.camel@Presario>
References: <3EDFC5BB.11618.56D33C@localhost>
 <262700112.20030606134800@https.ru> <1054895483.3142.24.camel@Presario>
 <466254823.20030606144714@https.ru> <1054896878.5988.0.camel@Presario>
Message-ID: <858163919.20030606151903@https.ru>


> In action or in source ;-)

  Well, I think about it, but it is still unfinished, I'm considering
how to add some useful functionality to it.
  In the beginning it used DOM to parse XML-templates, but... mmm...
folks, NEVER use DOM if you do not want very slow and memory-consuming
code, so, I've rewritten it all in Python using Expat.

  Of course, I'll send announcement to this list when I have
something that is worth others' attention. 


--- 
Neo Eureka / mailto:neo@https.ru

From neel at mediapulse.com  Fri Jun  6 10:19:54 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] addSlashes() in python, sql cgi question
Message-ID: <C0FC22C08B82074A88B50061764157775C6B@johnson.mediapulse.net>

     > Back up there.
     > 
     > You don't need to use placeholders with the cursor.
     > You need to write non-exploitable CGI code.

Actually, using the placeholder is writing non-exploitable CGI code.
It's standard across drivers that support it, and every major DB does
support placeholders.  It's well tested code too, you're more likely to
make an error writing your own validation routine than find one in the
cursor/database server.


     > 
     > I really like Perl's "warn me if I actually use anything 
     > given to me
     > from the outside without validating it" option, but hey, 
     > we're Python
     > programmers -- we shouldn't need our hands held.  
     > Validate, validate,
     > validate.
     > 

This problem lies in the safest of areas, concatataion of strings.  All
the use strict, taint's, etc will still allow this to happen.  It's like
using hidden fields for price information in an online store; there is
no compiler warnings to say that's a bad idea.

Placeholders are safer, faster, and simpler.  Really no reason not to
use them.

Mike

From neel at mediapulse.com  Fri Jun  6 10:30:35 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>

You should post this in the mod_python dev list as well; currenty there
is discussion of mod_psp (python server pages) being folded into
mod_python, and I'm sure your experience in tackling the same issues
would be helpful.

Thanks,
Mike

     > -----Original Message-----
     > From: Gre7g Luterman 
     > [mailto:gre7g-k-modpython.e475ec@wolfhome.com] 
     > Sent: Friday, June 06, 2003 12:36 AM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Announcement: Roadkill version 
     > 0.01 "Kitten"
     > 
     > 
     > And now for something completely different...  
     > 
     > I'd like to announce my new mod_python project "Roadkill".
     > 
     > Roadkill is a Python-language version of PHP/ASP.  It 
     > lets you embed 
     > Python code within a .epy webpage to generate dynamic 
     > content.  This 
     > lets you edit your code with your favorite GUI webpage 
     > editor instead 
     > of pasting HTML into your CGI or keeping a bunch of 
     > templates that 
     > your CGI imports.
     > 
     > The homepage for Roadkill can be found at: 
     > http://roadkill.sourceforge.net/
     > 
     > The documentation is thin and the bugs are most likely 
     > numerous (what 
     > can you expect for version 0.01?), but if any of you 
     > would like to 
     > play with it, I would certainly appreciate comments and 
     > bug reports.  
     > It may not be much to look at now, but hopefully you'll 
     > agree that it 
     > has great potential.
     > 
     > I now return you to your regularly scheduled mailing list.  ;-)
     > 
     > Gre7g.
     > 
     > =================================================================
     > Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
     > Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
     >                       Into each wound, a little salt must fall...
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From jgardner at jonathangardner.net  Fri Jun  6 07:35:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054856231.1465.17.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
Message-ID: <200306060735.36876.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> I'm using postgresql 7.3 and python from debian unstable.
>
> After varios upgrades my scripts are working bad.
>
> I can not find what happens.
>

Segfaults are always troublesome.

What I used to do in mod_perl was isolate the page or behavior that was giving 
the seg fault. Then I would try and see which version (you're using a version 
control system, right?) introduced the problem. If it wasn't obvious by then, 
I would put various log messages throughout the suspected handler.

Usually that would lead me to one line of code that was giving the problem. At 
least then I can post to the mailing list about what was causing the problem.

I think the same kind of strategy would work for mod_python as well.

Good luck, you have a fun journey ahead of you!

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
SklnZ2tHiMWzTjyEd5hZJ/8=
=Szy2
-----END PGP SIGNATURE-----

From grisha at modpython.org  Fri Jun  6 11:05:03 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9509@johnson.mediapulse.net>
Message-ID: <20030606110400.N43535-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> You should post this in the mod_python dev list as well; currenty there
> is discussion of mod_psp (python server pages) being folded into
> mod_python

It's not in discussion, this already has happened... :-)

Grisha

From barr at cs.cornell.edu  Fri Jun  6 12:13:57 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606110400.N43535-100000@oldchief.reply.net>
Message-ID: <Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>

>> You should post this in the mod_python dev list as well; currenty there
>> is discussion of mod_psp (python server pages) being folded into
>> mod_python
>
>It's not in discussion, this already has happened... :-)

Dear Grisha,

I wanted to post earlier, but I didn't find the time. I find this
"folding" to be a little troubling. Why not fold Zope into mod_python?
Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
WebWare?
  http://www.zope.org/
  http://spyce.sourceforge.net/
  http://roadkill.sourceforge.net/
  http://draco.boskant.nl/
  http://www.cheetahtemplate.org/
  http://webware.sourceforge.net/
There are many others at:
  http://spyce.sourceforge.net/doc-add_related.html

mod_psp is, I think, the newest of ALL of these projects. Most of the
alternatives above have reasonable user bases. So why has mod_psp been
folded into mod_python? Why not other, similar, projects? Is this an
internal Apache Foundation issue? If so, then I have already mentioned
that I am willing to contribute the Spyce codebase to the AF for
integration with mod_python. But, I'm not sure that's the right solution
either...

I think that mod_python holds an esteemed position now that the project
has decided to go with the Apache Foundation. It has added visibility
and clout. Perhaps, we should consider and plan its development so as to
attract a larger user base.

Should it simply be a pure Python handler, or should it be extended with
more functionality? There is a difference between mod_python
compatability and mod_python inclusion. Should there be a modular
extension and/or installation mechanism or should there be a "folding"
for all willing projects? If mod_python picks one candidate, what will
it mod_python do to the other projects? Will some other projects begin
to fork mod_python as a result? Do we want a duplication of effort of
either the mod_python-type or the mod_psp-type code?

I humbly recommend that mod_python remain pure, and serve as a Python
handler. It does this job very well! I think that what mod_python needs
is the creation and documentation of a standard extension mechanism to
allow for psp/spyce/draco/roadkill/etc. type of extensions. They would
not be included with mod_python, but would involve a simple .rpm (or
whatever) installation. (That's where the standardization helps!) This
will allow projects like Spyce, which works well with FastCGI,
mod_python, CGI, via proxying and even with other webservers (Xitami) to
continue to perform efficiently within Apache and also to broaden the
user base with support for other web platforms.

Thoughts?

All the best,
Rimon.

From jm at eemsystems.cjb.net  Fri Jun  6 12:02:44 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306060735.36876.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
Message-ID: <1054918964.11887.13.camel@eemsystems.com>

the problem is here:***

what is wrong in this code. this is for reading a cookie from brower.

Thanks..

def verificaraut(req, ID):
	import re
	galleta=getCookie(req.headers_in, ID) ******************
	
	if galleta==None:
	     return '0',''
	lista=re.split(":",galleta)
	
	if lista[0]=='0':
		return '0',lista
	if lista[3]<>req.connection.remote_ip:
		return '0',lista
	
	return lista[0], lista

def getCookie(headers_in, key):
    if headers_in.has_key('Cookie'):
        import Cookie
        C = Cookie.SmartCookie(headers_in['Cookie'])
        C.load(headers_in['Cookie'])
        if C.has_key(key):
            return C[key].value
    return None





El vie, 06-06-2003 a las 09:35, Jonathan Gardner escribi?:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Thursday 05 June 2003 16:37, Julio Mendoza wrote:
> > I'm using postgresql 7.3 and python from debian unstable.
> >
> > After varios upgrades my scripts are working bad.
> >
> > I can not find what happens.
> >
> 
> Segfaults are always troublesome.
> 
> What I used to do in mod_perl was isolate the page or behavior that was giving 
> the seg fault. Then I would try and see which version (you're using a version 
> control system, right?) introduced the problem. If it wasn't obvious by then, 
> I would put various log messages throughout the suspected handler.
> 
> Usually that would lead me to one line of code that was giving the problem. At 
> least then I can post to the mailing list about what was causing the problem.
> 
> I think the same kind of strategy would work for mod_python as well.
> 
> Good luck, you have a fun journey ahead of you!
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4Ka3WgwF3QvpWNwRAhfgAJ0UlgoXrHlo5PcmIxE5luq1bYrqhgCgkulG
> SklnZ2tHiMWzTjyEd5hZJ/8=
> =Szy2
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From todd at slack.net  Fri Jun  6 13:56:09 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:03:54 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
Message-ID: <20030606135609.B11869@crank.slack.net>

Hello all,

* Rimon Barr <barr@cs.cornell.edu> [2003-06-06 12:19]:

> I wanted to post earlier, but I didn't find the time. I find this
> "folding" to be a little troubling. Why not fold Zope into mod_python?
> Why not Spyce? Why not Roadkill? Why not Draco? Why not Cheetah, or
> WebWare?

As a recent "I have seen the light" arrival to Python, I have to agree that this is becoming overwhelming - at least for someone wandering into the room and wanting to work with Python/mod_python-type applications.

Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

> I think that mod_python holds an esteemed position now that the project
> has decided to go with the Apache Foundation. It has added visibility
> and clout. Perhaps, we should consider and plan its development so as to
> attract a larger user base.

Very much agree - most arrivals at mod_python are likely perl/php/apache/jakarta users, and Apache status definitely holds clout and "brand recognition" - and likely not just with developers, also managers and similar types.

> Should it simply be a pure Python handler, or should it be extended with
> more functionality? There is a difference between mod_python
> compatability and mod_python inclusion. Should there be a modular
> extension and/or installation mechanism or should there be a "folding"
> for all willing projects? If mod_python picks one candidate, what will

This I'm too new and inexperienced to comment on. I can say it eternally frustrates me that almost every ISP in the world supports mod_php but near-zero mod_python. Hopefully this will improve (someday) with Apache2/MPM or something, but in the short-term this kills mod_(python|perl) community numbers compared to PHP, the quality of those communities being besides the point I think (debatable yes).

Looking forward to what transpires!

-- 

___________________________
toddgrimason*todd@slack.net


From mod_python at ols.inorganic.org  Fri Jun  6 11:16:03 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606135609.B11869@crank.slack.net>
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
Message-ID: <20030606181603.GB8728@nag.inorganic.org>

On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> This I'm too new and inexperienced to comment on. I can say it
> eternally frustrates me that almost every ISP in the world supports
> mod_php but near-zero mod_python. Hopefully this will improve

I'm not tremendously surprised by this, actually.

By way of background, I should note that I've been programming Perl for
about 11 years now, PHP for about two years, and Python for about two
months.  You can guess which one's my favourite (though they're not
exactly interchangeable).

In my experience, it's easier to integrate PHP into a light-weight web
system than, say, Python.  This is both from the installation
perspective (I had to battle mod_python a little to get it to work on my
system) and from the authoring perspective, where PHP is the VisualBasic
of the programming world; it's closer to ASP in its simplicity than
Python is.  I was authoring PHP code within about a day of getting it
installed; I still haven't done anything useful with mod_python, though
I'm working on it. 

Now, mind you, that comes at a cost -- in my experience, it's much more
likely to see brute-force PHP projects that have just amazingly nasty
code (I recently had to put some bugfixes into a 12,000 PHP project and
was ... horrified at some of the practices), and Python almost forces
you to write nice code.  Partially, it's that old OOP concept -- even
after using PHP for about two years, I only realized a few months ago it
had classes -- nobody I talked to ever used them, mentioned them, or
referred to them in any documentation.  

-roy
From todd at slack.net  Fri Jun  6 14:33:10 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606181603.GB8728@nag.inorganic.org>;
	from mod_python@ols.inorganic.org on Fri, Jun 06, 2003 at 11:16:03AM -0700
References: <20030606110400.N43535-100000@oldchief.reply.net>
	<Pine.LNX.4.44.0306061141340.5150-100000@pompom.cs.cornell.edu>
	<20030606135609.B11869@crank.slack.net>
	<20030606181603.GB8728@nag.inorganic.org>
Message-ID: <20030606143310.C11869@crank.slack.net>

* Roy S. Rapoport <mod_python@ols.inorganic.org> [2003-06-06 14:11]:

> On Fri, Jun 06, 2003 at 01:56:09PM -0400, Todd Grimason wrote:
> > This I'm too new and inexperienced to comment on. I can say it
> > eternally frustrates me that almost every ISP in the world supports
> > mod_php but near-zero mod_python. Hopefully this will improve
> 
> I'm not tremendously surprised by this, actually.

Oh me neither, I said 'frustrates' not 'suprises' :-)

Perhaps a better comparison would be java servlets running in Tomcat or Resin, a java Web App container. Definitely not widely available for low-end ISP accounts, admittedly has the Sun marketing muscle behind it, but seems more focused.

While there are multiple containers (tomcat,resin,jetty,sun-one,etc.), pretty much every app built on them (every?) leverages the java.servlet.* classes and or jsp (built on top of servlets). I guess my point is this lets everyone focus efforts on higher-level frameworks - Struts, Turbine, whatever - extending the base plumbing (classes) when needed, but not inventing the wheel over and over again, which fun as it may be, appears to me to be hindering overall progress of Python on the web and/or mod_python.

31 flavors is great, but when you're wondering "how do I eat ice cream?", 31 choices before starting is a bit intimidating (sorry for the commercial advertisement there).

Am I completely off-base here?


-- 

___________________________
toddgrimason*todd@slack.net


From jack_diederich at email.com  Fri Jun  6 13:55:45 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
    "folding" mod_psp
Message-ID: <20030606185545.18394.qmail@email.com>

From: Todd Grimason <todd@slack.net>
> Whether or not it's this frustration, or the ease of Python that results in so many people saying "ah heck, I'll write my own web framework" I can't say, but to this newcomer it starts to look like mature web development tools in Python are a mile-wide and an inch deep.

No one can read all mailing lists, but this has been covered
at length on comp.lang.python.  The general feeling is that
there are a lot of frameworks for a couple reasons:
  * No one has written a killer framework yet
  * Different users have different needs

>From a marketing perspective it sucks because you can't say
python is _this_ excact collection of tools.  But python
is a language and not a framework (and only sometimes a
language coupled with a WWW framework).  No one laments
the variety of C web servers and frameworks.

This is only a problem if you compare python to PHP.  PHP
isn't a language, (or if it is, it is a nasty little hack of
a language) it is a specific framework for web stuff.
I prefer python for web apps because I prefer python for
everything (for a reasonable value of everything).
But python isn't PHP and their goals & capabilities shouldn't
be confused or compared.

-jack
-- 
_______________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From geert at boskant.nl  Fri Jun  6 22:19:15 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <10513932398.20030606125129@symbolist.ru>
Message-ID: <000001c32c68$e6a54e80$1004a8c0@GREETOP>

Spyce wrote:

> GL> And now for something completely different...
> 
> GL> I'd like to announce my new mod_python project "Roadkill".
> 
> GL> Roadkill is a Python-language version of PHP/ASP.  It 
> lets you embed
> GL> Python code within a .epy webpage to generate dynamic 
> content.  This 
> GL> lets you edit your code with your favorite GUI webpage 
> editor instead 
> GL> of pasting HTML into your CGI or keeping a bunch of 
> templates that 
> GL> your CGI imports.
> 
> GL> The homepage for Roadkill can be found at:
> GL> http://roadkill.sourceforge.net/
> 
> There is a similar project at http://spyce.sourceforge.net. 
> And, yes, it uses mod_python too.

And there are numerous other projects out there which are similar or not
so similar. If you check the WebProgramming wiki at python.org, you'll
find some 40 different systems, including one I am responsible for which
I won't mention here because I don't want to do any false advertising.

The situation about Python web frameworks is a bit confusing and I think
there is no "killer app" yet. However, I have a strong personal opinion
that the standard <p> <% print "Hello, world!" %> templating systems
don't cut it. When you create a big dynamic web site, you need something
more powerful and on a much higher abstraction level. Creating a large
site with a traditional ASP system is like writing a GUI word processor
with only a setPixel() call.

Of course I wish the original author of this thread all the best with
his Roadkill project. I would advise to look around and learn from the
many good ideas that are present in the current Python Web frameworks.

Cheers,
Geert

From neel at mediapulse.com  Fri Jun  6 16:51:47 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>

I'll take a moment in this thread to plug Albatross
(http://www.object-craft.com.au/projects/albatross/) as the "killer"
template system for python, or at least a strong contender.  It doesn't
look like PHP, it's far from any perl package; it solves the
template/state problem in a very python way.  Documentation is there,
but it's currently getting a rewrite for clarity (which most agree it
needs).  Docs aside, within a day I had it running with mod_python and
in 3 days extended the framework with a custom tag; and I was also
learning python at the same time.

If you are open to see there might be a better way to do things, you can
find python very helpful.  If you're looking to use the same "perl
logic" or PHP that you always have, python will go against the grain
with you.  It's really not that much different than C programmer moving
to C++; the syntax change is deceptively simple and hide the real
differences.

Mike

From todd at slack.net  Fri Jun  6 17:07:38 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>;
	from neel@mediapulse.com on Fri, Jun 06, 2003 at 04:51:47PM -0400
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606170738.E11869@crank.slack.net>

* Michael C. Neel <neel@mediapulse.com> [2003-06-06 16:55]:

> If you are open to see there might be a better way to do things, you can
> find python very helpful.  If you're looking to use the same "perl
> logic" or PHP that you always have, python will go against the grain
> with you.  It's really not that much different than C programmer moving
> to C++; the syntax change is deceptively simple and hide the real
> differences.

I'm not sure if this was specifically in response to my earlier post, but since I don't think anyone else mentioned PHP, I'm guessing so...

I clouded the issue by mentioning PHP - I only meant to point it out for it's widespread availablity - most definitely not for the language itself or the "PHP way" of doing things. Wishing I never mentioned it! ;-)

I will look into Albatross again, thanks.

-- 

___________________________
toddgrimason*todd@slack.net


From grisha at modpython.org  Fri Jun  6 17:52:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <20030606174027.J48945-100000@oldchief.reply.net>


On Fri, 6 Jun 2003, Michael C. Neel wrote:

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender.

The problem with Albatross for me is the same one with all the others - it
is yet another language to learn:

<al-for iter="name" expr="keys">
    <tr>
         <td><al-value expr="name.value()"></td>
         <td><al-value expr="environ[name.value()]"></td>
    <tr>
</al-for>

This is not Python. Nor is it HTML.

Grisha

From djc at object-craft.com.au  Sat Jun  7 13:27:12 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <m3of1aefe7.fsf@ferret.object-craft.com.au>


> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the
> > "killer" template system for python, or at least a strong
> > contender.
> 
> The problem with Albatross for me is the same one with all the
> others - it is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

That is true.  If you restrict yourself to Python and HTML you are
forced to do something like this:

for name in keys:
    print '<tr>'
    print '  <td>%s</td>' % name
    print '  <td>%s</td>' % environ[name]
    print '<tr>'

That does not look bad until you build a semi-complex application.

You find yourself in the situation where you cannot change the HTML
presentation without refactoring the surrounding Python application
logic.  Likewise you find it next to impossible to change the
application structure without breaking the presentation.  The above
approach leads to the escalating difficulty and cost (in time and/or
money) of enhancements.

The introduction of a mechanism (or third "language") that allows
and/or imposes a clear interface between the presentation and
implementation increases the ability to change one without major
impact on the other.  This is a huge win for applications that will
change over time.

In the world of GUI application development the model-view-controller
approach has proven itself as a mechanism to manage the same
complexity.  It provides a clear separation of the GUI, the business
logic, and the code that glues them together.  Before the adoption of
MVC (and related patterns), applications tended to be an undisciplined
mixture of GUI and application code.  Over time companies that were
not able to enhance or evolve their products could not compete and
went out of business.  The approach to web applications encouraged PHP
(and similar approaches) is reminiscent of GUI application development
before MVC.

The Albatross approach to the "third" language is not perfect.  I am
not sure that any approach to achieving this separation is perfect.
In my opinion, if there was a perfect approach we would not be having
this discussion, we would all just use the perfect approach.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 08:58:14 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <000001c32cc2$2a97e0e0$1004a8c0@GREETOP>

Michael,

> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the 
> "killer" template system for python, or at least a strong 
> contender.  It doesn't look like PHP, it's far from any perl 
> package; it solves the template/state problem in a very 
> python way.  Documentation is there, but it's currently 
> getting a rewrite for clarity (which most agree it needs).  
> Docs aside, within a day I had it running with mod_python and 
> in 3 days extended the framework with a custom tag; and I was 
> also learning python at the same time.

what is the template/state problem?

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:19:02 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <000101c32cc5$12687180$1004a8c0@GREETOP>

Dave,

> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> That is true.  If you restrict yourself to Python and HTML 
> you are forced to do something like this:
> 
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'
> 
> That does not look bad until you build a semi-complex application.
> 
> You find yourself in the situation where you cannot change 
> the HTML presentation without refactoring the surrounding 
> Python application logic.  Likewise you find it next to 
> impossible to change the application structure without 
> breaking the presentation.  The above approach leads to the 
> escalating difficulty and cost (in time and/or
> money) of enhancements.
>
> The introduction of a mechanism (or third "language") that 
> allows and/or imposes a clear interface between the 
> presentation and implementation increases the ability to 
> change one without major impact on the other.  This is a huge 
> win for applications that will change over time.

I don't agree with you that banning a 3rd party language implies that
you're stuck with the horrible

<%
	long and tedious python fragment here
%>

style of coding.

Draco tries to solve this problem in a different way, by still using
only Python as the scripting language. This works by dividing your code
in a functional part and a formatting part. The function part is put in
a so-called handler, which resides in a separate file (1 per directory).
The functional code execute the user request and puts all the results in
a dictionary dubbed the interface. This almost always reduces your
formatting code to something like this:
 
<%
    for tr in rows:
        print """
            html formatted string
             """ % tr
%>

The rows variable is set in the handler and contains completely
processed and ready to print data.

Using a special notation:

<%
    for tr in rows:
        print """%%>
            html formatted string
             <%%""" % tr
%>

you can even edit the html format string with your favourite
Dreamweaver/Frontpage/whatever.

The premise on which I've built Draco is that you can't elimiate all
code from the template, but you can minimize it. A possible solution is
to use a different templating language but IMHO this just adds
complexity because you now have two languages (plus html) instead of
one. Because Python is just as easy to learn as any old templating
language I don't see how this helps. Maybe at first Python code is a bit
scary but this should pass quickly.

Cheers,
Geert

From geert at boskant.nl  Sat Jun  7 09:25:57 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] 
	supporting modular mod_python extensions vs. "folding" mod_psp
Message-ID: <000201c32cc6$09bddb50$1004a8c0@GREETOP>

Ramon,

> I wanted to post earlier, but I didn't find the time. I find
> this "folding" to be a little troubling. Why not fold Zope 
> into mod_python? Why not Spyce? Why not Roadkill? Why not 
> Draco? Why not Cheetah, or WebWare?
>   http://www.zope.org/
>   http://spyce.sourceforge.net/
>   http://roadkill.sourceforge.net/
>   http://draco.boskant.nl/
>   http://www.cheetahtemplate.org/
>   http://webware.sourceforge.net/
>
> There are many others at:
>   http://spyce.sourceforge.net/doc-add_related.html
 
[...]

> Should it simply be a pure Python handler, or should it be
> extended with more functionality? There is a difference 
> between mod_python compatability and mod_python inclusion. 
> Should there be a modular extension and/or installation 
> mechanism or should there be a "folding" for all willing 
> projects? If mod_python picks one candidate, what will it 
> mod_python do to the other projects? Will some other projects 
> begin to fork mod_python as a result? Do we want a 
> duplication of effort of either the mod_python-type or the 
> mod_psp-type code?

As the author of one of the systems you mention above, I was worried a
bit too when the announcement was made to add PSP to mod_python.
However, my understanding is that the component is implemented as a
mod_python handler so that it is completely optional. I hope that it
remains like this: mod_python as a fast and pure Apache-Python interface
with an optional templating system.

The good thing about this move is that new users will have something to
get started with. On the other hand, a web framework that does a bit
more than the standard ASP stuff is probably much larger in scope than
mod_python, so then it would be like adding mod_python to the framework
instead of the other way around.

> I humbly recommend that mod_python remain pure, and serve as
> a Python handler. It does this job very well! I think that 
> what mod_python needs is the creation and documentation of a 
> standard extension mechanism to allow for 
> psp/spyce/draco/roadkill/etc. type of extensions. They would 
> not be included with mod_python, but would involve a simple .rpm (or
> whatever) installation. (That's where the standardization 
> helps!) This will allow projects like Spyce, which works well 
> with FastCGI, mod_python, CGI, via proxying and even with 
> other webservers (Xitami) to continue to perform efficiently 
> within Apache and also to broaden the user base with support 
> for other web platforms.

It is already quite easy to add an extension to mod_python. Mostly it is
just the definition of the appropriate "PythonHandler" directives. What
would really help IMHO is a good and independent web site describing the
current situation with the many different frameworks that lists and
rates the different options.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 18:46:31 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000101c32cc5$12687180$1004a8c0@GREETOP>
References: <000101c32cc5$12687180$1004a8c0@GREETOP>
Message-ID: <m3of1a9swo.fsf@ferret.object-craft.com.au>


> Dave,

> > > <al-for iter="name" expr="keys">
> > >     <tr>
> > >          <td><al-value expr="name.value()"></td>
> > >          <td><al-value expr="environ[name.value()]"></td>
> > >     <tr>
> > > </al-for>
> > > 
> > > This is not Python. Nor is it HTML.
> > 
> > That is true.  If you restrict yourself to Python and HTML 
> > you are forced to do something like this:
> > 
> > for name in keys:
> >     print '<tr>'
> >     print '  <td>%s</td>' % name
> >     print '  <td>%s</td>' % environ[name]
> >     print '<tr>'

[snip]

> > The introduction of a mechanism (or third "language") that 
> > allows and/or imposes a clear interface between the 
> > presentation and implementation increases the ability to 
> > change one without major impact on the other.  This is a huge 
> > win for applications that will change over time.

> I don't agree with you that banning a 3rd party language implies
> that you're stuck with the horrible
> 
> <%
> 	long and tedious python fragment here
> %>
> 
> style of coding.

You are of course correct.  The <% python code %> construct just makes
it a lot easier to place application code in the wrong place.  That is
not really a criticism of the mechanism, it is a criticism of people
who do that.

Mind you, I could argue that while you have not introduced a third
language, you have introduced a new mechanism.  That was part of the
point I was trying to make.  You need either a new language or a
special mechanism.

> Draco tries to solve this problem in a different way, by still using
> only Python as the scripting language. This works by dividing your
> code in a functional part and a formatting part. The function part
> is put in a so-called handler, which resides in a separate file (1
> per directory).  The functional code execute the user request and
> puts all the results in a dictionary dubbed the interface. This
> almost always reduces your formatting code to something like this:
>  
> <%
>     for tr in rows:
>         print """
>             html formatted string
>              """ % tr
> %>

How is the application namespace made available to the templating?

> The rows variable is set in the handler and contains completely
> processed and ready to print data.
> 
> Using a special notation:
> 
> <%
>     for tr in rows:
>         print """%%>
>             html formatted string
>              <%%""" % tr
> %>

Very sneaky.  I like it.

> The premise on which I've built Draco is that you can't elimiate all
> code from the template, but you can minimize it. A possible solution
> is to use a different templating language but IMHO this just adds
> complexity because you now have two languages (plus html) instead of
> one. Because Python is just as easy to learn as any old templating
> language I don't see how this helps. Maybe at first Python code is a
> bit scary but this should pass quickly.

No argument here.

I have toyed with the idea of experimenting with different templating
mechanisms in Albatross.  The templating is only part of the problem
that Albatross is trying to address.

- Dave

-- 
http://www.object-craft.com.au

From geert at boskant.nl  Sat Jun  7 11:02:10 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3of1a9swo.fsf@ferret.object-craft.com.au>
Message-ID: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>


> You are of course correct.  The <% python code %> construct 
> just makes it a lot easier to place application code in the 
> wrong place.  That is not really a criticism of the 
> mechanism, it is a criticism of people who do that.

Yes, I agree fully.

> Mind you, I could argue that while you have not introduced a 
> third language, you have introduced a new mechanism.  That 
> was part of the point I was trying to make.  You need either 
> a new language or a special mechanism.

Ok, fair enough.
 
> > reduces your formatting code to something like this:
> >  
> > <%
> >     for tr in rows:
> >         print """
> >             html formatted string
> >              """ % tr
> > %>
> 
> How is the application namespace made available to the templating?

Funny that you should say namespace, because that is the 3rd and last
central concept in Draco ;-) (the others are templates and handlers).
The variables from the "interface" namespace are available as global
variables to all code in templates.

Other namespaces include "session", "user", "cookie", "config" and
"args". All of these have a different meaning and putting variables in
them does different things. Namespaces are _the_ mechanism in Draco to
use for persistency.

> No argument here.
> 
> I have toyed with the idea of experimenting with different 
> templating mechanisms in Albatross.  The templating is only 
> part of the problem that Albatross is trying to address.

Yes, the same goes for Draco here. I've had some requests to support TAL
(OpenTAL) as the templating language, as this is becoming a sort of
de-facto standard. If I get to it one day I will.

Cheers,
Geert

From djc at object-craft.com.au  Sat Jun  7 20:23:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
References: <000001c32cd3$7ab96d80$1004a8c0@GREETOP>
Message-ID: <m3llwe6vac.fsf@ferret.object-craft.com.au>

>>>>> "Geert" == Geert Jansen <geert@boskant.nl> writes:

>> How is the application namespace made available to the templating?

Geert> Funny that you should say namespace, because that is the 3rd
Geert> and last central concept in Draco ;-) (the others are templates
Geert> and handlers).  The variables from the "interface" namespace
Geert> are available as global variables to all code in templates.

I ask about namespaces as they are central to all of these solutions
that separate presentation from implementation.  The namespace is the
conduit.

Geert> Other namespaces include "session", "user", "cookie", "config"
Geert> and "args". All of these have a different meaning and putting
Geert> variables in them does different things. Namespaces are _the_
Geert> mechanism in Draco to use for persistency.

In Albatross there are only two namespaces; local and global.  This
makes expressions in the template language easier to handle.  Both
namespaces are managed by the execution context.  A new execution
context and local namespace is created for every browser request.
Session values are loaded into and saved from the local namespace by
the toolkit.  Session values are a subset of the values in the local
namespace.

The global namespace for template expressions is set to the globals of
the code that executed the template.  This allows you to do things
like this in a page module (code that handles an application page):

    import os

    def page_display(ctx):
        ctx.run_template('env.html')

And then in the env.html template:

    Path is <al-value expr="os.environ['PATH']">

I have been browsing through the Draco documentation.  It looks like
Draco and Albatross are trying to solve slightly different problems.  

Correct me if I am wrong, but Draco is designed to run via mod_python.
It also seems more narrowly focused than Albatross.  This can be
either a good thing or a bad thing depending upon the problem you are
trying to solve.  If the problem fits within the area that Draco
targets, then Draco will solve more application problems than
Albatross.

Albatross is designed as a set of classes that you can mix and match
to allow many different deployment options.  Currently Request classes
are provided for CGI and mod_python deployment.  It should be
relatively painless to build Request classes for other deployment
platforms (Medusa, SimpleHTTPServer, Twisted).  Just this week someone
sent us 24 lines of code (including blank lines) that allows FastCGI
deployment.

Session management is implemented via a different set of mixin
classes.  This currently allows us to store sessions in a session
server or in the local filesystem.  In the not too distant future we
will probably add a new mixin for keeping sessions in memory for
FastCGI deployed applications.  This will eliminate all of the
pickling overhead.

>> No argument here.
>> 
>> I have toyed with the idea of experimenting with different
>> templating mechanisms in Albatross.  The templating is only part of
>> the problem that Albatross is trying to address.

Geert> Yes, the same goes for Draco here. I've had some requests to
Geert> support TAL (OpenTAL) as the templating language, as this is
Geert> becoming a sort of de-facto standard. If I get to it one day I
Geert> will.

I had a serious look at TAL.  I really like the attribute and tag
level manipulation.  I am convinced that the control flow in TAL is
not a good idea.  Trouble is, I cannot think of anything better for
control flow that is consistent with TAL.

- Dave

-- 
http://www.object-craft.com.au

From matt at pollenation.net  Sat Jun  7 14:05:58 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
Message-ID: <1054991158.29991.283.camel@localhost>

On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> I'll take a moment in this thread to plug Albatross
> (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> template/state problem in a very python way.

I don't want to turn this into an Albatross advocacy session but I
couldn't agree with the above. Albatross is extremely simple to use but
remarkably powerful.

I've spent a while looking through a number of the available frameworks.
They are all pretty good but, to me, Albatross stood out.

> Documentation is there, but it's currently getting a rewrite for clarity (which most agree it
> needs).

I would just like to mention that the Albatross documentation is already
remarkably good, especially for an open source product where the docs
often lag the code (not that commercial docs are any better!). I got a
really good idea about what Albatross could do just by spending an
evening reading. The new docs look even better.

Anyway, enough advocacy.

Cheers, Matt

From matt at pollenation.net  Sat Jun  7 14:26:37 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <1054991158.29991.283.camel@localhost>
References: <C0FC22C08B82074A88B50061764157775C6C@johnson.mediapulse.net>
	 <1054991158.29991.283.camel@localhost>
Message-ID: <1054992397.20821.286.camel@localhost>

On Sat, 2003-06-07 at 14:05, Matt Goodall wrote:
> On Fri, 2003-06-06 at 21:51, Michael C. Neel wrote:
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender. It doesn't look like PHP, it's far from any perl package; it solves the
> > template/state problem in a very python way.
> 
> I don't want to turn this into an Albatross advocacy session but I
> couldn't agree with the above. Albatross is extremely simple to use but
> remarkably powerful.

Oops, that should have said "couldn't agree _more_ with the above".

- Matt

From rpinder at usc.edu  Sat Jun  7 07:48:35 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030530191059.N36634-100000@oldchief.reply.net>
References: <20030530191059.N36634-100000@oldchief.reply.net>
Message-ID: <3EE1FB43.2020102@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From rpinder at usc.edu  Sat Jun  7 08:25:04 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] Simple 'redirect' question
Message-ID: <3EE203D0.9030407@usc.edu>

Rather than load up the end of my python script with html, how can I 
redirect the users browser out of the script, and to an html file 
located in another directory within my htdocs directory structure ??

Thanks

Rich

From verence at web.de  Sat Jun  7 17:27:49 2003
From: verence at web.de (martin voigt)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] <no subject>
Message-ID: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>

hi *,

how do i use a content handler to send binary data to the client? the write method supports only strings.

thanks in advance,

martin
______________________________________________________________________________
UNICEF bittet um Spenden fur die Kinder im Irak! Hier online an
UNICEF spenden: https://spenden.web.de/unicef/special/?mc=021101

From tree at basistech.com  Sat Jun  7 11:30:17 2003
From: tree at basistech.com (Tom Emerson)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <16098.1289.684252.548084@magrathea.basistech.com>

martin voigt writes:
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Strings of 8-bit bytes: it "just works" as long as you set the
appropriate content-type.

-- 
Tom Emerson                                          Basis Technology Corp.
Software Architect                                 http://www.basistech.com
  "Beware the lollipop of mediocrity: lick it once and you suck forever"
From rpinder at usc.edu  Sat Jun  7 08:36:06 2003
From: rpinder at usc.edu (rpinder)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] Simple 'redirect' question
In-Reply-To: <20030607150319.GE1192@eleanor.internal.ywlcs.org>
References: <20030530191059.N36634-100000@oldchief.reply.net>
 <3EE1FB43.2020102@usc.edu> <20030607150319.GE1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE20666.5010900@usc.edu>

Thanks Dustin,

So you define  HTTP_MOVED_TEMPORARILY  to be the string constant of the 
actual url ??

Thanks
r

Dustin Mitchell wrote:

>On Sat, Jun 07, 2003 at 07:48:35AM -0700, rpinder wrote:
>  
>
>>Rather than load up the end of my python script with html, how can I 
>>redirect the users browser out of the script, and to an html file 
>>located in another directory within my htdocs directory structure ??
>>    
>>
>
>Send a "Location" header and return HTTP code 302, a.k.a.
>
>  return apache.HTTP_MOVED_TEMPORARILY
>
>or
>
>  raise apache.SERVER_RETURN, apache.HTTP_MOVED_TEMPORARILY
>
>Dustin
>
>  
>

From i at mindlace.net  Sat Jun  7 11:46:51 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions
 vs.	"folding" mod_psp
In-Reply-To: <m3of1aefe7.fsf@ferret.object-craft.com.au>
References: <20030606174027.J48945-100000@oldchief.reply.net>
 <m3of1aefe7.fsf@ferret.object-craft.com.au>
Message-ID: <2147483647.1054986411@[10.0.1.2]>

--On 7 Saturday, June 2003 13:27 +1000 Dave Cole 
<djc@object-craft.com.au> wrote:

> That is true.  If you restrict yourself to Python and HTML you are
> forced to do something like this:
>
> for name in keys:
>     print '<tr>'
>     print '  <td>%s</td>' % name
>     print '  <td>%s</td>' % environ[name]
>     print '<tr>'

That's certainly not the only other possible approach. I think PyMeld 
is the beginning of a better solution. It gives an example almost 
exactly like the one above at <http://www.entrian.com/PyMeld/>

My only problem with it is its repitition of id tags in successive 
nodes, but that's fixable - the important part, the very pythonic 
object model it gives you for the nodes of the page you care about- is 
there.

This is obviously not a state solution or any of the rest of the things 
Albatross helps you with.

~mindlace               GPG Key: http://mindlace.net/public_key
http://mindlace.net                          Enough is a feast.
From dustin at ywlcs.org  Sat Jun  7 14:14:19 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] <no subject>
In-Reply-To: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
Message-ID: <20030607191418.GG1192@eleanor.internal.ywlcs.org>

On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> hi *,
> 
> how do i use a content handler to send binary data to the client? the write method supports only strings.

Python holds arbitrary binary data in strings.  So you can do, e.g.,

data = open("my.gif", "r").read()
req.content_type = 'image/gif'
req.send_http_header()
req.write(data)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From neel at mediapulse.com  Sat Jun  7 19:17:20 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>

I suppose it's all a matter of taste really, to me the problem with the
PHP-like methods is there is no seperation of logic from design; or the
method doesn't lend itself well to it.  I'm willing to learn some
special tags if I know all real the python code is in a .py file and the
html in a .html file.

Mike

     > The problem with Albatross for me is the same one with 
     > all the others - it
     > is yet another language to learn:
     > 
     > <al-for iter="name" expr="keys">
     >     <tr>
     >          <td><al-value expr="name.value()"></td>
     >          <td><al-value expr="environ[name.value()]"></td>
     >     <tr>
     > </al-for>
     > 
     > This is not Python. Nor is it HTML.
     > 
     > Grisha
     > 
     > 

From neel at mediapulse.com  Sat Jun  7 19:22:32 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>

     > what is the template/state problem?
     > 
     > Cheers,
     > Geert

The bane of my existance as a web programmer.  I need a template system
that works well with the output from design tools like Dreamweave so I
don't find myself spending hours vi'ng design tags to get it to work in
the app.

The other is the web is a stateless application.  The web browser and
server treat ever click as a completely separate action, and has no
knoweldge of what came before.  That's left as an exercise of the
programmer.  Tools like Albatross that provide me with a base
appliaction that appears stateful to me while behind the scenes coping
with the reality of the web let me focus on the "cool" parts of the
application.

Mike

From verence at web.de  Sun Jun  8 01:56:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
References: <200306071527.h57FRmQ25354@mailgate5.cinetic.de>
	<20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE27BA7.7010405@web.de>

Dustin Mitchell wrote:

> On Sat, Jun 07, 2003 at 05:27:49PM +0200, martin voigt wrote:
> 
>>hi *,
>>
>>how do i use a content handler to send binary data to the client? the write method supports only strings.
> 
> 
> Python holds arbitrary binary data in strings.  So you can do, e.g.,
> 
> data = open("my.gif", "r").read()
> req.content_type = 'image/gif'
> req.send_http_header()
> req.write(data)
> 
> Dustin
> 
thanks, shame on my, never tried the simplest one... :)

greets

From andy at nervebox.com  Sat Jun  7 22:35:33 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] PYTHONPATH question
Message-ID: <3680743.1055039733708.JavaMail.SYSTEM@chango>

I'm new to [mod_]python and I'm having trouble with PYTHONPATH.  
When I import MySQLdb using the interactive command line,it works fine.  When I import MySQLdb into a module called by mod_python, I get this: 

ImportError: No module named MySQLdb

I've tried setting the PYTHONPATH environment var in httpd.conf using the Apache directive SetEnv, but still no good.

What am I missing?  Does mod_python run python modules as the Apache user?  If so, what's the best way to set the value of PYTHONPATH?

 - thanks in advance,
 - andy 
      
      
      
    
From grisha at modpython.org  Sat Jun  7 22:39:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] <no subject>
In-Reply-To: <20030607191418.GG1192@eleanor.internal.ywlcs.org>
Message-ID: <20030607223735.H69064-100000@oldchief.reply.net>



On Sat, 7 Jun 2003, Dustin Mitchell wrote:

> req.send_http_header()

in mod_python 3.x this is a noop - in httpd 2.0 you don't have control
over when the headers go out - they will be sent just before the first
byte of output.

Grisha

From jgardner at jonathangardner.net  Sat Jun  7 22:11:44 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:55 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <1054918964.11887.13.camel@eemsystems.com>
References: <1054856231.1465.17.camel@eemsystems.com>
	<200306060735.36876.jgardner@jonathangardner.net>
	<1054918964.11887.13.camel@eemsystems.com>
Message-ID: <200306072211.45891.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 10:02, Julio Mendoza wrote:
> the problem is here:***
>
> what is wrong in this code. this is for reading a cookie from brower.
>
> Thanks..
>
> def verificaraut(req, ID):
> 	import re
> 	galleta=getCookie(req.headers_in, ID) ******************
>
> 	if galleta==None:
> 	     return '0',''
> 	lista=re.split(":",galleta)
>
> 	if lista[0]=='0':
> 		return '0',lista
> 	if lista[3]<>req.connection.remote_ip:
> 		return '0',lista
>
> 	return lista[0], lista
>
> def getCookie(headers_in, key):
>     if headers_in.has_key('Cookie'):
>         import Cookie
>         C = Cookie.SmartCookie(headers_in['Cookie'])
>         C.load(headers_in['Cookie'])
>         if C.has_key(key):
>             return C[key].value
>     return None
>

What line in getCookie is giving you the problem?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
KBAjmIpvSI1xVJJxAUPDyLM=
=Kjlg
-----END PGP SIGNATURE-----


From jgardner at jonathangardner.net  Sat Jun  7 22:31:53 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <200306072231.54572.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 06 June 2003 13:19, Geert Jansen wrote:
> The situation about Python web frameworks is a bit confusing and I think
> there is no "killer app" yet. However, I have a strong personal opinion
> that the standard <p> <% print "Hello, world!" %> templating systems
> don't cut it. When you create a big dynamic web site, you need something
> more powerful and on a much higher abstraction level. Creating a large
> site with a traditional ASP system is like writing a GUI word processor
> with only a setPixel() call.
>

Let's make the killer app, right here, right now. I am building the 
framework for my sites, and a commercial project. I know that I want to use 
mod_python because there are so many benefits to it, even above perl.

What would you suggest, within the limitations of current HTTP technology?

Some ideas I came up with are as follows. Let's discuss -- be honest about 
the ideas. You add your own.

- - Forms. It seems nice to have the code that processes the form input right 
next to the code that makes the form HTML code. This screams "put it all in 
a class!" So I came up with a few classes that should be subclassed:
	- Text input
	- Int input
	- Float input
	- Zip Code input
	... etc ...

You can do the same with the other form elements -- select, checkboxes, and 
radio buttons.

- - Groups of form elements. Sometimes I want a group of elements that go 
together. Example: Login box (name/email, password, submit), address 
(line1, line2, city, state, zip, phone) and cc info (cc #, address, name, 
etc..) I thought of having a class that does the whole thing together. You 
give it some namespace, and it puts its element in that namespace in the 
args. For instanc, if you have an address group of elements, and you give 
it the namespace "fred", then the args come back as fred.line1, fred.line2, 
fred.city, fred.state, fred.whatever.

- - Permanent and temporary sessions. Every website uses cookies for only one 
thing - sessions. We should have this built in by default. Some pages have 
it turned on, some pages won't need it and have it turned off. What happens 
is when the guy visits a page that needs a session, it sets the session 
cookie, or gets the existing one. Then it goes to the database and grabs 
the associated data, and it unserializes the data into a python object. 
Tada - you have a session. It also does some rudimentary checking to see if 
the browser has cookies turned on, redirecting them to another page if they 
do not.

- - Keeping HTML totall separate from the code is a very good idea. 
Unfortunately, it makes things like loops or iterations (like listing some 
results) difficult. I believe the best way around this is to allow some 
python code, in its pure python form, in the page somehow. However, this 
should be extremely light and only when necessary. Is there anyway around 
this?

- - Database connection. This is something that is really important, even 
though it isn't part of the web server per se. I believe that DB-API (and 
perl DBI) just doesn't cut it because it is too low-level. There are so 
many better ways to do things. One of the biggest problems I have is 
getting data-driven SQL statement put together without taking 100 lines of 
code to do it. I found that by writing select as a function that takes 
parameters (like columns, from tables, join tables, where parameters, 
etc...) things get a lot easier. I believe we should build a system that 
has this in there.

- - Code-generated HTML. Every once in a while, we need to build our HTML 
elements manually in the code, putting every argument in precisely. This is 
annoying, and the code is always ugly. What I do is use a function that 
does it all for me. Example:
	html.select("state", (... list of states...)) -> A select list of states
	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
class="big_link") -> a link with properly formatted arguments and all.

If we can agree on what we REALLY want, and if we take advantage of Python, 
expecially the things that make it so much more specialer than perl and 
Java, I think we can come up with THE KILLER SOLUTION. How about that for a 
project name? TKS?

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+4spJWgwF3QvpWNwRAp9hAJ9R/eXSdhIJ/4g0x0mYOeWEMD6qhwCfZOVv
HJD8G8mUY8fNeyW50PlMEeM=
=nfz+
-----END PGP SIGNATURE-----


From etienne at cs.vu.nl  Sun Jun  8 12:59:35 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
 <200306072231.54572.jgardner@jonathangardner.net>
Message-ID: <Pine.GSO.4.53.0306081250050.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Jonathan Gardner wrote:
> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that I want to use
<snip>

Hi Jonathan,

Many of the suggestions you make have already been implemented by someone
in one form or the other. My two cents is that you don't need to go out
and re-do the entire killer app, but you have the luxury of picking and
choosing between the various web application frameworks that exists for
Python. Many frameworks are modular enough to mix and match.

So spend some time playing with existing frameworks and you will most
likely find most of you requirements already fulfilled in one way or the
other.

When I did the same, I came up with:
Quixote + Medusa
with the option of mod_python replacing Medusa if necessary for
performance issues or Apache integration in future,
and the option of PyMeld supplementing the Quixote Templates if ever
necessary. But for now the Quixote Template idea is a joy to use.

For persistence I use a RDF-inspired layer on top of a SQL basis. (and
because Medusa is single-threaded I simply use sqlite as the database.
Simple and quick)


Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From etienne at cs.vu.nl  Sun Jun  8 13:01:43 2003
From: etienne at cs.vu.nl (Etienne Posthumus)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
 mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C6D@johnson.mediapulse.net>
Message-ID: <Pine.GSO.4.53.0306081259550.21559@flits.cs.vu.nl>

On Sat, 7 Jun 2003, Michael C. Neel wrote:
> The other is the web is a stateless application.  The web browser and
> server treat ever click as a completely separate action, and has no
> knoweldge of what came before.  That's left as an exercise of the
> programmer.  Tools like Albatross that provide me with a base
> appliaction that appears stateful to me while behind the scenes coping
> with the reality of the web let me focus on the "cool" parts of the
> application.

An alternative is to drink the REST magic Kool-Aid and go with the
statelessness as a feature and not a problem... ;-)

Etienne Posthumus
Programmer, IIDS - Intelligent Interactive Distributed Systems
http://www.iids.org/
Vrije Universiteit Amsterdam
----------------------------
From geert at boskant.nl  Sun Jun  8 17:35:13 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
Message-ID: <000001c32dd3$8dce4200$1001a8c0@GREETOP>

Hi Johathan,

> Let's make the killer app, right here, right now. I am building the
> framework for my sites, and a commercial project. I know that 
> I want to use 
> mod_python because there are so many benefits to it, even above perl.

A lot of good ideas, but I agree with other posters that most of them
are present in the current web application solutions.

> What would you suggest, within the limitations of current
> HTTP technology?
> 
> Some ideas I came up with are as follows. Let's discuss -- be
> honest about 
> the ideas. You add your own.
> 
> - - Forms. It seems nice to have the code that processes the
> form input right 
> next to the code that makes the form HTML code. This screams 
> "put it all in 
> a class!" So I came up with a few classes that should be subclassed:
> 	- Text input
> 	- Int input
> 	- Float input
> 	- Zip Code input
> 	... etc ...

Draco has this. It provides the following classes: Field, StringField,
AsciiField, IntField, FloatField, EnumField.
 
> - - Groups of form elements. Sometimes I want a group of
> elements that go 
> together. Example: Login box (name/email, password, submit), address 
> (line1, line2, city, state, zip, phone) and cc info (cc #, 
> address, name, 
> etc..) I thought of having a class that does the whole thing 
> together. You 
> give it some namespace, and it puts its element in that 
> namespace in the 
> args. For instanc, if you have an address group of elements, 
> and you give 
> it the namespace "fred", then the args come back as 
> fred.line1, fred.line2, 
> fred.city, fred.state, fred.whatever.

Draco has a Form class that does this. You add Field (sub)classes to it
in the constructor, and then call parse() on a namespace (usually, the
http GET/POST) namespace). The result is a new namespace with your
parsed args, or a FormError exception on error.

> - - Permanent and temporary sessions. Every website uses
> cookies for only one 
> thing - sessions. We should have this built in by default. 
> Some pages have 
> it turned on, some pages won't need it and have it turned 
> off. What happens 
> is when the guy visits a page that needs a session, it sets 
> the session 
> cookie, or gets the existing one. Then it goes to the 
> database and grabs 
> the associated data, and it unserializes the data into a 
> python object. 
> Tada - you have a session. It also does some rudimentary 
> checking to see if 
> the browser has cookies turned on, redirecting them to 
> another page if they 
> do not.

Again, Draco has this, except that sessions are always enabled, not only
for specific pages. Any variables assigned to the "session" namespace
are automatically put in a db table that is bound to the current session
via a session-id (either stored in a cookie or from the URL or both).
The namespace is typed, you can put in any object that can be pickled.

Additionaly, there is the "user" namespace, containing variables bound
to the current user (if the session is logged-in), "application",
"server"  namespaces, etc.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like 
> listing some 
> results) difficult. I believe the best way around this is to 
> allow some 
> python code, in its pure python form, in the page somehow. 
> However, this 
> should be extremely light and only when necessary. Is there 
> anyway around 
> this?

I agree with you completely. My preference is also to use a pure form of
Python for loops, conditionals, etc. Another option that is used by
Albatross and Zope is that you have a 3rd language in the form of extra
tags.

> - - Database connection. This is something that is really
> important, even 
> though it isn't part of the web server per se. I believe that 
> DB-API (and 
> perl DBI) just doesn't cut it because it is too low-level. 
> There are so 
> many better ways to do things. One of the biggest problems I have is 
> getting data-driven SQL statement put together without taking 
> 100 lines of 
> code to do it. I found that by writing select as a function 
> that takes 
> parameters (like columns, from tables, join tables, where parameters, 
> etc...) things get a lot easier. I believe we should build a 
> system that 
> has this in there.

I think that a db-api should be part of the core of any web framework.
Draco implements a "database" object that provides access to the system
database (database that Draco itself uses too for session data, etc).
This object implements methods to get new cursors, open transactions,
etc. An object oriented, namespace like API for
querying/adding/modifying tables and records should be available too. I
have this but it's rather immature so I did not yet add it to Draco.

> - - Code-generated HTML. Every once in a while, we need to
> build our HTML 
> elements manually in the code, putting every argument in 
> precisely. This is 
> annoying, and the code is always ugly. What I do is use a 
> function that 
> does it all for me. Example:
> 	html.select("state", (... list of states...)) -> A 
> select list of states
> 	html.link(html.utl('', arg1=value1, arg2=value2), "Click here", 
> class="big_link") -> a link with properly formatted arguments and all

I'm not a big fan of these because generating html from code makes the
separation of the job of the web designer and the programmer more
difficult. Draco implements "tag rewriting" that transparently plugs
back form variables into the html. This at least alleviates the problem
because the html can be pure, and doesn't need any code for form
feedback.

> If we can agree on what we REALLY want, and if we take
> advantage of Python, 
> expecially the things that make it so much more specialer 
> than perl and 
> Java, I think we can come up with THE KILLER SOLUTION. How 
> about that for a 
> project name? TKS?

Without too much shameless self promotion I think that Draco is pretty
close to a killer web application framework. It just needs some more
developers and users to see how it performs for a broad audience and to
improve it accordingly. I am willing to do concessions to make it better
and more accepted. My time is very limited at the moment, however.

Cheers,
Geert

From dustin at ywlcs.org  Sun Jun  8 11:29:18 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
References: <000001c32dd3$8dce4200$1001a8c0@GREETOP>
Message-ID: <20030608162918.GI1192@eleanor.internal.ywlcs.org>

Let's take a step back and look at what we're doing here.

We're trying to invent the perfect solution to everyone's problems.  Now, any
of us that have done any appreciable amount of web development know that
there is an enormous variety in the tasks that are out there.  No single
solution is going to hack it for every problem.  Personally, I use Zope, PHP,
mod_python with publisher, mod_python directly, Python CGI, and occasionally
the Python interpreter and GNU make.  Every task calls for different tools.

If you want to design a killer app, take all of the "I like this feature" and
"$PRODUCT has that" that you see here, generalize completely, and build a
framework into which each can be plugged on an as-needed basis.

What you'll end up with will be Apache with mod_python, though perhaps with a
little bit more pluggability on mod_python's part.  Right now, that's where
we should be focusing our attention.  What are the paradigms under which you
wish your web server would invoke your scripts?  How can the Python-facing
end of mod_python be structured to support that paradigm?

My $0.05

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From jm at eemsystems.cjb.net  Sun Jun  8 11:40:07 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] segmentation fault
In-Reply-To: <200306072211.45891.jgardner@jonathangardner.net>
References: <1054856231.1465.17.camel@eemsystems.com>
	 <200306060735.36876.jgardner@jonathangardner.net>
	 <1054918964.11887.13.camel@eemsystems.com>
	 <200306072211.45891.jgardner@jonathangardner.net>
Message-ID: <1055090407.949.6.camel@eemsystems.com>

thanks,  I change it to:

def _getCookie(headers_in, key):
	if headers_in.has_key('Cookie'):
		import Cookie
		C = Cookie.SimpleCookie(headers_in['Cookie'])
		if C.has_key(key):
		    return C[key].value
		else:
			return None
	return None


and all is working fine.

El dom, 08-06-2003 a las 00:11, Jonathan Gardner escribi?:

> >
> > def getCookie(headers_in, key):
> >     if headers_in.has_key('Cookie'):
> >         import Cookie
> >         C = Cookie.SmartCookie(headers_in['Cookie'])
> >         C.load(headers_in['Cookie'])
> >         if C.has_key(key):
> >             return C[key].value
> >     return None
> >
> 
> What line in getCookie is giving you the problem?
> 
> - -- 
> Jonathan Gardner
> jgardner@jonathangardner.net
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+4sWQWgwF3QvpWNwRAv8zAJ0YgfsbUXXVe2VtfR3tMXyk2O3rGQCfdsi3
> KBAjmIpvSI1xVJJxAUPDyLM=
> =Kjlg
> -----END PGP SIGNATURE-----
-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 11:24:33 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <200306072231.54572.jgardner@jonathangardner.net>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
Message-ID: <3EE31CF1.11381.D637E22@localhost>

> - - Permanent and temporary sessions. Every website uses cookies for
> only one thing - sessions. We should have this built in by default.

Personally, I prefer to pass a variable SID around with each link and 
form.  Yeah, it's not as convenient as a cookie, but at least you 
don't have to worry about cookies being enabled.  Plus, it is 
available on the first page load and it is compatible with CGI's I 
wrote before getting into mod_python, where it was too tricky to 
modify headers to set one.

> - - Keeping HTML totall separate from the code is a very good idea.
> Unfortunately, it makes things like loops or iterations (like listing
> some results) difficult. I believe the best way around this is to
> allow some python code, in its pure python form, in the page somehow.
> However, this should be extremely light and only when necessary. Is
> there anyway around this? 

When I code with templates, I use the following syntax in my HTML to 
bury loops:

<!-- var: BlockName --> ( text to be repeated ) <!-- /var -->

My template class can also handle <!-- /var (VarName) --> which 
doesn't affect operation, but it can make the HTML easier to decypher 
when you stack these.

I embed variables in the traditional way:

%(VarName)s

And then to do the loop in Python, I do something like:

Block = T["BlockName"]
while Condition:
  T["VarName"] = "value"
  T.Add()

print T

To conditionally remove a block:

if Condition:
  T["BlockName"]

Lastly, I bury constants in my HTML with:

<!-- var: VarName="value" -->

And access it with:

VarName = T["VarName"]

Of course, none of this is ground breaking.  I'm sure a million 
programmers have made a similar tool as well.  However, if anyone 
would like a copy of my class, just drop me a note.

I thought about putting it up as a project on SourceForge, but after 
embarassing myself so with RoadKill since I didn't realize spyce 
existed, I'm a tad hesitant.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From dustin at ywlcs.org  Sun Jun  8 12:39:17 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE31CF1.11381.D637E22@localhost>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
Message-ID: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> > - - Permanent and temporary sessions. Every website uses cookies for
> > only one thing - sessions. We should have this built in by default.
> 
> Personally, I prefer to pass a variable SID around with each link and 
> form.  Yeah, it's not as convenient as a cookie, but at least you 
> don't have to worry about cookies being enabled.  Plus, it is 
> available on the first page load and it is compatible with CGI's I 
> wrote before getting into mod_python, where it was too tricky to 
> modify headers to set one.

And it's less secure.  If I hand someone a link like

  http://www.yoursite.com/SID=209354634

Then get them to log in (and thus initiate that session), then I can hijack
their session by using the same URL.  At least with cookies it's much harder
to get someone to install a cookie for a foreign site on their browser.

Be careful!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From verence at web.de  Sun Jun  8 20:17:23 2003
From: verence at web.de (verence)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org>
Message-ID: <3EE37DB3.8060401@web.de>

Dustin Mitchell wrote:
> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
> 
>>>- - Permanent and temporary sessions. Every website uses cookies for
>>>only one thing - sessions. We should have this built in by default.
>>
>>Personally, I prefer to pass a variable SID around with each link and 
>>form.  Yeah, it's not as convenient as a cookie, but at least you 
>>don't have to worry about cookies being enabled.  Plus, it is 
>>available on the first page load and it is compatible with CGI's I 
>>wrote before getting into mod_python, where it was too tricky to 
>>modify headers to set one.
> 
> 
> And it's less secure.  If I hand someone a link like
> 
>   http://www.yoursite.com/SID=209354634
> 
> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.
> 
> Be careful!
> 
> Dustin
> 
hi,

this common problem was solved very often, one way is to recalculate the 
SID for every response you send back according to the SID you got from 
the request (and keep track of the SIDs during a session). a much easier 
way is to maintain a pool of SIDs actually beeing used and throw away 
the unused ones (after a session timeout), wether with a scheduled 
thread or a check everytime a SID arrives from a client. in fact, this 
mechanism most java servlet engines use (wether they store the id in a 
cookie or as a parameter). and it only seem that cookies are more 
secure, it is easy to fake them. this session thingy is (from my pov) a 
real security bottleneck, so i just can repeat your words...

be carful... :)

greets


From andy at nervebox.com  Sun Jun  8 14:39:54 2003
From: andy at nervebox.com (andy@nervebox.com)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] python to javascript lib
Message-ID: <1834236.1055097594608.JavaMail.SYSTEM@chango>

This group seem like the folks who would know about this.

Is there a Python lib or module that will translate python data structures into javascript and vice-versa?  Some implememtations of WDDX do this and it's sooo handy.

If there isn't one, I'll write one and share it.  But if there is one, it would save me a lot 
of time. :)

 - thanks,
 - andy c
      
      
      
    
From barr at cs.cornell.edu  Sun Jun  8 15:34:00 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Killer Web Apps
In-Reply-To: <20030608162918.GI1192@eleanor.internal.ywlcs.org>
Message-ID: <Pine.LNX.4.44.0306081454200.12610-100000@pompom.cs.cornell.edu>

Hi Dustin,

I agree. And, let me follow up on that by expounding on an earlier
suggestion that I made... I think that mod_python should focus on
building a standard extension mechanism rather than begin folding
"killer" features such as mod_psp. This will mature the entire Python
web community.

What I mean by standard extension mechanism is to define something
similar to the Linux Standard Base project, albeit much smaller in
scope. mod_python needs a configuration file/directory for extensions
with a specific location. It needs a versioning mechanism, a way to find
the Python interpretter, some scratch disk space (for caching, or
whatever a plugin needs), etc. It needs a simple extension namespace and
registry (i.e. files in some directory) to find out what other modules
are available, or perhaps an RPM (or Windows registry) naming
convention... little details that allow for automated installation and
configuration across multiple platforms and configurations. They really
are just little details, but they can make the difference to a new user
between perceiving the project as a hackish solution versus a polished
one.

This is the major advantage that PHP has - it just plugs in to Apache.
And that's why ISPs just plug it in! It would be nice if mod_python just
plugged into Apache, and then Spyce/Draco/WebWare/etc just plugged into
mod_python to form a working Python web-serving system. Ideally, I think
it should be a two RPM installation, or just two setup executables on
Windows. This this exactly the situation with Apache/PHP/Pear and it
works well.

On the API front, I think that mod_python needs to make threaded output
more efficient, and possibly support output buffering. Currently, I'm
performing hacks in Spyce for both of these, and they could be
implemented more efficiently inside mod_python (and in C) with
substantial performance gains on the output path. Other frameworks would
benefit from this as well.

In general, the concern that I have with the "folding" of mod_psp into
mod_python is two fold. First, it may integrate with mod_python via APIs
that would otherwise have been exposed and have benefitted all the
Python-based web projects. Secondly, it may become the defacto standard,
no matter how it compares with other tools for a specific task, simply
because of its tighter integration and automatic inclusion. It will be
seen as a standard, and it will stifle the creation of useful tools in
the space. PHP, for example, has recognized this problem, and has
created PEAR. Perl did the same with CPAN.

We don't need to have something as extensive, but it would be nice to
have a basic extensible Python-based web infrastructure of some kind,
and mod_python is the place to do it, since it is now part of the Apache
Foundation and therefore a central member of the Python web community.

My two cents,
Rimon.

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

>Let's take a step back and look at what we're doing here.
>
>We're trying to invent the perfect solution to everyone's problems.  Now, any
>of us that have done any appreciable amount of web development know that
>there is an enormous variety in the tasks that are out there.  No single
>solution is going to hack it for every problem.  Personally, I use Zope, PHP,
>mod_python with publisher, mod_python directly, Python CGI, and occasionally
>the Python interpreter and GNU make.  Every task calls for different tools.
>
>If you want to design a killer app, take all of the "I like this feature" and
>"$PRODUCT has that" that you see here, generalize completely, and build a
>framework into which each can be plugged on an as-needed basis.
>
>What you'll end up with will be Apache with mod_python, though perhaps with a
>little bit more pluggability on mod_python's part.  Right now, that's where
>we should be focusing our attention.  What are the paradigms under which you
>wish your web server would invoke your scripts?  How can the Python-facing
>end of mod_python be structured to support that paradigm?
>
>My $0.05
>
>Dustin
>
>

From davidf at sjsoft.com  Sun Jun  8 22:11:16 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE37DB3.8060401@web.de>
References: <000001c32c68$e6a54e80$1004a8c0@GREETOP>
	<3EE31CF1.11381.D637E22@localhost>
	<20030608173917.GJ1192@eleanor.internal.ywlcs.org> <3EE37DB3.8060401@web.de>
Message-ID: <3EE39864.6020602@sjsoft.com>

verence wrote:

> Dustin Mitchell wrote:
>
>> On Sun, Jun 08, 2003 at 11:24:33AM -0600, Gre7g Luterman wrote:
>>
>>>> - - Permanent and temporary sessions. Every website uses cookies for
>>>> only one thing - sessions. We should have this built in by default.
>>>
>>>
>>> Personally, I prefer to pass a variable SID around with each link 
>>> and form. Yeah, it's not as convenient as a cookie, but at least you 
>>> don't have to worry about cookies being enabled. Plus, it is 
>>> available on the first page load and it is compatible with CGI's I 
>>> wrote before getting into mod_python, where it was too tricky to 
>>> modify headers to set one.
>>
>>
>>
>> And it's less secure. If I hand someone a link like
>>
>> http://www.yoursite.com/SID=209354634
>>
>> Then get them to log in (and thus initiate that session), then I can 
>> hijack
>> their session by using the same URL. At least with cookies it's much 
>> harder
>> to get someone to install a cookie for a foreign site on their browser.
>>
>> Be careful!
>>
>> Dustin
>>
> hi,
>
> this common problem was solved very often, one way is to recalculate 
> the SID for every response you send back according to the SID you got 
> from the request (and keep track of the SIDs during a session). a much 
> easier way is to maintain a pool of SIDs actually beeing used and 
> throw away the unused ones (after a session timeout), wether with a 
> scheduled thread or a check everytime a SID arrives from a client. in 
> fact, this mechanism most java servlet engines use (wether they store 
> the id in a cookie or as a parameter). and it only seem that cookies 
> are more secure, it is easy to fake them. this session thingy is (from 
> my pov) a real security bottleneck, so i just can repeat your words...
>
> be carful... :)
>
> greets 

Actually what needs to be ensured is that the SID is secure.
We have a system where we use cookies, and the SID is a md5 hash of the 
timestamp, username, password, and a secret string. That way it can't be 
forged and we can keep track of sessions based on timestamp.

David

From barr at cs.cornell.edu  Sun Jun  8 16:18:07 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] modular mod_python extensions vs. "folding" mod_psp
In-Reply-To: <20030606164118.16841.qmail@email.com>
Message-ID: <Pine.LNX.4.44.0306081556500.12961-100000@pompom.cs.cornell.edu>

Dear Jack,

>Holy Cross Posting Batman!
>I'm just replying to the proper forum (python-dev@apache)

I feel that this topic involves more than the just the mod_python
development list. It involves also the developers that use mod_python to
create Python frameworks based on mod_python, and also the users of
those systems. I selected only a few frameworks that I have posted to
before, and that I know are rather mature projects. You are free to
address your replies as you please.

>No need to freak out.  Per the original discussions of psp it will be
>seperate enough so you can use the psp stuff in a regular CGI or even
>to generate text offline altogether.

Then why the integration? It seems like it should operate just like
WebWare, Zope, Spyce and the rest: as one possible framework that you
could place on top of the mod_python base. Futhermore, my concern is not
with the generality of mod_psp, but rather with the generality of
mod_python.

>This would lend it to being generic enough that the same hooks it uses
>could be used by any other templating engine. IMO the reason psp was
>folded into mod_python and not something else is just that the guy who
>did psp was willing to put in some time and many people (mostly noobs)
>expect a php-alike with thier mod_whatever.

Installing two rpms instead of one is not a big deal, and is not a valid
reason to combine the development. PHP and Pear are seperate installs,
for example. Furthermore, Spyce and many other systems work perfectly
against the exposed mod_python API. Therefore, all the "integration
work" that you speak of has been done by others as well. Unless, of
course, there is some unexposed mod_python functionality that mod_psp is
using...

There is no performance disadvantage from this modular approach. In
fact, it is this modular approach that has made Apache popular, that has
lead to the success of Python, Perl, PHP and many other systems. People
like to plug in components. But, for that you need a component
infrastructure, and you need to resist the urge to tack on quick fixes
or integrate with this or that project to get another neat feature.
Rather, you want to create an open platform that allows others to easily
create their own extensions.

>So it solved a couple minor problems without adding any new ones. No
>big deal or conspiracy here.

The concern is not about conspiracy, but on the effect of the inclusion.
The inclusion of mod_psp, excludes other frameworks, because it becomes
the defacto standard through an arbitrary linkage to mod_python rather
than through its independent merits. It thereby stifles the progress and
interest in other solutions unnecessarily.

All the best,
Rimon.


From barr at cs.cornell.edu  Sun Jun  8 16:43:50 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
 "folding" mod_psp
In-Reply-To: <000201c32cc6$09bddb50$1004a8c0@GREETOP>
Message-ID: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>

Hi Geert,

>As the author of one of the systems you mention above, I was worried a
>bit too when the announcement was made to add PSP to mod_python.
>However, my understanding is that the component is implemented as a
>mod_python handler so that it is completely optional. I hope that it
>remains like this: mod_python as a fast and pure Apache-Python interface
>with an optional templating system.

As you are no-doubt aware, I am also an author of one of these systems:
Spyce. :) I well-aware of how to interface with mod_python. I've built
an abstraction layer underneath Spyce that allows it to operate
efficiently with mod_python and also with FastCGI, the Xitami web
server, CGI and as a web proxy.

>The good thing about this move is that new users will have something to
>get started with. On the other hand, a web framework that does a bit
>more than the standard ASP stuff is probably much larger in scope than
>mod_python, so then it would be like adding mod_python to the framework
>instead of the other way around.

I see the benefits as well. My concern is that the automatic inclusion
of mod_psp will have two effects. First, it will become a "good enough"
standard and users will not bother to look at other possibilities, which
are quite good and creative, and certainly more mature than mod_psp at
this point. I put up a web page, for example:
  http://spyce.sourceforge.net/doc-add_related.html
so that users will be able to see all the interesting things that people
are doing, and be able to select the tools that are most appropriate for
their needs. I, for example, think that I've contributed to the
community with spyce modules, spyce lambdas and spyce active tags. If
you're interested, then have a look at:
  http://spyce.sourceforge.net/doc-mod.html
  http://spyce.sourceforge.net/doc-lang_lambda.html
  http://spyce.sourceforge.net/doc-tag.html
I also recognize the value in the design of CherryPy, of WebWare, of
Draco, etc. I've learned interesting things from looking at each of
these systems, and I hope that their development continues to introduce
more useful concepts.

My second concern regarding the inclusion of mod_psp is that it will end
up being a much larger codebase than mod_python, and will influence the
focus of the project from being a platform (i.e. infrastructure) for
Python-based Apache integration to being a project like Spyce and others
that are focussed on the language issues or application frameworks.
These two goals can be kept separate, but then why merge the two
projects?

Good boundaries make for good design, because short-cuts are not
possible. You, I and all other developers (and the users of our systems)
that use the mod_python infrastructure to operate within Apache have an
interest in ensuring that mod_python remains open and focussed on that
small, but most important goal: infrastructure. As a developer that uses
mod_python, I think that the most important next steps are performance
and configuration issues, not a handler for a new Python-web language.
Are there any technical merits for merging mod_psp with mod_python?

My two cents,
Rimon.

On Sat, 7 Jun 2003, Geert Jansen wrote:

>Ramon,
>
>> I wanted to post earlier, but I didn't find the time. I find
>> this "folding" to be a little troubling. Why not fold Zope
>> into mod_python? Why not Spyce? Why not Roadkill? Why not
>> Draco? Why not Cheetah, or WebWare?
>>   http://www.zope.org/
>>   http://spyce.sourceforge.net/
>>   http://roadkill.sourceforge.net/
>>   http://draco.boskant.nl/
>>   http://www.cheetahtemplate.org/
>>   http://webware.sourceforge.net/
>>
>> There are many others at:
>>   http://spyce.sourceforge.net/doc-add_related.html
>
>[...]
>
>> Should it simply be a pure Python handler, or should it be
>> extended with more functionality? There is a difference
>> between mod_python compatability and mod_python inclusion.
>> Should there be a modular extension and/or installation
>> mechanism or should there be a "folding" for all willing
>> projects? If mod_python picks one candidate, what will it
>> mod_python do to the other projects? Will some other projects
>> begin to fork mod_python as a result? Do we want a
>> duplication of effort of either the mod_python-type or the
>> mod_psp-type code?
>
>> I humbly recommend that mod_python remain pure, and serve as
>> a Python handler. It does this job very well! I think that
>> what mod_python needs is the creation and documentation of a
>> standard extension mechanism to allow for
>> psp/spyce/draco/roadkill/etc. type of extensions. They would
>> not be included with mod_python, but would involve a simple .rpm (or
>> whatever) installation. (That's where the standardization
>> helps!) This will allow projects like Spyce, which works well
>> with FastCGI, mod_python, CGI, via proxying and even with
>> other webservers (Xitami) to continue to perform efficiently
>> within Apache and also to broaden the user base with support
>> for other web platforms.
>
>It is already quite easy to add an extension to mod_python. Mostly it is
>just the definition of the appropriate "PythonHandler" directives. What
>would really help IMHO is a good and independent web site describing the
>current situation with the many different frameworks that lists and
>rates the different options.
>
>Cheers,
>Geert

From gstein at lyra.org  Sun Jun  8 14:13:27 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157776B9510@johnson.mediapulse.net>
Message-ID: <20030608211327.GH19908@lyra.org>

I do all of my templating using my ezt.py module. It has no algorithmic
constructs in it at all. It simply renders data that the Python app has
provided to it. It has simple iteration and simple control flow, but no
variable assignment, method invocation, etc. In fact, it really only has
about six basic directives. I've used it with success in ViewCVS, edna,
SubWiki, and some internal apps at the ASF and at home.

I think the latest version of it is part of the SubWiki project, so you can
fetch it right out of the SVN repository:

  http://svn.webdav.org/repos/projects/subwiki/trunk/lib/ezt.py

I find the module makes for a nice separation between logic and rendering.

Yes, this is a bit of advocacy :-), but I'm not asking for any change. Just
pointing out a module that I think can help people...

Cheers,
-g

On Sat, Jun 07, 2003 at 07:17:20PM -0400, Michael C. Neel wrote:
> I suppose it's all a matter of taste really, to me the problem with the
> PHP-like methods is there is no seperation of logic from design; or the
> method doesn't lend itself well to it.  I'm willing to learn some
> special tags if I know all real the python code is in a .py file and the
> html in a .html file.
> 
> Mike
> 
>      > The problem with Albatross for me is the same one with 
>      > all the others - it
>      > is yet another language to learn:
>      > 
>      > <al-for iter="name" expr="keys">
>      >     <tr>
>      >          <td><al-value expr="name.value()"></td>
>      >          <td><al-value expr="environ[name.value()]"></td>
>      >     <tr>
>      > </al-for>
>      > 
>      > This is not Python. Nor is it HTML.
>      > 
>      > Grisha
>      > 
>      > 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From gre7g-k-modpython.e475ec at wolfhome.com  Sun Jun  8 15:43:12 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030608173917.GJ1192@eleanor.internal.ywlcs.org>
References: <3EE31CF1.11381.D637E22@localhost>
Message-ID: <3EE35990.2860.E504CF8@localhost>

> Then get them to log in (and thus initiate that session), then I can hijack
> their session by using the same URL.  At least with cookies it's much harder
> to get someone to install a cookie for a foreign site on their browser.

I suppose I didn't mention it, but I do test the remote IP address 
against the IP address recorded in the session pickle.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

         I want to be the master of time and space, a living god,
                            ...and then I'd like to visit Europe.
From sterling at bumblebury.com  Sun Jun  8 18:00:06 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306081620160.12961-100000@pompom.cs.cornell.edu>
Message-ID: <1055109606.1603.18.camel@hasele>

Ok, I'll bite.

> I see the benefits as well. My concern is that the automatic inclusion
> of mod_psp will have two effects. First, it will become a "good enough"
> standard and users will not bother to look at other possibilities, which
> are quite good and creative, and certainly more mature than mod_psp at
> this point. I put up a web page, for example:

I think you make the opposite point right here.  If PSP is "good
enough," then why should they investigate other options?  I'm not going
to say anything bad about the other systems, I like some of them, others
less: they all have their advantages and their different approaches,
such diversity is imho a good thing.  However, the goal of mod_python,
as I understand it, is to be the best toolkit for developing web
applications with Python.  It is a pretty common request to embed python
code within HTML, if we can find a solution that is "good enough," I
think that's an admirable achievement.

PSP's integration with mod_python does not preclude the usage of spyce
or any of these other systems.  In fact, I happen to use cheetah for
some of my sites, I think its a superb product.  It just provides users
with a simple, fast system that works "out of the box."  That's never a
bad thing.

> 
> My second concern regarding the inclusion of mod_psp is that it will end
> up being a much larger codebase than mod_python, and will influence the
> focus of the project from being a platform (i.e. infrastructure) for
> Python-based Apache integration to being a project like Spyce and others
> that are focussed on the language issues or application frameworks.
> These two goals can be kept separate, but then why merge the two
> projects?
> 
> Good boundaries make for good design, because short-cuts are not
> possible. You, I and all other developers (and the users of our systems)
> that use the mod_python infrastructure to operate within Apache have an
> interest in ensuring that mod_python remains open and focussed on that
> small, but most important goal: infrastructure. As a developer that uses
> mod_python, I think that the most important next steps are performance
> and configuration issues, not a handler for a new Python-web language.
> Are there any technical merits for merging mod_psp with mod_python?
> 

Good boundaries make for good design.  

PSP is a python handler, distributed with mod_python.  There is a clear
boundary between the two pieces of code.  I can see your political
reasoning for not including PSP, but what is your technical reason?  The
other systems will not be technically disadvantaged in anyway, and psp 
certainly doesn't muddy things up from a technical perspective.

Good Fences Make Good Neighbors,

Sterling

-- 
Good judgement comes from experience, and experience comes from 
bad judgement. 
    - Fred Brooks
From dustin at ywlcs.org  Sun Jun  8 19:15:04 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <3EE35990.2860.E504CF8@localhost>
References: <3EE31CF1.11381.D637E22@localhost>
	<3EE35990.2860.E504CF8@localhost>
Message-ID: <20030609001504.GK1192@eleanor.internal.ywlcs.org>

On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > Then get them to log in (and thus initiate that session), then I can hijack
> > their session by using the same URL.  At least with cookies it's much harder
> > to get someone to install a cookie for a foreign site on their browser.
> 
> I suppose I didn't mention it, but I do test the remote IP address 
> against the IP address recorded in the session pickle.

That can cause trouble for people behind multiple, layer-4 switched caches..
the remote IP will be different for different requests..

That's rare, but it does happen.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From grisha at modpython.org  Sun Jun  8 23:36:08 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:56 2004
Subject: Cookies [was: [mod_python] Announcement: Roadkill version 0.01
 "Kitten"]
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <20030608233011.G83392-100000@oldchief.reply.net>


Just as a sidenote to this discussion -

It is surprising how little decent info is available about them. By far
the best description of everything relating to cookies from history to
issues with them and why they are needed is in this paper:

"HTTP Cookies: Standards, Privacy, and Politics" by David M. Kristol

http://arxiv.org/abs/cs.SE/0105018

Grisha

On Sun, 8 Jun 2003, Dustin Mitchell wrote:

> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), then I can hijack
> > > their session by using the same URL.  At least with cookies it's much harder
> > > to get someone to install a cookie for a foreign site on their browser.
> >
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
>
> That can cause trouble for people behind multiple, layer-4 switched caches..
> the remote IP will be different for different requests..
>
> That's rare, but it does happen.
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org/djmitche@alumni.uchicago.edu
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Sun Jun  8 22:46:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Write your own appserver in mod_python!
Message-ID: <200306082246.58019.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I had no idea that there were so many mature app servers in mod_python. I 
feel humbled.

I'll admit, I wrote my own, and I think it has a catchy name -- PyT. I'll be 
releasing it soon enough. This makes me one of the 500 others who have 
written their own appserver for mod_python. I don't mind that at all. 
Secretly, I wish mine will become the next JSP or PHP, but I won't hold my 
breath, because I know all of you do too.

The real strength of python is that anyone can write their own stuff without 
too much effort. And no matter what their design decisions, the language 
seems to get out of the way. It comfortably molds itself into the image you 
want it to mold into, without losing its integrity or comprising its 
features. It seems perl, with its infinite complexity, actually ended up 
being "there's only a few ways you can actually do it right", while Python, 
with it rigid yet simple syntax, has rendered into "everyone does it their 
own way, and guess what, it all works!"

I take back my earlier comment about writing the killer solution. Maybe we 
shouldn't write the killer solution and label it as such. Maybe we should 
emphasize that mod_python is the basis for a million killer solutions! 
Maybe we should advertise that if you don't like what you see, you can 
write your own in a weekend!

I think the mod_python community should be a community of diverse opinions 
and diverser projects. Topics like "What is the best way to handle a 
session?" will always yield at least five different answers. At least we 
will be able to cherry pick the one that works best for our situaton, and 
coding it up will be no problem. Let's encourage others to explore the app 
server solution space, and to share their creations with our community. And 
then at the end of the day, let's go back to the hawking of our wares in 
the bazaar.

So, in that regard, I do fear PSP becoming integrated into the mod_python 
project. I fear because it will give the wrong impression to the newbies. 
It will give them the impression that there is only one good app server out 
there, and PSP is it. This is incredibly false, and dangerously deceptive. 
I would hope that somewhere on the introduction page to mod_python, it says 
in big bold letters:

	PSP is an example of what *you* can do with mod_python. If you like it, use
	it. If anything is disagreeable, go check out these other projects. If
	nothing suits your tastes, *write* *your* *own* and share it with us!

So, here's a toast to the future of mod_python! Choice is king, diversity 
our strength, and community our spirit!

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5B9OWgwF3QvpWNwRAp16AJ4o+9vEfCq68rrIw7z701+RckCgHwCgteew
5CkyolwOdQXU9L4FyO4JrxM=
=OZey
-----END PGP SIGNATURE-----


From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 00:13:02 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <3EE3D10E.32463.10230FF7@localhost>

> I take back my earlier comment about writing the killer solution.
> Maybe we shouldn't write the killer solution and label it as such.
> Maybe we should emphasize that mod_python is the basis for a million
> killer solutions! Maybe we should advertise that if you don't like
> what you see, you can write your own in a weekend! 

The more I think about "a killer app" the more disenchanted I am with 
the idea.

In my mind, Python's greatest strength is that every time I got to a 
point in my code where I said, "Now, if only I had a gizmo that did 
X", that's when I noticed that Python COMES WITH a gizmo that does X 
built in.

Also, while I have the floor, I want to say that I did look around at 
some of the frameworks when I started writing CGI's in Python and I 
found them... (pardon me while I grope for a word)... intimidating.  
I found myself saying "but all I want is a class that does X!".

Now, I'll be the first to admit that I did end up adding X, Y, and Z 
to my code, not just X, so it's very possible that some of the 
frameworks that I found scary because they did X, Y, and Z instead of 
just X would have been a perfect fit, but the fact remains that they 
were more intimidating and felt like they had more commitment 
required than just including one of the standard libs.  (Sorry for 
the run-on, it's late.)

Anyhow, my point is, that if we broke down the problem into small 
bite size pieces, and tossed out the classes as separate .py files, 
perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
dread of commitment to a framework.  They could just say, "I need a 
class to handle sessions."  Boom!  "I need a class that makes HTML 
from templates."  Pow!  "I want to handle my form inputs as class 
members."   Biff!  (Couldn't resist.)

These functions are really separate, so why should anyone have to 
take the whole cow if they just want a hamburger?

Perhaps we should take all these competing frameworks, split them 
into their classes, and make them all a-la-carte?  A session from 
here... a template from there...  That would let us program the way 
we like to (or at least how I like to) by taking just the stuff we 
want and leaving the other stuff behind.

Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

        I want to die peacefully in my sleep, like my grandfather
                  ...not screaming in terror like his passengers.
From davidf at sjsoft.com  Mon Jun  9 09:17:54 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <3EE434A2.6080409@sjsoft.com>

Gre7g Luterman wrote:

>Perhaps we should take all these competing frameworks, split them 
>into their classes, and make them all a-la-carte?  A session from 
>here... a template from there...  That would let us program the way 
>we like to (or at least how I like to) by taking just the stuff we 
>want and leaving the other stuff behind.
>
In fact, maybe what we need is just a nice "map" to all the frameworks, 
explaining each one's focus, and giving a short code example for each...
That would be a first step to helping people find what they need

David

From fitnah55 at hotmail.com  Mon Jun  9 04:16:17 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] 
	need working fix for 'import site' aka 'ImportError' aka
	'make_obcallback' error
Message-ID: <000101c32e5f$66cb0da0$18c0c20a@computer>


i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


From neo at https.ru  Mon Jun  9 12:29:14 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE3D10E.32463.10230FF7@localhost>
References: <3EE3D10E.32463.10230FF7@localhost>
Message-ID: <1603919375.20030609122914@https.ru>


> The more I think about "a killer app" the more disenchanted I am with 
> the idea.

> In my mind, Python's greatest strength is that every time I got to a 
> point in my code where I said, "Now, if only I had a gizmo that did 
> X", that's when I noticed that Python COMES WITH a gizmo that does X 
> built in.

> Also, while I have the floor, I want to say that I did look around at 
> some of the frameworks when I started writing CGI's in Python and I 
> found them... (pardon me while I grope for a word)... intimidating.  
> I found myself saying "but all I want is a class that does X!".

> Now, I'll be the first to admit that I did end up adding X, Y, and Z 
> to my code, not just X, so it's very possible that some of the 
> frameworks that I found scary because they did X, Y, and Z instead of 
> just X would have been a perfect fit, but the fact remains that they 
> were more intimidating and felt like they had more commitment 
> required than just including one of the standard libs.  (Sorry for 
> the run-on, it's late.)

> Anyhow, my point is, that if we broke down the problem into small 
> bite size pieces, and tossed out the classes as separate .py files, 
> perhaps it wouldn't be nearly so bad.  Programmers wouldn't feel the 
> dread of commitment to a framework.  They could just say, "I need a 
> class to handle sessions."  Boom!  "I need a class that makes HTML 
> from templates."  Pow!  "I want to handle my form inputs as class 
> members."   Biff!  (Couldn't resist.)

> These functions are really separate, so why should anyone have to 
> take the whole cow if they just want a hamburger?


  Here are very smart ideas. I totally agree with the above.




> Gre7g.

> =================================================================
> Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
> Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm

>         I want to die peacefully in my sleep, like my grandfather
>                   ...not screaming in terror like his passengers.


--- 
Neo Eureka / mailto:neo@https.ru

From neo at https.ru  Mon Jun  9 12:35:41 2003
From: neo at https.ru (Neo Eureka)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <200306082246.58019.jgardner@jonathangardner.net>
References: <200306082246.58019.jgardner@jonathangardner.net>
Message-ID: <494306522.20030609123541@https.ru>


> I think the mod_python community should be a community of diverse
> opinions 
> and diverser projects. Topics like "What is the best way to handle a 
> session?" will always yield at least five different answers. At least we 
> will be able to cherry pick the one that works best for our situaton,
> and 
> coding it up will be no problem. Let's encourage others to explore the
> app 
> server solution space, and to share their creations with our community.

> So, in that regard, I do fear PSP becoming integrated into the mod_python 
> project. I fear because it will give the wrong impression to the newbies. 
> It will give them the impression that there is only one good app server out 
> there, and PSP is it. This is incredibly false, and dangerously deceptive. 
> I would hope that somewhere on the introduction page to mod_python, it says 
> in big bold letters:

>         PSP is an example of what *you* can do with mod_python. If you like it, use
>         it. If anything is disagreeable, go check out these other projects. If
>         nothing suits your tastes, *write* *your* *own* and share it with us!


  I just want to wholeheartedly support the authors' opinions!


--- 
Neo Eureka / mailto:neo@https.ru

From geert at boskant.nl  Mon Jun  9 12:45:25 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:56 2004
Subject: [mod_python] Announcement: Roadkill version 0.01 "Kitten"
In-Reply-To: <20030609001504.GK1192@eleanor.internal.ywlcs.org>
Message-ID: <000001c32e74$3c794390$1001a8c0@GREETOP>


> On Sun, Jun 08, 2003 at 03:43:12PM -0600, Gre7g Luterman wrote:
> > > Then get them to log in (and thus initiate that session), 
> then I can 
> > > hijack their session by using the same URL.  At least 
> with cookies 
> > > it's much harder to get someone to install a cookie for a foreign 
> > > site on their browser.
> > 
> > I suppose I didn't mention it, but I do test the remote IP address
> > against the IP address recorded in the session pickle.
> 
> That can cause trouble for people behind multiple, layer-4 
> switched caches.. the remote IP will be different for 
> different requests..
> 
> That's rare, but it does happen.

Something that will cause trouble with this too are on-demand dialing
ISDN modems which usually have a hangup timeout of about 120 seconds. If
the user stays idle for more than two minutes, the modem will hangup,
then redial and get a different IP address.

Geert

From geert at boskant.nl  Mon Jun  9 13:05:41 2003
From: geert at boskant.nl (Geert Jansen)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055109606.1603.18.camel@hasele>
Message-ID: <000501c32e77$114709c0$1001a8c0@GREETOP>


> PSP is a python handler, distributed with mod_python.  There 
> is a clear boundary between the two pieces of code.  I can 
> see your political reasoning for not including PSP, but what 
> is your technical reason?  The other systems will not be 
> technically disadvantaged in anyway, and psp 
> certainly doesn't muddy things up from a technical perspective.

The fact that mod_psp hasn't proved anything yet while other frameworks
have seems a technical reason to me.

What do you (as the mod_psp author) think of the remarks that have been
made already by two people that a complete web application framework is
much larger in scope than mod_python. This would mean that adding it to
mod_python is like adding mod_python to the framework. At that time can
only hope that the focus of mod_python doesn't shift from being a
general and high performance Python layer for Apache to being the Apache
enablement of mod_psp.

Cheers,
Geert

From sterling at bumblebury.com  Mon Jun  9 10:58:36 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <000501c32e77$114709c0$1001a8c0@GREETOP>
References: <000501c32e77$114709c0$1001a8c0@GREETOP>
Message-ID: <1055170715.22155.44.camel@hasele>

On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> > PSP is a python handler, distributed with mod_python.  There 
> > is a clear boundary between the two pieces of code.  I can 
> > see your political reasoning for not including PSP, but what 
> > is your technical reason?  The other systems will not be 
> > technically disadvantaged in anyway, and psp 
> > certainly doesn't muddy things up from a technical perspective.
> 
> The fact that mod_psp hasn't proved anything yet while other frameworks
> have seems a technical reason to me.
> 

That's a reason against bundling?  I can see that's a reason against
bundling PSP, but Rimon is talking about the chastity of mod_python
here.  

And btw, that's an advantage from a bundling perpsective - It doesn't
need to support legacy userbases, so the code itself is very malleable,
as witnessed by some of grisha's recent changes.

> What do you (as the mod_psp author) think of the remarks that have been
> made already by two people that a complete web application framework is
> much larger in scope than mod_python. This would mean that adding it to
> mod_python is like adding mod_python to the framework. At that time can
> only hope that the focus of mod_python doesn't shift from being a
> general and high performance Python layer for Apache to being the Apache
> enablement of mod_psp.
> 

I don't think that focus will switch.

For one thing, Rimon didn't have a problem with the "purity" of
mod_python when he proposed that spyce be integrated, it was only after
that fell through in private mail that he refocused the issue, and
brought it to the mailing lists.

PSP is a very small, very fast alternative, it doesn't preclude you from
using any of the listed solutions.  In fact you can use PSP in
conjunction with any of the solutions listed, or you can even ignore its
existence altogether and use something else, or code directly with
req.write().  There is *zero* performance loss if you choose to use
another option, like spyce.

As for the shift of development focus.  I'm touched Rimon cares so much
about how developers spend their time.  I guess only experience will
tell, but generally I think the people who develop mod_python are
capable of deciding what they want to spend their time on, and what
requires attention at the moment.  We don't need to be put in a crib so
that we don't chew on the electric cords.

If you want to re-invent the wheel, go for it!  Including Python with a
Linux distribution doesn't stop you from using PHP.  PSP is a common
feature request, and it lives as a standard module for the 99% of users
who just want a solution that works, and don't care how efficient '[['
is to type.  That doesn't mean alternatives aren't allowed and
encouraged, they just aren't bundled.

-Sterling

-- 
"C makes it easy to shoot yourself in the foot; C++ makes it harder,  
 but when you do, it blows away your whole leg." 
    - Bjarne Stroustrup
From barr at cs.cornell.edu  Mon Jun  9 13:05:18 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055170715.22155.44.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>

Dear Sterling,

On 9 Jun 2003, Sterling Hughes wrote:

>On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
>> > PSP is a python handler, distributed with mod_python.  There
>> > is a clear boundary between the two pieces of code.  I can
>> > see your political reasoning for not including PSP, but what
>> > is your technical reason?  The other systems will not be
>> > technically disadvantaged in anyway, and psp
>> > certainly doesn't muddy things up from a technical perspective.
>>
>> The fact that mod_psp hasn't proved anything yet while other frameworks
>> have seems a technical reason to me.
>
>That's a reason against bundling?  I can see that's a reason against
>bundling PSP, but Rimon is talking about the chastity of mod_python
>here.

I agree with Geert here, and also with Ian's prior email. PSP has not
proven itself, while other projects have. There are also prior projects
with that name and concept, that are many years older than mod_psp. Does
mod_psp even have any users yet?

>For one thing, Rimon didn't have a problem with the "purity" of
>mod_python when he proposed that spyce be integrated, it was only after
>that fell through in private mail that he refocused the issue, and
>brought it to the mailing lists.

First, please do not get personal. It's not necessary. I'm only trying
to help the OSS community, just like you. And, second, please don't
misquote me. I suggested to you, in that private email, that what you
were doing had similar goals to Spyce. And what I then suggested, to see
whether you were interested, is that you help with the Spyce parser. I
only wanted to combine efforts with you, so that we could build
something bigger and better. I saw that you were working on a C-based
parser for psp, and I asked you whether you were interested in working
on such a parser for the Spyce language. The rationale is that although
the parser does not matter much for performance, because the compiled
files are cached, it would be nice as an option for developers, since
the current Spyce parser is implemented in Python and is relatively
slow. I also, thinking that you work with the Apache Foundation, I
offered to donate Spyce to the AF. Donating to the AF does not mean, in
my mind, merging the Spyce and mod_python projects.

You seem to be attacking me as an individual rather than discussing the
idea. I'm not interested in this. I am only interested in making Python
a more web-friendly language, and I think mod_python is an important
project in this regard. I also don't have a Spyce agenda, as you seem to
imply. It's just a project that I work on, because I like it, and
because I wanted to implement some features that I didn't find in other
systems.

>PSP is a very small, very fast alternative, it doesn't preclude you from
>using any of the listed solutions.  In fact you can use PSP in
>conjunction with any of the solutions listed, or you can even ignore its
>existence altogether and use something else, or code directly with
>req.write().  There is *zero* performance loss if you choose to use
>another option, like spyce.

Ok, but will PSP be any faster than any of the other solutions?
Possibly. Perhaps you are a better designer, and that's great. But, if
it's because of its integration with mod_python, then this means that
there is something missing in the mod_python API, and we should expose
that functionality. I'm concerned that this will not be the focus of
mod_python any longer, just as it was not the focus of PHP. Have you
looked at the performance of PHP -- it took years to get it to where it
is currently, and it's still not great.

>As for the shift of development focus.  I'm touched Rimon cares so much
>about how developers spend their time.

Again with the personal attacks and sarcasm! Please...

>If you want to re-invent the wheel, go for it!  Including Python with a
>Linux distribution doesn't stop you from using PHP.  PSP is a common
>feature request, and it lives as a standard module for the 99% of users
>who just want a solution that works, and don't care how efficient '[['
>is to type.  That doesn't mean alternatives aren't allowed and
>encouraged, they just aren't bundled.

It seems to me, based on everything that is currently out there, that it
is you who are re-inventing the wheel.

BTW, Spyce supports the more common <% syntax as well.

You know, come to think of it... You're making the same bundling
arguments that I've heard used before to extend monopoly positions: it's
good for the user. How would you know what's good for the user without
any mod_psp users? Just a thought..

But, as I said earlier. I'm trying to help the OSS community, as are
you. So good luck, and thank you for your efforts.

All the best,
Rimon.

From sterling at bumblebury.com  Mon Jun  9 14:14:57 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
Message-ID: <1055182496.2853.59.camel@hasele>

On Mon, 2003-06-09 at 13:05, Rimon Barr wrote:
> Dear Sterling,
> 
> On 9 Jun 2003, Sterling Hughes wrote:
> 
> >On Mon, 2003-06-09 at 07:05, Geert Jansen wrote:
> >> > PSP is a python handler, distributed with mod_python.  There
> >> > is a clear boundary between the two pieces of code.  I can
> >> > see your political reasoning for not including PSP, but what
> >> > is your technical reason?  The other systems will not be
> >> > technically disadvantaged in anyway, and psp
> >> > certainly doesn't muddy things up from a technical perspective.
> >>
> >> The fact that mod_psp hasn't proved anything yet while other frameworks
> >> have seems a technical reason to me.
> >
> >That's a reason against bundling?  I can see that's a reason against
> >bundling PSP, but Rimon is talking about the chastity of mod_python
> >here.
> 
> I agree with Geert here, and also with Ian's prior email. PSP has not
> proven itself, while other projects have. There are also prior projects
> with that name and concept, that are many years older than mod_psp. Does
> mod_psp even have any users yet?
> 

Well, I believe it actually has a few.  But again, I don't see your
point here?  Is your point that PSP is not the right library to bundle
or that no libraries in general should be bundled?  

> >For one thing, Rimon didn't have a problem with the "purity" of
> >mod_python when he proposed that spyce be integrated, it was only after
> >that fell through in private mail that he refocused the issue, and
> >brought it to the mailing lists.
> 
> First, please do not get personal. It's not necessary. I'm only trying
> to help the OSS community, just like you. And, second, please don't

Don't get personal?  This is not a personal attack.  And it is
*certainly* not off-topic.  I was just pointing out that you had
previously suggested the integration of Spyce into the fold.  I'm
pointing out that you might have other motives than the "purity" of
mod_python, and I think that's very relevant to the context of this
discussion.

> misquote me. I suggested to you, in that private email, that what you
> were doing had similar goals to Spyce. And what I then suggested, to see
> whether you were interested, is that you help with the Spyce parser. I
> only wanted to combine efforts with you, so that we could build
> something bigger and better. I saw that you were working on a C-based
> parser for psp, and I asked you whether you were interested in working
> on such a parser for the Spyce language. The rationale is that although
> the parser does not matter much for performance, because the compiled
> files are cached, it would be nice as an option for developers, since
> the current Spyce parser is implemented in Python and is relatively
> slow. I also, thinking that you work with the Apache Foundation, I
> offered to donate Spyce to the AF. Donating to the AF does not mean, in
> my mind, merging the Spyce and mod_python projects.
> 

I can certainly dig up the messages if need be.  It was my understanding
from the messages that you wished to donate your code to the ASF, so it
could be included in mod_python.  Which certainly seems to make more
sense then donating your sources to the ASF, just so that I'm able to
work on them (especially when I never made that an issue).


> You seem to be attacking me as an individual rather than discussing the
> idea. I'm not interested in this. I am only interested in making Python
> a more web-friendly language, and I think mod_python is an important
> project in this regard. I also don't have a Spyce agenda, as you seem to
> imply. It's just a project that I work on, because I like it, and
> because I wanted to implement some features that I didn't find in other
> systems.

I'm not attacking you personally, but its convient to paint it that
way.  Your claim is that you have no spyce agenda, excuse me if I find
that quite hard to swallow.  Especially since out of the many lists you
Cc'ed, spyce really has the most to lose.

What is your point by the way?  From what I read, it seems to me that
your point is: 'Spyce will be adversely affected because people will use
the bundled solution.'[1]  Whenever people start using purity as an
argument in and of itself, its a good sign the issue hasn't been in the
crucible long enough.

If you don't want to bring yourself into the argument, then make some
technical claims against it.  Instead of being the maurder who doesn't
want mod_python to be defiled.  You still haven't explained why:

a) Including PSP disadvantages other solutions from a *technical*
perspective.
b) What is wrong with PSP from a technical perspective?  Have you
encountered any bugs when using PSP?  What do you think can be improved?
c) What problems you've had with mod_python since PSP was integrated

> 
> >PSP is a very small, very fast alternative, it doesn't preclude you from
> >using any of the listed solutions.  In fact you can use PSP in
> >conjunction with any of the solutions listed, or you can even ignore its
> >existence altogether and use something else, or code directly with
> >req.write().  There is *zero* performance loss if you choose to use
> >another option, like spyce.
> 
> Ok, but will PSP be any faster than any of the other solutions?
> Possibly. Perhaps you are a better designer, and that's great. But, if

>From the benchmarks I've seen its much faster. But I didn't make that
claim.  I just claimed it was fast, which is subjective (but i think it
is, so there ;-).  

> it's because of its integration with mod_python, then this means that
> there is something missing in the mod_python API, and we should expose
> that functionality. I'm concerned that this will not be the focus of

It doesn't at all take advantage of the mod_python api in anyway than
any other module does.  PSP is a pure python module, with the parser 
written in C (with flex.)  

> mod_python any longer, just as it was not the focus of PHP. Have you
> looked at the performance of PHP -- it took years to get it to where it
> is currently, and it's still not great.
> 

Have I looked at the performance?  I'm a PHP core developer for god
sakes :)  PHP btw, is a language that has become popular because of its
ability to provide a solution for a broad variety of web problems.

And btw, as for PHP's performance.  Its good enough for Yahoo! :)

> >As for the shift of development focus.  I'm touched Rimon cares so much
> >about how developers spend their time.
> 
> Again with the personal attacks and sarcasm! Please...
> 

Gosh, you're touchy.   I'm not personally attacking you, just pointing
out that your primary concern is probably not how I spend my time.

> >If you want to re-invent the wheel, go for it!  Including Python with a
> >Linux distribution doesn't stop you from using PHP.  PSP is a common
> >feature request, and it lives as a standard module for the 99% of users
> >who just want a solution that works, and don't care how efficient '[['
> >is to type.  That doesn't mean alternatives aren't allowed and
> >encouraged, they just aren't bundled.
> 
> It seems to me, based on everything that is currently out there, that it
> is you who are re-inventing the wheel.
> 

Well, isn't your point that people should reinvent the wheel - that's
how better solutions evolve?

> BTW, Spyce supports the more common <% syntax as well.
> 

I know, I was joking :)

> You know, come to think of it... You're making the same bundling
> arguments that I've heard used before to extend monopoly positions: it's
> good for the user. How would you know what's good for the user without
> any mod_psp users? Just a thought..
> 

Again with the personal attacks and sarcasm! Please... ;-)

Well, I'm not the only one who thinks this way.  But I would think being
a core developer of a web scripting language that powers 12 million
domains might give me a little inkling (how many users does spyce have
btw?).  I also think the fact that grisha thought it was a good idea to
adopt PSP might lend me a bit more credibility.  

But what's your argument here anyway - screw the users, viva la spyce?
;-) 

-Sterling
-- 
"That stuff's easy compared to installing Horde" 
    - Alan Knowles, In response to my applause for creating a LALR 
    parser for PHP.
From matt at pollenation.net  Mon Jun  9 19:39:07 2003
From: matt at pollenation.net (Matt Goodall)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] Write your own appserver in mod_python!
In-Reply-To: <3EE434A2.6080409@sjsoft.com>
References: <3EE3D10E.32463.10230FF7@localhost>
	 <3EE434A2.6080409@sjsoft.com>
Message-ID: <1055183947.3960.6.camel@localhost>

I used this to get started, very helpful:

	http://www.python.org/cgi-bin/moinmoin/WebProgramming

- Matt

On Mon, 2003-06-09 at 08:17, David Fraser wrote:
> Gre7g Luterman wrote:
> 
> In fact, maybe what we need is just a nice "map" to all the frameworks, 
> explaining each one's focus, and giving a short code example for each...
> That would be a first step to helping people find what they need
> 
> David
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From tpc at csua.berkeley.edu  Mon Jun  9 11:39:10 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] python print
Message-ID: <20030609105857.C11138-100000@localhost.name>


Hello, I have a script meant to be run from the command line that for each
command line argument, iterates through the characters, returns the value
from a dictionary, and prints out the joined string with no spaces:

<code>
#!/usr/bin/env python

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine'
        }

for argument in sys.argv[1:]:
    print ''.join([dict1[character] for character in argument])
    print '\n'

</code>

I know 'print' and 'echo' are not valid in mod python, and I have tried:

<code>
def convert(numbers):
    for argument in numbers:
        w = ''.join([dict1[character] for character in argument])
        return w
</code>

although 'return' seems to exit after the first character.  I have also
tried:

<code>
x = []
def convert(numbers):
    for argument in numbers:
        x.append([dict1[character] for character in argument])
    return x
</code>

although I get a KeyError.
Is there a mod python alternative to 'print' so I may simply substitute ?

From fitnah55 at hotmail.com  Mon Jun  9 14:44:55 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka 'ImportError'
	aka'make_obcallback' error
In-Reply-To: <000101c32e5f$66cb0da0$18c0c20a@computer>
Message-ID: <000001c32eb7$380f1030$18c0c20a@computer>


this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required
for passwd, so there's no way (even with a completely minimal install)
to
run w/o a python carcass laying around w/o screwing things up a bit one
way
or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From todd at slack.net  Mon Jun  9 14:58:24 2003
From: todd at slack.net (Todd Grimason)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
References: <Pine.LNX.4.44.0306091239190.988-100000@pompom.cs.cornell.edu>
	<1055182496.2853.59.camel@hasele>
Message-ID: <20030609145824.C17197@crank.slack.net>


Hi,

A bit of 3rd-party arbitration re: spyce/folding/"bundling":

If all *SP-type modules are on equal technical footing regarding access to APIs and integration, this is a completely political/marketing situation. From the bit I've gleaned out of this thread, that is indeed the case.

As an (I believe) relevant comparison, JSP is the "blessed" approach from Sun for java - that has not stopped others from arising, i.e. Velocity, Tapestry, etc., and newer libraries such as JSTL which I believe(?) are the result of good ideas being contributed and then embraced by the community, and "adopted" by the official group (Sun).

Will PSP gain a bit of an (initial) edge in visiblity over other templating modules on mod_python? Most certainly, but the combination of the increased visiblity of this feature "officially" available with mod_python, and the ease and equal technical footing of adding any of many other modules to accomplish this I think is win-win. I'd bet (if I was a betting man) that the number of new people an "official" templating module distributed with mod_python will attract would *increase* the number of users of the other packages as well - Spyce, Cheetah, wt, etc. etc.

Just my opinions as a newcomer here struggling to choose from 31 flavors - and at least this is all debating between a number of good options and not a search for just one elusive "OK" option...

-- 

___________________________
toddgrimason*todd@slack.net


From tpc at csua.berkeley.edu  Mon Jun  9 12:25:02 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] python print
In-Reply-To: <1055185349.10716.30.camel@localhost>
Message-ID: <20030609121231.L11532-100000@localhost.name>


Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
The KeyError is generated when mod python encounters the space when I
submit multiple sequences of numbers, which is why I had the 'for
argument in numbers' which in command line mode delimits arguments but as
a POST seems to break the code.  I could always put a value in dict1
where:

 ' ' : '/n',
 ',' : '/n'

On 9 Jun 2003, Scott Russell wrote:

> On Mon, 2003-06-09 at 14:39, tpc@csua.berkeley.edu wrote:
>
> >Hello, I have a script meant to be run from the command line that
> > for each command line argument, iterates through the characters,
> > returns the value from a dictionary, and prints out the joined
> > string with no spaces:
>
> <snip>
>
> I'm new on the list, but this looks like a python issue, not a
> mod_python issue.  Your middle example should work fine, when you stop
> returning in the middle of it:
>
> def convert(numbers):
>    w = ""
>    for argument in numbers:
>        W += ''.join([dict1[character] for character in argument])
>    return w
>
> Do I not understand the problem?  Note, I wrote this with the assumption
> that you were passing a sequence (list, tuple, dict) of character
> strings, as your second and third examples seem to.  Your original
> "print" code did not make this assumption.
>
> BTW, I would expect you to get keyerrors if you're not validating inputs
> - this code doesn't check for exceptions at all.
>
> - Scott
>
>

From gre7g-k-modpython.e475ec at wolfhome.com  Mon Jun  9 13:41:00 2003
From: gre7g-k-modpython.e475ec at wolfhome.com (Gre7g Luterman)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] python print
In-Reply-To: <20030609105857.C11138-100000@localhost.name>
Message-ID: <3EE48E6C.9546.FEFE5B@localhost>

On 9 Jun 2003 at 11:39, tpc@csua.berkeley.edu wrote:

<snipped>

> although 'return' seems to exit after the first character.

You have two options, one is assemble all the text you want to output 
in a single variable:

A = "one"
A += "two"
A += "three"
return A

or use the write statement:

req.write("one")
req.write("two")
req.write("three")

I think you may even be allowed to:

print >> req, "one"
print >> req, "two"
print >> req, "three"

Which is very similar to using the write statement.

Gre7g.Gre7g.

=================================================================
Gre7g Luterman   gre7g@wolfhome.com  http://www.templeofluna.com/
Stay informed: http://www.templeofluna.com/keeper/mailinglist.htm
                      Into each wound, a little salt must fall...
From jgardner at jonathangardner.net  Mon Jun  9 13:51:05 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] python print
In-Reply-To: <3EE48E6C.9546.FEFE5B@localhost>
References: <3EE48E6C.9546.FEFE5B@localhost>
Message-ID: <200306091351.06895.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:41, Gre7g Luterman wrote:
> I think you may even be allowed to:
>
> print >> req, "one"
> print >> req, "two"
> print >> req, "three"
>
> Which is very similar to using the write statement.
>

If you get tired of print >> req, give this a try:

sys.stdout = req
print "one"
print "two"
print "three"

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5PM5WgwF3QvpWNwRAviBAKDnFOtnyTLCxv0BYwwhD5msPIPRGgCguVeH
SOmHE6OBt5QMTBtQqB7R6Qs=
=7cZI
-----END PGP SIGNATURE-----

From fitnah55 at hotmail.com  Mon Jun  9 17:30:45 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32eb7$380f1030$18c0c20a@computer>
Message-ID: <000001c32ece$6341c060$18c0c20a@computer>


does anyone who actually has apache2/mod_python3 working even read this
list?


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 2:45 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error



this is running with:

mandrake 9.1 (bamboo)
apache 2.0.46
mod_python 3.0.3
python 2.2.2

mandrake 9.1 requires python rpm be installed for libuser which is
required for passwd, so there's no way (even with a completely minimal
install) to run w/o a python carcass laying around w/o screwing things
up a bit one way or another

i really do need some kind of direction for how to tackle this problem
though



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 4:16 AM
To: mod_python@modpython.org
Subject: [mod_python] need working fix for 'import site' aka
'ImportError' aka'make_obcallback' error



i've spent hours trying to tweak perms and paths and add debugging to
glean any kind of adequate fix

i never had this problem with mod_python before... maybe it is a problem
with the 'worker' setup, i dunno

these are the three repeated errors:

-----
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
mod_python.apache.
-----

PythonEnablePdb doesn't work because it doesn't make it that far

i've done a million different things with the /usr/lib /usr/local/lib
difference including copying across, adding .pth files all over the
place, adding PYTHONHOME and PYTHONPATH into apachectl etc, nothing is
working

it gives the error 5 times on 'apachectl stop' in the log file so I'm
assuming it's a per process problem maybe related to the 'worker' setup,
but that's the whole point of apache2 so I am at a loss as to how to
proceed

i've been using mod_python since winter of 1998 off and on

please help thanks


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From tpc at csua.berkeley.edu  Mon Jun  9 14:37:28 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka
 'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609143523.T12439-100000@localhost.name>


> -----
> 'import site' failed; use -v for traceback
> ImportError: No module named mod_python.apache
> [Sun Jun 08 00:06:50 2003] [error] make_obcallback: could not import
> mod_python.apache.
> -----
>


I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke in
the first place.

From fitnah55 at hotmail.com  Mon Jun  9 18:26:40 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609143523.T12439-100000@localhost.name>
Message-ID: <000001c32ed6$3279d4b0$18c0c20a@computer>


nothing works!!!

tried reinstalling a couple different ways, no dice



-----Original Message-----
From: tpc@csua.berkeley.edu [mailto:tpc@csua.berkeley.edu] 
Sent: Monday, June 09, 2003 5:37 PM
To: kevin douglas
Cc: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error

I had that exact same problem, although I did not spend as much time
trying to fix it as you apparently have.  I ended up just reinstalling
mod_python.  It works fine now, though I don't understand why it broke
in the first place.

From grisha at modpython.org  Mon Jun  9 18:58:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] python print
In-Reply-To: <200306091351.06895.jgardner@jonathangardner.net>
Message-ID: <20030609185646.S97880-100000@oldchief.reply.net>



On Mon, 9 Jun 2003, Jonathan Gardner wrote:

> If you get tired of print >> req, give this a try:
>
> sys.stdout = req
> print "one"
> print "two"
> print "three"
>

A word of caution - just like chdir(), this is not thread safe since there
is only one stdout per interpreter which could be executing multiple
threads simutaneously.

Grisha

From barr at cs.cornell.edu  Mon Jun  9 19:31:43 2003
From: barr at cs.cornell.edu (Rimon Barr)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] supporting modular mod_python extensions
	vs."folding" mod_psp
In-Reply-To: <1055182496.2853.59.camel@hasele>
Message-ID: <Pine.LNX.4.44.0306091428200.29506-100000@glengoyne.cs.cornell.edu>

Dear Sterling,

>Well, I believe it actually has a few.  But again, I don't see your
>point here?  Is your point that PSP is not the right library to bundle
>or that no libraries in general should be bundled?

Both. I'm not sure that PSP is the right library to bundle (if you must
bundle something) because it needs to be measured against a *LOT* of
existing work which seems to be going ignored. See:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming, or
  http://spyce.sourceforge.net/doc-add_related.html
Even the name PSP has been used at least twice already. Why are none of
these, more mature projects being folded into mod_python instead of
developing something new?

However, for reasons stated in previous emails and others stated below,
I think that it would be even better to not include any library, and
simply make it simple to extend mod_python with application frameworks
or languages, by standardizing the Apache Python infrastructure.

>I'm not attacking you personally, but its convient to paint it that
>way.  Your claim is that you have no spyce agenda, excuse me if I find
>that quite hard to swallow.  Especially since out of the many lists you
>Cc'ed, spyce really has the most to lose.

I'm contributing code to the public domain in good will. I don't have an
agenda, and I'm not sure why that's hard to swallow. I wrote the code
for myself, and I found it useful. So, I released it so that others
could benefit too. It's users that win or lose, not Spyce. Nowadays, I
spend some free time maintaining the project, but I am not backed by any
company or foundation. It's not my work or research. I'm not planning to
write a book. It's just a small hobby of mine, and sometimes it's even a
bit of a headache to maintain the uninteresting parts. I'm happy to
share it with any others who are interested. I imagine that your
intentions in writing mod_psp are similar.

>If you don't want to bring yourself into the argument, then make some
>technical claims against it.  Instead of being the maurder who doesn't
>want mod_python to be defiled.  You still haven't explained why:
>
>a) Including PSP disadvantages other solutions from a *technical*
>   perspective.

- PSP will inevitably become bigger than mod_python and mod_python may
start to look like the PHP project did a few years ago before the focus
on Zend and PEAR finally emerged. - mod_python may start developing
special "fast" hooks to the PSP engine, that will not be properly
exposed and tested against other frameworks. - Release deadlines and bug
fixes will be end up being oriented around mod_psp changes, rather than
around fundamental changes to the framework making the versioning of the
framework more complex, and thereby also integration of other frameworks
that are not as closely bound to it as mod_psp. ... etc.

>b) What is wrong with PSP from a technical perspective?  Have you
>   encountered any bugs when using PSP?  What do you think can be improved?

I don't know where to start... How about here:
  http://www.python.org/cgi-bin/moinmoin/WebProgramming ?
mod_psp is quite a late-comer to this space. Spyce is too, actually.
But mod_psp hasn't even scratched the surface compared to some of the
other projects out there. Or, if you're looking for something "simpler",
then there's lots of simple projects too.

I performed an extensive search before starting out on Spyce, and I
implemented Spyce only because I wanted spyce lambda functions, modules,
and active tags. I think they are useful; you told me that you thought
lambdas were cool too. :) I simply didn't see them anywhere else when I
started working on the project.

>c) What problems you've had with mod_python since PSP was integrated

None, but that's also because I haven't used the newest code. You see,
for me there's no need to upgrade, because there haven't been many
significant changes (from the Spyce interface perspective) to the core
framework. I like it when the infrastructure is efficient and stable:
see (b).

>It doesn't at all take advantage of the mod_python api in anyway than
>any other module does.  PSP is a pure python module, with the parser
>written in C (with flex.)

That's quite interesting. So, by your own admission, you don't really
gain any technical benefit from integration? Ok, then what's the good
reason to integrate, technical or otherwise? Is it just because you can,
being a member of the Apache Foundation and all? If it's merely to
attract users through bundling, then that's an abuse, especially since
there are so many other frameworks out there, that are far more mature
than mod_psp. Don't get me wrong... Please do continue developing
mod_psp, or join one of the other efforts. The issue is not that. It's
the folding of the projects.

Why not sideline this entire issue and be inclusive by creating a nice
standard extension mechanism, a repository of mod_python compatible
modules, a prominent placement on the Apache website, etc.? A modular
design, after all, is the design of Apache, and it has been pretty
successful, I think. Have the Apache and the PHP code bases been
"folded" yet? Why not? PHP is the most popular language used within
Apache! The argument here is similar, I believe.

I know that the AF is trying to move away from language specific
extensions, but it would be nice also to have a website for mod_python
that looked like Jakarta, or mod_tcl, or mod_perl. It would help a lot
to attract users, if that is your interest. BTW, the mod_tcl guys
decided to separate mod_tcl from Rivet. mod_perl went one step further
and created a repository of mod_perl compatible modules and also a
section with code library contributed by the user community.

>I'm a PHP core developer for god sakes :) [...]

I sincerely respect your experience as a core mod_php developer and
congratulate you. PHP is a wonderful project and a run-away success. I
hope that your input to the Python web community will be equally
dramatic.

All the best,
Rimon.


From mod_python at mikebell.org  Mon Jun  9 16:54:24 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <20030609235423.GI20628@netvista.mikebell.org>

On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?

Yup, works just fine for me, never had such a problem, with worker or
prefork.
From gnb at itga.com.au  Tue Jun 10 11:10:23 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error 
In-Reply-To: Your message of Mon, 09 Jun 2003 17:30:45 -0400.
Message-ID: <200306100110.LAA01683@lightning.itga.com.au>

>does anyone who actually has apache2/mod_python3 working even read this
>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:15:37 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <200306100110.LAA01683@lightning.itga.com.au>
Message-ID: <000001c32ef6$2e8beb20$18c0c20a@computer>

I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


From fitnah55 at hotmail.com  Mon Jun  9 22:32:21 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site'
	aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef6$2e8beb20$18c0c20a@computer>
Message-ID: <000001c32ef8$84cb50f0$18c0c20a@computer>

when I do an strace on httpd like it says with that no obCallBack error
in
the faq (a different problem than i am having anyway), there's not even
a
reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:04:43 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import
	site'aka'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ef8$84cb50f0$18c0c20a@computer>
Message-ID: <000001c32efd$0a4ce140$18c0c20a@computer>


if I do an 'apachectl restart' several times, the amount of 'import
site'
errors grows accordingly :p

four restarts and its 7 times... five restarts and its 8 times... six
restarts
and its 9 times:

[Sun Jun 08 19:00:52 2003] [error] make_obcallback: could not import
mod_python.apache.

-----

'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
'import site' failed; use -v for traceback
ImportError: No module named mod_python.apache
[Sun Jun 08 19:00:52 2003] [notice] SIGHUP received.  Attempting to
restart
[Sun Jun 08 19:00:53 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming normal operations

-----

to make matters worse, it worked once for no reason - and mod_python
just
displayed the 'test' handler as plaintext:

[Sun Jun 08 18:56:32 2003] [notice] Apache/2.0.46 (Unix)
mod_python/3.0.3 Python/2.2.2 configured -- resuming 
normal operations
[Sun Jun 08 18:56:50 2003] [notice] mod_python: (Re)importing module
'test'

now i can't get it to work again and nothing changed between the three
or
four start/restarts..



-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:32 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import
site'aka'ImportError'aka'make_obcallback' error


when I do an strace on httpd like it says with that no obCallBack error
in the faq (a different problem than i am having anyway), there's not
even a reference to it trying to find the mod_python python libs

i can only get it to show the errors when its shutting down too


-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of kevin douglas
Sent: Monday, June 09, 2003 10:16 PM
To: mod_python@modpython.org
Subject: RE: [mod_python] need working fix for 'import site'
aka'ImportError'aka'make_obcallback' error


I read the FAQ, I was about to post to the FAQ too but it seemed
pointless


-----Original Message-----
From: gnb@itga.com.au [mailto:gnb@itga.com.au] 
Sent: Monday, June 09, 2003 9:10 PM
To: fitnah55@hotmail.com
Cc: mod_python@modpython.org
Subject: Re: [mod_python] need working fix for 'import site' aka
'ImportError'aka'make_obcallback' error 


>does anyone who actually has apache2/mod_python3 working even read this

>list?

Does anyone who posts to this list read the FAQ?


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From fitnah55 at hotmail.com  Mon Jun  9 23:38:36 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] 
	working fix [FAQ: 'import site' failed; use -v for traceback]
In-Reply-To: <000001c32efd$0a4ce140$18c0c20a@computer>
Message-ID: <000501c32f01$c6600480$18c0c20a@computer>


as stated in the make_obcallback FAQ entry, this is a sys.path
problem...

the main problem (i believe) is that the path that is available at
runtime is not always the same as it was with the previous run of
apache

with a linux distro that requires python as part of the base install
(even
with a minimal install) - the python in /usr is going to supercede
the python in /usr/local even if the path properly includes /usr/lib
and site-packages/mod_python is pointed to properly

what you should do is axe all the python rpm's that you can
(python-base is required for libuser which is required for passwd)
and then take the file list from python-base and manually delete it
(/usr/lib/python2.2 and /usr/bin/python)

this will free up the proper /usr/local/lib/python2.2 to be first in
line in the path

what's confusing is that you link to /usr/local/bin/python2.2 explicitly
to compile mod_python, but it still ends up with /usr/lib/python2.2
as the primary lib source... and even if you get the paths added as the
other FAQ entry states - you're still going to be running the old
site.py from /usr/lib...

and to make matters even worse sometimes it randomly decides to work
even before you axe the default distro install..

:o



kd
From jafo at tummy.com  Mon Jun  9 23:59:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <20030610055927.GB28085@tummy.com>

I've been trying to build a web application system using mod_python, and
I've been running into some weirdness.  Some of it is just sporadic
behavior, some of it seems to be pretty consistent.  Before I get
started, my main development system is running Red Hat 9 with Python
2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
3.0.3.

Basically, I'm building up a package that contains my system.  In it I
have a module which contains my handler:

   AddHandler python-program .html
   PythonHandler jotweb.jotweb_mod_python::handler

Basically, my handler is using SimpleTAL to parse some HTML, which will
result in my code getting called, which will import things from the
jotweb package:

   fileName = path + '.py'
   fp = open(fileName, 'r')
   module = imp.load_source(path, fileName, fp)

So, basically, I am trying to load a module from a specific file.

The first problem I'm seeing is that imports are just weird.  For
example, if I have code which does "import jotweb.input.Request",
unless my __init__.py in jotweb/input includes:

   import Request

I will get an error to the effect that the module object contains no
element "Request".  Of course, from a regular Python program, I can do
"import jotweb.input.Request" just fine either way.

Basically, because of the above, my entire code-base has to be imported
when you do an "import jotweb".

Further, I'm running into weird issues with headers_out.  If from my
jotweb_mod_python.handler code I do:

   req.headers_out.add('key', 'value')

it will properly add the specified header.  And if this code is executed
from the module that is imported as above, it seems to work.  If,
however, in this imported module I do:

   import jotweb
   jotweb.auth.Sessions.processLogin()

where "processLogin()" gets a handle to the request object and does
req.headers_out.add(), the headers aren't showing up in my browser.
HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
same URL that I issued in the GET request, the headers are *NOT* getting
return as far as I can tell (no cookie is getting set, doing "View
Documenat Information" shows not those headers, but if I set headers in
my main mod_python handler, it WILL show it.

I've verified that the call to headers_out.add() is happening by adding
a syslog before it, it's definitely calling that code.

It seems like at some point something is making it so that
headers_out.add() doesn't work any more.  Would pulling the form data
out of the request cause that?  Any thoughts on why the imports seem to
work quite differently on a name-space basis from how they happen from
the interpreter:

   AttributeError: 'module' object has no attribute 'input'

Is there something about being in mod_python that makes it a "toy"
interpreter in some ways, that mean I'm constantly going to be bumping
into weird things?

Thoughts?

Thanks,
Sean
-- 
 I like to be different, so I built a lowercase a-frame house.
                 -- Sean Reifschneider, 2000
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 09:04:12 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <20030609235423.GI20628@netvista.mikebell.org>
References: <000001c32eb7$380f1030$18c0c20a@computer>
	<000001c32ece$6341c060$18c0c20a@computer>
	<20030609235423.GI20628@netvista.mikebell.org>
Message-ID: <3EE582EC.3070901@sjsoft.com>

mod_python@mikebell.org wrote:

>On Mon, Jun 09, 2003 at 05:30:45PM -0400, kevin douglas wrote:
>  
>
>>does anyone who actually has apache2/mod_python3 working even read this
>>list?
>>    
>>
>
>Yup, works just fine for me, never had such a problem, with worker or
>prefork.
>  
>
Works fine for me too.
When I had problems with import site in apache1.3/mod_python2, what I 
did was go and patch the mod_python source code to dump traces of 
variables at various points ... that helped me clean up exactly how it 
worked... to start off, I hardcoded a PythonPath inside mod_python 
because I couldn't work out why it didn't seem to work. Maybe you could 
try a similar approach?

David

From davidf at sjsoft.com  Tue Jun 10 09:12:46 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610055927.GB28085@tummy.com>
References: <20030610055927.GB28085@tummy.com>
Message-ID: <3EE584EE.9090503@sjsoft.com>

Sean Reifschneider wrote:

>I've been trying to build a web application system using mod_python, and
>I've been running into some weirdness.  Some of it is just sporadic
>behavior, some of it seems to be pretty consistent.  Before I get
>started, my main development system is running Red Hat 9 with Python
>2.2.2 and I've been trying mod_python 3.0.1 (shipped with RH9) and
>3.0.3.
>
>Basically, I'm building up a package that contains my system.  In it I
>have a module which contains my handler:
>
>   AddHandler python-program .html
>   PythonHandler jotweb.jotweb_mod_python::handler
>
>Basically, my handler is using SimpleTAL to parse some HTML, which will
>result in my code getting called, which will import things from the
>jotweb package:
>
>   fileName = path + '.py'
>   fp = open(fileName, 'r')
>   module = imp.load_source(path, fileName, fp)
>
>So, basically, I am trying to load a module from a specific file.
>  
>
Do you mean you're using this import mechanism when you have the problem 
with jotweb.input.Request below?

>The first problem I'm seeing is that imports are just weird.  For
>example, if I have code which does "import jotweb.input.Request",
>unless my __init__.py in jotweb/input includes:
>
>   import Request
>
Have you tried using __all__ = [Request, ...] in __init__.py ?

>I will get an error to the effect that the module object contains no
>element "Request".  Of course, from a regular Python program, I can do
>"import jotweb.input.Request" just fine either way.
>
>Basically, because of the above, my entire code-base has to be imported
>when you do an "import jotweb".
>
mod_python does have some import hooks to handle things specially, but 
I'm not an expect here, someone else will have to comment...

>Further, I'm running into weird issues with headers_out.  If from my
>jotweb_mod_python.handler code I do:
>
>   req.headers_out.add('key', 'value')
>
>it will properly add the specified header.  And if this code is executed
>from the module that is imported as above, it seems to work.  If,
>however, in this imported module I do:
>
>   import jotweb
>   jotweb.auth.Sessions.processLogin()
>
>where "processLogin()" gets a handle to the request object and does
>req.headers_out.add(), the headers aren't showing up in my browser.
>HOWEVER, if I telnet to port 80 and issue a GET request to exactly the
>same URL that I issued in the GET request, the headers are *NOT* getting
>return as far as I can tell (no cookie is getting set, doing "View
>Documenat Information" shows not those headers, but if I set headers in
>my main mod_python handler, it WILL show it.
>
>I've verified that the call to headers_out.add() is happening by adding
>a syslog before it, it's definitely calling that code.
>
How do you pass the request object into processLogin (it doesn't seem to 
be part of the call)?
It seems like you may be trying to use an old request object or something...

>It seems like at some point something is making it so that
>headers_out.add() doesn't work any more.  Would pulling the form data
>out of the request cause that?  Any thoughts on why the imports seem to
>work quite differently on a name-space basis from how they happen from
>the interpreter:
>
Pulling the form data won't cause it, but writing anything to the 
request will (it automatically outputs the headers as soon as any 
content is written).

>
>   AttributeError: 'module' object has no attribute 'input'
>
>Is there something about being in mod_python that makes it a "toy"
>interpreter in some ways, that mean I'm constantly going to be bumping
>into weird things?
>
No. But it is a bit more complex running a python interpreter inside 
Apache than standalone.

>Thoughts?
>
Hope that helps,

David


From jafo at tummy.com  Tue Jun 10 02:14:22 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:03:57 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE584EE.9090503@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
Message-ID: <20030610081422.GC28085@tummy.com>

On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>Do you mean you're using this import mechanism when you have the problem 
>with jotweb.input.Request below?

I mean that the imp module call is loading a module which then does an
"import jotweb.input".  If in the jotweb I don't have the __init__.py
import all sub-packages or sub-modules, I will get an AttributeError
such as:

  AttributeError: 'module' object has no attribute 'input'

>>  import Request
>Have you tried using __all__ = [Request, ...] in __init__.py ?

I believe I did try that at one point, but it's my understanding that
setting "__all__" only has an impact if you do "from jotweb import *",
which I don't do anywhere.  Also, as I said before, I can import the
code fine outside of mod_python.  "python -c 'import jotweb.input'", for
example...

>mod_python does have some import hooks to handle things specially, but 
>I'm not an expect here, someone else will have to comment...

I wonder if I'm running into something there.  I've tried simplifying it
to:

   include current directory in path
   module = __import__(basename, globals(), locals(), [])
   return sys.path to old layout

that doesn't really seem to help the problem with imports though...

>How do you pass the request object into processLogin (it doesn't seem to 
>be part of the call)?
>It seems like you may be trying to use an old request object or something...

The request object is stored into a module, where other parts of my
system will pick it up when they need either the headers or the request.

I've verified that the id() of the header_out object is the same in the
higher-level and lower-level code.  I'm not calling request.write()
anywhere except at the end of my top-level code, nor am I doing a print
anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
to access the Apache request object, but maybe it's doing a print?

>No. But it is a bit more complex running a python interpreter inside 
>Apache than standalone.

Sure, I understand that, and I'm ok with it being more complicated.  I'm
just not happy about running into sporadic problems where sometimes
things work, sometimes they don't.

For example, *ANY* time I submit a request for a URL via a telnet
connection, I get the headers back:

   guin:jafo$ telnet 127.0.0.1 80
   Trying 127.0.0.1...
   Connected to 127.0.0.1.
   Escape character is '^]'.
   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0

   HTTP/1.0 200 OK
   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
   Cache-control: max-age=0
   Expires: Thu, 01 Dec 1994 16:00:00 GMT
   Content-Length: 405
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

   [...]

If I paste the URL:

   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1

into Konqueror, the headers I'm getting back are:

   Date: Tue, 10 Jun 2003 08:10:44 GMT
   Server: Apache/2.0.40 (Red Hat Linux)
   Connection: close
   Content-Type: text/html; charset=ISO-8859-1

(according to Konqueror).  I've tried Mozilla and galeon as well, all
with similar results.  Yes, I have cookies enabled from localhost.  If I
put the headers_out.add() at the top of my handler, it showes up in
Konqueror's "View Page Info" output...

Sean
-- 
 Do you think reading about cowboys is sufficient to ride a horse?
 Like horses, real programs tend to throw you.  -- John Shipman, 1997
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From davidf at sjsoft.com  Tue Jun 10 12:46:41 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <20030610081422.GC28085@tummy.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com>
Message-ID: <3EE5B711.5080408@sjsoft.com>

Sean Reifschneider wrote:

>On Tue, Jun 10, 2003 at 09:12:46AM +0200, David Fraser wrote:
>  
>
>>Do you mean you're using this import mechanism when you have the problem 
>>with jotweb.input.Request below?
>>    
>>
>I mean that the imp module call is loading a module which then does an
>"import jotweb.input".  If in the jotweb I don't have the __init__.py
>import all sub-packages or sub-modules, I will get an AttributeError
>such as:
>
>  AttributeError: 'module' object has no attribute 'input'
>  
>
>>> import Request
>>>      
>>>
>>Have you tried using __all__ = [Request, ...] in __init__.py ?
>>    
>>
>I believe I did try that at one point, but it's my understanding that
>setting "__all__" only has an impact if you do "from jotweb import *",
>which I don't do anywhere.  Also, as I said before, I can import the
>code fine outside of mod_python.  "python -c 'import jotweb.input'", for
>example...
>  
>
>>mod_python does have some import hooks to handle things specially, but 
>>I'm not an expect here, someone else will have to comment...
>>    
>>
>I wonder if I'm running into something there.  I've tried simplifying it
>to:
>
>   include current directory in path
>   module = __import__(basename, globals(), locals(), [])
>   return sys.path to old layout
>
>that doesn't really seem to help the problem with imports though...
>  
>
Hmmm ... sorry, no further ideas here...

>>How do you pass the request object into processLogin (it doesn't seem to 
>>be part of the call)?
>>It seems like you may be trying to use an old request object or something...
>>    
>>
>
>The request object is stored into a module, where other parts of my
>system will pick it up when they need either the headers or the request.
>  
>
Might need to be careful of thread safety etc here...

>I've verified that the id() of the header_out object is the same in the
>higher-level and lower-level code.  I'm not calling request.write()
>anywhere except at the end of my top-level code, nor am I doing a print
>anywhere.  I guess it might be a problem with SimpleTAL?  It's not going
>to access the Apache request object, but maybe it's doing a print?
>
I don't know much about SimpleTAL, but from what you've described, 
that's where you need to investigate ...
Try wrapping the req object in another one which logs any calls to 
req.write and then pass that through to SimpleTAL?

>>No. But it is a bit more complex running a python interpreter inside 
>>Apache than standalone.
>>    
>>
>
>Sure, I understand that, and I'm ok with it being more complicated.  I'm
>just not happy about running into sporadic problems where sometimes
>things work, sometimes they don't.
>
>For example, *ANY* time I submit a request for a URL via a telnet
>connection, I get the headers back:
>
>   guin:jafo$ telnet 127.0.0.1 80
>   Trying 127.0.0.1...
>   Connected to 127.0.0.1.
>   Escape character is '^]'.
>   GET http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1 HTTP/1.0
>
>   HTTP/1.0 200 OK
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Set-cookie: sessionid=20d315c26c8c395e61730ceb27d0faa98fd; Comment="User Login Cookie"; Path=/; Version=1;
>   Cache-control: max-age=0
>   Expires: Thu, 01 Dec 1994 16:00:00 GMT
>   Content-Length: 405
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>   [...]
>
>If I paste the URL:
>
>   http://127.0.0.1/jotweb/sessionex.html?Username=jafo&Password=abc123&loginbutton=1
>
>into Konqueror, the headers I'm getting back are:
>
>   Date: Tue, 10 Jun 2003 08:10:44 GMT
>   Server: Apache/2.0.40 (Red Hat Linux)
>   Connection: close
>   Content-Type: text/html; charset=ISO-8859-1
>
>(according to Konqueror).  I've tried Mozilla and galeon as well, all
>with similar results.  Yes, I have cookies enabled from localhost.  If I
>put the headers_out.add() at the top of my handler, it showes up in
>Konqueror's "View Page Info" output...
>
Yikes ... bizarre ... no ideas other than setting up something that 
watches the actual socket through which the message goes, to see what 
the difference is

Hope somebody else can help...
David

From jafo at tummy.com  Tue Jun 10 04:58:26 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <3EE5B711.5080408@sjsoft.com>
References: <20030610055927.GB28085@tummy.com> <3EE584EE.9090503@sjsoft.com>
	<20030610081422.GC28085@tummy.com> <3EE5B711.5080408@sjsoft.com>
Message-ID: <20030610105826.GD28085@tummy.com>

On Tue, Jun 10, 2003 at 12:46:41PM +0200, David Fraser wrote:
>I don't know much about SimpleTAL, but from what you've described, 
>that's where you need to investigate ...

Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
it to be.  It'd be nice if in debug mode mod_python would throw an
exception or something if you tried adding headers after there had been
a write.

I'm still looking for information on the weird importing issues
though...  One other thing on that front is that to even get started I
found that at the top-level of my main mod_python handler, I had to add:

   from encodings import latin_1
   from encodings import iso8859_1

or I just couldn't use the SimpleTAL code in my handler -- it would fail
related to encodings.  They can't be imported at other times, they
already have to be there.  This seems to be similar in nature to the
weird ness I'm seeing importing my own modules, but I can't find any
mod_python documentation about how import is weird or broken under
mod_python.

Thanks,
Sean
-- 
 Well son, a funny thing about regret is that it's better to regret something
 you HAVE done than regret something you haven't done.
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mike.looijmans at asml.com  Tue Jun 10 13:23:43 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
Message-ID: <01c32f42$bfe04980$926a1e6e@wsasd464>

>Ugh, yeah, it was happening in the SimpleTAL code where I didn't expect
>it to be.  It'd be nice if in debug mode mod_python would throw an
>exception or something if you tried adding headers after there had been
>a write.


You could do this at runtime without having to patch the mod_python code, in
the handler just do:

def handler(req):
    req.write = mywrite
    req.header_out = myheaderout(req)

def mywrite(self, data):
    self.write(data)
    self.headers_sent = 1

class myheaderout():
    ... # init stuff
    def __init__(self, req):
        self.req = req
        self.__get__ = req.header_out.__get__
        # etc. etc.
    def __set__(self, key, value):
        if self.req.headers_sent:
            raise EHeadersSent
        req.header_out[key] = value






-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From jgardner at jonathangardner.net  Tue Jun 10 06:35:43 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <20030609121231.L11532-100000@localhost.name>
References: <20030609121231.L11532-100000@localhost.name>
Message-ID: <200306100635.47755.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> Dear Mr. Russell, thank you I forgot about '+=', which did the trick.

One more thing I thought you might want to know about. There are really two 
ways to go about concatenating stuff to the end of strings:

A)
	s = "something"
	s += "something more"
	...
	print s

B)
	s = []
	s.append('something')
	s.appent('something more')
	...
	print "".join(s)

B is far more efficient than A. This really shows up when you are 
concatenating hundreds or more elements. Anything below that, it really 
doesn't make too much of a difference.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
oDZOcz6mtB1hiavXnelVodo=
=oy+6
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 09:49:23 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
Message-ID: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>

I'll give a second on ezt.py; even though Albatross is my first choice.
Ezt.py follows many of the same ideals of Albatross when it comes to
templates, and also is not geared only for the web like albatross so it
can be handly in other apps too.

I use edna and ViewCVS daily and found no trouble customizing both with
the ezt.py module.

(which btw, both are great pojects!)

From scott at towngeek.com  Tue Jun 10 10:49:54 2003
From: scott at towngeek.com (Scott Russell)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <200306100635.47755.jgardner@jonathangardner.net>
References: <20030609121231.L11532-100000@localhost.name>
	 <200306100635.47755.jgardner@jonathangardner.net>
Message-ID: <1055256594.1995.15.camel@localhost>

Momma always says, "Make sure you can read it first, only optimize it
after you profile." :)

On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Monday 09 June 2003 12:25, tpc@csua.berkeley.edu wrote:
> > Dear Mr. Russell, thank you I forgot about '+=', which did the trick.
> 
> One more thing I thought you might want to know about. There are really two 
> ways to go about concatenating stuff to the end of strings:
> 
> A)
> 	s = "something"
> 	s += "something more"
> 	...
> 	print s
> 
> B)
> 	s = []
> 	s.append('something')
> 	s.appent('something more')
> 	...
> 	print "".join(s)
> 
> B is far more efficient than A. This really shows up when you are 
> concatenating hundreds or more elements. Anything below that, it really 
> doesn't make too much of a difference.
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE+5d6yWgwF3QvpWNwRAuYwAKDA3RK44t5na033XipkR2OrUuYy7gCgsqBj
> oDZOcz6mtB1hiavXnelVodo=
> =oy+6
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mmckerns at its.caltech.edu  Tue Jun 10 08:53:41 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] importing errno
Message-ID: <Pine.GSO.4.44.0306100849110.18061-100000@clyde>

The following is a problem with the RedHat8 rpm's, but
also may apply to the source.  I thought I'd kick it out
to see if somebody has gone through this already, or if
the new source takes care of this...
-------------------------------------

In python2.1, "import errno" looked for
/usr/lib/python2.1/lib-dynload/errno.so

In python2.2, errno.so was moved to a built-in module.

Using the most current rpm builds from RHN for RedHat8
(python-2.2.2-7, mod_python-3.0.0-10, httpd-2.0.40-11.5),
the following causes an error because apache (?) looks to the
old location of errno.so when browser pointed to pyweb.py URL.

I'm assuming that RedHat is just a little behind, but I could be wrong.
I guess I will try to build from source from the latest
versions on the mod_python website to see if this bug
has been fixed, and if it is just a redhat rpm bug...



EXAMPLE:
---------------------------------------------
#! /usr/bin/env python
############################################################
# pyweb.py              06/09/03        mmckerns@caltech.edu
# testing python web handler
############################################################

# the next line causes the error...
import errno

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK

---------------------------------------------



FROM httpd.conf:
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------




ERROR FROM error_log:
----------------------------------------------
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: Traceback (most
recent c
all last):
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 274, in HandlerDispatch!
module
= import_module(module_name, _req)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/usr/lib/python2
.2/site-packages/mod_python/apache.py", line 429, in import_module!
module =
imp.load_module(mname, f, p, d)
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb:   File
"/home/mmckerns/p
ublic_html/pyweb.py", line 5, in ?!    import errno
[Mon Jun 09 14:13:34 2003] [error] PythonHandler pyweb: ImportError: No
module n
amed errno
----------------------------------------------




---

Mike McKerns
mmckerns@caltech.edu





From thm at duke.edu  Tue Jun 10 11:53:33 2003
From: thm at duke.edu (Hunter Matthews)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] supporting modular mod_python extensions vs.
	"folding" mod_psp
In-Reply-To: <20030606174027.J48945-100000@oldchief.reply.net>
References: <20030606174027.J48945-100000@oldchief.reply.net>
Message-ID: <1055260413.2007.11.camel@jade.biology.duke.edu>

On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
> On Fri, 6 Jun 2003, Michael C. Neel wrote:
> 
> > I'll take a moment in this thread to plug Albatross
> > (http://www.object-craft.com.au/projects/albatross/) as the "killer"
> > template system for python, or at least a strong contender.
> 
> The problem with Albatross for me is the same one with all the others - it
> is yet another language to learn:
> 
> <al-for iter="name" expr="keys">
>     <tr>
>          <td><al-value expr="name.value()"></td>
>          <td><al-value expr="environ[name.value()]"></td>
>     <tr>
> </al-for>
> 
> This is not Python. Nor is it HTML.

I recently discovered PyMeld.py, which fixes this problem. There is also
"simpleTAL"

I prefer PyMeld really, except for the license.

> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Hunter Matthews                          Unix / Network Administrator
Office: BioScience 145/244               Duke Univ. Biology Department
Key: F0F88438 / FFB5 34C0 B350 99A4 BB02  9779 A5DB 8B09 F0F8 8438
Never take candy from strangers. Especially on the internet.

From gstein at lyra.org  Tue Jun 10 12:30:55 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] 
	templating (was: supporting modular mod_python extensions vs.
	"folding" mod_psp)
In-Reply-To: <1055260413.2007.11.camel@jade.biology.duke.edu>
References: <20030606174027.J48945-100000@oldchief.reply.net>
	<1055260413.2007.11.camel@jade.biology.duke.edu>
Message-ID: <20030610193055.GC25150@lyra.org>

On Tue, Jun 10, 2003 at 11:53:33AM -0400, Hunter Matthews wrote:
> On Fri, 2003-06-06 at 17:52, Gregory (Grisha) Trubetskoy wrote:
>...
> > The problem with Albatross for me is the same one with all the others - it
> > is yet another language to learn:
> > 
> > <al-for iter="name" expr="keys">
> >     <tr>
> >          <td><al-value expr="name.value()"></td>
> >          <td><al-value expr="environ[name.value()]"></td>
> >     <tr>
> > </al-for>
> > 
> > This is not Python. Nor is it HTML.
> 
> I recently discovered PyMeld.py, which fixes this problem. There is also
> "simpleTAL"

Hunh. Just looked at this. It is a *very* neat approach (gonna have to keep
it in mind; the approach might be very useful in some contexts). But I
disagree that it "separates logic from HTML". As a specific counterexample,
take my edna mp3 streamer. For each song found in the "current" directory,
it extracts a whole bunch of ID3 tag information and makes that available to
the template. The default HTML template does not display that. But if you
switch over to the XML template, then it *is* present. (at one point, there
was a GUI that read the XML pages, so it wanted richer info)

With PyMeld, the logic must insert all the data somewhere in the page
(either as element contents or as an attribute). I don't see how you can
avoid putting _all_ the data into a PyMeld template. Thus, the logic is
intrinsically tied to the template.

IMO, there is never any true separation. Even with EZT, the logic must
provide "all" potential data, and let the template pull in what it needs.
(of course, there are things you can do to avoid pregenerating all data, but
semantically, the logic and template are still tied)

There will always be tying between the template and the logic because of the
data. If you say, "well, let the template define/generate the data it
needs", then you've just moved logic/processing into the template :-) Since
you can't get away from it, I built ezt with the view of "figure out the
relevant data, and then use *that* to render it." IOW, I took more of a
"render only" approach rather than some lofty, but unreachable, goal of
separation of logic.

> I prefer PyMeld really, except for the license.

EZT is under a BSD license, fwiw.

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Tue Jun 10 12:27:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <1055256594.1995.15.camel@localhost>
References: <20030609121231.L11532-100000@localhost.name>
	<200306100635.47755.jgardner@jonathangardner.net>
	<1055256594.1995.15.camel@localhost>
Message-ID: <200306101227.08600.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > B)
> > 	s = []
> > 	s.append('something')
> > 	s.appent('something more')
> > 	...
> > 	print "".join(s)
> >
> > B is far more efficient than A. This really shows up when you are
> > concatenating hundreds or more elements. Anything below that, it really
> > doesn't make too much of a difference.
> >
>
> Momma always says, "Make sure you can read it first, only optimize it
> after you profile." :)
>

You're right. This particular algorithm has been tested and profiled. I gave 
you the numbers I have found when I have done profiling. That is why I use 
this almost everywhere I have to concatenate multiple strings together. While 
it is true you shouldn't spend too much time optimizing on your first 
iteration of writing your code, it is silly to use methods you know are 
inefficient when comparable methods that are efficient exist and are 
well-tested. It just makes more work for the second and beyond iterations.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
p82lLQ5P+TDytSP2zHDkZHE=
=gHW1
-----END PGP SIGNATURE-----

From neel at mediapulse.com  Tue Jun 10 17:23:30 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] templating (was: supporting modular mod_python
	extensions vs."folding" mod_psp)
Message-ID: <C0FC22C08B82074A88B50061764157775C74@johnson.mediapulse.net>

     > > > <al-for iter="name" expr="keys">
     > > >     <tr>
     > > >          <td><al-value expr="name.value()"></td>
     > > >          <td><al-value expr="environ[name.value()]"></td>
     > > >     <tr>
     > > > </al-for>

I think this snippet doesn't show all of albatross; it acts much closer
to ezt.py than let on here.

In albatross, edna could do something like (warning, python-style sudo
code follows; do not attempt to run this at home):

In edna.py:

class edna_pages:

  def page_process(self, ctx):
    #called to process a page, ctx is the object with the request data
and methods
    if ctx.req_equals("show_dir"):
      #the "Show Directory" button was clicked
      file_list = get_files_in_dir(ctx.locals.directory) #defined
elsewhere, directory come from the broswer
	
      results = [] #list of results, will hold mp3 objects to pass to
template
      for file in file_list:
	  results.append(mp3(file)) # mp3 class defined elsewhere, gets
all the tag/size info

      ctx.locals.results = results # place results in the namespace of
the template

  def page_display(self, ctx):
    # load and run the template
    ctx.run_template('edna.html')

in edny.html:
<html>
<body>
	<table>
		<tr>
			<td>Filename</td>
			<td>Size</td>
			<td>Length</td>
		</tr>
		<al-for expr="results" iter="row">
			<al-exec expr="mp3 = row.value()"> <!-- I do
this for sanity, we could very easily
	
use row.value().field instead -->
			<tr>
				<td><al-value expr="mp3.filename"></td>
				<td><al-value expr="mp3.size"> Kb</td>
				<td><al-value expr="'%0d:%02d' %
(mp3.minutes, mp3.seconds)"></td>
			</tr>
		</al-for>
	</table>
</body>
</html>

That's the basic idea, showing the seperation of logic and display of
Albatross.  There is a lot of cool stuff to Albatross as well, for
example it could easily with a few tags break the results into 30 per
page and provide prev and next buttons, but this give you the general
idea.

Mike


From djc at object-craft.com.au  Wed Jun 11 14:52:01 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
Message-ID: <m3k7btrzbi.fsf@ferret.object-craft.com.au>

>>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:

Michael> I'll give a second on ezt.py; even though Albatross is my
Michael> first choice.  Ezt.py follows many of the same ideals of
Michael> Albatross when it comes to templates, and also is not geared
Michael> only for the web like albatross so it can be handly in other
Michael> apps too.

Just had a look at ezt.py.  It is very similar in structure and
approach to the Albatross templates.  Looking at the CVS logs it seems
like ezt.py and Albatross sprung into existence at almost the same
time.  Bizarre.

- Dave

-- 
http://www.object-craft.com.au

From tbrauch at mindless.com  Wed Jun 11 01:26:19 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Load Error
Message-ID: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>

I am running Apache 2.0.40-11.5 on a Red Hat 8.0 box with Python 2.2.1 and
mod_python 3.0.1.  Apache and Python were installed when I installed Red Hat
and have been updated using up2date.  I installed mod_python using an RPM I
found on http://www.rpmfind.net.  In the docs on the modpython website, I
assumed I could skip all steps up to 2.3.2.  I then added the line

LoadModule python_module libexec/mod_python.so

to my httpd.conf file at the end of all of the other LoadModule commands.
And I added

<Directory /var/www/python>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

To the end of my httpd.conf file.  Then, I did apachectl stop and apachectl
start.  I got errors

[warn] module python_module is already loaded, skipping

both on the stop and start.  Okay, I thought, it was already loaded (but I
didn't see anything in my httpd.conf file for it), and it's not loading it
again, there shouldn't be any problems.  So, I removed the LoadModule line
from the httpd.conf file and all is right in the world.  My question, how is
this module being loaded?  Some sort of magic I suspect.

If you answer this question for me, I have one or two more just waiting.
Hopefully they will be just as easy.

From bkesuma at ml.gaijinweb.com  Wed Jun 11 22:27:02 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Load Error
In-Reply-To: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
References: <009001c32fd9$fcfaa800$6600a8c0@tbrauch>
Message-ID: <20030611222702.6af0878c.bkesuma@ml.gaijinweb.com>

Hi Timothy,

On Wed, 11 Jun 2003 01:26:19 -0400
"Timothy M. Brauch" <tbrauch@mindless.com> wrote:

e stop and start.  Okay, I thought, it was already loaded (but
> I didn't see anything in my httpd.conf file for it), and it's not
> loading it again, there shouldn't be any problems.  So, I removed the
> LoadModule line from the httpd.conf file and all is right in the world. 
> My question, how is this module being loaded?  Some sort of magic I
> suspect.

Just a guess, check /etc/httpd/conf.d
See if there is a .conf file over there.

From mark at camazotz.com  Wed Jun 11 12:26:55 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <200306111700.h5BH02BQ002186@slash.mediapulse.com>
Message-ID: <83F0108E-9C29-11D7-89CD-00039364CE50@camazotz.com>

Michael C. Neel" <neel@mediapulse.com> wrote:
 > (warning, python-style sudo code follows;
 > do not attempt to run this at home):

Heh.  Good advice however you spell [p]s[e]udo. :)

From paul.robinson at groupbc.com  Wed Jun 11 17:45:17 2003
From: paul.robinson at groupbc.com (Paul Robinson)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <3EE75C9D.2000900@groupbc.com>

I'm trying to understand Apache and mod_python in order to understand 
how to approach the design of some fairly generic concepts with regard 
to database backed, web front ended applications.
Let me start by saying everything I say assumes Apache 2 and mod_python 
3.0.3 currently.

Apache has a number of modes of operation when it comes to threading and 
forking, I would like to understand how these things interact with 
Python subinterpreters 
[http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and 
issues such as the Python global interpreter lock (GIL) 
[http://www.python.org/doc/current/api/threads.html].

For example, on a Windows platform where there is a single 
multi-threaded Apache process (mpm_wint 
[http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
say that mod_python would not be able to take advantage of a 
multi-processor machine due to the GIL?

In another, given Apache running in the prefork MPM 
[http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
or b) useful to have a global, per-Apache-process persitant data 
strucuture sharing a pool of (threadsafe) database connections. I would 
say not useful since that process will only ever be running a single 
mod_python request at a time - hence more than one item in the pool 
would be useless. Given the "worker MPM" 
[http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
useful but it's not clear to me if it would be possible.

Taking the specific example of database connections (let me note I have 
read and believe I understand FAQ 3.3) is it ever useful or possible to 
share a pool of database connectors, rather than a single connector in 
the global namespace. I assume that code such as that in FAQ 3.3 would 
require additional locking mechanisms in order to function correctly in 
a multi-threaded Apache environment?

I bet there must be some code in existing projects that does stuff like 
this. Any pointers?

Maybe I'm confusing myself at the moment - maybe some other people as 
well ;-)

Thanks in advance,
	Paul

From tpc at csua.berkeley.edu  Wed Jun 11 10:06:11 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <200306101227.08600.jgardner@jonathangardner.net>
Message-ID: <20030611094521.D23467-100000@localhost.name>


curiosity impels me, if list append is most efficient in concatenating to
the end of a string, how would I use it where I previously had string
concatenation ?  I can only print out the values
surrounded by [[''],[''], etc]:

<code>

import sys

dict1 = {
            '0' : 'zero',
            '1' : 'one',
            '2' : 'two',
            '3' : 'three',
            '4' : 'four',
            '5' : 'five',
            '6' : 'six',
            '7' : 'seven',
            '8' : 'eight',
            '9' : 'nine',
            ' ' : '\n',
        }

def convert(numbers):
    w = []
    for argument in numbers:
        w.append([dict1[digit] for digit in argument])
#        w += ''.join([dict1[digit] for digit in argument])
    return w

</code>

On Tue, 10 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Tuesday 10 June 2003 07:49, Scott Russell wrote:
> > On Tue, 2003-06-10 at 09:35, Jonathan Gardner wrote:
> > > B)
> > > 	s = []
> > > 	s.append('something')
> > > 	s.appent('something more')
> > > 	...
> > > 	print "".join(s)
> > >
> > > B is far more efficient than A. This really shows up when you are
> > > concatenating hundreds or more elements. Anything below that, it really
> > > doesn't make too much of a difference.
> > >
> >
> > Momma always says, "Make sure you can read it first, only optimize it
> > after you profile." :)
> >
>
> You're right. This particular algorithm has been tested and profiled. I gave
> you the numbers I have found when I have done profiling. That is why I use
> this almost everywhere I have to concatenate multiple strings together. While
> it is true you shouldn't spend too much time optimizing on your first
> iteration of writing your code, it is silly to use methods you know are
> inefficient when comparable methods that are efficient exist and are
> well-tested. It just makes more work for the second and beyond iterations.
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+5jEKWgwF3QvpWNwRAtoKAKC7By+oNZoYeO6o8XYm3i5phzjXhACfUC+o
> p82lLQ5P+TDytSP2zHDkZHE=
> =gHW1
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jgardner at jonathangardner.net  Wed Jun 11 10:31:03 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <20030611094521.D23467-100000@localhost.name>
References: <20030611094521.D23467-100000@localhost.name>
Message-ID: <200306111031.05502.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> curiosity impels me, if list append is most efficient in concatenating to
> the end of a string, how would I use it where I previously had string
> concatenation ?  I can only print out the values
> surrounded by [[''],[''], etc]:
>

Your curiosity served you well. If you missed this point, the whole thing is 
kinda pointless. ;-)

'join' is the answer. You 'join' the list together into a string after you've 
put the list together.

<snip>
> def convert(numbers):
>     w = []
>     for argument in numbers:
>         w.append([dict1[digit] for digit in argument])
> #        w += ''.join([dict1[digit] for digit in argument])
>     return w
>

Change the line:
	return w
to:
	return "".join(w)

This is a demonstration on how join works:
>>> l = ['A', 'B', 'C', 'D']
>>> " - ".join(l)
'A - B - C - D'
>>> "".join(l)
'ABCD'

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
d8M139orE/YjDJV5optSTn4=
=Mqq5
-----END PGP SIGNATURE-----

From tpc at csua.berkeley.edu  Wed Jun 11 10:48:51 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <200306111031.05502.jgardner@jonathangardner.net>
Message-ID: <20030611104619.E23713-100000@localhost.name>


I tried something like that, and I just tried it with "".join and
both times I got this error:

TypeError: sequence item 0: expected string, list found

On Wed, 11 Jun 2003, Jonathan Gardner wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > curiosity impels me, if list append is most efficient in concatenating to
> > the end of a string, how would I use it where I previously had string
> > concatenation ?  I can only print out the values
> > surrounded by [[''],[''], etc]:
> >
>
> Your curiosity served you well. If you missed this point, the whole thing is
> kinda pointless. ;-)
>
> 'join' is the answer. You 'join' the list together into a string after you've
> put the list together.
>
> <snip>
> > def convert(numbers):
> >     w = []
> >     for argument in numbers:
> >         w.append([dict1[digit] for digit in argument])
> > #        w += ''.join([dict1[digit] for digit in argument])
> >     return w
> >
>
> Change the line:
> 	return w
> to:
> 	return "".join(w)
>
> This is a demonstration on how join works:
> >>> l = ['A', 'B', 'C', 'D']
> >>> " - ".join(l)
> 'A - B - C - D'
> >>> "".join(l)
> 'ABCD'
>
> - --
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
>
> iD8DBQE+52dXWgwF3QvpWNwRAs5UAKDqSYz3YVMjUYe1OMkQNtbcUM1wowCgjJaH
> d8M139orE/YjDJV5optSTn4=
> =Mqq5
> -----END PGP SIGNATURE-----
>

From big.stick at bol.com.br  Wed Jun 11 15:03:12 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <5221067273.20030611150312@bol.com.br>

Em 11/6/2003 ?s 14:48, tpc escreveu:

> I tried something like that, and I just tried it with "".join and
> both times I got this error:
> TypeError: sequence item 0: expected string, list found

This is because you?re trying to concatenate a list of lists, not a
list of strings. Try this instead:

def convert(numbers):
    w = []
    for argument in numbers:
        w.append(dict1[argument])
    return ''.join(w)

-- stick
From jgardner at jonathangardner.net  Wed Jun 11 11:17:54 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] python print
In-Reply-To: <20030611104619.E23713-100000@localhost.name>
References: <20030611104619.E23713-100000@localhost.name>
Message-ID: <200306111117.56203.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 10:48, tpc@csua.berkeley.edu wrote:
> On Wed, 11 Jun 2003, Jonathan Gardner wrote:
> > On Wednesday 11 June 2003 10:06, tpc@csua.berkeley.edu wrote:
> > >
> > > def convert(numbers):
> > >     w = []
> > >     for argument in numbers:
> > >         w.append([dict1[digit] for digit in argument])
> > > #        w += ''.join([dict1[digit] for digit in argument])
> > >     return w
> >
> > Change the line:
> > 	return w
> > to:
> > 	return "".join(w)
> >
>
> I tried something like that, and I just tried it with "".join and
> both times I got this error:
>
> TypeError: sequence item 0: expected string, list found
>

Oops. You'll also want to change:
	w.append([dict1[digit] for digit in argument])
to:
	[w.append(x) for x in [dict1[digit] for digit in argument]]
or:
	w.append(''.join([dict1[digit] for digit in argument]))

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53JSWgwF3QvpWNwRAm2yAJ404BiA7lGl/PU2NNJ5Lt4DSwaMyQCeJeqg
OB7LJEwIS23C9PdLCk+meb4=
=0I1k
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 11 11:34:03 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] tcltkaqua and IDLE
Message-ID: <2147483647.1055331243@[10.0.1.2]>

Hello,

I've installed TclTkAquaBl-8.4.2.0 and i installed IDLE from the 
package manager. When I run it, it launches and quits.
When I open it from the command line it does the same.

When I do:

pythonw 
/Applications/MacPython-2.3/IDLE.app/Contents/Resources/idlelib/idle.py

I get:

RuntimeError: tcl.h version (8.4) doesn't match libtcl.a version (8.4)

If I comment out the test for if tcl_version != _tkinter.TCL_VERSION 
everything works fine.

Is this because I installed 8.4.2 instead of 8.4.1?

(on a tangental note, if I ever don't want these packages any more, 
what can I do?)

Thanks,

~mindlace
http://mindlace.net
From jgardner at jonathangardner.net  Wed Jun 11 11:52:31 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
References: <3EE75C9D.2000900@groupbc.com>
Message-ID: <200306111152.32398.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading and
> forking, I would like to understand how these things interact with
> Python subinterpreters
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] and
> issues such as the Python global interpreter lock (GIL)
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process. There 
is *no* *way* that any process can communicate with each other except through 
shared memory or pipes. I am no expert on the inner workings of mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that at 
all. That is there just to ensure that no thread is caught with its pants 
down. Or, in more technical terms, that the state of the python interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I do know 
that threads are like "lightweight" processes. They can and will be run on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the impression I 
get from the documentation is that this is not so. It sounds like each thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible
> or b) useful to have a global, per-Apache-process persitant data
> strucuture sharing a pool of (threadsafe) database connections. I would
> say not useful since that process will only ever be running a single
> mod_python request at a time - hence more than one item in the pool
> would be useless. Given the "worker MPM"
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I have
> read and believe I understand FAQ 3.3) is it ever useful or possible to
> share a pool of database connectors, rather than a single connector in
> the global namespace. I assume that code such as that in FAQ 3.3 would
> require additional locking mechanisms in order to function correctly in
> a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a request, 
then it can share with the same database connections in that apache thread.

However, I don't think what you really want (independent processes or threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff like
> this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python, and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and 
connect at the beginning of the request. Some databases have more overhead 
than others.

Remember I said that the only way to talk between processes is via shared 
memory or pipes. Shared memory isn't supported well (if at all) in python. 
Pipes are something you already are familiar with -- TCP sockets are pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays your 
commands word for word to the database. When you disconnect, it puts the 
connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a pain in 
the butt to write right, and they are always a nightmare to manage. And you 
always have to have a plan for scaleability, or it will eventually bite you.

> Maybe I'm confusing myself at the moment - maybe some other people as
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

From grisha at modpython.org  Wed Jun 11 15:26:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <3EE75C9D.2000900@groupbc.com>
Message-ID: <20030611152022.X28576-100000@oldchief.reply.net>



On Wed, 11 Jun 2003, Paul Robinson wrote:

> For example, on a Windows platform where there is a single
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to
> say that mod_python would not be able to take advantage of a
> multi-processor machine due to the GIL?

The answer, unfortunately, is yes. Here is a google search that has some
info on the subject: http://www.google.com/search?q=python+free-threading

AFAIK the state of things has not changed with respect to SMP and GIL.

Grisha

From fitnah55 at hotmail.com  Wed Jun 11 15:40:16 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
In-Reply-To: <200306111152.32398.jgardner@jonathangardner.net>
Message-ID: <000001c33051$48583390$18c0c20a@computer>


as far as i understand, apache2 was supposed to fix and/or make possible
the memory pooling issue... i don't think MMDBMS w/ an effective apache
interface is a reality yet, but that's certainly going to be the
intent..

for connection pooling and other stuff you obviously have to design and
write proper multiplexing code to allocate your resources effectively,
but as far as windows goes i wouldn't have a clue and wouldn't want to

I do believe that there is one main interpreter in mod_python and each
thread has sub-interpreters.. Although with the new worker model it
might
be one main interpreter per child and one sub-interpreter per thread..
regardless you can munge it to work all in one interpreter or a couple
other ways with the config options which should allow memory pooling to
some extent

mysql just got $15M in financing though so I don't think a MMDBMS module
from them is going to be free, if it even ever becomes available

python mapping objects are pretty easy to cache though, as long as you
don't
have to manage consistency across disparate processes

just my two cents :p




-----Original Message-----
From: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] On Behalf Of Jonathan Gardner
Sent: Wednesday, June 11, 2003 2:53 PM
To: Paul Robinson; Mod_python@modpython.org
Subject: Re: [mod_python] Apache, Threading and Multi-Processing Modules


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 June 2003 09:45, Paul Robinson wrote:
> Apache has a number of modes of operation when it comes to threading 
> and forking, I would like to understand how these things interact with

> Python subinterpreters 
> [http://www.modpython.org/live/current/doc-html/pyapi-interps.html] 
> and issues such as the Python global interpreter lock (GIL) 
> [http://www.python.org/doc/current/api/threads.html].
>

First off, think of each child process as an entirely seperate process.
There 
is *no* *way* that any process can communicate with each other except
through 
shared memory or pipes. I am no expert on the inner workings of
mod_python, 
but reading the documentation it sounds like each process is entirely 
independent of each other. Each process can have a number of 
"subinterpreters" based on the configuration, but these subinterpreters
are 
isolated from one another as well.

As far as GIL is concerned, you really shouldn't be concerned about that
at 
all. That is there just to ensure that no thread is caught with its
pants 
down. Or, in more technical terms, that the state of the python
interpreter 
and associated data is always consistent when there is no lock.

> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct 
> to say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?
>

I don't know the details of how Windows machines handle threads, but I
do know 
that threads are like "lightweight" processes. They can and will be run
on 
seperate processors on a normal OS.

Whether or not each thread can communicate with each other -- the
impression I 
get from the documentation is that this is not so. It sounds like each
thread 
will have their own main interpreter, and a number of sub-interpreters 
depending on the configuration. This means that there is no way to 
communicate among threads via Python, as the Python main interpreters
are 
seperate.

> In another, given Apache running in the prefork MPM
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible

> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. I 
> would say not useful since that process will only ever be running a 
> single mod_python request at a time - hence more than one item in the 
> pool would be useless. Given the "worker MPM" 
> [http://httpd.apache.org/docs-2.0/mod/worker.html] however it may be 
> useful but it's not clear to me if it would be possible.
>

I don't think this is possible.

> Taking the specific example of database connections (let me note I 
> have read and believe I understand FAQ 3.3) is it ever useful or 
> possible to share a pool of database connectors, rather than a single 
> connector in the global namespace. I assume that code such as that in 
> FAQ 3.3 would require additional locking mechanisms in order to 
> function correctly in a multi-threaded Apache environment?
>

Within a single apache thread and process, yes, you can share database 
connections. If your handler decides to thread while processing a
request, 
then it can share with the same database connections in that apache
thread.

However, I don't think what you really want (independent processes or
threads 
sharing connections) is possible.

> I bet there must be some code in existing projects that does stuff 
> like this. Any pointers?
>

Sorry, I looked into this on my own, both with mod_perl and mod_python,
and 
there is nothing out there that I could see.

The best solution is to keep the connection alive, and reuse it for new 
incoming requests. If the database doesn't like having so many open and 
inactive connections, you can just hangup at the end of the request, and

connect at the beginning of the request. Some databases have more
overhead 
than others.

Remember I said that the only way to talk between processes is via
shared 
memory or pipes. Shared memory isn't supported well (if at all) in
python. 
Pipes are something you already are familiar with -- TCP sockets are
pipes 
between two processes that can be located on different servers.

So another solution that I have thought of but have no reason to
implement is 
a database connection pool server. In this scenario, you would get a 
connection to the database server by connecting to the connection pool 
server. After the initial connection, the connection server just relays
your 
commands word for word to the database. When you disconnect, it puts the

connection back into the pool.

This isn't too far different from a session server, or other kinds of 
meta-servers. The main stink I have with these is that servers are a
pain in 
the butt to write right, and they are always a nightmare to manage. And
you 
always have to have a plan for scaleability, or it will eventually bite
you.

> Maybe I'm confusing myself at the moment - maybe some other people as 
> well ;-)
>

I found your message to be extremely precise in its wording, with plenty
of 
useful references. That was both helpful and refreshing.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+53pvWgwF3QvpWNwRAr5nAKDNvpjSXZ4+0GSWQWh11V2EdbhvjACgyAmP
kvdSO3JZYSfwDGo1XI3JOvY=
=IQH6
-----END PGP SIGNATURE-----

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From jgardner at jonathangardner.net  Mon Jun  9 22:43:28 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] need working fix for 'import site' aka
	'ImportError'aka'make_obcallback' error
In-Reply-To: <000001c32ece$6341c060$18c0c20a@computer>
References: <000001c32ece$6341c060$18c0c20a@computer>
Message-ID: <200306092243.32448.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 09 June 2003 14:30, kevin douglas wrote:
> does anyone who actually has apache2/mod_python3 working even read this
> list?
>

I'm using the RedHat 9 RPMs.They work great.
- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE+5XACWgwF3QvpWNwRAgH+AKDrlLxwrcs/8K1TaOZVrG4OaBCLnwCfV+6B
CD0Qxms2q+aHtCmp8elnX78=
=+FrE
-----END PGP SIGNATURE-----


From bkesuma at ml.gaijinweb.com  Thu Jun 12 12:15:38 2003
From: bkesuma at ml.gaijinweb.com (Batara Kesuma)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Mod_python in real world
Message-ID: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>

Hi,

I am looking for real world experience with mod_python. Anybody wants to
share stories?

From mike.looijmans at asml.com  Thu Jun 12 07:22:51 2003
From: mike.looijmans at asml.com (Mike Looijmans)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Apache, Threading and Multi-Processing Modules
Message-ID: <200306120522.HAA29819@wsasd464.asml.nl>


> For example, on a Windows platform where there is a single 
> multi-threaded Apache process (mpm_wint 
> [http://httpd.apache.org/docs-2.0/mod/mpm_winnt.html]) is it correct to 
> say that mod_python would not be able to take advantage of a 
> multi-processor machine due to the GIL?

I don't know what a "GIL" is, but Windows (NT) and apache are both definitely 
capable of taking advantage of multi-processor machines correctly.

> In another, given Apache running in the prefork MPM 
> [http://httpd.apache.org/docs-2.0/mod/prefork.html]- is it a) possible 
> or b) useful to have a global, per-Apache-process persitant data 
> strucuture sharing a pool of (threadsafe) database connections. 

As you already concluded, there is not shared data among the processes, so 
setting up communication between them is probably not worth considering. Just 
keep a single DB connection per process, something like:

db = None

def connect():
    if not db:
    	db = MySQLdb.connect(...)
    return db

> Taking the specific example of database connections (let me note I have 
> read and believe I understand FAQ 3.3) is it ever useful or possible to 
> share a pool of database connectors, rather than a single connector in 
> the global namespace. I assume that code such as that in FAQ 3.3 would 
> require additional locking mechanisms in order to function correctly in 
> a multi-threaded Apache environment?

It is both useful and possible to do so. Especially when the DBMS is on another 
machine.

Most databases allow only one session per thread, and as such the best thing to 
do is to make sure that a connection is used by only one thread at a time.
 
> I bet there must be some code in existing projects that does stuff like 
> this. Any pointers?


No pointers, but what I have been using here for months now on a "worker" mpm:

- Create a threading.Lock object.
- Create a dictionary (of lists) or list for the db connection pool (I use a 
dictionary because I have 4 databases where my clients want to grab data)

To get a connection, the lock is aquired and the first matching db connection is 
taken and removed from the pool, if possible. The lock is released and the 
connection returned. If the pool was empty, a new db conenction object is 
created and returned.

When a thread finishes handling a request, it returns the connection object back 
to the pool. (obtain lock, put connection into pool, release lock)

This guarantees that no two threads share the same connection, and still creates 
no more connections than neccesary.

--
Mike Looijmans
ASML: http://www5nl.asml.nl/~mlooijma
Private: http://www.milosoftware.com
-- MY text ends here --



-- 
The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. ASML is neither liable for the proper and complete transmission of the information contained in this communication, nor for any delay in its receipt.
-- 


From tbrauch at mindless.com  Thu Jun 12 01:50:36 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 22:03:58 2004
Subject: [mod_python] Directory or Location?
Message-ID: <003201c330a6$8c22c860$6600a8c0@tbrauch>

Okay, I just want to go over a small frustration I just had and spent a few
hours trouble shooting.  In the tutorial,
http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
mptest script you must type:

<Directory /some/directory/htdocs/test>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
</Directory>

in the python.conf file.  However, in the default python.conf file that was
installed with the mod_python 3.0.0-10 rpm, the examples say

# This will cause files beneath /var/www/html with the extension .spam
# to be handled by the Python script /var/www/html/eggs.py
#
#<Directory /var/www/html>
#    AddHandler python-program .spam
#    PythonHandler eggs
#</Directory>
...
# This will cause all requests to the /python heirachy **<--note typo** of
your
# webserver to be handled by mod_python's Publisher handler
# (see http://localhost/manual/mod/mod_python/hand-pub.html)
#
#<Location /python>
#    SetHandler python-program
#    PythonHandler mod_python.publisher
#</Location>


What is the difference between using "Location" and "Directory"?  When do I
use each one?

As I found out, there is a difference and if you use "Location" where you
should use "Directory".  You get a 500 Internal Server Error that I never
quite understood and spent some time trying to fix.  There doesn't seem to
be anything in the documentation I've read to describe the difference

 - Tim

From mod_python at ols.inorganic.org  Wed Jun 11 23:08:30 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <20030612060830.GA18376@nag.inorganic.org>

On Thu, Jun 12, 2003 at 01:50:36AM -0400, Timothy M. Brauch wrote:
> Okay, I just want to go over a small frustration I just had and spent a few
> hours trouble shooting.  In the tutorial,
> http://www.modpython.org/live/current/doc-html/inst-testing.html, to run the
> mptest script you must type:
[...]
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
> 
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference

That's because you haven't read the right documentation :)

Sorry, I don't mean to be flip about this, but in the end, this shows
something of the problem in trying to use something like mod_python
without having a good understanding of the underlying application.
"<Directory>" and "<Location>" directives are Apache directives, and
they're well-documented in the Apache docs.  I don't feel like looking
at the mod_python docs, but either they say that you should look into
the Apache config file format to at least understand it somewhat or ...
well, they should.

-roy
From tbrauch at mindless.com  Thu Jun 12 02:25:34 2003
From: tbrauch at mindless.com (Timothy M. Brauch)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Directory or Location?
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
Message-ID: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>

> > What is the difference between using "Location" and "Directory"?  When
do I
> > use each one?
> >
> > As I found out, there is a difference and if you use "Location" where
you
> > should use "Directory".  You get a 500 Internal Server Error that I
never
> > quite understood and spent some time trying to fix.  There doesn't seem
to
> > be anything in the documentation I've read to describe the difference
>
> That's because you haven't read the right documentation :)
>
> Sorry, I don't mean to be flip about this, but in the end, this shows
> something of the problem in trying to use something like mod_python
> without having a good understanding of the underlying application.
> "<Directory>" and "<Location>" directives are Apache directives, and
> they're well-documented in the Apache docs.  I don't feel like looking
> at the mod_python docs, but either they say that you should look into
> the Apache config file format to at least understand it somewhat or ...
> well, they should.
>
> -roy

That would help explain things a lot.  I've been using Python for quite a
few years now and I am new to Apache, probably opposite of most users.  I
just did a default install of Apache and haven't learned/played with it too
much.  Python, however, I use everyday and can do most anything with it by
now (except using mod_python it would seem).

I didn't see anywhere in the mod_python docs the mention that Directory and
Location are Apache directives.  They are just used.  But, now that I know
it, I've got some reading to do over at apache.org.

Thanks,

 - Tim

From sk at medien.fh-wiesbaden.de  Thu Jun 12 08:26:04 2003
From: sk at medien.fh-wiesbaden.de (Stefan Kanitz)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <200306120826.05057.sk@medien.fh-wiesbaden.de>

Am Donnerstag, 12. Juni 2003 07:50 schrieb Timothy M. Brauch:
> <Directory /some/directory/htdocs/test>
>   AddHandler python-program .py
>   PythonHandler mptest
>   PythonDebug On
> </Directory>
>
> in the python.conf file.  However, in the default python.conf file that was
> installed with the mod_python 3.0.0-10 rpm, the examples say
>

I think, when the mod_python documentation talks about "main server 
configuration file", it means httpd.conf (Apache configuration file) and not 
python.conf.

Steve


> # This will cause files beneath /var/www/html with the extension .spam
> # to be handled by the Python script /var/www/html/eggs.py
> #
> #<Directory /var/www/html>
> #    AddHandler python-program .spam
> #    PythonHandler eggs
> #</Directory>
> ...
> # This will cause all requests to the /python heirachy **<--note typo** of
> your
> # webserver to be handled by mod_python's Publisher handler
> # (see http://localhost/manual/mod/mod_python/hand-pub.html)
> #
> #<Location /python>
> #    SetHandler python-program
> #    PythonHandler mod_python.publisher
> #</Location>
>
>
> What is the difference between using "Location" and "Directory"?  When do I
> use each one?
>
> As I found out, there is a difference and if you use "Location" where you
> should use "Directory".  You get a 500 Internal Server Error that I never
> quite understood and spent some time trying to fix.  There doesn't seem to
> be anything in the documentation I've read to describe the difference
>
>  - Tim
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mod_python at ols.inorganic.org  Wed Jun 11 23:41:25 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
	<20030612060830.GA18376@nag.inorganic.org>
	<005501c330ab$6ecbd9a0$6600a8c0@tbrauch>
Message-ID: <20030612064124.GA19135@nag.inorganic.org>

On Thu, Jun 12, 2003 at 02:25:34AM -0400, Timothy M. Brauch wrote:
> > That's because you haven't read the right documentation :)
> >
> > Sorry, I don't mean to be flip about this, but in the end, this shows
> > something of the problem in trying to use something like mod_python
> > without having a good understanding of the underlying application.
> > "<Directory>" and "<Location>" directives are Apache directives, and
> > they're well-documented in the Apache docs.  I don't feel like looking
> > at the mod_python docs, but either they say that you should look into
> > the Apache config file format to at least understand it somewhat or ...
> > well, they should.
> >
> > -roy
> 
> That would help explain things a lot.  I've been using Python for quite a
> few years now and I am new to Apache, probably opposite of most users.  I
> just did a default install of Apache and haven't learned/played with it too
> much.  Python, however, I use everyday and can do most anything with it by
> now (except using mod_python it would seem).
> 
> I didn't see anywhere in the mod_python docs the mention that Directory and
> Location are Apache directives.  They are just used.  But, now that I know
> it, I've got some reading to do over at apache.org.

Actually, I'll go a step further than that -- every single item you put
in the httpd.conf file (including the 'AuthName' and 'AuthType'
directives in 3.4) is an Apache directive.  Linking mod_python into
Apache lets you use some Apache directives that you wouldn't have access
to otherwise (all the Python*Handler directives), but they're still
_Apache_ directives -- and it's important to keep that in mind.

You're right, by the way --  you and I are coming at this from opposite
ends.  I've been managing Apache for years now, and am new to Python.

So yeah, this definitely indicates something of a shortcoming of the
mod_python tutorial (not really the only one, I think, judging by how
many people have problems getting mod_python to work as they'd expect).

-roy
From i at mindlace.net  Thu Jun 12 08:43:14 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <2147483647.1055407394@[10.0.1.2]>

--On 12 Thursday, June 2003 12:15 +0900 Batara Kesuma 
<bkesuma@ml.gaijinweb.com> wrote:

> Hi,
>
> I am looking for real world experience with mod_python. Anybody wants
> to share stories?

Sorry, I only use mod_python in Tir nan og, which as everyone knows 
isn't a real place.

~mindlace
http://mindlace.net
From i at mindlace.net  Thu Jun 12 08:55:22 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <003201c330a6$8c22c860$6600a8c0@tbrauch>
References: <003201c330a6$8c22c860$6600a8c0@tbrauch>
Message-ID: <2147483647.1055408122@[10.0.1.2]>

--On 12 Thursday, June 2003 01:50 -0400 "Timothy M. Brauch" 
<tbrauch@mindless.com> wrote:


> What is the difference between using "Location" and "Directory"?
> When do I use each one?

I battled with this for hours the other day, so maybe I can help.

This is the important document: 
<http://httpd.apache.org/docs/sections.html>

The key thing to take away is: Location gets applied after Directory.

What I wanted was to handle everything with my PythonHandler but 
exclude certain directories.*

So at first I tried a Directory directive with SetHandler 
python-program and other directory directives with SetHandler None; the 
latter only worked for the exact directory name, and only if I 
specified the absolute path (more general regular expressions, like 
"^/donthandlethis*", didn't work).

Finally I used <Location /donthandlethis> SetHandler None </Location> 
for those directories I didn't want handled by my handler, and now 
everything works fine.

* I battled for a while with TransHandler, but it seems to me that if 
you write a TransHandler it must do everything that the regular 
TransHandler does as well as whatever you want; there's no way to make 
a TransHandler that only translates some requests, and punts the rest 
to apache's normal handling. (someone please correct me if I'm wrong.)

Additionally, I never got 
req.add_handler("PythonHandler",myhandlername) to do what I expected - 
i.e. act like SetHandler for that request (but if it doesn't work that 
way, how come you can't specify extension in .add_handler() ?

HTH,

~mindlace
http://mindlace.net
From davidf at sjsoft.com  Thu Jun 12 18:15:17 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
References: <20030612121538.4f4703eb.bkesuma@ml.gaijinweb.com>
Message-ID: <3EE8A715.3090405@sjsoft.com>

Batara Kesuma wrote:

>Hi,
>
>I am looking for real world experience with mod_python. Anybody wants to
>share stories?
>  
>
Hi

We use mod_python for a number of projects, including an electronic 
logging application that stores logs in the database and is highly 
configurable. We are about to do the first deployment, for ninety 
concurrent users ; I'll let you know then...

David

From grisha at modpython.org  Thu Jun 12 14:20:10 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Directory or Location?
In-Reply-To: <2147483647.1055408122@[10.0.1.2]>
Message-ID: <20030612141039.T44199-100000@oldchief.reply.net>



On Thu, 12 Jun 2003, emf wrote:

> * I battled for a while with TransHandler, but it seems to me that if
> you write a TransHandler it must do everything that the regular
> TransHandler does as well as whatever you want; there's no way to make
> a TransHandler that only translates some requests, and punts the rest
> to apache's normal handling. (someone please correct me if I'm wrong.)

You should be able to return DECLINED in which case Apache will do its
default thing.

> Additionally, I never got req.add_handler("PythonHandler",myhandlername)
> to do what I expected - i.e. act like SetHandler for that request

Not sure what you mean by this. It should execute, though if you have
another PythonHandler, that handler will execute first.

> (but if it doesn't work that way, how come you can't specify extension
> in .add_handler() ?

Because you can first look at the extension, then decide whether to
add_handler()?, e.g.:

	if ext == ".foo":
		req.add_handler("PythonHandler", myfoohandler)
	else:
		# do something else

Grisha

From fitnah55 at hotmail.com  Thu Jun 12 14:37:48 2003
From: fitnah55 at hotmail.com (kevin douglas)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Mod_python in real world
In-Reply-To: <3EE8A715.3090405@sjsoft.com>
Message-ID: <000001c33111$b8e44ac0$18c0c20a@computer>

once upon a time StarMedia's "geocities" like product ran on
mod_python..

re: 28M guest users and 1.5M subscribers

3 ultra sparcs.. f5 load balancer.. terabyte raid behind it..

it's not designed to be plug and play though.. if you want to get expert
functionality out of it you have to know how to design expert
functionality

there's plenty of horrible persistent java setups out there, mod_python
is
never that bad

tweak up on your multiplexing skills make sure you follow the
application
path exactly as it really is under the hood, and you're as good as
golden

solaris context switching is still superior I believe, but the new xeon
architecture seems promising as long as you design around it

unfortunately my xeon box w/ hyperthreading is not my dev box :/  can't
comment more on that

From gstein at lyra.org  Thu Jun 12 15:12:44 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <m3k7btrzbi.fsf@ferret.object-craft.com.au>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
Message-ID: <20030612221244.GB29668@lyra.org>

On Wed, Jun 11, 2003 at 02:52:01PM +1000, Dave Cole wrote:
> >>>>> "Michael" == Michael C Neel <neel@mediapulse.com> writes:
> 
> Michael> I'll give a second on ezt.py; even though Albatross is my
> Michael> first choice.  Ezt.py follows many of the same ideals of
> Michael> Albatross when it comes to templates, and also is not geared
> Michael> only for the web like albatross so it can be handly in other
> Michael> apps too.
> 
> Just had a look at ezt.py.  It is very similar in structure and
> approach to the Albatross templates.  Looking at the CVS logs it seems
> like ezt.py and Albatross sprung into existence at almost the same
> time.  Bizarre.

The CVS logs from edna are the original location. It was started in February
2001. Then I copied a version over into ViewCVS. Then another copy over into
SubWiki. Oh, and there is a copy in Subversion now -- we use it in the build
system for generating MSVC Project files (.dsp and .dsw) and for VC.Net
files. I also have a couple home projects that use it.

One of these days (with all that spare time), I'm going to create a little
SVN project area and check in the "reference copy" there, and maintain it
there. Then, in SubWiki and SVN (at least), I can simply use the
svn:externals feature to yank it into my projects. Eventually, I'll get
ViewCVS and edna into SVN and they can directly reference it too...

Oh, just for a bit more time each day... :-)

But yes, there are some similarities to Albatross. But it seems like
Albatross has variables and also makes function calls explicit. I wonder,
though: can Albatross be used outside of a markup-based system? Does it
assume and take advantage of within-markup-style-text templating?

Cheers,
-g

-- 
Greg Stein, http://www.lyra.org/
From djc at object-craft.com.au  Fri Jun 13 12:14:23 2003
From: djc at object-craft.com.au (Dave Cole)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] supporting modular mod_python extensionsvs."folding"
	mod_psp
In-Reply-To: <20030612221244.GB29668@lyra.org>
References: <C0FC22C08B82074A88B50061764157775C71@johnson.mediapulse.net>
	<m3k7btrzbi.fsf@ferret.object-craft.com.au>
	<20030612221244.GB29668@lyra.org>
Message-ID: <m3llw6k9kw.fsf@ferret.object-craft.com.au>

>>>>> "Greg" == Greg Stein <gstein@lyra.org> writes:

Greg> But yes, there are some similarities to Albatross. But it seems
Greg> like Albatross has variables and also makes function calls
Greg> explicit. I wonder, though: can Albatross be used outside of a
Greg> markup-based system? Does it assume and take advantage of
Greg> within-markup-style-text templating?

Some of the tags rely on functionality in the application framework,
but most don't.  You get quite precise control over the text that is
produced.

Check this out.  It is a standalone program that only uses the
templating functionality.

   http://www.object-craft.com.au/projects/albatross/albatross/tug-tree.html

- Dave

-- 
http://www.object-craft.com.au

From skremer at q.cis.uoguelph.ca  Fri Jun 13 14:37:23 2003
From: skremer at q.cis.uoguelph.ca (Stefan C. Kremer)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Server side includes.
Message-ID: <Pine.LNX.4.44.0306131431420.22685-100000@q.cis.uoguelph.ca>


Is there any easy way to perform server side include type processing with 
my mod_python handler?

I have written a handler which delivers *.html files *.shtml files, etc. 
and also runs *.py scripts and also handles *.cgi, but I would like to 
post process each of these using the standard server-side include type 
processing.

I realize that I could write the code to do it manually in my handler, but 
am wondering if there is a better way.

Thanks,

	-SK

-- 
--
Dr. Stefan C. Kremer, Associate Prof.
Reynolds Building, 106
Dept. of Computing and Information Science
University of Guelph, Guelph, Ontario	N1G 2W1

WWW: http://q.cis.uoguelph.ca/~skremer
Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
E-mail:  skremer@uoguelph.ca

From neel at mediapulse.com  Fri Jun 13 14:54:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Server side includes.
Message-ID: <C0FC22C08B82074A88B50061764157776B9531@johnson.mediapulse.net>

If you are using Apache 2.0; then you can chain together content
handlers to do this (or so I've been told but I've yet to try it).  If
you are using Apache 1.3 then you'll have to handle it yourself, or not
handle .shtml files (which may or may not be an option depending on what
you are doing).

HTH,
Mike

     > -----Original Message-----
     > From: Stefan C. Kremer [mailto:skremer@q.cis.uoguelph.ca] 
     > Sent: Friday, June 13, 2003 2:37 PM
     > To: mod_python@modpython.org
     > Subject: [mod_python] Server side includes.
     > 
     > 
     > 
     > Is there any easy way to perform server side include 
     > type processing with 
     > my mod_python handler?
     > 
     > I have written a handler which delivers *.html files 
     > *.shtml files, etc. 
     > and also runs *.py scripts and also handles *.cgi, but I 
     > would like to 
     > post process each of these using the standard 
     > server-side include type 
     > processing.
     > 
     > I realize that I could write the code to do it manually 
     > in my handler, but 
     > am wondering if there is a better way.
     > 
     > Thanks,
     > 
     > 	-SK
     > 
     > -- 
     > --
     > Dr. Stefan C. Kremer, Associate Prof.
     > Reynolds Building, 106
     > Dept. of Computing and Information Science
     > University of Guelph, Guelph, Ontario	N1G 2W1
     > 
     > WWW: http://q.cis.uoguelph.ca/~skremer
     > Tel: (519)824-4120 Ext.58913  Fax: (519)837-0323
     > E-mail:  skremer@uoguelph.ca
     > 
     > _______________________________________________
     > Mod_python mailing list
     > Mod_python@modpython.org
     > http://mailman.modpython.org/mailman/listinfo/mod_python
     > 

From dustin at ywlcs.org  Fri Jun 13 15:34:59 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] mod_python proposal
Message-ID: <20030613203459.GF2664@eleanor.internal.ywlcs.org>

I've been thinking a lot about the extensibility requirements of mod_python
users, in light of recent discussion.  Basically, the degree of flexibility
desired of mod_python is the same degree of flexibility delivered by Apache
itself.

To explain in more detail, most of the low-level frameworks people have been
discussing here would be /best/ implemented as an Apache module -- best in
terms of speed, flexibility, configurability, and installability.  In fact,
mod_psp is an Apache module.

mod_python's raison d'etre is to allow Apache modules to be written in
Python.  However, it's grown somewhat beyond that in extent, while also
omitting a few capabilities of native C modules.  My proposal is to separate
and enhance the mod_python core so that it supports the full functionality of
a C module, and no more.  The project would then reference other Apache
modules, coded fully in Python, which implement specific capabilities.  It
would probably also be helpful for mod_python to include some utility
functionality, e.g., query processing, html quoting, etc.

To bring it down to the level of configuration files, I'd like to have this
in my Apache config:

----
LoadModule python_module /path/to/mod_python.so
..
# Parallel to LoadModule, but they're written in Python!
LoadPythonModule mod_psp /path/to/mod_psp.py
LoadPythonModule publisher_module /path/to/publisher.py

..
# and act just like other Apache modules
AddHandler psp-script .psp
..

<VirtualHost ...>
  SetHandler publisher # references publisher_module above
  # publisher module defines its own Apache configs
  PublisherRoot /path/path/path
</VirtualHost>
----

I don't know how possible this is in the specifics, although I think it will
make an interesting project.  As a general design scheme, what do you think?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From michel_ts at yahoo.com.br  Sun Jun 15 12:48:24 2003
From: michel_ts at yahoo.com.br (=?iso-8859-1?q?Michel=20Thadeu?=)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Some problems with mod_python.publisher
Message-ID: <20030615154824.64623.qmail@web40402.mail.yahoo.com>

Hi guys!

I having trouble with mod_python.publisher, I using a apache 1.2.27 and
the mod_python 2.7 (the standard version of debian testing).

I have configured the apache like this:

   <Directory /var/www/modpython>
     AddHandler python-program .py
     PythonHandler mod_python.publisher
   </Directory>

And have made a script named index.py with the next code:

   from mod_python import apache
   def executar(req):
           req.content_type="text/html"
           req.send_http_header()
           req.write('<H1>Some test of executar!</H1>')
           return apache.OK

But when I execute this script, using the next url...

   http://localhost/modpython/index.py/executar

The page is open, rendening html code, and all the things, but with a
error message:

   Some test of executar!
   HTTP/1.1 200 OK Date: Tue, 17 Jun 2003 23:36:26 GMT Server: 
   Apache/1.3.27 (Unix) Debian GNU/Linux mod_python/2.7.8 Python/2.2.2 
   PHP/4.1.2 Connection: close Transfer-Encoding: chunked Content-Type:

   text/html; charset=iso-8859-1
   OK
   The server encountered an internal error or misconfiguration and was

   unable to complete your request.

   Please contact the server administrator, webmaster@capsulecorp and 
   inform them of the time the error occurred, and anything you might 
   have done that may have caused the error.

   More information about this error may be available in the server 
   error log.

But if I use PythonHanldler and name executar as handler, the error is
not shown... I read the last lines of error.log of apache, but I don't
found a critical error:

   [Tue Jun 17 21:42:29 2003] [alert] apache: Could not determine the 
   server's fully qualified domain name, using 127.0.0.1 for ServerName
   [Tue Jun 17 21:42:30 2003] [notice] Apache/1.3.27 (Unix) Debian 
   GNU/Linux mod_python/2.7.8 Python/2.2.2 PHP/4.1.2 configured -- 
   resuming normal operations
   [Tue Jun 17 21:42:30 2003] [notice] suEXEC mechanism enabled 
   (wrapper: /usr/lib/apache/suexec)
   [Tue Jun 17 21:42:30 2003] [notice] Accept mutex: sysvsem (Default: 
   sysvsem)

This is the last errors since the last restart of apache...

Well, I don't know what error I made, can someone help me?

thanks
--
Michel Thadeu Sabchuk
Curitiba - Paran? - Brazil

=====
--
Michel Thadeu Sabchuk
Curitiba/PR

_______________________________________________________________________
Yahoo! Mail
Mais espa?o, mais seguran?a e gratuito: caixa postal de 6MB, antiv?rus, prote??o contra spam.
http://br.mail.yahoo.com/
From gnb at itga.com.au  Mon Jun 16 10:25:38 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing? 
In-Reply-To: Your message of Tue, 10 Jun 2003 02:14:22 -0600.
Message-ID: <200306160025.KAA13272@lightning.itga.com.au>

>    include current directory in path
>    module = __import__(basename, globals(), locals(), [])
>    return sys.path to old layout

This might be your problem.  Inside mod_python the current directory is 
probably "/".  It's not like CGI where the current directory is the CGI dir.



From jafo at tummy.com  Sun Jun 15 18:54:19 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] mod_python weirdness, maybe related to importing?
In-Reply-To: <200306160025.KAA13272@lightning.itga.com.au>
References: <200306160025.KAA13272@lightning.itga.com.au>
Message-ID: <20030616005419.GM8892@tummy.com>

On Mon, Jun 16, 2003 at 10:25:38AM +1000, Gregory Bond wrote:
>>    include current directory in path
>>    module = __import__(basename, globals(), locals(), [])
>>    return sys.path to old layout
>
>This might be your problem.  Inside mod_python the current directory is 
>probably "/".  It's not like CGI where the current directory is the CGI dir.

By "current" directory, I mean the directory that I am currently looking
for the module in.  For example, the directory in "filename" the request
object.

My problem isn't that it's not importing the module.  The problem is
that it seems like mod_python has done something weird and possibly just
wrong with the import semantics, so that if I import a package, modules
within that package aren't available unless I explicitly import them in
the init.

Also, I'm running into cases where I'm setting values within modules in
my handler, and then when I call code in the module those values are
reset.  I've resorted to shoving request-persistent data into
__builtins__, which works around the latter problem, and re-structuring
some code so that my entire object heirarchy *CAN* be imported all at
once.

Sean
-- 
 -rw-rw-rw-:  File permissions of the beast.  (Chuck Phillips)
 mknod /dev/beast c 6 66
Sean Reifschneider, Inimitably Superfluous <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mark at camazotz.com  Mon Jun 16 08:54:20 2003
From: mark at camazotz.com (Mark Smith)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Some problems with mod_python.publisher
In-Reply-To: <200306151700.h5FH01BQ015762@slash.mediapulse.com>
Message-ID: <A5558BE2-9FF9-11D7-BFFF-0003939F6178@camazotz.com>

Michel Thadeu <michel_ts@yahoo.com.br> wrote:
>    def executar(req):
>            req.content_type="text/html"
>            req.send_http_header()
>            req.write('<H1>Some test of executar!</H1>')
>            return apache.OK

The publisher handler expects your handler to return the page body 
rather than the status.

   def executar(req):
     return '<H1>Some test of executar!<H1>'

You can still use req.write() if you prefer; in that case, use

   return ''

at the end.

From ballums at swbell.net  Mon Jun 16 09:16:47 2003
From: ballums at swbell.net (Ben Allums)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] mod_python proposal
In-Reply-To: <20030613203459.GF2664@eleanor.internal.ywlcs.org>
Message-ID: <r01050400-1026-2A9B3B4AA00511D7B639003065489174@[216.141.190.73]>

On 6/13/03 at 3:34 PM, dustin@ywlcs.org (Dustin Mitchell) wrote:

> mod_python's raison d'etre is to allow Apache modules to be written
> in Python.  However, it's grown somewhat beyond that in extent, while
> also omitting a few capabilities of native C modules.  My proposal is
> to separate and enhance the mod_python core so that it supports the
> full functionality of a C module, and no more.

Here, here.

I'd like to second this approach.  Keep mod_python focused and complete.


Ben
From vmanera at manord.com  Tue Jun 17 18:42:22 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] 
	mod_python was restarted from apache with error:3221225477
Message-ID: <52DC70C1C1575C418CB033523A29CF141048C0@exchange2000.manord.com>


Today this happened 10 time.  why?

apache version 2.0.46 mod_python version 3.0.3

platform win 2000


apache log:

[Tue Jun 17 09:30:44 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.
[Tue Jun 17 09:30:45 2003] [notice] Parent: Created child process 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(505):
Parent: Sent the scoreboard to the child
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Child process is running
[Tue Jun 17 09:30:45 2003] [info] Parent: Duplicating socket 236 and sending
it to child process 4440
board from the parent.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(623):
Parent: Sent 1 listeners to child 4440
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\mpm_winnt.c(582):
Child 4440: retrieved 1 listeners from parent
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Acquired the start mutex.
[Tue Jun 17 09:30:45 2003] [notice] Child 4440: Starting 50 worker threads.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 0 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 16 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 27 starting.
[Tue Jun 17 09:30:45 2003] [debug] .\server\mpm\winnt\child.c(669): Child
4440: Worker thread 39 starting.
........


Villiam 
From peter at outputdsj.com.au  Fri Jun 20 00:58:09 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Mod_python won't install
Message-ID: <003f01c33673$33a16520$0200a8c0@peterhome>

Hi

I know this is a list for experienced developers but I have ttried the web
to no avail so thought someone here may be able to help with my problems on
installing mod_python.

I am having trouble installing Mod_pythong.

This is my setup:

OS: Windows XP
Web Server: Apache v2.0.46
Mod_python install: v3.0.3.0

I also have PHP installed

I added the line:

LoadModule python_module modules/mod_python.so

to my httpd.conf file (the location is correct).

But then as soon as I try starting Apache after entering this line and
saving the config file, it fails to start. I then comment the line out and
everything works OK again.

These lines in my error.log may be of interest:

[Fri Jun 20 00:52:48 2003] [notice] Child 1184: Exit event signaled. Child
process is ending.
[Fri Jun 20 00:52:48 2003] [warn] (OS 995)The I/O operation has been aborted
because of either a thread exit or an application request.  : winnt_accept:
Asynchronous AcceptEx failed.

Can anyone point me in the right direction here.

Thanks
Peter




***********************************************************************
This e-mail message, including any attachments, is for the sole use of the
intended recipient(s) and may contain confidential
and privileged information.  No-one else may read, print, store, copy,
forward or act in reliance on all or any of it or its attachments.  If you
receive this e-mail in error, please telephone us on 1300 302 115 or contact
the sender by reply e-mail and destroy all copies of the original message.
Thank you.
***********************************************************************


From bill at rfa.org  Fri Jun 20 10:23:42 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] mod_python on Windows with Python 2.3b1?
Message-ID: <3EF318EE.4000709@rfa.org>


Trying to run mod_python on Apache 2.0.46
on WIn2K using Python 2.3b1, as soon as
I uncomment the LoadModule line for mod_python.so,
Apache won't start up (even though it seems
to get past loading the mod_python module,
but gives no message on why it dies).

I'm not compiling myself, using the straight
binaries downloaded from Apache and Sourceforge.
Any ideas?

Thanks,
Bill

From mod_python at ols.inorganic.org  Sun Jun 22 12:59:08 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] persistent values
Message-ID: <20030622195908.GA23104@nag.inorganic.org>

Greetings all,

I'm working on my first real useful mod_python project and I'm finding that
I feel a little clueless here.

I've got an authent handler that works perfectly; one of the things it does
is create a ConfigParser object.  

Now, I want that object to be available for other parts of this
interpreter.  Specifically:

http://mydomain.com/directory

is controlled by dispatcher.py's authenhandler (the function that creates
the configparser object).  

http://mydomain.com/directory/dispatcher.py/init

is, obviously, the init function in dispatcher.py (using the Publisher
handler).  I'd like that function to have access to the CP object without
having to re-initialize the object (after all, that's the whole point of
mod_python).  Simply referring to the same value results in "NameError:
global name 'configp' is not defined."

Suggestions of which part of the documentation to re-read?

-roy


From gnb at itga.com.au  Mon Jun 23 10:12:22 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] persistent values 
In-Reply-To: Your message of Sun, 22 Jun 2003 12:59:08 -0700.
Message-ID: <200306230012.KAA00095@lightning.itga.com.au>

> Suggestions of which part of the documentation to re-read?

You need persistent session information.  Check the FAQ 3.8
	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp


From dustin at ywlcs.org  Sun Jun 22 19:20:13 2003
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] persistent values
In-Reply-To: <200306230012.KAA00095@lightning.itga.com.au>
References: <200306230012.KAA00095@lightning.itga.com.au>
Message-ID: <20030623002013.GG14253@eleanor.internal.ywlcs.org>

On Mon, Jun 23, 2003 at 10:12:22AM +1000, Gregory Bond wrote:
> > Suggestions of which part of the documentation to re-read?
> 
> You need persistent session information.  Check the FAQ 3.8
> 	http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.008.htp

If I understood the question correctly, Mr. Bond needed to know how to keep
information from one handler to another in the same request.  If that ws
indeed what he meant, then the solution is to attach the information to the
request, e.g.

(authenhandler)
  req.cp = my_config_parser
...
(handler)
  config_parser = req.cp

works like a charm.  Just be careful not to create a reference loop (e.g.,
don't let the config parser have a reference to req buried inside of it..).
This has caused memory leakage for me in the past.

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org/djmitche@alumni.uchicago.edu
  http://people.cs.uchicago.edu/~dustin/
From bill at rfa.org  Mon Jun 23 11:57:33 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <14348759489.20030621002129@centurytel.net>
References: <14348759489.20030621002129@centurytel.net>
Message-ID: <3EF7236D.70907@rfa.org>

Brian Lenihan wrote:

>You are both having similar problems according to your posts to the
>mod_python list.
>
>For unknown reasons, the mod_python binary is compiled using MSVC 7,
>which is a problem for most people.
>
>The instructions here:
>
>http://www.modpython.org/pipermail/mod_python/2002-December/002714.html
>
>still apply to mod_python 3.0.3
>
>The mod_python binary available from apache.org is linked to Python
>2.2, so you can't use Python 2.3, Bill, you have to use 2.2.x.  I am
>currently using 2.2.3 without any problems.
>  
>
Okay, it loads with 2.2.3, but I'm getting the ImportError: No module 
named _apache
from my cgi-bin (when run from within Apache, *NOT* from the the command 
line.
Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
I assume should be loaded from the c:\Program Files\Apache 
Group\Apache2\modules dir,
with the LoadModule python-module modules/mod_python.so  directive, but 
doesn't
seem to be).

Thanks,
Bill

>Apache2 requires XP service Pack 1, Peter, so that may be why you
>are having problems with Apache, in addition to the mod_python crash
>at start up.
>  
>


From peter at outputdsj.com.au  Mon Jun 23 21:06:05 2003
From: peter at outputdsj.com.au (Peter Brown)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Re: mod_python on Windows
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org>
Message-ID: <001901c33977$7342e080$0200a8c0@peterhome>

// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
// named _apache
// from my cgi-bin (when run from within Apache, *NOT* from the the command
//l ine.
// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
// I assume should be loaded from the c:\Program Files\Apache
// Group\Apache2\modules dir,
// with the LoadModule python-module modules/mod_python.so  directive, but
// doesn't
// seem to be).

With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
got the ole fave "Hello World" to work a few times.

Now when I run it mod_python loads OK but I get the following error: I guess
some changes I made to the Apache config file caused the problem. Buggered
if I know what. So if anyone has any ideas I will be more than welcome to
hear them.

Anyhow here's the error:

Mod_python error: "PythonHandler test"

Traceback (most recent call last):

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 320, in
HandlerDispatch
    module = import_module(module_name, config)

  File "C:\Python22\Lib\site-packages\mod_python\apache.py", line 499, in
import_module
    module = imp.load_module(mname, f, p, d)

  File "C:/Program Files/Apache Group/Apache2/htdocs/music/\test.py", line 2

    def handler(req):

    ^

SyntaxError: invalid syntax



From bill at rfa.org  Mon Jun 23 14:39:55 2003
From: bill at rfa.org (Bill Eldridge)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Re: mod_python on Windows
In-Reply-To: <001901c33977$7342e080$0200a8c0@peterhome>
References: <14348759489.20030621002129@centurytel.net>
	<3EF7236D.70907@rfa.org> <001901c33977$7342e080$0200a8c0@peterhome>
Message-ID: <3EF7497B.2080601@rfa.org>

Peter Brown wrote:

>// Okay, it loads with 2.2.3, but I'm getting the ImportError: No module
>// named _apache
>// from my cgi-bin (when run from within Apache, *NOT* from the the command
>//l ine.
>// Any idea what PYTHONPATH, PATH, etc. might help it find _apache? (which
>// I assume should be loaded from the c:\Program Files\Apache
>// Group\Apache2\modules dir,
>// with the LoadModule python-module modules/mod_python.so  directive, but
>// doesn't
>// seem to be).
>
>With 2.2.3 now I can get Apache to load mod_python.so successfully, and even
>got the ole fave "Hello World" to work a few times.
>
>Now when I run it mod_python loads OK but I get the following error: I guess
>some changes I made to the Apache config file caused the problem. Buggered
>if I know what. So if anyone has any ideas I will be more than welcome to
>hear them.
>  
>

You should only need something in your <directory cgi-bin> like:
<Directory "C:/Program Files/Apache Group/Apache2/cgi-bin">^M
    AllowOverride None^M
    Options None^M
    Order allow,deny^M
    Allow from all^M
    AddHandler python-program .pys
    PythonHandler myhandler
    PythonDebug On
<directory "c:/Program Files/Gpache Group

which will send anything to a name (existing or not) like "bill.pys"
off to cgi-bin/myhandler.py

(my guess is you messed up the AddHandler or PythonHandler statements)

I also had some luck doing this with Python 2.3, but made some changes
and never made it back to Kansas. Basically, I was just binary editing
the DLL and changing the one occurence of python22.dll to python23.dll.
Mostly caused no harm :()

From jafo at tummy.com  Mon Jun 23 15:30:27 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623002013.GG14253@eleanor.internal.ywlcs.org>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
Message-ID: <20030623213027.GC4640@tummy.com>

On Sun, Jun 22, 2003 at 07:20:13PM -0500, Dustin Mitchell wrote:
>(handler)
>  config_parser = req.cp
>
>works like a charm.  Just be careful not to create a reference loop (e.g.,
>don't let the config parser have a reference to req buried inside of it..).

I didn't realize that you could set values on the request...
Unfortunately, in my case I am calling into the SimpleTAL code and that
is calling back into my code, by which point I no longer have access to
the request object.

One of the weirdnesses I've found about mod_python is that it seems to
be losing values that I set on module-level name-spaces.  If I import a
module, set a value on it, then later try to access it, sometimes it
works and sometimes it doesn't.  This may or may not be related to the
weirdness about how mod_python imports modules or PythonAutoReload...

I've finally just broken down and set up an object in __builtins__ that
I store request-related data on (including a link to the request and
other information).  I hate doing it this way, but it has allowed me to
reliably set and get data that I need to get access to.

Sean
-- 
 If we don't survive, we don't do anything else.
                 -- John Sinclair
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From grisha at modpython.org  Mon Jun 23 18:31:47 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623213027.GC4640@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com>
Message-ID: <20030623182702.U2204@onyx.ispol.com>



On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> One of the weirdnesses I've found about mod_python is that it seems to
> be losing values that I set on module-level name-spaces.  If I import a
> module, set a value on it, then later try to access it, sometimes it
> works and sometimes it doesn't.

If you could come up with a way to replicate this weirdness, that would be
great.

> This may or may not be related to the weirdness about how mod_python
> imports modules or PythonAutoReload...

There isn't anything unusual about the way mod_python imports modules.
PythonAutoReload can yeld strange results after a lot of changes and a lot
of reloading, but that's not unusual during development. A cleanly started
Apache should (and does for me at least) behave 100% predictably.

Grisha
From jafo at tummy.com  Mon Jun 23 16:56:38 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623182702.U2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
Message-ID: <20030623225638.GC4076@tummy.com>

On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
>There isn't anything unusual about the way mod_python imports modules.

Someone on this list replied to one of my earlier messages and said that
mod_python hooks into the import mechanism for some reason.

There definitely are issues related to importing of packages...  From
mod_python, if I import a package that has a module within it, I can't
access that name unless the package __init__.py imports that name.  For
example, the following works from Python:

   guin:p$ mkdir pkg
   guin:p$ echo >pkg/__init__.py
   guin:p$ echo 'foo = "bar"' >pkg/baz.py
   guin:p$ python -c 'from pkg import baz; print baz.foo'
   bar
   guin:p$

IIRC, in mod_python that would give me an AttributeError on the "from
pkg import baz", unless I do:

   echo 'import baz' >pkg/__init__.py

Of course, this means that my entire package structure must be imported
through the __init__.py files, even if not all of it is used.  Worse,
this means that I can't have a module which imports another module, that
imports the first module...

>PythonAutoReload can yeld strange results after a lot of changes and a lot
>of reloading, but that's not unusual during development. A cleanly started
>Apache should (and does for me at least) behave 100% predictably.

That's not been my experience, where "predictably" is defined as
"behaving as I expect Python code to".  I mean, it's predictable in it's
unpredictability.  ;-)

Sean
-- 
 What we see depends on mainly what we look for.
                 -- John Lubbock
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From gnb at itga.com.au  Tue Jun 24 10:21:36 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] Re: mod_python on Windows 
In-Reply-To: Your message of Mon, 23 Jun 2003 21:06:05 +1000.
Message-ID: <200306240021.KAA19222@lightning.itga.com.au>

>     def handler(req):
> 
>     ^
> 
> SyntaxError: invalid syntax

This really looks like a plain python indentation/whitespace error, not a
mod_python thing.  Can you run "python test.py" without syntax errors? (I know
it will fail in the import stage, but your error message says it isn't even
getting that far.)


From grisha at modpython.org  Mon Jun 23 21:28:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:59 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623225638.GC4076@tummy.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623213027.GC4640@tummy.com><20030623225638.GC4076@tummy.com>
Message-ID: <20030623212426.H2204@onyx.ispol.com>


I just tried it and it works fine for me. I followed the steps you
outlined with "/home/grisha/www/htdocs" as my current directory, here is
an excerpt from apache config:

LoadModule python_module modules/mod_python.so

<Directory /home/grisha/www/htdocs>
        SetHandler python-program
        PythonHandler blah
</Directory>

And here is /home/grisha/www/htdocs/blah.py:


from mod_python import apache

from pkg import baz

def handler(req):
    req.write(baz.foo)
    return apache.OK


There's got a detail that I'm missing here.

Grisha

On Mon, 23 Jun 2003, Sean Reifschneider wrote:

> On Mon, Jun 23, 2003 at 06:31:47PM -0400, Gregory (Grisha) Trubetskoy wrote:
> >There isn't anything unusual about the way mod_python imports modules.
>
> Someone on this list replied to one of my earlier messages and said that
> mod_python hooks into the import mechanism for some reason.
>
> There definitely are issues related to importing of packages...  From
> mod_python, if I import a package that has a module within it, I can't
> access that name unless the package __init__.py imports that name.  For
> example, the following works from Python:
>
>    guin:p$ mkdir pkg
>    guin:p$ echo >pkg/__init__.py
>    guin:p$ echo 'foo = "bar"' >pkg/baz.py
>    guin:p$ python -c 'from pkg import baz; print baz.foo'
>    bar
>    guin:p$
>
> IIRC, in mod_python that would give me an AttributeError on the "from
> pkg import baz", unless I do:
>
>    echo 'import baz' >pkg/__init__.py
>
> Of course, this means that my entire package structure must be imported
> through the __init__.py files, even if not all of it is used.  Worse,
> this means that I can't have a module which imports another module, that
> imports the first module...
>
> >PythonAutoReload can yeld strange results after a lot of changes and a lot
> >of reloading, but that's not unusual during development. A cleanly started
> >Apache should (and does for me at least) behave 100% predictably.
>
> That's not been my experience, where "predictably" is defined as
> "behaving as I expect Python code to".  I mean, it's predictable in it's
> unpredictability.  ;-)
>
> Sean
> --
>  What we see depends on mainly what we look for.
>                  -- John Lubbock
> Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
> tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
>
From jafo at tummy.com  Mon Jun 23 21:33:24 2003
From: jafo at tummy.com (Sean Reifschneider)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] persistent values
In-Reply-To: <20030623212426.H2204@onyx.ispol.com>
References: <200306230012.KAA00095@lightning.itga.com.au>
	<20030623002013.GG14253@eleanor.internal.ywlcs.org>
	<20030623213027.GC4640@tummy.com> <20030623182702.U2204@onyx.ispol.com>
	<20030623225638.GC4076@tummy.com> <20030623212426.H2204@onyx.ispol.com>
Message-ID: <20030624033324.GE4076@tummy.com>

On Mon, Jun 23, 2003 at 09:28:58PM -0400, Gregory (Grisha) Trubetskoy wrote:
>I just tried it and it works fine for me. I followed the steps you
>outlined with "/home/grisha/www/htdocs" as my current directory, here is
>an excerpt from apache config:

Ugh, you are right and I am wrong...  I don't actually use packages very
often, and when I was seeing decidedly different behavior from
mod_python and the interpreter, it must have been using two different
versions of the package when I thought I was using one.

Sorry about that.

Thanks,
Sean
-- 
 A computer is like an Old Testament god, with a lot of rules and no mercy.
                -- Joseph Campbell
Sean Reifschneider, Member of Technical Staff <jafo@tummy.com>
tummy.com, ltd. - Linux Consulting since 1995.  Qmail, Python, SysAdmin
From mod_py at ua.fm  Tue Jun 24 11:11:09 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
Message-ID: <web-26094356@ua.fm>

Greetings to all,

I'm using Apache 1.3.24 + mod_py 2.7.8.

The idea is to make mod_py have global variables that 
will be accessible from any request untill apache restarts.

I added another dictionary to mod_python.c next to 

	static PyObject * interpreters = NULL;
like:
	PyObject * python_globals = NULL;
	
I initialize it on apache start in
	void python_init(server_rec *s, pool *p)	
like:
	if (!python_globals)
	{
		python_globals = PyDict_New();
		ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, s,
			 "python_init: Initializing globals dict");
	}
	
and logging shows it really initializes once per apache start.

then I just trying to use it via req object (maybe not the best way but 
fastest to me)
I define it as attribute '__globals__' of req object 
so it's accessible as req.__globals__
module requestobject.c
procedure 
static PyObject * request_getattr(requestobject *self, char *name)

like:
	else if (strcmp(name, "__globals__") == 0)
	{
		Py_INCREF(python_globals);
		return (PyObject *) python_globals;
	}

works fine with single apache child process.
means I can set 
	req.__globals__[key] = anyobject
and read it in next page hit
	anyobject = req.__globals__[key]
	
but when I start to use few such apache processes (access it from diff ip) I 
have strange situation.

req.__globals__ has same physical address like 0x810108c but different 
content.

Even dumping that 'python_globals' dictionary in requestobject.c shows 
different content of PyDict object.

It looks like each apache child process has own address space and same address 
points 
to physically different memory.

Any suggestion has can I fix that?

Thanx,
Anatoly Artamonov
----

-> CTAPT -> http://start.alkar.net 
From tuan-huy.la at muenchen.de  Tue Jun 24 17:01:12 2003
From: tuan-huy.la at muenchen.de (Tuan-Huy La)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Can't compile mod_python-3.0.3 on solaris 8 (sparc)
Message-ID: <3EF867B8.70805@muenchen.de>

I'm trying to install mod_python-3.0.3 on a sparc machine  running 
solaris 8, Apache 2.0.46, gcc 3.2.3, gnu ld 2.11.2 (binutil) and Python 
2.2.3.

I always get the following error when trying the make (gnu make 3.79) 
command:

(last few lines:)
    ...
    <unknown>                           0x12f8      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    <unknown>                           0x12fc      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x140       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_NewVar                 0x3c8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    PyTuple_Fini                        0x1974      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    PyTuple_Fini                        0x1b40      
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(pythonrun.o)
    _PyObject_GC_Resize                 0x2cc       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(tupleobject.o)
    _PyObject_GC_Resize                 0x3a8       
/usr/local/python-2.2.3/lib/python2.2/config/libpython2.2.a(frameobject.o)
    ld: fatal: relocations remain against allocatable but non-writable 
sections
    collect2: ld returned 1 exit status
    apxs:Error: Command failed with rc=65536
    .
    make[1]: *** [mod_python.so] Error 1
    make[1]: Leaving directory `/export/home/root/mod_python-3.0.3/src'
    make: *** [do_dso] Error 2

What's wrong? Any ideas?

From azaroth at liverpool.ac.uk  Tue Jun 24 18:28:47 2003
From: azaroth at liverpool.ac.uk (Dr Robert Sanderson)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
Message-ID: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>


When trying to write a trivial connection handler that only works when 
accessed from a certain port, I found that trying to 
read connection.local_addr results in a seg fault.

I'm running:
Server version: Apache/2.0.40
Server built:   May 20 2003 10:15:29

Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current 
Redhat RPM.

My server config addition looks like:
Listen 2100
PythonPath "sys.path+['/home/cheshire/']"
PythonConnectionHandler ztest
PythonDebug On

And then /home/cheshire/ztest.py reads:

-------------
from mod_python import apache
def connectionhandler(conn):
    conn.write("Trying to do something ...")
    try:
        conn.write(repr(conn.local_addr))
    except Exception, err:
        conn.write("Broke")
    conn.write("Done it.")
    return apache.OK
-------------

[cheshire@mithlond cheshire]$ telnet localhost 2100
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Trying to do something ...Connection closed by foreign host.

[Tue Jun 24 18:14:39 2003] [notice] mod_python: (Re)importing module 'ztest'
[Tue Jun 24 18:14:40 2003] [notice] child pid 2193 exit signal Segmentation 
  fault (11)

Any ideas?  Has this been fixed in a more recent version, and I should get 
stuck in and recompile everything from source?

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Tue Jun 24 14:14:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306241828010.19931-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030624140701.M38636@onyx.ispol.com>


On Tue, 24 Jun 2003, Dr Robert Sanderson wrote:

>
> When trying to write a trivial connection handler that only works when
> accessed from a certain port, I found that trying to
> read connection.local_addr results in a seg fault.
>
> I'm running:
> Server version: Apache/2.0.40
> Server built:   May 20 2003 10:15:29
>
> Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> Redhat RPM.

2.0.40 is a version of Apache a few major releases and almost a year
behind...

Connection support in 3.0.1 is very immature, you should really upgrade to
apache 2.0.46 and mod_python 3.0.3.

Grisha
From gnb at itga.com.au  Wed Jun 25 09:10:01 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence 
In-Reply-To: Your message of Tue, 24 Jun 2003 11:11:09 +0300.
Message-ID: <200306242310.JAA05334@lightning.itga.com.au>

> It looks like each apache child process has own address space and same addres
> s 
> points 
> to physically different memory.
> 
> Any suggestion has can I fix that?

That's true.  When the Apache process forks, each child process has different 
copy of the address space.  Same address, different contents.
You will need to use some explicity shared memory, either from a mmap'd file or
a shm segment.  This will imply a custom memory allocator and custom malloc()/
free() - like functions.  But you will need to make python use this shared
memory, and I have no idea if that is possible.


From jgardner at jonathangardner.net  Tue Jun 24 17:07:29 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26094356@ua.fm>
References: <web-26094356@ua.fm>
Message-ID: <200306241707.30622.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 01:11, 1 1 wrote:
> Greetings to all,
>
> I'm using Apache 1.3.24 + mod_py 2.7.8.
>
> The idea is to make mod_py have global variables that
> will be accessible from any request untill apache restarts.
>

Start over. Rethink what you are trying to do.

Let's examine things fundamentally. How does apache work? It listens on port 
80. It spawns a bunch of children. When it gets an incoming connection, it 
passes the connection off to one of the children.

These children are seperate processes. There is no way for them to 
communicate with each other outside of pipes and shared memory. (Well, 
there are other ways, but they aren't as useful as you would hope).

So far, no one has figured out how to use shared memory and python. However, 
everyone and their sister knows how to use pipes. It's called "sockets" and 
you can use TCP over IP or one of a million other protocols.

So, these processes have to communicate with each other. How are they going 
to find each other, let alone let each other know when something changes 
and how it changes? Why, we need a central location for all of them to call 
in to. Let's call it a server.

And what will this server do? It will hold data. Maybe we should call it a 
"database". So, any process running out in the wild can connect to this 
database, grab data, change data, and everyone will work together.

That's your "global variables" accessible anywhere. That's the current best 
way to do it. You'll find a terrifying amount of research done on 
everything you can possibly imagine doing with a database.

I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
Oracle, or Sybase.

So go start learning about databases, and how best to use them! ;-)

- -- 
Jonathan Gardner
jgardner@jonathangardner.net
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++OfBWgwF3QvpWNwRAsq8AKC0R3Xp1xmJDWu6cmUD2KDTNo9EbgCgiODn
yVGztiDpf5ZizHramVNSUw8=
=RvEH
-----END PGP SIGNATURE-----


From grisha at modpython.org  Wed Jun 25 00:16:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625001438.M40924@onyx.ispol.com>



On Tue, 24 Jun 2003, Jonathan Gardner wrote:

> So far, no one has figured out how to use shared memory and python.

http://www.python.org/doc/current/lib/module-mmap.html

http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

:-)

Grisha
From mod_python at mikebell.org  Tue Jun 24 21:27:23 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <20030625042723.GR1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> http://www.python.org/doc/current/lib/module-mmap.html

The only problem with the mmap module is that it just gives you a
string-like object. How do you put something like a mutex in there so
you can access the shared memory area safely?
From mod_python at mikebell.org  Tue Jun 24 21:32:50 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306241707.30622.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
Message-ID: <20030625043250.GS1198@netvista.mikebell.org>

On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
> Oracle, or Sybase.
> 
> So go start learning about databases, and how best to use them! ;-)

Of course, some people prefer not to use a giant, bloated SQL database
every time they need to store any sort of data. :-)

If your data storage needs are a little less complicated and you're
having trouble justifying SQL, try something like berkeley db or just
the filesystem.
From grisha at modpython.org  Wed Jun 25 00:40:41 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625042723.GR1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
Message-ID: <20030625003543.O40924@onyx.ispol.com>


On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:

> On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > http://www.python.org/doc/current/lib/module-mmap.html
>
> The only problem with the mmap module is that it just gives you a
> string-like object. How do you put something like a mutex in there so
> you can access the shared memory area safely?
>

To quote Guido - "Good question!"

(here is the link
http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

:-)

OK, on a serious note - I believe the shm module provides locking. I'm
also going to look into the APR for possibly including some locking
interface in the next version of mp.

Grisha

From mod_python at mikebell.org  Tue Jun 24 21:48:09 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625042723.GR1198@netvista.mikebell.org>
	<20030625003543.O40924@onyx.ispol.com>
Message-ID: <20030625044808.GT1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 12:40:41AM -0400, Gregory (Grisha) Trubetskoy wrote:
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)

For anyone who's curious, you _can_ do it by using fcntl's file locking
before making any changes to your shared memory region, but this means
you only get one lock per file. So if you've got one variable, just lock
the file you're mmaping. If you've got dozens, you're going to need a
lot of lockfiles.

From jakubec at san.rr.com  Tue Jun 24 22:11:10 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001c01c33ad8$31f56aa0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.


From sterling at bumblebury.com  Wed Jun 25 01:16:51 2003
From: sterling at bumblebury.com (Sterling Hughes)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625003543.O40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	 <200306241707.30622.jgardner@jonathangardner.net>
	 <20030625042723.GR1198@netvista.mikebell.org>
	 <20030625003543.O40924@onyx.ispol.com>
Message-ID: <1056518211.28555.72.camel@hasele>

The way you handle locking with mmap() is by using a combination of a
file and a mmap(), it isn't that expensive so long as MAP_NOSYNC is
specified (if MAP_NOSYNC isn't specified than most operating systems
default to it).  

Outside of that, the proper way to do this is to use a semaphore.

-Sterling

On Wed, 2003-06-25 at 00:40, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 24 Jun 2003 mod_python@mikebell.org wrote:
> 
> > On Wed, Jun 25, 2003 at 12:16:29AM -0400, Gregory (Grisha) Trubetskoy wrote:
> > > http://www.python.org/doc/current/lib/module-mmap.html
> >
> > The only problem with the mmap module is that it just gives you a
> > string-like object. How do you put something like a mutex in there so
> > you can access the shared memory area safely?
> >
> 
> To quote Guido - "Good question!"
> 
> (here is the link
> http://mail.python.org/pipermail/python-dev/2001-August/016772.html)
> 
> :-)
> 
> OK, on a serious note - I believe the shm module provides locking. I'm
> also going to look into the APR for possibly including some locking
> interface in the next version of mp.
> 
> Grisha
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
"Programming today is a race between software engineers stirring to  
 build bigger and better idiot-proof programs, and the universe trying  
 to produce bigger and better idiots. So far, the universe is winning." 
    - Unknown
From mod_py at ua.fm  Wed Jun 25 09:58:01 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
Message-ID: <web-26333903@ua.fm>

>>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL Server, 
>>Oracle, or Sybase.
>>So go start learning about databases, and how best to use them! ;-)

Yes, I'm using PgSQL and have possibly hundreds of simultaneous connections.
That's why I tried to cache all in memory.
Thanx for advice anyway.

----

-> CTAPT -> http://start.alkar.net 
From mod_py at ua.fm  Wed Jun 25 10:18:02 2003
From: mod_py at ua.fm (1 1)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence 
In-Reply-To: <200306242310.JAA05334@lightning.itga.com.au>
Message-ID: <web-26336311@ua.fm>


> You will need to use some explicity shared memory, either from a mmap'd file 
> or
> a shm segment.  This will imply a custom memory allocator and custom 
> malloc()/
> free() - like functions.  But you will need to make python use this shared
> memory, and I have no idea if that is possible.

yes, there's shm module for py
I actually learned all about it before post to conference.
Problem with it - it provides file-like behaviour.
So I can use files as well (but without locking shm module provides).
But I have to store my data after each change.
Storing to file (or shm memory) mean pickle/unpickle.
While placing object in shared memory with direct access would save a lot of 
hassle.
So actually I was hoping someone will tell me how to allocate py object in 
apache 2.0 shared memory and attach that space to python interpreter address 
space (is such things are possible)
----

-> CTAPT -> http://start.alkar.net 
From jgardner at jonathangardner.net  Wed Jun 25 06:54:41 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625001438.M40924@onyx.ispol.com>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625001438.M40924@onyx.ispol.com>
Message-ID: <200306250654.42792.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:16, Gregory (Grisha) Trubetskoy wrote:
>
> http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html
>

This is the way to go in "1 1"'s case. I have been looking for a shared memory 
module for python for the longest time, and now I am happy that you pointed 
it out.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++amhWgwF3QvpWNwRAsKNAJ9B5+xcxzXKfgfUHcLd7qsCyEZWpgCdHec1
UF+Y027v3sEu547f+OvqPwQ=
=Qukb
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 06:58:45 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <20030625043250.GS1198@netvista.mikebell.org>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
Message-ID: <200306250658.46386.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 21:32, mod_python@mikebell.org wrote:
> On Tue, Jun 24, 2003 at 05:07:29PM -0700, Jonathan Gardner wrote:
> > I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> > Server, Oracle, or Sybase.
> >
> > So go start learning about databases, and how best to use them! ;-)
>
> Of course, some people prefer not to use a giant, bloated SQL database
> every time they need to store any sort of data. :-)
>

So don't use SQL Server, Oracle, Sybase or MySQL. Use PostgreSQL. ;-)

> If your data storage needs are a little less complicated and you're
> having trouble justifying SQL, try something like berkeley db or just
> the filesystem.

This is equally valid. My problem is that every time I get to start using one 
of these, it ends up with so much data that I should've gone with the 
database from the very beginning. If you *know* your data set is never going 
to get very large, then using files or Berkeley DB is a very, very good idea.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++aqVWgwF3QvpWNwRArz4AJ4s3bBs8sfTxBBY268ZdAa1eFNHIQCfTx6R
yKehz2nY6SKKDcowthMhC9c=
=BObc
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:01:12 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <200306250701.14900.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Tuesday 24 June 2003 23:58, 1 1 wrote:
> >>I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
> >> Server, Oracle, or Sybase.
> >>So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.
>

In this case, if you are just caching some data, just have the processes query 
the database and cache it once. Then you can just use the cache for every 
subsequent result. Or you can store it in the modules hard-coded, and just be 
very careful not to change it during the lifetime of the processes.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++asoWgwF3QvpWNwRAjlJAJ4rxu6qOQnTpg1FBdBRi4gCaZLSaACeLY4p
zNL5/N1kVTZx3tzYzjmV65A=
=JnBM
-----END PGP SIGNATURE-----

From jgardner at jonathangardner.net  Wed Jun 25 07:32:14 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <200306250732.15699.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I am thinking of implementing a shared memory module that does more than just 
"read" and "write". Instead, I want something more transparent to the 
developer, so that you say "Go get this dict at this shared memory key" or 
"Create a new dict in shared memory at this key", and have the entire dict 
available like a namespace.

Obvious applications would include the ever-present problem of shared data 
between apache mod_python processes. This would solve it once and for all. 
Perhaps one day we could get it working with RPC and have processes on 
seperate machines sharing data as well.

The scope of this project would be implimenting new types that derive from all 
of the basic types so that:

1) When accessing the data in the type, it would gain a lock on the shared 
memory segment that stores its data using a semaphore, read the data and 
unserialize it, then return that data.
2) When storing the data in that type, it would gain a lock on the shared 
memory segment, then store the data over the existing data.

I am thinking there are really two ways to go about this.
1) Implementing it all in Python. The idea here would be that we would 
serialize and unserialize the data using cPickle.
2) Implementing it all in C. The idea here is that we would reuse the same 
data structures that the basic data types use. We would store and read the 
binary data behind the basic data types so that they can be as easily stored 
in shared memory as they are stored in real memory.

Does anyone know if something like this is implemented or in the process of 
being implemented? Does anyone want to join me in this endeavor? 

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
/ID5Uq/oK8hAYQfmvvIGliE=
=4zo4
-----END PGP SIGNATURE-----

From i at mindlace.net  Wed Jun 25 07:59:56 2003
From: i at mindlace.net (emf)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <web-26333903@ua.fm>
References: <web-26333903@ua.fm>
Message-ID: <2147483647.1056527996@[10.0.1.2]>

--On 25 Wednesday, June 2003 09:58 +0300 1 1 <mod_py@ua.fm> wrote:

>>> I suggest PostgreSQL as a database. Others will suggest MySQL, SQL
>>> Server,  Oracle, or Sybase.
>>> So go start learning about databases, and how best to use them! ;-)
>
> Yes, I'm using PgSQL and have possibly hundreds of simultaneous
> connections. That's why I tried to cache all in memory.
> Thanx for advice anyway.

Is there any reason why you haven't used the ZODB for this? With ZEO, 
you can access persistent values from multiple processes. As long as 
your application doesn't heavily write to the same objects, it should 
be just what you need (and has been tested and deployed in quite large 
environments.)

Here's an intro:
<http://www.amk.ca/zodb/zodb-zeo.html>

Here's where to get it:

<http://www.zope.org/Products/StandaloneZODB>

~mindlace
http://mindlace.net
From vlindberg at verio.net  Wed Jun 25 10:43:44 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <3EF9D140.6010108@verio.net>


>Does anyone know if something like this is implemented or in the process of 
>being implemented? Does anyone want to join me in this endeavor? 
>

I haven't used it, but I think that POSH is what you are looking for:

http://poshmodule.sourceforge.net/posh/html/

Not sure if it compatible with mod_python.  If it is, though, it sounds 
like exactly what everyone wants.

VanL

From jm at eemsystems.cjb.net  Wed Jun 25 13:04:20 2003
From: jm at eemsystems.cjb.net (Julio Mendoza)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] value too large for PgNumeric
Message-ID: <1056564260.1950.176.camel@eemsystems.com>

this error:


File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
__init__
    raise OverflowError, "value too large for PgNumeric"



is produced by this query:

"""select  q1.Area,q1.Prop_disponibles,q1.MinCompra,q1.MaxCompra,q1.MinAlquiler,q1.MaxAlquiler from (select  areas.descripcion as Area,count(*) as Prop_disponibles,min(coalesce(prop.precio_venta,0)) as MinCompra,max(coalesce(prop.precio_venta,0)) as MaxCompra,min(coalesce(prop.precio_alquiler,0)) as MinAlquiler,max(coalesce(prop.precio_alquiler,0)) as MaxAlquiler from propiedades prop, tipo_de_propiedades tdp,Sectores sector,areas where prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id and sector.area_id = areas.area_id and prop.sector_area_id = sector.area_id and prop.sector_id = sector.sector_id and prop.propiedad_id in (select fot.propiedad_id from fotos fot where fot.propiedad_id = prop.propiedad_id) and current_date between prop.efectivo_desde and prop.efectivo_hasta and prop.activa = 'Y' and prop.tipo_de_propiedad_id=%s  group by areas.descripcion) as "q1"  order by q1.prop_disponibles desc limit 2;""" % (i[2])))


only for a few alternatives.


Any help? thanks.

jm


-- 
Julio Mendoza <jm@eemsystems.cjb.net>

From mod_python at mikebell.org  Wed Jun 25 12:17:13 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] global persistence
In-Reply-To: <200306250658.46386.jgardner@jonathangardner.net>
References: <web-26094356@ua.fm>
	<200306241707.30622.jgardner@jonathangardner.net>
	<20030625043250.GS1198@netvista.mikebell.org>
	<200306250658.46386.jgardner@jonathangardner.net>
Message-ID: <20030625191712.GU1198@netvista.mikebell.org>

On Wed, Jun 25, 2003 at 06:58:45AM -0700, Jonathan Gardner wrote:
> This is equally valid. My problem is that every time I get to start using one 
> of these, it ends up with so much data that I should've gone with the 
> database from the very beginning. If you *know* your data set is never going 
> to get very large, then using files or Berkeley DB is a very, very good idea.

There's no reason not to use either one of those just because your
dataset is going to be large. Berkeley DB in particular is quite good.
You're not using SQL for the backend implementation, you're using it for
the front end, the query language which abstracts away the back end.
From mod_python at ols.inorganic.org  Thu Jun 26 01:04:02 2003
From: mod_python at ols.inorganic.org (Roy S. Rapoport)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Using mod_python pythonauthenhandler with PSO
Message-ID: <20030626080402.GA6653@nag.inorganic.org>

Hey guys,

Anyone have any experience integrating mod_python with Python Service
Objects?

I've got a problem where if I'm dealing with an authenhandler, I end up
with an error message that says:
---
Mod_python error: "PythonLogHandler pso.modpython::cleanup"

Traceback (most recent call last):

  File
"/usr/local/Python/lib/python2.2/site-packages/mod_python/apache.py", line
332, in HandlerDispatch
    result = object(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/modpython.py",
line 36, in cleanup
    service.cleanup(req)

  File "/usr/local/Python/lib/python2.2/site-packages/pso/service.py", line
52, in cleanup
    req.pso().close()

AttributeError: 'mp_request' object has no attribute 'pso'
---

I'm pretty sure this is related to authenhandler because if you then try to
access a resource under this directory -- which means that now you're not
going through authenhandler -- it works.


My script looks like this:

---
from mod_python import apache

def foo(req):
	try:
		req.pso().session['visits'] +=1
	except:
		req.pso().session['visits'] =1
	f = "Hello World!  ~ Your visit number: %(visits)d ~ Try Reload !" %  req.pso().session
	return f

def authenhandler(req):
	user = req.user
	pw = req.get_basic_auth_pw()

	if (user == "foo" and pw == "bar"):
		return apache.OK
	else:
		return apache.HTTP_UNAUTHORIZED
---

my .htaccess looks like this:
---
AddHandler python-program .py
PythonHandler mod_python.publisher
pythonauthenhandler quicktest
PythonFixupHandler pso.modpython::fixup
PythonLogHandler pso.modpython::cleanup
PythonDebug On
AuthType Basic
AuthName "Enter your email username and password"
require valid-user
---

To test this:
Go to http://www.inorganic.org/~rsr/python2/quicktest.py/foo
Authenticate with foo/bar
This should pause for a moment and then give you the error message.
If you hit 'reload,' you don't go through authenhandler (since you're
already authenticated) and you get the correct output.

Thoughts?

-roy


From rien at YEEPA.ORG  Thu Jun 26 10:36:08 2003
From: rien at YEEPA.ORG (Adrien Plisson)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] value too large for PgNumeric
References: <1056564260.1950.176.camel@eemsystems.com>
Message-ID: <3EFAB078.2080207@yeepa.org>

Julio Mendoza wrote:
> this error:
> 
> File "/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py", line 1335, in
> __init__
>     raise OverflowError, "value too large for PgNumeric"
> 
> is produced by this query:
>       ...
> only for a few alternatives.
 >
> Any help? thanks.

This exception seems to be thrown from PgSQL, so has nothing to do with mod_python.
It may surely tell you that you have to much result to be stored in a variable, 
causing an overflow. try decomposing your query to see which part is erroneous.

by the way, try to simplify your query: this does not seem to be efective...
	prop.tipo_de_propiedad_id = tdp.tipo_de_propiedad_id
	and prop.tipo_de_propiedad_id=%s
this too...
	prop.propiedad_id in (
			select
				fot.propiedad_id
			from
				fotos fot
			where
				fot.propiedad_id = prop.propiedad_id
		)


-- 
rien

From azaroth at liverpool.ac.uk  Thu Jun 26 13:40:03 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030624140701.M38636@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>


> > Which is the Redhat 9 current RPM.  Mod_Python is 3.0.1, also the current
> > Redhat RPM.
> 2.0.40 is a version of Apache a few major releases and almost a year
> behind...
> Connection support in 3.0.1 is very immature, you should really upgrade to
> apache 2.0.46 and mod_python 3.0.3.

Having upgraded my trivial port checking code works fine. Thanks :)

However, the connection object is a little too high level ... are there 
plans for implementing a lower level 'socket' like interface, rather than 
a blocking line or character reader?  The mod_perl module has this sort of 
interface for example (AFAICT)

For example, I need to be able to consume all of the data currently 
waiting into one chunk to process ... which may or may not end in a 
linebreak character, can be of arbitrary length and the connection 
doesn't close after sending.  So I can't use either read() or readline(), 
with or without arguments :/

In particular, I'm looking at the possibility of handling Z39.50 
connections, which has messages sent in a binary encoded form to be 
decoded using rules in ASN1 and BER.

Cheers,

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I

From gstein at lyra.org  Thu Jun 26 11:36:42 2003
From: gstein at lyra.org (Greg Stein)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306250732.15699.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
Message-ID: <20030626183642.GB5652@lyra.org>

APR has facilities to do shared memory in a portable fashion; APR is part of
Apache 2.0, so there isn't much reason to go grab any other library.

You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
shared memory segments. The problem is that a shared memory segment could be
mapped to different addresses in different processes. Thus, you want to hold
onto offsets into a shared memory segment. apr_rmm.h helps with managing
these subblocks and working with offsets rather than direct pointers. Note
that apr_rmm also handles locking so that you can have multiple processes
allocating (simultaneously) from a shared mem segment.

You can then layer additional Python facilities on top of this substrate.

Cheers,
-g

On Wed, Jun 25, 2003 at 07:32:14AM -0700, Jonathan Gardner wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> I am thinking of implementing a shared memory module that does more than just 
> "read" and "write". Instead, I want something more transparent to the 
> developer, so that you say "Go get this dict at this shared memory key" or 
> "Create a new dict in shared memory at this key", and have the entire dict 
> available like a namespace.
> 
> Obvious applications would include the ever-present problem of shared data 
> between apache mod_python processes. This would solve it once and for all. 
> Perhaps one day we could get it working with RPC and have processes on 
> seperate machines sharing data as well.
> 
> The scope of this project would be implimenting new types that derive from all 
> of the basic types so that:
> 
> 1) When accessing the data in the type, it would gain a lock on the shared 
> memory segment that stores its data using a semaphore, read the data and 
> unserialize it, then return that data.
> 2) When storing the data in that type, it would gain a lock on the shared 
> memory segment, then store the data over the existing data.
> 
> I am thinking there are really two ways to go about this.
> 1) Implementing it all in Python. The idea here would be that we would 
> serialize and unserialize the data using cPickle.
> 2) Implementing it all in C. The idea here is that we would reuse the same 
> data structures that the basic data types use. We would store and read the 
> binary data behind the basic data types so that they can be as easily stored 
> in shared memory as they are stored in real memory.
> 
> Does anyone know if something like this is implemented or in the process of 
> being implemented? Does anyone want to join me in this endeavor? 
> 
> - -- 
> Jonathan Gardner <jgardner@jonathangardner.net>
> (was jgardn@alumni.washington.edu)
> Live Free, Use Linux!
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.1 (GNU/Linux)
> 
> iD8DBQE++bJuWgwF3QvpWNwRAq0pAJ4ipACeWt63fSbtheNmxQfc217sQwCgj4D7
> /ID5Uq/oK8hAYQfmvvIGliE=
> =4zo4
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 
Greg Stein, http://www.lyra.org/
From jgardner at jonathangardner.net  Thu Jun 26 11:45:57 2003
From: jgardner at jonathangardner.net (Jonathan Gardner)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626183642.GB5652@lyra.org>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
Message-ID: <200306261145.59286.jgardner@jonathangardner.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 26 June 2003 11:36, Greg Stein wrote:
> APR has facilities to do shared memory in a portable fashion; APR is part
> of Apache 2.0, so there isn't much reason to go grab any other library.
>
> You can also use APRUTIL's apr_rmm.h to manage sub-allocations within the
> shared memory segments. The problem is that a shared memory segment could
> be mapped to different addresses in different processes. Thus, you want to
> hold onto offsets into a shared memory segment. apr_rmm.h helps with
> managing these subblocks and working with offsets rather than direct
> pointers. Note that apr_rmm also handles locking so that you can have
> multiple processes allocating (simultaneously) from a shared mem segment.
>
> You can then layer additional Python facilities on top of this substrate.
>

The python facility would be something like POSH.

So, based on this new information, the project scope would now become:

1) Expand POSH so that it can use shared objects that were shared by a foreign 
process (provided with some information on which shared memory segment they 
are using)

2) Integrate POSH with mod_python and APR.

The problem I see now: How to communicate between all of the processes that 
there are shared objects available, and detail where those shared objects 
are? I don't think it is possible to create shared objects via mod_python 
before the processes are seperated. Even if it was, is it possible to 
transfer references to those shared objects to each process?

The only solution I see right now is to have some central repository that any 
process can access and declare the existence of shared objects, their 
location, and whatever else is needed. Other processes can read the 
repository and find currently existing shared objects by a unique string.

The exact nature of the repository isn't important. It could be a bit of 
shared memory in a special location, a file, a Berkely DB, or even something 
more exotic. The point is that the processes can declare new shares, or find 
existing shares by a unique identifier.

- -- 
Jonathan Gardner <jgardner@jonathangardner.net>
(was jgardn@alumni.washington.edu)
Live Free, Use Linux!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (GNU/Linux)

iD8DBQE++z9mWgwF3QvpWNwRAmawAKDDzpi9kOyIu88CZaCxVTsCqYQ1uwCgymzr
n6NkA9YggvsuqJcdzmnzpdc=
=rHuV
-----END PGP SIGNATURE-----

From vlindberg at verio.net  Thu Jun 26 14:44:24 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <200306261145.59286.jgardner@jonathangardner.net>
References: <200306250732.15699.jgardner@jonathangardner.net>
	<20030626183642.GB5652@lyra.org>
	<200306261145.59286.jgardner@jonathangardner.net>
Message-ID: <3EFB5B28.2010103@verio.net>

Jonathan Gardner wrote:

> The problem I see now: How to communicate between all of the processes 
> that
>
>there are shared objects available, and detail where those shared objects 
>are? I don't think it is possible to create shared objects via mod_python 
>before the processes are seperated. Even if it was, is it possible to 
>transfer references to those shared objects to each process?
>
>The only solution I see right now is to have some central repository that any 
>process can access and declare the existence of shared objects, their 
>location, and whatever else is needed. Other processes can read the 
>repository and find currently existing shared objects by a unique string.
>

I think that the nicest solution (in terms of API, at least) would be to 
have an explicit namespace that is instantiated when mod_python is first 
loaded.  Applications could then access this shared namespace by 
importing it; anything declared in the namespace would be automatically 
shared.

For example.

[in code_run from mod_python]

from mod_python import apache.shared as shared

shared.myvar = 'something here'

if not hasattr(shared, 'anothervar'): shared.anothervar = 'something else'

it could be an option declared in the httpd.conf, optionally specifying 
a type of backing store:

<PythonOption shared-memory> # just uses a piece of memory
or
<PythonOption shared-memory mmapstorage file="shared.dat">
or
<PythonOption shared-memory berkeleystorage file="shared.db">
or
<PythonOption shared-memory zodbstorage file="shared.zodb">

VanL

From jack_diederich at email.com  Thu Jun 26 18:58:25 2003
From: jack_diederich at email.com (Jack Diederich)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Using shared memory to do global persistence
Message-ID: <20030626235825.19765.qmail@email.com>

From: VanL <vlindberg@verio.net>
> I think that the nicest solution (in terms of API, at least) would be to 
> have an explicit namespace that is instantiated when mod_python is first 
> loaded.  Applications could then access this shared namespace by 
> importing it; anything declared in the namespace would be automatically 
> shared.
> 
> For example.
> from mod_python import apache.shared as shared
> 
> shared.myvar = 'something here'
> 

In the future setting variables in other module spaces may be
outlawed in python.  Treating modules like classes/objects
is also strongly discouraged.

I think your use of dicts is dead on, something like:
def do_calc():
  cache = mod_python.shared
  if ('foo' not in cache):
    cache['foo'] = 'bar'
  return cache['foo']

As I mentioned during the long thread on what frameworks
should do, we could add two dicts to mod_python,
mod_python.page_cache # caching dict created per-request
mod_python.perm_cache # cache valid accross all processes for ever

perm_cache could actually lie and just keep the last X least
recently used entries, but the main idea is that it is long
lasting and valid accross all processes.  An intermediate
mod_python.proc_cache that is similarly 'permenent' for the
life of the process, but only caches values locally to the
current process might be useful in a pure-forking server
because it doesn't have to worry about locking.  If you are
threading you have to do locking anyway, so perm_cache is
more useful.

-jack


-- 
__________________________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup

From ronwalf at wam.umd.edu  Thu Jun 26 21:53:00 2003
From: ronwalf at wam.umd.edu (Ron Alford)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] Disabling restricted execution mode?
Message-ID: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>

Is there a way of disabling restricted user mode in mod_python 2.7.x?  
I'm using some third party libraries, and the rexec seems to be getting in 
the way without any tangible benefits.

Thanks,
-Ron

--
Ron Alford, KB0NUV
http://volus.net/~ronwalf


From mmckerns at its.caltech.edu  Thu Jun 26 20:31:36 2003
From: mmckerns at its.caltech.edu (Michael McKerns)
Date: Fri Jan  9 22:04:00 2004
Subject: [mod_python] I don't understand this error
Message-ID: <Pine.GSO.4.44.0306262030220.2262-100000@sue>

I think the error here has something to do with PyXML or 4Suite, so
this probably isn't an error caused by mod_python, but I don't know
where else to try.  I tried the Python XML-SIG list, and I was told
that this is a common error, and I should ask here.  So here I am...
Anyone recognize this error?

----- Begin Forwarded Message -----
I'm working on a distributed computing project, and I'm trying to
port the server we built to another computer.  On the current server,
our this test code works -- on the new machine it fails...
Apache tests pass, & mod_python tests pass. I get failures on some of
the 4Suite tests.  Any help or advice I can get is greatly appreciated.
Thanks.



OS/BUILD INFO: (NEW)			(OLD)
---------------------------------------------
Red Hat Linux 8.0 3.2-7			Red Hat Linux 7.1 2.96-85
Python 2.2.2-7				Python 2.2.1
PyXML 0.8.2 (without xslt & xpath)      PyXML 0.8.0 (with xslt & xpath)
4Suite 1.0a1				4Suite 0.10.1-1
httpd 2.0.40-11.5			apache 1.3.22-5.7.1
mod_python 3.0.3			mod_python 2.7.1-1
pycrypto 1.9a6				pycrypto 1.9a3
xmlrpclib 1.0.1				xmlrpclib 1.0.1
jonpy 0.05				jonpy 0.04
---------------------------------------------



TEST CODE:
---------------------------------------------
#! /usr/bin/env python
#################################
# pyweb.py
# testing python web handler
#################################

import jon.session as session
import jon.cgi
import jon.modpy as modpy
import xmlrpclib
import sys

# without the next line, this test works.
from xml.dom.ext.reader.Sax2 import FromXml

from mod_python import apache

def handler(req):
        req.content_type = "text/plain"
        req.write("Hello World Wide Web!")
        return apache.OK
---------------------------------------------



CHANGES TO HTTPD.CONF
---------------------------------------------
LoadModule python_module modules/mod_python.so

<Directory /home/mmckerns/public_html>
        AddHandler python-program .py
        PythonHandler pyweb
        PythonPath "sys.path+['/home/mmckerns/public_html']"
        PythonDebug On
</Directory>
---------------------------------------------



ERRORS PRODUCED:
---------------------------------------------
Mod_python error: "PythonHandler pyweb"

Traceback (most recent call last):

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 320,
in HandlerDispatch
    module = import_module(module_name, config)

  File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 499,
in import_module
    module = imp.load_module(mname, f, p, d)

  File "/home/mmckerns/public_html/pyweb.py", line 9, in ?
    from xml.dom.ext.reader.Sax2 import FromXml

  File "/usr/lib/python2.2/site-packages/_xmlplus/dom/ext/reader/__init__.py",
line 21, in ?
    encoder = codecs.lookup("utf-8")[0] # encode,decode,reader,writer

  File "/var/tmp/python-2.2.2-root/usr/lib/python2.2/encodings/__init__.py",
line 51, in search_function

RuntimeError: cannot unmarshal code objects in restricted execution mode
---------------------------------------------



Please speak slowly, so even I can understand...
I'm Mat.Sci., not Comp.Sci.

---

Mike McKerns
Caltech Materials Science
mmckerns@caltech.edu




From big.stick at bol.com.br  Fri Jun 27 01:09:50 2003
From: big.stick at bol.com.br (Big Stick)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] I don't understand this error
In-Reply-To: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
References: <Pine.GSO.4.44.0306262030220.2262-100000@sue>
Message-ID: <1595782234.20030627010950@bol.com.br>

Friday, June 27, 2003, 12:31:36 AM, you wrote:

MM> (...) Anyone recognize this error? (...)
MM> RuntimeError: cannot  unmarshal code objects in restricted
MM> execution mode 

I got the same error when using Python 2.2.2 and I was told it was
related to a 'codec registry and Python embedding problem'. It seems
that it's fixed on Python 2.3.

HTH

-- stick


From grisha at modpython.org  Fri Jun 27 00:40:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306261328320.8295-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030627003659.B86123@onyx.ispol.com>



On Thu, 26 Jun 2003, Robert Sanderson wrote:

> However, the connection object is a little too high level ... are there
> plans for implementing a lower level 'socket' like interface, rather than
> a blocking line or character reader?  The mod_perl module has this sort of
> interface for example (AFAICT)
>
> For example, I need to be able to consume all of the data currently
> waiting into one chunk to process ... which may or may not end in a
> linebreak character, can be of arbitrary length and the connection
> doesn't close after sending.  So I can't use either read() or readline(),
> with or without arguments :/

I'm curious what mod_perl folks are doing, I haven't looked at it.

Unless I'm mising something, the only way you can deal with this kind of
data is read a character at a time.

(Or non-blocking IO, but off the top of my head I don't even know if
Apache supports it)

Grisha
From grisha at modpython.org  Fri Jun 27 00:48:00 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] Disabling restricted execution mode?
In-Reply-To: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
References: <Pine.LNX.4.44.0306262149330.18972-100000@volus.net>
Message-ID: <20030627004441.G86123@onyx.ispol.com>


Appearance of restricted mode is a bug - mod_python doesn't use restricted
mode, but it appears this way because the way Python knows that we're
running in restricted mode is by comparing frame pointers (iirc), and they
happen to be different sometimes (but I don't remember now exactly why).

I think if you upgrade to a newer version of Python it will go away.

Grisha

On Thu, 26 Jun 2003, Ron Alford wrote:

> Is there a way of disabling restricted user mode in mod_python 2.7.x?
> I'm using some third party libraries, and the rexec seems to be getting in
> the way without any tangible benefits.
>
> Thanks,
> -Ron
>
> --
> Ron Alford, KB0NUV
> http://volus.net/~ronwalf
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From vlindberg at verio.net  Fri Jun 27 09:02:51 2003
From: vlindberg at verio.net (VanL)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] Using shared memory to do global persistence
In-Reply-To: <20030626235825.19765.qmail@email.com>
References: <20030626235825.19765.qmail@email.com>
Message-ID: <3EFC5C9B.6060703@verio.net>

Jack Diederich wrote:

> In the future setting variables in other module spaces may be
>
>outlawed in python.  Treating modules like classes/objects
>is also strongly discouraged.
>

Hmm. But who said that "shared" had to be a module?  It could just as 
easily be an instantiation of a class that is instantiated when 
mod_python starts.  That might actually make more sense, as someone 
implementing a shared module would only need to override the __getattr__ 
and __setattr__ hooks.

For example, in the mod_python initialization:

if options.has_key('shared-memory'):
    global shared
    shared = sharedmemoryimplementation()

The rest of the code I provided when then work unchanged.  It doesn't 
have to be a module, just a *namespace*.

>mod_python.page_cache # caching dict created per-request
>mod_python.perm_cache # cache valid accross all processes for ever
>

This is a good idea.  +1.

VanL

From azaroth at liverpool.ac.uk  Mon Jun 30 14:14:45 2003
From: azaroth at liverpool.ac.uk (Robert Sanderson)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <20030627003659.B86123@onyx.ispol.com>
Message-ID: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>

On Fri, 27 Jun 2003, Gregory (Grisha) Trubetskoy wrote:
> On Thu, 26 Jun 2003, Robert Sanderson wrote:

> > However, the connection object is a little too high level ... are there
> > plans for implementing a lower level 'socket' like interface, rather than
> > a blocking line or character reader?  The mod_perl module has this sort of
> > interface for example (AFAICT)
> > For example, I need to be able to consume all of the data currently
> > waiting into one chunk to process ... which may or may not end in a

> I'm curious what mod_perl folks are doing, I haven't looked at it.

I'm by no means an expert, in fact I've only just started looking at the 
connection handling stuff in Apache, but:

http://perl.apache.org/docs/2.0/api/Apache/Filter.html#Streaming_Filter_API

Read
  $f->read(my $buffer, $read_len);
Reads at most $read_len characters into $buffer. It returns a true value 
as long as it had something to read, and a false value otherwise.


> Unless I'm mising something, the only way you can deal with this kind of
> data is read a character at a time.
> (Or non-blocking IO, but off the top of my head I don't even know if
> Apache supports it)

There's a flag: APR_NONBLOCK_READ that can be passed to apr_bucket_read()

Have a look at:
  http://www-106.ibm.com/developerworks/linux/library/l-apache/
for example  (Which uses mod_python as an example :) )

Rob

-- 
      ,'/:.          Rob Sanderson (azaroth@liverpool.ac.uk)
    ,'-/::::.        http://www.o-r-g.org/~azaroth/
  ,'--/::(@)::.      Special Collections and Archives, extension 3142
,'---/::::::::::.    Nebmedes:  telnet: nebmedes.o-r-g.org 7777
____/:::::::::::::.                WWW:  http://nebmedes.o-r-g.org:8000/
I L L U M I N A T I



From grisha at modpython.org  Mon Jun 30 09:42:13 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] ConnectionHandler sigsegv (fwd)
In-Reply-To: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
References: <Pine.LNX.4.44.0306271329470.14265-100000@gondolin.hist.liv.ac.uk>
Message-ID: <20030630092522.B53253@onyx.ispol.com>



On Mon, 30 Jun 2003, Robert Sanderson wrote:

> Read
>   $f->read(my $buffer, $read_len);
> Reads at most $read_len characters into $buffer. It returns a true value
> as long as it had something to read, and a false value otherwise.

This looks like a filter read, mod_python's behaves in the same way. But
filter semantics are different, because filters aren't called unless there
is something to read.

I know that there is the APR_NONBLOCK_READ flag, but it isn't very useful,
since it would mean that your program would have to read in a loop wasting
cpu time until it has what it needs.

The normal way of dealing with this sort of thing is by calling select()
on a socket which will then call your function when there is anything to
read. I don't know whether APR provides this.

I think your only option is to read a byte at a time, making sure that
when you receivie a complete frame/packet/whatever you stop reading so as
to not block indefinitely.

Grisha

From michael.medland at acterna.com  Mon Jun 30 17:01:49 2003
From: michael.medland at acterna.com (Michael Medland)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] Mod_python xml parsing problem
Message-ID: <OF783867B1.3D0B6EBD-ONC1256D55.00574BE1-80256D55.005D62D6@eng.eni.wago.de>

Hi, I am currently using Python 2.2.3, apache 1.3.27 and mod_python 2.7.8. 
Under Solaris 8 on a sun.
The configuration appears to be working fine but, the problem that i am 
having is in parsing xml files, when i do for example:

xmlfile = minidom.parse(file)
root = xmlfile.childNodes

It creates a dom instance but it contains nothing at all, and root returns 
a 'nonetype'. I believe that it may be an encoding problem but i dont know 
how to fix it.
When i tried the same code using cgi instead of mod_python it worked fine.
Any suggestions would be greatly appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/29604ed9/attachment-0003.htm
From jakubec at san.rr.com  Mon Jun 30 21:06:36 2003
From: jakubec at san.rr.com (D George Jakubec)
Date: Fri Jan  9 22:04:01 2004
Subject: [mod_python] STDF Binary Datalog Reader
Message-ID: <001801c33f86$2d84a0a0$0200a8c0@gene202>

I got an STDF version 4.0 binary datalog file reader
from http://www.datalogs.org that translates those
nasty binary files to plain ASCII text files so that
I can see what is inside. The reader consists of
some C code and API library routines.

The reader was then wrapped within a python code
to automate some features during ATE generation
process. The python interfaces with Oracle database
to put some data from the ASCII file that was
generated by the reader. The code runs fine on Unix
System V release 4. It also runs fine on Sun Solaris 9.
Tried it on NT 4 SP 5 and Windows 2000 Professional
with SP 3 installed. No problem on MS platforms either.
Don't need to worry about Lunix, for now.

Ok, so far good. We know we got some good python on NT.
We get into whether or not I installed the mod_python.dll
correctly I don't know if this is the normal behavior.
The url address I point to the html code is a form.
It should call a script I wrote, myscript.py. I get the text
from myscript.py to come up on my browser. This is
normal. When I place my cursor in the url address
(pointing to F:\asteroid\home\webserver\cgi-bin\myscript.py)
and hit enter the script which outputs html was actually run?
i.e. it quickly closes. Usually, the perl script gets a message
that it didn't run.

My DSO in conf on NT system looks like this
#
# Dynamic Shared Object (DSO) Support
#
LoadModule anon_auth_module modules/ApacheModuleAuthAnon.dll
LoadModule cern_meta_module modules/ApacheModuleCERNMeta.dll
LoadModule digest_module modules/ApacheModuleDigest.dll
LoadModule expires_module modules/ApacheModuleExpires.dll
LoadModule headers_module modules/ApacheModuleHeaders.dll
LoadModule proxy_module modules/ApacheModuleProxy.dll
LoadModule rewrite_module modules/ApacheModuleRewrite.dll
LoadModule speling_module modules/ApacheModuleSpeling.dll
LoadModule status_module modules/ApacheModuleStatus.dll
LoadModule usertrack_module modules/ApacheModuleUserTrack.dll
LoadModule python_module modules/mod_python.dll
ExtendedStatus On

.. the rest of the file is pretty much standard.
-dj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20030630/94a11f98/attachment-0003.htm
