From clodoaldo.pinto.neto at gmail.com  Fri Dec  1 08:03:27 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Fri Dec  1 08:04:02 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <1164946245.5080@dscpl.user.openhosting.com>
References: <1164946245.5080@dscpl.user.openhosting.com>
Message-ID: <a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>

2006/12/1, Graham Dumpleton <grahamd@dscpl.com.au>:
>
> The third option is to not use a package. If you created the package merely
> out of convenience to provide a namespace for the modules, this should
> be okay. Thus, remove the empty __init__.py file so that it isn't actually a
> package anymore. Then, change:
>
>   from lib import HTMLBuilder
>
> to:
>
>   from mod_python import apache
>
>   HTMLBuilder = apache.import_module('~/lib/HTMLBuilder.py')
>
> This is using the mod_python module importer directly to import the module
> by path. The '~/' prefix to the path is special and is understood by the
> module importer to be the directory that the active Python*Handler directive
> was specified for.
>
>
> A fourth option is to again remove the package __init__.py file so it isn't
> really a package anymore, but also move the directory to somewhere outside
> of the document tree. In order to find the modules though, the PythonPath
> directive is NOT used and instead the new module importers own search
> path is set. For example:
>
>   PythonOption mod_python.importer.path "['/some/path/lib']"
>
> The module importer path SHOULD NOT mention sys.path, it should instead
> be a distinct list of directories where only the new module importer will look.
> Because the 'lib' directory is include and the contents of the directory will be
> searched, can just say:
>
>   import HTMLBuilder
>
> If for some reason you wanted to do it this way, but not move the directory
> outside of the document tree, you could also say:
>
>   PythonOption mod_python.importer.path "['~/lib']"
>
> Here the '~/' prefix is again used so you don't have to have an absolute path.
> When used it will be expanded to the directory the handler was specified for.
>
>
> Anyway, hope I haven't confused you too much.
>

Your message is not confusing. It came in a good time and it clears
some confusion i had. But something is not working for me. Using
mod_python 3.3 in FC6.

I'm trying to import a module with both the third and fourth
techniques you described but I'm having errors.

This is the Virtual host config:

    ServerName carconsumption.s0
    DocumentRoot /var/www/html/carconsumption.com
    SetHandler mod_python
    PythonHandler mod_python.publisher
    PythonDebug On
    PythonOption mod_python.importer.path "['~/mod']"
    PythonImport db_connection carconsumption.s0

The module "constants" is in the mod directory under the document root:

[cpn@s0 mod]$ pwd
/var/www/html/carconsumption.com/mod
[cpn@s0 mod]$ ll constants.py
-rwxr----- 1 cpn apache 28675 Nov 29 17:42 constants.py
[cpn@s0 mod]$ ll -d ../mod
drwxrws--- 2 cpn apache 4096 Dec  1 12:26 ../mod

Third technique. index.py contains:

from mod_python import apache
C = apache.import_module('~/mod/constants.py')

The error output:

MOD_PYTHON ERROR

ProcessId:      24982
Interpreter:    'carconsumption.s0'

URI:            '/'
Location:       None
Directory:      None
Filename:       '/var/www/html/carconsumption.com/index.py'
PathInfo:       ''

Phase:          'PythonHandler'
Handler:        'mod_python.publisher'

Traceback (most recent call last):

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1522, in HandlerDispatch
    default=default_handler, arg=req, silent=hlist.silent)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1227, in _process_target
    result = _execute_target(config, req, object, arg)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1126, in _execute_target
    result = object(arg)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
line 204, in handler
    module = page_cache[req]

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1057, in __getitem__
    return import_module(req.filename)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
294, in import_module
    log, import_path)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
678, in import_module
    execfile(file, module.__dict__)

  File "/var/www/html/carconsumption.com/index.py", line 4, in ?
    C = apache.import_module('~/mod/constants.py')

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
302, in import_module
    return __import__(module_name, {}, {}, ['*'])

ImportError: No module named ~/mod/constants.py


MODULE CACHE DETAILS

Accessed:       Fri Dec  1 12:33:24 2006
Generation:     0

_mp_96eec165c095033cec4187d8d6982912 {
  FileName:     '/var/www/html/carconsumption.com/index.py'
  Instance:     1 [IMPORT]
  Generation:   0 [ERROR]
  Modified:     Fri Dec  1 12:31:11 2006
}

When i give the absolute path it works:
from mod_python import apache
C = apache.import_module('/var/www/html/carconsumption.com/mod/constants.py')

Fourth technique. index.py contains:

import constants as C

The error:

MOD_PYTHON ERROR

ProcessId:      24983
Interpreter:    'carconsumption.s0'

URI:            '/'
Location:       None
Directory:      None
Filename:       '/var/www/html/carconsumption.com/index.py'
PathInfo:       ''

Phase:          'PythonHandler'
Handler:        'mod_python.publisher'

Traceback (most recent call last):

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1522, in HandlerDispatch
    default=default_handler, arg=req, silent=hlist.silent)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1227, in _process_target
    result = _execute_target(config, req, object, arg)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1126, in _execute_target
    result = object(arg)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
line 204, in handler
    module = page_cache[req]

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1057, in __getitem__
    return import_module(req.filename)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
294, in import_module
    log, import_path)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
678, in import_module
    execfile(file, module.__dict__)

  File "/var/www/html/carconsumption.com/index.py", line 3, in ?
    import constants as C

ImportError: No module named constants


MODULE CACHE DETAILS

Accessed:       Fri Dec  1 12:34:55 2006
Generation:     0

_mp_96eec165c095033cec4187d8d6982912 {
  FileName:     '/var/www/html/carconsumption.com/index.py'
  Instance:     1 [IMPORT]
  Generation:   0 [ERROR]
  Modified:     Fri Dec  1 12:34:19 2006
}


Regards,
-- 
Clodoaldo Pinto Neto
From jpg at jgassociates.ca  Fri Dec  1 11:09:06 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Dec  1 11:08:39 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
Message-ID: <457053A2.4010001@jgassociates.ca>

Clodoaldo wrote:
> 2006/12/1, Graham Dumpleton <grahamd@dscpl.com.au>:
>>
>> The third option is to not use a package. If you created the package 
>> merely
>> out of convenience to provide a namespace for the modules, this should
>> be okay. Thus, remove the empty __init__.py file so that it isn't 
>> actually a
>> package anymore. Then, change:
>>
>>   from lib import HTMLBuilder
>>
>> to:
>>
>>   from mod_python import apache
>>
>>   HTMLBuilder = apache.import_module('~/lib/HTMLBuilder.py')
>>
>> This is using the mod_python module importer directly to import the 
>> module
>> by path. The '~/' prefix to the path is special and is understood by the
>> module importer to be the directory that the active Python*Handler 
>> directive
>> was specified for.
>>
>>
>> A fourth option is to again remove the package __init__.py file so it 
>> isn't
>> really a package anymore, but also move the directory to somewhere 
>> outside
>> of the document tree. In order to find the modules though, the PythonPath
>> directive is NOT used and instead the new module importers own search
>> path is set. For example:
>>
>>   PythonOption mod_python.importer.path "['/some/path/lib']"
>>
>> The module importer path SHOULD NOT mention sys.path, it should instead
>> be a distinct list of directories where only the new module importer 
>> will look.
>> Because the 'lib' directory is include and the contents of the 
>> directory will be
>> searched, can just say:
>>
>>   import HTMLBuilder
>>
>> If for some reason you wanted to do it this way, but not move the 
>> directory
>> outside of the document tree, you could also say:
>>
>>   PythonOption mod_python.importer.path "['~/lib']"
>>
>> Here the '~/' prefix is again used so you don't have to have an 
>> absolute path.
>> When used it will be expanded to the directory the handler was 
>> specified for.
>>
>>
>> Anyway, hope I haven't confused you too much.
>>
> 
> Your message is not confusing. It came in a good time and it clears
> some confusion i had. But something is not working for me. Using
> mod_python 3.3 in FC6.
> 
> I'm trying to import a module with both the third and fourth
> techniques you described but I'm having errors.
> 
> This is the Virtual host config:
> 
>    ServerName carconsumption.s0
>    DocumentRoot /var/www/html/carconsumption.com
>    SetHandler mod_python
>    PythonHandler mod_python.publisher
>    PythonDebug On
>    PythonOption mod_python.importer.path "['~/mod']"
>    PythonImport db_connection carconsumption.s0
> 
> The module "constants" is in the mod directory under the document root:
> 
> [cpn@s0 mod]$ pwd
> /var/www/html/carconsumption.com/mod
> [cpn@s0 mod]$ ll constants.py
> -rwxr----- 1 cpn apache 28675 Nov 29 17:42 constants.py
        ^^^^^
        possible permission problem - apache can't read this file unless 
your apache process is running as user cpn.

> [cpn@s0 mod]$ ll -d ../mod
> drwxrws--- 2 cpn apache 4096 Dec  1 12:26 ../mod
> 

> 
> ImportError: No module named ~/mod/constants.py

Which makes sense - if apache can't read it, mod_python can't import it.

Jim
From clodoaldo.pinto.neto at gmail.com  Fri Dec  1 11:28:18 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Fri Dec  1 11:28:22 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <457053A2.4010001@jgassociates.ca>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
	<457053A2.4010001@jgassociates.ca>
Message-ID: <a595de7a0612010828y52178189v24afde6da77ce844@mail.gmail.com>

2006/12/1, Jim Gallacher <jpg@jgassociates.ca>:
> Clodoaldo wrote:
> > 2006/12/1, Graham Dumpleton <grahamd@dscpl.com.au>:
> >>
> >> The third option is to not use a package. If you created the package
> >> merely
> >> out of convenience to provide a namespace for the modules, this should
> >> be okay. Thus, remove the empty __init__.py file so that it isn't
> >> actually a
> >> package anymore. Then, change:
> >>
> >>   from lib import HTMLBuilder
> >>
> >> to:
> >>
> >>   from mod_python import apache
> >>
> >>   HTMLBuilder = apache.import_module('~/lib/HTMLBuilder.py')
> >>
> >> This is using the mod_python module importer directly to import the
> >> module
> >> by path. The '~/' prefix to the path is special and is understood by the
> >> module importer to be the directory that the active Python*Handler
> >> directive
> >> was specified for.
> >>
> >>
> >> A fourth option is to again remove the package __init__.py file so it
> >> isn't
> >> really a package anymore, but also move the directory to somewhere
> >> outside
> >> of the document tree. In order to find the modules though, the PythonPath
> >> directive is NOT used and instead the new module importers own search
> >> path is set. For example:
> >>
> >>   PythonOption mod_python.importer.path "['/some/path/lib']"
> >>
> >> The module importer path SHOULD NOT mention sys.path, it should instead
> >> be a distinct list of directories where only the new module importer
> >> will look.
> >> Because the 'lib' directory is include and the contents of the
> >> directory will be
> >> searched, can just say:
> >>
> >>   import HTMLBuilder
> >>
> >> If for some reason you wanted to do it this way, but not move the
> >> directory
> >> outside of the document tree, you could also say:
> >>
> >>   PythonOption mod_python.importer.path "['~/lib']"
> >>
> >> Here the '~/' prefix is again used so you don't have to have an
> >> absolute path.
> >> When used it will be expanded to the directory the handler was
> >> specified for.
> >>
> >>
> >> Anyway, hope I haven't confused you too much.
> >>
> >
> > Your message is not confusing. It came in a good time and it clears
> > some confusion i had. But something is not working for me. Using
> > mod_python 3.3 in FC6.
> >
> > I'm trying to import a module with both the third and fourth
> > techniques you described but I'm having errors.
> >
> > This is the Virtual host config:
> >
> >    ServerName carconsumption.s0
> >    DocumentRoot /var/www/html/carconsumption.com
> >    SetHandler mod_python
> >    PythonHandler mod_python.publisher
> >    PythonDebug On
> >    PythonOption mod_python.importer.path "['~/mod']"
> >    PythonImport db_connection carconsumption.s0
> >
> > The module "constants" is in the mod directory under the document root:
> >
> > [cpn@s0 mod]$ pwd
> > /var/www/html/carconsumption.com/mod
> > [cpn@s0 mod]$ ll constants.py
> > -rwxr----- 1 cpn apache 28675 Nov 29 17:42 constants.py
>         ^^^^^
>         possible permission problem - apache can't read this file unless
> your apache process is running as user cpn.
>

Yes, apache can read it. apache is the group to which the file is
assigned and a 740 permission, as it is, gives the group the reading
right. To make sure I chmoded it to 777 and still the same error.

Regards,
-- 
Clodoaldo Pinto Neto
From jpg at jgassociates.ca  Fri Dec  1 11:40:49 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Dec  1 11:40:12 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <a595de7a0612010828y52178189v24afde6da77ce844@mail.gmail.com>
References: <1164946245.5080@dscpl.user.openhosting.com>	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>	<457053A2.4010001@jgassociates.ca>
	<a595de7a0612010828y52178189v24afde6da77ce844@mail.gmail.com>
Message-ID: <45705B11.9000406@jgassociates.ca>

Clodoaldo wrote:
> 2006/12/1, Jim Gallacher <jpg@jgassociates.ca>:
>> Clodoaldo wrote:
>> > 2006/12/1, Graham Dumpleton <grahamd@dscpl.com.au>:
>> >>
>> >> The third option is to not use a package. If you created the package
>> >> merely
>> >> out of convenience to provide a namespace for the modules, this should
>> >> be okay. Thus, remove the empty __init__.py file so that it isn't
>> >> actually a
>> >> package anymore. Then, change:
>> >>
>> >>   from lib import HTMLBuilder
>> >>
>> >> to:
>> >>
>> >>   from mod_python import apache
>> >>
>> >>   HTMLBuilder = apache.import_module('~/lib/HTMLBuilder.py')
>> >>
>> >> This is using the mod_python module importer directly to import the
>> >> module
>> >> by path. The '~/' prefix to the path is special and is understood 
>> by the
>> >> module importer to be the directory that the active Python*Handler
>> >> directive
>> >> was specified for.
>> >>
>> >>
>> >> A fourth option is to again remove the package __init__.py file so it
>> >> isn't
>> >> really a package anymore, but also move the directory to somewhere
>> >> outside
>> >> of the document tree. In order to find the modules though, the 
>> PythonPath
>> >> directive is NOT used and instead the new module importers own search
>> >> path is set. For example:
>> >>
>> >>   PythonOption mod_python.importer.path "['/some/path/lib']"
>> >>
>> >> The module importer path SHOULD NOT mention sys.path, it should 
>> instead
>> >> be a distinct list of directories where only the new module importer
>> >> will look.
>> >> Because the 'lib' directory is include and the contents of the
>> >> directory will be
>> >> searched, can just say:
>> >>
>> >>   import HTMLBuilder
>> >>
>> >> If for some reason you wanted to do it this way, but not move the
>> >> directory
>> >> outside of the document tree, you could also say:
>> >>
>> >>   PythonOption mod_python.importer.path "['~/lib']"
>> >>
>> >> Here the '~/' prefix is again used so you don't have to have an
>> >> absolute path.
>> >> When used it will be expanded to the directory the handler was
>> >> specified for.
>> >>
>> >>
>> >> Anyway, hope I haven't confused you too much.
>> >>
>> >
>> > Your message is not confusing. It came in a good time and it clears
>> > some confusion i had. But something is not working for me. Using
>> > mod_python 3.3 in FC6.
>> >
>> > I'm trying to import a module with both the third and fourth
>> > techniques you described but I'm having errors.
>> >
>> > This is the Virtual host config:
>> >
>> >    ServerName carconsumption.s0
>> >    DocumentRoot /var/www/html/carconsumption.com
>> >    SetHandler mod_python
>> >    PythonHandler mod_python.publisher
>> >    PythonDebug On
>> >    PythonOption mod_python.importer.path "['~/mod']"
>> >    PythonImport db_connection carconsumption.s0
>> >
>> > The module "constants" is in the mod directory under the document root:
>> >
>> > [cpn@s0 mod]$ pwd
>> > /var/www/html/carconsumption.com/mod
>> > [cpn@s0 mod]$ ll constants.py
>> > -rwxr----- 1 cpn apache 28675 Nov 29 17:42 constants.py
>>         ^^^^^
>>         possible permission problem - apache can't read this file unless
>> your apache process is running as user cpn.
>>
> 
> Yes, apache can read it. apache is the group to which the file is
> assigned and a 740 permission, as it is, gives the group the reading
> right. To make sure I chmoded it to 777 and still the same error.

Oh man, I think I need new glasses or a better brain. I completely 
missed the "r" permission for the group.

Sorry for the noise.
Jim

From brunson at brunson.com  Fri Dec  1 10:49:08 2006
From: brunson at brunson.com (Eric Brunson)
Date: Fri Dec  1 12:00:04 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <1164946245.5080@dscpl.user.openhosting.com>
References: <1164946245.5080@dscpl.user.openhosting.com>
Message-ID: <45704EF4.1060707@brunson.com>

Graham Dumpleton wrote:
> Eric Brunson wrote ..
>   
>> Eric Brunson wrote:
>>     
>>> I just grabbed the latest SVN snapshot and installed it and I'm having
>>> a problem with importing now.
>>>
>>> Using the publisher handler I'm trying to get my app from 3.1.4 going,
>>> but 3.3 no longer seems to want to find my lib/ subdirectory.  I've 
>>> added the following to my .htaccess:
>>>
>>> PythonPath "['.']+sys.path"
>>>
>>> I can display the sys.path in an app and it includes ".", but it just
>>> doesn't find a subdirectory "lib"
>>>
>>> Is there something new with the module loading that I should be aware
>>>       
>> of?
>>
>> Sorry.  Got a little quick on the send...  Here's the error message:
>>
>>   File "/usr/local/www/data/deviceWebGui/erictest.py", line 3, in <module>
>>     from lib import HTMLBuilder
>>
>> ImportError: No module named lib
>>
>> And lib is a subdirectory of /usr/local/www/data/deviceWebGui/ 
>>     
>
> The basic reason why this doesn't work for you is that in the old importer,
> the directory the Python*Handler directive was specified for was automatically
> added to sys.path, but in the new module importer this is no longer done.
>
> The reason that the directory was added to sys.path in the old importer
> was because the standard Python module import mechanism was used
> underneath to find modules and without the directory in sys.path, it would
> not find them.

[ snip ]
>
> If not, because publisher is used, someone could invoke code in the lib
> subdirectory otherwise.
>
> Anyway, hope I haven't confused you too much. 
>
> Graham
>
>
>   

Not confusing at all, thanks for taking the time to write such an in 
depth explanation.  We should probably add the entire text of that post 
to the WiKi.  I'll do that later today, with your consent.

Sincerly,
e.


From brunson at brunson.com  Fri Dec  1 13:42:18 2006
From: brunson at brunson.com (Eric Brunson)
Date: Fri Dec  1 13:42:23 2006
Subject: [mod_python] Testing for mod_python
Message-ID: <4570778A.3060803@brunson.com>

I've converted my code over to use the 3.3 PythonOption mod_python.path, 
but our regression tests run outside of mod_python, so I need to 
conditionally mess with the sys.path.

I've come up with this:

try:
    # throws an exception when trying to load '_apache' outside mod_python
    from mod_python import apache
except ImportError:
    import sys
    sys.path.append( './lib' )

and it works fine, but is there a better way to do this check?

Thanks,
e.

From deron.meranda at gmail.com  Fri Dec  1 14:18:16 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Fri Dec  1 14:18:34 2006
Subject: [mod_python] Testing for mod_python
In-Reply-To: <4570778A.3060803@brunson.com>
References: <4570778A.3060803@brunson.com>
Message-ID: <5c06fa770612011118h2d47b814n72e03332658cd109@mail.gmail.com>

On 12/1/06, Eric Brunson <brunson@brunson.com> wrote:
> I've converted my code over to use the 3.3 PythonOption mod_python.path,
> but our regression tests run outside of mod_python, so I need to
> conditionally mess with the sys.path.
>
> I've come up with this:
>
> try:
>     # throws an exception when trying to load '_apache' outside mod_python
>     from mod_python import apache
> except ImportError:
>     import sys
>     sys.path.append( './lib' )
>
> and it works fine, but is there a better way to do this check?

Trapping ImportErrors is actually a pretty reasonable way to handle this.
I'm not aware of any future plans that would ever allow the import to
succeed outside of an Apache environment, so I think this is a safe
thing to do.
-- 
Deron Meranda
From deron.meranda at gmail.com  Fri Dec  1 14:28:00 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Fri Dec  1 14:28:08 2006
Subject: [mod_python] wiki change notifications
In-Reply-To: <456F6DB0.3090101@jgassociates.ca>
References: <456F6DB0.3090101@jgassociates.ca>
Message-ID: <5c06fa770612011127t3e9e1d11sbb06ff99f4c1928b@mail.gmail.com>

On 11/30/06, Jim Gallacher <jpg@jgassociates.ca> wrote:
> To everyone interested in working on the wiki I just want to make you
> aware that you can receive change notifications by subscribing to
> python-cvs@httpd.apache.org. That list gets notifications for both the
> wiki and svn commits.
>
> Subscribe by sending a message to python-cvs-subscribe@httpd.apache.org.

There are also some other options.  You can subscribe in
digest-form so you just get daily summaries rather than lots of
individual messages.  Also you can subscribe to just specific
wiki pages rather than getting notifications about everything.

I've tried to put together a more complete set of mailing list
instructions up on the wiki,

  http://wiki.apache.org/mod_python/Mailing_lists
-- 
Deron Meranda
From grahamd at dscpl.com.au  Fri Dec  1 16:41:05 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec  1 16:41:16 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
Message-ID: <63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>


On 02/12/2006, at 12:03 AM, Clodoaldo wrote:

> I'm trying to import a module with both the third and fourth
> techniques you described but I'm having errors.
>
> This is the Virtual host config:
>
>    ServerName carconsumption.s0
>    DocumentRoot /var/www/html/carconsumption.com
>    SetHandler mod_python
>    PythonHandler mod_python.publisher
>    PythonDebug On
>    PythonOption mod_python.importer.path "['~/mod']"
>    PythonImport db_connection carconsumption.s0
>
> The module "constants" is in the mod directory under the document  
> root:
>
> [cpn@s0 mod]$ pwd
> /var/www/html/carconsumption.com/mod
> [cpn@s0 mod]$ ll constants.py
> -rwxr----- 1 cpn apache 28675 Nov 29 17:42 constants.py
> [cpn@s0 mod]$ ll -d ../mod
> drwxrws--- 2 cpn apache 4096 Dec  1 12:26 ../mod
>
> Third technique. index.py contains:
>
> from mod_python import apache
> C = apache.import_module('~/mod/constants.py')
>
> The error output:
>
> MOD_PYTHON ERROR
>
> ProcessId:      24982
> Interpreter:    'carconsumption.s0'
>
> URI:            '/'
> Location:       None
> Directory:      None

The '~/' prefix will be replaced with the value of 'Directory' as  
shown here, but it
isn't set because you have the PythonHandler directive outside of any  
Directory
directive or .htaccess file. Thus, it can't know what the handler  
root is. Using:

    DocumentRoot /var/www/html/carconsumption.com
    <Directory /var/www/html/carconsumption.com>
    SetHandler mod_python
    PythonHandler mod_python.publisher
    PythonDebug On
    PythonOption mod_python.importer.path "['~/mod']"
    </Directory>

should work, as will:

    DocumentRoot /var/www/html/carconsumption.com
    SetHandler mod_python
    PythonHandler mod_python.publisher
    PythonDebug On
    PythonOption mod_python.importer.path "['/var/www/html/ 
carconsumption.com/mod']"

Note, when inside a Location directive, '~/' will not work either as  
Location isn't
associated with a directory.

What I have to think about now is whether when both Directory and  
Location
directives aren't being used, that '~/' maps to DocumentRoot. I never  
thought
about this particular scenario.

Graham

> Filename:       '/var/www/html/carconsumption.com/index.py'
> PathInfo:       ''
>
> Phase:          'PythonHandler'
> Handler:        'mod_python.publisher'
>
> Traceback (most recent call last):
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1522, in HandlerDispatch
>    default=default_handler, arg=req, silent=hlist.silent)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1227, in _process_target
>    result = _execute_target(config, req, object, arg)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1126, in _execute_target
>    result = object(arg)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
> line 204, in handler
>    module = page_cache[req]
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1057, in __getitem__
>    return import_module(req.filename)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 294, in import_module
>    log, import_path)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 678, in import_module
>    execfile(file, module.__dict__)
>
>  File "/var/www/html/carconsumption.com/index.py", line 4, in ?
>    C = apache.import_module('~/mod/constants.py')
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 302, in import_module
>    return __import__(module_name, {}, {}, ['*'])
>
> ImportError: No module named ~/mod/constants.py
>
>
> MODULE CACHE DETAILS
>
> Accessed:       Fri Dec  1 12:33:24 2006
> Generation:     0
>
> _mp_96eec165c095033cec4187d8d6982912 {
>  FileName:     '/var/www/html/carconsumption.com/index.py'
>  Instance:     1 [IMPORT]
>  Generation:   0 [ERROR]
>  Modified:     Fri Dec  1 12:31:11 2006
> }
>
> When i give the absolute path it works:
> from mod_python import apache
> C = apache.import_module('/var/www/html/carconsumption.com/mod/ 
> constants.py')
>
> Fourth technique. index.py contains:
>
> import constants as C
>
> The error:
>
> MOD_PYTHON ERROR
>
> ProcessId:      24983
> Interpreter:    'carconsumption.s0'
>
> URI:            '/'
> Location:       None
> Directory:      None
> Filename:       '/var/www/html/carconsumption.com/index.py'
> PathInfo:       ''
>
> Phase:          'PythonHandler'
> Handler:        'mod_python.publisher'
>
> Traceback (most recent call last):
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1522, in HandlerDispatch
>    default=default_handler, arg=req, silent=hlist.silent)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1227, in _process_target
>    result = _execute_target(config, req, object, arg)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1126, in _execute_target
>    result = object(arg)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
> line 204, in handler
>    module = page_cache[req]
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 1057, in __getitem__
>    return import_module(req.filename)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 294, in import_module
>    log, import_path)
>
>  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
> 678, in import_module
>    execfile(file, module.__dict__)
>
>  File "/var/www/html/carconsumption.com/index.py", line 3, in ?
>    import constants as C
>
> ImportError: No module named constants
>
>
> MODULE CACHE DETAILS
>
> Accessed:       Fri Dec  1 12:34:55 2006
> Generation:     0
>
> _mp_96eec165c095033cec4187d8d6982912 {
>  FileName:     '/var/www/html/carconsumption.com/index.py'
>  Instance:     1 [IMPORT]
>  Generation:   0 [ERROR]
>  Modified:     Fri Dec  1 12:34:19 2006
> }
>
>
> Regards,
> -- 
> Clodoaldo Pinto Neto
From clodoaldo.pinto.neto at gmail.com  Fri Dec  1 18:44:52 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Fri Dec  1 18:44:59 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
	<63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
Message-ID: <a595de7a0612011544q66d1bd9ara49de327ecfb8f3b@mail.gmail.com>

2006/12/1, Graham Dumpleton <grahamd@dscpl.com.au>:
>
> >
> > URI:            '/'
> > Location:       None
> > Directory:      None
>
> The '~/' prefix will be replaced with the value of 'Directory' as
> shown here, but it
> isn't set because you have the PythonHandler directive outside of any
> Directory
> directive or .htaccess file. Thus, it can't know what the handler
> root is. Using:
>
>     DocumentRoot /var/www/html/carconsumption.com
>     <Directory /var/www/html/carconsumption.com>
>     SetHandler mod_python
>     PythonHandler mod_python.publisher
>     PythonDebug On
>     PythonOption mod_python.importer.path "['~/mod']"
>     </Directory>
>

Ok, I did it and now this works:

import constants as C

But this does not work:

from mod_python import apache
C = apache.import_module('constants.py')

MOD_PYTHON ERROR

ProcessId:      28816
Interpreter:    'carconsumption.s0'

URI:            '/'
Location:       None
Directory:      None
Filename:       '/var/www/html/carconsumption.com/index.py'
PathInfo:       ''

Phase:          'PythonHandler'
Handler:        'mod_python.publisher'

Traceback (most recent call last):

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1522, in HandlerDispatch
    default=default_handler, arg=req, silent=hlist.silent)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1227, in _process_target
    result = _execute_target(config, req, object, arg)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1126, in _execute_target
    result = object(arg)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
line 204, in handler
    module = page_cache[req]

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
1057, in __getitem__
    return import_module(req.filename)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
294, in import_module
    log, import_path)

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
678, in import_module
    execfile(file, module.__dict__)

  File "/var/www/html/carconsumption.com/index.py", line 4, in ?
    C = apache.import_module('constants.py')

  File "/usr/lib/python2.4/site-packages/mod_python/importer.py", line
302, in import_module
    return __import__(module_name, {}, {}, ['*'])

ImportError: No module named py


MODULE CACHE DETAILS

Accessed:       Fri Dec  1 23:42:04 2006
Generation:     0

_mp_96eec165c095033cec4187d8d6982912 {
  FileName:     '/var/www/html/carconsumption.com/index.py'
  Instance:     1 [IMPORT]
  Generation:   0 [ERROR]
  Modified:     Fri Dec  1 23:36:42 2006
  Children:     '/var/www/html/carconsumption.com/mod/constants.py'
}

_mp_a27b25a9c8e4a572b9b17e5189dec319 {
  FileName:     '/var/www/html/carconsumption.com/mod/constants.py'
  Instance:     1 [IMPORT]
  Generation:   1
  Modified:     Wed Nov 29 17:42:30 2006
  Imported:     Fri Dec  1 23:42:04 2006
}


Regards,
-- 
Clodoaldo Pinto Neto
From clodoaldo.pinto.neto at gmail.com  Fri Dec  1 18:57:32 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Fri Dec  1 18:57:40 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <a595de7a0612011544q66d1bd9ara49de327ecfb8f3b@mail.gmail.com>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
	<63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
	<a595de7a0612011544q66d1bd9ara49de327ecfb8f3b@mail.gmail.com>
Message-ID: <a595de7a0612011557q25ca850bsa5f81f6f29e90885@mail.gmail.com>

2006/12/1, Clodoaldo <clodoaldo.pinto.neto@gmail.com>:
> 2006/12/1, Graham Dumpleton <grahamd@dscpl.com.au>:
> >
> > >
> > > URI:            '/'
> > > Location:       None
> > > Directory:      None
> >
> > The '~/' prefix will be replaced with the value of 'Directory' as
> > shown here, but it
> > isn't set because you have the PythonHandler directive outside of any
> > Directory
> > directive or .htaccess file. Thus, it can't know what the handler
> > root is. Using:
> >
> >     DocumentRoot /var/www/html/carconsumption.com
> >     <Directory /var/www/html/carconsumption.com>
> >     SetHandler mod_python
> >     PythonHandler mod_python.publisher
> >     PythonDebug On
> >     PythonOption mod_python.importer.path "['~/mod']"
> >     </Directory>
> >
>
> Ok, I did it and now this works:
>
> import constants as C
>
> But this does not work:
>
> from mod_python import apache
> C = apache.import_module('constants.py')
>

Changed it to:

from mod_python import apache
C = apache.import_module('~/mod/constants.py')

And it works.

Thanks,
-- 
Clodoaldo Pinto Neto
From jpg at jgassociates.ca  Fri Dec  1 22:59:09 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Dec  1 22:53:28 2006
Subject: [mod_python] note to mod_python wiki contributors
Message-ID: <4570FA0D.4030506@jgassociates.ca>

Howdy,

If you are planning on getting involved in adding content to the wiki 
(or have already started!) you might want to consider joining the 
developer's mailing list. Subscription information can be found on the 
wiki: http://wiki.apache.org/mod_python/Mailing_lists

It's still early in the evolution of our wiki and I suspect that we'll 
have some policy and style issues to discuss. I think such discussions 
are more appropriate to the python-dev list rather than the user list.

Also wiki change notifications sent to python-cvs have python-dev as the 
Reply-To address. Being on the python-dev list will make it easier to 
get feedback to you, the author.

I must say I'm feeling quite energized by what I've seen so far. Heck, I 
might even bang out a couple of pages myself this weekend. :)

Jim
From grahamd at dscpl.com.au  Fri Dec  1 23:22:22 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec  1 23:22:28 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <a595de7a0612011557q25ca850bsa5f81f6f29e90885@mail.gmail.com>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
	<63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
	<a595de7a0612011544q66d1bd9ara49de327ecfb8f3b@mail.gmail.com>
	<a595de7a0612011557q25ca850bsa5f81f6f29e90885@mail.gmail.com>
Message-ID: <FFA71D99-51A9-46FA-907E-7AF49D966275@dscpl.com.au>


On 02/12/2006, at 10:57 AM, Clodoaldo wrote:

>> Ok, I did it and now this works:
>>
>> import constants as C
>>
>> But this does not work:
>>
>> from mod_python import apache
>> C = apache.import_module('constants.py')
>>
>
> Changed it to:
>
> from mod_python import apache
> C = apache.import_module('~/mod/constants.py')
>
> And it works.

The apache.import_module() function is doing double duty in allowing
either a module name or a path for a file (including extension). For a
path it has to be able to be distinguishable from a module or module  
within
package name. Thus, for a path, can only use:

   /some/path/module.py
   ~/some/path/module.py
   ./some/path/module.py
   ../some/path/module.py

For anything else it assumes it is a normal module import. For  
'constants.py'
that thus means it thinks you are wanting to import a submodule  
called 'py'
from a package called 'constants'.

There are a few other quirks with the new importer. The first is that  
when a
path is specified, you don't actually need to use a .py extension.  
This means
for example that the mpservlets package which uses a .mps extension  
could
quite easily be rewritten to use the new module importer rather than  
its own
and get all the benefit of the full depth checks on module reloading.  
In other
words:

   module = apache.import_module("/some/path/servlet.mps")

will work.

This may be useful if you don't want to use a .py extension and want  
to use
something else to hide the fact that Python is being used.

Another strange characteristic of the new module importer, although this
also actually works in more recent Python versions if using __import__ 
(),
although not perhaps on all platforms, is that one can use a '/' to  
refer to a
module name in a subdirectory somewhere on the module search path.

What this means is that if you had used:

   PythonOption mod_python.importer.path "['~/']"

rather than:

   PythonOption mod_python.importer.path "['~/mod']"

you could then have said:

   apache.import_module('mod/constants')

Note that I haven't used a '.py' extension. In some way this is like  
having a
package, but the big difference is that the 'mod' directory doesn't  
have to be
an actual package, ie., no __init__.py file is required.

This method can thus be used to create a namespace for modules still,  
ie.,
by using a subdirectory, but since a package isn't being used, automatic
module reloading still works.

Since the same works with __import__() for some versions of Python,
falling back to using __import__() may be useful if you are trying to do
testing outside of mod_python.

Graham
From grahamd at dscpl.com.au  Sat Dec  2 01:22:44 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  2 01:23:00 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
	<63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
Message-ID: <D9C187B6-EF9D-48E0-AA10-C33C07D93E52@dscpl.com.au>


On 02/12/2006, at 8:41 AM, Graham Dumpleton wrote:

>
> On 02/12/2006, at 12:03 AM, Clodoaldo wrote:
>
>> I'm trying to import a module with both the third and fourth
>> techniques you described but I'm having errors.
>>
>> This is the Virtual host config:
>>
>>    ServerName carconsumption.s0
>>    DocumentRoot /var/www/html/carconsumption.com
>>    SetHandler mod_python
>>    PythonHandler mod_python.publisher
>>    PythonDebug On
>>    PythonOption mod_python.importer.path "['~/mod']"
>>    PythonImport db_connection carconsumption.s0
>>
>> The module "constants" is in the mod directory under the document  
>> root:
>>
>> [cpn@s0 mod]$ pwd
>> /var/www/html/carconsumption.com/mod
>> [cpn@s0 mod]$ ll constants.py
>> -rwxr----- 1 cpn apache 28675 Nov 29 17:42 constants.py
>> [cpn@s0 mod]$ ll -d ../mod
>> drwxrws--- 2 cpn apache 4096 Dec  1 12:26 ../mod
>>
>> Third technique. index.py contains:
>>
>> from mod_python import apache
>> C = apache.import_module('~/mod/constants.py')
>>
>> The error output:
>>
>> MOD_PYTHON ERROR
>>
>> ProcessId:      24982
>> Interpreter:    'carconsumption.s0'
>>
>> URI:            '/'
>> Location:       None
>> Directory:      None
>
> The '~/' prefix will be replaced with the value of 'Directory' as  
> shown here, but it
> isn't set because you have the PythonHandler directive outside of  
> any Directory
> directive or .htaccess file. Thus, it can't know what the handler  
> root is. Using:
>
>    DocumentRoot /var/www/html/carconsumption.com
>    <Directory /var/www/html/carconsumption.com>
>    SetHandler mod_python
>    PythonHandler mod_python.publisher
>    PythonDebug On
>    PythonOption mod_python.importer.path "['~/mod']"
>    </Directory>
>
> should work, as will:
>
>    DocumentRoot /var/www/html/carconsumption.com
>    SetHandler mod_python
>    PythonHandler mod_python.publisher
>    PythonDebug On
>    PythonOption mod_python.importer.path "['/var/www/html/ 
> carconsumption.com/mod']"
>
> Note, when inside a Location directive, '~/' will not work either  
> as Location isn't
> associated with a directory.
>
> What I have to think about now is whether when both Directory and  
> Location
> directives aren't being used, that '~/' maps to DocumentRoot. I  
> never thought
> about this particular scenario.

If you get the latest version of source code for 3.3 from subversion  
repository, it
should now work without having to have the handler directive inside  
the context
of the Directory directive.

The code will now always have the handler root fallback to being the  
document
root if used in VirtualHost container or in main server context. It  
will also fallback
to using the document root if used in a Location directive as well.

Graham
From clodoaldo.pinto.neto at gmail.com  Sat Dec  2 04:46:19 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Sat Dec  2 04:46:23 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <FFA71D99-51A9-46FA-907E-7AF49D966275@dscpl.com.au>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
	<63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
	<a595de7a0612011544q66d1bd9ara49de327ecfb8f3b@mail.gmail.com>
	<a595de7a0612011557q25ca850bsa5f81f6f29e90885@mail.gmail.com>
	<FFA71D99-51A9-46FA-907E-7AF49D966275@dscpl.com.au>
Message-ID: <a595de7a0612020146j11ef3518m779760ffd289e6b1@mail.gmail.com>

2006/12/2, Graham Dumpleton <grahamd@dscpl.com.au>:
>
> On 02/12/2006, at 10:57 AM, Clodoaldo wrote:
>
> >> Ok, I did it and now this works:
> >>
> >> import constants as C
> >>
> >> But this does not work:
> >>
> >> from mod_python import apache
> >> C = apache.import_module('constants.py')
> >>
> >
> > Changed it to:
> >
> > from mod_python import apache
> > C = apache.import_module('~/mod/constants.py')
> >
> > And it works.
>
> The apache.import_module() function is doing double duty in allowing
> either a module name or a path for a file (including extension). For a
> path it has to be able to be distinguishable from a module or module
> within

I should have tried it. This works:

from mod_python import apache
C = apache.import_module('constants')

> package name. Thus, for a path, can only use:
>
>    /some/path/module.py
>    ~/some/path/module.py
>    ./some/path/module.py
>    ../some/path/module.py
>
> For anything else it assumes it is a normal module import. For
> 'constants.py'
> that thus means it thinks you are wanting to import a submodule
> called 'py'
> from a package called 'constants'.
>
> There are a few other quirks with the new importer. The first is that
> when a
> path is specified, you don't actually need to use a .py extension.
> This means
> for example that the mpservlets package which uses a .mps extension
> could
> quite easily be rewritten to use the new module importer rather than
> its own
> and get all the benefit of the full depth checks on module reloading.
> In other
> words:
>
>    module = apache.import_module("/some/path/servlet.mps")
>
> will work.
>
> This may be useful if you don't want to use a .py extension and want
> to use
> something else to hide the fact that Python is being used.
>
> Another strange characteristic of the new module importer, although this
> also actually works in more recent Python versions if using __import__
> (),
> although not perhaps on all platforms, is that one can use a '/' to
> refer to a
> module name in a subdirectory somewhere on the module search path.
>
> What this means is that if you had used:
>
>    PythonOption mod_python.importer.path "['~/']"
>
> rather than:
>
>    PythonOption mod_python.importer.path "['~/mod']"
>
> you could then have said:
>
>    apache.import_module('mod/constants')
>
> Note that I haven't used a '.py' extension. In some way this is like
> having a
> package, but the big difference is that the 'mod' directory doesn't
> have to be
> an actual package, ie., no __init__.py file is required.
>
> This method can thus be used to create a namespace for modules still,
> ie.,
> by using a subdirectory, but since a package isn't being used, automatic
> module reloading still works.
>
> Since the same works with __import__() for some versions of Python,
> falling back to using __import__() may be useful if you are trying to do
> testing outside of mod_python.
>
> Graham
>

This topic is now a very complete tutorial on the new 3.3 importer. It
can make a valuable article in the wiki, if properly cleaned.

-- 
Clodoaldo Pinto Neto
From clodoaldo.pinto.neto at gmail.com  Sat Dec  2 05:26:48 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Sat Dec  2 05:26:53 2006
Subject: [mod_python] Import a module into a variable value
Message-ID: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>

I'm doing a very light templating in a publisher program.

There is a html template read from the index.html file in which
'%(variable)s' are replaced.

This code reads the template from the file:

f = open('/var/www/html/carconsumption.com/index.html', 'r')
_html = ''.join(f.readlines())
f.close()

And then inside index() at return time the usual substitution:

   return C._html % _d

Editing a file with the extension .html is nice with editors with html
syntax highlighting, completion and other things. The only problem
with this approach is that the file index.html is not reloaded when
changed.

I know i could just use a generic handler with PSP as templating. But
the publisher is so convenient and as the new importer in 3.3 is full
of tricks like importing modules with any extension i would like to
know if there is some way to import a whole module into a variable
value preventing it from being interpreted as python code.

If the above is nonsense what would be a better approach for
templating within publisher programs or just to solve the not
reloadable index.html file?

Regards,
-- 
Clodoaldo Pinto Neto
From list at joreybump.com  Sat Dec  2 09:51:46 2006
From: list at joreybump.com (Jorey Bump)
Date: Sat Dec  2 09:51:49 2006
Subject: [mod_python] Import a module into a variable value
In-Reply-To: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
References: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
Message-ID: <45719302.8070707@joreybump.com>

Clodoaldo wrote:
> I'm doing a very light templating in a publisher program.
> 
> There is a html template read from the index.html file in which
> '%(variable)s' are replaced.
> 
> This code reads the template from the file:
> 
> f = open('/var/www/html/carconsumption.com/index.html', 'r')
> _html = ''.join(f.readlines())
> f.close()

Try putting this in a function.

> And then inside index() at return time the usual substitution:
> 
>   return C._html % _d

Call your function instead:

     return page(_d)

> Editing a file with the extension .html is nice with editors with html
> syntax highlighting, completion and other things. 

Yes, that's true.

> The only problem
> with this approach is that the file index.html is not reloaded when
> changed.

There are times when I'll create a large HTML snippet in an editor, then 
copy and paste it into a string variable in a module. As you point out, 
it might not get reloaded. But it could depend on how/where you read in 
the template text.

> I know i could just use a generic handler with PSP as templating. But
> the publisher is so convenient and as the new importer in 3.3 is full
> of tricks like importing modules with any extension i would like to
> know if there is some way to import a whole module into a variable
> value preventing it from being interpreted as python code.

Regardless of the extension, an imported module should still contain 
Python code. If you are leveraging the new importer in 3.3, this 
shouldn't be much of a problem. When you finish editing your page, wrap 
in a string variable and save it as a module. Either maintain a master 
version to paste from, or comment out the variable wrapper whenever you 
open it in your HTML editor. I suspect that most edits will be so minor 
after the initial creation of your template, that you won't depend on 
the syntax highlighting.

> If the above is nonsense what would be a better approach for
> templating within publisher programs or just to solve the not
> reloadable index.html file?

Try the technique above, or store the page in a db, or check out an 
existing templating system... I have my own library for creating HTML, 
and build my templates from that. The way I normally do it means that 
it's vulnerable to the reloading issue (I put all of the code for my 
applications in packages), but it needn't be so, especially with the new 
importer.

From clodoaldo.pinto.neto at gmail.com  Sat Dec  2 13:12:22 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Sat Dec  2 13:12:31 2006
Subject: [mod_python] Publisher and DEFLATE Filter
Message-ID: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>

I want all the Publisher produced pages to be Apache DEFLATEd. So i
added this directive to the virtual server configuration.

   AddOutputFilter DEFLATE py

As the Publisher does not require a py extension this obviously does
not work. The AddOutputFilterByType directive is said to be deprecated
in the 2.2.3 manual. So i add req.add_output_filter('DEFLATE') to the
script and it works. But it will have to be added to all the scripts.
Is there a way to set the DEFLATE filter to all Publisher scripts?

If i use "SetOutputFilter DEFLATE" it will deflate everything
including images and i will have to somehow disable it for the files
or directories i eventually don't want to be deflated.

I looked at the PythonOutputFilter but to activate it the
AddOutputFilter directive must be used and it is back to the original
problem. Or do I understand it wrong?

Regards,
-- 
Clodoaldo Pinto Neto
From terry.macdonald at dsl.pipex.com  Sat Dec  2 13:25:35 2006
From: terry.macdonald at dsl.pipex.com (Terry Macdonald)
Date: Sat Dec  2 13:26:29 2006
Subject: [mod_python] Import a module into a variable value
In-Reply-To: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
References: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
Message-ID: <1165083935.12482.1.camel@bigmac>

Personally I use the excellent Cheetah template package.  
I create template files and compile them to .py module files and import
then into my handlers/controllers and manipulate them there

so for a template page.tmpl, it compiles to page.py and in my
handler/controller... 


page = apache_import('page').page

page.objectlist = db.getlistofobjects()
page.<var> = ... etc

<Any other business/app logic etc>

return page()

Very neat and simple and all your page structure is in separate
templates which will be reimported automatically when changed & compiled
by the new importer module. Before, I was restarting apache
 

On Sat, 2006-12-02 at 08:26 -0200, Clodoaldo wrote:
> I'm doing a very light templating in a publisher program.
> 
> There is a html template read from the index.html file in which
> '%(variable)s' are replaced.
> 
> This code reads the template from the file:
> 
> f = open('/var/www/html/carconsumption.com/index.html', 'r')
> _html = ''.join(f.readlines())
> f.close()
> 
> And then inside index() at return time the usual substitution:
> 
>    return C._html % _d
> 
> Editing a file with the extension .html is nice with editors with html
> syntax highlighting, completion and other things. The only problem
> with this approach is that the file index.html is not reloaded when
> changed.
> 
> I know i could just use a generic handler with PSP as templating. But
> the publisher is so convenient and as the new importer in 3.3 is full
> of tricks like importing modules with any extension i would like to
> know if there is some way to import a whole module into a variable
> value preventing it from being interpreted as python code.
> 
> If the above is nonsense what would be a better approach for
> templating within publisher programs or just to solve the not
> reloadable index.html file?
> 
> Regards,

From list at joreybump.com  Sat Dec  2 14:25:28 2006
From: list at joreybump.com (Jorey Bump)
Date: Sat Dec  2 14:25:32 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>
Message-ID: <4571D328.20206@joreybump.com>

Clodoaldo wrote:
> I want all the Publisher produced pages to be Apache DEFLATEd. So i
> added this directive to the virtual server configuration.
> 
>   AddOutputFilter DEFLATE py

I use this in my main server configuration:

<IfModule deflate_module>
   # safest to enable compression based on a few mime-types
   # NOTE: compression corrupts PDF, gz files
   AddOutputFilterByType DEFLATE text/html text/plain text/xml
   # logging
   DeflateFilterNote ratio
   LogFormat '%v "%!414r" %b (%{ratio}n) "%{User-agent}i"' deflate
   CustomLog /var/log/apache/deflate_log deflate
</IfModule>

> As the Publisher does not require a py extension this obviously does
> not work. The AddOutputFilterByType directive is said to be deprecated
> in the 2.2.3 manual. 

Do you have a link to that statement? I don't see it mentioned here:

  http://httpd.apache.org/docs/2.2/mod/mod_deflate.html

It would be a disaster to deprecate that functionality without providing 
a replacement.


From clodoaldo.pinto.neto at gmail.com  Sat Dec  2 16:26:08 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Sat Dec  2 16:26:15 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <4571D328.20206@joreybump.com>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>
	<4571D328.20206@joreybump.com>
Message-ID: <a595de7a0612021326x24e97645s9ae33f712d8f810a@mail.gmail.com>

2006/12/2, Jorey Bump <list@joreybump.com>:
> Clodoaldo wrote:
>
> > As the Publisher does not require a py extension this obviously does
> > not work. The AddOutputFilterByType directive is said to be deprecated
> > in the 2.2.3 manual.
>
> Do you have a link to that statement? I don't see it mentioned here:
>
>   http://httpd.apache.org/docs/2.2/mod/mod_deflate.html
>

It is here:

http://httpd.apache.org/docs/2.2/mod/core.html#addoutputfilterbytype

"Because of certain problems discussed below, this directive is deprecated."

-- 
Clodoaldo Pinto Neto
From list at joreybump.com  Sat Dec  2 17:56:00 2006
From: list at joreybump.com (Jorey Bump)
Date: Sat Dec  2 17:56:06 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <a595de7a0612021326x24e97645s9ae33f712d8f810a@mail.gmail.com>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>	
	<4571D328.20206@joreybump.com>
	<a595de7a0612021326x24e97645s9ae33f712d8f810a@mail.gmail.com>
Message-ID: <45720480.4020206@joreybump.com>

Clodoaldo wrote:
> 2006/12/2, Jorey Bump <list@joreybump.com>:
>> Clodoaldo wrote:
>>
>> > As the Publisher does not require a py extension this obviously does
>> > not work. The AddOutputFilterByType directive is said to be deprecated
>> > in the 2.2.3 manual.
>>
>> Do you have a link to that statement? I don't see it mentioned here:
>>
>>   http://httpd.apache.org/docs/2.2/mod/mod_deflate.html
> 
> It is here:
> 
> http://httpd.apache.org/docs/2.2/mod/core.html#addoutputfilterbytype
> 
> "Because of certain problems discussed below, this directive is 
> deprecated."

Crap. Well, as long as the offical documentation for mod_deflate 
describes only the old method, it should be safe to use until the docs 
are updated with a new alternative. It's obviously best to operate on 
MIME types instead of file extensions, but try not to get greedy. Some 
browsers even have trouble dealing with compressed text/css. You'll get 
a lot of mileage out of compressing text/html, text/plain, and text/xml 
alone.

From grahamd at dscpl.com.au  Sat Dec  2 18:08:15 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  2 18:08:21 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>
Message-ID: <5C6F10B7-8E77-49D8-B655-480905FD4EBB@dscpl.com.au>


On 03/12/2006, at 5:12 AM, Clodoaldo wrote:

> I want all the Publisher produced pages to be Apache DEFLATEd. So i
> added this directive to the virtual server configuration.
>
>   AddOutputFilter DEFLATE py
>
> As the Publisher does not require a py extension this obviously does
> not work. The AddOutputFilterByType directive is said to be deprecated
> in the 2.2.3 manual. So i add req.add_output_filter('DEFLATE') to the
> script and it works. But it will have to be added to all the scripts.
> Is there a way to set the DEFLATE filter to all Publisher scripts?
>
> If i use "SetOutputFilter DEFLATE" it will deflate everything
> including images and i will have to somehow disable it for the files
> or directories i eventually don't want to be deflated.
>
> I looked at the PythonOutputFilter but to activate it the
> AddOutputFilter directive must be used and it is back to the original
> problem. Or do I understand it wrong?

Presuming you are using something like:

   SetHandler mod_python
   PythonHandler mod_python.publisher

Instead using something like:

   SetHandler mod_python
   PythonHandler ~/_filters.py
   PythonHandler mod_python.publisher

Then in '_filters.py' in the handler root directory have:

   from mod_python import apache

   def handler(req):
     req.add_output_filter('DEFLATE')
     return apache.OK

This is making use of the ability to stack handlers, ie., have more than
one executed for the phase.

You could also have written:

   SetHandler mod_python
   PythonHandler ~/_publisher.py

Then in '_publisher.py' in the handler root directory have:

   from mod_python import publisher

   def handler(req):
     req.add_output_filter('DEFLATE')
     return publisher.handler(req)

I have used an underscore prefix for the file adding the filter as  
then publisher
will ignore it and not allow requests against it.

Note for others, this requires mod_python 3.3 as it is only in 3.3  
which the
ability to add output filters dynamically was added. Knowing it was  
3.3, I have
used the path method for referencing a module in the handler directive,
which is another new 3.3 feature.

BTW, using a wrapper like '_publisher.py' is also one way of managing  
the
creation of user sessions without having to add the session code in  
every
handler. For example:

   from mod_python import publisher, Session

   def handler(req):
     req.add_output_filter('DEFLATE')
     req.session = Session.Session(req)
     if req.session.is_new():
       ...
     ...
     return publisher.handler(req)

For more complicated session stuff requiring login and which needs to  
control
access to static files or other types of handlers, you are much  
better off using
an authenhandler(), something which is much easier to do properly in  
3.3.

Graham
From grahamd at dscpl.com.au  Sat Dec  2 18:16:38 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  2 18:16:51 2006
Subject: [mod_python] python path and 3.3
In-Reply-To: <a595de7a0612020146j11ef3518m779760ffd289e6b1@mail.gmail.com>
References: <1164946245.5080@dscpl.user.openhosting.com>
	<a595de7a0612010503y6aa14249tda581394bd9a8cdc@mail.gmail.com>
	<63A6E39C-F759-426F-BC1A-C733CA013D34@dscpl.com.au>
	<a595de7a0612011544q66d1bd9ara49de327ecfb8f3b@mail.gmail.com>
	<a595de7a0612011557q25ca850bsa5f81f6f29e90885@mail.gmail.com>
	<FFA71D99-51A9-46FA-907E-7AF49D966275@dscpl.com.au>
	<a595de7a0612020146j11ef3518m779760ffd289e6b1@mail.gmail.com>
Message-ID: <7FF61446-2A8D-45D2-B4C6-8CF7AC2C18DF@dscpl.com.au>


On 02/12/2006, at 8:46 PM, Clodoaldo wrote:

> 2006/12/2, Graham Dumpleton <grahamd@dscpl.com.au>:
>>
>> On 02/12/2006, at 10:57 AM, Clodoaldo wrote:
>>
>> >> Ok, I did it and now this works:
>> >>
>> >> import constants as C
>> >>
>> >> But this does not work:
>> >>
>> >> from mod_python import apache
>> >> C = apache.import_module('constants.py')
>> >>
>> >
>> > Changed it to:
>> >
>> > from mod_python import apache
>> > C = apache.import_module('~/mod/constants.py')
>> >
>> > And it works.
>>
>> The apache.import_module() function is doing double duty in allowing
>> either a module name or a path for a file (including extension).  
>> For a
>> path it has to be able to be distinguishable from a module or module
>> within
>
> I should have tried it. This works:
>
> from mod_python import apache
> C = apache.import_module('constants')

Yes, but if you want to be able to also run your code outside of  
Apache in
a test harness or something, using normal Python 'import' construct  
it still
possibly better. In the context of mod_python, provided the parent was
imported using the mod_python module importer and not handed off to
the standard Python importer, and the child is on the mod_python module
search path and not in sys.path, auto reloading still works okay.  
Thus, if
you change 'constants', the parent and the child will be automatically
reloaded next time the parent is required, even though the parent hadn't
been changed. That is, in the new module importer detects changes to
children and reloads the parent automatically as well. This didn't  
happen
in the old importer.

>> package name. Thus, for a path, can only use:
>>
>>    /some/path/module.py
>>    ~/some/path/module.py
>>    ./some/path/module.py
>>    ../some/path/module.py
>>
>> For anything else it assumes it is a normal module import. For
>> 'constants.py'
>> that thus means it thinks you are wanting to import a submodule
>> called 'py'
>> from a package called 'constants'.
>>
>> There are a few other quirks with the new importer. The first is that
>> when a
>> path is specified, you don't actually need to use a .py extension.
>> This means
>> for example that the mpservlets package which uses a .mps extension
>> could
>> quite easily be rewritten to use the new module importer rather than
>> its own
>> and get all the benefit of the full depth checks on module reloading.
>> In other
>> words:
>>
>>    module = apache.import_module("/some/path/servlet.mps")
>>
>> will work.
>>
>> This may be useful if you don't want to use a .py extension and want
>> to use
>> something else to hide the fact that Python is being used.
>>
>> Another strange characteristic of the new module importer,  
>> although this
>> also actually works in more recent Python versions if using  
>> __import__
>> (),
>> although not perhaps on all platforms, is that one can use a '/' to
>> refer to a
>> module name in a subdirectory somewhere on the module search path.
>>
>> What this means is that if you had used:
>>
>>    PythonOption mod_python.importer.path "['~/']"
>>
>> rather than:
>>
>>    PythonOption mod_python.importer.path "['~/mod']"
>>
>> you could then have said:
>>
>>    apache.import_module('mod/constants')
>>
>> Note that I haven't used a '.py' extension. In some way this is like
>> having a
>> package, but the big difference is that the 'mod' directory doesn't
>> have to be
>> an actual package, ie., no __init__.py file is required.
>>
>> This method can thus be used to create a namespace for modules still,
>> ie.,
>> by using a subdirectory, but since a package isn't being used,  
>> automatic
>> module reloading still works.
>>
>> Since the same works with __import__() for some versions of Python,
>> falling back to using __import__() may be useful if you are trying  
>> to do
>> testing outside of mod_python.
>>
>> Graham
>>
>
> This topic is now a very complete tutorial on the new 3.3 importer. It
> can make a valuable article in the wiki, if properly cleaned.

Far from complete unfortunately. There is a lot of other stuff one  
needs to
know about the module importer as far as how reloading of modules  
occurs.
Unlike the old importer, the new importer doesn't just load modules  
on top
of the old ones. Thus, if you need to preserve some state or cache  
information
across reloads, for example a database connection pool, you need to
provide some hook functions to allow it.

Anyway, will describe that when someone comes across the need unless
I can get some separate documentation completed about it first.

Graham
From grahamd at dscpl.com.au  Sat Dec  2 18:24:47 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  2 18:24:55 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <45720480.4020206@joreybump.com>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>	
	<4571D328.20206@joreybump.com>
	<a595de7a0612021326x24e97645s9ae33f712d8f810a@mail.gmail.com>
	<45720480.4020206@joreybump.com>
Message-ID: <522988B8-F846-43E0-8FED-244AAB310D99@dscpl.com.au>


On 03/12/2006, at 9:56 AM, Jorey Bump wrote:

> Clodoaldo wrote:
>> 2006/12/2, Jorey Bump <list@joreybump.com>:
>>> Clodoaldo wrote:
>>>
>>> > As the Publisher does not require a py extension this obviously  
>>> does
>>> > not work. The AddOutputFilterByType directive is said to be  
>>> deprecated
>>> > in the 2.2.3 manual.
>>>
>>> Do you have a link to that statement? I don't see it mentioned here:
>>>
>>>   http://httpd.apache.org/docs/2.2/mod/mod_deflate.html
>> It is here:
>> http://httpd.apache.org/docs/2.2/mod/core.html#addoutputfilterbytype
>> "Because of certain problems discussed below, this directive is  
>> deprecated."
>
> Crap. Well, as long as the offical documentation for mod_deflate  
> describes only the old method, it should be safe to use until the  
> docs are updated with a new alternative. It's obviously best to  
> operate on MIME types instead of file extensions, but try not to  
> get greedy. Some browsers even have trouble dealing with compressed  
> text/css. You'll get a lot of mileage out of compressing text/html,  
> text/plain, and text/xml alone.

Of if using mod_python 3.3 just use:

   PythonFixupHandler install_filters

In that handler module have:

   from mod_python import apache

   def fixuphandler(req):
     if req.content_type == 'text/html':
       req.add_output_filter('INCLUDES')
     return apache.OK

Using a fixup handler is possibly going to give you more control  
anyway as you
may want to do other checks to determine when to set filters and the  
directives
may not give you that control. For example you might want to look at  
both
content type and extension.

   from mod_python import apache
   import os.path

   def fixuphandler(req):

     if req.content_type == 'text/html':
       req.add_output_filter('INCLUDES')
     else:
       extension = os.path.splitext(req.filename)[1]
       if extension = '.shtml':
         req.add_output_filter('INCLUDES')

     return apache.OK

To me this is getting to what mod_python is really about, it is a  
means of programming
Apache by using all the various phases as they are intended and not  
just a jumping off
point for content handlers to WSGI, Django, TurboGears etc. :-)

Graham
From clodoaldo.pinto.neto at gmail.com  Sat Dec  2 18:34:39 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Sat Dec  2 18:34:50 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <5C6F10B7-8E77-49D8-B655-480905FD4EBB@dscpl.com.au>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>
	<5C6F10B7-8E77-49D8-B655-480905FD4EBB@dscpl.com.au>
Message-ID: <a595de7a0612021534u51001235i253e3e6df1790774@mail.gmail.com>

2006/12/2, Graham Dumpleton <grahamd@dscpl.com.au>:
>
> On 03/12/2006, at 5:12 AM, Clodoaldo wrote:
>
> > I want all the Publisher produced pages to be Apache DEFLATEd. So i
> > added this directive to the virtual server configuration.
> >
> >   AddOutputFilter DEFLATE py
> >
> > As the Publisher does not require a py extension this obviously does
> > not work. The AddOutputFilterByType directive is said to be deprecated
> > in the 2.2.3 manual. So i add req.add_output_filter('DEFLATE') to the
> > script and it works. But it will have to be added to all the scripts.
> > Is there a way to set the DEFLATE filter to all Publisher scripts?
> >
> > If i use "SetOutputFilter DEFLATE" it will deflate everything
> > including images and i will have to somehow disable it for the files
> > or directories i eventually don't want to be deflated.
> >
> > I looked at the PythonOutputFilter but to activate it the
> > AddOutputFilter directive must be used and it is back to the original
> > problem. Or do I understand it wrong?
>
> Presuming you are using something like:
>
>    SetHandler mod_python
>    PythonHandler mod_python.publisher
>

That's what i am using. Should have declared it first.

> Instead using something like:
>
>    SetHandler mod_python
>    PythonHandler ~/_filters.py
>    PythonHandler mod_python.publisher
>
> Then in '_filters.py' in the handler root directory have:
>
>    from mod_python import apache
>
>    def handler(req):
>      req.add_output_filter('DEFLATE')
>      return apache.OK
>
> This is making use of the ability to stack handlers, ie., have more than
> one executed for the phase.
>
> You could also have written:
>
>    SetHandler mod_python
>    PythonHandler ~/_publisher.py
>
> Then in '_publisher.py' in the handler root directory have:
>
>    from mod_python import publisher
>
>    def handler(req):
>      req.add_output_filter('DEFLATE')
>      return publisher.handler(req)
>

Both solutions are great! I took the last one and applied it immediately.

> I have used an underscore prefix for the file adding the filter as
> then publisher
> will ignore it and not allow requests against it.
>
> Note for others, this requires mod_python 3.3 as it is only in 3.3
> which the
> ability to add output filters dynamically was added. Knowing it was
> 3.3, I have
> used the path method for referencing a module in the handler directive,
> which is another new 3.3 feature.
>
> BTW, using a wrapper like '_publisher.py' is also one way of managing
> the
> creation of user sessions without having to add the session code in
> every
> handler. For example:
>
>    from mod_python import publisher, Session
>
>    def handler(req):
>      req.add_output_filter('DEFLATE')
>      req.session = Session.Session(req)
>      if req.session.is_new():
>        ...
>      ...
>      return publisher.handler(req)

This tip is Very important.

>
> For more complicated session stuff requiring login and which needs to
> control
> access to static files or other types of handlers, you are much
> better off using
> an authenhandler(), something which is much easier to do properly in
> 3.3.
>
> Graham
>


-- 
Clodoaldo Pinto Neto
From grahamd at dscpl.com.au  Sat Dec  2 18:39:52 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  2 18:39:59 2006
Subject: [mod_python] Import a module into a variable value
In-Reply-To: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
References: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
Message-ID: <CF07AA68-0968-4736-A361-B277F745DC2F@dscpl.com.au>


On 02/12/2006, at 9:26 PM, Clodoaldo wrote:

> I'm doing a very light templating in a publisher program.

What features are you after that have made you use publisher in the
first place? Ie., which of the following is it:

1. Mapping of URL to different handler files.

2. Mapping of additional path information to objects within a handler  
file.

3. Mapping of form arguments to function arguments.

I ask as depending on what of the above you are wanting, in  
mod_python 3.3
there are possibly other ways of doing it which may be more  
attractive and
also possibly give you more flexibility.

> There is a html template read from the index.html file in which
> '%(variable)s' are replaced.
>
> This code reads the template from the file:
>
> f = open('/var/www/html/carconsumption.com/index.html', 'r')
> _html = ''.join(f.readlines())
> f.close()
>
> And then inside index() at return time the usual substitution:
>
>   return C._html % _d
>
> Editing a file with the extension .html is nice with editors with html
> syntax highlighting, completion and other things. The only problem
> with this approach is that the file index.html is not reloaded when
> changed.
>
> I know i could just use a generic handler with PSP as templating. But
> the publisher is so convenient and as the new importer in 3.3 is full
> of tricks like importing modules with any extension i would like to
> know if there is some way to import a whole module into a variable
> value preventing it from being interpreted as python code.
>
> If the above is nonsense what would be a better approach for
> templating within publisher programs or just to solve the not
> reloadable index.html file?

As Jorey pointed out, the new module importer only handles Python  
code files
and not arbitrary types of files.

One could use your own caching system. An example of one is:

   http://svn.dscpl.com.au/vampire/trunk/software/vampire/markup.py

This one ends up turning the page into a template object for a  
particular
templating sytsem, but that could be stripped out, leaving it to only  
cache
the raw page source.

Another page caching system is actually in the mod_python source at
present and was added to implement the interim module importer in 3.2  
used
by publisher. This will be removed from mod_python in a future  
version though,
thus shouldn't be used. You could though go get the original code for  
it and
use it in your own code. This is at:

   http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/302997

Graham
From list at joreybump.com  Sat Dec  2 18:46:43 2006
From: list at joreybump.com (Jorey Bump)
Date: Sat Dec  2 18:46:47 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <522988B8-F846-43E0-8FED-244AAB310D99@dscpl.com.au>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>	
	<4571D328.20206@joreybump.com>
	<a595de7a0612021326x24e97645s9ae33f712d8f810a@mail.gmail.com>
	<45720480.4020206@joreybump.com>
	<522988B8-F846-43E0-8FED-244AAB310D99@dscpl.com.au>
Message-ID: <45721063.7020706@joreybump.com>

Graham Dumpleton wrote:

> Of if using mod_python 3.3 just use:
> 
>   PythonFixupHandler install_filters
> 
> In that handler module have:
> 
>   from mod_python import apache
> 
>   def fixuphandler(req):
>     if req.content_type == 'text/html':
>       req.add_output_filter('INCLUDES')
>     return apache.OK

Should that be:

     req.add_output_filter('DEFLATE')

> To me this is getting to what mod_python is really about, it is a means 
> of programming
> Apache by using all the various phases as they are intended and not just 
> a jumping off
> point for content handlers to WSGI, Django, TurboGears etc. :-)

This *is* exciting, but when administering a server that supports 
mod_python, PHP, CGI, ColdFusion, static HTML, etc., it's more expedient 
to configure mod_deflate in the main httpd config, so that it applies to 
all virtual hosts and matching content.
From clodoaldo.pinto.neto at gmail.com  Sat Dec  2 18:55:51 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Sat Dec  2 18:56:05 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <45721063.7020706@joreybump.com>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>
	<4571D328.20206@joreybump.com>
	<a595de7a0612021326x24e97645s9ae33f712d8f810a@mail.gmail.com>
	<45720480.4020206@joreybump.com>
	<522988B8-F846-43E0-8FED-244AAB310D99@dscpl.com.au>
	<45721063.7020706@joreybump.com>
Message-ID: <a595de7a0612021555y302badb5nbd73be7df08835b2@mail.gmail.com>

2006/12/2, Jorey Bump <list@joreybump.com>:
> Graham Dumpleton wrote:
> > To me this is getting to what mod_python is really about, it is a means
> > of programming
> > Apache by using all the various phases as they are intended and not just
> > a jumping off
> > point for content handlers to WSGI, Django, TurboGears etc. :-)
>
> This *is* exciting, but when administering a server that supports
> mod_python, PHP, CGI, ColdFusion, static HTML, etc., it's more expedient
> to configure mod_deflate in the main httpd config, so that it applies to
> all virtual hosts and matching content.
>

Yes, set it up in one only place. But if the solution involves a
deprecated directive is it still better? The alternative proposed by
Apache is mod_filter, but to be honest I didn't understand it in the
first read and at the second read I still don't understand. The
handler stacking solution is simple to understand.

-- 
Clodoaldo Pinto Neto
From grahamd at dscpl.com.au  Sat Dec  2 18:59:52 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  2 18:59:59 2006
Subject: [mod_python] Publisher and DEFLATE Filter
In-Reply-To: <45721063.7020706@joreybump.com>
References: <a595de7a0612021012g35953225pdbcb1cb9de8b476f@mail.gmail.com>	
	<4571D328.20206@joreybump.com>
	<a595de7a0612021326x24e97645s9ae33f712d8f810a@mail.gmail.com>
	<45720480.4020206@joreybump.com>
	<522988B8-F846-43E0-8FED-244AAB310D99@dscpl.com.au>
	<45721063.7020706@joreybump.com>
Message-ID: <BA568B7D-CFD1-41BF-8D89-C703A9B0B473@dscpl.com.au>


On 03/12/2006, at 10:46 AM, Jorey Bump wrote:

> Graham Dumpleton wrote:
>
>> Of if using mod_python 3.3 just use:
>>   PythonFixupHandler install_filters
>> In that handler module have:
>>   from mod_python import apache
>>   def fixuphandler(req):
>>     if req.content_type == 'text/html':
>>       req.add_output_filter('INCLUDES')
>>     return apache.OK
>
> Should that be:
>
>     req.add_output_filter('DEFLATE')

Since I was using a .shtml extension which is what is used for server  
side
includes, I switched gears and simply showed an alternate filter in  
action
to what you guys were originally talking about. :-)

Maybe I should show both in action:

   from mod_python import apache
   def fixuphandler(req):
     if req.content_type == 'text/html':
       req.add_output_filter('INCLUDES')
       req.add_output_filter('DEFLATE')
     return apache.OK

>> To me this is getting to what mod_python is really about, it is a  
>> means of programming
>> Apache by using all the various phases as they are intended and  
>> not just a jumping off
>> point for content handlers to WSGI, Django, TurboGears etc. :-)
>
> This *is* exciting, but when administering a server that supports  
> mod_python, PHP, CGI, ColdFusion, static HTML, etc., it's more  
> expedient to configure mod_deflate in the main httpd config, so  
> that it applies to all virtual hosts and matching content.

True.

Although the fixup handler is run within the context of mod_python,  
it is still setting
up the output filter for all requests with that content type or  
extension, regardless
of how the content handler phase is implemented so as to provide that  
content.

Thus, the above fixuphandler would still apply to where content was  
produced by
PHP, CGI, ColdFusion, static HTML etc.

I am sure you realise this, but thought I would clarify this in case  
others thought
that it would only apply where mod_python was used for the content  
handler phase.

Graham
From clodoaldo.pinto.neto at gmail.com  Sat Dec  2 19:34:03 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Sat Dec  2 19:34:09 2006
Subject: [mod_python] Import a module into a variable value
In-Reply-To: <CF07AA68-0968-4736-A361-B277F745DC2F@dscpl.com.au>
References: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
	<CF07AA68-0968-4736-A361-B277F745DC2F@dscpl.com.au>
Message-ID: <a595de7a0612021634m7e9f434ckbf49f6179522677f@mail.gmail.com>

2006/12/2, Graham Dumpleton <grahamd@dscpl.com.au>:
>
> On 02/12/2006, at 9:26 PM, Clodoaldo wrote:
>
> > I'm doing a very light templating in a publisher program.
>
> What features are you after that have made you use publisher in the
> first place? Ie., which of the following is it:
>
> 1. Mapping of URL to different handler files.
>
> 2. Mapping of additional path information to objects within a handler
> file.
>
> 3. Mapping of form arguments to function arguments.
>

1 and 2 make it very easy and convenient.

> I ask as depending on what of the above you are wanting, in
> mod_python 3.3
> there are possibly other ways of doing it which may be more
> attractive and
> also possibly give you more flexibility.

I'm trying the Publisher in a site, carconsumption.com, with one only
page, although a big and treacherous one, which was changed many times
and still needs work.

The way I'm doing it now it good enough *for this site*. As the html
template is loaded in a separate module I just change one byte in the
module and the template is reloaded. But it is still one more file to
change everytime the template is changed.

I'm asking about it because I have bigger plans and want to know how
much I need a real templating system.

>
> One could use your own caching system. An example of one is:
>
>    http://svn.dscpl.com.au/vampire/trunk/software/vampire/markup.py
>
> This one ends up turning the page into a template object for a
> particular
> templating sytsem, but that could be stripped out, leaving it to only
> cache
> the raw page source.
>
> Another page caching system is actually in the mod_python source at
> present and was added to implement the interim module importer in 3.2
> used
> by publisher. This will be removed from mod_python in a future
> version though,
> thus shouldn't be used. You could though go get the original code for
> it and
> use it in your own code. This is at:
>
>    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/302997
>

Good to know. But if I start adding code like that I had better go all
the way to Cheetah or something.

-- 
Clodoaldo Pinto Neto
From keith at uglyslug.com  Sat Dec  2 22:57:53 2006
From: keith at uglyslug.com (Keith Palmer Jr.)
Date: Sat Dec  2 22:58:00 2006
Subject: [mod_python] Force reload of all imported files on *every* request?
Message-ID: <45724B41.8030501@uglyslug.com>


Is there a way with mod_python to force it to reload all imported files 
on every request?

It's a development server but I *cannot* edit httpd.conf and most other 
suggestions I've seen deal with restarting apache everytime I edit a 
file... that is to say the least cludgy.



Also, if I have a text block of code (reading it from the database) with 
a class definition and a single import (urllib) can I use exec() to 
declare that class and then use it? So I want to do this:


code = "my code is here, this is a class definition and an from urllib 
import urlopen statement"
exec(code)
myinst = MyClassName()



And yes, I'm a complete Python newbie. Thanks! :-P
From grahamd at dscpl.com.au  Sat Dec  2 23:20:56 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  2 23:21:05 2006
Subject: [mod_python] Force reload of all imported files on *every*
	request?
In-Reply-To: <45724B41.8030501@uglyslug.com>
References: <45724B41.8030501@uglyslug.com>
Message-ID: <1B42E646-B395-4754-AA56-F6D876CE89F4@dscpl.com.au>


On 03/12/2006, at 2:57 PM, Keith Palmer Jr. wrote:
>
> Is there a way with mod_python to force it to reload all imported  
> files on every request?
>
> It's a development server but I *cannot* edit httpd.conf and most  
> other suggestions I've seen deal with restarting apache everytime I  
> edit a file... that is to say the least cludgy.

If you can't edit httpd.conf, then the answer is "No". The approach  
which requires
editing the httpd.conf file is to set:

   MaxRequestsPerChild 1

The only solution I can offer is to say that automatic module  
reloading works
properly in mod_python 3.3. That alas hasn't been released yet, but  
if I can
finish off some documentation it will hopefully will be relatively soon.

What version of mod_python are you currently using? Could you even get
them to upgrade the version of mod_python in a timely manner if 3.3 were
available or are you going to be stuck with an old version for a long  
time?

> Also, if I have a text block of code (reading it from the database)  
> with a class definition and a single import (urllib) can I use exec 
> () to declare that class and then use it? So I want to do this:
>
> code = "my code is here, this is a class definition and an from  
> urllib import urlopen statement"
> exec(code)
> myinst = MyClassName()

Yes. But using something like the following may be better as it then  
encapsulates
the result as a module.

   import imp
   module = imp.new_module('mymodulename')
   exec(code, module.__dict__)

   myinst = module.MyClassName()

You can then save away the module for later use as needs be.

Graham
From keith at uglyslug.com  Sat Dec  2 23:28:08 2006
From: keith at uglyslug.com (Keith Palmer Jr.)
Date: Sat Dec  2 23:28:11 2006
Subject: [mod_python] Force reload of all imported files on *every*
	request?
In-Reply-To: <1B42E646-B395-4754-AA56-F6D876CE89F4@dscpl.com.au>
References: <45724B41.8030501@uglyslug.com>
	<1B42E646-B395-4754-AA56-F6D876CE89F4@dscpl.com.au>
Message-ID: <45725258.7050409@uglyslug.com>


Ahhh, excellent. I could definitely push for mod_python 3.3 when it is 
released and get it installed. Glad to hear it works correctly in the 
new version, this is a bit of a pain right now. :-)

And thanks for the code example for exec, I'll give it a try.

Liking Python more and more by the moment. I may already be a convert 
from the dark side (PHP, *gasp!*)

  - Keith


Graham Dumpleton wrote:
> 
> On 03/12/2006, at 2:57 PM, Keith Palmer Jr. wrote:
>>
>> Is there a way with mod_python to force it to reload all imported 
>> files on every request?
>>
>> It's a development server but I *cannot* edit httpd.conf and most 
>> other suggestions I've seen deal with restarting apache everytime I 
>> edit a file... that is to say the least cludgy.
> 
> If you can't edit httpd.conf, then the answer is "No". The approach 
> which requires
> editing the httpd.conf file is to set:
> 
>   MaxRequestsPerChild 1
> 
> The only solution I can offer is to say that automatic module reloading 
> works
> properly in mod_python 3.3. That alas hasn't been released yet, but if I 
> can
> finish off some documentation it will hopefully will be relatively soon.
> 
> What version of mod_python are you currently using? Could you even get
> them to upgrade the version of mod_python in a timely manner if 3.3 were
> available or are you going to be stuck with an old version for a long time?
> 
>> Also, if I have a text block of code (reading it from the database) 
>> with a class definition and a single import (urllib) can I use exec() 
>> to declare that class and then use it? So I want to do this:
>>
>> code = "my code is here, this is a class definition and an from urllib 
>> import urlopen statement"
>> exec(code)
>> myinst = MyClassName()
> 
> Yes. But using something like the following may be better as it then 
> encapsulates
> the result as a module.
> 
>   import imp
>   module = imp.new_module('mymodulename')
>   exec(code, module.__dict__)
> 
>   myinst = module.MyClassName()
> 
> You can then save away the module for later use as needs be.
> 
> Graham
> 
From grahamd at dscpl.com.au  Sun Dec  3 20:40:40 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Dec  3 20:40:48 2006
Subject: [mod_python] meets_conditions does not seem to work
Message-ID: <1165196440.32480@dscpl.user.openhosting.com>

sliderw wrote ..
> Also, I would suggest updating the 3.3 changelog to mention this, because
> 3.3 does not transparently fix meets_conditions. Rather, anyone who uses
> meets_conditions in 3.2.x, and upgrades to 3.3, must make some change in
> his/her own code to make meets_conditions work.

I have added reference to req.meets_conditions() against MODPYTHON-130,
but I should point out that there was never actually anything wrong with the
meets_conditions() function itself. The short coming was that there was no
means to access the related ap_set_last_modified(), ap_set_etag() and
ap_update_mtime() functions used to set up data which ap_meets_conditions()
uses. The documentation was also misleading which didn't help. In summary,
it probably never was possible to use ap_meets_conditions() properly
through mod_python before 3.3, so I don't think there will be issues with
people upgrading.

Graham

> ----- Original Message ----- 
> From: "Graham Dumpleton" <grahamd@dscpl.com.au>
> To: "sliderw hotmail" <sliderw@hotmail.com>
> Sent: Wednesday, November 22, 2006 16:40
> Subject: Re: [mod_python] meets_conditions does not seem to work
> 
> 
> > The set_last_modified suggestion is a good one. The meets_conditions
> > documentation may be changed to:
> > 
> > Calls the Apache ap_meets_conditions() function which returns a status
> > code. 
> > If status is apache.OK, generate the content of the response normally.
> > If 
> > not, simply return status. Note that mtime (and possibly ETag) should
> be
> > set 
> > prior to calling this function. The same goes for req.status if the status
> > differs from apache.OK.
> > 
> > Example:
> > 
> > ...
> > r.headers_out['Expires'] = 'Mon, 18 Apr 2005 17:30:00 GMT'
> > r.headers_out['ETag'] = '"1130794f-3774-4584-a4ea-0ab19e684268"'
> > r.update_mtime(1000000000)
> > r.set_last_modified()
> > 
> > status = r.meets_conditions()
> > if status != apache.OK:
> >   return status
> > 
> > ... do expensive generation of the response content ...
> 
> Done in subversion documentation.
> 
> This email is off list as don't need to bother everyone. Any further responses
> to the list.
> 
> Thanks.
> 
> Graham
From mh at pixar.com  Mon Dec  4 03:05:50 2006
From: mh at pixar.com (Mark Harrison)
Date: Mon Dec  4 03:06:15 2006
Subject: [mod_python] avoiding database connection leak on module (re)import
Message-ID: <4573D6DE.9080201@pixar.com>

Whenever the source file is modified, mod_python re-imports the
file.  A naive program will have a connection leak if it just
has a line like this:

myconnection = mydbpackage.connect(...)


So, I'm closing and reopening the connection on each re-import:

try:
     myconnection.close()
except NameError:
     pass
myconnection = mydbpackage.connect(...)

Is there a better, more  mod_pythonic way to handle this type of
situation?

Many TIA!
Mark

-- 
Mark Harrison
Pixar Animation Studios
From clodoaldo.pinto.neto at gmail.com  Mon Dec  4 06:03:05 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Mon Dec  4 06:03:11 2006
Subject: [mod_python] avoiding database connection leak on module
	(re)import
In-Reply-To: <4573D6DE.9080201@pixar.com>
References: <4573D6DE.9080201@pixar.com>
Message-ID: <a595de7a0612040303l39eba72cnbcb601fbecd26ee9@mail.gmail.com>

2006/12/4, Mark Harrison <mh@pixar.com>:
> Whenever the source file is modified, mod_python re-imports the
> file.  A naive program will have a connection leak if it just
> has a line like this:
>
> myconnection = mydbpackage.connect(...)
>
>
> So, I'm closing and reopening the connection on each re-import:
>
> try:
>      myconnection.close()
> except NameError:
>      pass
> myconnection = mydbpackage.connect(...)
>
> Is there a better, more  mod_pythonic way to handle this type of
> situation?
>

Good question. I think I'm doing it right since there are no more
connections than apache processes, but I'm not sure how exactly it
works.

In the virtual server config:

    PythonImport _db_connection carconsumption.com

The _db_connection module:

from psycopg2.pool import PersistentConnectionPool as _PCP
_pcp = _PCP(1, 1, "host=localhost dbname=carconsumption user=user
password=password")
_connection = _pcp.getconn()

When I need the connection:

from _db_connection import _connection
...
cursor = _connection.cursor()
cursor.execute(query, d)
...
cursor.close()

I never close the connection.

-- 
Clodoaldo Pinto Neto
From mateusz at ant.gliwice.pl  Mon Dec  4 06:51:28 2006
From: mateusz at ant.gliwice.pl (Mateusz Korniak)
Date: Mon Dec  4 06:51:38 2006
Subject: [mod_python] avoiding database connection leak on module
	(re)import
In-Reply-To: <a595de7a0612040303l39eba72cnbcb601fbecd26ee9@mail.gmail.com>
References: <4573D6DE.9080201@pixar.com>
	<a595de7a0612040303l39eba72cnbcb601fbecd26ee9@mail.gmail.com>
Message-ID: <200612041251.29356.mateusz@ant.gliwice.pl>

On Monday 04 December 2006 12:03, Clodoaldo wrote:
> 2006/12/4, Mark Harrison <mh@pixar.com>:
> > Whenever the source file is modified, mod_python re-imports the
> > file.  A naive program will have a connection leak if it just
> > has a line like this:
> >
> > myconnection = mydbpackage.connect(...)

If module variable space is no longer accessible,  myconnection ref count 
should fall to zero( unless you keep reference to it somewhere else), so 
myconnection will be deleted and in non-buggy module should also 
close "physical" connection to DB (or put it in available connections pool) .

> > So, I'm closing and reopening the connection on each re-import:
> >
> > try:
> >      myconnection.close()

Don't you always get NameError: name 'myconnection' is not defined there ?

> > except NameError:
> >      pass
> > myconnection = mydbpackage.connect(...)
> >
> > Is there a better, more  mod_pythonic way to handle this type of
> > situation?
>
> Good question. I think I'm doing it right since there are no more
> connections than apache processes, but I'm not sure how exactly it
> works.

Pythonic way in simplest case is to simple get DB connection and keep only 
necessary references to it.

>
> In the virtual server config:
>
>     PythonImport _db_connection carconsumption.com
>
> The _db_connection module:
>
> from psycopg2.pool import PersistentConnectionPool as _PCP
> _pcp = _PCP(1, 1, "host=localhost dbname=carconsumption user=user
> password=password")
> _connection = _pcp.getconn()
>
> When I need the connection:
>
> from _db_connection import _connection
> ...
> cursor = _connection.cursor()
> cursor.execute(query, d)
> ...
> cursor.close()
>
> I never close the connection.

-- 
Mateusz Korniak
From mailinglists_timon at schroeter.it  Mon Dec  4 08:06:39 2006
From: mailinglists_timon at schroeter.it (Timon Schroeter)
Date: Mon Dec  4 08:07:45 2006
Subject: [mod_python] mailman with mod_python in chroot jail?
Message-ID: <CD56ADD0-106A-4362-95AD-995ADA3B2EF0@schroeter.it>

Hi *,

does anyone here have experience with running mailman on mod_python  
in a chroot-jail?

If you don't, do you expect any obstacles I should be aware of?

Sorry if this has been answered before- I've unsucessfully tried  
google and the archives of this list- they aren't accessible from the  
listinfo-page: The link points to
http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/ 
mod_python/

Thanks!

Timon

--
work ::: http://ida.first.fhg.de/~timon
Dipl. Chem. Timon Schroeter, Intelligent Data Analysis Group (IDA)
Fraunhofer FIRST, Kekulestr. 7, 12489 Berlin,  030 6392-1882
--
private ::: http://timon.info
M?llendorffstr. 114, 10367 Berlin,
030 214 666 26, 0179 23 75 910
skype: timon.schroeter




From sdavis2 at mail.nih.gov  Mon Dec  4 13:09:10 2006
From: sdavis2 at mail.nih.gov (Sean Davis)
Date: Mon Dec  4 13:09:32 2006
Subject: [mod_python] URL-based handlers
Message-ID: <200612041309.10233.sdavis2@mail.nih.gov>

I have looked at a few of the python-based web frameworks, but would like to 
roll my own (much stripped-down) framework.  I am curious if anyone has a 
handler that is shareable that maps a URL to a function, akin to what Django 
does?  Any links to mail archives, pages, etc. would be appreciated.

Thanks,
Sean
From jcigar at ulb.ac.be  Mon Dec  4 15:16:23 2006
From: jcigar at ulb.ac.be (Julien Cigar)
Date: Mon Dec  4 14:15:39 2006
Subject: [mod_python] URL-based handlers
In-Reply-To: <200612041309.10233.sdavis2@mail.nih.gov>
References: <200612041309.10233.sdavis2@mail.nih.gov>
Message-ID: <1165263383.1748.0.camel@localhost.localdomain>

http://routes.groovie.org/

On Mon, 2006-12-04 at 13:09 -0500, Sean Davis wrote:
> I have looked at a few of the python-based web frameworks, but would like to 
> roll my own (much stripped-down) framework.  I am curious if anyone has a 
> handler that is shareable that maps a URL to a function, akin to what Django 
> does?  Any links to mail archives, pages, etc. would be appreciated.
> 
> Thanks,
> Sean
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From deron.meranda at gmail.com  Mon Dec  4 14:49:17 2006
From: deron.meranda at gmail.com (Deron Meranda)
Date: Mon Dec  4 14:49:22 2006
Subject: [mod_python] mailman with mod_python in chroot jail?
In-Reply-To: <CD56ADD0-106A-4362-95AD-995ADA3B2EF0@schroeter.it>
References: <CD56ADD0-106A-4362-95AD-995ADA3B2EF0@schroeter.it>
Message-ID: <5c06fa770612041149i328d37d2jd195072aec7d85fe@mail.gmail.com>

On 12/4/06, Timon Schroeter <mailinglists_timon@schroeter.it> wrote:
> does anyone here have experience with running mailman on mod_python
> in a chroot-jail?
>
> If you don't, do you expect any obstacles I should be aware of?

I don't know specifically about mailman, but keep in mind that
when using chroot jails everything that you need must be resolvable
from inside the jail.  So this would also mean that you have to run
Apache inside the jail too.  From a Unix security perspecitive,
mod_python *IS* the same as Apache httpd.  And you probably also
need sendmail, etc. in there or whatever resources mailman needs.

I suspect really that you'll end up having to add so much to the
jail that it's not really worth it.  And chroot jails are notoriously
insecure (leaky) and hard to maintain (apply patches, etc) for all
but the simplest of daemons.

If you can possibly run on a modern Linux system, you may get
better security with less grief by using SElinux mandatory access
control rules than any chroot jail could give you.

But I have no direct experience attempting this is mailman, so
perhaps others have some better advice.


> Sorry if this has been answered before- I've unsucessfully tried
> google and the archives of this list- they aren't accessible from the
> listinfo-page: The link points to
> http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/
> mod_python/

Sorry, that appears to be a misconfiguration of the listinfo page.  Archives
are available though.  See http://wiki.apache.org/mod_python/Mailing_lists
for correct links.
-- 
Deron Meranda
From derek.asleson at gmail.com  Mon Dec  4 15:02:26 2006
From: derek.asleson at gmail.com (Derek Asleson)
Date: Mon Dec  4 15:02:54 2006
Subject: [mod_python] URL-based handlers
In-Reply-To: <1165263383.1748.0.camel@localhost.localdomain>
References: <200612041309.10233.sdavis2@mail.nih.gov>
	<1165263383.1748.0.camel@localhost.localdomain>
Message-ID: <6dda28010612041202l7f7f9361qaec26ae32bd71a52@mail.gmail.com>

Thanks Julien!

Does anyone know of any - or have any examples - of how this can integrate
with mod_python?


On 12/4/06, Julien Cigar <jcigar@ulb.ac.be> wrote:
>
> http://routes.groovie.org/
>
> On Mon, 2006-12-04 at 13:09 -0500, Sean Davis wrote:
> > I have looked at a few of the python-based web frameworks, but would
> like to
> > roll my own (much stripped-down) framework.  I am curious if anyone has
> a
> > handler that is shareable that maps a URL to a function, akin to what
> Django
> > does?  Any links to mail archives, pages, etc. would be appreciated.
> >
> > Thanks,
> > Sean
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061204/d2c02572/attachment.html
From sdavis2 at mail.nih.gov  Mon Dec  4 16:08:09 2006
From: sdavis2 at mail.nih.gov (Sean Davis)
Date: Mon Dec  4 16:08:12 2006
Subject: [mod_python] URL-based handlers
In-Reply-To: <1165263383.1748.0.camel@localhost.localdomain>
References: <200612041309.10233.sdavis2@mail.nih.gov>
	<1165263383.1748.0.camel@localhost.localdomain>
Message-ID: <200612041608.09111.sdavis2@mail.nih.gov>

On Monday 04 December 2006 15:16, Julien Cigar wrote:
> http://routes.groovie.org/

This looks nice.  Some glue is still needed, but it is a nice start.  Thanks 
for pointing it out.

Sean
From grahamd at dscpl.com.au  Mon Dec  4 16:24:30 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec  4 16:24:32 2006
Subject: [mod_python] avoiding database connection leak on module
	(re)import
Message-ID: <1165267470.19969@dscpl.user.openhosting.com>

Mark Harrison wrote ..
> Whenever the source file is modified, mod_python re-imports the
> file.  A naive program will have a connection leak if it just
> has a line like this:
> 
> myconnection = mydbpackage.connect(...)
> 
> 
> So, I'm closing and reopening the connection on each re-import:
> 
> try:
>      myconnection.close()
> except NameError:
>      pass
> myconnection = mydbpackage.connect(...)
> 
> Is there a better, more  mod_pythonic way to handle this type of
> situation?

This is a known issue. See ISSUE 12 in:

  http://www.dscpl.com.au/wiki/ModPython/Articles/ModuleImportingIsBroken

What exactly happens actually depends on which version of mod_python you are
using.

If you are using mod_python <3.2 when a reload occurs the new module is
reloaded on top of the existing module. Thus, the instance of the connection
object you created as a result of the prior load of the module will be replaced,
with close() not being able to be explicitly called on the connection object. If the
particular database connection object you are using does not play nicely and
automatically call close() when the Python object is dereferenced for the last
time, you will leak a database connection.

For these versions of mod_python you can use:

  if not globals().has_key('myconnection'):
    myconnection = mydbpackage.connect(...)

What this results in is that when the module is reloaded, it will detect that the
database connection object already exists and not bother to replace it and instead
will use the one inherited from the previous load of the module.

BTW, I should point out though that creating a database connection object at
global scope within a module like this is possibly bad practice. The reason is that
a failure to create the database connection will cause loading of the whole module
to fail. You are better better off having a singleton type object which is accessed
by actual request handlers when it needs the connection object, with the connection
object only being created the first time it is required. But then, even this will only
suffice in a non threaded Apache MPM. If using Windows of a multithreaded MPM
such as 'worker' on UNIX, you will need a more sophisticated pooling arrangement
or simply create the connection object for every request.

If you are using mod_python 3.2, the above applies only for modules pertaining to
custom handlers you have written yourself. If you are using mod_python.publisher
in 3.2, it is using its own module loader which creates an empty module into which
to load the new module. Thus, the existing connection object isn't overwritten,
but there also isn't any means to access the old connection object and close it
properly either. Thus, if the connection object doesn't call close() automatically when
Python object dereferenced, it will leak a database connection.

In mod_python 3.3, all modules, whether be they custom handler modules or
mod_python.publisher modules, will be loaded into a new empty module on a
reload of a module. In 3.3 however, you can supply hook functions to transfer data
from the old module instance to the new module instance. You thus use a combination
of what was required for versions <3.2 and the hook function.

  if not globals().has_key('myconnection'):
    myconnection = mydbpackage.connect(...)

  def __mp_clone__(module):
    module.myconnection = myconnection

If the connection object doesn't call close() properly as explained above, just in case
there is a problem with the clone hook and it raises an exception, you probably also
want to add:

  def __mp_purge__(module):
    try:
      myconnection.close()
    except:
      pass

This is the final fallback case where a module couldn't be cloned due to some failure
and it was necessary to discard both the old and new module instances and start
over fresh. The purge hook would allow you to call close() explicitly for the connection
object where it doesn't clean itself up properly.

In summary, things can be a bit messy for mod_python <3.3 and it is only 3.3
where what happens is a bit more defined and can be controlled.

Now, which version of mod_python are you using and is this a custom handler or
mod_python.publisher?

As a general suggestion, put the creation of your connection object in a module
that is not a candidate for automatic module reloading. That or just create it only
for the current request and then close() is explicitly when finished with it for that
request.

Graham
From nlv11281 at natlab.research.philips.com  Tue Dec  5 01:21:14 2006
From: nlv11281 at natlab.research.philips.com (Mike Looijmans)
Date: Tue Dec  5 01:21:28 2006
Subject: [mod_python] Import a module into a variable value
In-Reply-To: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
References: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
Message-ID: <45750FDA.4020200@natlab.research.philips.com>

Why not just re-read the file on every request?

The caching you are doing now is also done by the operating system. You won't be really reading from 
disk when you do a read. Note that using:

_html = f.read()

is much more efficient than reading into an array and then joining the lines together - unless 
removing newline characters was what you had in mind (which I seriously doubt because it might mess 
up the text).

In fact, a one-liner will do:

return open('/var/www/html/carconsumption.com/index.html', 'r').read() % _d

--
Mike Looijmans
Philips Natlab / Topic Automation


Clodoaldo wrote:
> I'm doing a very light templating in a publisher program.
> 
> There is a html template read from the index.html file in which
> '%(variable)s' are replaced.
> 
> This code reads the template from the file:
> 
> f = open('/var/www/html/carconsumption.com/index.html', 'r')
> _html = ''.join(f.readlines())
> f.close()
> 
> And then inside index() at return time the usual substitution:
> 
>   return C._html % _d
> 
> Editing a file with the extension .html is nice with editors with html
> syntax highlighting, completion and other things. The only problem
> with this approach is that the file index.html is not reloaded when
> changed.
> 
> I know i could just use a generic handler with PSP as templating. But
> the publisher is so convenient and as the new importer in 3.3 is full
> of tricks like importing modules with any extension i would like to
> know if there is some way to import a whole module into a variable
> value preventing it from being interpreted as python code.
> 
> If the above is nonsense what would be a better approach for
> templating within publisher programs or just to solve the not
> reloadable index.html file?
> 
> Regards,

From clodoaldo.pinto.neto at gmail.com  Tue Dec  5 05:06:42 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Tue Dec  5 05:06:50 2006
Subject: [mod_python] Import a module into a variable value
In-Reply-To: <45750FDA.4020200@natlab.research.philips.com>
References: <a595de7a0612020226n596e685dj8e7225bf1d11183c@mail.gmail.com>
	<45750FDA.4020200@natlab.research.philips.com>
Message-ID: <a595de7a0612050206y37928a04pde4934d01434e8b4@mail.gmail.com>

2006/12/5, Mike Looijmans <nlv11281@natlab.research.philips.com>:
> Why not just re-read the file on every request?
>
> The caching you are doing now is also done by the operating system. You won't be really reading from
> disk when you do a read.

I guess you are right. At least if the file is read frequently enough
to be kept in the cache by the OS.

> Note that using:
>
> _html = f.read()
>
> is much more efficient than reading into an array and then joining the lines together

Sure. Don't remember why I did that.

> - unless
> removing newline characters was what you had in mind (which I seriously doubt because it might mess
> up the text).

It would be a big mess.

>
> In fact, a one-liner will do:
>
> return open('/var/www/html/carconsumption.com/index.html', 'r').read() % _d
>

I did that. Just placed the open in a function to not clutter the return line:

   return index_html() % _d

Thanks.

> --
> Mike Looijmans
> Philips Natlab / Topic Automation
>
>
> Clodoaldo wrote:
> > I'm doing a very light templating in a publisher program.
> >
> > There is a html template read from the index.html file in which
> > '%(variable)s' are replaced.
> >
> > This code reads the template from the file:
> >
> > f = open('/var/www/html/carconsumption.com/index.html', 'r')
> > _html = ''.join(f.readlines())
> > f.close()
> >
> > And then inside index() at return time the usual substitution:
> >
> >   return C._html % _d
> >
> > Editing a file with the extension .html is nice with editors with html
> > syntax highlighting, completion and other things. The only problem
> > with this approach is that the file index.html is not reloaded when
> > changed.
> >
> > I know i could just use a generic handler with PSP as templating. But
> > the publisher is so convenient and as the new importer in 3.3 is full
> > of tricks like importing modules with any extension i would like to
> > know if there is some way to import a whole module into a variable
> > value preventing it from being interpreted as python code.
> >
> > If the above is nonsense what would be a better approach for
> > templating within publisher programs or just to solve the not
> > reloadable index.html file?
> >
> > Regards,
>
>

-- 
Clodoaldo Pinto Neto
From mailinglists_timon at schroeter.it  Tue Dec  5 10:08:19 2006
From: mailinglists_timon at schroeter.it (Timon Schroeter)
Date: Tue Dec  5 10:08:32 2006
Subject: [mod_python] mailman with mod_python in chroot jail?
In-Reply-To: <5c06fa770612041149i328d37d2jd195072aec7d85fe@mail.gmail.com>
References: <CD56ADD0-106A-4362-95AD-995ADA3B2EF0@schroeter.it>
	<5c06fa770612041149i328d37d2jd195072aec7d85fe@mail.gmail.com>
Message-ID: <1863C99C-CFE3-4A65-AC1E-7E83AB637546@schroeter.it>

Thank you Martin and Daron for your answers & the pointer to the  
correct archive url!

Timon

--
work ::: http://ida.first.fhg.de/~timon
Dipl. Chem. Timon Schroeter, Intelligent Data Analysis Group (IDA)
Fraunhofer FIRST, Kekulestr. 7, 12489 Berlin,  030 6392-1882
--
private ::: http://timon.info
M?llendorffstr. 114, 10367 Berlin,
030 214 666 26, 0179 23 75 910
skype: timon.schroeter




Am 04.12.2006 um 20:49 schrieb Deron Meranda:

> On 12/4/06, Timon Schroeter <mailinglists_timon@schroeter.it> wrote:
>> does anyone here have experience with running mailman on mod_python
>> in a chroot-jail?
>>
>> If you don't, do you expect any obstacles I should be aware of?
>
> I don't know specifically about mailman, but keep in mind that
> when using chroot jails everything that you need must be resolvable
> from inside the jail.  So this would also mean that you have to run
> Apache inside the jail too.  From a Unix security perspecitive,
> mod_python *IS* the same as Apache httpd.  And you probably also
> need sendmail, etc. in there or whatever resources mailman needs.
>
> I suspect really that you'll end up having to add so much to the
> jail that it's not really worth it.  And chroot jails are notoriously
> insecure (leaky) and hard to maintain (apply patches, etc) for all
> but the simplest of daemons.
>
> If you can possibly run on a modern Linux system, you may get
> better security with less grief by using SElinux mandatory access
> control rules than any chroot jail could give you.
>
> But I have no direct experience attempting this is mailman, so
> perhaps others have some better advice.
>
>
>> Sorry if this has been answered before- I've unsucessfully tried
>> google and the archives of this list- they aren't accessible from the
>> listinfo-page: The link points to
>> http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/
>> mod_python/
>
> Sorry, that appears to be a misconfiguration of the listinfo page.   
> Archives
> are available though.  See http://wiki.apache.org/mod_python/ 
> Mailing_lists
> for correct links.
> -- 
> Deron Meranda
>




From durumdara at gmail.com  Thu Dec  7 05:56:20 2006
From: durumdara at gmail.com (durumdara)
Date: Thu Dec  7 05:56:29 2006
Subject: [mod_python] mod python PSP and UTF 8 encoded libraries
Message-ID: <4577F354.1010809@gmail.com>

Hi !

I use Pyscripter and Pspad for editing sources.
The Pyscripter have many good functions, but it have a very ugly 
property: it changes all of non-ascii chars in the source (in background).
So when I put a special char in the source, it was replaced to "?".

The author of this good program said that I can use utf-8 encoding.
Ok, this is solution (I thought) and then I save my every library in 
UTF-8 encoding.

But next I got many errors, because psp cannot handle the shared lib 
files when they are encoded in utf.

Can psp use these libs in utf mode, or I need to "downgrade" them to 
iso-8859-2?

Thanks for your help:
dd
From bgailer at alum.rpi.edu  Thu Dec  7 14:02:33 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Thu Dec  7 14:01:51 2006
Subject: [mod_python] Installing mod_python on Windows (Server 2003)
Message-ID: <45786549.3070301@alum.rpi.edu>

Installing mod_python on Windows (Server 2003)

I have visited the mod_python web site. I find references to windows 
binaries, but can't find any to download. Where are they?

-- 
Bob Gailer
510-978-4454

From jpg at jgassociates.ca  Thu Dec  7 14:40:13 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Thu Dec  7 14:37:23 2006
Subject: [mod_python] Installing mod_python on Windows (Server 2003)
In-Reply-To: <45786549.3070301@alum.rpi.edu>
References: <45786549.3070301@alum.rpi.edu>
Message-ID: <45786E1D.2090301@jgassociates.ca>

Bob Gailer wrote:
> Installing mod_python on Windows (Server 2003)
> 
> I have visited the mod_python web site. I find references to windows 
> binaries, but can't find any to download. Where are they?
> 

http://www.apache.org/dist/httpd/modpython/win/3.2.10/

Jim
From bgailer at alum.rpi.edu  Thu Dec  7 16:00:42 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Thu Dec  7 16:00:03 2006
Subject: [mod_python] Error starting apache service after installing
	mod_python
Message-ID: <457880FA.60501@alum.rpi.edu>

(Windows 2003 server) event log states:

The Apache service named Apache2Triad Apache2 Service reported the 
following error:
 >>> httpd.exe: Syntax error on line 1103 of 
H:/apache2triad/conf/httpd.conf: Cannot load 
H:/apache2triad/modules/mod_python.so into server: The specified 
procedure could not be found.     .

Line 1103 is "LoadModule python_module modules/mod_python.so"
H:\apache2triad\modules\mod_python.so exists.

What do I need to do to fix this?

-- 
Bob Gailer
510-978-4454

From grahamd at dscpl.com.au  Thu Dec  7 16:02:00 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Dec  7 16:02:04 2006
Subject: [mod_python] mod python PSP and UTF 8 encoded libraries
Message-ID: <1165525320.455@dscpl.user.openhosting.com>

durumdara wrote ..
> Hi !
> 
> I use Pyscripter and Pspad for editing sources.
> The Pyscripter have many good functions, but it have a very ugly 
> property: it changes all of non-ascii chars in the source (in background).
> So when I put a special char in the source, it was replaced to "?".
> 
> The author of this good program said that I can use utf-8 encoding.
> Ok, this is solution (I thought) and then I save my every library in 
> UTF-8 encoding.
> 
> But next I got many errors, because psp cannot handle the shared lib 
> files when they are encoded in utf.
> 
> Can psp use these libs in utf mode, or I need to "downgrade" them to 
> iso-8859-2?

I can't remember the outcome, but read:

  http://www.google.com/search?q=PSP+Unicode&q=site%3Awww.modpython.org

There have been numerous posts about PSP and Unicode before on the
mailing list. You also might search for PSP and UTF together as well.

Graham
From grahamd at dscpl.com.au  Thu Dec  7 16:15:06 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Dec  7 16:15:18 2006
Subject: [mod_python] Error starting apache service after
	installingmod_python
Message-ID: <1165526106.6753@dscpl.user.openhosting.com>

Bob Gailer wrote ..
> (Windows 2003 server) event log states:
> 
> The Apache service named Apache2Triad Apache2 Service reported the 
> following error:
>  >>> httpd.exe: Syntax error on line 1103 of 
> H:/apache2triad/conf/httpd.conf: Cannot load 
> H:/apache2triad/modules/mod_python.so into server: The specified 
> procedure could not be found.     .
> 
> Line 1103 is "LoadModule python_module modules/mod_python.so"
> H:\apache2triad\modules\mod_python.so exists.
> 
> What do I need to do to fix this?

It may exist, but check the following:

1. That the service that Apache is running as has permissions to be able to
read the file and it isn't just only you who can read it.

2. You also need to ensure that you have available the required Microsoft
C/C++ runtime DLL libraries that the version you are using requires. Possibly
msvcr71.dll and msvcp71.dll.

3. Ensure that you aren't trying to use compiled version of mod_python
with wrong version of Apache that it was built for.

Graham
From bgailer at alum.rpi.edu  Thu Dec  7 16:40:23 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Thu Dec  7 16:39:39 2006
Subject: [mod_python] Error starting apache service after
	installingmod_python
In-Reply-To: <1165526106.6753@dscpl.user.openhosting.com>
References: <1165526106.6753@dscpl.user.openhosting.com>
Message-ID: <45788A47.1090406@alum.rpi.edu>

Graham Dumpleton wrote:
> Bob Gailer wrote ..
>   
>> (Windows 2003 server) event log states:
>>
>> The Apache service named Apache2Triad Apache2 Service reported the 
>> following error:
>>  >>> httpd.exe: Syntax error on line 1103 of 
>> H:/apache2triad/conf/httpd.conf: Cannot load 
>> H:/apache2triad/modules/mod_python.so into server: The specified 
>> procedure could not be found.     .
>>
>> Line 1103 is "LoadModule python_module modules/mod_python.so"
>> H:\apache2triad\modules\mod_python.so exists.
>>
>> What do I need to do to fix this?
>>     
>
> It may exist, but check the following:
>
> 1. That the service that Apache is running as has permissions to be able to
> read the file and it isn't just only you who can read it.
>   
It is in the same directory as all the other mod_*.so files, so I assume 
apache has the permission.
> 2. You also need to ensure that you have available the required Microsoft
> C/C++ runtime DLL libraries that the version you are using requires. Possibly
> msvcr71.dll and msvcp71.dll.
>   
Where should these reside? I have copies in c:\windows\system32.and in 
h:\apache2triad\bin (and in numerous other places).
> 3. Ensure that you aren't trying to use compiled version of mod_python
> with wrong version of Apache that it was built for.
>   
How do I do that?

-- 
Bob Gailer
510-978-4454

From grahamd at dscpl.com.au  Thu Dec  7 16:48:25 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Dec  7 16:50:29 2006
Subject: [mod_python] Error starting apache service after
	installingmod_python
Message-ID: <1165528105.22824@dscpl.user.openhosting.com>

Bob Gailer wrote ..
> Graham Dumpleton wrote:
> > Bob Gailer wrote ..
> >   
> >> (Windows 2003 server) event log states:
> >>
> >> The Apache service named Apache2Triad Apache2 Service reported the 
> >> following error:
> >>  >>> httpd.exe: Syntax error on line 1103 of 
> >> H:/apache2triad/conf/httpd.conf: Cannot load 
> >> H:/apache2triad/modules/mod_python.so into server: The specified 
> >> procedure could not be found.     .
> >>
> >> Line 1103 is "LoadModule python_module modules/mod_python.so"
> >> H:\apache2triad\modules\mod_python.so exists.
> >>
> >> What do I need to do to fix this?
> >>     
> >
> > It may exist, but check the following:
> >
> > 1. That the service that Apache is running as has permissions to be able
> to
> > read the file and it isn't just only you who can read it.
> >   
> It is in the same directory as all the other mod_*.so files, so I assume
> apache has the permission.
> > 2. You also need to ensure that you have available the required Microsoft
> > C/C++ runtime DLL libraries that the version you are using requires.
> Possibly
> > msvcr71.dll and msvcp71.dll.
> >   
> Where should these reside? I have copies in c:\windows\system32.and in
> h:\apache2triad\bin (and in numerous other places).
> > 3. Ensure that you aren't trying to use compiled version of mod_python
> > with wrong version of Apache that it was built for.
> >   
> How do I do that?

What version of Apache are you running, 2.0 or 2.2?

Then ensure that matches the precompiled binaries you picked up from:

  http://www.apache.org/dist/httpd/modpython/win/3.2.10/

The Apache version number is in the name of the file.

Sorry, don't how on Windows to tell which version of Apache you are running.

If that doesn't help, will have to let some people who do know something
about Windows comment. I am only regurgitating previous suggestions
from past mailing list posts.

Graham
From mh at pixar.com  Thu Dec  7 18:14:11 2006
From: mh at pixar.com (Mark Harrison)
Date: Thu Dec  7 18:14:03 2006
Subject: [mod_python] eliminating last foo.py from url?
Message-ID: <4578A043.3080507@pixar.com>

So, I've pretty much copied the standard directory configuration,

<Directory "/apache/htdocs/appserv">
         AddHandler mod_python .py
         PythonHandler appserv
         PythonDebug On
</Directory>

and I can reference my service by http://foo.com/appserv/appserv.py
(or any other .py in that directory, of course).

How can I make it such that I can reference with the trailing foo.py?
e.g.
http://foo.com/appserv

Many TIA!
Mark
From grahamd at dscpl.com.au  Thu Dec  7 18:25:35 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Dec  7 18:25:38 2006
Subject: [mod_python] eliminating last foo.py from url?
Message-ID: <1165533935.3202@dscpl.user.openhosting.com>

Mark Harrison wrote ..
> So, I've pretty much copied the standard directory configuration,
> 
> <Directory "/apache/htdocs/appserv">
>          AddHandler mod_python .py
>          PythonHandler appserv
>          PythonDebug On
> </Directory>
> 
> and I can reference my service by http://foo.com/appserv/appserv.py
> (or any other .py in that directory, of course).
> 
> How can I make it such that I can reference with the trailing foo.py?
> e.g.
> http://foo.com/appserv

Read:

  http://www.dscpl.com.au/wiki/ModPython/Articles/SetHandlerVersusAddHandler

When using AddHandler, requests against the directory don't go to mod_python
automatically. You can possibly use DirectoryIndex directive as:

  DirectoryIndex appserv.py

Graham
From steve at holdenweb.com  Thu Dec  7 18:42:01 2006
From: steve at holdenweb.com (Steve Holden)
Date: Thu Dec  7 18:42:30 2006
Subject: [mod_python] Re: Error starting apache service after
	installingmod_python
In-Reply-To: <1165528105.22824@dscpl.user.openhosting.com>
References: <1165528105.22824@dscpl.user.openhosting.com>
Message-ID: <ela8sd$f3e$1@sea.gmane.org>

Graham Dumpleton wrote:
[...]
> Sorry, don't how on Windows to tell which version of Apache you are running.
> 
Easiest way is to hover on the Apache system tray icon and left-click. 
You will see either or both of "Apache 2" and "Apache 2.2" - they can 
co-exist on a Windows system, though obviously if you run them both you 
have to avoid port conflicts.

> If that doesn't help, will have to let some people who do know something
> about Windows comment. I am only regurgitating previous suggestions
> from past mailing list posts.
> 
I'd suggest it's likely to be a permissions problem. You could check it 
by writing a simple Python CGI to try and read the module file - at 
least that will tell you whether you can read it. I'm not sure whether 
module files require execute permission as well.

regards
  Steve
-- 
Steve Holden       +44 150 684 7255  +1 800 494 3119
Holden Web LLC/Ltd          http://www.holdenweb.com
Skype: holdenweb       http://holdenweb.blogspot.com
Recent Ramblings     http://del.icio.us/steve.holden

From bgailer at alum.rpi.edu  Thu Dec  7 23:59:40 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Thu Dec  7 23:58:45 2006
Subject: [mod_python] Error starting apache service after
	installingmod_python
In-Reply-To: <1165528105.22824@dscpl.user.openhosting.com>
References: <1165528105.22824@dscpl.user.openhosting.com>
Message-ID: <4578F13C.2060705@alum.rpi.edu>

Graham Dumpleton wrote:
[snip]
> What version of Apache are you running, 2.0 or 2.2?
>   
2.2.0
> Then ensure that matches the precompiled binaries you picked up from:
>
>   http://www.apache.org/dist/httpd/modpython/win/3.2.10/
>   
The previous link I had followed took me to 
"mod_python-3.2.8.win32-py2.4.exe". The link you just gave me leads to "
mod_python-3.2.10.win32-py2.4-apache2.2.exe". Quite different, eh? 

Is there someplace on the website that offers these links, or does one 
just have to know?

> The Apache version number is in the name of the file.
>
> Sorry, don't how on Windows to tell which version of Apache you are running.
>   
When the service is running I can use apache2triadcp (a control panel 
for all the a2t stuff). It shows the version #. I can also look in 
services where it appears in the description.
> If that doesn't help, will have to let some people who do know something
> about Windows comment. I am only regurgitating previous suggestions
> from past mailing list posts.
>   
Thank you so much for doing that harvesting. Are there ways to search 
the archives by topic?


-- 
Bob Gailer
510-978-4454

From bgailer at alum.rpi.edu  Fri Dec  8 00:12:35 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Fri Dec  8 00:11:42 2006
Subject: [mod_python] Error starting apache service after
	installingmod_python
In-Reply-To: <4578F13C.2060705@alum.rpi.edu>
References: <1165528105.22824@dscpl.user.openhosting.com>
	<4578F13C.2060705@alum.rpi.edu>
Message-ID: <4578F443.2090804@alum.rpi.edu>

Bob Gailer wrote:

"mod_python-3.2.10.win32-py2.4-apache2.2.exe".is the answer. Apache now 
starts and mptest works. Now I can get on to the fun stuff.
> Is there someplace on the website that offers these links, or does one 
> just have to know?
In tracing back from the link you gave me I found Index of 
/dist/httpd/modpython. I had been there before but overlooked the win/ 
directory!

-- 
Bob Gailer
510-978-4454

From grahamd at dscpl.com.au  Fri Dec  8 00:45:35 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec  8 00:45:45 2006
Subject: [mod_python] Error starting apache service after
	installingmod_python
Message-ID: <1165556735.14655@dscpl.user.openhosting.com>

Bob Gailer wrote ..
> > If that doesn't help, will have to let some people who do know something
> > about Windows comment. I am only regurgitating previous suggestions
> > from past mailing list posts.
> >   
> Thank you so much for doing that harvesting. Are there ways to search 
> the archives by topic?

The user list can be searched from the www.modpython.org search box. It
actually just uses Google. If you want to restrict results to the mailing list
and ignore mod_python documentation use 'inurl:pipermail' in the list of
search terms.

Graham
From karl.m.bowles at lmco.com  Fri Dec  8 13:09:57 2006
From: karl.m.bowles at lmco.com (Bowles, Karl M)
Date: Fri Dec  8 13:10:23 2006
Subject: [mod_python] installing mod python
Message-ID: <D17FEEBBEC904A4893DAD46D94AE1CC34A55B5@emss02m05.us.lmco.com>

I have Python 2.5 installed on my pc and apache tomcat 5.5. I tried
running the msl script from the apache web site to install the
mod_python software and no matter what version of the install script I
try to use it won't install because python 2.x ( where x is always less
than 5). Does this mean I have to uninstall Python 2.5 and use 2.4? Is
there a way to install the mod and still use 2.5? For instance, I
noticed in the directory trees there were files that looked like just
the module, not associated with an installation script. Could I just
download that and tell apache about it? I really need this asap for an
evaluation I am doing.

 

Mac Bowles

Embedded Software Engineer, Staff

303-971-8206

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061208/c073dccf/attachment.html
From bgailer at alum.rpi.edu  Fri Dec  8 13:20:26 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Fri Dec  8 13:19:36 2006
Subject: [mod_python] installing mod python
In-Reply-To: <D17FEEBBEC904A4893DAD46D94AE1CC34A55B5@emss02m05.us.lmco.com>
References: <D17FEEBBEC904A4893DAD46D94AE1CC34A55B5@emss02m05.us.lmco.com>
Message-ID: <4579ACEA.8030003@alum.rpi.edu>

Bowles, Karl M wrote:
>
> I have Python 2.5 installed on my pc and apache tomcat 5.5. I tried 
> running the msl script from the apache web site to install the 
> mod_python software and no matter what version of the install script I 
> try to use it won?t install because python 2.x ( where x is always 
> less than 5). Does this mean I have to uninstall Python 2.5 and use 
> 2.4? Is there a way to install the mod and still use 2.5? For 
> instance, I noticed in the directory trees there were files that 
> looked like just the module, not associated with an installation 
> script. Could I just download that and tell apache about it? I really 
> need this asap for an evaluation I am doing.
>
I have the same situation. I have both python 2.4 and 2.5 installed. 
Everything seems to work just fine.

-- 
Bob Gailer
510-978-4454

From grahamd at dscpl.com.au  Sat Dec  9 01:51:31 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec  9 01:51:42 2006
Subject: [mod_python] installing mod python
In-Reply-To: <D17FEEBBEC904A4893DAD46D94AE1CC34A55B5@emss02m05.us.lmco.com>
References: <D17FEEBBEC904A4893DAD46D94AE1CC34A55B5@emss02m05.us.lmco.com>
Message-ID: <5E04AEF7-5236-4DE2-8DDA-BD07063EBB86@dscpl.com.au>


On 09/12/2006, at 5:09 AM, Bowles, Karl M wrote:

> I have Python 2.5 installed on my pc and apache tomcat 5.5. I tried  
> running the msl script from the apache web site to install the  
> mod_python software and no matter what version of the install  
> script I try to use it won?t install because python 2.x ( where x  
> is always less than 5). Does this mean I have to uninstall Python  
> 2.5 and use 2.4? Is there a way to install the mod and still use  
> 2.5? For instance, I noticed in the directory trees there were  
> files that looked like just the module, not associated with an  
> installation script. Could I just download that and tell apache  
> about it? I really need this asap for an evaluation I am doing.
The Apache site seems to be done at the moment, so:

   http://www.apache.org/dist/httpd/modpython/win/3.2.10/

isn't working, but mod_python installers for Windows can also be  
found at:

   http://nicolas.lehuen.com/download/mod_python/

The important thing I want to point out is that there are installers  
for different
combinations of Python and Apache. You must use the correct one.

What was the full name of the installer file you used? What is the exact
version of Apache you are using? Did you use the correct installer?

Also, whose installer for Apache and whose installer for Python did  
you use?

Graham
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061209/d6368ea9/attachment.html
From durumdara at gmail.com  Mon Dec 11 04:28:59 2006
From: durumdara at gmail.com (durumdara)
Date: Mon Dec 11 04:29:06 2006
Subject: [mod_python] Module importing solution (?)
Message-ID: <457D24DB.6060606@gmail.com>

Skipped content of type multipart/alternative-------------- next part --------------
import os, sys
from threading import Lock

_ImportLock = Lock()
_Modules = {}

def Import(ModPath):
    ModPath = os.path.abspath(ModPath)
    _ImportLock.acquire(1)
    try:
        if not os.path.exists(ModPath):
            raise Exception, 'Module named "%s" does not exists!' % ModPath
        modinfo = _Modules.get(ModPath, None)
        needreload = (not modinfo)
        actmodtime = os.path.getmtime(ModPath)
        if modinfo:
            modtime, module = modinfo
            needreload = (actmodtime != modtime)
        if not needreload:
            return module
        mpath, mfn = os.path.split(ModPath)
        mf, me = os.path.splitext(mfn)
        import imp
        imp.acquire_lock( )
        try:
            afile, apathname, adescription = imp.find_module(mf, [mpath])
            module = imp.load_module(mf, afile, ModPath, adescription)
            del(sys.modules[mf])
        finally:
            imp.release_lock()
        _Modules[ModPath] = [actmodtime, module]
        return module
    finally:
        _ImportLock.release()


#print os.path.abspath('./t1/index.py')
#import sys
#sys.exit()
modtext = '''
name = %s
def PrintInfo():
    print "File:", __file__
    print "Name var:", name

'''
moddatas = []

def WriteIndexPy(Number, VarValue):
    spath = './subdir%03d' % Number
    if not os.path.exists(spath):
        os.makedirs(spath)
    sfn = os.path.join(spath, 'index.py')
    pytext = modtext % VarValue
    f = open(sfn, 'w')
    f.write(pytext)
    f.close()

print "Creating modules"
for i in range(100):
    WriteIndexPy(i, i)

print "Import new modules"
import time
st = time.time()
for i in range(100):
    spath = './subdir%03d' % i
    sfn = os.path.join(spath, 'index.py')
    m = Import(sfn)
    #print "Module:", m
    #print "Module's var", m.name
    #m.PrintInfo()
et = time.time()
print et - st, "seconds"

print "Import loaded modules"
import time
st = time.time()
for i in range(100):
    spath = './subdir%03d' % i
    sfn = os.path.join(spath, 'index.py')
    m = Import(sfn)
    #print "Module:", m
    #print "Module's var", m.name
    #m.PrintInfo()
et = time.time()
print et - st, "seconds"

time.sleep(1)
print "Reload 1"
spath = './subdir%03d' % 0
sfn = os.path.join(spath, 'index.py')
WriteIndexPy(0,100)
m = Import(sfn)
print "Module:", m
print "Module's var", m.name
m.PrintInfo()

print "Reload 2"
m = Import(sfn)
print "Module:", m
print "Module's var", m.name
m.PrintInfo()

print "Exec test"
import time
st = time.time()
for i in range(100):
    spath = './subdir%03d' % i
    sfn = os.path.join(spath, 'index.py')
    execfile(sfn, globals(), locals())
et = time.time()
print et - st, "seconds"

-------------- next part --------------
import os, sys
from threading import Lock

_ImportLock = Lock()
_Modules = {}

def Import(ModPath):
    ModPath = os.path.abspath(ModPath)
    _ImportLock.acquire(1)
    try:
        if not os.path.exists(ModPath):
            raise Exception, 'Module named "%s" does not exists!' % ModPath
        modinfo = _Modules.get(ModPath, None)
        needreload = (not modinfo)
        actmodtime = os.path.getmtime(ModPath)
        if modinfo:
            modtime, module = modinfo
            needreload = (actmodtime != modtime)
        if not needreload:
            return module
        orgsyspath = sys.path[:]
        try:
            mpath, mfile = os.path.split(ModPath)
            mfn, mfe = os.path.splitext(mfile)
            for apath in orgsyspath:
                amodpath = os.path.join(apath, mfile)
                if os.path.exists(amodpath):
                    sys.path.remove(apath)
            sys.path.append(mpath)
            if sys.modules.has_key(mfn):
                del(sys.modules[mfn])
            module = __import__(mfn)
            sys.path.remove(mpath)
            del(sys.modules[mfn])
            _Modules[ModPath] = [actmodtime, module]
            return module
        finally:
            sys.path = orgsyspath[:]
    finally:
        _ImportLock.release()


#print os.path.abspath('./t1/index.py')
#import sys
#sys.exit()
modtext = '''
name = %s
def PrintInfo():
    print "File:", __file__
    print "Name var:", name
    
'''
moddatas = []
for i in range(100):
    spath = './subdir%03d' % i
    if not os.path.exists(spath):
        os.makedirs(spath)
    sfn = os.path.join(spath, 'index.py')
    pytext = modtext % i
    open(sfn, 'w').write(pytext)
import gc
gc.collect()
import time
st = time.time()
for i in range(100):
    spath = './subdir%03d' % i
    sfn = os.path.join(spath, 'index.py')
    m = Import(sfn)
    #moddatas.append([m, m.name])
    #print "Module:", m
    #print "Module's var", m.name
    #m.PrintInfo()
et = time.time()
print et - st, "seconds"

'''
m1 = Import('./t1/index.py')
print m1.name
m2 = Import('./t2/index.py')
print m2.name
m2a = Import('./t2/index.py')
print m2a.name
'''
-------------- next part --------------
#import sys
#print sys.modules
#print "mod1"
#print globals()
#print locals()
#print a
#
#a  = 2

def main(RO):
    x
    
-------------- next part --------------
import os, sys

a =  {'a' : 1}
#locals()
#print sys.modules.keys()
execfile('execmod1.py', a)
print a['a']
From grahamd at dscpl.com.au  Mon Dec 11 05:36:25 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 11 05:37:47 2006
Subject: [mod_python] Module importing solution (?)
In-Reply-To: <457D24DB.6060606@gmail.com>
References: <457D24DB.6060606@gmail.com>
Message-ID: <F349D415-58C4-4138-A831-78890968070A@dscpl.com.au>

The module importer has been rewritten in mod_python 3.3 and addresses
the various problems earlier versions had. See:

   http://www.dscpl.com.au/wiki/ModPython/Articles/ 
ModuleImportingIsBroken

for a run down of the problems.

You can find out a bit about the capabilities of the new importer by  
reading
documentation for apache.import_module() at:

   http://svn.apache.org/viewvc/httpd/mod_python/trunk/Doc/ 
modpython4.tex?view=markup

Version 3.3 of mod_python is in final round of checks before proper  
release
at this very moment.

Graham

On 11/12/2006, at 8:28 PM, durumdara wrote:

> Hi!
>
> I many times thinking about better site structures, and everytime I  
> hampered by "import hell"...
> So yesterday I tried something.
>
> There is many way to avoid this problem.
> With import:
> 1.) Use only one file that handle every request.
> 2.) Use one main file, and one file for every subdirs.
> 3.) Use many file, every of them handle it's subdirs.
> In this way you need unique named submodules: xxxx_name (where xxxx  
> is a hexad. id), or fullpathname (example: /main/sub/subsub =  
> main_sub_sub).
> This structure is very unflexible, because some of the informations  
> are stored in real subfolders, some of in the filenames.
> I cannot create unified directory structure for use same names  
> except I create unique module names.
>
> Without import:
> 1.) Execfile, Exec.
> 2.) PSP.
>
> Exec is good, but need reinterpretation in every request, and every  
> of them need to have same structure.
>
> The conclosion that import is need UNIQUE name, but uniqueness is  
> could be everything what can representable in complete filepath.
>
> Yesterday I tried something.
> The module importing in python is based on sys.modules.
> But if you get out from this way, you can use imp module to do it  
> in your way.
>
> I created some example.
> In this example I create many subdirs with many index.py, and I  
> import them one by one.
> And later I modify one of them, and I test reloading.
> It is working, but some os.sleep is needed to it recognize the  
> changes.
>
> Please write me (Graham!) your opinion: it is useful, or not ?
>
> Thanks for it:
>     dd
>
> import os, sys
> from threading import Lock
>
> _ImportLock = Lock()
> _Modules = {}
>
> def Import(ModPath):
>     ModPath = os.path.abspath(ModPath)
>     _ImportLock.acquire(1)
>     try:
>         if not os.path.exists(ModPath):
>             raise Exception, 'Module named "%s" does not exists!' %  
> ModPath
>         modinfo = _Modules.get(ModPath, None)
>         needreload = (not modinfo)
>         actmodtime = os.path.getmtime(ModPath)
>         if modinfo:
>             modtime, module = modinfo
>             needreload = (actmodtime != modtime)
>         if not needreload:
>             return module
>         mpath, mfn = os.path.split(ModPath)
>         mf, me = os.path.splitext(mfn)
>         import imp
>         imp.acquire_lock( )
>         try:
>             afile, apathname, adescription = imp.find_module(mf,  
> [mpath])
>             module = imp.load_module(mf, afile, ModPath, adescription)
>             del(sys.modules[mf])
>         finally:
>             imp.release_lock()
>         _Modules[ModPath] = [actmodtime, module]
>         return module
>     finally:
>         _ImportLock.release()
>
>
> #print os.path.abspath('./t1/index.py')
> #import sys
> #sys.exit()
> modtext = '''
> name = %s
> def PrintInfo():
>     print "File:", __file__
>     print "Name var:", name
>
> '''
> moddatas = []
>
> def WriteIndexPy(Number, VarValue):
>     spath = './subdir%03d' % Number
>     if not os.path.exists(spath):
>         os.makedirs(spath)
>     sfn = os.path.join(spath, 'index.py')
>     pytext = modtext % VarValue
>     f = open(sfn, 'w')
>     f.write(pytext)
>     f.close()
>
> print "Creating modules"
> for i in range(100):
>     WriteIndexPy(i, i)
>
> print "Import new modules"
> import time
> st = time.time()
> for i in range(100):
>     spath = './subdir%03d' % i
>     sfn = os.path.join(spath, 'index.py')
>     m = Import(sfn)
>     #print "Module:", m
>     #print "Module's var", m.name
>     #m.PrintInfo()
> et = time.time()
> print et - st, "seconds"
>
> print "Import loaded modules"
> import time
> st = time.time()
> for i in range(100):
>     spath = './subdir%03d' % i
>     sfn = os.path.join(spath, 'index.py')
>     m = Import(sfn)
>     #print "Module:", m
>     #print "Module's var", m.name
>     #m.PrintInfo()
> et = time.time()
> print et - st, "seconds"
>
> time.sleep(1)
> print "Reload 1"
> spath = './subdir%03d' % 0
> sfn = os.path.join(spath, 'index.py')
> WriteIndexPy(0,100)
> m = Import(sfn)
> print "Module:", m
> print "Module's var", m.name
> m.PrintInfo()
>
> print "Reload 2"
> m = Import(sfn)
> print "Module:", m
> print "Module's var", m.name
> m.PrintInfo()
>
> print "Exec test"
> import time
> st = time.time()
> for i in range(100):
>     spath = './subdir%03d' % i
>     sfn = os.path.join(spath, 'index.py')
>     execfile(sfn, globals(), locals())
> et = time.time()
> print et - st, "seconds"
>
>
>
>
>
> import os, sys
> from threading import Lock
>
> _ImportLock = Lock()
> _Modules = {}
>
> def Import(ModPath):
>     ModPath = os.path.abspath(ModPath)
>     _ImportLock.acquire(1)
>     try:
>         if not os.path.exists(ModPath):
>             raise Exception, 'Module named "%s" does not exists!' %  
> ModPath
>         modinfo = _Modules.get(ModPath, None)
>         needreload = (not modinfo)
>         actmodtime = os.path.getmtime(ModPath)
>         if modinfo:
>             modtime, module = modinfo
>             needreload = (actmodtime != modtime)
>         if not needreload:
>             return module
>         mpath, mfn = os.path.split(ModPath)
>         mf, me = os.path.splitext(mfn)
>         import imp
>         imp.acquire_lock( )
>         try:
>             afile, apathname, adescription = imp.find_module(mf,  
> [mpath])
>             module = imp.load_module(mf, afile, ModPath, adescription)
>             del(sys.modules[mf])
>         finally:
>             imp.release_lock()
>         _Modules[ModPath] = [actmodtime, module]
>         return module
>     finally:
>         _ImportLock.release()
>
>
> #print os.path.abspath('./t1/index.py')
> #import sys
> #sys.exit()
> modtext = '''
> name = %s
> def PrintInfo():
>     print "File:", __file__
>     print "Name var:", name
>
> '''
> moddatas = []
>
> def WriteIndexPy(Number, VarValue):
>     spath = './subdir%03d' % Number
>     if not os.path.exists(spath):
>         os.makedirs(spath)
>     sfn = os.path.join(spath, 'index.py')
>     pytext = modtext % VarValue
>     f = open(sfn, 'w')
>     f.write(pytext)
>     f.close()
>
> print "Creating modules"
> for i in range(100):
>     WriteIndexPy(i, i)
>
> print "Import new modules"
> import time
> st = time.time()
> for i in range(100):
>     spath = './subdir%03d' % i
>     sfn = os.path.join(spath, 'index.py')
>     m = Import(sfn)
>     #print "Module:", m
>     #print "Module's var", m.name
>     #m.PrintInfo()
> et = time.time()
> print et - st, "seconds"
>
> print "Import loaded modules"
> import time
> st = time.time()
> for i in range(100):
>     spath = './subdir%03d' % i
>     sfn = os.path.join(spath, 'index.py')
>     m = Import(sfn)
>     #print "Module:", m
>     #print "Module's var", m.name
>     #m.PrintInfo()
> et = time.time()
> print et - st, "seconds"
>
> time.sleep(1)
> print "Reload 1"
> spath = './subdir%03d' % 0
> sfn = os.path.join(spath, 'index.py')
> WriteIndexPy(0,100)
> m = Import(sfn)
> print "Module:", m
> print "Module's var", m.name
> m.PrintInfo()
>
> print "Reload 2"
> m = Import(sfn)
> print "Module:", m
> print "Module's var", m.name
> m.PrintInfo()
>
> print "Exec test"
> import time
> st = time.time()
> for i in range(100):
>     spath = './subdir%03d' % i
>     sfn = os.path.join(spath, 'index.py')
>     execfile(sfn, globals(), locals())
> et = time.time()
> print et - st, "seconds"
>
> import os, sys
> from threading import Lock
>
> _ImportLock = Lock()
> _Modules = {}
>
> def Import(ModPath):
>     ModPath = os.path.abspath(ModPath)
>     _ImportLock.acquire(1)
>     try:
>         if not os.path.exists(ModPath):
>             raise Exception, 'Module named "%s" does not exists!' %  
> ModPath
>         modinfo = _Modules.get(ModPath, None)
>         needreload = (not modinfo)
>         actmodtime = os.path.getmtime(ModPath)
>         if modinfo:
>             modtime, module = modinfo
>             needreload = (actmodtime != modtime)
>         if not needreload:
>             return module
>         orgsyspath = sys.path[:]
>         try:
>             mpath, mfile = os.path.split(ModPath)
>             mfn, mfe = os.path.splitext(mfile)
>             for apath in orgsyspath:
>                 amodpath = os.path.join(apath, mfile)
>                 if os.path.exists(amodpath):
>                     sys.path.remove(apath)
>             sys.path.append(mpath)
>             if sys.modules.has_key(mfn):
>                 del(sys.modules[mfn])
>             module = __import__(mfn)
>             sys.path.remove(mpath)
>             del(sys.modules[mfn])
>             _Modules[ModPath] = [actmodtime, module]
>             return module
>         finally:
>             sys.path = orgsyspath[:]
>     finally:
>         _ImportLock.release()
>
>
> #print os.path.abspath('./t1/index.py')
> #import sys
> #sys.exit()
> modtext = '''
> name = %s
> def PrintInfo():
>     print "File:", __file__
>     print "Name var:", name
>
> '''
> moddatas = []
> for i in range(100):
>     spath = './subdir%03d' % i
>     if not os.path.exists(spath):
>         os.makedirs(spath)
>     sfn = os.path.join(spath, 'index.py')
>     pytext = modtext % i
>     open(sfn, 'w').write(pytext)
> import gc
> gc.collect()
> import time
> st = time.time()
> for i in range(100):
>     spath = './subdir%03d' % i
>     sfn = os.path.join(spath, 'index.py')
>     m = Import(sfn)
>     #moddatas.append([m, m.name])
>     #print "Module:", m
>     #print "Module's var", m.name
>     #m.PrintInfo()
> et = time.time()
> print et - st, "seconds"
>
> '''
> m1 = Import('./t1/index.py')
> print m1.name
> m2 = Import('./t2/index.py')
> print m2.name
> m2a = Import('./t2/index.py')
> print m2a.name
> '''
> #import sys
> #print sys.modules
> #print "mod1"
> #print globals()
> #print locals()
> #print a
> #
> #a  = 2
>
> def main(RO):
>     x
>
> import os, sys
>
> a =  {'a' : 1}
> #locals()
> #print sys.modules.keys()
> execfile('execmod1.py', a)
> print a['a']_______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From durumdara at gmail.com  Mon Dec 11 08:40:26 2006
From: durumdara at gmail.com (durumdara)
Date: Mon Dec 11 08:40:43 2006
Subject: [mod_python] Module importing solution (?)
In-Reply-To: <F349D415-58C4-4138-A831-78890968070A@dscpl.com.au>
References: <457D24DB.6060606@gmail.com>
	<F349D415-58C4-4138-A831-78890968070A@dscpl.com.au>
Message-ID: <457D5FCA.8060700@gmail.com>

Hi !

Is there any software that can show this tex/texi file in good format? 
(MSWXP).
Can anybody  export me as txt, pdf or html ?

Thanks for your help:
dd
>
> You can find out a bit about the capabilities of the new importer by 
> reading
> documentation for apache.import_module() at:
>
>   
> http://svn.apache.org/viewvc/httpd/mod_python/trunk/Doc/modpython4.tex?view=markup 
>

From nogradi at gmail.com  Wed Dec 13 16:21:25 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Wed Dec 13 16:21:39 2006
Subject: [mod_python] why is this false: 'form' in dir(req)?
Message-ID: <5f56302b0612131321n3b0bb7aem581e75266d3b749f@mail.gmail.com>

Each mod_python request object has an attribute form (at least the
ones I came accross so far), yet the following is false:

'form' in dir(req)

Any reason I'm not seeing why?
From grahamd at dscpl.com.au  Wed Dec 13 16:34:40 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 13 16:34:44 2006
Subject: [mod_python] why is this false: 'form' in dir(req)?
Message-ID: <1166045680.2751@dscpl.user.openhosting.com>

Daniel Nogradi wrote ..
> Each mod_python request object has an attribute form (at least the
> ones I came accross so far), yet the following is false:
> 
> 'form' in dir(req)
> 
> Any reason I'm not seeing why?

The request object is principally a C code based wrapper around the Apache
request_rec structure. At the same time though, it still allows adding of
attributes from within Python. None of those extra attributes however show
up when using dir(), only those corresponding to attributes in the request_rec
structure and a few others implemented at the C code level show up. It is a
known shortcoming and probably could be fixed but no one has ever probably
looked at it.

BTW, using hasattr(req, 'form') does still work.

Graham
From nogradi at gmail.com  Wed Dec 13 16:38:54 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Wed Dec 13 16:38:59 2006
Subject: [mod_python] Module importing solution (?)
In-Reply-To: <457D5FCA.8060700@gmail.com>
References: <457D24DB.6060606@gmail.com>
	<F349D415-58C4-4138-A831-78890968070A@dscpl.com.au>
	<457D5FCA.8060700@gmail.com>
Message-ID: <5f56302b0612131338u7159a9ddr83656d79ca37eb8c@mail.gmail.com>

> Is there any software that can show this tex/texi file in good format?
> (MSWXP).
> Can anybody  export me as txt, pdf or html ?
>
> Thanks for your help:
> dd

I'm afraid you will have to install some form of latex. For windows:

http://www.miktex.org/

HTH,
Daniel
From nogradi at gmail.com  Wed Dec 13 16:42:10 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Wed Dec 13 16:42:21 2006
Subject: [mod_python] why is this false: 'form' in dir(req)?
In-Reply-To: <1166045680.2751@dscpl.user.openhosting.com>
References: <1166045680.2751@dscpl.user.openhosting.com>
Message-ID: <5f56302b0612131342h2e11eeb8lb8e0411b1de54062@mail.gmail.com>

> > Each mod_python request object has an attribute form (at least the
> > ones I came accross so far), yet the following is false:
> >
> > 'form' in dir(req)
> >
> > Any reason I'm not seeing why?
>
> The request object is principally a C code based wrapper around the Apache
> request_rec structure. At the same time though, it still allows adding of
> attributes from within Python. None of those extra attributes however show
> up when using dir(), only those corresponding to attributes in the
> request_rec
> structure and a few others implemented at the C code level show up. It is a
> known shortcoming and probably could be fixed but no one has ever probably
> looked at it.
>
> BTW, using hasattr(req, 'form') does still work.

I see, thanks. The way it turned up for me was that I wanted to
inspect every attribute of the request object just to see what is
there and I did this with a loop over dir(req). So what would be the
good way to loop over every attribute (including the ones that dir
doesn't show)?
From grahamd at dscpl.com.au  Wed Dec 13 17:25:13 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 13 17:25:17 2006
Subject: [mod_python] why is this false: 'form' in dir(req)?
Message-ID: <1166048713.27495@dscpl.user.openhosting.com>

Daniel Nogradi wrote ..
> > > Each mod_python request object has an attribute form (at least the
> > > ones I came accross so far), yet the following is false:
> > >
> > > 'form' in dir(req)
> > >
> > > Any reason I'm not seeing why?
> >
> > The request object is principally a C code based wrapper around the Apache
> > request_rec structure. At the same time though, it still allows adding
> of
> > attributes from within Python. None of those extra attributes however
> show
> > up when using dir(), only those corresponding to attributes in the
> > request_rec
> > structure and a few others implemented at the C code level show up. It
> is a
> > known shortcoming and probably could be fixed but no one has ever probably
> > looked at it.
> >
> > BTW, using hasattr(req, 'form') does still work.
> 
> I see, thanks. The way it turned up for me was that I wanted to
> inspect every attribute of the request object just to see what is
> there and I did this with a loop over dir(req). So what would be the
> good way to loop over every attribute (including the ones that dir
> doesn't show)?

As far as I know there isn't any way of doing it at present.

I believe that dir() works by being able to access the __dict__ attribute of
objects, but the request object doesn't have one and fudging one on the fly to
support dir() wouldn't necessarily be practical given how the request object
wrapper is currently implemented, nor would trying to have a fake dictionary of
sorts always in place as it would have to be able to cope with special
setters/getters etc.

FWIW, when SWIG is used to create Python wrappers for C code, dir() still works
and shows both underlying C struct attributes as well as Python based
attributes. In SWIG, it maintains a __dict__ attribute but it is a special fake
dictionary of sorts. One can still access attributes via __dict__ in a SWIG
object, but setting stuff in the wrapped object via __dict__ doesn't result in
the wrapped object being changed. That value is still in the __dict__ though
and accessing __dict__ direct gets back the changed value rather than that in
the wrapped object although using proper attribute access still gets value from
wrapped object. Thus, SWIG behaviour isn't perfectly correct in that case, but
then one shouldn't be accessing stuff via __dict__. :-)

Anyway, what SWIG does is academic and mod_python doesn't use SWIG but uses
hand crafted C code for its wrapper objects. 

Graham
From nogradi at gmail.com  Wed Dec 13 17:50:54 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Wed Dec 13 17:50:57 2006
Subject: [mod_python] why is this false: 'form' in dir(req)?
In-Reply-To: <1166048713.27495@dscpl.user.openhosting.com>
References: <1166048713.27495@dscpl.user.openhosting.com>
Message-ID: <5f56302b0612131450l7835da6bp197c2fc57edc3978@mail.gmail.com>

> > > > Each mod_python request object has an attribute form (at least the
> > > > ones I came accross so far), yet the following is false:
> > > >
> > > > 'form' in dir(req)
> > > >
> > > > Any reason I'm not seeing why?
> > >
> > > The request object is principally a C code based wrapper around the
> Apache
> > > request_rec structure. At the same time though, it still allows adding
> > of
> > > attributes from within Python. None of those extra attributes however
> > show
> > > up when using dir(), only those corresponding to attributes in the
> > > request_rec
> > > structure and a few others implemented at the C code level show up. It
> > is a
> > > known shortcoming and probably could be fixed but no one has ever
> probably
> > > looked at it.
> > >
> > > BTW, using hasattr(req, 'form') does still work.
> >
> > I see, thanks. The way it turned up for me was that I wanted to
> > inspect every attribute of the request object just to see what is
> > there and I did this with a loop over dir(req). So what would be the
> > good way to loop over every attribute (including the ones that dir
> > doesn't show)?
>
> As far as I know there isn't any way of doing it at present.
>
> I believe that dir() works by being able to access the __dict__ attribute of
> objects, but the request object doesn't have one and fudging one on the fly
> to
> support dir() wouldn't necessarily be practical given how the request object
> wrapper is currently implemented, nor would trying to have a fake dictionary
> of
> sorts always in place as it would have to be able to cope with special
> setters/getters etc.
>
> FWIW, when SWIG is used to create Python wrappers for C code, dir() still
> works
> and shows both underlying C struct attributes as well as Python based
> attributes. In SWIG, it maintains a __dict__ attribute but it is a special
> fake
> dictionary of sorts. One can still access attributes via __dict__ in a SWIG
> object, but setting stuff in the wrapped object via __dict__ doesn't result
> in
> the wrapped object being changed. That value is still in the __dict__ though
> and accessing __dict__ direct gets back the changed value rather than that
> in
> the wrapped object although using proper attribute access still gets value
> from
> wrapped object. Thus, SWIG behaviour isn't perfectly correct in that case,
> but
> then one shouldn't be accessing stuff via __dict__. :-)
>
> Anyway, what SWIG does is academic and mod_python doesn't use SWIG but uses
> hand crafted C code for its wrapper objects.


Thanks a lot for the explanation. If anyone knows of other attributes
of req which are not shown by dir, please let me know. Not that it is
terribly important, just out of curiosity.
From johnkeyes at gmail.com  Fri Dec 15 04:07:10 2006
From: johnkeyes at gmail.com (John Keyes)
Date: Fri Dec 15 04:07:17 2006
Subject: [mod_python] Apache as a Windows Service Question
Message-ID: <21aa4c930612150107k761b542ey79adde4fe830267f@mail.gmail.com>

Hi,

Is it possible to run Apache as a service on Windows without
setting system wide environment variables?

I am currently launching Apache with a batch script like the
following:
  set PYTHONHOME=d:\MyApp\Python
  set PATH="%PYTHONHOME%";%PATH%
  start d:\MyApp\Apache\apache -f d:\MyApp\httpd.conf"
and this works as expected.

I am bundling Python and Apache in my installer and I would
like to be able to install the Apache (with mod_python) I ship
as a service.

The error I am seeing is when I try to run my app with this
configuration is:
  [client 127.0.0.1] python_handler: Can't get/create interpreter.
which is happening because the PATH isn't set correctly.

What I would like to be able to do is use some directives
like the following in the .conf file:
  PythonHome d:/MyApp/Python
so mod_python can then set the PATH and PYTHONHOME itself.
Is something like this possible?

One of the prerequisites I have is that a reboot shouldn't be
required after installation.

Thanks for any help or advice,
-John K
From ah at hatzis.de  Fri Dec 15 08:01:12 2006
From: ah at hatzis.de (Anastasios Hatzis)
Date: Fri Dec 15 08:01:34 2006
Subject: [mod_python] mod_python with AJAX / MDA project looks for support
Message-ID: <45829C98.9030804@hatzis.de>

Hopefully I'm not at the wrong place with my issue: I'm author of the 
OpenSwarm project on SourceForge.net. It's about feeding a MDA-like tool 
with an UML model (XMI file) so it generates a server application 
written in Python and using PostgreSQL as database-server, including 
multi-tier enabled business logic and transaction safety.

I plan to extend the generator by the ability to do the same with GUI 
clients and Web-based user-interfaces, where latter should run on Apache 
and mod_python. Speak: a user is specifying pageflows, dialogs, widgets 
etc. in UML (like does it for the business logic), connecting them with 
parts of the supplying logic components and the SDK will generate the 
Web UI component more or less fully automatically.

Two or three years ago I built some web-apps based on mod_python for a 
similar project (but apps were based on C++ instead of Python). 
Currently I'm experimenting with a MVC-like approach where the model is 
a wrapper to the generated Python application. Requests are handled by 
mod_python.publisher, while the handlers are the only Python modules in 
the public directory and they are just firing respective controllers in 
the non-public directory which are doing all the real Web-stuff (calling 
appropriate pages, contents, and so on). This prototype is not in the 
official release yet but in projects SVN branch.

It currently works 'traditional' style, speak: one page is returned per 
request. But since it's also meant to satisfy needs of heavy-users (e.g. 
end-users of a generated ERP solution who need hot-keys, drag & drop 
...) I'm also thinking of an additional AJAX support (probably where the 
Web UI decides on the fly which way it serves the pages depending on 
browser's capabilities).

Now I'm looking for ideas, comments, advice, whatever will help this 
project to get these eye-catching features :-) If you are even 
interested to contribute, e.g. regarding the mod_python-oriented 
aspects, I really appreciate any kind of support. Thank you.

Anastasios
From dadler at uni-goettingen.de  Sun Dec 17 21:33:28 2006
From: dadler at uni-goettingen.de (Daniel Adler)
Date: Sun Dec 17 21:33:29 2006
Subject: [mod_python] Secure Sessions patch
Message-ID: <4585FDF8.80909@uni-goettingen.de>

Hi,

I saw there was a discussion on this topic already:
http://www.modpython.org/pipermail/mod_python/2006-May/021260.html
and came up with the same wish -
I want to force a session cookie to be explicitly created for https.

I have added a "secure" parameter to the session class constructors.
If it is set AND req.is_https(), the cookie will be created wiht "secure" set.

A diff of session.py in release 3.2.10 with this feature is available on
http://neoscientists.org/~plex/mod_python_3_2_10_session_with_secure_cookie.diff

Regards,
- Daniel Adler

From makkaichung at gmail.com  Mon Dec 18 01:06:38 2006
From: makkaichung at gmail.com (Adrian Mak)
Date: Mon Dec 18 01:06:43 2006
Subject: [mod_python] mysql python compilation failed
Message-ID: <c939e07e0612172206y41c65f58xf38944712bb315b3@mail.gmail.com>

My linux is CentOS 4.4
apache 2.0.59 (compiled from source tar ball)
Python 2.3.4 (stock rpm)
mysql-python  3.2.10
mysql 5.0.27 (compiled from source tar ball)

I downloaded mysql python  1.2.1p1. I built mysql python thru command
python setup.py build , however it return error
[root@test MySQL-python-1.2.1_p2]# python setup.py  build
running build
running build_py
copying MySQLdb/release.py -> build/lib.linux-i686-2.3/MySQLdb
running build_ext
building '_mysql' extension
gcc -pthread -shared build/temp.linux-i686-2.3/_mysql.o
/usr/local/mysql/lib/mysql/libmysqlclient_r.a -L/usr/local/mysql/lib/mysql
-lmysqlclient_r -lz -lpthread -lcrypt -lnsl -lm -lpthread -o
build/lib.linux-i686-2.3/_mysql.so
gcc: /usr/local/mysql/lib/mysql/libmysqlclient_r.a: No such file or
directory
error: command 'gcc' failed with exit status 1

my mysql compile options are

CC=gcc CFLAGS="-march=i686 -O3 -pipe -fomit-frame-pointer" \
CXX=gcc CXXFLAGS="-O3 -march=i686 -pipe -felide-constructors\
 -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql-5.0.27\
 --enable-assembler --with-mysqld-ldflags=-all-static --enable-shared \
--without-debug --without-innodb --with-extra-charsets=gb2312,utf8,big5,gbk\
 --without-bench


and I have add path of mysq lib in the ld.so.conf
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061218/6fde16ec/attachment.html
From mh at pixar.com  Mon Dec 18 02:26:49 2006
From: mh at pixar.com (Mark Harrison)
Date: Mon Dec 18 02:26:59 2006
Subject: [mod_python] eliminating last foo.py from url?
In-Reply-To: <4578A043.3080507@pixar.com>
References: <4578A043.3080507@pixar.com>
Message-ID: <458642B9.4030102@pixar.com>

Mark Harrison wrote:
> So, I've pretty much copied the standard directory configuration,
> 
> <Directory "/apache/htdocs/appserv">
>         AddHandler mod_python .py
>         PythonHandler appserv
>         PythonDebug On
> </Directory>
> 
> and I can reference my service by http://foo.com/appserv/appserv.py
> (or any other .py in that directory, of course).
> 
> How can I make it such that I can reference with the trailing foo.py?

Alias seems to be the key...

<Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
   AddHandler mod_python .py
   PythonHandler x1
</Directory>
Alias /x1 /Users/mh/mp/htdocs/xmlrpc/x1/.py

Thanks all!
Mark

-- 
Mark Harrison
mh@pixar.com
From grahamd at dscpl.com.au  Mon Dec 18 05:33:36 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 05:33:38 2006
Subject: [mod_python] Secure Sessions patch
Message-ID: <1166438016.8144@dscpl.user.openhosting.com>

Daniel Adler wrote ..
> Hi,
> 
> I saw there was a discussion on this topic already:
> http://www.modpython.org/pipermail/mod_python/2006-May/021260.html
> and came up with the same wish -
> I want to force a session cookie to be explicitly created for https.
> 
> I have added a "secure" parameter to the session class constructors.
> If it is set AND req.is_https(), the cookie will be created wiht "secure"
> set.
> 
> A diff of session.py in release 3.2.10 with this feature is available on
> http://neoscientists.org/~plex/mod_python_3_2_10_session_with_secure_cookie.diff

I'd suggest that an explicit argument to Session.Session() is probably
not the best way of doing this. I am also dubious of it only being set
if HTTPS is used as that suggests that if first access is not via HTTPS,
that one could then continue to access the site thereafter without it
needing it to be HTTPS which defeats the purpose of having it in the
first place as you want to probably force it to be HTTPS always and not
allow HTTP at all.

In place of an argument to Session.Session(), a PythonOption setting
would possibly be more appropriate and would then be similar with how
other aspects of cookies are configured for sessions. For example:

  PythonOption mod_python.session.secure: 1

By being an option it is easier to apply it to the complete URL
namespace for an application, especially if application is coded poorly
and doesn't have all session creation performed in one place only, or
you can't modify the code for the application easily.

In being set this way, 'secure' should also perhaps always be set,
regardless of whether HTTPS is used. The outcome of this is that the
client would never send the cookie back if it wasn't HTTPS, thus result
would be always being pushed back to the login form (session creation
point) if not HTTPS, thereby clearly indicating that something is wrong
and also not inadvertently still letting someone in by accident through
HTTP.

Another possible issue is whether through Session instance it should be
possible to access the cookie properties and interrogate if the cookie
for a session had the 'secure' attribute. If you don't have a means of
validating that it was secure cookie, then someone could modify the
cookie on the client side, remove the secure attribute and change from
using HTTPS to HTTP and possibly start to reveal information in traffic
that you didn't want to be revealed.

On the latter point, one could argue that setting the PythonOption
should also be a trigger for the Session class to perform a validation
and always reject any cookie that doesn't have the 'secure' flag,
presuming that the 'secure' flag is actually sent back with the cookie
by the client.

Thus, I can seem merit in what you are trying to achieve, but it perhaps
needs some more thought as to how it should be achieved to ensure that
there aren't back doors in the way it is done.

Graham


From grahamd at dscpl.com.au  Mon Dec 18 05:36:46 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 05:36:48 2006
Subject: [mod_python] mysql python compilation failed
Message-ID: <1166438206.9812@dscpl.user.openhosting.com>

Adrian Mak wrote ..
> My linux is CentOS 4.4
> apache 2.0.59 (compiled from source tar ball)
> Python 2.3.4 (stock rpm)
> mysql-python  3.2.10
> mysql 5.0.27 (compiled from source tar ball)
> 
> I downloaded mysql python  1.2.1p1. I built mysql python thru command
> python setup.py build , however it return error
> [root@test MySQL-python-1.2.1_p2]# python setup.py  build
> running build
> running build_py
> copying MySQLdb/release.py -> build/lib.linux-i686-2.3/MySQLdb
> running build_ext
> building '_mysql' extension
> gcc -pthread -shared build/temp.linux-i686-2.3/_mysql.o
> /usr/local/mysql/lib/mysql/libmysqlclient_r.a -L/usr/local/mysql/lib/mysql
> -lmysqlclient_r -lz -lpthread -lcrypt -lnsl -lm -lpthread -o
> build/lib.linux-i686-2.3/_mysql.so
> gcc: /usr/local/mysql/lib/mysql/libmysqlclient_r.a: No such file or
> directory
> error: command 'gcc' failed with exit status 1
> 
> my mysql compile options are
> 
> CC=gcc CFLAGS="-march=i686 -O3 -pipe -fomit-frame-pointer" \
> CXX=gcc CXXFLAGS="-O3 -march=i686 -pipe -felide-constructors\
>  -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql-5.0.27\
>  --enable-assembler --with-mysqld-ldflags=-all-static --enable-shared \
> --without-debug --without-innodb --with-extra-charsets=gb2312,utf8,big5,gbk\
>  --without-bench
> 
> 
> and I have add path of mysq lib in the ld.so.conf

This mailing list is for mod_python, the Python extension module for Apache. It
is not for general Python questions unrelated to mod_python and especially not
for questions about Python wrappers for MySQL.

I would suggest you ask your question on comp.lang.python at:

  http://groups.google.com/group/comp.lang.python?hl=en

or try and find a mailing list which deals specifically with the Python wrappers
for MySQL.

Graham
From grahamd at dscpl.com.au  Mon Dec 18 05:49:08 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 05:49:23 2006
Subject: [mod_python] eliminating last foo.py from url?
Message-ID: <1166438948.16160@dscpl.user.openhosting.com>

Mark Harrison wrote ..
> Mark Harrison wrote:
> > So, I've pretty much copied the standard directory configuration,
> > 
> > <Directory "/apache/htdocs/appserv">
> >         AddHandler mod_python .py
> >         PythonHandler appserv
> >         PythonDebug On
> > </Directory>
> > 
> > and I can reference my service by http://foo.com/appserv/appserv.py
> > (or any other .py in that directory, of course).
> > 
> > How can I make it such that I can reference with the trailing foo.py?
> 
> Alias seems to be the key...
> 
> <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
>    AddHandler mod_python .py
>    PythonHandler x1
> </Directory>
> Alias /x1 /Users/mh/mp/htdocs/xmlrpc/x1/.py

As indicated in previous response on list, the DirectoryIndex directive is more
appropriate for having directory access mapped to a mod_python handler when
you are using AddHandler rather than SetHandler. I would recommend against
trying to fiddle things with an Alias directive as it will not work for subdirectories
and that your left hand side doesn't use a trailing slash may cause other issues
as well with base url determination and relative URLs in HTML files which can
cause problems with your web application.

Why can't you use the following?

  <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
     AddHandler mod_python .py
     PythonHandler x1
     # Value to DirectoryIndex should be anything with .py
     # extension, it does not actually have to exist.
     DirectoryIndex index.py
  </Directory>

  Alias /x1 /Users/mh/mp/htdocs/xmlrpc/x1

Did you read the article referenced in prior replies? Namely:

  http://www.dscpl.com.au/wiki/ModPython/Articles/SetHandlerVersusAddHandler

and which talks about using DirectoryIndex when using AddHandler.

Graham
From lists at stringsutils.com  Mon Dec 18 11:27:39 2006
From: lists at stringsutils.com (Francisco Reyes)
Date: Mon Dec 18 11:27:08 2006
Subject: [mod_python] How to deal with old cached data showing? 
Message-ID: <cone.1166459259.230707.12700.1000@zoraida.natserv.net>

Looking at the archives I see that mod_python shows old pages under certain 
circunstances.

Anyone can shed any light into what are those circustances? Is it only when 
there are errors in the page?

Other than restarting is there any way to force the latest content to show?

Also from reading the archives it seems mod_python 3.3 will have fixes for 
this issue. When is 3.3 expected?
From mh at pixar.com  Mon Dec 18 14:37:45 2006
From: mh at pixar.com (Mark Harrison)
Date: Mon Dec 18 14:37:52 2006
Subject: [mod_python] eliminating last foo.py from url?
In-Reply-To: <1166438948.16160@dscpl.user.openhosting.com>
References: <1166438948.16160@dscpl.user.openhosting.com>
Message-ID: <4586EE09.50609@pixar.com>

Graham Dumpleton wrote:
> Mark Harrison wrote ..
>> Mark Harrison wrote:
>>> So, I've pretty much copied the standard directory configuration,
>>>
>>> <Directory "/apache/htdocs/appserv">
>>>         AddHandler mod_python .py
>>>         PythonHandler appserv
>>>         PythonDebug On
>>> </Directory>
>>>
>>> and I can reference my service by http://foo.com/appserv/appserv.py
>>> (or any other .py in that directory, of course).
>>>
>>> How can I make it such that I can reference with the trailing foo.py?
>> Alias seems to be the key...
>>
>> <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
>>    AddHandler mod_python .py
>>    PythonHandler x1
>> </Directory>
>> Alias /x1 /Users/mh/mp/htdocs/xmlrpc/x1/.py
> 
> As indicated in previous response on list, the DirectoryIndex directive is more
> appropriate for having directory access mapped to a mod_python handler when
> you are using AddHandler rather than SetHandler. I would recommend against
> trying to fiddle things with an Alias directive as it will not work for subdirectories
> and that your left hand side doesn't use a trailing slash may cause other issues
> as well with base url determination and relative URLs in HTML files which can
> cause problems with your web application.
> 
> Why can't you use the following?
> 
>   <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
>      AddHandler mod_python .py
>      PythonHandler x1
>      # Value to DirectoryIndex should be anything with .py
>      # extension, it does not actually have to exist.
>      DirectoryIndex index.py
>   </Directory>

It's probably me being clueless, but no matter what I fiddle with I always
get a "301 Moved Permanently" result.

I've got a pretty pared-down httpd.conf, so I don't think I'm
getting any unexpected interactions from other modules.


--------------------------------------------------------------------


ServerRoot "/Users/mh/mp"

Listen 9000
StartServers 2

ErrorLog logs/error_log
LogFormat "%h %l %u %t \"%r\" %>s %b" common
CustomLog logs/access_log common

LoadModule python_module modules/mod_python.so
PythonPath "sys.path+['/Users/mh/mp/htdocs/xmlrpc','/Users/mh/mp/htdocs/xmlrpc/x1']"

DocumentRoot "/Users/mh/mp/htdocs"

<Location /mpinfo>
   SetHandler mod_python
   PythonHandler mod_python.testhandler
</Location>

<Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
   #SetHandler mod_python <--also tried this
   AddHandler mod_python .py
   PythonHandler x1
   DirectoryIndex index.py
</Directory>





> 
>   Alias /x1 /Users/mh/mp/htdocs/xmlrpc/x1
> 
> Did you read the article referenced in prior replies? Namely:
> 
>   http://www.dscpl.com.au/wiki/ModPython/Articles/SetHandlerVersusAddHandler
> 
> and which talks about using DirectoryIndex when using AddHandler.

I did read this, and it seems to make sense... I just couldn't get
it to work :-(

Any clues appreciated!
Mark

-- 
Mark Harrison
Pixar Animation Studios
From nogradi at gmail.com  Mon Dec 18 17:16:18 2006
From: nogradi at gmail.com (Daniel Nogradi)
Date: Mon Dec 18 17:16:22 2006
Subject: [mod_python] How to deal with old cached data showing?
In-Reply-To: <cone.1166459259.230707.12700.1000@zoraida.natserv.net>
References: <cone.1166459259.230707.12700.1000@zoraida.natserv.net>
Message-ID: <5f56302b0612181416m3b218a6bpb859438bbe78ad66@mail.gmail.com>

> Looking at the archives I see that mod_python shows old pages under certain
> circunstances.
>
> Anyone can shed any light into what are those circustances? Is it only when
> there are errors in the page?
>
> Other than restarting is there any way to force the latest content to show?
>
> Also from reading the archives it seems mod_python 3.3 will have fixes for
> this issue. When is 3.3 expected?


http://www.dscpl.com.au/wiki/ModPython/Articles/ModuleImportingIsBroken
From steve at holdenweb.com  Mon Dec 18 13:14:02 2006
From: steve at holdenweb.com (Steve Holden)
Date: Mon Dec 18 18:23:32 2006
Subject: [mod_python] Re: mysql python compilation failed
In-Reply-To: <1166438206.9812@dscpl.user.openhosting.com>
References: <1166438206.9812@dscpl.user.openhosting.com>
Message-ID: <4586DA6A.6000306@holdenweb.com>

Graham Dumpleton wrote:
> Adrian Mak wrote ..
>> My linux is CentOS 4.4
>> apache 2.0.59 (compiled from source tar ball)
>> Python 2.3.4 (stock rpm)
>> mysql-python  3.2.10
>> mysql 5.0.27 (compiled from source tar ball)
>>
>> I downloaded mysql python  1.2.1p1. I built mysql python thru command
>> python setup.py build , however it return error
>> [root@test MySQL-python-1.2.1_p2]# python setup.py  build
>> running build
>> running build_py
>> copying MySQLdb/release.py -> build/lib.linux-i686-2.3/MySQLdb
>> running build_ext
>> building '_mysql' extension
>> gcc -pthread -shared build/temp.linux-i686-2.3/_mysql.o
>> /usr/local/mysql/lib/mysql/libmysqlclient_r.a -L/usr/local/mysql/lib/mysql
>> -lmysqlclient_r -lz -lpthread -lcrypt -lnsl -lm -lpthread -o
>> build/lib.linux-i686-2.3/_mysql.so
>> gcc: /usr/local/mysql/lib/mysql/libmysqlclient_r.a: No such file or
>> directory
>> error: command 'gcc' failed with exit status 1
>>
>> my mysql compile options are
>>
>> CC=gcc CFLAGS="-march=i686 -O3 -pipe -fomit-frame-pointer" \
>> CXX=gcc CXXFLAGS="-O3 -march=i686 -pipe -felide-constructors\
>>  -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql-5.0.27\
>>  --enable-assembler --with-mysqld-ldflags=-all-static --enable-shared \
>> --without-debug --without-innodb --with-extra-charsets=gb2312,utf8,big5,gbk\
>>  --without-bench
>>
>>
>> and I have add path of mysq lib in the ld.so.conf
> 
> This mailing list is for mod_python, the Python extension module for Apache. It
> is not for general Python questions unrelated to mod_python and especially not
> for questions about Python wrappers for MySQL.
> 
> I would suggest you ask your question on comp.lang.python at:
> 
>   http://groups.google.com/group/comp.lang.python?hl=en
> 
> or try and find a mailing list which deals specifically with the Python wrappers
> for MySQL.
> 
> Graham

Having said which, I believe the problem will be found to be related to 
differences in threading capability between the MySQL client libraries 
and the specifications for the Python module.

The "_r" sequence of libraries parallels the main libs, but either does 
or does not enable threading, I can never remember which.

regards
  Steve
-- 
Steve Holden       +44 150 684 7255  +1 800 494 3119
Holden Web LLC/Ltd          http://www.holdenweb.com
Skype: holdenweb       http://holdenweb.blogspot.com
Recent Ramblings     http://del.icio.us/steve.holden

From steve at holdenweb.com  Mon Dec 18 13:13:06 2006
From: steve at holdenweb.com (Steve Holden)
Date: Mon Dec 18 18:23:36 2006
Subject: [mod_python] Re: mysql python compilation failed
In-Reply-To: <1166438206.9812@dscpl.user.openhosting.com>
References: <1166438206.9812@dscpl.user.openhosting.com>
Message-ID: <4586DA32.2070406@holdenweb.com>

Graham Dumpleton wrote:
> Adrian Mak wrote ..
>> My linux is CentOS 4.4
>> apache 2.0.59 (compiled from source tar ball)
>> Python 2.3.4 (stock rpm)
>> mysql-python  3.2.10
>> mysql 5.0.27 (compiled from source tar ball)
>>
>> I downloaded mysql python  1.2.1p1. I built mysql python thru command
>> python setup.py build , however it return error
>> [root@test MySQL-python-1.2.1_p2]# python setup.py  build
>> running build
>> running build_py
>> copying MySQLdb/release.py -> build/lib.linux-i686-2.3/MySQLdb
>> running build_ext
>> building '_mysql' extension
>> gcc -pthread -shared build/temp.linux-i686-2.3/_mysql.o
>> /usr/local/mysql/lib/mysql/libmysqlclient_r.a -L/usr/local/mysql/lib/mysql
>> -lmysqlclient_r -lz -lpthread -lcrypt -lnsl -lm -lpthread -o
>> build/lib.linux-i686-2.3/_mysql.so
>> gcc: /usr/local/mysql/lib/mysql/libmysqlclient_r.a: No such file or
>> directory
>> error: command 'gcc' failed with exit status 1
>>
>> my mysql compile options are
>>
>> CC=gcc CFLAGS="-march=i686 -O3 -pipe -fomit-frame-pointer" \
>> CXX=gcc CXXFLAGS="-O3 -march=i686 -pipe -felide-constructors\
>>  -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql-5.0.27\
>>  --enable-assembler --with-mysqld-ldflags=-all-static --enable-shared \
>> --without-debug --without-innodb --with-extra-charsets=gb2312,utf8,big5,gbk\
>>  --without-bench
>>
>>
>> and I have add path of mysq lib in the ld.so.conf
> 
> This mailing list is for mod_python, the Python extension module for Apache. It
> is not for general Python questions unrelated to mod_python and especially not
> for questions about Python wrappers for MySQL.
> 
> I would suggest you ask your question on comp.lang.python at:
> 
>   http://groups.google.com/group/comp.lang.python?hl=en
> 
> or try and find a mailing list which deals specifically with the Python wrappers
> for MySQL.
> 
> Graham

Having said which, I believe the problem will be found to be related to 
differences in threading capability between the MySQL client libraries 
and the specifications for the Python module.

regards
  Steve
-- 
Steve Holden       +44 150 684 7255  +1 800 494 3119
Holden Web LLC/Ltd          http://www.holdenweb.com
Skype: holdenweb       http://holdenweb.blogspot.com
Recent Ramblings     http://del.icio.us/steve.holden

From steve at holdenweb.com  Mon Dec 18 13:11:51 2006
From: steve at holdenweb.com (Steve Holden)
Date: Mon Dec 18 18:27:20 2006
Subject: [mod_python] Re: Secure Sessions patch
In-Reply-To: <1166438016.8144@dscpl.user.openhosting.com>
References: <1166438016.8144@dscpl.user.openhosting.com>
Message-ID: <4586D9E7.5010800@holdenweb.com>

Graham Dumpleton wrote:
> Daniel Adler wrote ..
>> Hi,
>>
>> I saw there was a discussion on this topic already:
>> http://www.modpython.org/pipermail/mod_python/2006-May/021260.html
>> and came up with the same wish -
>> I want to force a session cookie to be explicitly created for https.
>>
>> I have added a "secure" parameter to the session class constructors.
>> If it is set AND req.is_https(), the cookie will be created wiht "secure"
>> set.
>>
>> A diff of session.py in release 3.2.10 with this feature is available on
>> http://neoscientists.org/~plex/mod_python_3_2_10_session_with_secure_cookie.diff
> 
> I'd suggest that an explicit argument to Session.Session() is probably
> not the best way of doing this. I am also dubious of it only being set
> if HTTPS is used as that suggests that if first access is not via HTTPS,
> that one could then continue to access the site thereafter without it
> needing it to be HTTPS which defeats the purpose of having it in the
> first place as you want to probably force it to be HTTPS always and not
> allow HTTP at all.
> 
> In place of an argument to Session.Session(), a PythonOption setting
> would possibly be more appropriate and would then be similar with how
> other aspects of cookies are configured for sessions. For example:
> 
>   PythonOption mod_python.session.secure: 1
> 
> By being an option it is easier to apply it to the complete URL
> namespace for an application, especially if application is coded poorly
> and doesn't have all session creation performed in one place only, or
> you can't modify the code for the application easily.
> 
> In being set this way, 'secure' should also perhaps always be set,
> regardless of whether HTTPS is used. The outcome of this is that the
> client would never send the cookie back if it wasn't HTTPS, thus result
> would be always being pushed back to the login form (session creation
> point) if not HTTPS, thereby clearly indicating that something is wrong
> and also not inadvertently still letting someone in by accident through
> HTTP.
> 
> Another possible issue is whether through Session instance it should be
> possible to access the cookie properties and interrogate if the cookie
> for a session had the 'secure' attribute. If you don't have a means of
> validating that it was secure cookie, then someone could modify the
> cookie on the client side, remove the secure attribute and change from
> using HTTPS to HTTP and possibly start to reveal information in traffic
> that you didn't want to be revealed.
> 
> On the latter point, one could argue that setting the PythonOption
> should also be a trigger for the Session class to perform a validation
> and always reject any cookie that doesn't have the 'secure' flag,
> presuming that the 'secure' flag is actually sent back with the cookie
> by the client.
> 
I understood that browsers would flag cookies as secure if they received 
them over https, and maintain separation between secure and non-secure 
cookies. I wouldn't expect to see the secure flag represented inside the 
cookie, as the two sets (secure and non-secure) should be disjoint. This 
can cause session maintenance problems when some pages in the session 
are http and others are https.

> Thus, I can seem merit in what you are trying to achieve, but it perhaps
> needs some more thought as to how it should be achieved to ensure that
> there aren't back doors in the way it is done.
> 
I agree that the proposed solution was a bit lame, though in the right 
spirit.

regards
  Steve
-- 
Steve Holden       +44 150 684 7255  +1 800 494 3119
Holden Web LLC/Ltd          http://www.holdenweb.com
Skype: holdenweb       http://holdenweb.blogspot.com
Recent Ramblings     http://del.icio.us/steve.holden

From grahamd at dscpl.com.au  Mon Dec 18 18:47:17 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 18:47:19 2006
Subject: [mod_python] eliminating last foo.py from url?
Message-ID: <1166485637.4852@dscpl.user.openhosting.com>

Mark Harrison wrote ..
> Graham Dumpleton wrote:
> > Mark Harrison wrote ..
> >> Mark Harrison wrote:
> >>> So, I've pretty much copied the standard directory configuration,
> >>>
> >>> <Directory "/apache/htdocs/appserv">
> >>>         AddHandler mod_python .py
> >>>         PythonHandler appserv
> >>>         PythonDebug On
> >>> </Directory>
> >>>
> >>> and I can reference my service by http://foo.com/appserv/appserv.py
> >>> (or any other .py in that directory, of course).
> >>>
> >>> How can I make it such that I can reference with the trailing foo.py?
> >> Alias seems to be the key...
> >>
> >> <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
> >>    AddHandler mod_python .py
> >>    PythonHandler x1
> >> </Directory>
> >> Alias /x1 /Users/mh/mp/htdocs/xmlrpc/x1/.py
> > 
> > As indicated in previous response on list, the DirectoryIndex directive
> is more
> > appropriate for having directory access mapped to a mod_python handler
> when
> > you are using AddHandler rather than SetHandler. I would recommend against
> > trying to fiddle things with an Alias directive as it will not work for
> subdirectories
> > and that your left hand side doesn't use a trailing slash may cause other
> issues
> > as well with base url determination and relative URLs in HTML files which
> can
> > cause problems with your web application.
> > 
> > Why can't you use the following?
> > 
> >   <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
> >      AddHandler mod_python .py
> >      PythonHandler x1
> >      # Value to DirectoryIndex should be anything with .py
> >      # extension, it does not actually have to exist.
> >      DirectoryIndex index.py
> >   </Directory>
> 
> It's probably me being clueless, but no matter what I fiddle with I always
> get a "301 Moved Permanently" result.
> 
> I've got a pretty pared-down httpd.conf, so I don't think I'm
> getting any unexpected interactions from other modules.
> 

Based on fact that your directory has xmlrpc in the path and that you are
actually seeing the the 301 HTTP response, I am going to guess that you
aren't using a web browser but an XML-RPC client. If this is the case then
you are most likely seeing the 301 response because you are using a URL
which doesn't have the trailing slash on it. Ie.,

  /x1/

If you use the trailing slash, does it then work?

The reason the slash is required is that Apache does what is called trailing
slash redirection by default. That is, whenever you use a URL which maps
to a physical directory, it will send back a redirect response telling the client
to send the request again but this time with the trailing slash appended.
It does this to ensure that the base URL for any index file is correct and that
relative page references in a HTML based index page resolve correctly.

Since you are setting the PythonPath directive to where your module file is
potentially installed anyway, you are possibly just better of using:

  # Move your stuff out of the document tree and you will not need this.

  <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
     deny from all
  </Directory>

  # Use Location instead of Directory.

  <Location /x1>
     # The PythonPath may have to be adjusted.
     PythonPath "sys.path+['/Users/mh/mp/htdocs/xmlrpc','/Users/mh/mp/htdocs/xmlrpc/x1']"
     SetHandler mod_python
     PythonHandler x1
  </Directory>

By using Location directive, and with location itself not having trailing slash,
Apache will not do trailing slash redirection and just pass any request starting
with /x1 through to your handler.

Graham

> ServerRoot "/Users/mh/mp"
> 
> Listen 9000
> StartServers 2
> 
> ErrorLog logs/error_log
> LogFormat "%h %l %u %t \"%r\" %>s %b" common
> CustomLog logs/access_log common
> 
> LoadModule python_module modules/mod_python.so
> PythonPath "sys.path+['/Users/mh/mp/htdocs/xmlrpc','/Users/mh/mp/htdocs/xmlrpc/x1']"
> 
> DocumentRoot "/Users/mh/mp/htdocs"
> 
> <Location /mpinfo>
>    SetHandler mod_python
>    PythonHandler mod_python.testhandler
> </Location>
> 
> <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
>    #SetHandler mod_python <--also tried this
>    AddHandler mod_python .py
>    PythonHandler x1
>    DirectoryIndex index.py
> </Directory>
> 
> > 
> >   Alias /x1 /Users/mh/mp/htdocs/xmlrpc/x1
> > 
> > Did you read the article referenced in prior replies? Namely:
> > 
> >   http://www.dscpl.com.au/wiki/ModPython/Articles/SetHandlerVersusAddHandler
> > 
> > and which talks about using DirectoryIndex when using AddHandler.
> 
> I did read this, and it seems to make sense... I just couldn't get
> it to work :-(
> 
> Any clues appreciated!

From grahamd at dscpl.com.au  Mon Dec 18 18:56:36 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 18:56:37 2006
Subject: [mod_python] How to deal with old cached data showing? 
Message-ID: <1166486196.9104@dscpl.user.openhosting.com>

Francisco Reyes wrote ..
> Looking at the archives I see that mod_python shows old pages under certain
> circunstances.
> 
> Anyone can shed any light into what are those circustances? Is it only
> when  there are errors in the page?

Someone else already pointed out my article about module importer
problems, but in case you missed it:

  http://www.dscpl.com.au/wiki/ModPython/Articles/ModuleImportingIsBroken

> Other than restarting is there any way to force the latest content to show?

With versions of mod_python prior to 3.3, not without using some third
party packages which implement alternate module loading systems for
mod_python.

> Also from reading the archives it seems mod_python 3.3 will have fixes
> for this issue. When is 3.3 expected?

The tar ball for a wider 3.3 beta release exists. That I know of there is still
only one person within core developers who can do the actual release and
update of web site. I am presuming at the moment that we are waiting for
that person to do that as enough votes went past to give an okay for going
down the beta path.

Graham
From mh at pixar.com  Mon Dec 18 19:28:40 2006
From: mh at pixar.com (Mark Harrison)
Date: Mon Dec 18 19:28:53 2006
Subject: [mod_python] eliminating last foo.py from url?
In-Reply-To: <1166485637.4852@dscpl.user.openhosting.com>
References: <1166485637.4852@dscpl.user.openhosting.com>
Message-ID: <45873238.7010909@pixar.com>

Graham Dumpleton wrote:
> Since you are setting the PythonPath directive to where your module file is
> potentially installed anyway, you are possibly just better of using:
> 
>   # Move your stuff out of the document tree and you will not need this.
> 
>   <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
>      deny from all
>   </Directory>
> 
>   # Use Location instead of Directory.
> 
>   <Location /x1>
>      # The PythonPath may have to be adjusted.
>      PythonPath "sys.path+['/Users/mh/mp/htdocs/xmlrpc','/Users/mh/mp/htdocs/xmlrpc/x1']"
>      SetHandler mod_python
>      PythonHandler x1
>   </Location>
> 
> By using Location directive, and with location itself not having trailing slash,
> Apache will not do trailing slash redirection and just pass any request starting
> with /x1 through to your handler.

Ah, <Location> looks preferable to <Directory>, since then I don't have to install
the python files under htdocs, but can instead point them to our build tree.

But it's strange, even <Location> requires a trailing slash.  If I have too
hard of a time getting clients to include it then I'll add the Alias.

BTW, apache+mod_python seems to be a nice xmlrpc platform.
When I get this polished, I'll try and get permission to put a note on the
wiki about setting it up.

Many Thanks!
Mark

-- 
Mark Harrison
Pixar Animation Studios
From grahamd at dscpl.com.au  Mon Dec 18 19:55:43 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 19:55:45 2006
Subject: [mod_python] eliminating last foo.py from url?
Message-ID: <1166489743.4346@dscpl.user.openhosting.com>

Mark Harrison wrote ..
> Graham Dumpleton wrote:
> > Since you are setting the PythonPath directive to where your module file
> is
> > potentially installed anyway, you are possibly just better of using:
> > 
> >   # Move your stuff out of the document tree and you will not need this.
> > 
> >   <Directory "/Users/mh/mp/htdocs/xmlrpc/x1">
> >      deny from all
> >   </Directory>
> > 
> >   # Use Location instead of Directory.
> > 
> >   <Location /x1>
> >      # The PythonPath may have to be adjusted.
> >      PythonPath "sys.path+['/Users/mh/mp/htdocs/xmlrpc','/Users/mh/mp/htdocs/xmlrpc/x1']"
> >      SetHandler mod_python
> >      PythonHandler x1
> >   </Location>
> > 
> > By using Location directive, and with location itself not having trailing
> slash,
> > Apache will not do trailing slash redirection and just pass any request
> starting
> > with /x1 through to your handler.
> 
> Ah, <Location> looks preferable to <Directory>, since then I don't have
> to install
> the python files under htdocs, but can instead point them to our build
> tree.
> 
> But it's strange, even <Location> requires a trailing slash.  If I have
> too
> hard of a time getting clients to include it then I'll add the Alias.

Strange, as it shouldn't. Only thing I can think of is that the path you are
choosing for the Location directive still has a corresponding physical
directory of the same path under the document root and that is confusing
Apache and it is still wanting to do trailing slash redirection before it
matches it against the Location directive.

> BTW, apache+mod_python seems to be a nice xmlrpc platform.
> When I get this polished, I'll try and get permission to put a note on
> the
> wiki about setting it up.

You may want to have a look at my Vampire package which contains an
XML-RPC service endpoint for use in mod_python. All you need to do
is something like:

class _Object:

  def method1(self):
    return "method1"

  def method2(self,req):
    return "method2"

  def method3(self,req,arg):
    return "method3"

_object = _Object()

handler = vampire.Service(_object)

Unlike other XML-RPC endpoints for mod_python that I have seen, it still
gives you optional access to the request object if for example you wanted
to modify behaviour based on client IP etc.

Bit more information on this at:

  http://www.dscpl.com.au/projects/vampire/articles/vampire-001.html#implementing-web-services

I've done a lot of stuff with XML-RPC and other RPC over HTTP protocols
over the years, as well as other sorts of RPC messaging protocols over
distributed messaging systems. I can't point you to some of this other
stuff if there is any interest.

Graham
From grahamd at dscpl.com.au  Mon Dec 18 21:49:43 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 21:49:48 2006
Subject: [mod_python] Re: Secure Sessions patch
Message-ID: <1166496583.25827@dscpl.user.openhosting.com>

Steve Holden wrote ..
> Graham Dumpleton wrote:
> > Daniel Adler wrote ..
> >> Hi,
> >>
> >> I saw there was a discussion on this topic already:
> >> http://www.modpython.org/pipermail/mod_python/2006-May/021260.html
> >> and came up with the same wish -
> >> I want to force a session cookie to be explicitly created for https.
> >>
> >> I have added a "secure" parameter to the session class constructors.
> >> If it is set AND req.is_https(), the cookie will be created wiht "secure"
> >> set.
> >>
> >> A diff of session.py in release 3.2.10 with this feature is available
> on
> >> http://neoscientists.org/~plex/mod_python_3_2_10_session_with_secure_cookie.diff
> > 
> > I'd suggest that an explicit argument to Session.Session() is probably
> > not the best way of doing this. I am also dubious of it only being set
> > if HTTPS is used as that suggests that if first access is not via HTTPS,
> > that one could then continue to access the site thereafter without it
> > needing it to be HTTPS which defeats the purpose of having it in the
> > first place as you want to probably force it to be HTTPS always and not
> > allow HTTP at all.
> > 
> > In place of an argument to Session.Session(), a PythonOption setting
> > would possibly be more appropriate and would then be similar with how
> > other aspects of cookies are configured for sessions. For example:
> > 
> >   PythonOption mod_python.session.secure: 1
> > 
> > By being an option it is easier to apply it to the complete URL
> > namespace for an application, especially if application is coded poorly
> > and doesn't have all session creation performed in one place only, or
> > you can't modify the code for the application easily.
> > 
> > In being set this way, 'secure' should also perhaps always be set,
> > regardless of whether HTTPS is used. The outcome of this is that the
> > client would never send the cookie back if it wasn't HTTPS, thus result
> > would be always being pushed back to the login form (session creation
> > point) if not HTTPS, thereby clearly indicating that something is wrong
> > and also not inadvertently still letting someone in by accident through
> > HTTP.
> > 
> > Another possible issue is whether through Session instance it should
> be
> > possible to access the cookie properties and interrogate if the cookie
> > for a session had the 'secure' attribute. If you don't have a means of
> > validating that it was secure cookie, then someone could modify the
> > cookie on the client side, remove the secure attribute and change from
> > using HTTPS to HTTP and possibly start to reveal information in traffic
> > that you didn't want to be revealed.
> > 
> > On the latter point, one could argue that setting the PythonOption
> > should also be a trigger for the Session class to perform a validation
> > and always reject any cookie that doesn't have the 'secure' flag,
> > presuming that the 'secure' flag is actually sent back with the cookie
> > by the client.
> > 
> I understood that browsers would flag cookies as secure if they received
> them over https, and maintain separation between secure and non-secure
> cookies. I wouldn't expect to see the secure flag represented inside the
> cookie, as the two sets (secure and non-secure) should be disjoint. This
> can cause session maintenance problems when some pages in the session 
> are http and others are https.

When we do work out appropriate way of doing it and what it all means,
for good measure we probably want to allow people to set the 'httponly'
attribute of the cookie for a session as well. I release this is a defacto
standard set by Microsoft rather than a real standard attribute and not all
browsers support it, but someone will probably ask for it at some point.

Graham
From lists at stringsutils.com  Mon Dec 18 23:06:52 2006
From: lists at stringsutils.com (Francisco Reyes)
Date: Mon Dec 18 23:06:19 2006
Subject: [mod_python] How to deal with old cached data showing?
References: <1166486196.9104@dscpl.user.openhosting.com>
Message-ID: <cone.1166501212.281037.60771.1000@zoraida.natserv.net>

Graham Dumpleton writes:

> Someone else already pointed out my article about module importer
> problems, but in case you missed it:
>   http://www.dscpl.com.au/wiki/ModPython/Articles/ModuleImportingIsBroken

Thanks for the link.


> With versions of mod_python prior to 3.3, not without using some third
> party packages which implement alternate module loading systems for
> mod_python.

Do you know of any such package?
Even though it is slower, would it be safer for now to use CGI instead of 
mod_python then?

> The tar ball for a wider 3.3 beta release exists. That I know of there is still
> only one person within core developers who can do the actual release

Has anyone asked this person when he plans to release the wider 3.3 beta? If 
it was voted that it is good to go, what could be the reason to postpone 
release?

I am somewhat new to Python and very new to mod_python. Finding problems 
like the cache problem and then reading the list of prolblems at 
"Module Importing Is Broken" makes me wonder if I should use it for 
production. Is mod_python 2.7.11 more stable?

Thanks for your feedback!

From grahamd at dscpl.com.au  Mon Dec 18 23:41:15 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Dec 18 23:41:17 2006
Subject: [mod_python] How to deal with old cached data showing?
Message-ID: <1166503275.13988@dscpl.user.openhosting.com>

Francisco Reyes wrote ..
> Graham Dumpleton writes:
> > With versions of mod_python prior to 3.3, not without using some third
> > party packages which implement alternate module loading systems for
> > mod_python.
> 
> Do you know of any such package?

I do, but with 3.3 just about being available, I would suggest using 3.3 instead
purely to avoid wasting any effort in converting your code to work.

> Even though it is slower, would it be safer for now to use CGI instead
> of mod_python then?

Again, probably just a waste of your effort in converting at this point.

> > The tar ball for a wider 3.3 beta release exists. That I know of there
> is still
> > only one person within core developers who can do the actual release
> 
> Has anyone asked this person when he plans to release the wider 3.3 beta?
> If  it was voted that it is good to go, what could be the reason to postpone
> release?

The person has been quite busy of late and is not active in actually working
on mod_python.  Some times it takes some time to get their attention. To be
fare, it just may not be obvious from emails going back and forth that we
want to progress with getting it released as there possibly hasn't been a
concrete statement to that effect yet nor a move to prepare a release
announcement. I have myself sort of been off busy on other things over the
last couple of weeks so haven't been paying attention too much and have
only been scanning mails quickly and not necessarily reading them all
properly, only last day or so that have had a chance to start reading email
again properly.

> I am somewhat new to Python and very new to mod_python. Finding problems
> like the cache problem and then reading the list of prolblems at 
> "Module Importing Is Broken" makes me wonder if I should use it for 
> production. Is mod_python 2.7.11 more stable?

If not using 3.3, you want to at least use 3.2.10 and if you are using the
mod_python.publisher handler, 3.2.10 does address some of the importer
issues.

That all said, the prospective 3.3.0b tar ball is available for now from:

  http://people.apache.org/~jgallacher/mod_python/dist/

if you want to build it yourself and try it. Don't see this as any sort of
blessed official release at this point, but as a development snapshot and
it may disappear at any time. It was only put there to allow people on the
mod_python developers list to do some testing before any prospective
release.

Graham
From mh at pixar.com  Tue Dec 19 00:33:00 2006
From: mh at pixar.com (Mark Harrison)
Date: Tue Dec 19 00:33:08 2006
Subject: [mod_python] eliminating last foo.py from url?
In-Reply-To: <1166489743.4346@dscpl.user.openhosting.com>
References: <1166489743.4346@dscpl.user.openhosting.com>
Message-ID: <4587798C.6060104@pixar.com>

Graham Dumpleton wrote:
> Mark Harrison wrote ..
>>
>> But it's strange, even <Location> requires a trailing slash.  If I have
>> too
>> hard of a time getting clients to include it then I'll add the Alias.
> 
> Strange, as it shouldn't. Only thing I can think of is that the path you are
> choosing for the Location directive still has a corresponding physical
> directory of the same path under the document root and that is confusing
> Apache and it is still wanting to do trailing slash redirection before it
> matches it against the Location directive.

Ahh, nice catch.  Removing that directory causes both the trailing
slash and non-trailing slash URLs to work.

>> BTW, apache+mod_python seems to be a nice xmlrpc platform.
>> When I get this polished, I'll try and get permission to put a note on
>> the
>> wiki about setting it up.
> 
> You may want to have a look at my Vampire package which contains an
> XML-RPC service endpoint for use in mod_python. All you need to do
> is something like:

I'll check it out... thanks!

Mark
From brunson at brunson.com  Tue Dec 19 16:32:20 2006
From: brunson at brunson.com (Eric Brunson)
Date: Tue Dec 19 16:32:31 2006
Subject: [mod_python] Re: mysql python compilation failed
In-Reply-To: <4586DA6A.6000306@holdenweb.com>
References: <1166438206.9812@dscpl.user.openhosting.com>
	<4586DA6A.6000306@holdenweb.com>
Message-ID: <45885A64.2080901@brunson.com>

Steve Holden wrote:
> Graham Dumpleton wrote:
>> Adrian Mak wrote ..
>>> My linux is CentOS 4.4
>>> apache 2.0.59 (compiled from source tar ball)
>>> Python 2.3.4 (stock rpm)
>>> mysql-python  3.2.10
>>> mysql 5.0.27 (compiled from source tar ball)
>>>
>>> I downloaded mysql python  1.2.1p1. I built mysql python thru command
>>> python setup.py build , however it return error
>>> [root@test MySQL-python-1.2.1_p2]# python setup.py  build
>>> running build
>>> running build_py
>>> copying MySQLdb/release.py -> build/lib.linux-i686-2.3/MySQLdb
>>> running build_ext
>>> building '_mysql' extension
>>> gcc -pthread -shared build/temp.linux-i686-2.3/_mysql.o
>>> /usr/local/mysql/lib/mysql/libmysqlclient_r.a 
>>> -L/usr/local/mysql/lib/mysql
>>> -lmysqlclient_r -lz -lpthread -lcrypt -lnsl -lm -lpthread -o
>>> build/lib.linux-i686-2.3/_mysql.so
>>> gcc: /usr/local/mysql/lib/mysql/libmysqlclient_r.a: No such file or
>>> directory
>>> error: command 'gcc' failed with exit status 1
>>>
>>> my mysql compile options are
>>>
>>> CC=gcc CFLAGS="-march=i686 -O3 -pipe -fomit-frame-pointer" \
>>> CXX=gcc CXXFLAGS="-O3 -march=i686 -pipe -felide-constructors\
>>>  -fno-exceptions -fno-rtti" ./configure 
>>> --prefix=/usr/local/mysql-5.0.27\
>>>  --enable-assembler --with-mysqld-ldflags=-all-static --enable-shared \
>>> --without-debug --without-innodb 
>>> --with-extra-charsets=gb2312,utf8,big5,gbk\
>>>  --without-bench
>>>
>>>
>>> and I have add path of mysq lib in the ld.so.conf
>>
>> This mailing list is for mod_python, the Python extension module for 
>> Apache. It
>> is not for general Python questions unrelated to mod_python and 
>> especially not
>> for questions about Python wrappers for MySQL.
>>
>> I would suggest you ask your question on comp.lang.python at:
>>
>>   http://groups.google.com/group/comp.lang.python?hl=en
>>
>> or try and find a mailing list which deals specifically with the 
>> Python wrappers
>> for MySQL.
>>
>> Graham
>
> Having said which, I believe the problem will be found to be related 
> to differences in threading capability between the MySQL client 
> libraries and the specifications for the Python module.
>
> The "_r" sequence of libraries parallels the main libs, but either 
> does or does not enable threading, I can never remember which.
>

"_r" libraries are meant to be threadsafe, the r stands for "reentrant"

From klokan at klokan.cz  Wed Dec 20 03:13:18 2006
From: klokan at klokan.cz (=?ISO-8859-2?Q?Klokan_Petr_P=F8idal?=)
Date: Wed Dec 20 03:13:26 2006
Subject: [mod_python] Mod_python as replacement for mod_rewrite
Message-ID: <6e41d95b0612200013l6af3dbbbu653bd7494eb0ef59@mail.gmail.com>

Hello,

I need to make an intelligent replacement for mod_rewrite, so it will
count url using quite complicated math a then forward request to
fast-cgi server...
In fact I'm going to use it for WMS (Web Map Service) emulation over
IIPImage (imageserver),
so url like:

http://domain/script/?WMTVER=1.0.0&REQUEST=map&LAYERS=RELIEF&STYLES=default&SRS=EPSG:4326&BBOX=-2.197265625,39.55078125,20.302734375,50.80078125&WIDTH=256&HEIGHT=128&FORMAT=JPG

will be redirected (as fast as possible and internally inside apache)
to fast cgi request

http://domain/fastcgi-bin/iipsrv.fcgi?FIF=/tmp/test.tif&WID=256&HEI=128&RGN=0.25,0.25,0.5,0.5&CVT=JPEG

where I have to transform lat/lon numbers in first url to region on
the image in the second url... but this wouldn't be so big problem in
python...

Question is which apache handlers use to make this internal forward,
and how to make that as fast as possible...

Is mod_python the right tool for this task?

Or do you think it would be better to hack directly mod_rewrite and
programm the transition of coordinates in C?

Thanks a lot for any help...

Klokan
From soenke.ruempler at northclick.de  Wed Dec 20 05:31:50 2006
From: soenke.ruempler at northclick.de (Soenke Ruempler - NorthClick )
Date: Wed Dec 20 05:31:56 2006
Subject: [mod_python] PYTHONPATH and mod_python
Message-ID: <002301c72422$103ed630$6402a8c0@Benjamin>

Hi,

We're using a managed server and have our own apache + mod_python running.
All went fine until the server was rebooted by the provider.

Now I get:

[Wed Dec 20 11:22:07 2006] [notice] SIGHUP received.  Attempting to restart
[Wed Dec 20 11:22:07 2006] [notice] mod_python: Creating 8 session mutexes
based on 150 max processes and 0 max threads.
[Wed Dec 20 11:22:07 2006] [notice] mod_python: using mutex_directory
/www/94219_27474/local/tmp
[Wed Dec 20 11:22:07 2006] [notice] Apache/2.0.55 (Unix) DAV/2 SVN/1.3.2
mod_python/3.2.10 Python/2.5 configured -- resuming normal operations


[Doing the first HTTP request here]

[Wed Dec 20 11:22:13 2006] [error] make_obcallback: could not import
mod_python.apache.\n
ImportError: No module named mod_python.apache
[Wed Dec 20 11:22:13 2006] [error] make_obcallback: Python path being used
"['/usr/lib/python25.zip', '/usr/lib/python2.5',
'/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk',
'/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages',
'/usr/lib/python2.5/site-packages/PIL']".
[Wed Dec 20 11:22:13 2006] [error] python_handler: no interpreter callback
found.
[Wed Dec 20 11:22:13 2006] [error] [client xxx] python_handler: Can't
get/create interpreter.

[500 Interal Server Error]

I guess the problem is the PYTHONPATH is being ignored by apache+mod_python.
Mod_python is installed into some local dir and the PYTHONPATH is set:

# env | grep PY
PYTHONPATH=/www/94219_27474/local/lib/python2.5/site-packages/:/www/94219_27
474/local/lib/svn-python:

The intepreter gets the path from commandline:

# python2.5
Python 2.5 (r25:51908, Sep 22 2006, 18:03:12)
[GCC 3.3.5  (Gentoo Linux 3.3.5-r1, ssp-3.3.2-3, pie-8.7.7.1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> sys.path
['', '/www/94219_27474/local/lib/python2.5/site-packages',
'/www/94219_27474/local/lib/svn-python', '/kunden/94219_27474',
'/usr/lib/python25.zip', '/usr/lib/python2.5',
'/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk',
'/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages',
'/usr/lib/python2.5/site-packages/PIL']
>>> import mod_python.apache
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "usr/lib/python2.5/site-packages/mod_python/apache.py", line 28, in
<module>
ImportError: No module named _apache

I guess this looks good (as I've seen it in some mail archives).

But somehow the PYTHONPATH is not used while mod_python initialization?!

Any help would be appreciated. :)

-soenke

From MCStoufer at lbl.gov  Wed Dec 20 14:39:52 2006
From: MCStoufer at lbl.gov (Martin Stoufer)
Date: Wed Dec 20 14:40:03 2006
Subject: [mod_python] PYTHONPATH and mod_python
In-Reply-To: <002301c72422$103ed630$6402a8c0@Benjamin>
References: <002301c72422$103ed630$6402a8c0@Benjamin>
Message-ID: <45899188.2080703@lbl.gov>



Soenke Ruempler - NorthClick wrote:
> Hi,
>
> We're using a managed server and have our own apache + mod_python running.
> All went fine until the server was rebooted by the provider.
>
> Now I get:
>
> [Wed Dec 20 11:22:07 2006] [notice] SIGHUP received.  Attempting to restart
> [Wed Dec 20 11:22:07 2006] [notice] mod_python: Creating 8 session mutexes
> based on 150 max processes and 0 max threads.
> [Wed Dec 20 11:22:07 2006] [notice] mod_python: using mutex_directory
> /www/94219_27474/local/tmp
> [Wed Dec 20 11:22:07 2006] [notice] Apache/2.0.55 (Unix) DAV/2 SVN/1.3.2
> mod_python/3.2.10 Python/2.5 configured -- resuming normal operations
>
>
> [Doing the first HTTP request here]
>
> [Wed Dec 20 11:22:13 2006] [error] make_obcallback: could not import
> mod_python.apache.\n
> ImportError: No module named mod_python.apache
> [Wed Dec 20 11:22:13 2006] [error] make_obcallback: Python path being used
> "['/usr/lib/python25.zip', '/usr/lib/python2.5',
> '/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk',
> '/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages',
> '/usr/lib/python2.5/site-packages/PIL']".
> [Wed Dec 20 11:22:13 2006] [error] python_handler: no interpreter callback
> found.
> [Wed Dec 20 11:22:13 2006] [error] [client xxx] python_handler: Can't
> get/create interpreter.
>
> [500 Interal Server Error]
>
> I guess the problem is the PYTHONPATH is being ignored by apache+mod_python.
> Mod_python is installed into some local dir and the PYTHONPATH is set:
>
> # env | grep PY
> PYTHONPATH=/www/94219_27474/local/lib/python2.5/site-packages/:/www/94219_27
> 474/local/lib/svn-python:
>
> The intepreter gets the path from commandline:
>
> # python2.5
> Python 2.5 (r25:51908, Sep 22 2006, 18:03:12)
> [GCC 3.3.5  (Gentoo Linux 3.3.5-r1, ssp-3.3.2-3, pie-8.7.7.1)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
>   
>>>> import sys
>>>> sys.path
>>>>         
> ['', '/www/94219_27474/local/lib/python2.5/site-packages',
> '/www/94219_27474/local/lib/svn-python', '/kunden/94219_27474',
> '/usr/lib/python25.zip', '/usr/lib/python2.5',
> '/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk',
> '/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages',
> '/usr/lib/python2.5/site-packages/PIL']
>   
>>>> import mod_python.apache
>>>>         
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
>   File "usr/lib/python2.5/site-packages/mod_python/apache.py", line 28, in
> <module>
> ImportError: No module named _apache
>
> I guess this looks good (as I've seen it in some mail archives).
>
> But somehow the PYTHONPATH is not used while mod_python initialization?!
>
> Any help would be appreciated. :)
>
> -soenke
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>   
The simplest, and most evil, answer to this is after reboot  a different
version of python is being used that does not have the mod_python module
installed in its site-packages tree. From your helpful traceback, it
looks like the installed mod_python lib in Apache is still healthy and
being loaded properly.

Was this the same version as your were running pre-reboot? If so,
something serious happened to the entire mod_python module.

-- 
* Martin C. Stoufer              *
* DST/DIDC/ITG                   *
* Lawrence Berkeley National Lab *
* MS 50B-2239 510-486-8662       *

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3423 bytes
Desc: S/MIME Cryptographic Signature
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061220/fc9ccb24/smime.bin
From grahamd at dscpl.com.au  Wed Dec 20 16:21:43 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 20 16:21:49 2006
Subject: [mod_python] Mod_python as replacement for mod_rewrite
Message-ID: <1166649703.30212@dscpl.user.openhosting.com>

=?ISO-8859-2?Q?Klokan_Petr_P=F8idal?= wrote ..
> Hello,
> 
> I need to make an intelligent replacement for mod_rewrite, so it will
> count url using quite complicated math a then forward request to
> fast-cgi server...
> In fact I'm going to use it for WMS (Web Map Service) emulation over
> IIPImage (imageserver),
> so url like:
> 
> http://domain/script/?WMTVER=1.0.0&REQUEST=map&LAYERS=RELIEF&STYLES=default&SRS=EPSG:4326&BBOX=-2.197265625,39.55078125,20.302734375,50.80078125&WIDTH=256&HEIGHT=128&FORMAT=JPG
> 
> will be redirected (as fast as possible and internally inside apache)
> to fast cgi request
> 
> http://domain/fastcgi-bin/iipsrv.fcgi?FIF=/tmp/test.tif&WID=256&HEI=128&RGN=0.25,0.25,0.5,0.5&CVT=JPEG
> 
> where I have to transform lat/lon numbers in first url to region on
> the image in the second url... but this wouldn't be so big problem in
> python...
> 
> Question is which apache handlers use to make this internal forward,
> and how to make that as fast as possible...
> 
> Is mod_python the right tool for this task?
> 
> Or do you think it would be better to hack directly mod_rewrite and
> programm the transition of coordinates in C?

You can do it as a PythonTransHandler. This will be before any mapping of
URL to filesystem.

As an example, here is a transhandler() which implements the equivalent of
the Alias directive. I am using this to specify a special document root on the
fly which is then used by the MapToStorage phase of Apache. In your case
you wouldn't necessarily need to be setting DocumentRoot dynamically by
assigning to req.filename, but just rewriting req.uri with a new value. Only
problem with reassigning req.uri is that you are going to need mod_python
version 3.3 as 3.2.X doesn't support reassignment of req.uri. Version 3.3
hasn't been released yet, but you can get first beta snapshot from:

  http://people.apache.org/~jgallacher/mod_python/dist/

Doing it in the transhandler() means you can avoid having to do an internal
Apache subrequest. If you can't use newer version of mod_python, you will
have to do it as a normal handler and use req.internal_redirect() instead which
will be slower as it is causing a subrequest so effectively handling two full
requests rather than one, albeit the second is internally generated.

As to the example, in httpd.conf file I have:

  #AliasMatch '/sample-(.*)/(.*)' /Users/grahamd/Projects/mod_python-sample/sample-$1/htdocs/$2

  # Implements same as AliasMatch directive above.
  PythonTransHandler /Users/grahamd/Projects/mod_python-sample/location.py

The transhandler() code file is then:

graham-dumpletons-powerbook-g4-15:


from mod_python import apache
import re, os

# Same as AliasMatch definition mapping:
#
#   '/sample-(.*)/(.*)'
#
# to:
#
#   /Users/grahamd/Projects/mod_python-sample/sample-$1/htdocs/$2

_here = os.path.dirname(__file__)
_location_re = re.compile(r'^/(?P<app>sample-[^/]*)/(?P<path>.*)')

def transhandler(req):
    result = _location_re.match(req.uri)
    if result:
        matches = result.groupdict()
        application = matches['app']
        path = matches['path']
        req.filename = os.path.join(_here, application, 'htdocs', path)
        return apache.OK
    return apache.DECLINED
From grahamd at dscpl.com.au  Wed Dec 20 16:31:45 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 20 16:31:47 2006
Subject: [mod_python] PYTHONPATH and mod_python
Message-ID: <1166650305.2160@dscpl.user.openhosting.com>

Soenke Ruempler - NorthClick  wrote ..
> Hi,
> 
> We're using a managed server and have our own apache + mod_python running.
> All went fine until the server was rebooted by the provider.
> 
> Now I get:
> 
> [Wed Dec 20 11:22:07 2006] [notice] SIGHUP received.  Attempting to restart
> [Wed Dec 20 11:22:07 2006] [notice] mod_python: Creating 8 session mutexes
> based on 150 max processes and 0 max threads.
> [Wed Dec 20 11:22:07 2006] [notice] mod_python: using mutex_directory
> /www/94219_27474/local/tmp
> [Wed Dec 20 11:22:07 2006] [notice] Apache/2.0.55 (Unix) DAV/2 SVN/1.3.2
> mod_python/3.2.10 Python/2.5 configured -- resuming normal operations
> 
> 
> [Doing the first HTTP request here]
> 
> [Wed Dec 20 11:22:13 2006] [error] make_obcallback: could not import
> mod_python.apache.\n
> ImportError: No module named mod_python.apache
> [Wed Dec 20 11:22:13 2006] [error] make_obcallback: Python path being used
> "['/usr/lib/python25.zip', '/usr/lib/python2.5',
> '/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk',
> '/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages',
> '/usr/lib/python2.5/site-packages/PIL']".
> [Wed Dec 20 11:22:13 2006] [error] python_handler: no interpreter callback
> found.
> [Wed Dec 20 11:22:13 2006] [error] [client xxx] python_handler: Can't
> get/create interpreter.
> 
> [500 Interal Server Error]
> 
> I guess the problem is the PYTHONPATH is being ignored by apache+mod_python.
> Mod_python is installed into some local dir and the PYTHONPATH is set:
> 
> # env | grep PY
> PYTHONPATH=/www/94219_27474/local/lib/python2.5/site-packages/:/www/94219_27
> 474/local/lib/svn-python:
> 
> The intepreter gets the path from commandline:
> 
> # python2.5
> Python 2.5 (r25:51908, Sep 22 2006, 18:03:12)
> [GCC 3.3.5  (Gentoo Linux 3.3.5-r1, ssp-3.3.2-3, pie-8.7.7.1)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
> >>> import sys
> >>> sys.path
> ['', '/www/94219_27474/local/lib/python2.5/site-packages',
> '/www/94219_27474/local/lib/svn-python', '/kunden/94219_27474',
> '/usr/lib/python25.zip', '/usr/lib/python2.5',
> '/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk',
> '/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages',
> '/usr/lib/python2.5/site-packages/PIL']
> >>> import mod_python.apache
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
>   File "usr/lib/python2.5/site-packages/mod_python/apache.py", line 28,
> in
> <module>
> ImportError: No module named _apache
> 
> I guess this looks good (as I've seen it in some mail archives).
> 
> But somehow the PYTHONPATH is not used while mod_python initialization?!
> 
> Any help would be appreciated. :)

Apache is normally run as a separate user. The PYTHONPATH variable definition
has to be set in the environment of that user. If the way Apache is started at
reboot means it doesn't actually inherit the environment of that user, then it
would have to be set somehow in the Apache startup scripts.

At the moment I am assuming that you are only setting PYTHONPATH in your own
account and it has perhaps worked prior to the reboot as the means you were
using to restart Apache was inheriting it from your own environment.

Graham
From soenke.ruempler at northclick.de  Thu Dec 21 06:57:56 2006
From: soenke.ruempler at northclick.de (Soenke Ruempler - NorthClick )
Date: Thu Dec 21 06:58:05 2006
Subject: [mod_python] PYTHONPATH and mod_python
In-Reply-To: <45896F36.2030407@lbl.gov>
Message-ID: <002701c724f7$40ee0050$6402a8c0@Benjamin>

Hi Martin,

Martin Stoufer <mailto:MCStoufer@lbl.gov> wrote on Wednesday, December 20,
2006 6:13 PM:

> The simplest, and most evil, answer to this is after reboot
> a different
> version of python is being used that does not have the
> mod_python module
> installed in its site-packages tree. From your helpful traceback, it
> looks like the installed mod_python lib in Apache is still
> healthy and
> being loaded properly.
> 
> Was this the same version as your were running pre-reboot? If so,
> something serious happened to the entire mod_python module.

The python binaries are the same as before the reboot. But, maybe worth a
note, there is more than one binary:

lrwxrwxrwx  1 root root       9 Nov 29 17:21 /usr/bin/python -> python2.3*
-rwxr-xr-x  1 root root 1855364 Nov 25  2004 /usr/bin/python1.5*
lrwxrwxrwx  1 root root       9 Mar 11  2005 /usr/bin/python2 -> python2.3*
-rwxr-xr-x  1 root root 3206789 Nov 25  2004 /usr/bin/python2.0*
-rwxr-xr-x  1 root root    6364 Nov 24  2004 /usr/bin/python2.3*
-rwxr-xr-x  1 root root 4135506 Sep 22 18:04 /usr/bin/python2.5*
-rwxr-xr-x  1 root root     178 Nov 24  2004 /usr/bin/python2.5-config*
lrwxrwxrwx  1 root root      16 Nov 29 17:21 /usr/bin/python-config ->
python2.5-config*

However, the config line f?r mod_python is:

./configure --with-python=/usr/bin/python2.5
--with-apxs=/www/94219_27474/local/apache2/bin/apxs
--prefix=/www/94219_27474/local/ --libdir=/www/94219_2747

IMHO it must be something with the PYTHONPATH that isn't properly put into
Apache. I tried almost everything like

# PYTHONPATH=... apachctl restart
# env apachectl restart
# export PYTHONPATH=...

And northing seems to help ...


-soenke


From soenke.ruempler at northclick.de  Thu Dec 21 07:00:22 2006
From: soenke.ruempler at northclick.de (Soenke Ruempler - NorthClick )
Date: Thu Dec 21 07:00:55 2006
Subject: [mod_python] PYTHONPATH and mod_python
In-Reply-To: <1166650305.2160@dscpl.user.openhosting.com>
Message-ID: <002801c724f7$983412a0$6402a8c0@Benjamin>

Hi Graham,

Thanks for your answer.

Graham Dumpleton <mailto:grahamd@dscpl.com.au> wrote on Wednesday, December
20, 2006 10:32 PM:

> Apache is normally run as a separate user. The PYTHONPATH
> variable definition
> has to be set in the environment of that user. If the way
> Apache is started at
> reboot means it doesn't actually inherit the environment of
> that user, then it
> would have to be set somehow in the Apache startup scripts.
> 
> At the moment I am assuming that you are only setting
> PYTHONPATH in your own
> account and it has perhaps worked prior to the reboot as the
> means you were
> using to restart Apache was inheriting it from your own environment.

I exported PYTHONPATH before starting Apache. See my previous mail. Any
other suggestions?

-soenke

From grahamd at dscpl.com.au  Thu Dec 21 14:23:08 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Dec 21 14:23:23 2006
Subject: [mod_python] PYTHONPATH and mod_python
In-Reply-To: <002701c724f7$40ee0050$6402a8c0@Benjamin>
References: <002701c724f7$40ee0050$6402a8c0@Benjamin>
Message-ID: <C72D4505-80BE-4CE6-AF90-47F6017A729D@dscpl.com.au>

How much control do you have on the box. Can you get a .pth file
installed into the Python 2.5 site-packages directory which refers
to your local mod_python version, or is it a shared box so you can't
do that?

On 21/12/2006, at 10:57 PM, Soenke Ruempler - NorthClick wrote:

> Hi Martin,
>
> Martin Stoufer <mailto:MCStoufer@lbl.gov> wrote on Wednesday,  
> December 20,
> 2006 6:13 PM:
>
>> The simplest, and most evil, answer to this is after reboot
>> a different
>> version of python is being used that does not have the
>> mod_python module
>> installed in its site-packages tree. From your helpful traceback, it
>> looks like the installed mod_python lib in Apache is still
>> healthy and
>> being loaded properly.
>>
>> Was this the same version as your were running pre-reboot? If so,
>> something serious happened to the entire mod_python module.
>
> The python binaries are the same as before the reboot. But, maybe  
> worth a
> note, there is more than one binary:
>
> lrwxrwxrwx  1 root root       9 Nov 29 17:21 /usr/bin/python ->  
> python2.3*
> -rwxr-xr-x  1 root root 1855364 Nov 25  2004 /usr/bin/python1.5*
> lrwxrwxrwx  1 root root       9 Mar 11  2005 /usr/bin/python2 ->  
> python2.3*
> -rwxr-xr-x  1 root root 3206789 Nov 25  2004 /usr/bin/python2.0*
> -rwxr-xr-x  1 root root    6364 Nov 24  2004 /usr/bin/python2.3*
> -rwxr-xr-x  1 root root 4135506 Sep 22 18:04 /usr/bin/python2.5*
> -rwxr-xr-x  1 root root     178 Nov 24  2004 /usr/bin/python2.5- 
> config*
> lrwxrwxrwx  1 root root      16 Nov 29 17:21 /usr/bin/python-config ->
> python2.5-config*
>
> However, the config line f?r mod_python is:
>
> ./configure --with-python=/usr/bin/python2.5
> --with-apxs=/www/94219_27474/local/apache2/bin/apxs
> --prefix=/www/94219_27474/local/ --libdir=/www/94219_2747
>
> IMHO it must be something with the PYTHONPATH that isn't properly  
> put into
> Apache. I tried almost everything like
>
> # PYTHONPATH=... apachctl restart
> # env apachectl restart
> # export PYTHONPATH=...
>
> And northing seems to help ...
>
>
> -soenke
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From travis at uni-paderborn.de  Thu Dec 21 16:37:18 2006
From: travis at uni-paderborn.de (Marcus Werner)
Date: Thu Dec 21 16:35:44 2006
Subject: [mod_python] Protecting Image-Directory's with PythonAccessHandler
Message-ID: <20061221223718.2fc4a594@rita.prakti.org>

Hi everyone,

I'm working on a Debian-Stable Box with mod_python 2.7.10 and Python
2.3 (yes I know its both 'stale', but I've got no choice) and I would
like to know _how_ I can protect an images-directory with an 
PythonAccessHandler together with my application-/session-based
authentification. A bonus would be If I could decide access to specific
images bases on user-permissions. 

I know this is a tricky problem, and in PHP you would have to place the
images somewhere inaccessible from the web and stream them through php
to the client, after checking the credentials. If we assume mod_php is
tuned to serve this fast the performance should be fair, but there is
still a small performance-loss because the image is streamed
through the PHP-Interpreter.

Now mod_python seems to dodge this elegantly by introducing the
AccessHandler, but so far I haven't been able to produce
something like this, since the documentation regarding those special
Handler is really sparse.

If you want to attract more user you really need some examples
regarding things wich are impossible, difficult or perfomance-costly 
in other languages/frameworks.
Especially for those Python*Handlers, you need _way_more_ examples, so
it's obvious why,where and when to use those Handlers. They are a huge
bonus, but regarding the documentation they haven't received the
attention they deserve.

I'm going to hold a 30-minutes presentation on mod_python 3 Weeks
from now during a seminar about scripting-languages for Web-Engineering
and  I would like to show at least _one_ convincing example why and
where to use those _special_ handlers. So far I don't know what to tell
my fellow students about thist part of mod_python. Afaik it seems like
I'm the first guy ever doing a presentation about mod_python.

I'm going to set up a more recent version of mod_python on a private
box tonight so if you have a solution/small example wich works on a more
recent version of mod_python: fire away. 

Merry christmasa and best regards,
--
Marcus Werner

<travis@uni-paderborn.de>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061221/2f597520/signature.bin
From jeffh at dundeemt.com  Thu Dec 21 19:47:56 2006
From: jeffh at dundeemt.com (Jeff Hinrichs - DM&T)
Date: Thu Dec 21 19:48:00 2006
Subject: [mod_python] focus on shared hosting?
Message-ID: <5aaed53f0612211647j56a3d943o7ad0d015195e2700@mail.gmail.com>

John Udell blogged today about django and mod_python.  However the
question he poses is pertinent to mod_python and projects that depend
on mp like TG and Pylons, et al.

"I've heard it said that a compelling screencast is one key factor
influencing the adoption of a new web-based application. One-click
install in shared hosting environments has to be another."
  http://blog.jonudell.net/2006/12/21/django-gymnastics/

I know that there are a few hosts that specialize in python based apps
but what can be done to make mp a must have like php and ruby?  What
can be done technically to make mp a no-brainer decision for most web
hosting companies.  Are there really security or resource utilization
issues that can't be over come?  Maybe the next big mp focus should be
on what can be done to make administering/securing a shared mp install
so that it is easier for shared hosts to implement it.



-- 
Jeff
From anthonybaby at gmail.com  Thu Dec 21 20:47:38 2006
From: anthonybaby at gmail.com (Anthony)
Date: Thu Dec 21 20:47:43 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <5aaed53f0612211647j56a3d943o7ad0d015195e2700@mail.gmail.com>
References: <5aaed53f0612211647j56a3d943o7ad0d015195e2700@mail.gmail.com>
Message-ID: <9ade3b000612211747s2cdd7c9cp42b1e26286d06b5a@mail.gmail.com>

> Are there really security or resource utilization issues that can't be over come?

Yes. Many shared hosting admins contend that they can't isolate
virtual hosts for one reason or another. Considering that their target
market for shared hosting is made up of more bloggers and
blogger/hobbyist programmers than seasoned developers who will be
extra careful with their processes, I suppose it's reasonable for an
admin to be afraid.

A nifty screencast would be great though, if only to inspire. A demo
site running small mod_python apps would be great too. I just wrote a
small CGI app that let's me load up random Garfield comic strips, but
a cool Ajaxy Flickr/eBay/Amazon search tool would be impressive.
Admins and hobbyists who want to experiment need to be enticed by
these presentations... showmanship.

I believe if we want to see mod_python widespread on shared hosts, we
should promote mod_python 2.7 on Apache 1.3. *ducks* I use mod_python
3 on Apache 2 on my test system, but out there in shared hosting land,
Apache 1.3 support is a generally a must. I admit I don't know much
about the differences between MP2 and MP3, but what if MP2 were
designed specifically to meet the needs of shared hosting admins? A
kind of mod_python lite if you will.

Anthony
From anthonybaby at gmail.com  Thu Dec 21 21:39:56 2006
From: anthonybaby at gmail.com (Anthony)
Date: Thu Dec 21 21:40:00 2006
Subject: [mod_python] Publisher handler-like URLs in CGI?
Message-ID: <9ade3b000612211839k59c0ccefx5879c9364466d127@mail.gmail.com>

Something I love about mod_python is the way the Publisher handler
allow one to expose a function within a module as a URL. Does anyone
know if it's possible to get this functionality on CGI so that the
following is allowed?

processing() in app.py ---> http://site.com/app.py/processing/

photoalbum() in index.py ---> http://site.com/photoalbum/

And a little less on topic, could this be done if mod_python were not
available, say if you were accessing python via CGI/FastCGI on Apache?

Anthony
From grahamd at dscpl.com.au  Thu Dec 21 23:13:18 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Dec 21 23:13:22 2006
Subject: [mod_python] Publisher handler-like URLs in CGI?
Message-ID: <1166760798.28228@dscpl.user.openhosting.com>

Anthony wrote ..
> Something I love about mod_python is the way the Publisher handler
> allow one to expose a function within a module as a URL.

If only you knew what problems it has. :-)

In other words, it certainly is one way of doing things, but the implementation
does have various problems/quirks with trailing slashes.

> Does anyone
> know if it's possible to get this functionality on CGI so that the
> following is allowed?
> 
> processing() in app.py ---> http://site.com/app.py/processing/

It would certainly be possible to implement something that would work within
CGI and am pretty sure that you probably find that someone else has actually
done it already.

> photoalbum() in index.py ---> http://site.com/photoalbum/

This variation you probably wouldn't be able to achieve except by resorting
to using some mod_rewrite magic as default mapping to CGI excepts the
name of the cgi program file to be present in the URL.

> And a little less on topic, could this be done if mod_python were not
> available, say if you were accessing python via CGI/FastCGI on Apache?

In doing it for CGI, you would not be able to rely on mod_python, so must be a
separate solution.

Anyway, search around on the net, there are lots of other solutions for
URL mapping in Python. You might even find a WSGI solution which does
it and which can work within CGI.

Graham
From jpg at jgassociates.ca  Fri Dec 22 00:15:51 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Dec 22 00:08:49 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <9ade3b000612211747s2cdd7c9cp42b1e26286d06b5a@mail.gmail.com>
References: <5aaed53f0612211647j56a3d943o7ad0d015195e2700@mail.gmail.com>
	<9ade3b000612211747s2cdd7c9cp42b1e26286d06b5a@mail.gmail.com>
Message-ID: <458B6A07.80700@jgassociates.ca>

Anthony wrote:
>> Are there really security or resource utilization issues that can't be 
>> over come?
> 
> Yes. Many shared hosting admins contend that they can't isolate
> virtual hosts for one reason or another. Considering that their target
> market for shared hosting is made up of more bloggers and
> blogger/hobbyist programmers than seasoned developers who will be
> extra careful with their processes, I suppose it's reasonable for an
> admin to be afraid.

I'm not sure mod_python is any worse as far as resource utilization is 
concerned. Mod_python 3.0 had the reputation of leaking memory, but 3.2 
fixed alot of the leaks and 3.3 will fix a couple more and in fact is 
looking pretty good on that front. On the other hand isolating virtual 
hosts is going to be difficult because of limitations imposed by the 
interpreter, and I don't see any easy fix. The ultimate answer is 
something like the (now dead) perchild-mpm, but there doesn't seem to be 
much movement in that direction in httpd-land.

> A nifty screencast would be great though, if only to inspire. A demo
> site running small mod_python apps would be great too. I just wrote a
> small CGI app that let's me load up random Garfield comic strips, but
> a cool Ajaxy Flickr/eBay/Amazon search tool would be impressive.
> Admins and hobbyists who want to experiment need to be enticed by
> these presentations... showmanship.

Not just showmanship. I think the screencast idea is pretty good and 
I've certainly seen some that were quite educational. It seems to me 
they work best when you have some sort of GUI to explain though. As good 
as screencasts may be, is there anything worse than watching someone 
type code into an editor?

> I believe if we want to see mod_python widespread on shared hosts, we
> should promote mod_python 2.7 on Apache 1.3. *ducks* 

And so you should. Mod_python 2 is dead. It's not resting. It's not 
pining for the fiords, it's not stunned. It's dead. It's pushin' up the 
daisies! 'Is metabolic processes are now 'istory! 'E's off the twig! 
'E's kicked the bucket, 'e's shuffled off 'is mortal coil, run down the 
curtain and joined the bleedin' choir invisibile!!

It is, in a word, an Ex-module.

(Gee, I wonder if it was a mistake to check my email after a couple of 
pints down at the local?)

> I use mod_python
> 3 on Apache 2 on my test system, but out there in shared hosting land,
> Apache 1.3 support is a generally a must. I admit I don't know much
> about the differences between MP2 and MP3, but what if MP2 were
> designed specifically to meet the needs of shared hosting admins? A
> kind of mod_python lite if you will.

I've come to accept that the sweet spot for mod_python is somewhat 
higher up the food chain from cheap shared hosting. Mod_python will come 
into it's own as server virtualization becomes the rule for website hosting.

The code for mod_python 2 hasn't really been touched since 2002, and 
Apache 1.3 is considered legacy code as well. Many of the things that I 
find interesting and exciting about mod_python depend on Apache 2 
features. I think it would be hard to find people willing to spend time 
making mod_python 2.x work properly when you consider that it's 
ultimately a dead end. I'd much rather see our resources spent on 
improving the documentation (a widely acknowledged weakness), exploiting 
Apache 2.2 features and general performance improvements.

Jim

From benjamin.barker at gmail.com  Fri Dec 22 06:29:07 2006
From: benjamin.barker at gmail.com (Ben Barker)
Date: Fri Dec 22 06:29:09 2006
Subject: [mod_python] Indentation problems with psp
Message-ID: <d64a3340612220329m34cc3000i70455f4fa8353019@mail.gmail.com>

Hi, I've been having some indentation problems with psp that I can't
get my head arouind. I get indentation errors for the for loop, but I
can't work out why...

Any thoughts?

Cheers,

Ben

<%
if os.path.exists("boroughs.txt"):
        #Start indentation
        %><select name="Borough"><%

        for item in sorted:
                #start indentation
                %><option value="<%= item%>"> <%= item%>-<%= lookup[item]%>
<%
#End if statement
%>
From martijn at xs4us.nu  Fri Dec 22 06:51:01 2006
From: martijn at xs4us.nu (Martijn Moeling)
Date: Fri Dec 22 06:51:11 2006
Subject: [mod_python] focus on shared hosting?
Message-ID: <B6C73A5E30565245BB6D32B5F5DF7A520BEE00@sense.emmastraat.pijnacker>

Hi,

I am building a mod_pthon application which is growing towards a web
development system (more on that later on). It is on a production
platform for over a year now and fortunately that project had the budget
to get a dedicated server. The hosting provider has been extremely
flexible in supporting a mod_python setup, and I am sure THEY will
support MP in a virtual host environment if I ask them to do so.

I found out that the larger the provider the less they are flexible on
non standard setups or additional software like mod_python. Try and seek
a well established provider which specializes on hosting and not on
internet access and prepare a list of questions/demands before you
contact them like:

Do you support Mod_python (obvious)
Would you if you don't
Can I modify the .htaccess
What extensions within python can I use (MySQLdb for instance)
Etc.

Now a little on my application:

You can find it running on http://www.lokalos.nl (or the
http://www.mkbok.nl is the production example) Which is one of the
domains on my development server. It is based on a self made templating
system and all data (except for some images at the moment) is stored in
a MySQL database, that is templates, template blocks, data. The basic
module can be extended with separate modules, which are stored in the
database to (3.3.0b is used now for module reloading and beta-testing).
The database can contain additional tables which can be altered from
within the backoffice
(http://www.lokalos.nl/lokalosimg/screendump_backoffice.jpg) 
(sorry for everything being in Dutch, the screen dump is to get an
impression)

This backoffice turns a browser into a desktop, and the next major thing
I am working on is a python to javascript converter so even the browser
can be programmed with python (with support for all major browsers). The
IDE will be something like Visual basic 6.0 but web based and completely
pythonic.
Users can be members of groups and membership of one adds functionality
to the menu on top.

As you can see in mkbok my system can be used to implement subdomains,
meaning xxx.mkbok.nl or even xxx.yyy.zzz.ppp.mkbok.nl, all database
driven, In the early days of my development I used to refer to my system
as a PMS (Portal Management System, and the original reason for starting
this developmen) but by now it is becoming an application development
system since I get more and more request from customers who want to let
their customers use the backoffice, or as I signed the contract this
morning one of my customers will be relying fully on this system to
implement their business logic and kick out M$ software completely,
replacing XP by linux with firefox and no other software as sort of
relatively dumb terminal with a 2 linux server redundant setup, running
apache, mysql and mod_python (and sendmail).

I am far from releasing this, but I am thinking of making it available
under GPL. Within this system a virtual host setup can be made, leaving
the apache config to no more than a AddHandler or SetHandler

The needed apache Config is:
<VirtualHost *:80>
	DocumentRoot /var/www/html
</VirtualHost>

PythonOptimize On
# New in MP 3.3.0b:
PythonOption mod_python.importer.path ["/usr/bin/PMS"]

<Directory "/var/www/html">
	AddHandler mod_python .py
	PythonHandler generate
	PythonAutoReload On
</Directory>

#access to the backoffice
<Location "/admin/">
	SetHandler mod_pthon
	PythonHandler generate
	PythonAutoReload On
</Location>

(I left out the SSL stuff)

With a request I look at req.connection.host to see which domain is
wanted and I open the corresponding MySQL database and read the right
template.

This story might be an eye opener to some of you and any comments are
welcome. Shoot questions if you want.

Martijn Moeling

-----Oorspronkelijk bericht-----
Van: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] Namens Jim Gallacher
Verzonden: Friday, December 22, 2006 6:16 AM
Aan: Anthony
CC: mod_python@modpython.org
Onderwerp: Re: [mod_python] focus on shared hosting?

Anthony wrote:
>> Are there really security or resource utilization issues that can't
be 
>> over come?
> 
> Yes. Many shared hosting admins contend that they can't isolate
> virtual hosts for one reason or another. Considering that their target
> market for shared hosting is made up of more bloggers and
> blogger/hobbyist programmers than seasoned developers who will be
> extra careful with their processes, I suppose it's reasonable for an
> admin to be afraid.

I'm not sure mod_python is any worse as far as resource utilization is 
concerned. Mod_python 3.0 had the reputation of leaking memory, but 3.2 
fixed alot of the leaks and 3.3 will fix a couple more and in fact is 
looking pretty good on that front. On the other hand isolating virtual 
hosts is going to be difficult because of limitations imposed by the 
interpreter, and I don't see any easy fix. The ultimate answer is 
something like the (now dead) perchild-mpm, but there doesn't seem to be

much movement in that direction in httpd-land.

> A nifty screencast would be great though, if only to inspire. A demo
> site running small mod_python apps would be great too. I just wrote a
> small CGI app that let's me load up random Garfield comic strips, but
> a cool Ajaxy Flickr/eBay/Amazon search tool would be impressive.
> Admins and hobbyists who want to experiment need to be enticed by
> these presentations... showmanship.

Not just showmanship. I think the screencast idea is pretty good and 
I've certainly seen some that were quite educational. It seems to me 
they work best when you have some sort of GUI to explain though. As good

as screencasts may be, is there anything worse than watching someone 
type code into an editor?

> I believe if we want to see mod_python widespread on shared hosts, we
> should promote mod_python 2.7 on Apache 1.3. *ducks* 

And so you should. Mod_python 2 is dead. It's not resting. It's not 
pining for the fiords, it's not stunned. It's dead. It's pushin' up the 
daisies! 'Is metabolic processes are now 'istory! 'E's off the twig! 
'E's kicked the bucket, 'e's shuffled off 'is mortal coil, run down the 
curtain and joined the bleedin' choir invisibile!!

It is, in a word, an Ex-module.

(Gee, I wonder if it was a mistake to check my email after a couple of 
pints down at the local?)

> I use mod_python
> 3 on Apache 2 on my test system, but out there in shared hosting land,
> Apache 1.3 support is a generally a must. I admit I don't know much
> about the differences between MP2 and MP3, but what if MP2 were
> designed specifically to meet the needs of shared hosting admins? A
> kind of mod_python lite if you will.

I've come to accept that the sweet spot for mod_python is somewhat 
higher up the food chain from cheap shared hosting. Mod_python will come

into it's own as server virtualization becomes the rule for website
hosting.

The code for mod_python 2 hasn't really been touched since 2002, and 
Apache 1.3 is considered legacy code as well. Many of the things that I 
find interesting and exciting about mod_python depend on Apache 2 
features. I think it would be hard to find people willing to spend time 
making mod_python 2.x work properly when you consider that it's 
ultimately a dead end. I'd much rather see our resources spent on 
improving the documentation (a widely acknowledged weakness), exploiting

Apache 2.2 features and general performance improvements.

Jim

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From benjamin.barker at gmail.com  Fri Dec 22 06:59:37 2006
From: benjamin.barker at gmail.com (Ben Barker)
Date: Fri Dec 22 06:59:41 2006
Subject: [mod_python] Re: Indentation problems with psp
In-Reply-To: <d64a3340612220329m34cc3000i70455f4fa8353019@mail.gmail.com>
References: <d64a3340612220329m34cc3000i70455f4fa8353019@mail.gmail.com>
Message-ID: <d64a3340612220359i227c5ceex1bf422a4c5a23a16@mail.gmail.com>

...I've just tried using the .psp_ debugging option to help solve my
problem. However, it will only generate cod to examine when there are
no errors, which is precisely when I don't need it...

Is there a way around this?

Cheers,

Ben

On 22/12/06, Ben Barker <benjamin.barker@gmail.com> wrote:
> Hi, I've been having some indentation problems with psp that I can't
> get my head arouind. I get indentation errors for the for loop, but I
> can't work out why...
>
> Any thoughts?
>
> Cheers,
>
> Ben
>
> <%
> if os.path.exists("boroughs.txt"):
>         #Start indentation
>         %><select name="Borough"><%
>
>         for item in sorted:
>                 #start indentation
>                 %><option value="<%= item%>"> <%= item%>-<%= lookup[item]%>
> <%
> #End if statement
> %>
>
From grahamd at dscpl.com.au  Fri Dec 22 07:12:25 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec 22 07:12:29 2006
Subject: [mod_python] focus on shared hosting?
Message-ID: <1166789545.3712@dscpl.user.openhosting.com>

On 22/12/2006, at 11:47 AM, Jeff Hinrichs - DM&T wrote:

> John Udell blogged today about django and mod_python.  However the
> question he poses is pertinent to mod_python and projects that depend
> on mp like TG and Pylons, et al.
>
> ...
>
> I know that there are a few hosts that specialize in python based apps
> but what can be done to make mp a must have like php and ruby?  What
> can be done technically to make mp a no-brainer decision for most web
> hosting companies.  Are there really security or resource utilization
> issues that can't be over come?  Maybe the next big mp focus should be
> on what can be done to make administering/securing a shared mp install
> so that it is easier for shared hosts to implement it.

Parts of what you are talking about are things I have been thinking
about quite a lot lately, which is, possible future directions for the
concept of using Python in conjunction with Apache. Note though that I
don't mention mod_python when I say this. :-)

The first thing one has to realise about people who want to use Python
for web programming is that the majority don't actually care what
mod_python is. Where they do want to use Apache, they see mod_python
merely as a convenient hopping off point. As such, you have frameworks
like Django, TurboGears, CherryPy and applications like Trac (latest)
and MoinMoin, which don't actually use any of the handlers supplied with
mod_python, nor its capabilities to do automatic module reloading,
forms, session handling etc.

All these frameworks and applications want to do is specify a handler
to be called for the response phase, set up the Python module path and
possibly pass in a few options. When their handler is called, they then
promptly hide all the mod_python bits under a layer of code and the
user doesn't see them.

Further, where in the past these frameworks and applications built
separate adaptors for the various different web servers, they now all
tend to support WSGI. What one thus needs is not mod_python, but
mod_wsgi. The code needed to implement such a module would actually
be quite little in comparison to mod_python. In fact, none of the pure
Python code components of mod_python would even be required.

So what would a mod_wsgi need to contain. The first thing it needs to
be able to do is handle initialisation of Python and creation of interpreter
instances. This code would actually be much simpler than in mod_python
as mod_python has to do extra stuff like initialising global mutexes for
session management, trigger imports of special internal modules when
each interpreter instances is created, as well as importing special user
modules as well. In mod_wsgi it wouldn't need to do any of that.

The next big difference with mod_wsgi in comparison to mod_python
would be that except to trigger its own initialisation, the only handler
phase it needs to hook and process is the response phase. Because it is
not hooking all phases, it would be much more efficient than mod_python
as it wouldn't be doing all that extra work for each request of checking
for mod_python handlers for each phase.

Next area where mod_python does more work than it needs to is with all
its configuration and options directives. Ie., PythonPath, PythonAutoReload,
PythonDebug, PythonOption. Apache already has a SetEnv directive which
can be used to set key value pairs with the values being placed into the
req.subprocess_env table object. Since other parts of Apache already deal
with doing that, mod_wsgi could just use SetEnv as the means of getting
any configuration information, with the req.subprocess_env table also
becoming the basis of the WSGI dictionary which gets passed through
to any WSGI handler. Even the definition of what the WSGI handler module
and function is, could be specified in this way and as such mod_wsgi would
not need to define any directives at all, thus eliminating the need for code
to handle them.

To then setup mod_wsgi to be used, in the Apache configuration you would
have:

  <Location /some/path>
  SetHandler mod_wsgi
  SetEnv mod_wsgi.application module::application
  SetEnv mod_wsgi.interpreter myapplication
  SetEnv mod_wsgi.directory /directory/containing/module
  </Location>

Now in mod_python when a handler needs to be executed, a call is first
made into a dispatch function implemented in Python and it is that which
sets up all the environment and then calls the handler function. With
WSGI though, because the API for calling a WSGI application is so simple
it would be better to implement the dispatch in C code. Thus the C code
of mod_wsgi would import the application module and make the calls into
the application as appropriate. By doing this you totally eliminate the
need for any separate Python code modules needing to be installed and
thus get rid of one of the setup problems with mod_python of not being
able to find those extra Python modules. This should make it much easier
to install.

One issue with web hosting environments especially is being able to
separate different users web applications. Although one can't have each
application run as a separate user, one can at least separate them into
distinct interpreters. To specify the interpreter one would use SetEnv
to set mod_wsgi.interpreter. Where you have a lot of applications
though, you might not want to have to manually set these. Although
mod_rewrite is itself a bit heavy weight, one of the things it can do is
set the same variables as SetEnv sets based on stuff which appears in
the URL. Thus one could with a mod_rewrite rule automatically specify
the interpreter name based on the request URL. This is something that
mod_python can't even do because it uses a directive for setting the
name of the interpreter.

One final issue with interpreters is the initialisation of Python and
the creation of the interpreter instances. In this area, mod_wsgi could
run in one of two modes. The first would be where mod_wsgi is the only
Python module installed, ie. mod_python is not installed. In this
situation it could perform the initialisation of Python all itself and
also handle creation of interpreter instances. The second mode would be
where it detects that mod_python is already loaded. In this situation it
would simply use the hooks added in mod_python 3.3 for using
mod_python's machinery for accessing Python interpreter instances. By
being able to operate in these two modes, the module could either exist
by itself, but if needed, also co-operate with mod_python. Thus, just
because you run mod_wsgi doesn't mean that you couldn't also run
mod_wsgi at the same time.

If you have followed what I am talking about, and understand mod_python
internals and Apache a bit, you will see that the code for mod_wsgi
would actually be quite simple and because it doesn't have to wrap any
Apache data structures in Python equivalents, it should be quite easy to
create a version which is capable of being compiled on Apache 1.3, 2.0
or 2.2.

As I mention above, most people don't need the full mod_python
and thus this would allow all these higher level applications to still
be able to be run (under WSGI) even though they are using an older
version of Apache. This would also make it much simpler for web hosting
services as well, as they can say that they support anything which is
WSGI compliant.

Now, the idea of mod_wsgi is only one part of what I have been thinking
about for future directions of Python with Apache. It is late now though so
I'll go into my other ideas in the coming days, that is if I don't now decide
to go and finish my mod_wsgi which I already have the basis for in place
and thus get diverted. :-)

Comments on this part of my plans for global domination most welcome.

Graham

From grahamd at dscpl.com.au  Fri Dec 22 07:17:43 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec 22 07:17:46 2006
Subject: [mod_python] Indentation problems with psp
Message-ID: <1166789863.5998@dscpl.user.openhosting.com>

Read:

  http://www.modpython.org/pipermail/mod_python/2005-May/018102.html

for starters and then search back through other past mailing lists posts by
putting "PSP indenting" in the search box on the mod_python web site.

Sorry for the short response, it is late here and I need my sleep.

Graham

Ben Barker wrote ..
> Hi, I've been having some indentation problems with psp that I can't
> get my head arouind. I get indentation errors for the for loop, but I
> can't work out why...
> 
> Any thoughts?
> 
> Cheers,
> 
> Ben
> 
> <%
> if os.path.exists("boroughs.txt"):
>         #Start indentation
>         %><select name="Borough"><%
> 
>         for item in sorted:
>                 #start indentation
>                 %><option value="<%= item%>"> <%= item%>-<%= lookup[item]%>
> <%
> #End if statement
> %>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From martijn at xs4us.nu  Fri Dec 22 07:50:00 2006
From: martijn at xs4us.nu (Martijn Moeling)
Date: Fri Dec 22 07:50:18 2006
Subject: [mod_python] Protecting Image-Directory's with PythonAccessHandler
Message-ID: <B6C73A5E30565245BB6D32B5F5DF7A520BEE01@sense.emmastraat.pijnacker>

Hi,

For exactly the same reasons you indicate I have written my own access mechanism, Additionally I hate the login window produced by the browsers but that is my opinion. Next is, that I have not been able to get any secure credentials transfer with PythonAuthHandler working.

I use the xmlHTTPRequest (javascript) to send the credentials to the server, my mod_python program then looks up the User record in a MySQL database and checks the password, if correct a session is created.
Doing so using https makes it sort of secure enough for my application.

I have found it hard to get around the documentation and often I start reading trough the mod_python source files to get the answers (I need to understand the MP sources anyway since I want to contribute to the development, for most users this would be to much). This mailinglist is helpful but searching it in the archives is sometimes quite a task so I keep all the messages in a folder in my inbox and order them by hand to subfolders on specific topics. Now that the WIKI is there people start to move there too, making it even harder to search for what one needs.

A few days ago I wrote a message to Graham about the level of documentation and examples. Also I see many non native English speakers/readers having trouble with understanding the text, Additionally you need to be an Apache Internals expert in some cases to understand what the doc is telling.

Maybe it is time to write a mod_python cookbook, but I have simply no time left to do so...

Fr?hliche Weinachten!!

Martijn Moeling

-----Oorspronkelijk bericht-----
Van: mod_python-bounces@modpython.org [mailto:mod_python-bounces@modpython.org] Namens Marcus Werner
Verzonden: Thursday, December 21, 2006 10:37 PM
Aan: mod_python@modpython.org
Onderwerp: [mod_python] Protecting Image-Directory's with PythonAccessHandler

Hi everyone,

I'm working on a Debian-Stable Box with mod_python 2.7.10 and Python
2.3 (yes I know its both 'stale', but I've got no choice) and I would
like to know _how_ I can protect an images-directory with an 
PythonAccessHandler together with my application-/session-based
authentification. A bonus would be If I could decide access to specific
images bases on user-permissions. 

I know this is a tricky problem, and in PHP you would have to place the
images somewhere inaccessible from the web and stream them through php
to the client, after checking the credentials. If we assume mod_php is
tuned to serve this fast the performance should be fair, but there is
still a small performance-loss because the image is streamed
through the PHP-Interpreter.

Now mod_python seems to dodge this elegantly by introducing the
AccessHandler, but so far I haven't been able to produce
something like this, since the documentation regarding those special
Handler is really sparse.

If you want to attract more user you really need some examples
regarding things wich are impossible, difficult or perfomance-costly 
in other languages/frameworks.
Especially for those Python*Handlers, you need _way_more_ examples, so
it's obvious why,where and when to use those Handlers. They are a huge
bonus, but regarding the documentation they haven't received the
attention they deserve.

I'm going to hold a 30-minutes presentation on mod_python 3 Weeks
from now during a seminar about scripting-languages for Web-Engineering
and  I would like to show at least _one_ convincing example why and
where to use those _special_ handlers. So far I don't know what to tell
my fellow students about thist part of mod_python. Afaik it seems like
I'm the first guy ever doing a presentation about mod_python.

I'm going to set up a more recent version of mod_python on a private
box tonight so if you have a solution/small example wich works on a more
recent version of mod_python: fire away. 

Merry christmasa and best regards,
--
Marcus Werner

<travis@uni-paderborn.de>

From jpg at jgassociates.ca  Fri Dec 22 08:17:32 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Dec 22 08:17:30 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <1166789545.3712@dscpl.user.openhosting.com>
References: <1166789545.3712@dscpl.user.openhosting.com>
Message-ID: <458BDAEC.7000503@jgassociates.ca>

Graham Dumpleton wrote:
> On 22/12/2006, at 11:47 AM, Jeff Hinrichs - DM&T wrote:
> 
>> John Udell blogged today about django and mod_python.  However the
>> question he poses is pertinent to mod_python and projects that depend
>> on mp like TG and Pylons, et al.
>>
>> ...
>>
>> I know that there are a few hosts that specialize in python based apps
>> but what can be done to make mp a must have like php and ruby?  What
>> can be done technically to make mp a no-brainer decision for most web
>> hosting companies.  Are there really security or resource utilization
>> issues that can't be over come?  Maybe the next big mp focus should be
>> on what can be done to make administering/securing a shared mp install
>> so that it is easier for shared hosts to implement it.
> 
> Parts of what you are talking about are things I have been thinking
> about quite a lot lately, which is, possible future directions for the
> concept of using Python in conjunction with Apache. Note though that I
> don't mention mod_python when I say this. :-)
> 
> The first thing one has to realise about people who want to use Python
> for web programming is that the majority don't actually care what
> mod_python is. Where they do want to use Apache, they see mod_python
> merely as a convenient hopping off point. As such, you have frameworks
> like Django, TurboGears, CherryPy and applications like Trac (latest)
> and MoinMoin, which don't actually use any of the handlers supplied with
> mod_python, nor its capabilities to do automatic module reloading,
> forms, session handling etc.
> 
> All these frameworks and applications want to do is specify a handler
> to be called for the response phase, set up the Python module path and
> possibly pass in a few options. When their handler is called, they then
> promptly hide all the mod_python bits under a layer of code and the
> user doesn't see them.
> 
> Further, where in the past these frameworks and applications built
> separate adaptors for the various different web servers, they now all
> tend to support WSGI. What one thus needs is not mod_python, but
> mod_wsgi. The code needed to implement such a module would actually
> be quite little in comparison to mod_python. In fact, none of the pure
> Python code components of mod_python would even be required.
> 
> So what would a mod_wsgi need to contain. The first thing it needs to
> be able to do is handle initialisation of Python and creation of interpreter
> instances. This code would actually be much simpler than in mod_python
> as mod_python has to do extra stuff like initialising global mutexes for
> session management, trigger imports of special internal modules when
> each interpreter instances is created, as well as importing special user
> modules as well. In mod_wsgi it wouldn't need to do any of that.
> 
> The next big difference with mod_wsgi in comparison to mod_python
> would be that except to trigger its own initialisation, the only handler
> phase it needs to hook and process is the response phase. Because it is
> not hooking all phases, it would be much more efficient than mod_python
> as it wouldn't be doing all that extra work for each request of checking
> for mod_python handlers for each phase.
> 
> Next area where mod_python does more work than it needs to is with all
> its configuration and options directives. Ie., PythonPath, PythonAutoReload,
> PythonDebug, PythonOption. Apache already has a SetEnv directive which
> can be used to set key value pairs with the values being placed into the
> req.subprocess_env table object. Since other parts of Apache already deal
> with doing that, mod_wsgi could just use SetEnv as the means of getting
> any configuration information, with the req.subprocess_env table also
> becoming the basis of the WSGI dictionary which gets passed through
> to any WSGI handler. Even the definition of what the WSGI handler module
> and function is, could be specified in this way and as such mod_wsgi would
> not need to define any directives at all, thus eliminating the need for code
> to handle them.
> 
> To then setup mod_wsgi to be used, in the Apache configuration you would
> have:
> 
>   <Location /some/path>
>   SetHandler mod_wsgi
>   SetEnv mod_wsgi.application module::application
>   SetEnv mod_wsgi.interpreter myapplication
>   SetEnv mod_wsgi.directory /directory/containing/module
>   </Location>
> 
> Now in mod_python when a handler needs to be executed, a call is first
> made into a dispatch function implemented in Python and it is that which
> sets up all the environment and then calls the handler function. With
> WSGI though, because the API for calling a WSGI application is so simple
> it would be better to implement the dispatch in C code. Thus the C code
> of mod_wsgi would import the application module and make the calls into
> the application as appropriate. By doing this you totally eliminate the
> need for any separate Python code modules needing to be installed and
> thus get rid of one of the setup problems with mod_python of not being
> able to find those extra Python modules. This should make it much easier
> to install.
> 
> One issue with web hosting environments especially is being able to
> separate different users web applications. Although one can't have each
> application run as a separate user, one can at least separate them into
> distinct interpreters. To specify the interpreter one would use SetEnv
> to set mod_wsgi.interpreter. Where you have a lot of applications
> though, you might not want to have to manually set these. Although
> mod_rewrite is itself a bit heavy weight, one of the things it can do is
> set the same variables as SetEnv sets based on stuff which appears in
> the URL. Thus one could with a mod_rewrite rule automatically specify
> the interpreter name based on the request URL. This is something that
> mod_python can't even do because it uses a directive for setting the
> name of the interpreter.
> 
> One final issue with interpreters is the initialisation of Python and
> the creation of the interpreter instances. In this area, mod_wsgi could
> run in one of two modes. The first would be where mod_wsgi is the only
> Python module installed, ie. mod_python is not installed. In this
> situation it could perform the initialisation of Python all itself and
> also handle creation of interpreter instances. The second mode would be
> where it detects that mod_python is already loaded. In this situation it
> would simply use the hooks added in mod_python 3.3 for using
> mod_python's machinery for accessing Python interpreter instances. By
> being able to operate in these two modes, the module could either exist
> by itself, but if needed, also co-operate with mod_python. Thus, just
> because you run mod_wsgi doesn't mean that you couldn't also run
> mod_wsgi at the same time.
> 
> If you have followed what I am talking about, and understand mod_python
> internals and Apache a bit, you will see that the code for mod_wsgi
> would actually be quite simple and because it doesn't have to wrap any
> Apache data structures in Python equivalents, it should be quite easy to
> create a version which is capable of being compiled on Apache 1.3, 2.0
> or 2.2.
> 
> As I mention above, most people don't need the full mod_python
> and thus this would allow all these higher level applications to still
> be able to be run (under WSGI) even though they are using an older
> version of Apache. This would also make it much simpler for web hosting
> services as well, as they can say that they support anything which is
> WSGI compliant.
> 
> Now, the idea of mod_wsgi is only one part of what I have been thinking
> about for future directions of Python with Apache. It is late now though so
> I'll go into my other ideas in the coming days, that is if I don't now decide
> to go and finish my mod_wsgi which I already have the basis for in place
> and thus get diverted. :-)
> 
> Comments on this part of my plans for global domination most welcome.

Wow, what a good idea. (both mod_wsgi and world domination). Mod_wsgi 
could pretty much be the mod_python-lite that Anthony spoke of earlier. 
Could mod_python be made forward compatible with mod_wsgi? That way a 
could site start with mod_wsgi but then easily switch to mod_python if 
its additional features where required.

This is definitely something would should talk about in the new year.

Jim



From sdavis2 at mail.nih.gov  Fri Dec 22 08:37:15 2006
From: sdavis2 at mail.nih.gov (Sean Davis)
Date: Fri Dec 22 08:37:40 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <458BDAEC.7000503@jgassociates.ca>
References: <1166789545.3712@dscpl.user.openhosting.com>
	<458BDAEC.7000503@jgassociates.ca>
Message-ID: <200612220837.15168.sdavis2@mail.nih.gov>

On Friday 22 December 2006 08:17, Jim Gallacher wrote:
> Graham Dumpleton wrote:
> > On 22/12/2006, at 11:47 AM, Jeff Hinrichs - DM&T wrote:
> >> John Udell blogged today about django and mod_python.  However the
> >> question he poses is pertinent to mod_python and projects that depend
> >> on mp like TG and Pylons, et al.
> >>
> >> ...
> >>
> >> I know that there are a few hosts that specialize in python based apps
> >> but what can be done to make mp a must have like php and ruby?  What
> >> can be done technically to make mp a no-brainer decision for most web
> >> hosting companies.  Are there really security or resource utilization
> >> issues that can't be over come?  Maybe the next big mp focus should be
> >> on what can be done to make administering/securing a shared mp install
> >> so that it is easier for shared hosts to implement it.
> >
> > Parts of what you are talking about are things I have been thinking
> > about quite a lot lately, which is, possible future directions for the
> > concept of using Python in conjunction with Apache. Note though that I
> > don't mention mod_python when I say this. :-)
> >
> > The first thing one has to realise about people who want to use Python
> > for web programming is that the majority don't actually care what
> > mod_python is. Where they do want to use Apache, they see mod_python
> > merely as a convenient hopping off point. As such, you have frameworks
> > like Django, TurboGears, CherryPy and applications like Trac (latest)
> > and MoinMoin, which don't actually use any of the handlers supplied with
> > mod_python, nor its capabilities to do automatic module reloading,
> > forms, session handling etc.
> >
> > All these frameworks and applications want to do is specify a handler
> > to be called for the response phase, set up the Python module path and
> > possibly pass in a few options. When their handler is called, they then
> > promptly hide all the mod_python bits under a layer of code and the
> > user doesn't see them.
> >
> > Further, where in the past these frameworks and applications built
> > separate adaptors for the various different web servers, they now all
> > tend to support WSGI. What one thus needs is not mod_python, but
> > mod_wsgi. The code needed to implement such a module would actually
> > be quite little in comparison to mod_python. In fact, none of the pure
> > Python code components of mod_python would even be required.
> >
> > So what would a mod_wsgi need to contain. The first thing it needs to
> > be able to do is handle initialisation of Python and creation of
> > interpreter instances. This code would actually be much simpler than in
> > mod_python as mod_python has to do extra stuff like initialising global
> > mutexes for session management, trigger imports of special internal
> > modules when each interpreter instances is created, as well as importing
> > special user modules as well. In mod_wsgi it wouldn't need to do any of
> > that.
> >
> > The next big difference with mod_wsgi in comparison to mod_python
> > would be that except to trigger its own initialisation, the only handler
> > phase it needs to hook and process is the response phase. Because it is
> > not hooking all phases, it would be much more efficient than mod_python
> > as it wouldn't be doing all that extra work for each request of checking
> > for mod_python handlers for each phase.
> >
> > Next area where mod_python does more work than it needs to is with all
> > its configuration and options directives. Ie., PythonPath,
> > PythonAutoReload, PythonDebug, PythonOption. Apache already has a SetEnv
> > directive which can be used to set key value pairs with the values being
> > placed into the req.subprocess_env table object. Since other parts of
> > Apache already deal with doing that, mod_wsgi could just use SetEnv as
> > the means of getting any configuration information, with the
> > req.subprocess_env table also becoming the basis of the WSGI dictionary
> > which gets passed through to any WSGI handler. Even the definition of
> > what the WSGI handler module and function is, could be specified in this
> > way and as such mod_wsgi would not need to define any directives at all,
> > thus eliminating the need for code to handle them.
> >
> > To then setup mod_wsgi to be used, in the Apache configuration you would
> > have:
> >
> >   <Location /some/path>
> >   SetHandler mod_wsgi
> >   SetEnv mod_wsgi.application module::application
> >   SetEnv mod_wsgi.interpreter myapplication
> >   SetEnv mod_wsgi.directory /directory/containing/module
> >   </Location>
> >
> > Now in mod_python when a handler needs to be executed, a call is first
> > made into a dispatch function implemented in Python and it is that which
> > sets up all the environment and then calls the handler function. With
> > WSGI though, because the API for calling a WSGI application is so simple
> > it would be better to implement the dispatch in C code. Thus the C code
> > of mod_wsgi would import the application module and make the calls into
> > the application as appropriate. By doing this you totally eliminate the
> > need for any separate Python code modules needing to be installed and
> > thus get rid of one of the setup problems with mod_python of not being
> > able to find those extra Python modules. This should make it much easier
> > to install.
> >
> > One issue with web hosting environments especially is being able to
> > separate different users web applications. Although one can't have each
> > application run as a separate user, one can at least separate them into
> > distinct interpreters. To specify the interpreter one would use SetEnv
> > to set mod_wsgi.interpreter. Where you have a lot of applications
> > though, you might not want to have to manually set these. Although
> > mod_rewrite is itself a bit heavy weight, one of the things it can do is
> > set the same variables as SetEnv sets based on stuff which appears in
> > the URL. Thus one could with a mod_rewrite rule automatically specify
> > the interpreter name based on the request URL. This is something that
> > mod_python can't even do because it uses a directive for setting the
> > name of the interpreter.
> >
> > One final issue with interpreters is the initialisation of Python and
> > the creation of the interpreter instances. In this area, mod_wsgi could
> > run in one of two modes. The first would be where mod_wsgi is the only
> > Python module installed, ie. mod_python is not installed. In this
> > situation it could perform the initialisation of Python all itself and
> > also handle creation of interpreter instances. The second mode would be
> > where it detects that mod_python is already loaded. In this situation it
> > would simply use the hooks added in mod_python 3.3 for using
> > mod_python's machinery for accessing Python interpreter instances. By
> > being able to operate in these two modes, the module could either exist
> > by itself, but if needed, also co-operate with mod_python. Thus, just
> > because you run mod_wsgi doesn't mean that you couldn't also run
> > mod_wsgi at the same time.
> >
> > If you have followed what I am talking about, and understand mod_python
> > internals and Apache a bit, you will see that the code for mod_wsgi
> > would actually be quite simple and because it doesn't have to wrap any
> > Apache data structures in Python equivalents, it should be quite easy to
> > create a version which is capable of being compiled on Apache 1.3, 2.0
> > or 2.2.
> >
> > As I mention above, most people don't need the full mod_python
> > and thus this would allow all these higher level applications to still
> > be able to be run (under WSGI) even though they are using an older
> > version of Apache. This would also make it much simpler for web hosting
> > services as well, as they can say that they support anything which is
> > WSGI compliant.
> >
> > Now, the idea of mod_wsgi is only one part of what I have been thinking
> > about for future directions of Python with Apache. It is late now though
> > so I'll go into my other ideas in the coming days, that is if I don't now
> > decide to go and finish my mod_wsgi which I already have the basis for in
> > place and thus get diverted. :-)
> >
> > Comments on this part of my plans for global domination most welcome.
>
> Wow, what a good idea. (both mod_wsgi and world domination). Mod_wsgi
> could pretty much be the mod_python-lite that Anthony spoke of earlier.
> Could mod_python be made forward compatible with mod_wsgi? That way a
> could site start with mod_wsgi but then easily switch to mod_python if
> its additional features where required.

Or something in between mod_wsgi and the current mod_python, approaching 
something like mod_perl that tries to do less than mod_python, but still 
maintains hooks to the other phases of the request cycle.  (I have VERY 
LITTLE understandings of the innards of apache, so I don't know what such a 
solution might entail).

Sean
From steve at holdenweb.com  Fri Dec 22 03:50:31 2006
From: steve at holdenweb.com (Steve Holden)
Date: Fri Dec 22 08:51:45 2006
Subject: [mod_python] Re: Indentation problems with psp
In-Reply-To: <1166789863.5998@dscpl.user.openhosting.com>
References: <1166789863.5998@dscpl.user.openhosting.com>
Message-ID: <458B9C57.1030405@holdenweb.com>

Graham Dumpleton wrote:
> Read:
> 
>   http://www.modpython.org/pipermail/mod_python/2005-May/018102.html
> 
> for starters and then search back through other past mailing lists posts by
> putting "PSP indenting" in the search box on the mod_python web site.
> 
> Sorry for the short response, it is late here and I need my sleep.
> 
What Graham would probably have said if his plans for world domination 
via mod_wsgi had left him time is that basically each PSP "bracket pair" 
of <% ... %> is expected to stand alone. It therefore isn't quite as 
versatile as experience with (for example) Microsoft's ASP might have 
led you to believe.

This isn't to say that PSP can't do everything you want it to, merely 
that you need to adjust a slightly different programming paradigm to use 
it successfully. One way yo proceed is to build a list of snippets and 
then when you are finished emit the joined list as a string.

regards
  Steve
-- 
Steve Holden       +44 150 684 7255  +1 800 494 3119
Holden Web LLC/Ltd          http://www.holdenweb.com
Skype: holdenweb       http://holdenweb.blogspot.com
Recent Ramblings     http://del.icio.us/steve.holden

From martijn at xs4us.nu  Fri Dec 22 09:15:35 2006
From: martijn at xs4us.nu (Martijn Moeling)
Date: Fri Dec 22 09:15:42 2006
Subject: [mod_python] focus on shared hosting?
Message-ID: <B6C73A5E30565245BB6D32B5F5DF7A520BEE02@sense.emmastraat.pijnacker>

One of the main advantages of mod_python in my eyes is that there is
"full control" over what is actually done after a request is received. I
know I use Apache a some sort of Intelligent socket interface to port
80, but as you look at my previous post today you'll understand that is
exactly what I need.

I see a lot of people be perfectly happy with PSP, (I have briefly
looked into it and never ever made one PSP page). For those people basic
mod_python support would be excellent.

I my eyes it is important to find out why people use stuff, why do they
need mod_python, I find that a lot of people buy a lorry of tools to
drill a hole in the wall for hanging up a painting.

The original reason for using tools in my eyes is that we do stuff using
http where http was never designed for (and HTML), next is that all the
browsers act differently, and most important off all we want to show how
good we are. Also everybody is writing stuff which never ever becomes
finished, Microsoft is a big forerunner of introducing new stuff nobody
needs but is purely a matter of "look what we achieved to get your
money" 90% of the windows users are (ms)office users (Word, Excell,
outlook and IE) and why the hell do they need to upgrade to Vista when
W2k (win9X/ME was not an OS) did that job perfectly years ago. I have a
PIII-800 (Celeron) with 384Mb laptop in my living room for surfing the
net, reading email end do some private office work. Using W2K, office
2000, and Firefox and an Xterminal emulator (IE still installed). I have
thought many times about buying a new one, but cannot see why.

I am a programmer for 30 years now and way back in time we had computers
with 1kb of memory, in that time people HAD to use the tools and methods
which fitted into memory, nowadays everybody is installing everything
without thinking, using parts of this and parts of that.

So when brainstorming about mod_whatever it would be nice to see what is
needed by people to get their stuff done, in combination with what the
effects are when they want to host stuff. So called design criteria.
Isn't it the time to start make things easier instead of making things
more complex by supporting everything possible? mod_wsgi could be the
solution for a lot of users to get things hosted, but I still see
trouble when it comes to the site-packages in the python configuration.
My application requires mod_python and MySQLdb in addition to the
standard python installation and everything to backup is in the MySQL
database. If I can get MySLQdb out of the site-package directory (I have
not looked into that yet)  and into my app dir, just mod_python and
access to .htaccess would be sufficient.

One of a few arguments I have heard about mod_python in a shared hosting
environment is that it leaks memory and that it therefore cannot be
supported, at the other hand Admins have to be afraid of customers
writing code on a shared server anyway especially when it is open source
based since everybody tends to use the latest beta version for
functionality, some open source projects are in beta all the time...and
no guaranties 

I am heavily testing mod_python 3.3.0b to go live with it in January,
something I should not do, I know, but this is a non commercial project
on my own server in rented rack space running this application only, So
I accept the risk in this case.

Martijn





-----Oorspronkelijk bericht-----
Van: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] Namens Graham Dumpleton
Verzonden: Friday, December 22, 2006 1:12 PM
Aan: Jeff Hinrichs - DM&T
CC: mod_python@modpython.org
Onderwerp: Re: [mod_python] focus on shared hosting?

On 22/12/2006, at 11:47 AM, Jeff Hinrichs - DM&T wrote:

> John Udell blogged today about django and mod_python.  However the
> question he poses is pertinent to mod_python and projects that depend
> on mp like TG and Pylons, et al.
>
> ...
>
> I know that there are a few hosts that specialize in python based apps
> but what can be done to make mp a must have like php and ruby?  What
> can be done technically to make mp a no-brainer decision for most web
> hosting companies.  Are there really security or resource utilization
> issues that can't be over come?  Maybe the next big mp focus should be
> on what can be done to make administering/securing a shared mp install
> so that it is easier for shared hosts to implement it.

Parts of what you are talking about are things I have been thinking
about quite a lot lately, which is, possible future directions for the
concept of using Python in conjunction with Apache. Note though that I
don't mention mod_python when I say this. :-)

The first thing one has to realise about people who want to use Python
for web programming is that the majority don't actually care what
mod_python is. Where they do want to use Apache, they see mod_python
merely as a convenient hopping off point. As such, you have frameworks
like Django, TurboGears, CherryPy and applications like Trac (latest)
and MoinMoin, which don't actually use any of the handlers supplied with
mod_python, nor its capabilities to do automatic module reloading,
forms, session handling etc.

All these frameworks and applications want to do is specify a handler
to be called for the response phase, set up the Python module path and
possibly pass in a few options. When their handler is called, they then
promptly hide all the mod_python bits under a layer of code and the
user doesn't see them.

Further, where in the past these frameworks and applications built
separate adaptors for the various different web servers, they now all
tend to support WSGI. What one thus needs is not mod_python, but
mod_wsgi. The code needed to implement such a module would actually
be quite little in comparison to mod_python. In fact, none of the pure
Python code components of mod_python would even be required.

So what would a mod_wsgi need to contain. The first thing it needs to
be able to do is handle initialisation of Python and creation of
interpreter
instances. This code would actually be much simpler than in mod_python
as mod_python has to do extra stuff like initialising global mutexes for
session management, trigger imports of special internal modules when
each interpreter instances is created, as well as importing special user
modules as well. In mod_wsgi it wouldn't need to do any of that.

The next big difference with mod_wsgi in comparison to mod_python
would be that except to trigger its own initialisation, the only handler
phase it needs to hook and process is the response phase. Because it is
not hooking all phases, it would be much more efficient than mod_python
as it wouldn't be doing all that extra work for each request of checking
for mod_python handlers for each phase.

Next area where mod_python does more work than it needs to is with all
its configuration and options directives. Ie., PythonPath,
PythonAutoReload,
PythonDebug, PythonOption. Apache already has a SetEnv directive which
can be used to set key value pairs with the values being placed into the
req.subprocess_env table object. Since other parts of Apache already
deal
with doing that, mod_wsgi could just use SetEnv as the means of getting
any configuration information, with the req.subprocess_env table also
becoming the basis of the WSGI dictionary which gets passed through
to any WSGI handler. Even the definition of what the WSGI handler module
and function is, could be specified in this way and as such mod_wsgi
would
not need to define any directives at all, thus eliminating the need for
code
to handle them.

To then setup mod_wsgi to be used, in the Apache configuration you would
have:

  <Location /some/path>
  SetHandler mod_wsgi
  SetEnv mod_wsgi.application module::application
  SetEnv mod_wsgi.interpreter myapplication
  SetEnv mod_wsgi.directory /directory/containing/module
  </Location>

Now in mod_python when a handler needs to be executed, a call is first
made into a dispatch function implemented in Python and it is that which
sets up all the environment and then calls the handler function. With
WSGI though, because the API for calling a WSGI application is so simple
it would be better to implement the dispatch in C code. Thus the C code
of mod_wsgi would import the application module and make the calls into
the application as appropriate. By doing this you totally eliminate the
need for any separate Python code modules needing to be installed and
thus get rid of one of the setup problems with mod_python of not being
able to find those extra Python modules. This should make it much easier
to install.

One issue with web hosting environments especially is being able to
separate different users web applications. Although one can't have each
application run as a separate user, one can at least separate them into
distinct interpreters. To specify the interpreter one would use SetEnv
to set mod_wsgi.interpreter. Where you have a lot of applications
though, you might not want to have to manually set these. Although
mod_rewrite is itself a bit heavy weight, one of the things it can do is
set the same variables as SetEnv sets based on stuff which appears in
the URL. Thus one could with a mod_rewrite rule automatically specify
the interpreter name based on the request URL. This is something that
mod_python can't even do because it uses a directive for setting the
name of the interpreter.

One final issue with interpreters is the initialisation of Python and
the creation of the interpreter instances. In this area, mod_wsgi could
run in one of two modes. The first would be where mod_wsgi is the only
Python module installed, ie. mod_python is not installed. In this
situation it could perform the initialisation of Python all itself and
also handle creation of interpreter instances. The second mode would be
where it detects that mod_python is already loaded. In this situation it
would simply use the hooks added in mod_python 3.3 for using
mod_python's machinery for accessing Python interpreter instances. By
being able to operate in these two modes, the module could either exist
by itself, but if needed, also co-operate with mod_python. Thus, just
because you run mod_wsgi doesn't mean that you couldn't also run
mod_wsgi at the same time.

If you have followed what I am talking about, and understand mod_python
internals and Apache a bit, you will see that the code for mod_wsgi
would actually be quite simple and because it doesn't have to wrap any
Apache data structures in Python equivalents, it should be quite easy to
create a version which is capable of being compiled on Apache 1.3, 2.0
or 2.2.

As I mention above, most people don't need the full mod_python
and thus this would allow all these higher level applications to still
be able to be run (under WSGI) even though they are using an older
version of Apache. This would also make it much simpler for web hosting
services as well, as they can say that they support anything which is
WSGI compliant.

Now, the idea of mod_wsgi is only one part of what I have been thinking
about for future directions of Python with Apache. It is late now though
so
I'll go into my other ideas in the coming days, that is if I don't now
decide
to go and finish my mod_wsgi which I already have the basis for in place
and thus get diverted. :-)

Comments on this part of my plans for global domination most welcome.

Graham

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From jpg at jgassociates.ca  Fri Dec 22 09:17:10 2006
From: jpg at jgassociates.ca (Jim Gallacher)
Date: Fri Dec 22 09:16:41 2006
Subject: [mod_python] Protecting Image-Directory's with PythonAccessHandler
In-Reply-To: <20061221223718.2fc4a594@rita.prakti.org>
References: <20061221223718.2fc4a594@rita.prakti.org>
Message-ID: <458BE8E6.5020608@jgassociates.ca>

Marcus Werner wrote:
> Hi everyone,
> 
> I'm working on a Debian-Stable Box with mod_python 2.7.10 and Python
> 2.3 (yes I know its both 'stale', but I've got no choice) and I would
> like to know _how_ I can protect an images-directory with an 
> PythonAccessHandler together with my application-/session-based
> authentification. A bonus would be If I could decide access to specific
> images bases on user-permissions. 
> 
> I know this is a tricky problem, and in PHP you would have to place the
> images somewhere inaccessible from the web and stream them through php
> to the client, after checking the credentials. If we assume mod_php is
> tuned to serve this fast the performance should be fair, but there is
> still a small performance-loss because the image is streamed
> through the PHP-Interpreter.
> 
> Now mod_python seems to dodge this elegantly by introducing the
> AccessHandler, but so far I haven't been able to produce
> something like this, since the documentation regarding those special
> Handler is really sparse.
> 
> If you want to attract more user you really need some examples
> regarding things wich are impossible, difficult or perfomance-costly 
> in other languages/frameworks.

Yes, but if we had more users we'd just get more demands for better 
documentation. ;)

> Especially for those Python*Handlers, you need _way_more_ examples, so
> it's obvious why,where and when to use those Handlers. They are a huge
> bonus, but regarding the documentation they haven't received the
> attention they deserve.
> 
> I'm going to hold a 30-minutes presentation on mod_python 3 Weeks
> from now during a seminar about scripting-languages for Web-Engineering
> and  I would like to show at least _one_ convincing example why and
> where to use those _special_ handlers. So far I don't know what to tell
> my fellow students about thist part of mod_python. Afaik it seems like
> I'm the first guy ever doing a presentation about mod_python.

The documentation is an acknowledged weakness. Writing *good* 
documentation takes time, which is a resource we seem to be lacking 
right now. I definitely want to create a document which explains the 
apache processing phases. I may even try to throw together an 
rum-and-eggnog fueled document over the holidays. :)

> I'm going to set up a more recent version of mod_python on a private
> box tonight so if you have a solution/small example wich works on a more
> recent version of mod_python: fire away. 

Using the AccessHandler is dead easy. (Note that I've never used 
mod_python 2.x so I have no idea how well this will work there. 
Furthermore I'm using 3.3.0b.)

Stick the following in the directory you want to protect:

.htaccess
---------
PythonAccessHandler foo


foo.py
------
"""Restricts access to files with txt file extension"""

from mod_python import apache
import os

def accesshandler(req):
     req.log_error('accesshandler called for %s' % req.filename)
     if os.path.splitext(req.filename)[1] == '.txt':
         return apache.OK
     else:
         return apache.HTTP_FORBIDDEN


If you want to restrict access based on user credentials, you really 
should do it with PythonAuthzHandler. The authorization phase happens 
after the access phase and the authentication phase.

Unfortunately I need to speed out the door so I can't offer any further 
help right now. My presence on the mailing list will be spotty over the 
next couple of days.

Jim
From mrlobster99 at gmail.com  Fri Dec 22 17:20:37 2006
From: mrlobster99 at gmail.com (Erik Thompson)
Date: Fri Dec 22 17:20:42 2006
Subject: [mod_python] Indentation problems with psp
In-Reply-To: <d64a3340612220329m34cc3000i70455f4fa8353019@mail.gmail.com>
References: <d64a3340612220329m34cc3000i70455f4fa8353019@mail.gmail.com>
Message-ID: <58d7d2590612221420k6320b4bamde883820e42ac677@mail.gmail.com>

>
> <%
> if os.path.exists("boroughs.txt"):
>         #Start indentation
>         %><select name="Borough"><%
>
>         for item in sorted:
>                 #start indentation
>                 %><option value="<%= item%>"> <%= item%>-<%=
> lookup[item]%>
> <%
> #End if statement
> %>
>

I think you just need to bring the <% down a line:
<%
if os.path.exists("boroughs.txt"):
        #Start indentation
        %><select name="Borough">
<%
        for item in sorted:
                #start indentation
                %><option value="<%= item%>"> <%= item%>-<%= lookup[item]%>
<%
#End if statement
%>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061222/d2823517/attachment.html
From anthonybaby at gmail.com  Fri Dec 22 17:37:31 2006
From: anthonybaby at gmail.com (Anthony)
Date: Fri Dec 22 17:37:36 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <458BDAEC.7000503@jgassociates.ca>
References: <1166789545.3712@dscpl.user.openhosting.com>
	<458BDAEC.7000503@jgassociates.ca>
Message-ID: <9ade3b000612221437x6f991483q5ec1d7af36d13b96@mail.gmail.com>

> > Comments on this part of my plans for global domination most welcome.

Just watched Vincent Price and Frankie Avalon in "Dr. Goldfoot" As for
global domination, it's probably best not to rely on an army of gold
bikini-clad robotic women.

> Wow, what a good idea. (both mod_wsgi and world domination). Mod_wsgi
> could pretty much be the mod_python-lite that Anthony spoke of earlier.
> Could mod_python be made forward compatible with mod_wsgi? That way a
> could site start with mod_wsgi but then easily switch to mod_python if
> its additional features where required.

I agree. mod_wsgi is something I could really use right now, and I
think it could be that mod_python lite I've wanted. I haven't needed
the full feature set of mod_python in a while now, and I bet what most
people asking for mod_python on shared hosts want is just a better
model for using python than CGI or FastCGI. Speaking of which, if any
of you have gotten python on FastCGI and Apache (shared host,
.htaccess), I'd appreciate a follow-up in email explaining how you did
it.

Anthony
From mrlobster99 at gmail.com  Fri Dec 22 17:43:45 2006
From: mrlobster99 at gmail.com (Erik Thompson)
Date: Fri Dec 22 17:43:53 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <458B6A07.80700@jgassociates.ca>
References: <5aaed53f0612211647j56a3d943o7ad0d015195e2700@mail.gmail.com>
	<9ade3b000612211747s2cdd7c9cp42b1e26286d06b5a@mail.gmail.com>
	<458B6A07.80700@jgassociates.ca>
Message-ID: <58d7d2590612221443t383ec6f8yc5adc816663e8157@mail.gmail.com>

I've come to accept that the sweet spot for mod_python is somewhat
> higher up the food chain from cheap shared hosting. Mod_python will come
> into it's own as server virtualization becomes the rule for website
> hosting.
>


I'm finding this to be true.  Unable to afford a dedicated server or find
any support among the cheapest shared servers I've pretty much settled on
trying a virtual dedicated server.  This isn't meant to be an advertisement
but  $30/month U.S. at GoDaddy is probably cheap enough for much of the
mainstream developers to handle especially since it supposedly comes with
full control to host multiple website, etc.  The only problem is that
setting it up may be a challenge but a screencast could help with that as
well.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061222/e37fd429/attachment.html
From nferrier at tapsellferrier.co.uk  Fri Dec 22 17:58:50 2006
From: nferrier at tapsellferrier.co.uk (Nic James Ferrier)
Date: Fri Dec 22 18:00:40 2006
Subject: robot women (was Re: [mod_python] focus on shared hosting?)
In-Reply-To: <9ade3b000612221437x6f991483q5ec1d7af36d13b96@mail.gmail.com>
	(Anthony's message of "Fri\, 22 Dec 2006 15\:37\:31 -0700")
References: <1166789545.3712@dscpl.user.openhosting.com>
	<458BDAEC.7000503@jgassociates.ca>
	<9ade3b000612221437x6f991483q5ec1d7af36d13b96@mail.gmail.com>
Message-ID: <874prnh711.fsf_-_@tapsellferrier.co.uk>

Anthony <anthonybaby@gmail.com> writes:

>> > Comments on this part of my plans for global domination most welcome.
>
> Just watched Vincent Price and Frankie Avalon in "Dr. Goldfoot" As for
> global domination, it's probably best not to rely on an army of gold
> bikini-clad robotic women.

I was gonna use silver. Do you think that would be better?

-- 
Nic Ferrier
http://www.tapsellferrier.co.uk   for all your tapsell ferrier needs
From clodoaldo.pinto.neto at gmail.com  Fri Dec 22 18:11:18 2006
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo)
Date: Fri Dec 22 18:11:20 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <58d7d2590612221443t383ec6f8yc5adc816663e8157@mail.gmail.com>
References: <5aaed53f0612211647j56a3d943o7ad0d015195e2700@mail.gmail.com>
	<9ade3b000612211747s2cdd7c9cp42b1e26286d06b5a@mail.gmail.com>
	<458B6A07.80700@jgassociates.ca>
	<58d7d2590612221443t383ec6f8yc5adc816663e8157@mail.gmail.com>
Message-ID: <a595de7a0612221511w1113b33dhaddac2239e2cd265@mail.gmail.com>

2006/12/22, Erik Thompson <mrlobster99@gmail.com>:
>
>
>
> > I've come to accept that the sweet spot for mod_python is somewhat
> > higher up the food chain from cheap shared hosting. Mod_python will come
> > into it's own as server virtualization becomes the rule for website
> hosting.
> >

I don't see virtual hosts becoming the rule. Most of the shared host
users are in a shared host not only for the price but mainly for the
administrationless environment. They want one click install of forums,
CMSs, blogs, wikis, etc.

If we are talking about world domination it is necessary that mod_X be
installed by default by the shared host admins. Only then Python web
applications will have a chance against PHP applications. Otherwise
web Python will continue to be a niche tool comprised of Python
programmers with server administration expertise.

>
>
> I'm finding this to be true.  Unable to afford a dedicated server or find
> any support among the cheapest shared servers I've pretty much settled on
> trying a virtual dedicated server.  This isn't meant to be an advertisement
> but  $30/month U.S. at GoDaddy is probably cheap enough for much of the
> mainstream developers to handle especially since it supposedly comes with
> full control to host multiple website, etc.  The only problem is that
> setting it up may be a challenge but a screencast could help with that as
> well.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>


-- 
Clodoaldo Pinto Neto
From anthonybaby at gmail.com  Fri Dec 22 18:15:41 2006
From: anthonybaby at gmail.com (Anthony)
Date: Fri Dec 22 18:15:45 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <B6C73A5E30565245BB6D32B5F5DF7A520BEE02@sense.emmastraat.pijnacker>
References: <B6C73A5E30565245BB6D32B5F5DF7A520BEE02@sense.emmastraat.pijnacker>
Message-ID: <9ade3b000612221515ufc805a1y84062d7ec174ef9b@mail.gmail.com>

 > I my eyes it is important to find out why people use stuff, why do they
> need mod_python, I find that a lot of people buy a lorry of tools to
> drill a hole in the wall for hanging up a painting.

Certainly. I think a well constructed advocacy site with screencasts
and shiny 3D icons could help filter out people who only think they
need mod_python and direct them to other projects. To be honest, I'm
not sure I *need* mod_python. I'd be happy with python over FastCGI on
Apache.

I believe that most shared hosting consumers that desire mod_python
just want python with the performance of mod_php rather than CGI.
Mod_python, by being associated with Apache and by not requiring
additional software layers like Django, seems like the least complex
choice. I know this is how I became initially attracted to it. I think
this particular crowd can be very happy running python CGI for most
things. It's generally available, although not always advertised.
However, CGI is unfashionable and "slow". *shrugs* In all my python
CGI code, I've found the bottleneck to be the poor design choices I
make at 4 am.

Anthony
From anthonybaby at gmail.com  Fri Dec 22 18:16:59 2006
From: anthonybaby at gmail.com (Anthony)
Date: Fri Dec 22 18:17:02 2006
Subject: robot women (was Re: [mod_python] focus on shared hosting?)
In-Reply-To: <874prnh711.fsf_-_@tapsellferrier.co.uk>
References: <1166789545.3712@dscpl.user.openhosting.com>
	<458BDAEC.7000503@jgassociates.ca>
	<9ade3b000612221437x6f991483q5ec1d7af36d13b96@mail.gmail.com>
	<874prnh711.fsf_-_@tapsellferrier.co.uk>
Message-ID: <9ade3b000612221516x7443994ci3eb52b8a0fda24a2@mail.gmail.com>

On 12/22/06, Nic James Ferrier <nferrier@tapsellferrier.co.uk> wrote:
> Anthony <anthonybaby@gmail.com> writes:
>
> >> > Comments on this part of my plans for global domination most welcome.
> >
> > Just watched Vincent Price and Frankie Avalon in "Dr. Goldfoot" As for
> > global domination, it's probably best not to rely on an army of gold
> > bikini-clad robotic women.
>
> I was gonna use silver. Do you think that would be better?
>

Yes. Yes, I do. Very much.
From jeffh at dundeemt.com  Fri Dec 22 19:15:48 2006
From: jeffh at dundeemt.com (Jeff Hinrichs - DM&T)
Date: Fri Dec 22 19:15:53 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <58d7d2590612221443t383ec6f8yc5adc816663e8157@mail.gmail.com>
References: <5aaed53f0612211647j56a3d943o7ad0d015195e2700@mail.gmail.com>
	<9ade3b000612211747s2cdd7c9cp42b1e26286d06b5a@mail.gmail.com>
	<458B6A07.80700@jgassociates.ca>
	<58d7d2590612221443t383ec6f8yc5adc816663e8157@mail.gmail.com>
Message-ID: <5aaed53f0612221615h1b4715f7ld1fd81b5b65cca09@mail.gmail.com>

> > I've come to accept that the sweet spot for mod_python is somewhat
> > higher up the food chain from cheap shared hosting. Mod_python will come
> > into it's own as server virtualization becomes the rule for website
> hosting.
> >
>
>
> I'm finding this to be true.  Unable to afford a dedicated server or find
> any support among the cheapest shared servers I've pretty much settled on
> trying a virtual dedicated server.  This isn't meant to be an advertisement
> but  $30/month U.S. at GoDaddy is probably cheap enough for much of the
> mainstream developers to handle especially since it supposedly comes with
> full control to host multiple website, etc.  The only problem is that
> setting it up may be a challenge but a screencast could help with that as
> well.

That is part of the issue that needs to be addressed.  Python is an
excellent tool for web development.  However, there is a chicken and
egg problem.  Developers won't use it if it's not an option on their
shared host, and those hosts won't implement it until there are enough
people asking for it.  Even with virtual hosts -- someone has to admin
it, and most will use it as their own shared host for their clients.
And they will have the same needs, they might not even be real
developers -- right now, writing an app like wordpress in python is
not competitive with with wordpress and php. (not it terms of
development but distribution) php is everywhere - non-developers are
using it via a control panel to install php applications like
wordpress.  I want python webapps(TG, Django, Pylons, et al) to be
used/installed by the masses, currently they are only available to
people who know how to develop python apps and are also sysadmin
qualified.

Maybe Graham's idea is the way to go. mod_wsgi -- I do know that if I
had to bet on who could/would do it, I'd put my money on the
mod_python developers.  I can't think of anyone else who has more
experience or knowledge on the internals and architecture of that
layer.  If the chicken and egg conundrum is to be resolved in a timely
fashion and joe and susie blogger are going to be able to install my
hypothetical pythonpress blog app on their BigName shared hosting
company site we need developers like Graham, Jim and the rest of the
mp devs to help get us there.
From jeffh at dundeemt.com  Fri Dec 22 19:38:15 2006
From: jeffh at dundeemt.com (Jeff Hinrichs - DM&T)
Date: Fri Dec 22 19:38:20 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <9ade3b000612221515ufc805a1y84062d7ec174ef9b@mail.gmail.com>
References: <B6C73A5E30565245BB6D32B5F5DF7A520BEE02@sense.emmastraat.pijnacker>
	<9ade3b000612221515ufc805a1y84062d7ec174ef9b@mail.gmail.com>
Message-ID: <5aaed53f0612221638p74e1d411qf11a36b2a457d66d@mail.gmail.com>

> Certainly. I think a well constructed advocacy site with screencasts
> and shiny 3D icons could help filter out people who only think they
> need mod_python and direct them to other projects. To be honest, I'm
> not sure I *need* mod_python. I'd be happy with python over FastCGI on
> Apache.
I don't want this discussion to get side tracked on the screencast
issue. John Udell is a big proponent of them and I included it as a
part of the quote for completeness.  The other part of the the quote -
distribution/installation is the part I am most interested in.  The
screencasts and other shiny marketing bobbles will come after that.

> I believe that most shared hosting consumers that desire mod_python
> just want python with the performance of mod_php rather than CGI.
> Mod_python, by being associated with Apache and by not requiring
> additional software layers like Django, seems like the least complex
> choice. I know this is how I became initially attracted to it. I think
> this particular crowd can be very happy running python CGI for most
> things. It's generally available, although not always advertised.
> However, CGI is unfashionable and "slow". *shrugs* In all my python
> CGI code, I've found the bottleneck to be the poor design choices I
> make at 4 am.

I believe that in the future, most consumers will be as interested in
what their blogging software is written in as they are currently
knowledgeable about what language their word processor is written in.
From nferrier at tapsellferrier.co.uk  Fri Dec 22 20:06:06 2006
From: nferrier at tapsellferrier.co.uk (Nic James Ferrier)
Date: Fri Dec 22 20:10:44 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <5aaed53f0612221638p74e1d411qf11a36b2a457d66d@mail.gmail.com>
	(Jeff Hinrichs's message of "Fri\, 22 Dec 2006 18\:38\:15 -0600")
References: <B6C73A5E30565245BB6D32B5F5DF7A520BEE02@sense.emmastraat.pijnacker>
	<9ade3b000612221515ufc805a1y84062d7ec174ef9b@mail.gmail.com>
	<5aaed53f0612221638p74e1d411qf11a36b2a457d66d@mail.gmail.com>
Message-ID: <87hcvn1kw1.fsf@tapsellferrier.co.uk>

"Jeff Hinrichs - DM&T" <jeffh@dundeemt.com> writes:

> I believe that in the future, most consumers will be as interested in
> what their blogging software is written in as they are currently
> knowledgeable about what language their word processor is written
> in.

Lisp.

(Sorry. Couldn't resist).

-- 
Nic Ferrier
http://www.tapsellferrier.co.uk   for all your tapsell ferrier needs
From export at hope.cz  Sat Dec 23 07:44:39 2006
From: export at hope.cz (export@hope.cz)
Date: Sat Dec 23 07:44:54 2006
Subject: [mod_python] Can mod_python help ?
Message-ID: <458D32C7.18893.104D9B5C@export.hope.cz>

I need to upload huge files  ( about 100MB) and using HTTP POST method does not seem  
very good.A file is uploaded into memory and I can not make any progress bar about 
uploading status.

I was thinking about FTP protocol but a users would have to use FTP client ( I think)

Can mod_python help somehow to solve any of these :
1: uploaded file is not loaded into memory but on hardisk
2. Is there a possibility to make any uploading progress bar ?
Thank you

Lad.
From grahamd at dscpl.com.au  Sat Dec 23 15:56:41 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec 23 15:56:50 2006
Subject: [mod_python] Can mod_python help ?
In-Reply-To: <458D32C7.18893.104D9B5C@export.hope.cz>
References: <458D32C7.18893.104D9B5C@export.hope.cz>
Message-ID: <579EDBF8-54D6-49FE-A210-0020A5C2BCA2@dscpl.com.au>


On 23/12/2006, at 11:44 PM, export@hope.cz wrote:

> I need to upload huge files  ( about 100MB) and using HTTP POST  
> method does not seem
> very good.A file is uploaded into memory and I can not make any  
> progress bar about
> uploading status.
>
> I was thinking about FTP protocol but a users would have to use FTP  
> client ( I think)
>
> Can mod_python help somehow to solve any of these :
> 1: uploaded file is not loaded into memory but on hardisk

Which version of mod_python are you using. If you are using 3.2.10 there
is support for hook functions to control how files are dealt with  
when uploaded.
See the documentation for details. If you search back through the  
mailing
list archive using search box on mod_python web site, you might find  
more
examples (not sure).

Note that this will not help you if you are using  
mod_python.publisher as you
don't have a means of intercepting form processing when using it.

Another option is to use an input filter to intercept large file  
uploads. Do a
search with Google for "mod_python tramline".

> 2. Is there a possibility to make any uploading progress bar ?

No. Search the mail archives for this topic as well, it just isn't  
practical.

Sorry for the curt response, Santa is coming and not much time. :-)

Graham
From benjamin.barker at gmail.com  Sat Dec 23 16:08:11 2006
From: benjamin.barker at gmail.com (Ben Barker)
Date: Sat Dec 23 16:08:14 2006
Subject: [mod_python] request object and forms - newbie question
Message-ID: <d64a3340612231308p2d1e2b63vcccca5ca27890eae@mail.gmail.com>

Hi,

I have just started using mod_python PSP. I have a couple of questions:

Firstly, I am trying to upload things from a form and then capture
those variables, either through GET or POST.

I have been looking for some examples of info on how to upload
variables, and also how to upload and save files, but have been making
slow progress. I know I have to use toe request object, but am not
getting anywhere fast. Any advice on a good source for a basic
tutorial?

Secondly, I have noticed there are many PSP packages out there as well
as that bundled with mod_python, such as spyce. This may not be the
place to get an unbiased oppinion, but what do people think of the
pros/cons of all these choices?

Cheers,

Ben
From grahamd at dscpl.com.au  Sat Dec 23 16:32:50 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec 23 16:33:00 2006
Subject: [mod_python] request object and forms - newbie question
In-Reply-To: <d64a3340612231308p2d1e2b63vcccca5ca27890eae@mail.gmail.com>
References: <d64a3340612231308p2d1e2b63vcccca5ca27890eae@mail.gmail.com>
Message-ID: <ECA85A64-7231-4682-A64C-68C3437DF338@dscpl.com.au>


On 24/12/2006, at 8:08 AM, Ben Barker wrote:

> Hi,
>
> I have just started using mod_python PSP. I have a couple of  
> questions:
>
> Firstly, I am trying to upload things from a form and then capture
> those variables, either through GET or POST.
>
> I have been looking for some examples of info on how to upload
> variables, and also how to upload and save files, but have been making
> slow progress. I know I have to use toe request object, but am not
> getting anywhere fast. Any advice on a good source for a basic
> tutorial?

Access the 'form' attribute from PSP pages. It is an instance of the
FieldStorage class (see documentation). It will give you access to
form fields for GET/POST forms.

Graham
From grahamd at dscpl.com.au  Sat Dec 23 18:28:05 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec 23 18:28:13 2006
Subject: [mod_python] request object and forms - newbie question
In-Reply-To: <d64a3340612231438s1706d2b0nbd3af9eb50d80c7@mail.gmail.com>
References: <d64a3340612231308p2d1e2b63vcccca5ca27890eae@mail.gmail.com>
	<ECA85A64-7231-4682-A64C-68C3437DF338@dscpl.com.au>
	<d64a3340612231438s1706d2b0nbd3af9eb50d80c7@mail.gmail.com>
Message-ID: <67E8D587-2C74-431B-850C-6A5A7FB95309@dscpl.com.au>

Please keep followups on the mailing list.

On 24/12/2006, at 9:38 AM, Ben Barker wrote:

> Thanks - I have just found that from the previous message. So "form"
> is instantiated whenever a .psp page is loaded then.

Sort of. The underlying PSP code only actually creates the instance of
FieldStorage if your code in the PSP page actually tries to reference
the 'form' variable. Thus, don't use the 'form' variable and it does not
create it.

> It seems then that the main difference between mpd_python psp and, for
> instance, spyce using mod_python is one of syntax alone?

But also that mod_python PSP is bound to mod_python whereas any
others are possibly more generic and can be used with a range of
frameworks.

> Ben
>
> On 23/12/06, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>>
>> On 24/12/2006, at 8:08 AM, Ben Barker wrote:
>>
>> > Hi,
>> >
>> > I have just started using mod_python PSP. I have a couple of
>> > questions:
>> >
>> > Firstly, I am trying to upload things from a form and then capture
>> > those variables, either through GET or POST.
>> >
>> > I have been looking for some examples of info on how to upload
>> > variables, and also how to upload and save files, but have been  
>> making
>> > slow progress. I know I have to use toe request object, but am not
>> > getting anywhere fast. Any advice on a good source for a basic
>> > tutorial?
>>
>> Access the 'form' attribute from PSP pages. It is an instance of the
>> FieldStorage class (see documentation). It will give you access to
>> form fields for GET/POST forms.
>>
>> Graham
>>
From maksim.kasimov at gmail.com  Mon Dec 25 08:32:16 2006
From: maksim.kasimov at gmail.com (Maksim Kasimov)
Date: Mon Dec 25 08:32:26 2006
Subject: [mod_python] Which hadler to use (was: Protecting Image-Directory's
	with PythonAccessHandler)
Message-ID: <a072330b0612250532l3ba1c81ai3696717ed9a1d418@mail.gmail.com>

Hi,

i have similar problem as was posted earlier "Protecting Image-Directory's
with PythonAccessHandler" - i need to allow users to load content (images,
audio, games ...)

doing that, i make the decision using information stored in Request object
(headers: User-Agent, client IP and some prameters in query string).

For example, url can looks like this:
         http://myserver.com/download.py/1234567890
         (1234567890 - is the key, that must be converted to an actual file
name if it's allowed)

all information that needed, available from all handlers - as i can see,
Request do not mutate when passing through all handlers (i might be wrong)

my question is: which handler to use( PythonInitHandler,
PythonPostReadRequestHandler, PythonHeaderParserHandler, PythonTransHandler
or PythonAccessHandler as was mentioned in "Protecting Image-Directory's
with PythonAccessHandler" thread) ?

Are there some rules on how to correctly choose Python*Handler (at least in
my case)?


thanks for any help.


mod_python-3.2.10
apache-2.0.59

-- 
Maksim Kasimov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061225/064d7113/attachment.html
From grisha at apache.org  Mon Dec 25 13:07:56 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Mon Dec 25 13:08:04 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.3.0b (Beta)
Message-ID: <20061225130442.O61514@grisha.dyndns.org>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the 3.3.0b (Beta) release of mod_python.

Version 3.3.0b of mod_python features several new functions and
attributes providing better access to apache internals, as well as
many bug fixes and various performance and security improvements. A
detailed description of the changes is available in Appendix A of the
mod_python manual, also available here

http://www.modpython.org/live/mod_python-3.3.0b/doc-html/app-changes-from-3.2.10.html

Beta releases are NOT considered stable and usually contain bugs.

This release is intended to solicit widespread testing of the code. We
strongly recommend that you try out your existing applications and
experiment with new features in a non-production environment using
this version and report any problems you may encounter so that they
can be addressed before the final release.

Preferred method of reporting problems is the mod_python user list
mod_python@modpython.org.

Mod_python 3.3.0b is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit http://www.modpython.org/

Regards,

The Apache mod_python team.


From rickzolun1 at charter.net  Mon Dec 25 16:03:31 2006
From: rickzolun1 at charter.net (rickzolun1@charter.net)
Date: Mon Dec 25 16:03:38 2006
Subject: [mod_python] (no subject)
Message-ID: <394677273.1167080611278.JavaMail.root@fepweb07>

I am trying to host a TuboGears app using Apache and mod_python on a machine running Windows XP SP2 Professional. Both the machines are on the same network (this is a test setup).

Version info: apache_2.2.3-win32-x86-no_ssl.msi, python-2.4.4.msi, mod_python-3.2.10.win32-py2.4-apache2.2.exe, mpcp-1.5.tar.gz, turbogears-1.0b2-py2.4

=========================================================
1. Installed Apache.

2. Installed python, turbogears, mod_python.
   Added     LoadModule python_module modules/mod_python.so
   to conf\httpd.conf. The mod_python example is working.

3. In order to host a simple TG application, I am using the bookmarker application which is in the TurboGears book (v1 from Chap 4).
   That works when I run it locally on my machine (also a WinXP SP2 box).
   Copied the application to "C:\Program Files\Apache Software Foundation\Apache2.2\htdocs"

4. Made the following changes to conf\httpd.conf

<Directory htdocs/bookmarker>
    AllowOverride FileInfo
</Directory>

5. Renamed start file to bookmarker_start.py. Created a file called .htaccess in bookmarker directory which has the following

SetHandler mod_python
PythonHandler mpcp
PythonDebug On
PythonOption cherrysetup bookmarker_start::mp_setup

6. Copied mpcp.py to the bookmarker directory (tried with installing it using  easy_install -Z mpcp, didn't help).

7. Changed bookmarker_start.py

#turbogears.start_server(Root())    <----------- commented this line and added the lines below.

def mp_setup():
    pass

if __name__ == "__main__":
    cherrypy.server.start()
=========================================================

I have restarted the Apache daemon multiple times (starts up fine). When I try to connect to http://machine/bookmarker, I get:

Mod_python error: "PythonHandler mpcp"

Traceback (most recent call last):

  File "C:\Python24\Lib\site-packages\mod_python\apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/bookmarker/mpcp.py", line 38, in handler
    setup(req, options)

  File "C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/bookmarker/mpcp.py", line 22, in setup
    cherrypy.server.start(init_only=True, server_class=None)

  File "c:\python24\lib\site-packages\CherryPy-2.2.1-py2.4.egg\cherrypy\_cpserver.py", line 72, in start
    Engine.start(self)

  File "c:\python24\lib\site-packages\CherryPy-2.2.1-py2.4.egg\cherrypy\_cpengine.py", line 91, in start
    autoreload.main(self._start, freq=freq)

  File "c:\python24\lib\site-packages\CherryPy-2.2.1-py2.4.egg\cherrypy\lib\autoreload.py", line 63, in main
    sys.exit(restart_with_reloader())

SystemExit: 1


Any idea what the problem is? Thanks for your help.
From export at hope.cz  Tue Dec 26 05:03:17 2006
From: export at hope.cz (export@hope.cz)
Date: Tue Dec 26 05:03:25 2006
Subject: [mod_python] Input filter
Message-ID: <45910175.13633.1007D31@export.hope.cz>

Can anyone give me an example of an Input filter?
I would like to check if a  file being uploaded is large and if so, I would like to write the file 
directly on hard disk not to memory.
Is Input filter the right choice?
Thank you for help
La
From grahamd at dscpl.com.au  Tue Dec 26 05:17:11 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Dec 26 05:17:37 2006
Subject: [mod_python] Input filter
In-Reply-To: <45910175.13633.1007D31@export.hope.cz>
References: <45910175.13633.1007D31@export.hope.cz>
Message-ID: <7419D409-D154-4F4D-8AD6-9CF5C8220994@dscpl.com.au>


On 26/12/2006, at 9:03 PM, export@hope.cz wrote:

> Can anyone give me an example of an Input filter?
> I would like to check if a  file being uploaded is large and if so,  
> I would like to write the file
> directly on hard disk not to memory.

Did you look at Tramline as I suggested the last time you asked about
file uploads?

Tramline is an input filter and also seeks to solve the problem of how
to handle large file uploads.

The URL for Tramline is:

   http://www.infrae.com/download/tramline

Just because Tramline is intended more for cases where Apache is
front ending a backend application doesn't mean it isn't a valid example
of input filters, you would just need to adapt the ideas to your needs.

Graham
From export at hope.cz  Tue Dec 26 06:14:22 2006
From: export at hope.cz (export@hope.cz)
Date: Tue Dec 26 06:14:30 2006
Subject: [mod_python] Input filter
In-Reply-To: <7419D409-D154-4F4D-8AD6-9CF5C8220994@dscpl.com.au>
References: <45910175.13633.1007D31@export.hope.cz>
Message-ID: <4591121E.19427.141910B@export.hope.cz>

Graham,
Thank you for your reply.
I downloaded Tramline,
but it says:
Requirements
------------
...
...

* You tend to need mod_proxy installed to proxy requests that come
  into Apache into your underlying appserver. It also works with
  mod_rewrite if you use proxying mode for this ([P]).
-----------------

Must I really have mod_proxy installed?

And how can  I check that the file being uploaded( via inputfilter)  is being saved on hard disk 
directly  and not to memory.
Thank you for help
La.


 


> > Can anyone give me an example of an Input filter?
> > I would like to check if a  file being uploaded is large and if so,  
> > I would like to write the file
> > directly on hard disk not to memory.
> 
> Did you look at Tramline as I suggested the last time you asked about
> file uploads?
> 
> Tramline is an input filter and also seeks to solve the problem of how
> to handle large file uploads.
> 
> The URL for Tramline is:
> 
>    http://www.infrae.com/download/tramline
> 
> Just because Tramline is intended more for cases where Apache is
> front ending a backend application doesn't mean it isn't a valid example
> of input filters, you would just need to adapt the ideas to your needs.
> 
> Graham


From grahamd at dscpl.com.au  Tue Dec 26 06:24:36 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Dec 26 06:24:48 2006
Subject: [mod_python] Input filter
In-Reply-To: <4591121E.19427.141910B@export.hope.cz>
References: <45910175.13633.1007D31@export.hope.cz>
	<4591121E.19427.141910B@export.hope.cz>
Message-ID: <4E5270A5-9D2A-4F04-9F22-695EC4F52A1B@dscpl.com.au>


On 26/12/2006, at 10:14 PM, export@hope.cz wrote:

> Graham,
> Thank you for your reply.
> I downloaded Tramline,
> but it says:
> Requirements
> ------------
> ...
> ...
>
> * You tend to need mod_proxy installed to proxy requests that come
>   into Apache into your underlying appserver. It also works with
>   mod_rewrite if you use proxying mode for this ([P]).
> -----------------
>
> Must I really have mod_proxy installed?
>
> And how can  I check that the file being uploaded( via  
> inputfilter)  is being saved on hard disk
> directly  and not to memory.

I specifically said in my email:

   Just because Tramline is intended more for cases where Apache is
   front ending a backend application doesn't mean it isn't a valid  
example
   of input filters, you would just need to adapt the ideas to your  
needs.

So I already said that it isn't exactly what you require. What you  
should do
is read through the code and the mod_python documentation and learn
from it so you can work out how you can customise it to do what you  
want.
You do not need to be using mod_proxy to use input filters, Tramline was
using it for specific reasons of its own.

The relevant part of the mod_python documentation is:

  http://www.modpython.org/live/current/doc-html/pyapi-filter.html

The example is for an output filter, but input filters work almost  
the same.

Also look back through past mailing lists post by using search box on  
the
mod_python web site. A slightly more complicated example of an output
filter is:

   http://www.modpython.org/pipermail/mod_python/2006-April/020870.html

Overall though, the Tramline code is the most complicated example of an
input filter I have seen.

Graham

>>> Can anyone give me an example of an Input filter?
>>> I would like to check if a  file being uploaded is large and if so,
>>> I would like to write the file
>>> directly on hard disk not to memory.
>>
>> Did you look at Tramline as I suggested the last time you asked about
>> file uploads?
>>
>> Tramline is an input filter and also seeks to solve the problem of  
>> how
>> to handle large file uploads.
>>
>> The URL for Tramline is:
>>
>>    http://www.infrae.com/download/tramline
>>
>> Just because Tramline is intended more for cases where Apache is
>> front ending a backend application doesn't mean it isn't a valid  
>> example
>> of input filters, you would just need to adapt the ideas to your  
>> needs.
>>
>> Graham
>
From maksim.kasimov at gmail.com  Tue Dec 26 07:27:56 2006
From: maksim.kasimov at gmail.com (Maksim Kasimov)
Date: Tue Dec 26 07:28:22 2006
Subject: [mod_python] Which hadler to use
Message-ID: <4591154C.9050404@gmail.com>

Hi,

i have similar problem as was posted earlier "Protecting Image-Directory's with PythonAccessHandler" - i need to allow users to load content (images, audio, games ...)

doing that, i make the decision using information stored in Request object (headers: User-Agent, client IP and some prameters in query string).

For example, url can looks like this:
          http://myserver.com/download.py/1234567890
          (1234567890 - is the key, that must be converted to an actual file name if it's allowed)

all information that needed, available from all handlers - as i can see, Request do not mutate when passing through all handlers (i might be wrong)

my question is: which handler to use( PythonInitHandler, PythonPostReadRequestHandler, PythonHeaderParserHandler, PythonTransHandler or PythonAccessHandler as was mentioned in "Protecting Image-Directory's with PythonAccessHandler" thread) ?

Are there some rules on how to correctly choose Python*Handler (at least in my case)?


thanks for any help.


mod_python-3.2.10
apache-2.0.59


-- 
Maksim Kasimov
From export at hope.cz  Tue Dec 26 07:40:29 2006
From: export at hope.cz (export@hope.cz)
Date: Tue Dec 26 07:40:46 2006
Subject: [mod_python] Input filter
In-Reply-To: <4E5270A5-9D2A-4F04-9F22-695EC4F52A1B@dscpl.com.au>
References: <4591121E.19427.141910B@export.hope.cz>
Message-ID: <4591264D.4904.19067E8@export.hope.cz>

An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061226/e9c6ad0f/attachment-0001.html
From detrafi at gmail.com  Tue Dec 26 13:44:08 2006
From: detrafi at gmail.com (Andrew Neilson)
Date: Tue Dec 26 13:44:13 2006
Subject: [mod_python] Issue with 'make'
Message-ID: <00a501c7291d$d4284db0$4508060a@hscs.virginia.edu>

Please excuse any dumb questions - I am new to this and have limited C experience.  Any help would be appreciated.  Here is what I have:

Apache:  Server version: IBM_HTTP_Server/6.0.2 Apache/2.0.47
              Server built:   Jun  4 2005 09:30:48

AIX 5.3.0.0

Mod Python 3.2.10

IBM C compiler, Version 8

When I run the 'make' I get all kinds of errors that I don't really understand.  I have managed to slog through a great deal, but this is a brick wall for me.

I have listed the output of running the configure script first, in case that has any clues.  The output from the make is below that.  I was running the compile with gcc (that was interesting, to say the least).  I am getting further with Version 8, though.  I tried running the configure with and without the python option and the results were the same when running the make.

Thanks

Andrew.





bash-2.05b# ./configure  --with-apxs=/usr/IBMIHS6/bin/apxs --with-python=/usr/local/bin/python2.1
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... 
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ANSI C... none needed
checking for ar... ar
checking for a BSD-compatible install... ./install-sh -c
checking whether make sets $(MAKE)... yes
checking for main in -lm... yes
checking for an ANSI C-conforming const... yes
checking your blood pressure... a bit high, but we can proceed
configure: checking whether apxs is available...
checking for --with-apxs... /usr/IBMIHS6/bin/apxs executable, good
checking Apache version... 2.0.47
checking for Apache libexec directory... /usr/IBMIHS6/modules
checking for Apache include directory... -I/usr/IBMIHS6/include
checking for --with-python... /usr/local/bin/python2.1
checking Python version... 2.1
checking Python install prefix... /usr/local
checking checking where python libraries are installed... /usr/local/lib/python2.1
checking what libraries Python was linked with... /usr/local/lib/python2.1/config/libpython2.1.a   -lpthread -ldl  -lthread   -lm           
checking linker flags used to link Python... 
checking where Python include files are... -I/usr/local/include/python2.1
checking for --with-python-src... no
checking for --with-mutex-dir... no
Using MUTEX_DIR /tmp
checking for --with-max-locks... no
Using 8 MAX_LOCKS.
checking for --with-flex... no
checking for flex... no
configure: WARNING: flex  not found
  You can generally ignore this warning unless you need to regenerate
  psp_parser.c from psp_parse.l.  If you do need regenerate psp_parser.c,
  use --with-flex to specify the location of flex.
  See the README for more information.
configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating Doc/Makefile
config.status: creating src/include/mod_python.h
config.status: creating test/testconf.py
config.status: creating dist/setup.py
config.status: creating dist/Makefile

bash-2.05b# make

Compiling for DSO.

        /usr/IBMIHS6/bin/apxs -I/home/python/mod_python-3.2.10/src/include -I/usr/IBMIHS6/include -I/usr/local/include/python2.1 -c mod_python.c _apachemodule.c requestobject.c tableobject.c util.c  serverobject.c connobject.c filterobject.c hlist.c hlistobject.c -Wl,-bE:Modules/python.exp -lld      -lm  /usr/local/lib/python2.1/config/libpython2.1.a   -lpthread -ldl  -lthread   -lm            
/usr/IBMIHS6/build/libtool --silent --mode=compile xlc_r -prefer-pic -O2 -qmaxmem=8192  -U__STR__ -D_THREAD_SAFE -D_USE_IRS -qHALT=E -I/usr/IBMIHS6/include  -I/usr/IBMIHS6/include   -I/usr/IBMIHS6/include  -I/home/python/mod_python-3.2.10/src/include -I/usr/IBMIHS6/include -I/usr/local/include/python2.1  -c -o mod_python.lo mod_python.c && touch mod_python.slo
"/home/python/mod_python-3.2.10/src/include/util.h", line 37.1: 1506-166 (S) Definition of function PyMemberDef requires parentheses.
"/home/python/mod_python-3.2.10/src/include/util.h", line 37.13: 1506-276 (S) Syntax error: possible missing '{'?
"/home/python/mod_python-3.2.10/src/include/hlist.h", line 42.7: 1506-273 (E) Missing type in declaration of hl_entry.
"/home/python/mod_python-3.2.10/src/include/hlist.h", line 44.5: 1506-166 (S) Definition of function hl_entry requires parentheses.
"/home/python/mod_python-3.2.10/src/include/hlist.h", line 44.14: 1506-276 (S) Syntax error: possible missing '{'?
"/home/python/mod_python-3.2.10/src/include/hlistobject.h", line 38.7: 1506-273 (E) Missing type in declaration of hlistobject.
"/home/python/mod_python-3.2.10/src/include/hlistobject.h", line 44.72: 1506-277 (S) Syntax error: possible missing ')' or ','?
"/home/python/mod_python-3.2.10/src/include/hlistobject.h", line 44.33: 1506-282 (S) The type of the parameters must be specified in a prototype.
"/home/python/mod_python-3.2.10/src/include/hlistobject.h", line 45.64: 1506-277 (S) Syntax error: possible missing ')' or ','?
"/home/python/mod_python-3.2.10/src/include/hlistobject.h", line 45.27: 1506-282 (S) The type of the parameters must be specified in a prototype.
"/home/python/mod_python-3.2.10/src/include/hlistobject.h", line 46.64: 1506-277 (S) Syntax error: possible missing ')' or ','?
"/home/python/mod_python-3.2.10/src/include/hlistobject.h", line 46.27: 1506-282 (S) The type of the parameters must be specified in a prototype.
"/home/python/mod_python-3.2.10/src/include/connobject.h", line 47.9: 1506-046 (S) Syntax error.
"/home/python/mod_python-3.2.10/src/include/requestobject.h", line 49.9: 1506-046 (S) Syntax error.
"/home/python/mod_python-3.2.10/src/include/mod_python.h", line 147.5: 1506-046 (S) Syntax error.
"mod_python.c", line 313.16: 1506-280 (W) Function argument assignment between types "void*" and "const char*" is not allowed.
"mod_python.c", line 427.9: 1506-068 (W) Operation between types "char*" and "const char*" is not allowed.
"mod_python.c", line 458.15: 1506-068 (W) Operation between types "char*" and "const char*" is not allowed.
"mod_python.c", line 540.15: 1506-068 (W) Operation between types "char*" and "const char*" is not allowed.
"mod_python.c", line 793.15: 1506-045 (S) Undeclared identifier hle.
"mod_python.c", line 882.15: 1506-045 (S) Undeclared identifier head.
"mod_python.c", line 885.23: 1506-275 (S) Unexpected text ')' encountered.
"mod_python.c", line 885.22: 1506-068 (S) Operation between types "int" and "void*" is not allowed.
"mod_python.c", line 885.72: 1506-277 (S) Syntax error: possible missing ')' or ','?
"mod_python.c", line 1074.39: 1506-046 (S) Syntax error.
"mod_python.c", line 1134.21: 1506-045 (S) Undeclared identifier hle.
"mod_python.c", line 1169.15: 1506-045 (S) Undeclared identifier hle.
"mod_python.c", line 1169.19: 1506-277 (S) Syntax error: possible missing ';' or ','?
"mod_python.c", line 1170.15: 1506-045 (S) Undeclared identifier dynhle.
"mod_python.c", line 1193.26: 1506-275 (S) Unexpected text ')' encountered.
"mod_python.c", line 1193.25: 1506-068 (S) Operation between types "int" and "void*" is not allowed.
"mod_python.c", line 1195.60: 1506-277 (S) Syntax error: possible missing ')' or ','?
"mod_python.c", line 1200.26: 1506-275 (S) Unexpected text ')' encountered.
"mod_python.c", line 1200.25: 1506-068 (S) Operation between types "int" and "void*" is not allowed.
"mod_python.c", line 1200.81: 1506-277 (S) Syntax error: possible missing ')' or ','?
"mod_python.c", line 1210.29: 1506-275 (S) Unexpected text ')' encountered.
"mod_python.c", line 1210.28: 1506-068 (S) Operation between types "int" and "void*" is not allowed.
apxs:Error: Command failed with rc=65536
.
make: 1254-004 The error code from the last command is 1.


Stop.
make: 1254-004 The error code from the last command is 2.


Stop.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061226/3277e559/attachment.html
From grahamd at dscpl.com.au  Tue Dec 26 17:09:29 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Dec 26 17:09:45 2006
Subject: [mod_python] Input filter
In-Reply-To: <4591264D.4904.19067E8@export.hope.cz>
References: <4591121E.19427.141910B@export.hope.cz>
	<4591264D.4904.19067E8@export.hope.cz>
Message-ID: <05B5ADCE-03CF-456A-8564-8F4D8C746414@dscpl.com.au>


On 26/12/2006, at 11:40 PM, export@hope.cz wrote:

> Graham,
> Thank you for your reply.
> I studied the example  at http://www.modpython.org/pipermail/ 
> mod_python/2006- April/020870.html
>
> Now I understand a little more.
>
> There an author uses
> streambuffer = filter.req.streambuffer
>
> So, I think that streambuffer is a method of request(req) object.
> Am I right?

No.

An important thing to know about filters is that the filter function can
be called more than once for the same request. That is, it processes  
data
in chunks.

Also, for each of those calls of the filter function, although the  
'filter' object
is a distinct object each time, the 'filter.req' object is the same  
for all requests.
As a consequence, it is possible to cache data within the  
'filter.req' object
so that it is available across invocations of the filter functions.

With that in mind, look at the code again and you will see that  
within the
'try' block the filter function tries to access  
'filter.req.streambuffer'. That will
fail on the first call of the filter function for the request as that  
attribute will
not exist. As a result, the 'except' block is run which initialises the
attribute with an instance of a StringIO object.

Having ensure that the attribute exists, on each call to the filter  
function
the chunks of data are added to the StringIO object instance until no  
more
data is found. At that time the data in the StringIO object is turned  
back
into one string and processed.

In output filter examples all processing of the data is done in  
memory. This
isn't want you want, so you would instead substitute  
'filter.req.streambuffer'
with an open file handle and thus write each chunk of data out to  
disk and
close the handle when done.

Writing out to disk was what Tramline was doing, with it then only  
passing
through a header to subsequent request handler containing a value to
identify the file on disk.

> Is there a description of  all request (req) methods.I could not  
> find it in mod_python doc.

Those you need to know about are:

   http://www.modpython.org/live/current/doc-html/pyapi-mprequest.html

If you can't find it in there, it probably isn't actually an  
attribute or method.

> Is there any advantage to use
> filter.req.streambuffer
> instead of
> filter.read()  ?

Read over description above and check code again. The 'filter.read()'  
method
is still used, with data being accumulated in  
'filter.req.streambuffer' as
described.

> Yet, after studing the filter examples,
> I do not understand how to verify that input data( from POST  
> request)  is written directly to disk and not loaded to RAM first  
> and only after  the whole file is uploaded then write to disk
>
> Can you please explain?

You really need to dig through the code examples and understand how
filters work. If you can work that out and see where the data is  
going you
should be able to work that out yourself. Obviously the output filter  
examples
you are using aren't even opening files on disk to write to so  
nothing can
be getting to disk in those.

BTW, did you investigate the other option I pointed out in the  
response to
your first email some time back. Ie., the file callbacks in  
FieldStorage class?
Or are you trying to use mod_python.publisher and was that not an
option?

The examples how to use FieldStorage so as to intercept uploaded files
and have them sent direct to disk can be found at:

   http://www.modpython.org/live/current/doc-html/pyapi-util-fstor- 
examples.html

BTW, are you the same person as 'Lad' posting on comp.lang.python
asking about this? I don't want to be answering in two different  
places if
you are the same person.

Graham

> Thank you
> La.
>
>
> >
> > I specifically said in my email:
> >
> >    Just because Tramline is intended more for cases where Apache is
> >    front ending a backend application doesn't mean it isn't a valid
> > example
> >    of input filters, you would just need to adapt the ideas to your
> > needs.
> >
> > So I already said that it isn't exactly what you require. What you
> > should do
> > is read through the code and the mod_python documentation and learn
> > from it so you can work out how you can customise it to do what you
> > want.
> > You do not need to be using mod_proxy to use input filters,  
> Tramline was
> > using it for specific reasons of its own.
> >
> > The relevant part of the mod_python documentation is:
> >
> >   http://www.modpython.org/live/current/doc-html/pyapi-filter.html
> >
> > The example is for an output filter, but input filters work almost
> > the same.
> >
> > Also look back through past mailing lists post by using search  
> box on
> > the
> > mod_python web site. A slightly more complicated example of an  
> output
> > filter is:
> >
> >    http://www.modpython.org/pipermail/mod_python/2006-April/ 
> 020870.html
> >
> > Overall though, the Tramline code is the most complicated example  
> of an
> > input filter I have seen.
> >
> > Graham
> >
> > >>> Can anyone give me an example of an Input filter?
> > >>> I would like to check if a  file being uploaded is large and  
> if so,
> > >>> I would like to write the file
> > >>> directly on hard disk not to memory.
> > >>
> > >> Did you look at Tramline as I suggested the last time you  
> asked about
> > >> file uploads?
> > >>
> > >> Tramline is an input filter and also seeks to solve the  
> problem of
> > >> how
> > >> to handle large file uploads.
> > >>
> > >> The URL for Tramline is:
> > >>
> > >>    http://www.infrae.com/download/tramline
> > >>
> > >> Just because Tramline is intended more for cases where Apache is
> > >> front ending a backend application doesn't mean it isn't a valid
> > >> example
> > >> of input filters, you would just need to adapt the ideas to your
> > >> needs.
> > >>
> > >> Graham
> > >
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061227/4d7da990/attachment-0001.html
From grahamd at dscpl.com.au  Tue Dec 26 17:20:03 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Dec 26 17:20:34 2006
Subject: [mod_python] Which hadler to use
In-Reply-To: <4591154C.9050404@gmail.com>
References: <4591154C.9050404@gmail.com>
Message-ID: <97D8177E-6223-4E9D-B362-3223BE6BD7FE@dscpl.com.au>


On 26/12/2006, at 11:27 PM, Maksim Kasimov wrote:

> Hi,
>
> i have similar problem as was posted earlier "Protecting Image- 
> Directory's with PythonAccessHandler" - i need to allow users to  
> load content (images, audio, games ...)
>
> doing that, i make the decision using information stored in Request  
> object (headers: User-Agent, client IP and some prameters in query  
> string).
>
> For example, url can looks like this:
>          http://myserver.com/download.py/1234567890
>          (1234567890 - is the key, that must be converted to an  
> actual file name if it's allowed)
>
> all information that needed, available from all handlers - as i can  
> see, Request do not mutate when passing through all handlers (i  
> might be wrong)

If mod_rewrite is being used, then certain request attributes can be  
modified
on the way through. :-)

> my question is: which handler to use( PythonInitHandler,  
> PythonPostReadRequestHandler, PythonHeaderParserHandler,  
> PythonTransHandler or PythonAccessHandler as was mentioned in  
> "Protecting Image-Directory's with PythonAccessHandler" thread) ?
>
> Are there some rules on how to correctly choose Python*Handler (at  
> least in my case)?

You can find a description of what the various Apache phases are for at:

   http://apache.hpi.uni-potsdam.de/document/ 
4_4Request_Response_Loop.html
   http://www.kuzbass.ru/docs/apache_c_mod_perl/24.htm#subhead_2

Even the mod_python documentation in the description of each handler
directive gives a brief statement about what each is for.

In short though use an access handler to control which client hosts can
access a resource. Use an authen handler to control whether a user can
access an area and use an authz handler to control where a user can
access specific resources.

The mapping of an ID in a URL can be performed by your response
handler with it using req.sendfile() to send an actual file which is  
stored
separately under some other name.

Graham
From grahamd at dscpl.com.au  Tue Dec 26 17:26:13 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Dec 26 17:26:24 2006
Subject: [mod_python] Issue with 'make'
In-Reply-To: <00a501c7291d$d4284db0$4508060a@hscs.virginia.edu>
References: <00a501c7291d$d4284db0$4508060a@hscs.virginia.edu>
Message-ID: <790C5620-FC3E-45F7-A640-69036DEF4ADE@dscpl.com.au>

AIX is a horrid platform and their C compiler isn't really much better.

What I would suggest first is to use mod_python 3.3.0b from:

   http://httpd.apache.org/modules/python-download.cgi

This has had various little changes made to eliminate compiler warnings
and errors from various compilers.

Second is to try and persist with GNU C compiler over IBM compiler as
we may at least then have a chance of trying to decode any errors and
come up with a solution. The IBM compiler can just be too pedantic.

The only issue though may be that if Apache was built with the IBM
compiler, all the libtool stuff within it may be set up for that  
compiler instead
of gcc. This may cause some grief. Thus try and work out if Apache was
built with the IBM compiler as well.

Graham

On 27/12/2006, at 5:44 AM, Andrew Neilson wrote:

> Please excuse any dumb questions - I am new to this and have  
> limited C experience.  Any help would be appreciated.  Here is what  
> I have:
>
> Apache:  Server version: IBM_HTTP_Server/6.0.2 Apache/2.0.47
>               Server built:   Jun  4 2005 09:30:48
>
> AIX 5.3.0.0
>
> Mod Python 3.2.10
>
> IBM C compiler, Version 8
>
> When I run the 'make' I get all kinds of errors that I don't really  
> understand.  I have managed to slog through a great deal, but this  
> is a brick wall for me.
>
> I have listed the output of running the configure script first, in  
> case that has any clues.  The output from the make is below that.   
> I was running the compile with gcc (that was interesting, to say  
> the least).  I am getting further with Version 8, though.  I tried  
> running the configure with and without the python option and the  
> results were the same when running the make.
>
> Thanks
>
> Andrew.
>
>
>
>
>
> bash-2.05b# ./configure  --with-apxs=/usr/IBMIHS6/bin/apxs --with- 
> python=/usr/local/bin/python2.1
> checking for gcc... gcc
> checking for C compiler default output file name... a.out
> checking whether the C compiler works... yes
> checking whether we are cross compiling... no
> checking for suffix of executables...
> checking for suffix of object files... o
> checking whether we are using the GNU C compiler... yes
> checking whether gcc accepts -g... yes
> checking for gcc option to accept ANSI C... none needed
> checking for ar... ar
> checking for a BSD-compatible install... ./install-sh -c
> checking whether make sets $(MAKE)... yes
> checking for main in -lm... yes
> checking for an ANSI C-conforming const... yes
> checking your blood pressure... a bit high, but we can proceed
> configure: checking whether apxs is available...
> checking for --with-apxs... /usr/IBMIHS6/bin/apxs executable, good
> checking Apache version... 2.0.47
> checking for Apache libexec directory... /usr/IBMIHS6/modules
> checking for Apache include directory... -I/usr/IBMIHS6/include
> checking for --with-python... /usr/local/bin/python2.1
> checking Python version... 2.1
> checking Python install prefix... /usr/local
> checking checking where python libraries are installed... /usr/ 
> local/lib/python2.1
> checking what libraries Python was linked with... /usr/local/lib/ 
> python2.1/config/libpython2.1.a   -lpthread -ldl  -lthread   -lm
> checking linker flags used to link Python...
> checking where Python include files are... -I/usr/local/include/ 
> python2.1
> checking for --with-python-src... no
> checking for --with-mutex-dir... no
> Using MUTEX_DIR /tmp
> checking for --with-max-locks... no
> Using 8 MAX_LOCKS.
> checking for --with-flex... no
> checking for flex... no
> configure: WARNING: flex  not found
>   You can generally ignore this warning unless you need to regenerate
>   psp_parser.c from psp_parse.l.  If you do need regenerate  
> psp_parser.c,
>   use --with-flex to specify the location of flex.
>   See the README for more information.
> configure: creating ./config.status
> config.status: creating Makefile
> config.status: creating src/Makefile
> config.status: creating Doc/Makefile
> config.status: creating src/include/mod_python.h
> config.status: creating test/testconf.py
> config.status: creating dist/setup.py
> config.status: creating dist/Makefile
> bash-2.05b# make
>
> Compiling for DSO.
>
>         /usr/IBMIHS6/bin/apxs -I/home/python/mod_python-3.2.10/src/ 
> include -I/usr/IBMIHS6/include -I/usr/local/include/python2.1 -c  
> mod_python.c _apachemodule.c requestobject.c tableobject.c util.c   
> serverobject.c connobject.c filterobject.c hlist.c hlistobject.c - 
> Wl,-bE:Modules/python.exp -lld      -lm  /usr/local/lib/python2.1/ 
> config/libpython2.1.a   -lpthread -ldl  -lthread   -lm
> /usr/IBMIHS6/build/libtool --silent --mode=compile xlc_r -prefer- 
> pic -O2 -qmaxmem=8192  -U__STR__ -D_THREAD_SAFE -D_USE_IRS -qHALT=E  
> -I/usr/IBMIHS6/include  -I/usr/IBMIHS6/include   -I/usr/IBMIHS6/ 
> include  -I/home/python/mod_python-3.2.10/src/include -I/usr/ 
> IBMIHS6/include -I/usr/local/include/python2.1  -c -o mod_python.lo  
> mod_python.c && touch mod_python.slo
> "/home/python/mod_python-3.2.10/src/include/util.h", line 37.1:  
> 1506-166 (S) Definition of function PyMemberDef requires parentheses.
> "/home/python/mod_python-3.2.10/src/include/util.h", line 37.13:  
> 1506-276 (S) Syntax error: possible missing '{'?
> "/home/python/mod_python-3.2.10/src/include/hlist.h", line 42.7:  
> 1506-273 (E) Missing type in declaration of hl_entry.
> "/home/python/mod_python-3.2.10/src/include/hlist.h", line 44.5:  
> 1506-166 (S) Definition of function hl_entry requires parentheses.
> "/home/python/mod_python-3.2.10/src/include/hlist.h", line 44.14:  
> 1506-276 (S) Syntax error: possible missing '{'?
> "/home/python/mod_python-3.2.10/src/include/hlistobject.h", line  
> 38.7: 1506-273 (E) Missing type in declaration of hlistobject.
> "/home/python/mod_python-3.2.10/src/include/hlistobject.h", line  
> 44.72: 1506-277 (S) Syntax error: possible missing ')' or ','?
> "/home/python/mod_python-3.2.10/src/include/hlistobject.h", line  
> 44.33: 1506-282 (S) The type of the parameters must be specified in  
> a prototype.
> "/home/python/mod_python-3.2.10/src/include/hlistobject.h", line  
> 45.64: 1506-277 (S) Syntax error: possible missing ')' or ','?
> "/home/python/mod_python-3.2.10/src/include/hlistobject.h", line  
> 45.27: 1506-282 (S) The type of the parameters must be specified in  
> a prototype.
> "/home/python/mod_python-3.2.10/src/include/hlistobject.h", line  
> 46.64: 1506-277 (S) Syntax error: possible missing ')' or ','?
> "/home/python/mod_python-3.2.10/src/include/hlistobject.h", line  
> 46.27: 1506-282 (S) The type of the parameters must be specified in  
> a prototype.
> "/home/python/mod_python-3.2.10/src/include/connobject.h", line  
> 47.9: 1506-046 (S) Syntax error.
> "/home/python/mod_python-3.2.10/src/include/requestobject.h", line  
> 49.9: 1506-046 (S) Syntax error.
> "/home/python/mod_python-3.2.10/src/include/mod_python.h", line  
> 147.5: 1506-046 (S) Syntax error.
> "mod_python.c", line 313.16: 1506-280 (W) Function argument  
> assignment between types "void*" and "const char*" is not allowed.
> "mod_python.c", line 427.9: 1506-068 (W) Operation between types  
> "char*" and "const char*" is not allowed.
> "mod_python.c", line 458.15: 1506-068 (W) Operation between types  
> "char*" and "const char*" is not allowed.
> "mod_python.c", line 540.15: 1506-068 (W) Operation between types  
> "char*" and "const char*" is not allowed.
> "mod_python.c", line 793.15: 1506-045 (S) Undeclared identifier hle.
> "mod_python.c", line 882.15: 1506-045 (S) Undeclared identifier head.
> "mod_python.c", line 885.23: 1506-275 (S) Unexpected text ')'  
> encountered.
> "mod_python.c", line 885.22: 1506-068 (S) Operation between types  
> "int" and "void*" is not allowed.
> "mod_python.c", line 885.72: 1506-277 (S) Syntax error: possible  
> missing ')' or ','?
> "mod_python.c", line 1074.39: 1506-046 (S) Syntax error.
> "mod_python.c", line 1134.21: 1506-045 (S) Undeclared identifier hle.
> "mod_python.c", line 1169.15: 1506-045 (S) Undeclared identifier hle.
> "mod_python.c", line 1169.19: 1506-277 (S) Syntax error: possible  
> missing ';' or ','?
> "mod_python.c", line 1170.15: 1506-045 (S) Undeclared identifier  
> dynhle.
> "mod_python.c", line 1193.26: 1506-275 (S) Unexpected text ')'  
> encountered.
> "mod_python.c", line 1193.25: 1506-068 (S) Operation between types  
> "int" and "void*" is not allowed.
> "mod_python.c", line 1195.60: 1506-277 (S) Syntax error: possible  
> missing ')' or ','?
> "mod_python.c", line 1200.26: 1506-275 (S) Unexpected text ')'  
> encountered.
> "mod_python.c", line 1200.25: 1506-068 (S) Operation between types  
> "int" and "void*" is not allowed.
> "mod_python.c", line 1200.81: 1506-277 (S) Syntax error: possible  
> missing ')' or ','?
> "mod_python.c", line 1210.29: 1506-275 (S) Unexpected text ')'  
> encountered.
> "mod_python.c", line 1210.28: 1506-068 (S) Operation between types  
> "int" and "void*" is not allowed.
> apxs:Error: Command failed with rc=65536
> .
> make: 1254-004 The error code from the last command is 1.
>
>
> Stop.
> make: 1254-004 The error code from the last command is 2.
>
>
> Stop.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061227/d22fc2d5/attachment.html
From banaouas.medialog at wanadoo.fr  Tue Dec 26 19:05:40 2006
From: banaouas.medialog at wanadoo.fr (m.banaouas)
Date: Tue Dec 26 19:01:19 2006
Subject: [mod_python] example of the PythonImport directive
Message-ID: <4591B8D4.9010109@wanadoo.fr>

hi,
Can anyone give me an example of how the PythonImport directive/code works?
I expect to use it to pre-open an sql database connexion, keep it opened 
and make it accessible from later requests.
thanks for any suggestion




From grahamd at dscpl.com.au  Tue Dec 26 19:45:46 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Dec 26 19:45:54 2006
Subject: [mod_python] example of the PythonImport directive
In-Reply-To: <4591B8D4.9010109@wanadoo.fr>
References: <4591B8D4.9010109@wanadoo.fr>
Message-ID: <C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>


On 27/12/2006, at 11:05 AM, m.banaouas wrote:

> hi,
> Can anyone give me an example of how the PythonImport directive/ 
> code works?
> I expect to use it to pre-open an sql database connexion, keep it  
> opened and make it accessible from later requests.
> thanks for any suggestion

Presuming you are using mod_python 3.3.0b, as per documentation at:

   http://www.modpython.org/live/mod_python-3.3.0b/doc-html/dir-other- 
pimp.html

use:

   PythonImport module::function interpreter_name

Change names as appropriate.

Do the database initialisation within function() inside the module,  
not at global
scope because if done at global scope and it fails and raises an  
exception it
will cause import of module to fail and only way around that is an  
Apache
restart.

By doing it within the function, although it may still fail, a  
handler which requires
the database stuff can always call the function still with it doing  
nothing if it did
previously work at time of PythonImport, otherwise it would do  
delayed database
initialisation at time of first request. If it still fails, handle  
can test for that and
return an appropriate error page.

Note that the module should not be a candidate for reloading if you  
are caching
data at global scope such as database connection pool, unless you  
have specifically
coded the module to be safe in the face of automatic module reloading.

If you aren't using 3.3.0b, although you might get something going by  
having it
done at global scope, it will not be reliable and also may suffer  
problems
because of old importer bugs.

Graham
From rickzolun1 at charter.net  Wed Dec 27 00:11:45 2006
From: rickzolun1 at charter.net (rickzolun1@charter.net)
Date: Wed Dec 27 00:11:49 2006
Subject: [mod_python] turbogears app deployment
Message-ID: <1815756143.1167196305322.JavaMail.root@fepweb02>

Hello:

I posted this message about issues I was having with deploying a very simple turbogears app using apache, modpython and mpcp, but haven't seen any responses.

http://www.modpython.org/pipermail/mod_python/2006-December/022866.html

1. I would really appreciate any thoughts or possible issues on the above.
2. Else, would somebody please send me a copy of their PROJECT_start.py file (which works when deployed!).

Thanks.
From grahamd at dscpl.com.au  Wed Dec 27 00:22:13 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 00:22:24 2006
Subject: [mod_python] turbogears app deployment
In-Reply-To: <1815756143.1167196305322.JavaMail.root@fepweb02>
References: <1815756143.1167196305322.JavaMail.root@fepweb02>
Message-ID: <F65AB6FC-A548-41DC-A33E-F452ED6A0637@dscpl.com.au>


On 27/12/2006, at 4:11 PM, <rickzolun1@charter.net> wrote:

> Hello:
>
> I posted this message about issues I was having with deploying a  
> very simple turbogears app using apache, modpython and mpcp, but  
> haven't seen any responses.
>
> http://www.modpython.org/pipermail/mod_python/2006-December/ 
> 022866.html
>
> 1. I would really appreciate any thoughts or possible issues on the  
> above.
> 2. Else, would somebody please send me a copy of their  
> PROJECT_start.py file (which works when deployed!).

Not many people around because of it being Christmas. But the short  
answer
is probably that no one knows. Since the problem seems to relate to  
something
within the CherryPy part of TurboGears and nothing strictly related  
to mod_python,
you may be better off asking on the TurboGears or CherryPy lists.

Graham
From grahamd at dscpl.com.au  Wed Dec 27 00:37:40 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 00:37:59 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <200612220837.15168.sdavis2@mail.nih.gov>
References: <1166789545.3712@dscpl.user.openhosting.com>
	<458BDAEC.7000503@jgassociates.ca>
	<200612220837.15168.sdavis2@mail.nih.gov>
Message-ID: <725933C1-5306-4F5C-9A3C-46AF031EFA1B@dscpl.com.au>

Some delayed comments on some old posts.

On 23/12/2006, at 12:37 AM, Sean Davis wrote:

> On Friday 22 December 2006 08:17, Jim Gallacher wrote:
>> Graham Dumpleton wrote:
>>> If you have followed what I am talking about, and understand  
>>> mod_python
>>> internals and Apache a bit, you will see that the code for mod_wsgi
>>> would actually be quite simple and because it doesn't have to  
>>> wrap any
>>> Apache data structures in Python equivalents, it should be quite  
>>> easy to
>>> create a version which is capable of being compiled on Apache  
>>> 1.3, 2.0
>>> or 2.2.
>>>
>>> As I mention above, most people don't need the full mod_python
>>> and thus this would allow all these higher level applications to  
>>> still
>>> be able to be run (under WSGI) even though they are using an older
>>> version of Apache. This would also make it much simpler for web  
>>> hosting
>>> services as well, as they can say that they support anything  
>>> which is
>>> WSGI compliant.
>>>
>>> Now, the idea of mod_wsgi is only one part of what I have been  
>>> thinking
>>> about for future directions of Python with Apache. It is late now  
>>> though
>>> so I'll go into my other ideas in the coming days, that is if I  
>>> don't now
>>> decide to go and finish my mod_wsgi which I already have the  
>>> basis for in
>>> place and thus get diverted. :-)
>>>
>>> Comments on this part of my plans for global domination most  
>>> welcome.
>>
>> Wow, what a good idea. (both mod_wsgi and world domination). Mod_wsgi
>> could pretty much be the mod_python-lite that Anthony spoke of  
>> earlier.
>> Could mod_python be made forward compatible with mod_wsgi? That way a
>> could site start with mod_wsgi but then easily switch to  
>> mod_python if
>> its additional features where required.

People run WSGI stuff on mod_python now, so upgrade path shouldn't be a
problem as the handler acting as the gateway would hide any differences
in underlying API which is effectively the whole point of WSGI, ie.,  
make it
run anywhere. That said, how one configures the handler for each may  
need
to be a bit different.

> Or something in between mod_wsgi and the current mod_python,  
> approaching
> something like mod_perl that tries to do less than mod_python, but  
> still
> maintains hooks to the other phases of the request cycle.  (I have  
> VERY
> LITTLE understandings of the innards of apache, so I don't know  
> what such a
> solution might entail).

It is interesting that you see mod_perl lying between mod_wsgi (a cut  
down
mod_python) and mod_python. In fact mod_perl allows a lot more to be  
done
than mod_python in that it exposes all the Apache innards and API to  
view.
With mod_python it is providing a restricted API that hides most of what
Apache provides and with the API not being similar at all. This  
approach and
the fact that the mod_python API on top of Apache is all explicitly  
coded is
quite limiting and makes maintenance and extension of mod_python a pain.

As to whether it is possible to implement a mod_perl like module for  
Python,
it is, it can work and it is simpler than one might expect as SWIG  
works quite
well for this. I already have basic bindings working as proof of  
concept.

Working out what to do with these new Python bindings for Apache is the
problem as it isn't necessarily straight forward to see how they  
might fit into
the future of mod_python. The main problem is that mod_python got there
first and has the market share. Even if one brought out a new module for
using Python with Apache which is technically a better and more  
efficient
solution, it is going to be hard to dislodge mod_python. Thus, having  
a new
module which requires you can't run the old one is probably impractical.

What are the solutions to this. The first is to acknowledge that  
mod_python got
there first and for any new module to recognise when mod_python is also
running and for the new module to utilise the Python interpreter  
initialisation
and creation code in mod_python through Apache hook functions. This is
to a degree now possible with mod_python 3.3.0b, however as I have  
learnt
since I added that ability to mod_python, the whole way mod_python  
handles
Python initialisation is far from optimal and would impose certain  
limitations
on any new module. Thus, for this to work effectively, the lower  
level layer of
mod_python needs to be reworked so that Python initialisation is done at
a more appropriate time and in a more modular way so that separate  
modules
can harness it better.

So, in this approach, if the new module is the only one loaded, it  
would do
all the initialisation itself. If mod_python is loaded as well, it  
would defer to
mod_python as the incumbent system. A problem with this though is  
that all
processing is then going to be weighed down with the checking done by
both modules in every phase. So, although it may be good in that it  
allows
both to run, it is unlikely that people would want to run both and so  
the
incumbent will probably still win.

The second option is to implement the new module as a broad enough
framework that the existing mod_python API could be implemented as a
personality on top of it. So, one looks at this other way around and  
says that
the new module is technically a much better solution and bless it as  
the way
forward. The API of mod_python could then be supported as just one of  
many
restrictive APIs on top of the new module, thus allowing support of  
older code
as well as allowing development of new personalities and extension  
modules
for Apache. As a further example, WSGI could be just another personality
on top of the new module.

With a new module which exposes better the Apache APIs, examples of
things you could do are:

   mod_authn_python - Implement an auth provider using Python code.

   mod_dav_python - Implement a dav provider using Python code.

One could also effectively break up the monolithic feature set of  
mod_python
into smaller bits, thereby allowing users to choose the bits they  
need thereby
limiting the overhead on the server of the bits they don't want. As  
such, one
could have:

   mod_python_handlers - Implementation of hooks for handler phases.

   mod_python_filters - Implementation of hooks for input/output  
filters.

   mod_include_python - Implementation of Python code in server side  
include.

Although technically this solution of implementing the existing  
mod_python
API on top of a new module may be a good way of doing it, I feel that  
it is
also doomed to failed, this time because of politics and the  
unwillingness of
people to accept that such a drastic change is even required. There  
are much
lesser issues related to mod_python already which decisions can't  
even be
made about, so hardly expect any agreement on any sort of future  
direction
for mod_python along these lines.

So, although I may have grand plans for world domination along these  
lines,
in practice I don't see it going very far, at least not under the  
umbrella of the
existing mod_python project. What exactly I will do with these ideas  
and the
code I have already developed I don't know yet. I see I have two  
choices at
present. These are to work on it myself out of my own site as a personal
project purely for curiosity value. The second is to get an Apache  
labs project
created for it and work on it there. In the latter, because it is  
under the
umbrella of the Apache Software Foundation, it doesn't rule out it  
someday
perhaps being adopted as an official front line project. Doing it as  
an Apache
labs project would also make it easier to migrate at least some of  
the ideas over
to mod_python so as to improve the existing code base.

BTW, to give you an idea of what overheads/inefficiencies exist in the
mod_python code base I have done some comparative tests between a
C coded handler module, a mod_python handler function and a handler
function implemented using Apache SWIG bindings on a more streamlined
Python module for Apache that doesn't rely on mod_python.

On my quite slow PowerPC laptop the results I get for a basic hello  
world
response handler written entirely in C code averages about 1250 requests
per second.

For my cut down Python module invoking Python handler which uses SWIG
bindings it averages about 800 requests per second.

With mod_python it averages about 500 requests per second.

Thus, it would appear that there is certainly some room for  
improvement with
mod_python at least and if nothing else, maybe what I am doing might  
help
to identify the problems it has and make it run better. Other than  
that, I don't
know at this point.

Graham





From fumanchu at amor.org  Wed Dec 27 00:43:05 2006
From: fumanchu at amor.org (Robert Brewer)
Date: Wed Dec 27 00:44:16 2006
Subject: [mod_python] turbogears app deployment
References: <1815756143.1167196305322.JavaMail.root@fepweb02>
Message-ID: <435DF58A933BA74397B42CDEB8145A86224CF1@ex9.hostedexchange.local>

rickzolun1@charter.net wrote:
> I posted this message about issues I was having
> with deploying a very simple turbogears app using
> apache, modpython and mpcp, but haven't seen any
> responses.
> http://www.modpython.org/pipermail/mod_python/2006-December/022866.html

You must turn off autoreload when using mod_python. See http://groups.google.com/group/cherrypy-users/browse_frm/thread/42ead6ebc67f8ca8?tvc=1


Robert Brewer
System Architect
Amor Ministries
fumanchu@amor.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061226/3104b8f6/attachment.html
From grahamd at dscpl.com.au  Wed Dec 27 01:09:07 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 01:09:20 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <9ade3b000612221515ufc805a1y84062d7ec174ef9b@mail.gmail.com>
References: <B6C73A5E30565245BB6D32B5F5DF7A520BEE02@sense.emmastraat.pijnacker>
	<9ade3b000612221515ufc805a1y84062d7ec174ef9b@mail.gmail.com>
Message-ID: <B50DA68F-C36C-430D-AF52-B176E35CE3D6@dscpl.com.au>


On 23/12/2006, at 10:15 AM, Anthony wrote:

> > I my eyes it is important to find out why people use stuff, why  
> do they
>> need mod_python, I find that a lot of people buy a lorry of tools to
>> drill a hole in the wall for hanging up a painting.
>
> Certainly. I think a well constructed advocacy site with screencasts
> and shiny 3D icons could help filter out people who only think they
> need mod_python and direct them to other projects. To be honest, I'm
> not sure I *need* mod_python. I'd be happy with python over FastCGI on
> Apache.
>
> I believe that most shared hosting consumers that desire mod_python
> just want python with the performance of mod_php rather than CGI.
> Mod_python, by being associated with Apache and by not requiring
> additional software layers like Django, seems like the least complex
> choice. I know this is how I became initially attracted to it. I think
> this particular crowd can be very happy running python CGI for most
> things. It's generally available, although not always advertised.
> However, CGI is unfashionable and "slow". *shrugs* In all my python
> CGI code, I've found the bottleneck to be the poor design choices I
> make at 4 am.

I'd certainly concur that more often than not it is the way a  
specific application
is coded that is the problem as opposed to some base level framework  
which
is written by people who appreciate that specific problem domain.

Anyway, as far as directing people to what is the most appropriate  
thing when
wanting to use Python with Apache, I personally would like to see  
changes
made to how we prepare documentation for mod_python and make it
available. I have raised these issues off list a number times with  
the appropriate
people but have never been able to get a response from the one person  
who
actually controls this presently. It has been quite frustrating and  
part of the
reason why I have all but given up trying to improve the mod_python
documentation to any large degree or contribute to the wiki. When I  
can be
bothered doing stuff, I do it on my own web site.

That said, I would like to see a new web site created which is under  
the umbrella
of the Apache Software Foundation. The current mod_python site isn't and
that has been an obstacle at times.

The new site I would like to see created is 'python.apache.org'. This  
would in
some measure mirror the existing 'perl.apache.org' web site which covers
mod_perl, however, I would like to see it go beyond just mod_python  
and be
at least a guide for other options that exist for using Python with  
Apache. Thus
it should also point out how using Python for CGI scripts is  
different to using
mod_python. It should also point out FastCGI and other similar solutions
involving long lived back end process where the Python code is  
actually run.

At the same time, I would like to see the existing mod_python  
documentation
moved from being done in LaTeX to being managed in a Wiki.  
Specifically I
would like to see it being done in the Apache Confluence wiki system.  
Note
it cannot be practically done in the Apache MoinMoin wiki as it  
doesn't have the
necessary controls in place to limit the ability to do updates to  
only approved
ASF committers. The export options for Confluence are much better  
anyway.

This documentation now being in Confluence could be periodically  
exported
on a more regular basis as HTML and incorporated under  
python.apache.org.
This would allow more frequent updates to the mod_python documentation
outside of actual release cycles.

As to the Apache MoinMoin wiki, this can still be used as the  
community site
for mod_python users where users can contribute articles and code  
examples.
Information could be taken from this other time and incorporated into  
the
Confluence wiki in polished form for use in the official mod_python  
documentation.

In effect this would turn the existing www.modpython.org site into a  
portal
which just points to the official ASF site for Python use in Apache.  
The user mailing
list could still stay at modpython.org, but the FAQ should move into  
the community
wiki.

So more ideas and plans, but again can't see a way to progress it. :-(

Graham
From banaouas.medialog at wanadoo.fr  Wed Dec 27 03:26:08 2006
From: banaouas.medialog at wanadoo.fr (m.banaouas)
Date: Wed Dec 27 03:19:30 2006
Subject: [mod_python] example of the PythonImport directive
In-Reply-To: <C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>
References: <4591B8D4.9010109@wanadoo.fr>
	<C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>
Message-ID: <45922E20.203@wanadoo.fr>

I just started to use mod_python (2 weeks) version 3.2.10.
I understand that I would switch to version 3.3 (yet beta).
Concerning PythonImport directive, it seems like it is not the only 
(best?) way to init database connexions.
Is there any other way to do it late, I mean just before first 
call/usage from requests?
thanks

 >
 > On 27/12/2006, at 11:05 AM, m.banaouas wrote:
 >
 >> hi,
 >> Can anyone give me an example of how the PythonImport directive/code 
works?
 >> I expect to use it to pre-open an sql database connexion, keep it 
opened and make it accessible from later requests.
 >> thanks for any suggestion
 >
 > Presuming you are using mod_python 3.3.0b, as per documentation at:
 >
 >   
http://www.modpython.org/live/mod_python-3.3.0b/doc-html/dir-other-pimp.html
 >
 > use:
 >
 >   PythonImport module::function interpreter_name
 >
 > Change names as appropriate.
 >
 > Do the database initialisation within function() inside the module, 
not at global
 > scope because if done at global scope and it fails and raises an 
exception it
 > will cause import of module to fail and only way around that is an Apache
 > restart.
 >
 > By doing it within the function, although it may still fail, a 
handler which requires
 > the database stuff can always call the function still with it doing 
nothing if it did
 > previously work at time of PythonImport, otherwise it would do 
delayed database
 > initialisation at time of first request. If it still fails, handle 
can test for that and
 > return an appropriate error page.
 >
 > Note that the module should not be a candidate for reloading if you 
are caching
 > data at global scope such as database connection pool, unless you 
have specifically
 > coded the module to be safe in the face of automatic module reloading.
 >
 > If you aren't using 3.3.0b, although you might get something going by 
having it
 > done at global scope, it will not be reliable and also may suffer 
problems
 > because of old importer bugs.
 >
 > Graham



From grahamd at dscpl.com.au  Wed Dec 27 03:48:13 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 03:48:23 2006
Subject: [mod_python] example of the PythonImport directive
In-Reply-To: <45922E20.203@wanadoo.fr>
References: <4591B8D4.9010109@wanadoo.fr>
	<C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>
	<45922E20.203@wanadoo.fr>
Message-ID: <6E635144-E271-46CC-A6EF-3741AAF9E367@dscpl.com.au>

To avoid having to do it in lots of different places, for example if  
using
mod_python.publisher, you can define a fixup handler which does it
for you. The one fixup handler will be invoked for every request in that
context. You could even cache a reference to the database connection
handle in the request object ready for the subsequent response handler
to use it.

Graham

On 27/12/2006, at 7:26 PM, m.banaouas wrote:

> I just started to use mod_python (2 weeks) version 3.2.10.
> I understand that I would switch to version 3.3 (yet beta).
> Concerning PythonImport directive, it seems like it is not the only  
> (best?) way to init database connexions.
> Is there any other way to do it late, I mean just before first call/ 
> usage from requests?
> thanks
>
> >
> > On 27/12/2006, at 11:05 AM, m.banaouas wrote:
> >
> >> hi,
> >> Can anyone give me an example of how the PythonImport directive/ 
> code works?
> >> I expect to use it to pre-open an sql database connexion, keep  
> it opened and make it accessible from later requests.
> >> thanks for any suggestion
> >
> > Presuming you are using mod_python 3.3.0b, as per documentation at:
> >
> >   http://www.modpython.org/live/mod_python-3.3.0b/doc-html/dir- 
> other-pimp.html
> >
> > use:
> >
> >   PythonImport module::function interpreter_name
> >
> > Change names as appropriate.
> >
> > Do the database initialisation within function() inside the  
> module, not at global
> > scope because if done at global scope and it fails and raises an  
> exception it
> > will cause import of module to fail and only way around that is  
> an Apache
> > restart.
> >
> > By doing it within the function, although it may still fail, a  
> handler which requires
> > the database stuff can always call the function still with it  
> doing nothing if it did
> > previously work at time of PythonImport, otherwise it would do  
> delayed database
> > initialisation at time of first request. If it still fails,  
> handle can test for that and
> > return an appropriate error page.
> >
> > Note that the module should not be a candidate for reloading if  
> you are caching
> > data at global scope such as database connection pool, unless you  
> have specifically
> > coded the module to be safe in the face of automatic module  
> reloading.
> >
> > If you aren't using 3.3.0b, although you might get something  
> going by having it
> > done at global scope, it will not be reliable and also may suffer  
> problems
> > because of old importer bugs.
> >
> > Graham
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From banaouas.medialog at wanadoo.fr  Wed Dec 27 04:20:48 2006
From: banaouas.medialog at wanadoo.fr (m.banaouas)
Date: Wed Dec 27 04:14:09 2006
Subject: [mod_python] example of the PythonImport directive
In-Reply-To: <6E635144-E271-46CC-A6EF-3741AAF9E367@dscpl.com.au>
References: <4591B8D4.9010109@wanadoo.fr>
	<C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>
	<45922E20.203@wanadoo.fr>
	<6E635144-E271-46CC-A6EF-3741AAF9E367@dscpl.com.au>
Message-ID: <45923AF0.6060901@wanadoo.fr>

The fixup handler is probably the more elegant way to handle database
connexion
I suppose that this connexion (or pool of such objects) will "survive"
(kept alive) between successive requests?
you suggest to cache them in the request object: do you mean like its
usually done with session id, added to all successif url or in hidden
field? or should I add their reference  in the request object during
fixup handler execution time?

from PythonHandler family, PythonInitHandler seems to be an other one 
appropriate for this job, is it ?

To avoid to me any mis-understanding, the long-live connexion object 
will reside as a global module variable ? may be that why "interpretter" 
is usually montionned in PythonImport" threads: the globals will survive 
because the python process is the same one and is never stoped by apache?


Graham Dumpleton a ?crit :
> To avoid having to do it in lots of different places, for example if 
> using
> mod_python.publisher, you can define a fixup handler which does it
> for you. The one fixup handler will be invoked for every request in that
> context. You could even cache a reference to the database connection
> handle in the request object ready for the subsequent response handler
> to use it.
>
> Graham
>
> On 27/12/2006, at 7:26 PM, m.banaouas wrote:
>


From grahamd at dscpl.com.au  Wed Dec 27 04:30:34 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 04:30:46 2006
Subject: [mod_python] example of the PythonImport directive
In-Reply-To: <45923AF0.6060901@wanadoo.fr>
References: <4591B8D4.9010109@wanadoo.fr>
	<C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>
	<45922E20.203@wanadoo.fr>
	<6E635144-E271-46CC-A6EF-3741AAF9E367@dscpl.com.au>
	<45923AF0.6060901@wanadoo.fr>
Message-ID: <9DDE0F31-1E6B-4BD3-AF62-B1367A1C024C@dscpl.com.au>


On 27/12/2006, at 8:20 PM, m.banaouas wrote:

> The fixup handler is probably the more elegant way to handle database
> connexion
> I suppose that this connexion (or pool of such objects) will "survive"
> (kept alive) between successive requests?

Provided it is stored in a global module variable somewhere and suitable
protection is implemented so as deal with module reloading if  
appropriate.

> you suggest to cache them in the request object: do you mean like its
> usually done with session id, added to all successif url or in hidden
> field? or should I add their reference  in the request object during
> fixup handler execution time?

The reference is added to the request object merely as a convenience so
the actual response handler doesn't itself have to go work out where to
get the database connection handle from. Thus:

   def fixuphandler(req):
     # check if database connection initialised and if not initialise it

     # cache a handle to database connection object in request object
     # so response handler can use it
     req.database = ...

     return apache.OK

Then later:

   def handler(req):
     database = req.database

     # do stuff with database

     return apache.OK

In other words, it localises a lot of the database imports potentially
to one place and you don't end up having it spread through all your
handlers as well.

> from PythonHandler family, PythonInitHandler seems to be an other  
> one appropriate for this job, is it ?

PythonInitHandler is broken and doesn't work as advertised. See:

   http://issues.apache.org/jira/browse/MODPYTHON-209

> To avoid to me any mis-understanding, the long-live connexion  
> object will reside as a global module variable ? may be that why  
> "interpretter" is usually montionned in PythonImport" threads: the  
> globals will survive because the python process is the same one and  
> is never stoped by apache?

Interpreter name has to be specified with PythonImport as at point that
that directive is processed is outside of any request so not possible to
automatically determine what interpreter instance to perform the import
for. Obviously you have to ensure it is the same as what any request
handlers use. By default it would need to be virtual host name, but  
could be
something else if using PythonInterpreter directive.

I might suggest though that you read:

   http://www.dscpl.com.au/wiki/ModPython/Articles/ 
TheProcessInterpreterModel

as your terminology suggest you might not quite understand the
relationship between process and interpreter instances.

Graham

> Graham Dumpleton a ?crit :
>> To avoid having to do it in lots of different places, for example  
>> if using
>> mod_python.publisher, you can define a fixup handler which does it
>> for you. The one fixup handler will be invoked for every request  
>> in that
>> context. You could even cache a reference to the database connection
>> handle in the request object ready for the subsequent response  
>> handler
>> to use it.
>>
>> Graham
>>
>> On 27/12/2006, at 7:26 PM, m.banaouas wrote:
>>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From banaouas.medialog at wanadoo.fr  Wed Dec 27 06:01:58 2006
From: banaouas.medialog at wanadoo.fr (m.banaouas)
Date: Wed Dec 27 05:55:20 2006
Subject: [mod_python] example of the PythonImport directive
In-Reply-To: <9DDE0F31-1E6B-4BD3-AF62-B1367A1C024C@dscpl.com.au>
References: <4591B8D4.9010109@wanadoo.fr>
	<C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>
	<45922E20.203@wanadoo.fr>
	<6E635144-E271-46CC-A6EF-3741AAF9E367@dscpl.com.au>
	<45923AF0.6060901@wanadoo.fr>
	<9DDE0F31-1E6B-4BD3-AF62-B1367A1C024C@dscpl.com.au>
Message-ID: <459252A6.2060207@wanadoo.fr>

I looked at
http://www.dscpl.com.au/wiki/ModPython/Articles/TheProcessInterpreterModel
and of course found it very interesting, expecially for interpretter and 
process.
I must precise that my curent devloppement is under XP. So I'm concerned 
with winnt mode.
In any mode, we must do special stuff to make database connexion 
variable survive between requests.
If we avoid global variable as suggested by the article, shared memory 
seems to be the best solution, because database storage for database 
connexion variable makes no sense ...
Must I make moore interest about "shared memory" solutions like POSH 
(Python Object Sharing) or is there common module in python ?

Graham Dumpleton a ?crit :
 >
 > On 27/12/2006, at 8:20 PM, m.banaouas wrote:
 >
 >> The fixup handler is probably the more elegant way to handle database
 >> connexion
 >> I suppose that this connexion (or pool of such objects) will "survive"
 >> (kept alive) between successive requests?
 >
 > Provided it is stored in a global module variable somewhere and suitable
 > protection is implemented so as deal with module reloading if 
appropriate.
 >
 >> you suggest to cache them in the request object: do you mean like its
 >> usually done with session id, added to all successif url or in hidden
 >> field? or should I add their reference  in the request object during
 >> fixup handler execution time?
 >
 > The reference is added to the request object merely as a convenience so
 > the actual response handler doesn't itself have to go work out where to
 > get the database connection handle from. Thus:
 >
 >   def fixuphandler(req):
 >     # check if database connection initialised and if not initialise it
 >
 >     # cache a handle to database connection object in request object
 >     # so response handler can use it
 >     req.database = ...
 >
 >     return apache.OK
 >
 > Then later:
 >
 >   def handler(req):
 >     database = req.database
 >
 >     # do stuff with database
 >
 >     return apache.OK
 >
 > In other words, it localises a lot of the database imports potentially
 > to one place and you don't end up having it spread through all your
 > handlers as well.
 >
 >> from PythonHandler family, PythonInitHandler seems to be an other 
one appropriate for this job, is it ?
 >
 > PythonInitHandler is broken and doesn't work as advertised. See:
 >
 >   http://issues.apache.org/jira/browse/MODPYTHON-209
 >
 >> To avoid to me any mis-understanding, the long-live connexion object 
will reside as a global module variable ? may be that why "interpretter" 
is usually montionned in PythonImport" threads: the globals will survive 
because the python process is the same one and is never stoped by apache?
 >
 > Interpreter name has to be specified with PythonImport as at point that
 > that directive is processed is outside of any request so not possible to
 > automatically determine what interpreter instance to perform the import
 > for. Obviously you have to ensure it is the same as what any request
 > handlers use. By default it would need to be virtual host name, but 
could be
 > something else if using PythonInterpreter directive.
 >
 > I might suggest though that you read:
 >
 >   
http://www.dscpl.com.au/wiki/ModPython/Articles/TheProcessInterpreterModel
 >
 > as your terminology suggest you might not quite understand the
 > relationship between process and interpreter instances.
 >
 > Graham
 >
 >> Graham Dumpleton a ?crit :
 >>> To avoid having to do it in lots of different places, for example 
if using
 >>> mod_python.publisher, you can define a fixup handler which does it
 >>> for you. The one fixup handler will be invoked for every request in 
that
 >>> context. You could even cache a reference to the database connection
 >>> handle in the request object ready for the subsequent response handler
 >>> to use it.
 >>>
 >>> Graham


From grahamd at dscpl.com.au  Wed Dec 27 06:02:16 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 06:02:27 2006
Subject: [mod_python] example of the PythonImport directive
In-Reply-To: <459252A6.2060207@wanadoo.fr>
References: <4591B8D4.9010109@wanadoo.fr>
	<C546EEA4-368F-4B9A-8F16-7ED843D12FA7@dscpl.com.au>
	<45922E20.203@wanadoo.fr>
	<6E635144-E271-46CC-A6EF-3741AAF9E367@dscpl.com.au>
	<45923AF0.6060901@wanadoo.fr>
	<9DDE0F31-1E6B-4BD3-AF62-B1367A1C024C@dscpl.com.au>
	<459252A6.2060207@wanadoo.fr>
Message-ID: <90008928-D7C7-48E9-A7E9-B3D60BDC0478@dscpl.com.au>

On Windows there is only one process handling requests so there is no  
need
to be worried about having to share stuff between processes.

Even in multi process MPM, you can't share the database connection  
handle
between processes anyway, each would need to have their own.

Graham

On 27/12/2006, at 10:01 PM, m.banaouas wrote:

> I looked at
> http://www.dscpl.com.au/wiki/ModPython/Articles/ 
> TheProcessInterpreterModel
> and of course found it very interesting, expecially for  
> interpretter and process.
> I must precise that my curent devloppement is under XP. So I'm  
> concerned with winnt mode.
> In any mode, we must do special stuff to make database connexion  
> variable survive between requests.
> If we avoid global variable as suggested by the article, shared  
> memory seems to be the best solution, because database storage for  
> database connexion variable makes no sense ...
> Must I make moore interest about "shared memory" solutions like  
> POSH (Python Object Sharing) or is there common module in python ?
>
> Graham Dumpleton a ?crit :
> >
> > On 27/12/2006, at 8:20 PM, m.banaouas wrote:
> >
> >> The fixup handler is probably the more elegant way to handle  
> database
> >> connexion
> >> I suppose that this connexion (or pool of such objects) will  
> "survive"
> >> (kept alive) between successive requests?
> >
> > Provided it is stored in a global module variable somewhere and  
> suitable
> > protection is implemented so as deal with module reloading if  
> appropriate.
> >
> >> you suggest to cache them in the request object: do you mean  
> like its
> >> usually done with session id, added to all successif url or in  
> hidden
> >> field? or should I add their reference  in the request object  
> during
> >> fixup handler execution time?
> >
> > The reference is added to the request object merely as a  
> convenience so
> > the actual response handler doesn't itself have to go work out  
> where to
> > get the database connection handle from. Thus:
> >
> >   def fixuphandler(req):
> >     # check if database connection initialised and if not  
> initialise it
> >
> >     # cache a handle to database connection object in request object
> >     # so response handler can use it
> >     req.database = ...
> >
> >     return apache.OK
> >
> > Then later:
> >
> >   def handler(req):
> >     database = req.database
> >
> >     # do stuff with database
> >
> >     return apache.OK
> >
> > In other words, it localises a lot of the database imports  
> potentially
> > to one place and you don't end up having it spread through all your
> > handlers as well.
> >
> >> from PythonHandler family, PythonInitHandler seems to be an  
> other one appropriate for this job, is it ?
> >
> > PythonInitHandler is broken and doesn't work as advertised. See:
> >
> >   http://issues.apache.org/jira/browse/MODPYTHON-209
> >
> >> To avoid to me any mis-understanding, the long-live connexion  
> object will reside as a global module variable ? may be that why  
> "interpretter" is usually montionned in PythonImport" threads: the  
> globals will survive because the python process is the same one and  
> is never stoped by apache?
> >
> > Interpreter name has to be specified with PythonImport as at  
> point that
> > that directive is processed is outside of any request so not  
> possible to
> > automatically determine what interpreter instance to perform the  
> import
> > for. Obviously you have to ensure it is the same as what any request
> > handlers use. By default it would need to be virtual host name,  
> but could be
> > something else if using PythonInterpreter directive.
> >
> > I might suggest though that you read:
> >
> >   http://www.dscpl.com.au/wiki/ModPython/Articles/ 
> TheProcessInterpreterModel
> >
> > as your terminology suggest you might not quite understand the
> > relationship between process and interpreter instances.
> >
> > Graham
> >
> >> Graham Dumpleton a ?crit :
> >>> To avoid having to do it in lots of different places, for  
> example if using
> >>> mod_python.publisher, you can define a fixup handler which does it
> >>> for you. The one fixup handler will be invoked for every  
> request in that
> >>> context. You could even cache a reference to the database  
> connection
> >>> handle in the request object ready for the subsequent response  
> handler
> >>> to use it.
> >>>
> >>> Graham
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From detrafi at gmail.com  Wed Dec 27 07:51:54 2006
From: detrafi at gmail.com (Andrew Neilson)
Date: Wed Dec 27 07:52:04 2006
Subject: [mod_python] Issue with 'make'
References: <00a501c7291d$d4284db0$4508060a@hscs.virginia.edu>
	<790C5620-FC3E-45F7-A640-69036DEF4ADE@dscpl.com.au>
Message-ID: <011701c729b5$c9f981e0$4508060a@hscs.virginia.edu>

Graham
    Thanks for responding.  I am not sure which compiler was used, so I have put the question to our admin folks to find out.  I grabbed 3.3.0b as you suggested, ran the configure and the make and the make blew up.  The output is below.  I wasn't overly concerned with gcc complaining about a couple of unrecognized options.  I am totally stumped about the other errors.  Could the issue be related to difficulty running the httpd executable?  In this build I can't run it directly, I need to use the apachectl script to get any output from it (which made it necessary to modify the configure script so that the version could be recognized)


Andrew.



Compiling for DSO.

        /usr/IBMIHS6/bin/apxs -I/home/python/mod_python-3.3.0b/src/include -I/usr/IBMIHS6/include -I/usr/local/include/python2.1 -c mod_python.c _apachemodule.c requestobject.c tableobject.c util.c  serverobject.c connobject.c filterobject.c hlist.c  hlistobject.c finfoobject.c -Wl,-bE:Modules/python.exp -lld      -lm  /usr/local/lib/python2.1/config/libpython2.1.a   -lpthread -ldl  -lthread   -lm            
/usr/IBMIHS6/build/libtool --silent --mode=compile gcc -prefer-pic -O2 -qmaxmem=8192  -U__STR__ -D_THREAD_SAFE -D_USE_IRS -qHALT=E -I/usr/IBMIHS6/include  -I/usr/IBMIHS6/include   -I/usr/IBMIHS6/include  -I/home/python/mod_python-3.3.0b/src/include -I/usr/IBMIHS6/include -I/usr/local/include/python2.1  -c -o mod_python.lo mod_python.c && touch mod_python.slo
gcc: unrecognized option '-qmaxmem=8192'
gcc: unrecognized option '-qHALT=E'
In file included from /usr/IBMIHS6/include/apr_portable.h:85,
                 from /usr/IBMIHS6/include/http_protocol.h:64,
                 from /home/python/mod_python-3.3.0b/src/include/mod_python.h:48,
                 from mod_python.c:28:
/usr/include/pthread.h:652: error: parse error before '*' token
/usr/include/pthread.h:655: error: parse error before '*' token
/usr/include/pthread.h:658: error: parse error before '*' token
/usr/include/pthread.h:661: error: parse error before '*' token
/usr/include/pthread.h:664: error: parse error before '*' token
/usr/include/pthread.h:672: error: parse error before '*' token
/usr/include/pthread.h:675: error: parse error before '*' token
/usr/include/pthread.h:678: error: parse error before '*' token
/usr/include/pthread.h:681: error: parse error before '*' token
/usr/include/pthread.h:689: error: parse error before '*' token
/usr/include/pthread.h:693: error: parse error before '*' token
/usr/include/pthread.h:696: error: parse error before '*' token
In file included from /home/python/mod_python-3.3.0b/src/include/mod_python.h:99,
                 from mod_python.c:28:
/home/python/mod_python-3.3.0b/src/include/util.h:37: error: parse error before '*' token
/home/python/mod_python-3.3.0b/src/include/util.h:37: error: parse error before '*' token
/home/python/mod_python-3.3.0b/src/include/util.h:37: warning: data definition has no type or storage class
mod_python.c: In function 'python_init':
mod_python.c:826: warning: initialization from incompatible pointer type
apxs:Error: Command failed with rc=65536
.
make: 1254-004 The error code from the last command is 1.


Stop.
make: 1254-004 The error code from the last command is 2.


Stop.


  ----- Original Message ----- 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20061227/e921501c/attachment-0001.html
From grisha at apache.org  Mon Dec 25 13:07:56 2006
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Wed Dec 27 14:27:23 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.3.0b (Beta)
Message-ID: <20061225130442.O61514@grisha.dyndns.org>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the 3.3.0b (Beta) release of mod_python.

Version 3.3.0b of mod_python features several new functions and
attributes providing better access to apache internals, as well as
many bug fixes and various performance and security improvements. A
detailed description of the changes is available in Appendix A of the
mod_python manual, also available here

http://www.modpython.org/live/mod_python-3.3.0b/doc-html/app-changes-from-3.2.10.html

Beta releases are NOT considered stable and usually contain bugs.

This release is intended to solicit widespread testing of the code. We
strongly recommend that you try out your existing applications and
experiment with new features in a non-production environment using
this version and report any problems you may encounter so that they
can be addressed before the final release.

Preferred method of reporting problems is the mod_python user list
mod_python@modpython.org.

Mod_python 3.3.0b is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit http://www.modpython.org/

Regards,

The Apache mod_python team.


From grahamd at dscpl.com.au  Wed Dec 27 17:06:42 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 17:06:58 2006
Subject: [mod_python] Issue with 'make'
Message-ID: <1167257202.29596@dscpl.user.openhosting.com>

Your Apache web server is configured and compiled with IBM compiler. Go,
back to trying IBM compiler and we will just need to work through each of
the errors and work them out. Still use 3.3.0b though. Post the output as
you are doing now.

Graham

Andrew Neilson wrote ..
> Graham
>     Thanks for responding.  I am not sure which compiler was used, so I
> have put the question to our admin folks to find out.  I grabbed 3.3.0b
> as you suggested, ran the configure and the make and the make blew up.
> The output is below.  I wasn't overly concerned with gcc complaining about
> a couple of unrecognized options.  I am totally stumped about the other
> errors.  Could the issue be related to difficulty running the httpd executable?
> In this build I can't run it directly, I need to use the apachectl script
> to get any output from it (which made it necessary to modify the configure
> script so that the version could be recognized)
> 
> 
> Andrew.
> 
> 
> 
> Compiling for DSO.
> 
>         /usr/IBMIHS6/bin/apxs -I/home/python/mod_python-3.3.0b/src/include
> -I/usr/IBMIHS6/include -I/usr/local/include/python2.1 -c mod_python.c _apachemodule.c
> requestobject.c tableobject.c util.c  serverobject.c connobject.c filterobject.c
> hlist.c  hlistobject.c finfoobject.c -Wl,-bE:Modules/python.exp -lld  
> -lm  /usr/local/lib/python2.1/config/libpython2.1.a   -lpthread -ldl  -lthread
> -lm            
> /usr/IBMIHS6/build/libtool --silent --mode=compile gcc -prefer-pic -O2
> -qmaxmem=8192  -U__STR__ -D_THREAD_SAFE -D_USE_IRS -qHALT=E -I/usr/IBMIHS6/include
> -I/usr/IBMIHS6/include   -I/usr/IBMIHS6/include  -I/home/python/mod_python-3.3.0b/src/include
> -I/usr/IBMIHS6/include -I/usr/local/include/python2.1  -c -o mod_python.lo
> mod_python.c && touch mod_python.slo
> gcc: unrecognized option '-qmaxmem=8192'
> gcc: unrecognized option '-qHALT=E'
> In file included from /usr/IBMIHS6/include/apr_portable.h:85,
>                  from /usr/IBMIHS6/include/http_protocol.h:64,
>                  from /home/python/mod_python-3.3.0b/src/include/mod_python.h:48,
>                  from mod_python.c:28:
> /usr/include/pthread.h:652: error: parse error before '*' token
> /usr/include/pthread.h:655: error: parse error before '*' token
> /usr/include/pthread.h:658: error: parse error before '*' token
> /usr/include/pthread.h:661: error: parse error before '*' token
> /usr/include/pthread.h:664: error: parse error before '*' token
> /usr/include/pthread.h:672: error: parse error before '*' token
> /usr/include/pthread.h:675: error: parse error before '*' token
> /usr/include/pthread.h:678: error: parse error before '*' token
> /usr/include/pthread.h:681: error: parse error before '*' token
> /usr/include/pthread.h:689: error: parse error before '*' token
> /usr/include/pthread.h:693: error: parse error before '*' token
> /usr/include/pthread.h:696: error: parse error before '*' token
> In file included from /home/python/mod_python-3.3.0b/src/include/mod_python.h:99,
>                  from mod_python.c:28:
> /home/python/mod_python-3.3.0b/src/include/util.h:37: error: parse error
> before '*' token
> /home/python/mod_python-3.3.0b/src/include/util.h:37: error: parse error
> before '*' token
> /home/python/mod_python-3.3.0b/src/include/util.h:37: warning: data definition
> has no type or storage class
> mod_python.c: In function 'python_init':
> mod_python.c:826: warning: initialization from incompatible pointer type
> apxs:Error: Command failed with rc=65536
> .
> make: 1254-004 The error code from the last command is 1.
> 
> 
> Stop.
> make: 1254-004 The error code from the last command is 2.
> 
> 
> Stop.
> 
> 
>   ----- Original Message ----- 
From szybalski at gmail.com  Wed Dec 27 17:27:10 2006
From: szybalski at gmail.com (Lukasz Szybalski)
Date: Wed Dec 27 17:27:14 2006
Subject: [mod_python] apache to display index.psp
Message-ID: <804e5c70612271427s11864c25uabe82e029767e12e@mail.gmail.com>

Hello,
I am trying to display index.psp. When i go to folder i see only index.psp

http://www.example.com/folder/
If i put for example index.php it will automatically be displayed
there. But index.psp won't

Any ideas why?


my apache2.conf includes:
DirectoryIndex index.psp index.html index.php index.xhtml

my httpd.conf

<Directory "/my/psp/web/folder">
  AddHandler mod_python .psp .psp_
  PythonHandler mod_python.psp
  PythonDebug On
  Options Indexes MultiViews
  AllowOverride None
 Order allow,deny
 Allow from all
</Directory>

Debian sarge:
this is how i installed it:
apt-get update
apt-get install libapache2-mod-python

Module should be enabled, to check type:
a2enmod mod_python

Enable psp support by adding following in /etc/apache2/httpd.conf :

AddHandler mod_python .psp .psp_
PythonHandler mod_python.psp

Save the file and reload apache:
/etc/init.d/apache2 reload
From grahamd at dscpl.com.au  Wed Dec 27 17:39:01 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Dec 27 17:39:07 2006
Subject: [mod_python] apache to display index.psp
Message-ID: <1167259141.11684@dscpl.user.openhosting.com>

Use:

  DirectoryIndex index.psp

Lukasz Szybalski wrote ..
> Hello,
> I am trying to display index.psp. When i go to folder i see only index.psp
> 
> http://www.example.com/folder/
> If i put for example index.php it will automatically be displayed
> there. But index.psp won't
> 
> Any ideas why?
> 
> 
> my apache2.conf includes:
> DirectoryIndex index.psp index.html index.php index.xhtml
> 
> my httpd.conf
> 
> <Directory "/my/psp/web/folder">
>   AddHandler mod_python .psp .psp_
>   PythonHandler mod_python.psp
>   PythonDebug On
>   Options Indexes MultiViews
>   AllowOverride None
>  Order allow,deny
>  Allow from all
> </Directory>
> 
> Debian sarge:
> this is how i installed it:
> apt-get update
> apt-get install libapache2-mod-python
> 
> Module should be enabled, to check type:
> a2enmod mod_python
> 
> Enable psp support by adding following in /etc/apache2/httpd.conf :
> 
> AddHandler mod_python .psp .psp_
> PythonHandler mod_python.psp
> 
> Save the file and reload apache:
> /etc/init.d/apache2 reload
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From nferrier at tapsellferrier.co.uk  Thu Dec 28 10:40:30 2006
From: nferrier at tapsellferrier.co.uk (Nic James Ferrier)
Date: Thu Dec 28 10:41:28 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <725933C1-5306-4F5C-9A3C-46AF031EFA1B@dscpl.com.au> (Graham
	Dumpleton's message of "Wed\, 27 Dec 2006 16\:37\:40 +1100")
References: <1166789545.3712@dscpl.user.openhosting.com>
	<458BDAEC.7000503@jgassociates.ca>
	<200612220837.15168.sdavis2@mail.nih.gov>
	<725933C1-5306-4F5C-9A3C-46AF031EFA1B@dscpl.com.au>
Message-ID: <87d564xc41.fsf@tapsellferrier.co.uk>

Graham Dumpleton <grahamd@dscpl.com.au> writes:

> As to whether it is possible to implement a mod_perl like module for
> Python, it is, it can work and it is simpler than one might expect
> as SWIG works quite well for this. I already have basic bindings
> working as proof of concept.

Oooh. Yes please.


> The second option is to implement the new module as a broad enough
> framework that the existing mod_python API could be implemented as a
> personality on top of it. So, one looks at this other way around and
> says that the new module is technically a much better solution and
> bless it as the way forward. The API of mod_python could then be
> supported as just one of many restrictive APIs on top of the new
> module, thus allowing support of older code as well as allowing
> development of new personalities and extension modules for
> Apache. As a further example, WSGI could be just another personality
> on top of the new module.

Oooh. Yes please.


> With a new module which exposes better the Apache APIs, examples of
> things you could do are:
>
>    mod_authn_python - Implement an auth provider using Python code.
>
>    mod_dav_python - Implement a dav provider using Python code.

Oooh! Oooh! Yes please!

(I really need this right now - I've looked at implementing ALL of DAV
but it's such a moronic protocol I really don't want to).


> So, although I may have grand plans for world domination along these
> lines, in practice I don't see it going very far, at least not under
> the umbrella of the existing mod_python project. What exactly I will
> do with these ideas and the code I have already developed I don't
> know yet. I see I have two choices at present. These are to work on
> it myself out of my own site as a personal project purely for
> curiosity value. The second is to get an Apache labs project created
> for it and work on it there. In the latter, because it is under the
> umbrella of the Apache Software Foundation, it doesn't rule out it
> someday perhaps being adopted as an official front line
> project. Doing it as an Apache labs project would also make it
> easier to migrate at least some of the ideas over to mod_python so
> as to improve the existing code base.

I think you should do this in the quickest way possible. I'd probably
help a bit with somethings.

-- 
Nic Ferrier
http://www.tapsellferrier.co.uk   for all your tapsell ferrier needs
From nick at dd.revealed.net  Thu Dec 28 12:15:08 2006
From: nick at dd.revealed.net (Nick)
Date: Thu Dec 28 12:15:33 2006
Subject: [mod_python] focus on shared hosting?
In-Reply-To: <87d564xc41.fsf@tapsellferrier.co.uk>
References: <1166789545.3712@dscpl.user.openhosting.com>	<458BDAEC.7000503@jgassociates.ca>	<200612220837.15168.sdavis2@mail.nih.gov>	<725933C1-5306-4F5C-9A3C-46AF031EFA1B@dscpl.com.au>
	<87d564xc41.fsf@tapsellferrier.co.uk>
Message-ID: <4593FB9C.3060002@dd.revealed.net>

Nic James Ferrier wrote:
> Graham Dumpleton <grahamd@dscpl.com.au> writes:
> 
>> As to whether it is possible to implement a mod_perl like module for
>> Python, it is, it can work and it is simpler than one might expect
>> as SWIG works quite well for this. I already have basic bindings
>> working as proof of concept.
> 
> Oooh. Yes please.

I, too, would be interested in any work you've done for low-level wrapping
of the apache API.  Been wanting to do that for a long time, but just
somehow can never find the time.  Fortunately, Graham seems to never sleep :)

Nick
From szybalski at gmail.com  Thu Dec 28 15:34:56 2006
From: szybalski at gmail.com (Lukasz Szybalski)
Date: Thu Dec 28 15:35:02 2006
Subject: [mod_python] apache to display index.psp
In-Reply-To: <1167259141.11684@dscpl.user.openhosting.com>
References: <1167259141.11684@dscpl.user.openhosting.com>
Message-ID: <45942A70.90707@gmail.com>

Graham Dumpleton wrote:
> Use:
>
>   DirectoryIndex index.psp
>
> Lukasz Szybalski wrote ..
>   
>> Hello,
>> I am trying to display index.psp. When i go to folder i see only index.psp
>>
>> http://www.example.com/folder/
>> If i put for example index.php it will automatically be displayed
>> there. But index.psp won't
>>
>> Any ideas why?
>>
>>
>> my apache2.conf includes:
>> DirectoryIndex index.psp index.html index.php index.xhtml
>>
>> my httpd.conf
>>
>> <Directory "/my/psp/web/folder">
>>   AddHandler mod_python .psp .psp_
>>   PythonHandler mod_python.psp
>>   PythonDebug On
>>   Options Indexes MultiViews
>>   AllowOverride None
>>  Order allow,deny
>>  Allow from all
>> </Directory>
>>
>> Debian sarge:
>> this is how i installed it:
>> apt-get update
>> apt-get install libapache2-mod-python
>>
>> Module should be enabled, to check type:
>> a2enmod mod_python
>>
>> Enable psp support by adding following in /etc/apache2/httpd.conf :
>>
>> AddHandler mod_python .psp .psp_
>> PythonHandler mod_python.psp
>>
>> Save the file and reload apache:
>> /etc/init.d/apache2 reload
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>     
I modified httpd.conf to 

<Directory "/path/to/folder">
 AddHandler mod_python .psp .psp_
 PythonHandler mod_python.psp
 PythonDebug On
 Options Indexes MultiViews
 AllowOverride None
 Order allow,deny
 Allow from all
 DirectoryIndex index.psp
</Directory>


I just don't understand why would i have to specify this again if it is 
stated already in apache2.conf

DirectoryIndex index.psp index.html index.php index.xhtml

But it does work now.
Thanks
Lucas

From grahamd at dscpl.com.au  Thu Dec 28 16:49:23 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Dec 28 16:49:35 2006
Subject: [mod_python] apache to display index.psp
Message-ID: <1167342563.29685@dscpl.user.openhosting.com>

Lukasz Szybalski wrote ..
> Graham Dumpleton wrote:
> > Use:
> >
> >   DirectoryIndex index.psp
>
> I modified httpd.conf to 
> 
> <Directory "/path/to/folder">
>  AddHandler mod_python .psp .psp_
>  PythonHandler mod_python.psp
>  PythonDebug On
>  Options Indexes MultiViews
>  AllowOverride None
>  Order allow,deny
>  Allow from all
>  DirectoryIndex index.psp
> </Directory>
> 
> 
> I just don't understand why would i have to specify this again if it is
> stated already in apache2.conf
> 
> DirectoryIndex index.psp index.html index.php index.xhtml

Don't know. Only reason could be that the existing DirectoryIndex
directive wasn't actually at global scope or top level scope of the
virtual host, but was instead only defined for below the document
root and your new area is not in the document root.

Graham
From rickzolun1 at charter.net  Fri Dec 29 02:22:41 2006
From: rickzolun1 at charter.net (rickzolun1@charter.net)
Date: Fri Dec 29 02:22:47 2006
Subject: [mod_python] VirtualHost
Message-ID: <645288920.1167376961045.JavaMail.root@fepweb09>

The following is working:

<VirtualHost *:80>
    ServerName srv01.local
	DocumentRoot "C:/Company/apps"
    <Location "/">
        AllowOverride None
        Order allow,deny
        Allow from all

        PythonPath "['C:/Company/apps/ClientX/ProductY','C:/Company/scripts'] + sys.path"
        SetHandler mod_python
        PythonHandler mpcp
		PythonDebug On
		PythonOption cherrysetup project_start::mp_setup
    </Location>
</VirtualHost>

Questions

1. I would prefer to have relative path
<Location "/ClientX/ProductY">
 .........
<Location>
but this is not working. I get "Forbidden  You don't have permission to access / on this server." message when I do this. How can I use relative paths?

2. Are relative paths allowed in PythonPath?

Different context...

3. It appears that environment variables cannot be used in the Python code with mod_python (os.environ.get). Is there an alternate recommended approach?

Thanks.
From martijn at xs4us.nu  Fri Dec 29 08:19:55 2006
From: martijn at xs4us.nu (Martijn Moeling)
Date: Fri Dec 29 08:20:50 2006
Subject: [mod_python] ANNOUNCE: Mod_python 3.3.0b (Beta)
Message-ID: <B6C73A5E30565245BB6D32B5F5DF7A521202BC@sense.emmastraat.pijnacker>

I have been testing with this version for some time no
And as far as I can see this version is the most stable, 
reliable and memory leak free version of mod_python I have 
seen so far. 

The new importer makes development much better since you do not have to
restart Apache for every module change. I suggest everybody starts using
this on their development systems, I took it in production yesterday

Martijn

-----Oorspronkelijk bericht-----
Van: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org] Namens Gregory (Grisha)
Trubetskoy
Verzonden: Monday, December 25, 2006 7:08 PM
Aan: announce@httpd.apache.org; python-dev@httpd.apache.org;
mod_python@modpython.org
Onderwerp: [mod_python] ANNOUNCE: Mod_python 3.3.0b (Beta)


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the 3.3.0b (Beta) release of mod_python.

Version 3.3.0b of mod_python features several new functions and
attributes providing better access to apache internals, as well as
many bug fixes and various performance and security improvements. A
detailed description of the changes is available in Appendix A of the
mod_python manual, also available here

http://www.modpython.org/live/mod_python-3.3.0b/doc-html/app-changes-fro
m-3.2.10.html

Beta releases are NOT considered stable and usually contain bugs.

This release is intended to solicit widespread testing of the code. We
strongly recommend that you try out your existing applications and
experiment with new features in a non-production environment using
this version and report any problems you may encounter so that they
can be addressed before the final release.

Preferred method of reporting problems is the mod_python user list
mod_python@modpython.org.

Mod_python 3.3.0b is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit http://www.modpython.org/

Regards,

The Apache mod_python team.


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From bgailer at alum.rpi.edu  Fri Dec 29 14:16:38 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Fri Dec 29 14:16:44 2006
Subject: [mod_python] Upgrade Apache to python2.5?
Message-ID: <45956996.5020705@alum.rpi.edu>

I want to "Upgrade Apache to use python2.5" rather than the python2.3 
that came with the Apache2Trid package.

Any help is welcome.

-- 
Bob Gailer
510-978-4454

From grahamd at dscpl.com.au  Fri Dec 29 19:23:47 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec 29 19:23:55 2006
Subject: [mod_python] Upgrade Apache to python2.5?
In-Reply-To: <45956996.5020705@alum.rpi.edu>
References: <45956996.5020705@alum.rpi.edu>
Message-ID: <BCB01D5D-250D-49FF-BE63-CD437A0FA236@dscpl.com.au>


On 30/12/2006, at 6:16 AM, Bob Gailer wrote:

> I want to "Upgrade Apache to use python2.5" rather than the  
> python2.3 that came with the Apache2Trid package.
>
> Any help is welcome.

There are prebuilt packages for mod_python for different Apache/Python
combinations available from:

   http://nicolas.lehuen.com/download/mod_python/

You would still have to separately upgrade Python first

Since Apache2Triad is a prepackaged WAMP system, you may be better  
off asking
on the Apache2Triad forums as they may better understand the  
implications of
upgrading Python and the mod_python components and whether it can be
successfully done for their system of components.

Graham


From grahamd at dscpl.com.au  Fri Dec 29 19:34:34 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec 29 19:34:40 2006
Subject: [mod_python] VirtualHost
In-Reply-To: <645288920.1167376961045.JavaMail.root@fepweb09>
References: <645288920.1167376961045.JavaMail.root@fepweb09>
Message-ID: <8228F855-9D2F-49FB-A514-6057879BC324@dscpl.com.au>


On 29/12/2006, at 6:22 PM, <rickzolun1@charter.net> wrote:

> The following is working:
>
> <VirtualHost *:80>
>     ServerName srv01.local
> 	DocumentRoot "C:/Company/apps"
>     <Location "/">
>         AllowOverride None
>         Order allow,deny
>         Allow from all
>
>         PythonPath "['C:/Company/apps/ClientX/ProductY','C:/Company/ 
> scripts'] + sys.path"
>         SetHandler mod_python
>         PythonHandler mpcp
> 		PythonDebug On
> 		PythonOption cherrysetup project_start::mp_setup
>     </Location>
> </VirtualHost>
>
> Questions
>
> 1. I would prefer to have relative path
> <Location "/ClientX/ProductY">
>  .........
> <Location>
> but this is not working. I get "Forbidden  You don't have  
> permission to access / on this server." message when I do this.

You should be able to use Location like that, but you may have  
provide extra
configuration information for CherryPy so it knows that is being used  
for a
directory which isn't the root of the web site.

> How can I use relative paths?

What exactly do you mean by that? The term relative path means something
specific and your use of the term doesn't completely make sense in  
this context.

I think perhaps you mean a URL path as distinct from file system path?

> 2. Are relative paths allowed in PythonPath?

No. All paths in PythonPath must be absolute.

> Different context...
>
> 3. It appears that environment variables cannot be used in the  
> Python code with mod_python (os.environ.get). Is there an alternate  
> recommended approach?

If you are using CherryPy it will depend on whether they propagate  
through in
some way mod_python configuration which can be specified using the
PythonOption directive. Normally in mod_python you get access to this  
through
the request object using req.get_options(), but CherryPy probably  
hides the
mod_python request object with its own wrappers and so you can't get  
to it.

Similarly using SetEnv directory may also be no good if CherryPy  
doesn't allow
you access to req.subprocess_env table in mod_python request object.

You may be better off asking on some CherryPy forum as it relates  
more to
that product than mod_python.

Graham
From bgailer at alum.rpi.edu  Fri Dec 29 21:20:57 2006
From: bgailer at alum.rpi.edu (Bob Gailer)
Date: Fri Dec 29 21:21:00 2006
Subject: [mod_python] Upgrade Apache to python2.5?
In-Reply-To: <BCB01D5D-250D-49FF-BE63-CD437A0FA236@dscpl.com.au>
References: <45956996.5020705@alum.rpi.edu>
	<BCB01D5D-250D-49FF-BE63-CD437A0FA236@dscpl.com.au>
Message-ID: <4595CD09.7000309@alum.rpi.edu>

Graham Dumpleton wrote:
> On 30/12/2006, at 6:16 AM, Bob Gailer wrote:
>
>> I want to "Upgrade Apache to use python2.5" rather than the python2.3 
>> that came with the Apache2Trid package.
>>
>> Any help is welcome.
>
> There are prebuilt packages for mod_python for different Apache/Python
> combinations available from:
>
>   http://nicolas.lehuen.com/download/mod_python/
>
> You would still have to separately upgrade Python first
>
> Since Apache2Triad is a prepackaged WAMP system, you may be better off 
> asking
> on the Apache2Triad forums as they may better understand the 
> implications of
> upgrading Python and the mod_python components and whether it can be
> successfully done for their system of components.
Thanks - what's WAMP (Google search did not help)
>
> Graham
>
>
>


-- 
Bob Gailer
510-978-4454

From grahamd at dscpl.com.au  Fri Dec 29 21:31:06 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Dec 29 21:31:17 2006
Subject: [mod_python] Upgrade Apache to python2.5?
In-Reply-To: <4595CD09.7000309@alum.rpi.edu>
References: <45956996.5020705@alum.rpi.edu>
	<BCB01D5D-250D-49FF-BE63-CD437A0FA236@dscpl.com.au>
	<4595CD09.7000309@alum.rpi.edu>
Message-ID: <3EE4B4E3-B87C-4CD5-BC32-CED093717EF4@dscpl.com.au>


On 30/12/2006, at 1:20 PM, Bob Gailer wrote:

> Graham Dumpleton wrote:
>> On 30/12/2006, at 6:16 AM, Bob Gailer wrote:
>>
>>> I want to "Upgrade Apache to use python2.5" rather than the  
>>> python2.3 that came with the Apache2Trid package.
>>>
>>> Any help is welcome.
>>
>> There are prebuilt packages for mod_python for different Apache/ 
>> Python
>> combinations available from:
>>
>>   http://nicolas.lehuen.com/download/mod_python/
>>
>> You would still have to separately upgrade Python first
>>
>> Since Apache2Triad is a prepackaged WAMP system, you may be better  
>> off asking
>> on the Apache2Triad forums as they may better understand the  
>> implications of
>> upgrading Python and the mod_python components and whether it can be
>> successfully done for their system of components.
> Thanks - what's WAMP (Google search did not help)

The Windows equivalent of LAMP. See:

   http://en.wikipedia.org/wiki/LAMP_(software_bundle)

Graham
From banaouas.medialog at wanadoo.fr  Sat Dec 30 11:50:16 2006
From: banaouas.medialog at wanadoo.fr (m.banaouas)
Date: Sat Dec 30 11:43:05 2006
Subject: [mod_python] [SPAM] apache and mod_gzip
Message-ID: <459698C8.2050601@wanadoo.fr>

Hi,

Can any body tell me if it make yet sense to activate mod_gzip with 
apache 2.2 ?
after reading several threads about it, I wonder if output stream  
gzip-compression is already included as standard behaviour of apache 2.2.

But I did not yet obtained any compressed output, although my http 
client asked about it (Accept-Encoding: gzip,deflate)
With a http traffic spy (TCP Viewer), I see normal text flow towards my 
client, while I expected bin flow (something like "$@r_?! etc.... ." !).

thanks for any help.






From banaouas.medialog at wanadoo.fr  Sat Dec 30 13:29:37 2006
From: banaouas.medialog at wanadoo.fr (m.banaouas)
Date: Sat Dec 30 13:22:22 2006
Subject: [mod_python] [SPAM] fixuphandler problem with mod_python-3.3.0b
Message-ID: <4596B011.6010809@wanadoo.fr>

hi,
I encouter a problem with mod_python-3.3.0b after installed it with mod_python-3.3.0b.win32-py2.4-Apache2.2.exe.

my fixuphandler in not founded anymore, although it's always there (D:/mydir/fixuphandler.py).
after installing again mod_python-3.2.10, every thing works fine again.
Here in the browser output (PythonDebug On):

MOD_PYTHON ERROR

ProcessId:      3520
Interpreter:    'MACHIN.domaine.local'

ServerName:     'MACHIN.domaine.local'
DocumentRoot:   'C:/Apache/htdocs'

URI:            '/mydir/api'
Location:       None
Directory:      'D:/mydir/'
Filename:       'D:/mydir/api'
PathInfo:       ''

Phase:          'PythonFixupHandler'
Handler:        'fixuphandler.fixuphandler'

Traceback (most recent call last):

  File "C:\Python\Lib\site-packages\mod_python\importer.py", line 1537, in HandlerDispatch
    default=default_handler, arg=req, silent=hlist.silent)

  File "C:\Python\Lib\site-packages\mod_python\importer.py", line 1202, in _process_target
    module = import_module(module_name, path=path)

  File "C:\Python\Lib\site-packages\mod_python\importer.py", line 304, in import_module
    return __import__(module_name, {}, {}, ['*'])

ImportError: No module named fixuphandler.fixuphandler

and here is my httpd.conf contribution:
---
Alias /mydir "D:/mydir"

<Directory D:/mydir>
    Allow from All
    SetHandler mod_python
    PythonFixupHandler fixuphandler.fixuphandler
    PythonHandler mod_python.publisher
    PythonDebug On
</Directory>
---



From grahamd at dscpl.com.au  Sat Dec 30 21:19:53 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec 30 21:20:02 2006
Subject: [mod_python] fixuphandler problem with mod_python-3.3.0b
In-Reply-To: <4596B011.6010809@wanadoo.fr>
References: <4596B011.6010809@wanadoo.fr>
Message-ID: <55CAA4BA-A2B7-402D-9CFD-0E0136122EDD@dscpl.com.au>

Read description of import_module() in:

   http://www.modpython.org/live/mod_python-3.3.0b/doc-html/pyapi- 
apmeth.html

How 3.3.0b treats Python packages is a bit different.

Your error and configuration suggests that what you had previously was:

   ./fixuphandler/  # directory
       __init__.py # package init file.
       fixuphandler.py # handler file in directory
           fixuphandler() # handler function in file

A little messy, but the important thing is that it only worked before  
because you
had fixuphandler directory organised as a Python package with an  
__init__.py
file and mod_python had automatically add the parent handler  
directory into
sys.path. In 3.3.0b, it doesn't add the parent handler directory into  
sys.path as
that causes various problems. The new importer instead works out  
where to
import things from in a different way. On consequence of this though  
is that
stuff organised as Python packages in a parent handler directory will  
not be
found.

You have a few options.

1. Move 'fixuphandler' directory outside of document root and using  
PythonPath
to say where the parent directory of that directory now is.

2. If 'fixuphandler/__init__.py' is empty, then delete that file and  
change
configuration to:

   PythonFixupHandler fixuphandler/fixuphandler

3. Remove 'fixuphandler/__init__.py' again, but use explicit  
reference to handler
file:

   PythonFixupHandler ~/fixuphandler/fixuphandler.py

If you had stuff in 'fixuphandler/__init__.py' and you expect it to  
be executed, then
you can only do 1 as is. You might want to reconsider restructuring  
your files
though anyway.

BTW, if you do not have a 'fixuphandler/.htaccess' which has:

   deny from all

then easy for a user to access stuff in 'fixuphandler' directory that  
they shouldn't.
Ie. they could use URL of:

   fixuphandler/fixuphandler.py/fixuphandler

and mod_python.publisher will call the fixuphandler a second time. If  
it was
doing session stuff, that would cause a deadlock.

If the only thing in 'fixuphandler' directory is 'fixuphandler.py',  
you would perhaps
be better off moving 'fixuphandler.py' to the parent directory and  
call it '_handlers.py'.
Because it now has a leading underscore, mod_python.publisher should  
ignore
it and not allow it to be accessed. The configuration would then be:

   PythonFixupHandler _handlers

or:

   PythonFixupHandler ~/_handlers.py

Anyway, read through the documentation I reference, noting that  
import_module()
is what is used to load modules for the Python*Handler directives.

Graham

On 31/12/2006, at 5:29 AM, m.banaouas wrote:

> hi,
> I encouter a problem with mod_python-3.3.0b after installed it with  
> mod_python-3.3.0b.win32-py2.4-Apache2.2.exe.
>
> my fixuphandler in not founded anymore, although it's always there  
> (D:/mydir/fixuphandler.py).
> after installing again mod_python-3.2.10, every thing works fine  
> again.
> Here in the browser output (PythonDebug On):
>
> MOD_PYTHON ERROR
>
> ProcessId:      3520
> Interpreter:    'MACHIN.domaine.local'
>
> ServerName:     'MACHIN.domaine.local'
> DocumentRoot:   'C:/Apache/htdocs'
>
> URI:            '/mydir/api'
> Location:       None
> Directory:      'D:/mydir/'
> Filename:       'D:/mydir/api'
> PathInfo:       ''
>
> Phase:          'PythonFixupHandler'
> Handler:        'fixuphandler.fixuphandler'
>
> Traceback (most recent call last):
>
>  File "C:\Python\Lib\site-packages\mod_python\importer.py", line  
> 1537, in HandlerDispatch
>    default=default_handler, arg=req, silent=hlist.silent)
>
>  File "C:\Python\Lib\site-packages\mod_python\importer.py", line  
> 1202, in _process_target
>    module = import_module(module_name, path=path)
>
>  File "C:\Python\Lib\site-packages\mod_python\importer.py", line  
> 304, in import_module
>    return __import__(module_name, {}, {}, ['*'])
>
> ImportError: No module named fixuphandler.fixuphandler
>
> and here is my httpd.conf contribution:
> ---
> Alias /mydir "D:/mydir"
>
> <Directory D:/mydir>
>    Allow from All
>    SetHandler mod_python
>    PythonFixupHandler fixuphandler.fixuphandler
>    PythonHandler mod_python.publisher
>    PythonDebug On
> </Directory>
> ---
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From grahamd at dscpl.com.au  Sat Dec 30 21:22:54 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Dec 30 21:22:54 2006
Subject: [mod_python] apache and mod_gzip
In-Reply-To: <459698C8.2050601@wanadoo.fr>
References: <459698C8.2050601@wanadoo.fr>
Message-ID: <71B8A673-9036-485D-9C0C-D6D8D6268F6A@dscpl.com.au>


On 31/12/2006, at 3:50 AM, m.banaouas wrote:

> Hi,
>
> Can any body tell me if it make yet sense to activate mod_gzip with  
> apache 2.2 ?
> after reading several threads about it, I wonder if output stream   
> gzip-compression is already included as standard behaviour of  
> apache 2.2.
>
> But I did not yet obtained any compressed output, although my http  
> client asked about it (Accept-Encoding: gzip,deflate)
> With a http traffic spy (TCP Viewer), I see normal text flow  
> towards my client, while I expected bin flow (something like  
> "$@r_?! etc.... ." !).

For compression, use mod_deflate:

   http://httpd.apache.org/docs/2.2/mod/mod_deflate.html

Graham
From banaouas.medialog at wanadoo.fr  Sun Dec 31 05:07:09 2006
From: banaouas.medialog at wanadoo.fr (m.banaouas)
Date: Sun Dec 31 04:59:55 2006
Subject: [mod_python] fixuphandler problem with mod_python-3.3.0b
In-Reply-To: <55CAA4BA-A2B7-402D-9CFD-0E0136122EDD@dscpl.com.au>
References: <4596B011.6010809@wanadoo.fr>
	<55CAA4BA-A2B7-402D-9CFD-0E0136122EDD@dscpl.com.au>
Message-ID: <45978BCD.3070908@wanadoo.fr>


here is my directory organisation:
D:\mydir\
D:\mydir\fixuphandler.py
D:\mydir\api.py
there is no __init__.py at all.
however, I can make it change to match well practices ...

Graham Dumpleton a ?crit :
> Read description of import_module() in:
>
>   
> http://www.modpython.org/live/mod_python-3.3.0b/doc-html/pyapi-apmeth.html 
>
>
> How 3.3.0b treats Python packages is a bit different.
>
> Your error and configuration suggests that what you had previously was:
>
>   ./fixuphandler/  # directory
>       __init__.py # package init file.
>       fixuphandler.py # handler file in directory
>           fixuphandler() # handler function in file
>
> A little messy, but the important thing is that it only worked before 
> because you
> had fixuphandler directory organised as a Python package with an 
> __init__.py
> file and mod_python had automatically add the parent handler directory 
> into
> sys.path. In 3.3.0b, it doesn't add the parent handler directory into 
> sys.path as
> that causes various problems. The new importer instead works out where to
> import things from in a different way. On consequence of this though 
> is that
> stuff organised as Python packages in a parent handler directory will 
> not be
> found.
>
> You have a few options.
>
> 1. Move 'fixuphandler' directory outside of document root and using 
> PythonPath
> to say where the parent directory of that directory now is.
>
> 2. If 'fixuphandler/__init__.py' is empty, then delete that file and 
> change
> configuration to:
>
>   PythonFixupHandler fixuphandler/fixuphandler
>
> 3. Remove 'fixuphandler/__init__.py' again, but use explicit reference 
> to handler
> file:
>
>   PythonFixupHandler ~/fixuphandler/fixuphandler.py
>
> If you had stuff in 'fixuphandler/__init__.py' and you expect it to be 
> executed, then
> you can only do 1 as is. You might want to reconsider restructuring 
> your files
> though anyway.
>
> BTW, if you do not have a 'fixuphandler/.htaccess' which has:
>
>   deny from all
>
> then easy for a user to access stuff in 'fixuphandler' directory that 
> they shouldn't.
> Ie. they could use URL of:
>
>   fixuphandler/fixuphandler.py/fixuphandler
>
> and mod_python.publisher will call the fixuphandler a second time. If 
> it was
> doing session stuff, that would cause a deadlock.
>
> If the only thing in 'fixuphandler' directory is 'fixuphandler.py', 
> you would perhaps
> be better off moving 'fixuphandler.py' to the parent directory and 
> call it '_handlers.py'.
> Because it now has a leading underscore, mod_python.publisher should 
> ignore
> it and not allow it to be accessed. The configuration would then be:
>
>   PythonFixupHandler _handlers
>
> or:
>
>   PythonFixupHandler ~/_handlers.py
>
> Anyway, read through the documentation I reference, noting that 
> import_module()
> is what is used to load modules for the Python*Handler directives.
>
> Graham
>


From grahamd at dscpl.com.au  Sun Dec 31 17:54:07 2006
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Dec 31 17:54:15 2006
Subject: [mod_python] fixuphandler problem with mod_python-3.3.0b
In-Reply-To: <45978BCD.3070908@wanadoo.fr>
References: <4596B011.6010809@wanadoo.fr>
	<55CAA4BA-A2B7-402D-9CFD-0E0136122EDD@dscpl.com.au>
	<45978BCD.3070908@wanadoo.fr>
Message-ID: <92A3EA95-6A18-4E4D-97FA-93E350E7099B@dscpl.com.au>

I am surprised then that what you had before even worked, as it
should have been:

   PythonFixupHandler fixuphandler

or:

   PythonFixupHandler fixuphandler::fixuphandler

Using a '.' in the value to the directive, ie.,

   PythonFixupHandler fixuphandler.fixuphandler

is not valid as far as being a way to specify the name of the
handler function within a module and should have resulted in
an attempt to import a submodule called 'fixuphandler' from a
package called 'fixuphandler'.

If it did work before then you have hit some quirk in old versions
of mod_python related somehow to how Python does imports internally.

Quoting the mod_python documentation:
   A handler has the following syntax:

     module[::object]

   Where module can be a full module name (package dot notation is

   accepted), and the optional object is the name of an object inside  
the module.

   The "::" was chosen for performance reasons. In order for Python
   to use objects inside modules, the modules first need to be imported.
   Having the separator as simply a ".", would considerably complicate
   process of sequentially evaluating every word to determine whether
   it is a package, module, class etc. Using the (admittedly un- 
Python-like)
   "::" takes the time consuming work of figuring out where the  
module part
   ends and the object inside of it begins away from mod_python  
resulting
   in a modest performance gain.

So, the documentation only really guarantees that '::' will work to
distinguish function name from module. Whether '.' is going to work
in all situations is debatable and probably somewhat unspecified.

So, change the PythonFixupHandler directive to documented way of doing
it.

As to file structure. Where files are is okay, but still recommend  
the file
names have leading underscores so that mod_python.publisher will
ignore them and not expose their contents to access given that you
are using mod_python.publisher for the response handler phase.

Graham

On 31/12/2006, at 9:07 PM, m.banaouas wrote:

>
> here is my directory organisation:
> D:\mydir\
> D:\mydir\fixuphandler.py
> D:\mydir\api.py
> there is no __init__.py at all.
> however, I can make it change to match well practices ...
>
> Graham Dumpleton a ?crit :
>> Read description of import_module() in:
>>
>>   http://www.modpython.org/live/mod_python-3.3.0b/doc-html/pyapi- 
>> apmeth.html
>>
>> How 3.3.0b treats Python packages is a bit different.
>>
>> Your error and configuration suggests that what you had previously  
>> was:
>>
>>   ./fixuphandler/  # directory
>>       __init__.py # package init file.
>>       fixuphandler.py # handler file in directory
>>           fixuphandler() # handler function in file
>>
>> A little messy, but the important thing is that it only worked  
>> before because you
>> had fixuphandler directory organised as a Python package with an  
>> __init__.py
>> file and mod_python had automatically add the parent handler  
>> directory into
>> sys.path. In 3.3.0b, it doesn't add the parent handler directory  
>> into sys.path as
>> that causes various problems. The new importer instead works out  
>> where to
>> import things from in a different way. On consequence of this  
>> though is that
>> stuff organised as Python packages in a parent handler directory  
>> will not be
>> found.
>>
>> You have a few options.
>>
>> 1. Move 'fixuphandler' directory outside of document root and  
>> using PythonPath
>> to say where the parent directory of that directory now is.
>>
>> 2. If 'fixuphandler/__init__.py' is empty, then delete that file  
>> and change
>> configuration to:
>>
>>   PythonFixupHandler fixuphandler/fixuphandler
>>
>> 3. Remove 'fixuphandler/__init__.py' again, but use explicit  
>> reference to handler
>> file:
>>
>>   PythonFixupHandler ~/fixuphandler/fixuphandler.py
>>
>> If you had stuff in 'fixuphandler/__init__.py' and you expect it  
>> to be executed, then
>> you can only do 1 as is. You might want to reconsider  
>> restructuring your files
>> though anyway.
>>
>> BTW, if you do not have a 'fixuphandler/.htaccess' which has:
>>
>>   deny from all
>>
>> then easy for a user to access stuff in 'fixuphandler' directory  
>> that they shouldn't.
>> Ie. they could use URL of:
>>
>>   fixuphandler/fixuphandler.py/fixuphandler
>>
>> and mod_python.publisher will call the fixuphandler a second time.  
>> If it was
>> doing session stuff, that would cause a deadlock.
>>
>> If the only thing in 'fixuphandler' directory is  
>> 'fixuphandler.py', you would perhaps
>> be better off moving 'fixuphandler.py' to the parent directory and  
>> call it '_handlers.py'.
>> Because it now has a leading underscore, mod_python.publisher  
>> should ignore
>> it and not allow it to be accessed. The configuration would then be:
>>
>>   PythonFixupHandler _handlers
>>
>> or:
>>
>>   PythonFixupHandler ~/_handlers.py
>>
>> Anyway, read through the documentation I reference, noting that  
>> import_module()
>> is what is used to load modules for the Python*Handler directives.
>>
>> Graham
>>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

