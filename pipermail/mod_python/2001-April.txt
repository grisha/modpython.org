From lisicky at datis.cdrail.cz  Mon Apr  2 13:43:51 2001
From: lisicky at datis.cdrail.cz (Jiri Lisicky)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] processing checkbox field from form
Message-ID: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>

I am beginner on python and mod_python.

When I have form without checkbox field, everythig is OK. I use
publisher and get fields as parameters of function.

But when I add checkbox field I get to trouble. Number of parameters
is changing. In html documentation I found: "Unselected checkboxes and
radio buttons do not return name/value pairs when the form is
submitted." 

I don't know how write function for processing this parameters from
that form.

Is somewhere any example for my problem?

thanks

warning: my english is poor
--
        Ji?? Lisick?                      ?D KM?P Olomouc
e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
 phone: +420-068-472-2272                 Olomouc, Czech Republic
              >>> ?e?tina ISO-8859-2 Compatible <<<

From nineclue at cluelabs.com  Mon Apr  2 22:18:04 2001
From: nineclue at cluelabs.com (Suhku Huh)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Install Error
Message-ID: <001d01c0bb77$5aa15a00$4901fea9@dongnam.thrunet.com>

Greetings...

I've just compiled Apache with mod_python and mod_ssl using ApacheToolbox statically and tried to execute testing script (mptest.py) but failed.

Followings are error message in log file. 

'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Sun Apr  1 22:25:52 2001] [error] [client 127.0.0.1] python_handler: make_obcallback returned no obCallBack!

I'm using Linux Mandrake 7.1 (kernel 2.2.16).
ApacheToolbox downloaded up to date sources of mod_python(2.7.2), Python(2.0), and Apache(1.3.19).
Directory configuration of Apache and Python code are exactly same as
manual Testing section.

Any help or comment would be appreciated.

Suhku Huh
nineclue@bigfoot.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010402/ddfe84b2/attachment.htm
From johannes.govaerts at siemens.atea.be  Mon Apr  2 15:48:12 2001
From: johannes.govaerts at siemens.atea.be (Johannes Govaerts)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>; from lisicky@datis.cdrail.cz on Mon, Apr 02, 2001 at 13:43:51 +0200
References: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>
Message-ID: <20010402154812.A5396@zubr.iplab.atea.be>

You can use default values to deal with the changing number of parameters
in your function:
e.g. something like function(parameter1, parameter2, checkbox='not
checked')

Johannes.


On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> I am beginner on python and mod_python.
> 
> When I have form without checkbox field, everythig is OK. I use
> publisher and get fields as parameters of function.
> 
> But when I add checkbox field I get to trouble. Number of parameters
> is changing. In html documentation I found: "Unselected checkboxes and
> radio buttons do not return name/value pairs when the form is
> submitted." 
> 
> I don't know how write function for processing this parameters from
> that form.
> 
> Is somewhere any example for my problem?
> 
> thanks
> 
> warning: my english is poor
> --
>         Ji?? Lisick?                      ?D KM?P Olomouc
> e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
>  phone: +420-068-472-2272                 Olomouc, Czech Republic
>               >>> ?e?tina ISO-8859-2 Compatible <<<
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 
> 

From aiglauer at yahoo.com  Mon Apr  2 08:49:30 2001
From: aiglauer at yahoo.com (Alexis Iglauer)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154812.A5396@zubr.iplab.atea.be>
Message-ID: <20010402154930.86243.qmail@web13905.mail.yahoo.com>

A more elegant way could be to pass the parameters as a single
dictionary, not as individual parameters - and then use .has_key() to
check for the available params.

I generally use the following code to split a URL into params (req is
the apache request):
-----------------
URL = urlparse.urlparse (req.unparsed_uri)
params = {}
try:
    for x in split(URL[4], '&'):
        params[split(x,'=')[0]] = split(x,'=')[1]
except IndexError:
    pass
---------------------

I then pass 'params' to my functions.  I can check for a checkbox
called XXX by saying:

if params.has_key('XXX'):

This method will not happily handle multiple parameter values, but
could easily be modified to do so.

HTH
Alexis

--- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> You can use default values to deal with the changing number of
> parameters
> in your function:
> e.g. something like function(parameter1, parameter2, checkbox='not
> checked')
> 
> Johannes.
> 
> 
> On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > I am beginner on python and mod_python.
> > 
> > When I have form without checkbox field, everythig is OK. I use
> > publisher and get fields as parameters of function.
> > 
> > But when I add checkbox field I get to trouble. Number of
> parameters
> > is changing. In html documentation I found: "Unselected checkboxes
> and
> > radio buttons do not return name/value pairs when the form is
> > submitted." 
> > 
> > I don't know how write function for processing this parameters from
> > that form.
> > 
> > Is somewhere any example for my problem?
> > 
> > thanks
> > 
> > warning: my english is poor
> > --
> >         Jiøí Lisický                      ÈD KM®P Olomouc
> > e-mail: lisicky@datis.cdrail.cz           Vídeòská 15
> >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> >               >>> èe¹tina ISO-8859-2 Compatible <<<
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> > 
> > 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


__________________________________________________
Do You Yahoo!?
Get email at your own domain with Yahoo! Mail. 
http://personal.mail.yahoo.com/?.refer=text

From grisha at modpython.org  Mon Apr  2 12:31:37 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154930.86243.qmail@web13905.mail.yahoo.com>
Message-ID: <Pine.BSF.4.32.0104021231010.2762-100000@localhost>

I think the publisher modules already does what you're trying to do a
little bit cleaner

Grisha

On Mon, 2 Apr 2001, Alexis Iglauer wrote:

> A more elegant way could be to pass the parameters as a single
> dictionary, not as individual parameters - and then use .has_key() to
> check for the available params.
>
> I generally use the following code to split a URL into params (req is
> the apache request):
> -----------------
> URL = urlparse.urlparse (req.unparsed_uri)
> params = {}
> try:
>     for x in split(URL[4], '&'):
>         params[split(x,'=')[0]] = split(x,'=')[1]
> except IndexError:
>     pass
> ---------------------
>
> I then pass 'params' to my functions.  I can check for a checkbox
> called XXX by saying:
>
> if params.has_key('XXX'):
>
> This method will not happily handle multiple parameter values, but
> could easily be modified to do so.
>
> HTH
> Alexis
>
> --- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> > You can use default values to deal with the changing number of
> > parameters
> > in your function:
> > e.g. something like function(parameter1, parameter2, checkbox='not
> > checked')
> >
> > Johannes.
> >
> >
> > On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > > I am beginner on python and mod_python.
> > >
> > > When I have form without checkbox field, everythig is OK. I use
> > > publisher and get fields as parameters of function.
> > >
> > > But when I add checkbox field I get to trouble. Number of
> > parameters
> > > is changing. In html documentation I found: "Unselected checkboxes
> > and
> > > radio buttons do not return name/value pairs when the form is
> > > submitted."
> > >
> > > I don't know how write function for processing this parameters from
> > > that form.
> > >
> > > Is somewhere any example for my problem?
> > >
> > > thanks
> > >
> > > warning: my english is poor
> > > --
> > >         Ji?? Lisick?                      ?D KM?P Olomouc
> > > e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
> > >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> > >               >>> ?e?tina ISO-8859-2 Compatible <<<
> > > _______________________________________________
> > > Mod_python mailing list
> > > Mod_python@modpython.org
> > > http://www.modpython.org/mailman/listinfo/mod_python
> > >
> > >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
>
>
> __________________________________________________
> Do You Yahoo!?
> Get email at your own domain with Yahoo! Mail.
> http://personal.mail.yahoo.com/?.refer=text
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at mrham.hamslab.com  Tue Apr  3 21:32:45 2001
From: nineclue at mrham.hamslab.com (nineclue@mrham.hamslab.com)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Sorry, Install error.
Message-ID: <Pine.LNX.4.10.10104032126360.23083-100000@mrham.hamslab.com>

Greetings....

Sorry for the contamination.
Now I'm using PINE thru telnet.

I've compiled Apache with mod_python using ApacheToolbox. When I tried
the Test (mptest.py) script, Server Error is raised. 
Followings are part of error_log.

[Tue Apr  3 21:35:23 2001] [notice] Apache/1.3.19 (Unix)
mod_gzip/1.3.19.1a mod_python/2.7.2 Python/2.0 mod_ssl/2.8.1 OpenSSL/0.9.5a configured --
resuming normal operations
[Tue Apr  3 21:35:23 2001] [notice] suEXEC mechanism enabled (wrapper: 
/usr/local/apache/bin/suexec)
'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Tue Apr  3 21:35:44 2001] [error] [client 127.0.0.1] python_handler:
make_oballback returned no obCallBack!

Any comment or answer would be appreciated.

Suhku Huh



From tom_bentz at tamcomm.com  Wed Apr  4 19:15:00 2001
From: tom_bentz at tamcomm.com (Tom Bentz)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Apache configuration
Message-ID: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>

When I set this in my httpd.conf:
AddHandler python-program .py
the browser tries to download the python file

When I add this:
PythonHandler mod_python.publisher
I get this error in my browser:  'The page cannot be found'
    
Any ideas??  Thanks.



From joost.damad at siemens.atea.be  Thu Apr  5 08:00:44 2001
From: joost.damad at siemens.atea.be (Joost Yervante Damad)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Apache configuration
In-Reply-To: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>; from tom_bentz@tamcomm.com on Wed, Apr 04, 2001 at 07:15:00PM -0700
References: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>
Message-ID: <20010405080044.B10114@siemens.atea.be>

Dit you try to read the manual?
The example in there should work fine,
and give you a clue on how to roll your own config.

'Tom Bentz' wrote about '[mod_python] Apache configuration' - Thu, Apr 05, 2001 at 04:15:00AM CEST
> When I set this in my httpd.conf:
> AddHandler python-program .py
> the browser tries to download the python file
> 
> When I add this:
> PythonHandler mod_python.publisher
> I get this error in my browser:  'The page cannot be found'
>     
> Any ideas??  Thanks.
> 

What url are you viewing, what is your exact configuration?

-- 
Joost Damad - Siemens IC D NC A - +3214252297
--
** WARNING **: Invalid seek
wvError: (escher.c:45) Not a container, panic (200)
 wvError: (escher.c:366) Damn found nothing
 wvError: (fspa.c:99) found no fspa, panic

From mhagger at alum.mit.edu  Thu Apr  5 09:31:38 2001
From: mhagger at alum.mit.edu (Michael Haggerty)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Apache 2.0
Message-ID: <m2u2435v7p.fsf@freak.kaiserty.com>

Hi,

Does mod_python support the multithreaded model that is coming in
Apache 2.0?  If not, are there plans to add support for it?  Are there
other Python-in-Apache modules that support Apache 2.0?

Michael

-- 
Michael Haggerty
mhagger@alum.mit.edu

From xkrajic at ics.muni.cz  Thu Apr  5 21:02:09 2001
From: xkrajic at ics.muni.cz (Ondrej Krajicek)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Apache 1.3.19/Win32 Internal server error
References: <200104051810.f35IA1c36397@eden.ispol.com>
Message-ID: <3ACCC131.80A38B5D@ics.muni.cz>

Hello all,

I've downloaded latest mod_python (2.7.2 and precompiled dll
for Windows). I've placed mod_python.so (renamed dll) to
the proper directory (it loads) and I've copied
lib directory from mod_python package to
my site-packages directory. The sys.path
looks like this (python site.py):

sys.path = [
    'd:\\app\\python\\lib',
    'd:\\app\\python\\pythonwin',
    'd:\\app\\python\\win32',
    'd:\\app\\python\\win32\\lib',
    'd:\\app\\python',
    'd:\\app\\python\\dlls',
    'd:\\app\\python\\lib\\plat-win',
    'd:\\app\\python\\lib\\lib-tk',
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-packages\\mod_python',
]

site directories = [
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-python',
]

I've set up the example as is stated in manual,
but instead of nice "Hello World!" message
smiling to me, I get internal server error (500).
Log excerpt:

make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!

When I try to execute the test.py in interpreter
(python test.py), I got:

Traceback (most recent call last):
  File "test.py", line 1, in ?
    from mod_python import apache
  File "d:\app\python\lib\site-packages\mod_python\apache.py", line 55,
in ?
    import _apache
ImportError: No module named _apache

My configuration is:
Windows 2000 Server Sp1
ActivePython from ActiveState (based on Python2.0)
Apache 1.3.19 for Win32 running as service

I am new to python, new to apache and new to mod_python.
Can anyone please help me ?

TIA,

Ondrej Krajicek

-- 
---------------------------------------------------------------------
Ondrej Krajicek OK-)
email: xkrajic et {ics,fi}.muni.cz
                               Omnia ad maiorem Informaticae gloriam.
-->>> The Nexus Framework <<<-- sourceforge.net/projects/nexusproject
          Of course we can, moreover we must, it is our holiest duty.
---------------------------------------------------------------------

From grisha at verio.net  Fri Apr  6 14:54:39 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Apache 2.0
In-Reply-To: <m2u2435v7p.fsf@freak.kaiserty.com>
Message-ID: <Pine.BSF.4.32.0104061453200.46934-100000@localhost>

mod_snake (modsnake.sourceforge.net) works with Apache 2.0

mod_python isn't going to work with 2.0 for a couple of months at least

Grisha

On 5 Apr 2001, Michael Haggerty wrote:

> Hi,
>
> Does mod_python support the multithreaded model that is coming in
> Apache 2.0?  If not, are there plans to add support for it?  Are there
> other Python-in-Apache modules that support Apache 2.0?
>
> Michael
>
> --
> Michael Haggerty
> mhagger@alum.mit.edu
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From marcf at becomm.com  Fri Apr  6 18:17:41 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] apache processes are getting large memory footprint
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>

Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0

From marcf at becomm.com  Fri Apr  6 18:34:01 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] apache processes are getting large memory footpr
	int
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B9@becomm-mis2.becomm.com>

I just found the gc module, which seems to be a builtin module.  If I try to
import it, then mod_python seems to barf.  Any reason for this?

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File "/scratch/local/lib/python2.0/site-packages/mod_python/publisher.py",
line 128, in handler
    module = apache.import_module(module_name, _req, [path])

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 346, in import_module
    module = imp.load_module(mname, f, p, d)

  File "/scratch/apache/htdocs/hotbeads/dispatch.py", line 1, in ?
    import gc

ImportError: No module named gc





-----Original Message-----
From: Marc Fiuczynski [mailto:marcf@becomm.com]
Sent: Friday, April 06, 2001 6:18 PM
To: 'mod_python@modpython.org'
Subject: [mod_python] apache processes are getting large memory
footprint


Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From grisha at verio.net  Fri Apr  6 22:07:46 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] apache processes are getting large memory footprint
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104062204240.50197-100000@localhost>

On Fri, 6 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I am using mod_python to serve up large files from the server to the client.
> I have noticed that the memory footprint of httpd gets rather large and
> stays that way.  Can someone give me a hint how to start figuring out which
> parts are holding on to that amount of memory.  Right now I have no clue
> whether it is httpd, mod_python, or my python programs.  Is there a way to
> figure out what the python memory profile is, or python GC stats?

It is most likely Python.

There is no easy way to identify the state of all variables within a
Python interpreter, but you can try a few things, such making sure that
your large variables don't persist between connection by assigning None to
them at the end.

Grisha


From rusddf at yahoo.com  Thu Apr  5 19:02:13 2001
From: rusddf at yahoo.com (Sergey)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] E-mail áàçà "Âñÿ Ðîññèÿ"
Message-ID: <0eb690458140741SERVER@server>

????????????!

E-mail ???? "??? ??????"

?????????? ??? ?????????? ???? ??????? ??????????? ????? ?????????? ?????????????.
???? ???????? 340 ????? ??????? (?? ??? ????? 30% - ?????? ???????????).
??? ?????? ?????????????? ????????? ? ??????? ??????????? ????????? ? ??????? 2001 ?.
? ??????? ??????????.

??????????? ????????? ??? ???????? ????????.

???? ????????????? ??? ???????? ???????? ??????? ???????, ??????,
???????????? ??????????? ? ?.?.

???? 1000 ??????

From stevena at permanent.cc  Sat Apr  7 16:32:23 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <3928573C.EFEB5271@myself.com>
Message-ID: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>

<html>
At 02:38 PM 5/21/2000 -0700, Wayne Izatt wrote:<br>
<blockquote type=cite cite>Hi all. I've built and installed a mod_python enabled apache. However,<br>
I'm not sure what, if any, directives I need to add to httpd.conf to get<br>
it to pass .py files to the python handler. When I point my browser at<br>
the test script, all that I get is the script in the browser window.<br>
<br>
Perhaps someone has a sample httpd.conf (just the handler stuff will do)<br>
or a vanilla .htaccess (if that's where the directives should go).<br>
<br>
(Yes, I've followed the installation instructions, but something simple<br>
is still eluding me).</blockquote><br>
I'm having the same experience.<br>
<br>
I tried the following directives:<br>
<br>
Alias /python /usr/local/apache/htdocs/python<br>
<br>
&lt;Location /python/&gt;<br>
&nbsp;&nbsp;&nbsp; AllowOverride All<br>
&nbsp;&nbsp;&nbsp; AddHandler python-program .py<br>
&nbsp;&nbsp;&nbsp; PythonDebug<br>
&nbsp;&nbsp;&nbsp; PythonHandler test<br>
&lt;/Location&gt;<br>
<br>
<br>
When I try loading the page, I get this error:<br>
<br>
\nERROR mod_python: &quot;PythonHandler test&quot;<br>
<br>
Traceback (innermost last):<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 107, in Dispatch object = self.resolve_object(module_name, object_str)<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 70, in resolve_object raise &quot;ResolveError&quot;, &quot;Couldn't resolve object '%s' in module '%s'.&quot; % \<br>
<br>
ResolveError: Couldn't resolve object 'handler' in module 'test'.<br>
<br>
NOTE: More output from other handlers, if any, may follow. This will NOT happen, and request processing will STOP at this point when you remove PythonDebug directive. <br>
<br>
<br>
I'm not quite sure what I'm doing wrong.&nbsp; Any ideas?<br>
<br>
<br>
steve</html>



From stevena at permanent.cc  Sat Apr  7 16:32:29 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] apache compile problems
Message-ID: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>

Hi,

I'm trying to compile apache with mod_python and I'm getting the following error:

[root@catatonia apache_1.3.12]# ./configure --activate-module=src/modules/extra/mod_python.c --prefix=/usr/local/apache --enable-module=all
Configuring for Apache, Version 1.3.12
 + using installation path layout: Apache (config.layout)
 + activated python module (modules/extra/mod_python.c)
Creating Makefile
Creating Configuration.apaci in src
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
cd ..; gcc  -DLINUX=2 -DUSE_HSREGEX -DUSE_EXPAT -I./lib/expat-lite `./apaci` -I/usr/include/python1.5    -o helpers/dummy helpers/dummy.c   -lm -lcrypt -lndbm -ldb /usr/lib/python1.5/config/libpython1.5.a   -ldl
gcc: /usr/lib/python1.5/config/libpython1.5.a: No such file or directory
make: *** [dummy] Error 1
Creating Makefile in src
 + configured for Linux platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + checking for system header files
 + adding selected modules
    o rewrite_module uses ConfigStart/End
 + using -lndbm for DBM support
      enabling DBM support for mod_rewrite
    o dbm_auth_module uses ConfigStart/End
    o db_auth_module uses ConfigStart/End
      using Berkeley-DB/2.x for mod_auth_db (-ldb)
    o python_module uses ConfigStart/End
 + using -ldl for vendor DSO support
 + checking sizeof various data types
 + doing sanity check on compiler and options
** A test compilation with your Makefile configuration
** failed.  The below error output from the compilation
** test will give you an idea what is failing. Note that
** Apache requires an ANSI C Compiler, such as gcc. 

======== Error Output for sanity check ========
============= End of Error Report =============

 Aborting!


I have no directory /usr/lib/python1.5/config, though the parent of that dir does exist.  I just freshly installed python 1.5.2 before trying the above.  Platform is Red Hat Linux 6.2.  Any ideas?


steve




From stevena at permanent.cc  Sat Apr  7 16:32:30 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] [SOLVED] apache compile problems
In-Reply-To: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521002528.015faf08@phear.dementian.com>

For some reason, the original installation of python on my system didn't have a config dir inside /usr/lib/python1.5.  I reinstalled python and it made sys.exec_prefix /usr/local; however, it didn't replace the old copies of python sitting in /usr/bin.  (It did put new copies in /usr/local/bin.)  When I deleted the old copies and created symlinks to the new copies, python then knew to look in /usr/local/lib/python1.5/config, and all was well.


steve




From stevena at permanent.cc  Sat Apr  7 16:32:35 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <Pine.LNX.4.21.0005211909500.29474-100000@saturn.ispol.com>
References: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521200358.015c0300@phear.dementian.com>

<html>
At 07:11 PM 5/21/2000 -0400, Gregory Trubetskoy wrote:<br>
<br>
<blockquote type=cite cite>This means that test.py doesn't have a function called &quot;handler&quot; defined<br>
in it.<br>
<br>
What's in your test.py?</blockquote><br>
I put exactly what the docs suggest:<br>
<br>
from mod_python import apache<br>
<br>
def handler(req):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.send_http_header()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.write(&quot;Hello World!&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return apache.OK<br>
<br>
<br>
However, I made the changes Wayne suggested, and now it works for me. :-)&nbsp; (It didn't initially, but it does now -- I can't explain why.)&nbsp; Apparently the AddModule and Directory directives did it...<br>
<br>
<br>
steve<br>
</html>



From ron at kramedjian.com  Sun Apr  8 10:13:46 2001
From: ron at kramedjian.com (Ronald E. Kramedjian)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Instalation Error
Message-ID: <002801c0c03e$822bd570$0501a8c0@D69HHG01>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3360 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/32b1ceee/smime.bin
From gdamjan at mail.net.mk  Sun Apr  8 20:19:00 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:46:14 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>; from ron@kramedjian.com on Sun, Apr 08, 2001 at 10:13:46AM -0500
References: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <20010408201900.A376@local.izmislen.mk>

> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
... 
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'

Don't use a test.py script for testing mod_python. There is already a package 
named test in the standard Python distribution, and mod_python would try to load
it instead (which should be obvious in the line above).

Use something as mptest.py.




-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at verio.net  Sun Apr  8 16:56:09 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <Pine.BSF.4.32.0104081655490.67981-100000@localhost>

use a name for your script other than "test".

Grisha

On Sun, 8 Apr 2001, Ronald E. Kramedjian wrote:

> Gentle People,
>
> Your help would be most appreciated.
>
> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
>
> Ronald E. Kramedjian
> ------------------------------------------------------------------------------------------
>
> Mod_python error: "PythonHandler test"
>
> Traceback (most recent call last):
>
>   File "c:\python20\lib\mod_python\apache.py", line 180, in Dispatch
>     object = resolve_object(self.req, module, object_str, silent)
>
>   File "c:\python20\lib\mod_python\apache.py", line 396, in resolve_object
>     raise AttributeError, s
>
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'
>
> -----------------------------------------------------------------------------------------
>
>
>


From victor at prodigy.net  Sun Apr  8 17:38:31 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
Message-ID: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>


Sorry for a long message, but this requires a bit of explanation. I 
appreciate your patience in advance.

I have a bunch of python legacy code that used to be part of a large 
CGI-based system. This code simply used print statements to output HTML as 
follows:

def foo():
         print 'html1'
         print 'html2'

Now I want to convert CGI to mod_python, but I would like to re-use the 
legacy code with as little re-writing as possible (obviously the legacy 
code is a lot lengthier and more complicated than the example above). I am 
using the publisher module, which requires my code to return a string 
containing all of the HTML. So I thought I would be clever and do something 
like this:

import sys, cStringIO
def handler(req):
         out =  sys.stdout = StringIO()
         foo()
         return out

This works great as long as the second request does not arrive before the 
first one is done. Otherwise, the output gets screwed up. Since "out" is a 
local variable, each request has its own instance, but sys.stdout is a 
global. When the second request arrives, sys.stdout gets reassigned and the 
rest of the output produced by print statements in the foo() function goes 
to the new StringIO object. For example, if the second request arrives and 
gets executed between the two print statements of the first request, then 
the first request's output could be  'html1\n' and the second request's 
output could be 'html2\nhtml1\nhtml2\n'.

Has anyone dealt with such a situation? Any clever suggestion would be 
appreciated as I hate to have to go into all the legacy code and change it 
to something like this:

def foo():
         out = 'html1\n'
         out = out + 'html2\n'
         return out

def handler(req):
         return foo()

Thanks in advance.
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/b9ac82b3/attachment.htm
From grisha at verio.net  Sun Apr  8 21:19:02 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>
Message-ID: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>


Victor -

Rather than invent ways to deal with legacy CGI code, I would bite the
bullet and rewrite the code without the use of "print". There are too many
subtle gotchas with simulating CGI...

Grisha



On Sun, 8 Apr 2001, Victor Muslin wrote:

>
> Sorry for a long message, but this requires a bit of explanation. I
> appreciate your patience in advance.
>
> I have a bunch of python legacy code that used to be part of a large
> CGI-based system. This code simply used print statements to output HTML as
> follows:
>
> def foo():
>          print 'html1'
>          print 'html2'
>
> Now I want to convert CGI to mod_python, but I would like to re-use the
> legacy code with as little re-writing as possible (obviously the legacy
> code is a lot lengthier and more complicated than the example above). I am
> using the publisher module, which requires my code to return a string
> containing all of the HTML. So I thought I would be clever and do something
> like this:
>
> import sys, cStringIO
> def handler(req):
>          out =  sys.stdout = StringIO()
>          foo()
>          return out
>
> This works great as long as the second request does not arrive before the
> first one is done. Otherwise, the output gets screwed up. Since "out" is a
> local variable, each request has its own instance, but sys.stdout is a
> global. When the second request arrives, sys.stdout gets reassigned and the
> rest of the output produced by print statements in the foo() function goes
> to the new StringIO object. For example, if the second request arrives and
> gets executed between the two print statements of the first request, then
> the first request's output could be  'html1\n' and the second request's
> output could be 'html2\nhtml1\nhtml2\n'.
>
> Has anyone dealt with such a situation? Any clever suggestion would be
> appreciated as I hate to have to go into all the legacy code and change it
> to something like this:
>
> def foo():
>          out = 'html1\n'
>          out = out + 'html2\n'
>          return out
>
> def handler(req):
>          return foo()
>
> Thanks in advance.
> __________________________________________________________________________________
> Victor Muslin      The power of accurate observation is frequently called
>                           cynicism by those who don't have it.
>                                        - George Bernard Shaw
>


From CHagner at fool.com  Mon Apr  9 17:26:57 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] PythonImport failure
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4804DAFD90@rover.foolhq.com>

Hi there,

This message is a continuation of a previous thread I started regarding my
difficulties in getting PythonImport to work.  (thread text is attached).

Moved my dev environment to Linux.  Still having failure of PythonImport
(see snippet below for error).  Simply put ChrisTest.py in the site-packages
directory.

[Mon Apr  9 17:10:38 2001] [notice] Apache/1.3.19 (Unix) mod_python/2.7.2
Python/2.0.42-S1.2.4 configured -- resuming normal operations
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest

Using the following directive

    PythonImport ChrisTest

Looking through mod_python.c, it's apparently failing on trying to import
the module (duh), but I haven't jumped in deeper.  Any help/ideas would be
greatly appreciated...  Thanks.

Chris
chagner
at
fool
dot
com

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
Sent: Tuesday, March 27, 2001 4:01 PM
To: Chris Hagner
Cc: 'mod_python@modpython.org'
Subject: RE: [mod_python] PythonImport failure



Try the mod_python 2.7.2 DLL and see if the problems persist

Grisha

On Tue, 27 Mar 2001, Chris Hagner wrote:

> A specific question about why PythonImport works for some modules and not
> for others.
>
> 1.  The following statement works.  It compiles/imports apache.py at
server
> startup.
>
> PythonImport mod_python.apache
>
> 2.  Now, when I create a dummy module in mod_python/MyObject.py
>
> def myFunction():
>     return "MyObject.myFunction()"
>
> class MyObject:
>
>     def __init__(self):
>         pass
>
> The following statement does not work.
>
> PythonImport mod_pytnon.MyObject
>
> Here's the error in error.log
> [Tue Mar 27 13:07:56 2001] [error] directive_PythonImport: error import
> mod_python.MyObject
> TypeError: must assign list (not "string") to slice
>
> Any help on this error msg?
>
> BTW, the first error line appears at start up... second appears upon
> immediate shutdown... probably just a buffer thing, but I thought I'd
share.
>
> 3.  I also tried import a base module which worked fine.
>
> PythonImport string
>
> 4.  But when I created a copy of string.py and simply renamed it, it
didn't
> work.
>
> PythonImport copyofstring
>
> Any thoughts on why mod_python appears to like some modules and not
others?
>
> Thanks in advance.
>
> Chris
>
>
>
> -----Original Message-----
> From: Chris Hagner [mailto:CHagner@fool.com]
> Sent: Thursday, March 15, 2001 12:07 PM
> To: 'Gregory (Grisha) Trubetskoy'
> Cc: 'mod_python@modpython.org'
> Subject: RE: [mod_python] PythonImport failure
>
>
> Thanks for the response.  For my tests, mypackage is a package named
> 'toolkit' and the mymodule is a module named 'brandconfig'.
>
> Oh yeah, I'm doing this on Apache/1.3.19 (Win32) mod_python/2.7.1
> Python/2.0.  I'm on Win2K (for development, sigh).
>
> INTERACTIVE SESSION TEST:
> ******************************
>
> Here's my python interactive session... the module only contains a single
> variable x.
>
> >>> import toolkit.brandconfig
> >>> dir(toolkit.brandconfig)
> ['__builtins__', '__doc__', '__file__', '__name__', 'x']
> >>> toolkit.brandconfig.x
> 123
> >>>
>
> So, the module is importable in my python environment.
>
>
> APACHE PYTHONIMPORT TEST:
> ******************************
>
> Just to be sure, I ran the apache test again.  Here's the httpd.conf
entry.
> Nothing shocking.
>
> <Directory "D:/site/brand1/htdocs">
>    AddHandler python-program .py
>    PythonHandler toolkit.publisher
>    PythonDebug on
>    PythonImport toolkit.brandconfig
> </Directory>
>
> Here's the response in the log upon starting apache.
>
>    [Thu Mar 15 11:39:10 2001] [error] directive_PythonImport: error
> importing toolkit.brandconfig
>
> Same as before.  Now, just to be sure, I blew away the brandconfig.py file
> (and the .pyc) so that it shouldn't even find it (just to see if I could
get
> a different error if it didn't even exist).  Result: No change.  Same
error
> in error.log.  Apparently, it's not even finding it.
>
> APACHE PYTHON SCRIPT TEST:
> ******************************
>
> So, it wasn't importing it on start up.  How about a python script in
> mod_python?
>
> Here's the code blurb...
>
> 	import foolkit.brandconfig
>        out_string = "foolkit.brandconfig.x: %s \n"% foolkit.brandconfig.x
>
> Did it work?  yup, the page displayed
>
> 	foolkit.brandconfig.x: 123
>
>
>
> Yes, I have read through the documentation and my need is to initialize a
> number of objects (i.e. dbconn pool) for use throughout my applications.
> Now, I am using a custom handler, so I could simply have the handler do
this
> initialization the first time it runs, but the PythonImport appeared to be
a
> code-free way to achieve this goal.  Do you all think this is a case where
I
> *really* need it?  If not, could someone share an example of when it
really
> deserves to be used?
>
> Thanks again for the help.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
> Sent: Thursday, March 15, 2001 11:26 AM
> To: Chris Hagner
> Cc: 'mod_python@modpython.org'
> Subject: Re: [mod_python] PythonImport failure
>
>
>
> Chris -
>
> Have you tried
>
> >>> import mypackage.mymodule
>
> from an interactive Python session?
>
> Also, regarding PythonPath - if you read documentation carefully, you'll
> notice that it says that no other directives have any effect at the time
> PythonImport is executed.
>
> Generally, you should not use PythonImport unless you *really* need it,
> which is almost never the case.
>
> Grisha
>
>
> On Thu, 15 Mar 2001, Chris Hagner wrote:
>
> > Greetings,
> >
> > I'm trying to get the PythonImport command to work.  Been through the
> > documentation, but it appears to want more than simply inserting
> >
> >    PythonImport mypackage.mymodule
> >
> > within my Directory tags in httd.conf.
> >
> > While mypackage.mymodule is under the standard python lib directory
> > (therefore should be found through the sys.path), the system spat out
the
> > following...
> >
> >     ...[error] directive_PythonImport: error importing
mypackage.mymodule
> >
> > I then moved the module to a different directory and appended that
> directory
> > to the sys.path using the PythonPath command (just to see if that
allowed
> it
> > to find the module).  No luck.
> >
> > I've found a handful of posts from June and August of last year, but no
> > posted solutions to getting the PythonImport command to work correctly.
> Of
> > course, there's a CVS commit with the comment "PythonImport works now"
so
> > I'm pretty sure it's me...
> >
> > As a random test, I tried a standard module...
> >
> >    PythonImport sys
> >
> > which appeared to work (no error msg), but I'm not really confident that
> > this was a meaningful test.
> >
> > Thanks in advance.
> >
> > Chris
> > chagner _at_ fool _dot_ com
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From marcf at becomm.com  Mon Apr  9 22:44:58 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] subintrepreters
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>

Hi,

I want to make sure that I understand the subinterpreters that are used by
mod_python.

Here is my scenario: I have two handlers defined in a single .py file.   One
of them submits files to a database and the other retrieves files from that
same database.  To avoid hitting the backend database, there is a fair
amount of caching going within the python code.

Now the question is whether the cached objects created by the submit handler
are shared with the one from the retrieve handler.  Anyone have a definitive
answer?

Thanks,
Marc

From grisha at verio.net  Tue Apr 10 10:49:32 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] subintrepreters
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104101048550.87097-100000@localhost>

By default, if they are in the same virtual server, they share the
interpreter.

Grisha

On Mon, 9 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I want to make sure that I understand the subinterpreters that are used by
> mod_python.
>
> Here is my scenario: I have two handlers defined in a single .py file.   One
> of them submits files to a database and the other retrieves files from that
> same database.  To avoid hitting the backend database, there is a fair
> amount of caching going within the python code.
>
> Now the question is whether the cached objects created by the submit handler
> are shared with the one from the retrieve handler.  Anyone have a definitive
> answer?
>
> Thanks,
> Marc
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From grisha at verio.net  Tue Apr 10 22:22:00 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] some issues
In-Reply-To: <20010215150733.A20391@siemens.atea.be>
Message-ID: <Pine.BSF.4.32.0104102220290.93109-100000@localhost>

Joost -

This was a bug with reusing a pointer to the internal representation of a
Python string after resizing it. For some reason on Linux and FreeBSD it
caused no problems, but showed on Solaris.

This should be fixed in the latest code available via CVS.

Grisha

On Thu, 15 Feb 2001, Joost Yervante Damad wrote:

> Hello,
>
> A friend of me discovered wierd bug in publisher :
>
> def tst(req, arg='none', test='none', longname='none'):
>         req._content_type_set = 0
>         return "Arguments are '%s', '%s' and '%s'" % (arg, test, longname)
>
> if we now do:
>
> https://r2d2.iplab.atea.be:8081/py/test.py/tst?arg=x&test=y&longname=z
>
> the result is:
>
> Arguments are '', '' and 'z'
>
> Aparently short names are not getting into the functions.
> Long names are. Or is this caused by name clashes?
>
> We tested this both with 2.7.1 and 2.7.2 on Solaris 2.6
> with apache 1.3.14 with SSL and mod_python statically linked.
>
> Another error I found:
>
> The handling of _content_type_set seems to be broken.
>
> publisher no longer functioned, bailin out at:
>
> if not req._content_type_set:
>
> giving an exeception stating that that variable was not found.
>
> Removing that part and setting the content_type to
> "text/html" is our current workaround.
>
> Any thoughts?
>
> Joost
>
> P.S.: but we love mod_python :)
>
> --
> Joost Damad - Siemens ICN D NC A - +3214252297
> --
> Five is a sufficiently close approximation to infinity.
>        -- Robert Firth
> "One, two, five."
>        -- Monty Python and the Holy Grail
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From mgpl1-NoTinnedHamThanks at zeta.org.au  Thu Apr 12 10:18:28 2001
From: mgpl1-NoTinnedHamThanks at zeta.org.au (Wilson Fletcher)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <3AD4F453.CE85A3AD@zeta.org.au>

Wouldn't it be better just to buffer the output and then just use one output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

I don't understand the problem with redirecting stdout. My understanding of Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session that fires up
it's own instance of the code. Is this not true ?

Secondly the idea of just rewriting something that works doesn't seem to be a good idea
to me. I would say rewrite if you're finding you are doing a lot of mainatainence on
existing code however if the code works well and has been tested, deployed etc, it
would be better to interfere with it as little as possible unless you already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

Wilson

"Gregory (Grisha) Trubetskoy" wrote:

> Victor -
>
> Rather than invent ways to deal with legacy CGI code, I would bite the
> bullet and rewrite the code without the use of "print". There are too many
> subtle gotchas with simulating CGI...
>
> Grisha
>
> On Sun, 8 Apr 2001, Victor Muslin wrote:
>
> >
> > Sorry for a long message, but this requires a bit of explanation. I
> > appreciate your patience in advance.
> >
> > I have a bunch of python legacy code that used to be part of a large
> > CGI-based system. This code simply used print statements to output HTML as
> > follows:
> >
> > def foo():
> >          print 'html1'
> >          print 'html2'
> >
> > Now I want to convert CGI to mod_python, but I would like to re-use the
> > legacy code with as little re-writing as possible (obviously the legacy
> > code is a lot lengthier and more complicated than the example above). I am
> > using the publisher module, which requires my code to return a string
> > containing all of the HTML. So I thought I would be clever and do something
> > like this:
> >
> > import sys, cStringIO
> > def handler(req):
> >          out =  sys.stdout = StringIO()
> >          foo()
> >          return out
> >
> > This works great as long as the second request does not arrive before the
> > first one is done. Otherwise, the output gets screwed up. Since "out" is a
> > local variable, each request has its own instance, but sys.stdout is a
> > global. When the second request arrives, sys.stdout gets reassigned and the
> > rest of the output produced by print statements in the foo() function goes
> > to the new StringIO object. For example, if the second request arrives and
> > gets executed between the two print statements of the first request, then
> > the first request's output could be  'html1\n' and the second request's
> > output could be 'html2\nhtml1\nhtml2\n'.
> >
> > Has anyone dealt with such a situation? Any clever suggestion would be
> > appreciated as I hate to have to go into all the legacy code and change it
> > to something like this:
> >
> > def foo():
> >          out = 'html1\n'
> >          out = out + 'html2\n'
> >          return out
> >
> > def handler(req):
> >          return foo()
> >
> > Thanks in advance.
> > __________________________________________________________________________________
> > Victor Muslin      The power of accurate observation is frequently called
> >                           cynicism by those who don't have it.
> >                                        - George Bernard Shaw
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From victor at prodigy.net  Fri Apr 13 02:35:02 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <3AD4F453.CE85A3AD@zeta.org.au>
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <4.3.2.7.0.20010413023353.00c188c0@pop.prodigy.net>

At 10:18 AM 4/12/2001 +1000, you wrote:
Wouldn't it be better just to buffer the output and then just use one 
output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

yes, this is what he is suggesting and exactly what I was trying to avoid 
in the first place. Also, while not being a CGI/Web guru, I can imagine a 
number of potential problems with having to buffer all of the output before 
sending it to the browser. First of all the output may be large and it may 
not be practical to assemble it in memory. Second it may be useful to allow 
browser to start rendering some output before it is completely created if 
it takes a long time to create dynamic output. Third, if the browser 
cancelled the request the only way to find out is to try to send the reply 
and get some sort of bad status. Imagine a script that does a set of 
time-consuming database queries to create the output. it would be useful to 
test whether the request was cancelled after each query by attempting to 
send something back (a space character perhaps) to see whether the socket 
is still open before doing the rest of the queries. Perhaps somebody could 
suggest how these scenarios could be handled with mod_python?

I don't understand the problem with redirecting stdout. My understanding of 
Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session 
that fires up
it's own instance of the code. Is this not true ?

I am using the "publisher" capability of mod_python. This is how I imagine 
it works (not having had the time to go through the code). There is a 
function -- call it handler() -- that handles requests. Let's say there are 
two identical concurrent requests. Both are handled by the same instance of 
Python interpeter that calls handler() for each one. All variables 
instantiated inside the handler() function are local to the function and, 
therefore, each request has its own instance of these variables. Variables 
that are module level (of the module where the handler() function is) of 
class-level are global, i.e. there is one instance of them in the 
interpreter and, therefore, they are shared by the requests. If this 
weren't the case you couldn't open a database connection once, for example, 
and keep it open instead of re-opening it for each request. sys.stdout 
happens to be a global variable and, therefore, shared by multiple 
instances of handler() and consequently by the requests. If code in one 
request reassigns it, the code in the other concurrent requests is affected.

Secondly the idea of just rewriting something that works doesn't seem to be 
a good idea
to me. I would say rewrite if you're finding you are doing a lot of 
mainatainence on
existing code however if the code works well and has been tested, deployed 
etc, it
would be better to interfere with it as little as possible unless you 
already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

I think you are making my point here. I did not want to re-write anything.


Wilson

"Gregory (Grisha) Trubetskoy" wrote:

 > Victor -
 >
 > Rather than invent ways to deal with legacy CGI code, I would bite the
 > bullet and rewrite the code without the use of "print". There are too many
 > subtle gotchas with simulating CGI...
 >
 > Grisha
 >
 > On Sun, 8 Apr 2001, Victor Muslin wrote:
 >
 > >
 > > Sorry for a long message, but this requires a bit of explanation. I
 > > appreciate your patience in advance.
 > >
 > > I have a bunch of python legacy code that used to be part of a large
 > > CGI-based system. This code simply used print statements to output HTML as
 > > follows:
 > >
 > > def foo():
 > > print 'html1'
 > > print 'html2'
 > >
 > > Now I want to convert CGI to mod_python, but I would like to re-use the
 > > legacy code with as little re-writing as possible (obviously the legacy
 > > code is a lot lengthier and more complicated than the example above). I am
 > > using the publisher module, which requires my code to return a string
 > > containing all of the HTML. So I thought I would be clever and do 
something
 > > like this:
 > >
 > > import sys, cStringIO
 > > def handler(req):
 > > out = sys.stdout = StringIO()
 > > foo()
 > > return out
 > >
 > > This works great as long as the second request does not arrive before the
 > > first one is done. Otherwise, the output gets screwed up. Since "out" is a
 > > local variable, each request has its own instance, but sys.stdout is a
 > > global. When the second request arrives, sys.stdout gets reassigned 
and the
 > > rest of the output produced by print statements in the foo() function goes
 > > to the new StringIO object. For example, if the second request arrives and
 > > gets executed between the two print statements of the first request, then
 > > the first request's output could be 'html1\n' and the second request's
 > > output could be 'html2\nhtml1\nhtml2\n'.
 > >
 > > Has anyone dealt with such a situation? Any clever suggestion would be
 > > appreciated as I hate to have to go into all the legacy code and change it
 > > to something like this:
 > >
 > > def foo():
 > > out = 'html1\n'
 > > out = out + 'html2\n'
 > > return out
 > >
 > > def handler(req):
 > > return foo()
 > >
 > > Thanks in advance.
 > >
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010413/96c1a4d3/attachment.htm
From nineclue at bigfoot.com  Sat Apr 14 11:07:12 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable?
Message-ID: <Pine.LNX.4.10.10104141052440.2413-100000@mrham.hamslab.com>

Greetings...

I'm trying to implement custom session handler like PHP.
I think persistent variables that share between subinterpreters would
be nice to hold session variables.
When I tried, I think persistent variables are not shared to
subinterpreter.

Sorry for my poor English... And thanks in advance for any comment or
answer.

Suhku Huh

Followings are my custom handler.

from mod_python import apache
from base64 import decodestring, encodestring
from cPickle import loads, dumps
import pg

PG_DB = 'pyweb'
_SESSION_PATH = ( '/cluelabs', )
_MODPYTHONID = 'MODPYTHONID'

session_data = {}

class session_var:
	def __init__(self, con, id = None):
		self.con = con
		if id:
			self.new = 0
			r = self.con.query("select val from session where sess_id = '%s'" % id)
			if not r.ntuples():
				self.data = {}
			else:
				val = r.getresult()[0][0]
				self.data = loads(decodestring(val))
		else:
			import md5, time

			self.new = 1
			id =  md5.new(str(time.time())).hexdigest()
			self.data = {}
		self.id = id
	def __del__(self):
		if len(self.data) == 0:
			return
		self.save()
	def __getitem__(self, name):
		if self.data.has_key(name):
			return self.data[name]
		else:
			return None
	def __setitem__(self, name, value):
		self.data[name] = value
	def __delitem__(self, name):
		try:
			del self.name[name]
		except:
			pass
	def __len__(self):
		return len(self.data)
	def has_key(self, name):
		return self.data.has_key(name)
	def save(self):
		if self.new:
			self.con.query("insert into session values ('%s', '%s')" % (self.id, encodestring(dumps(self.data))))
		else:
			self.con.query("update session set val = '%s', create_time = current_timestamp where sess_id = '%s'" % (encodestring(dumps(self.data)), self.id))
		
def _get_cookie(req):
	if req.headers_in.has_key('Cookie'):
		ret = {}
		cookies = req.headers_in['Cookie'].split(';')
		for cookie in cookies:
			equal_pos = cookie.index('=')
			key, value = cookie[:equal_pos], cookie[equal_pos+1:]
			ret[key.strip()] = value.strip()
		return ret
	else:
		return None

def _start_session(req, con):
	global session_data

	py_log = open('/home/nineclue/py_log', 'a')
	py_log.write('Session_data length : %d\n' % len(session_data))
	py_log.close()
	if req.cookie and req.cookie.has_key(_MODPYTHONID):
		req.session_var = session_data[req.cookie[_MODPYTHONID]]
	else:
		req.session_var = session_var(con)
		req.headers_out.add('Set-Cookie', '%s = %s' % (_MODPYTHONID, req.session_var.id))
		req.send_http_header()
		session_data[req.session_var.id] = req.session_var

def _get_con():
	global pg_con

	try:
		con = pg_con
	except NameError:
		pg_con = pg.connect(PG_DB)
		con = pg_con
	
	return con

def handler(req):
	global session_data

	if req.cookie:
		for key in req.cookie.keys():
			req.write('Cookie (%s) : (%s)<BR>' % (key, req.cookie[key]))
	req.write('Session Variable has %d items' % len(session_data))
	if req.session_var.has_key('count'):
		req.session_var['count'] = req.session_var['count'] + 1
	else:
		req.session_var['count'] = 0
	req.write('Counter : %02d' % req.session_var['count'])
	return apache.OK

def headerparserhandler(req):
	name_split = req.uri.rfind('/')
	req.path, req.pname = req.uri[:name_split], req.uri[name_split + 1:]

	req.cookie = _get_cookie(req)
	if req.path in _SESSION_PATH:
		con = _get_con()
		_start_session(req, con)

	return apache.OK

When I try, counters are correctly increased at first time but Key error
is raised after and py_log (used at _start_session function) shows length
of session_data is 0.

I'm using Apache 1.3.19 with statistically compiled mod_python 2.7.2
Python/2.0 (thread enabled) in Mandrake 7.1.
 


From nineclue at bigfoot.com  Tue Apr 17 16:32:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>

Greetings...

I've posted somewhat long python program during development, which
may need pg module, postgres running with pyweb db created etc...

Here's short version, which don't work as I expected.

from mod_python import apache

session_data = {}
session_counter = 0

def handler(req):
        global session_data, session_counter

        if session_data.has_key('counter'):
                session_data['count'] = session_data['count'] + 1
        else:
                session_data['count'] = 0

        session_counter += 1
        req.write('<HTML>')
        req.write('Session data has %d items<BR>' % len(session_data))
        req.write('Counter : %02d<BR>' % session_data['count'])
        req.write('Alternative Counter : %02d<BR>' % session_counter)
        req.write('</HTML>')
        return apache.OK

When I loaded the page and tried several reloads, session_data dictionary
variable is never increased and session_counter variable is increased
after several tries. What I expected was both variable increase at each
reload.

In my thoughts, dictionary variable is not supported and main interpreter
is created in each Apache processes, which is shared by subinterpreters.

Sorry for posting again, long message and my poor English.

Thanks in advance.


From victor at prodigy.net  Tue Apr 17 08:25:04 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com
 >
Message-ID: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>

I don't see where you are creating a dictionary entry with a key 'counter'. 
Therefore, the statement in the else clause:

         session_data['count'] = 0

will always be executed. Perhaps you want to say:

          if session_data.has_key('count'):

At 04:32 PM 4/17/01 +0900, nineclue@bigfoot.com wrote:
>Greetings...
>
>I've posted somewhat long python program during development, which
>may need pg module, postgres running with pyweb db created etc...
>
>Here's short version, which don't work as I expected.
>
>from mod_python import apache
>
>session_data = {}
>session_counter = 0
>
>def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
>When I loaded the page and tried several reloads, session_data dictionary
>variable is never increased and session_counter variable is increased
>after several tries. What I expected was both variable increase at each
>reload.
>
>In my thoughts, dictionary variable is not supported and main interpreter
>is created in each Apache processes, which is shared by subinterpreters.
>
>Sorry for posting again, long message and my poor English.
>
>Thanks in advance.
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://www.modpython.org/mailman/listinfo/mod_python

__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010417/01836390/attachment.htm
From nineclue at bigfoot.com  Tue Apr 17 21:52:54 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>
Message-ID: <Pine.LNX.4.10.10104172142090.7770-100000@mrham.hamslab.com>

You're right. :)

I had the obsession that dictionary is not correctly handled in
mod_python. So, I didn't even looked at the source second time.
Sorry about that.

I found that dictionary variable is handled by mod_python same as simple
variable. But it's still increased after several retries.
My apache configuration of StartServers and MinSpareServers are 
5. Main interpreter per apache process, right? Or I'm still confused or
under the delusion.


From grisha at modpython.org  Tue Apr 17 10:00:47 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>

I think you have a bug because you have "count" and "counter", so it may
not work for this reason alone.

But also - if this is on UNIX, then you have to keep in mind that Apache
runs as several independent processes, and you can only have persistance
per-process. There is no "simple" way to have cross-process persistance.

On Win32, where Apache runs as a single process, it should work OK.

Grisha

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> Greetings...
>
> I've posted somewhat long python program during development, which
> may need pg module, postgres running with pyweb db created etc...
>
> Here's short version, which don't work as I expected.
>
> from mod_python import apache
>
> session_data = {}
> session_counter = 0
>
> def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
> When I loaded the page and tried several reloads, session_data dictionary
> variable is never increased and session_counter variable is increased
> after several tries. What I expected was both variable increase at each
> reload.
>
> In my thoughts, dictionary variable is not supported and main interpreter
> is created in each Apache processes, which is shared by subinterpreters.
>
> Sorry for posting again, long message and my poor English.
>
> Thanks in advance.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at bigfoot.com  Tue Apr 17 23:34:02 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>
Message-ID: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>

Thank you for the point.

I have other questions. 

I'm trying to implement session like mechanism using mod_python. If
interpreter is created in each processes, is there a way to make a
variable really persistent? I think I should make some daemon that
connects thru named pipe to get/pass session information. Is there
any other way?

Second, in my first posting, I've created some ugly class that is attached
to Request object. I thought after handling of client's request, the
request object would be deleted. Am I right? Then what happens to the
attached class instance? If it is destructed with req object, I can save
session data in __del__ function. If not, should I hook cleanup phase to
save session data?

Lastly, I can't get mailing list's whole raw archive link. I just got 404
error.

I think I've already posted enough mails to the list. I AM really sorry.



From grisha at modpython.org  Tue Apr 17 10:50:07 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104171048001.76504-100000@localhost>

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

Yes, it's called cookies.

> Second, in my first posting, I've created some ugly class that is attached
> to Request object. I thought after handling of client's request, the
> request object would be deleted. Am I right? Then what happens to the
> attached class instance? If it is destructed with req object, I can save
> session data in __del__ function. If not, should I hook cleanup phase to
> save session data?

__del__ is not something you should rely on. You should register a cleanup
instead.

Grisha


From gdamjan at mail.net.mk  Wed Apr 18 00:55:47 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>; from nineclue@bigfoot.com on Tue, Apr 17, 2001 at 11:34:02PM +0900
References: <Pine.BSF.4.32.0104170957580.75906-100000@localhost> <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <20010418005547.A237@local.izmislen.mk>

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

I've been thinking about session managment for mod_python too, and it seems
like an important issue. I'd sugest we develop a common interface to session
managment, and then write specific modules that handle the job, by ways of
cookies, databases, special daemons etc...

Any ideas?

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From nineclue at bigfoot.com  Wed Apr 18 09:58:57 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.LNX.4.10.10104180948390.8965-100000@mrham.hamslab.com>


On Wed, 18 Apr 2001, Damjan wrote:

> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...

In my opinion, best way would be using shared memory if possible. I'm not
good at Apache & python, but I found that mod_auth_digest in Apache 2.0
supports session caching accross processes using shared memory (New
Features in Apache 2.0 page). 

A general dictionary variable per main interpreter. So handler can
register it's own variable within dictionary variable with a key, that
could be used in session handling, caching small tables (DBMS data)...


From grisha at modpython.org  Tue Apr 17 23:24:45 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>

In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ???????????? ??????????????????????
> Skopje, Macedonia		|           ????????????, ????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From benno at sesgroup.net  Wed Apr 18 13:58:15 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>; from grisha@modpython.org on Tue, Apr 17, 2001 at 11:24:45PM -0400
References: <20010418005547.A237@local.izmislen.mk> <Pine.BSF.4.32.0104172311590.82748-100000@localhost>
Message-ID: <20010418135815.A27089@sesgroup.net>

On Tue, 17 Apr 2001, Gregory (Grisha) Trubetskoy wrote:

> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.

<snip>

As someone who has used mod_python for a rather large project i have to 
agree with Grisha here. I don't want want all the state stuff in there on
project where I don't need it. mod_python gives me a platform where I can
people those things on top as I need them.

Also I don't think that you really need shared memory for session etc
since you can usually store that to a database, which gives you other
advantages. A decent database impl. should be fast enough to cope with
that kinda thing.

My 2c worth,

Benno

> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it seems
> > like an important issue. I'd sugest we develop a common interface to session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ???????????? ??????????????????????
> > Skopje, Macedonia		|           ????????????, ????????????????????
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From CHagner at fool.com  Wed Apr 18 00:40:29 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>

On the issue of supporting modules (i.e. user sessions), there are simply
too many ways to implement something like that to make it worth coupling it
to mod_python.  You'll either try to be too much for too many people (the
classic framework error) or you'll be so custom to your needs that your
audience is just you (not a bad thing, just not a place for a solution like
mod_python).

I completely agree with Grisha that even the handler is outside of the core
mod_python functionality.  That being said, a listing of available handlers
on the web site would be very useful for those starting/considering using
mod_python.  I do think that having this area up there (even it's a bit
spares initially) will motivate others to share their handlers/frameworks
that are used with mod_python.

What other handlers have people written?  I've got one that implements a
servlet-like call mechanism (thereby avoiding the urls being mapped to
script files).  It's not for everyone, but a perfect example of a decision
that was made for a specific need.

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Tuesday, April 17, 2001 11:25 PM
To: Damjan
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...



In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it
seems
> like an important issue. I'd sugest we develop a common interface to
session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ????????????
??????????????????????
> Skopje, Macedonia		|           ????????????,
????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From woodm at equire.com  Wed Apr 18 00:10:12 2001
From: woodm at equire.com (Matthew D. Wood)
Date: Fri Jan  9 21:46:15 2004
Subject: [mod_python] Persistent variable again...
References: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <3ADD2FC3.4109069D@equire.com>

I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has some
sort of shared memory, then obviously, this is a potential place.  Other places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the goal
of mod_python is to give access, through a python interface, to the internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.  If
you want a more general thing, either remove some code, or at worst, you have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From nineclue at bigfoot.com  Wed Apr 18 16:26:10 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Persistent variable again.
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <Pine.LNX.4.10.10104181615250.9552-100000@mrham.hamslab.com>

mod_python don't have to come with custom module, but if Apache 2.0
supports shared memory (don't know about 1.3.X) it would be nice to see
that feature available to mod_python. It's not related to custom module.
But at least we can make somewhat modified persistent variable in UNIX
systems and make our custom module or ... I think this is related to
mod_python.

On Wed, 18 Apr 2001, Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
> 
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
> 
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
> 
> Chris
> 
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
> 
> 
> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
> 
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
> 
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
> 
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
> 
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ÐÐÐ¼ÑÐÐ½
> ÐÐÐ¾ÑÐ³Ð¸ÐÐÑÐÐ¸
> > Skopje, Macedonia		|           ÐÐÐ¾Ð¿ÑÐ,
> ÐÐÐÐÐÐ¾Ð½Ð¸ÑÐ
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From CHagner at fool.com  Wed Apr 18 10:19:58 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C9B@rover.foolhq.com>

I think we're actually in agreement here...

My point was not that the handler is the wrong place for these types of
things, only that the handler is not a core part of the mod_python package.
Having just tackled a new handler and framework, I too would love to see
some more visible framework solutions for mod_python.  That being said, one
of the best things about mod_python is that it isn't really a web app
framework.  It's a barebones implementation that requires some sort of
framework (a handler or more) for an actual app to be developed.

Similarly, I don't think a session handler is 'bad', just that making it a
part of the mod_python package weighs down the implementation (for those
that don't want/use it).  One of the reasons open source development works
so well is that the software is _highly_ componentized, thereby allowing
grisha to focus on his part and whoever to focus on something like a session
handler on top of mod_python (but not as a part of it).

I think we all see value in having the functionality available, and it
appears there's just a disagreement on how it should be made available (in
relation to mod_python).

Just my thoughts.  Take 'em or leave 'em.

Chris

-----Original Message-----
From: Matthew D. Wood [mailto:woodm@equire.com]
Sent: Wednesday, April 18, 2001 2:10 AM
To: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...


I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for
the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has
some
sort of shared memory, then obviously, this is a potential place.  Other
places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data
base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the
goal
of mod_python is to give access, through a python interface, to the
internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available
and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler
not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.
If
you want a more general thing, either remove some code, or at worst, you
have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling
it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution
like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the
core
> mod_python functionality.  That being said, a listing of available
handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways
of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From richard at ccpgames.com  Wed Apr 18 16:50:36 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>

I am currently working on session management for my project.  One thing
I can't
seem to do for the life of me is to clear out a cookie on the browser
thats
connecting to the site.

    r.headers_out["set-cookie:"] = \
        "IRWB_SESSIONID=%s;" \
	  "Expires: %s;" \
        "Cache-control: no-cache;" \
        "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)

Is what I use to try and expire a cookie immediately, it may be
overkill, but
still, it doesn't work as I wish.  However, it does work if I close the
browser
and reopen it to the given site.

Am I doing something wrong?  I am pretty sure I could clear out cookies
this
way in Visual Interdev/VB/ASP.

Thanks in advance,
Richard.

From slim at maya.com  Wed Apr 18 13:28:26 2001
From: slim at maya.com (Seung Chan Lim)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] cookies/session management
References: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>
Message-ID: <034101c0c82c$f9ebcbb0$befe46c0@airwolf>

>     r.headers_out["set-cookie:"] = \
>         "IRWB_SESSIONID=%s;" \
>   "Expires: %s;" \
>         "Cache-control: no-cache;" \
>         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
>

without knowing anything about mod_python, have you tried
setting the expires section to be

Thu, 01-Jan-70 00:00:01 GMT

? (i.e. in GMT format )

what do you mean by "it works if [you] close the browser and reopen it to
the given site." ?
you mean the cookie value lingers around in a given session ? are you
checking to
see if this cookie exist on the server side code or via client-side code
like javascript or something?

I'm just grabbing stuff out of thin-air here. =)

slim






From richard at ccpgames.com  Wed Apr 18 17:45:08 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>

> -----Original Message-----
> From: Seung Chan Lim [mailto:slim@maya.com]
> Sent: 18. apr?l 2001 17:28
> To: Mod_python@modpython.org
> Subject: Re: [mod_python] cookies/session management
> 
> 
> >     r.headers_out["set-cookie:"] = \
> >         "IRWB_SESSIONID=%s;" \
> >   "Expires: %s;" \
> >         "Cache-control: no-cache;" \
> >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> >
> 
> without knowing anything about mod_python, have you tried
> setting the expires section to be
> 
> Thu, 01-Jan-70 00:00:01 GMT

Now I have :)  Oops.  Unfortunately no change in behaviour.

> what do you mean by "it works if [you] close the browser and 
> reopen it to
> the given site." ?
> you mean the cookie value lingers around in a given session ?

Yes.
If I set an expiry date in the future, the cookie lingers past browser
open and closes as would be expected.
If I set something (including the expiry thing above) that indicates
that the cookie should be expunged then:
  - If I reload the page, the cookie is still there.
  - If I close and reopen the browser, the cookie is no longer there.

> are you
> checking to
> see if this cookie exist on the server side code or via 
> client-side code
> like javascript or something?

Server side code:
  if r.headers_in.has_key('Cookie'):
    c = r.headers_in['Cookie']

Richard.

From richard at ccpgames.com  Wed Apr 18 17:49:33 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C7@control.central.ccp.cc>

> Why don't you set          "IRWB_SESSIONID=%s;" to some 
> "Expire" value. At scriptfoundry session ids are the ids to a 
> session object. When this expires we flag the object to be expired. 

Isn't that what I am doing with:
    r.headers_out["set-cookie:"] =
      "IRWB_SESSIONID=%s;"
      "Expires: Thu, 01-Jan-70 00:00:01 GMT;"
      "Cache-control: no-cache;"
      "Max-Age=0" % sessionID
?

Unfortunately, the core problem is that if they get a new session
cookie with the old one marked as expired, they build up a range of
cookies in the headers (at least until the browser gets closed I
guess).

> thanos
> PS: We have a modpython handler that adds a session object to req.

Can you elaborate on this?  It sounds interesting and relevant but
when it comes down to it, I have no idea what you mean :)

Thanks,
Richard.

From richard at ccpgames.com  Wed Apr 18 22:10:53 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>

OK, next problem :)

My handler module imports my session handling module.
However, after a given amount of time, the session module is garbage
collected.  Either that or it is my handler module that is being
garbage collected and the session module then in turn (seems more
likely).

My question is, is there any way I can keep them both in memory?

Richard.

From gdamjan at mail.net.mk  Thu Apr 19 00:47:35 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] cookies/session management
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>; from richard@ccpgames.com on Wed, Apr 18, 2001 at 05:45:08PM -0000
References: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>
Message-ID: <20010419004735.A857@local.izmislen.mk>

> > >     r.headers_out["set-cookie:"] = \
> > >         "IRWB_SESSIONID=%s;" \
> > >   "Expires: %s;" \
> > >         "Cache-control: no-cache;" \
> > >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> > >
> > 
> > the given site." ?
> > you mean the cookie value lingers around in a given session ?
> 
> Yes.
> If I set an expiry date in the future, the cookie lingers past browser
> open and closes as would be expected.
> If I set something (including the expiry thing above) that indicates
> that the cookie should be expunged then:
>   - If I reload the page, the cookie is still there.
>   - If I close and reopen the browser, the cookie is no longer there.

Maybe it's a bug in the browser?? 
Anyway, try adding "path=/;" to the cookie and see what happens.

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at modpython.org  Wed Apr 18 23:33:58 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] garbage collection problems
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>
Message-ID: <Pine.BSF.4.32.0104182332110.6507-100000@localhost>

I've never seen Python garbage-collect something that still has a
reference to it - that functionality is rock solid

more likely your apache process dies/recycles itself.

Grisha

On Wed, 18 Apr 2001, Richard wrote:

> OK, next problem :)
>
> My handler module imports my session handling module.
> However, after a given amount of time, the session module is garbage
> collected.  Either that or it is my handler module that is being
> garbage collected and the session module then in turn (seems more
> likely).
>
> My question is, is there any way I can keep them both in memory?
>
> Richard.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From richard at ccpgames.com  Thu Apr 19 10:38:19 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>

> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> 
> I've never seen Python garbage-collect something that still has a
> reference to it - that functionality is rock solid
> 
> more likely your apache process dies/recycles itself.

This does seem to be sort of what is happening - namely that apache
seems to keep running but kill the interpreter and start a new one.

Is this the way it is supposed to work?
Have I misconfigured something?
Is there anything I can do about this?

Thanks,
Richard.

From rsalz at zolera.com  Thu Apr 19 07:20:56 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] garbage collection problems
References: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>
Message-ID: <3ADECA18.EE84B888@zolera.com>

> This does seem to be sort of what is happening - namely that apache
> seems to keep running but kill the interpreter and start a new one.

Most likely the apache process is exiting and a new one starting.
Read about MaxChildRequests in the apache config docs.

From benno at sesgroup.net  Sat Apr 21 01:03:25 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] internal_redirect
Message-ID: <20010421010325.A21438@sesgroup.net>

Hi,

I was wondering if it was possible to do an internal redirect
with mod_python? Apache seems to have the ap_internal_redirect
function which takes a request pointer and an URI, which would map
to Request.internal_redirect(uri) in python.

Just wondering if this is meant to be there and I'm missing something,
or if there is another way to achieve this, or if there is a reason
it isn't implemented.

Cheers,

Benno

From grisha at modpython.org  Fri Apr 20 11:39:34 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] internal_redirect
In-Reply-To: <20010421010325.A21438@sesgroup.net>
Message-ID: <Pine.BSF.4.32.0104201137510.35720-100000@localhost>

it's not there now, it was one of the "would be nice to have" features,
but many people are asking me about it, so it does seem like a needed
feature

On Sat, 21 Apr 2001, Ben Leslie wrote:

> Hi,
>
> I was wondering if it was possible to do an internal redirect
> with mod_python? Apache seems to have the ap_internal_redirect
> function which takes a request pointer and an URI, which would map
> to Request.internal_redirect(uri) in python.
>
> Just wondering if this is meant to be there and I'm missing something,
> or if there is another way to achieve this, or if there is a reason
> it isn't implemented.
>
> Cheers,
>
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From bbhaydon at bigpond.com  Sat Apr 21 13:13:55 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
Message-ID: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>

The posts re: persistent variables highlight the
need for a site to promotes and encompasses solutions
developed with modpython as per Zend.

Does anyone have an idea for a name??
Perhaps it's worth persuing if only to get service
providers to include modpython along with modphp and
modperl as an offering.

For my own part, I've been using the modusertrack in
Apache to do cookie creation, and have a simple cache
class to store state. Although I haven't actually tried
it, I am considering using ZODB as a solution for 
storing state between interpreters.

regards,

brett

bbhaydon at bigpond dot com

From benno at sesgroup.net  Sat Apr 21 13:26:23 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>; from bbhaydon@bigpond.com on Sat, Apr 21, 2001 at 01:13:55PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>
Message-ID: <20010421132623.A30371@sesgroup.net>

On Sat, 21 Apr 2001, Brett Haydon wrote:

> The posts re: persistent variables highlight the
> need for a site to promotes and encompasses solutions
> developed with modpython as per Zend.

I'm not sure exactly what you mean by zend here?

From deneb at unixwave.org  Sat Apr 21 12:41:01 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 01:26:23PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net>
Message-ID: <20010421124101.A442@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, Brett Haydon wrote:
> Whats wrong with a real database? I think you'll run into
> far fewer concurrency issues using a database vs. ZODB.
It will be nice to have a set of classes integrated in the mod_python,
which set will manage the DBMS as same as PHP has methods to interface
itself with MySQL. 
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From benno at sesgroup.net  Sat Apr 21 21:27:35 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421124101.A442@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 12:41:01PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org>
Message-ID: <20010421212735.A30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > Whats wrong with a real database? I think you'll run into
> > far fewer concurrency issues using a database vs. ZODB.
> It will be nice to have a set of classes integrated in the mod_python,
> which set will manage the DBMS as same as PHP has methods to interface
> itself with MySQL. 


But python already has all this! I don't see any need to have 
special mod_python things when you have the entire python libraries
available.

Benno

From deneb at unixwave.org  Sat Apr 21 14:03:52 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421212735.A30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 09:27:35PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net>
Message-ID: <20010421140352.A625@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> 
> > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > Whats wrong with a real database? I think you'll run into
> > > far fewer concurrency issues using a database vs. ZODB.
> > It will be nice to have a set of classes integrated in the mod_python,
> > which set will manage the DBMS as same as PHP has methods to interface
> > itself with MySQL. 
> 
> 
> But python already has all this! I don't see any need to have 
> special mod_python things when you have the entire python libraries
> available.
Performance :) That's why.
 
> Benno

From rsalz at zolera.com  Sat Apr 21 08:16:39 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <3AE17A27.A88F64AC@zolera.com>

> > But python already has all this! I don't see any need to have
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

WTF?

How will "import mysqldb" be any faster in mod_python than in other
python programs?

Please explain how you think you'll gain performance -- are you talking
about writing special C code with a python glue layer?  For
"authentication" only?

Yuk.
	/r$

From benno at sesgroup.net  Sat Apr 21 22:16:17 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421140352.A625@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 02:03:52PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <20010421221617.B30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> > 
> > > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > > Whats wrong with a real database? I think you'll run into
> > > > far fewer concurrency issues using a database vs. ZODB.
> > > It will be nice to have a set of classes integrated in the mod_python,
> > > which set will manage the DBMS as same as PHP has methods to interface
> > > itself with MySQL. 
> > 
> > 
> > But python already has all this! I don't see any need to have 
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

Explain how you can get better performance with some mythical mod_python
database module vs native python module? Personally I think any speedup 
woudl be very marginal and not worse the extreme cost of code duplication
etc.

Benno

From deneb at unixwave.org  Sat Apr 21 19:29:34 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <3AE17A27.A88F64AC@zolera.com>; from rsalz@zolera.com on Sat, Apr 21, 2001 at 08:16:39AM -0400
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <3AE17A27.A88F64AC@zolera.com>
Message-ID: <20010421192934.A1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 08:16:39AM -0400, Rich Salz wrote:
 
> Please explain how you think you'll gain performance -- are you talking
> about writing special C code with a python glue layer?  
Yes. 

From deneb at unixwave.org  Sat Apr 21 19:37:24 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421221617.B30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 10:16:17PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net>
Message-ID: <20010421193724.B1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> Explain how you can get better performance with some mythical mod_python
> database module vs native python module? Personally I think any speedup 
> woudl be very marginal and not worse the extreme cost of code duplication
> etc.

Writing for example the MySQLdb module inside mod_python ;-).
Simply in my projects I don't care about code duplication.
    

From benno at sesgroup.net  Sun Apr 22 09:58:04 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421193724.B1540@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 07:37:24PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net> <20010421193724.B1540@lisa.unixwave.org>
Message-ID: <20010422095804.A11979@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> > Explain how you can get better performance with some mythical mod_python
> > database module vs native python module? Personally I think any speedup 
> > woudl be very marginal and not worse the extreme cost of code duplication
> > etc.
> 
> Writing for example the MySQLdb module inside mod_python ;-).
> Simply in my projects I don't care about code duplication.

Well to be blunt I think that is pretty silly. You're yet to explain how
you would be able to achieve a speed up by having a module "inside" mod_python
versus putting "import MySQLdb" at the top of you handler. The handler is 
only started once so the extra milliseconds loading a module is irrelevant.

Next you'll be saying you want special regexp handling libraries and special
string handling libraries "inside" mod_python.

If mod_python ever does get a MySQLdb module inside it I will be the first
to fork the porject. (Not that I think Grisha would ever let it happen in
the first place).

Benno

From bbhaydon at bigpond.com  Mon Apr 23 14:47:02 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>
Message-ID: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>

>>I'm not sure exactly what you mean by zend here?

Ok, maybe I was a little vague. Ignoring Zend the PHP
engine for a second, most of what Zend the site is about
is promoting peripheral code and applications that build
upon or are built using PHP.

The PHP site itself is narrowly focused on PHP the language
much like the modpython site is about modpython not 
modpython solutions.

I personally think modpython needs a community site to give
it a higher exposure. Modpython promotes a different style
of development from say PHP, asp, etc, which needs a change
of thinking to see it's advantages, and lots of example 
code.

>>Whats wrong with a real database? I think you'll run into
far fewer concurrency issues using a database vs. ZODB.

I confess to having no idea on this. ZODB seemed a simpler
way to store objects, but maybe some benchmarking will be
prudent first..

Brett


From grisha at modpython.org  Mon Apr 23 10:06:16 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>
Message-ID: <Pine.BSF.4.32.0104231003410.7351-100000@localhost>

I think it's an excellent idea.

But ideas are just that - ideas, until someone acts on them...

;-)

Grisha

On Mon, 23 Apr 2001, Brett Haydon wrote:

> I personally think modpython needs a community site to give
> it a higher exposure. Modpython promotes a different style
> of development from say PHP, asp, etc, which needs a change
> of thinking to see it's advantages, and lots of example
> code.


From marcf at becomm.com  Mon Apr 23 11:34:09 2001
From: marcf at becomm.com (=?UTF-8?B?TWFyYyBGaXVjenluc2tp?=)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] =?UTF-8?B?UHVibGlzaGVyIHByb2JsZW0u?=
Message-ID: <A9DFD9380C01D4118E740050DA7A89703862A6@becomm-mis2.becomm.com>

Hi, 

I am using mod_python 2.7.2 on a linux RH7.0 machine running apache 1.3.14
and using Python 2.0.  Both my apache.py and publisher.py modules have minor
patches (one to reload modules in apache.py properly, the other to treat
file objects correctly in publisher.py), but those patched regions of code
are not the ones that I am seeing trouble with nor do I think they are
involved with the problem I am having.  But who knows.  Bottom line, the
line numbers listed below for publisher.py and apache.py may not match up
directly with the same modules in a pristine 2.7.2 release.

Below is a trace of the problem that I am seeing.

Mod_python error: "PythonHandler mod_python.publisher"
Traceback (most recent call last):
  File "/hotbeads/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File
"/hotbeads/local/lib/python2.0/site-packages/mod_python/publisher.py", line
171, in handler
    result = apply(object, (), args)
TypeError: not enough arguments; expected 2, got 1


The odd thing is that my code seems to be called correctly. My publisher
handler has two arguments (req and xmlfile) and it successfully processes
the xmlfile and returns a correct result followed by the above text.  So, it
seems that the type error is occurring _after_ the apply() has already done
its work.  I am fairly confused as to what is going on.  Can someone help me
out?

Thanks,
Marc

From CHagner at fool.com  Mon Apr 23 23:23:28 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>

Hey gang,

There's a utility called pydoc that's in the new python 2.1 release...
anyway, the author of it wrote a really snazzy error handling page for cgi
scripts (called cgitb)... check out the output and see if you find it
useful.

Here's a sample cgitb output page...
http://www.lfw.org/python/test4.html

Here's where you can get the module for it...
http://www.lfw.org/python/

Okay, except for the nasty colors, I'd love to see something closer to this
in the standard mod_python error handler(apache.py).  I guess the most
flexible way would be to have a PythonErrorModule directive and allow each
person to override the default error display with their own module (in this
case, the cgitb module).  The key is that this functionality would only
really be appropriate for a development environment...

Thoughts?

Chris

From grisha at modpython.org  Mon Apr 23 23:53:36 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Fancy Shmancy Exception Output
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>
Message-ID: <Pine.BSF.4.32.0104232351330.19725-100000@localhost>

I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From CHagner at fool.com  Tue Apr 24 09:41:38 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47D00@rover.foolhq.com>

Yeah, the colors are pretty nasty... I'm thinking Yee (the author) is
color-blind...

FYI, cgitb does not have any 2.1 dependencies... I have it wired into my
handler and it works great (running 2.0).  As I said, this is less ideal,
since it should really be wired into apache.py so that the handler isn't
bothered with catching EVERY error...

I've gotten some pretty good feedback from our developers.  We're so used to
getting an error and then having to go to our tail of the error log (and
then to the code to see what line it is)... it's very nice to shorten that
cycle.

Here's the code snippet I used to integrate it (Prepare to be wowed...)

import cgitb

# Within the handler module's handler method...

    try:
        # all of the stuff that happens in my handler's primary method
    except:
       # NOTE: I use my own request object to wrap the apache-provided one, 
       # so these calls are not the standard apache API calls
       req.setContentType("text/html")
       req.sendHTTPHeader()
       # Calling the handle method of cgitb just prints the output of 
       # breaker() and html() to standard out.
       # Thus, I skip that and do it myself.
       errHtml = str(cgitb.breaker()) + str(cgitb.html())
       req.write(errHtml)

    return apache.OK

Grisha, I'm more than happy to make the mod to apache.py if you don't have
the time... All I'd need is a new directive that is accessible from within
mod_python.apahce.ReportError().  I don't think it would require any other
changes.  

Okay, thinking about it more, I'd add a parameter to ReportError called
error_handler (just like how the debug parameter is passed in)...

Thus, something like this would be added to mod_python.apache.Dispatch()

        config = _req.get_config()
        if config.has_key("PythonErrorHandler"):
            error_handler = config["PythonErrorHandler"]
        else:
            error_handler = None

and all ReportError() calls would have error_handler passed in...

        result = ReportError(etype, value, traceback, htype=htype,
hname=handler, debug=debug, error_handler=error_handler)

Then, ReportError would have something like this...

         if not debug:
                return HTTP_INTERNAL_SERVER_ERROR
         else:
                # write to client
                if error_handler:
                        req.content_type = 'text/html'
                        s = str(cgitb.breaker()) + str(cgitb.html())
                else:
                        req.content_type = 'text/plain'
                        s = '\nMod_python error: "%s %s"\n\n' % (htype,
hname)
                        for e in traceback.format_exception(etype, evalue,
etb):
                             s = s + e + '\n'

                req.send_http_header()
                req.write(s)

                return DONE

This code is a bit of a brain dump on my part, so don't even think that I've
run/tested it yet... :-)  Let me know if I'm missing something... 

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Monday, April 23, 2001 11:54 PM
To: Chris Hagner
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Fancy Shmancy Exception Output



I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to
this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in
this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

From richard at ccpgames.com  Wed Apr 25 23:54:50 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Apache settings wrong?
Message-ID: <FC15F916EC764C42A4219BC30BFBC0720770A2@control.central.ccp.cc>

I have two mod_python directories defined in my apache config.
However, accessing the second shows me the first.
And of course, accessing the first shows me the first.
Am I doing something wrong?

Thanks,
Richard.

ScriptAlias /ir/ "/home/httpd/.../whelkboard/cgi/index.shtml"

<Directory /home/httpd/sorrows/whelkboard/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

ScriptAlias /icelandic/
"/home/httpd/.../icelandic-language/cgi/index.shtml"

<Directory /home/httpd/.../icelandic-language/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

From nineclue at bigfoot.com  Fri Apr 27 13:13:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] FieldStorage class
Message-ID: <Pine.LNX.4.10.10104261403020.21425-100000@mrham.hamslab.com>

Hello,

During playing with util.FieldStorage classes I found that when form data
is loaded with POST method, Request object has already has 'data' member
that is loaded with form variables, even without creating intance of
FieldStorage. I tried to search manual about this, but failed. 

Is this member is safe to use in my code? Will this be supported in future
versions?

Thanks in advance.

Suhku Huh



From adoyle at intl-interfaces.com  Mon Apr 30 10:13:05 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
Message-ID: <3AED72F1.F6056FFB@intl-interfaces.com>

Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
security for Apache? I'm getting segmentation faults when I try to use it on
an https address (things work fine under http).

I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
whether I'm invoking mod_python or not, the https side of things core dumps
if I have the mod_python directives in the httpsd.conf file and does not core
dump if I comment them out.

Based on Covalent's web site I've taken LARGEFILE support out of
Python/mod_python (
http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
)

You can see the code I'm running at
http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
and try it out by clicking on the map found at
http://www.intl-interfaces.net/cookbook/WMS/

Now I want to play with x.509 control over who can see what maps so I want to
move things into https.

Any help would be appreciated.

    Allan

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



From grisha at modpython.org  Mon Apr 30 10:35:04 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:16 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
In-Reply-To: <3AED72F1.F6056FFB@intl-interfaces.com>
Message-ID: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>

Since Raven is a commercial product, I think you should (at least try)
making it Covalent's problem :) I'd like to hear what they say, and if
they can suggest a fix, I'm sure we can incorporate it into the code.

Also - since the expiration of the RSA patent last september, there is no
legal need to use Raven, and mod_python works really well with mod_ssl.

Grisha

On Mon, 30 Apr 2001, Allan Doyle wrote:

> Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> security for Apache? I'm getting segmentation faults when I try to use it on
> an https address (things work fine under http).
>
> I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> whether I'm invoking mod_python or not, the https side of things core dumps
> if I have the mod_python directives in the httpsd.conf file and does not core
> dump if I comment them out.
>
> Based on Covalent's web site I've taken LARGEFILE support out of
> Python/mod_python (
> http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> )
>
> You can see the code I'm running at
> http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> and try it out by clicking on the map found at
> http://www.intl-interfaces.net/cookbook/WMS/
>
> Now I want to play with x.509 control over who can see what maps so I want to
> move things into https.
>
> Any help would be appreciated.
>
>     Allan
>
> --
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> Allan Doyle                     adoyle@intl-interfaces.com
> International Interfaces        +1 781 433 2695 (Office)
> http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From adoyle at intl-interfaces.com  Mon Apr 30 10:42:04 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 21:46:17 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
References: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>
Message-ID: <3AED79BC.A45C7CF8@intl-interfaces.com>

I've already talked to Covalent, they saw no immediate misconfiguration and are also looking
into it but suggested I try this list as well... I can give mod_ssl a whirl.

Thanks,

    Allan

"Gregory (Grisha) Trubetskoy" wrote:

> Since Raven is a commercial product, I think you should (at least try)
> making it Covalent's problem :) I'd like to hear what they say, and if
> they can suggest a fix, I'm sure we can incorporate it into the code.
>
> Also - since the expiration of the RSA patent last september, there is no
> legal need to use Raven, and mod_python works really well with mod_ssl.
>
> Grisha
>
> On Mon, 30 Apr 2001, Allan Doyle wrote:
>
> > Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> > security for Apache? I'm getting segmentation faults when I try to use it on
> > an https address (things work fine under http).
> >
> > I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> > Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> > whether I'm invoking mod_python or not, the https side of things core dumps
> > if I have the mod_python directives in the httpsd.conf file and does not core
> > dump if I comment them out.
> >
> > Based on Covalent's web site I've taken LARGEFILE support out of
> > Python/mod_python (
> > http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> > )
> >
> > You can see the code I'm running at
> > http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> > and try it out by clicking on the map found at
> > http://www.intl-interfaces.net/cookbook/WMS/
> >
> > Now I want to play with x.509 control over who can see what maps so I want to
> > move things into https.
> >
> > Any help would be appreciated.
> >
> >     Allan
> >
> > --
> > ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> > Allan Doyle                     adoyle@intl-interfaces.com
> > International Interfaces        +1 781 433 2695 (Office)
> > http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



From lisicky at datis.cdrail.cz  Mon Apr  2 13:43:51 2001
From: lisicky at datis.cdrail.cz (Jiri Lisicky)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] processing checkbox field from form
Message-ID: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>

I am beginner on python and mod_python.

When I have form without checkbox field, everythig is OK. I use
publisher and get fields as parameters of function.

But when I add checkbox field I get to trouble. Number of parameters
is changing. In html documentation I found: "Unselected checkboxes and
radio buttons do not return name/value pairs when the form is
submitted." 

I don't know how write function for processing this parameters from
that form.

Is somewhere any example for my problem?

thanks

warning: my english is poor
--
        Ji?? Lisick?                      ?D KM?P Olomouc
e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
 phone: +420-068-472-2272                 Olomouc, Czech Republic
              >>> ?e?tina ISO-8859-2 Compatible <<<

From nineclue at cluelabs.com  Mon Apr  2 22:18:04 2001
From: nineclue at cluelabs.com (Suhku Huh)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Install Error
Message-ID: <001d01c0bb77$5aa15a00$4901fea9@dongnam.thrunet.com>

Greetings...

I've just compiled Apache with mod_python and mod_ssl using ApacheToolbox statically and tried to execute testing script (mptest.py) but failed.

Followings are error message in log file. 

'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Sun Apr  1 22:25:52 2001] [error] [client 127.0.0.1] python_handler: make_obcallback returned no obCallBack!

I'm using Linux Mandrake 7.1 (kernel 2.2.16).
ApacheToolbox downloaded up to date sources of mod_python(2.7.2), Python(2.0), and Apache(1.3.19).
Directory configuration of Apache and Python code are exactly same as
manual Testing section.

Any help or comment would be appreciated.

Suhku Huh
nineclue@bigfoot.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010402/ddfe84b2/attachment-0001.htm
From johannes.govaerts at siemens.atea.be  Mon Apr  2 15:48:12 2001
From: johannes.govaerts at siemens.atea.be (Johannes Govaerts)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>; from lisicky@datis.cdrail.cz on Mon, Apr 02, 2001 at 13:43:51 +0200
References: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>
Message-ID: <20010402154812.A5396@zubr.iplab.atea.be>

You can use default values to deal with the changing number of parameters
in your function:
e.g. something like function(parameter1, parameter2, checkbox='not
checked')

Johannes.


On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> I am beginner on python and mod_python.
> 
> When I have form without checkbox field, everythig is OK. I use
> publisher and get fields as parameters of function.
> 
> But when I add checkbox field I get to trouble. Number of parameters
> is changing. In html documentation I found: "Unselected checkboxes and
> radio buttons do not return name/value pairs when the form is
> submitted." 
> 
> I don't know how write function for processing this parameters from
> that form.
> 
> Is somewhere any example for my problem?
> 
> thanks
> 
> warning: my english is poor
> --
>         Ji?? Lisick?                      ?D KM?P Olomouc
> e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
>  phone: +420-068-472-2272                 Olomouc, Czech Republic
>               >>> ?e?tina ISO-8859-2 Compatible <<<
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 
> 

From aiglauer at yahoo.com  Mon Apr  2 08:49:30 2001
From: aiglauer at yahoo.com (Alexis Iglauer)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154812.A5396@zubr.iplab.atea.be>
Message-ID: <20010402154930.86243.qmail@web13905.mail.yahoo.com>

A more elegant way could be to pass the parameters as a single
dictionary, not as individual parameters - and then use .has_key() to
check for the available params.

I generally use the following code to split a URL into params (req is
the apache request):
-----------------
URL = urlparse.urlparse (req.unparsed_uri)
params = {}
try:
    for x in split(URL[4], '&'):
        params[split(x,'=')[0]] = split(x,'=')[1]
except IndexError:
    pass
---------------------

I then pass 'params' to my functions.  I can check for a checkbox
called XXX by saying:

if params.has_key('XXX'):

This method will not happily handle multiple parameter values, but
could easily be modified to do so.

HTH
Alexis

--- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> You can use default values to deal with the changing number of
> parameters
> in your function:
> e.g. something like function(parameter1, parameter2, checkbox='not
> checked')
> 
> Johannes.
> 
> 
> On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > I am beginner on python and mod_python.
> > 
> > When I have form without checkbox field, everythig is OK. I use
> > publisher and get fields as parameters of function.
> > 
> > But when I add checkbox field I get to trouble. Number of
> parameters
> > is changing. In html documentation I found: "Unselected checkboxes
> and
> > radio buttons do not return name/value pairs when the form is
> > submitted." 
> > 
> > I don't know how write function for processing this parameters from
> > that form.
> > 
> > Is somewhere any example for my problem?
> > 
> > thanks
> > 
> > warning: my english is poor
> > --
> >         Jiøí Lisický                      ÈD KM®P Olomouc
> > e-mail: lisicky@datis.cdrail.cz           Vídeòská 15
> >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> >               >>> èe¹tina ISO-8859-2 Compatible <<<
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> > 
> > 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


__________________________________________________
Do You Yahoo!?
Get email at your own domain with Yahoo! Mail. 
http://personal.mail.yahoo.com/?.refer=text

From grisha at modpython.org  Mon Apr  2 12:31:37 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154930.86243.qmail@web13905.mail.yahoo.com>
Message-ID: <Pine.BSF.4.32.0104021231010.2762-100000@localhost>

I think the publisher modules already does what you're trying to do a
little bit cleaner

Grisha

On Mon, 2 Apr 2001, Alexis Iglauer wrote:

> A more elegant way could be to pass the parameters as a single
> dictionary, not as individual parameters - and then use .has_key() to
> check for the available params.
>
> I generally use the following code to split a URL into params (req is
> the apache request):
> -----------------
> URL = urlparse.urlparse (req.unparsed_uri)
> params = {}
> try:
>     for x in split(URL[4], '&'):
>         params[split(x,'=')[0]] = split(x,'=')[1]
> except IndexError:
>     pass
> ---------------------
>
> I then pass 'params' to my functions.  I can check for a checkbox
> called XXX by saying:
>
> if params.has_key('XXX'):
>
> This method will not happily handle multiple parameter values, but
> could easily be modified to do so.
>
> HTH
> Alexis
>
> --- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> > You can use default values to deal with the changing number of
> > parameters
> > in your function:
> > e.g. something like function(parameter1, parameter2, checkbox='not
> > checked')
> >
> > Johannes.
> >
> >
> > On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > > I am beginner on python and mod_python.
> > >
> > > When I have form without checkbox field, everythig is OK. I use
> > > publisher and get fields as parameters of function.
> > >
> > > But when I add checkbox field I get to trouble. Number of
> > parameters
> > > is changing. In html documentation I found: "Unselected checkboxes
> > and
> > > radio buttons do not return name/value pairs when the form is
> > > submitted."
> > >
> > > I don't know how write function for processing this parameters from
> > > that form.
> > >
> > > Is somewhere any example for my problem?
> > >
> > > thanks
> > >
> > > warning: my english is poor
> > > --
> > >         Ji?? Lisick?                      ?D KM?P Olomouc
> > > e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
> > >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> > >               >>> ?e?tina ISO-8859-2 Compatible <<<
> > > _______________________________________________
> > > Mod_python mailing list
> > > Mod_python@modpython.org
> > > http://www.modpython.org/mailman/listinfo/mod_python
> > >
> > >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
>
>
> __________________________________________________
> Do You Yahoo!?
> Get email at your own domain with Yahoo! Mail.
> http://personal.mail.yahoo.com/?.refer=text
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at mrham.hamslab.com  Tue Apr  3 21:32:45 2001
From: nineclue at mrham.hamslab.com (nineclue@mrham.hamslab.com)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Sorry, Install error.
Message-ID: <Pine.LNX.4.10.10104032126360.23083-100000@mrham.hamslab.com>

Greetings....

Sorry for the contamination.
Now I'm using PINE thru telnet.

I've compiled Apache with mod_python using ApacheToolbox. When I tried
the Test (mptest.py) script, Server Error is raised. 
Followings are part of error_log.

[Tue Apr  3 21:35:23 2001] [notice] Apache/1.3.19 (Unix)
mod_gzip/1.3.19.1a mod_python/2.7.2 Python/2.0 mod_ssl/2.8.1 OpenSSL/0.9.5a configured --
resuming normal operations
[Tue Apr  3 21:35:23 2001] [notice] suEXEC mechanism enabled (wrapper: 
/usr/local/apache/bin/suexec)
'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Tue Apr  3 21:35:44 2001] [error] [client 127.0.0.1] python_handler:
make_oballback returned no obCallBack!

Any comment or answer would be appreciated.

Suhku Huh



From tom_bentz at tamcomm.com  Wed Apr  4 19:15:00 2001
From: tom_bentz at tamcomm.com (Tom Bentz)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Apache configuration
Message-ID: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>

When I set this in my httpd.conf:
AddHandler python-program .py
the browser tries to download the python file

When I add this:
PythonHandler mod_python.publisher
I get this error in my browser:  'The page cannot be found'
    
Any ideas??  Thanks.



From joost.damad at siemens.atea.be  Thu Apr  5 08:00:44 2001
From: joost.damad at siemens.atea.be (Joost Yervante Damad)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Apache configuration
In-Reply-To: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>; from tom_bentz@tamcomm.com on Wed, Apr 04, 2001 at 07:15:00PM -0700
References: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>
Message-ID: <20010405080044.B10114@siemens.atea.be>

Dit you try to read the manual?
The example in there should work fine,
and give you a clue on how to roll your own config.

'Tom Bentz' wrote about '[mod_python] Apache configuration' - Thu, Apr 05, 2001 at 04:15:00AM CEST
> When I set this in my httpd.conf:
> AddHandler python-program .py
> the browser tries to download the python file
> 
> When I add this:
> PythonHandler mod_python.publisher
> I get this error in my browser:  'The page cannot be found'
>     
> Any ideas??  Thanks.
> 

What url are you viewing, what is your exact configuration?

-- 
Joost Damad - Siemens IC D NC A - +3214252297
--
** WARNING **: Invalid seek
wvError: (escher.c:45) Not a container, panic (200)
 wvError: (escher.c:366) Damn found nothing
 wvError: (fspa.c:99) found no fspa, panic

From mhagger at alum.mit.edu  Thu Apr  5 09:31:38 2001
From: mhagger at alum.mit.edu (Michael Haggerty)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Apache 2.0
Message-ID: <m2u2435v7p.fsf@freak.kaiserty.com>

Hi,

Does mod_python support the multithreaded model that is coming in
Apache 2.0?  If not, are there plans to add support for it?  Are there
other Python-in-Apache modules that support Apache 2.0?

Michael

-- 
Michael Haggerty
mhagger@alum.mit.edu

From xkrajic at ics.muni.cz  Thu Apr  5 21:02:09 2001
From: xkrajic at ics.muni.cz (Ondrej Krajicek)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Apache 1.3.19/Win32 Internal server error
References: <200104051810.f35IA1c36397@eden.ispol.com>
Message-ID: <3ACCC131.80A38B5D@ics.muni.cz>

Hello all,

I've downloaded latest mod_python (2.7.2 and precompiled dll
for Windows). I've placed mod_python.so (renamed dll) to
the proper directory (it loads) and I've copied
lib directory from mod_python package to
my site-packages directory. The sys.path
looks like this (python site.py):

sys.path = [
    'd:\\app\\python\\lib',
    'd:\\app\\python\\pythonwin',
    'd:\\app\\python\\win32',
    'd:\\app\\python\\win32\\lib',
    'd:\\app\\python',
    'd:\\app\\python\\dlls',
    'd:\\app\\python\\lib\\plat-win',
    'd:\\app\\python\\lib\\lib-tk',
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-packages\\mod_python',
]

site directories = [
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-python',
]

I've set up the example as is stated in manual,
but instead of nice "Hello World!" message
smiling to me, I get internal server error (500).
Log excerpt:

make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!

When I try to execute the test.py in interpreter
(python test.py), I got:

Traceback (most recent call last):
  File "test.py", line 1, in ?
    from mod_python import apache
  File "d:\app\python\lib\site-packages\mod_python\apache.py", line 55,
in ?
    import _apache
ImportError: No module named _apache

My configuration is:
Windows 2000 Server Sp1
ActivePython from ActiveState (based on Python2.0)
Apache 1.3.19 for Win32 running as service

I am new to python, new to apache and new to mod_python.
Can anyone please help me ?

TIA,

Ondrej Krajicek

-- 
---------------------------------------------------------------------
Ondrej Krajicek OK-)
email: xkrajic et {ics,fi}.muni.cz
                               Omnia ad maiorem Informaticae gloriam.
-->>> The Nexus Framework <<<-- sourceforge.net/projects/nexusproject
          Of course we can, moreover we must, it is our holiest duty.
---------------------------------------------------------------------

From grisha at verio.net  Fri Apr  6 14:54:39 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Apache 2.0
In-Reply-To: <m2u2435v7p.fsf@freak.kaiserty.com>
Message-ID: <Pine.BSF.4.32.0104061453200.46934-100000@localhost>

mod_snake (modsnake.sourceforge.net) works with Apache 2.0

mod_python isn't going to work with 2.0 for a couple of months at least

Grisha

On 5 Apr 2001, Michael Haggerty wrote:

> Hi,
>
> Does mod_python support the multithreaded model that is coming in
> Apache 2.0?  If not, are there plans to add support for it?  Are there
> other Python-in-Apache modules that support Apache 2.0?
>
> Michael
>
> --
> Michael Haggerty
> mhagger@alum.mit.edu
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From marcf at becomm.com  Fri Apr  6 18:17:41 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] apache processes are getting large memory footprint
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>

Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0

From marcf at becomm.com  Fri Apr  6 18:34:01 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] apache processes are getting large memory footpr
	int
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B9@becomm-mis2.becomm.com>

I just found the gc module, which seems to be a builtin module.  If I try to
import it, then mod_python seems to barf.  Any reason for this?

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File "/scratch/local/lib/python2.0/site-packages/mod_python/publisher.py",
line 128, in handler
    module = apache.import_module(module_name, _req, [path])

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 346, in import_module
    module = imp.load_module(mname, f, p, d)

  File "/scratch/apache/htdocs/hotbeads/dispatch.py", line 1, in ?
    import gc

ImportError: No module named gc





-----Original Message-----
From: Marc Fiuczynski [mailto:marcf@becomm.com]
Sent: Friday, April 06, 2001 6:18 PM
To: 'mod_python@modpython.org'
Subject: [mod_python] apache processes are getting large memory
footprint


Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From grisha at verio.net  Fri Apr  6 22:07:46 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] apache processes are getting large memory footprint
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104062204240.50197-100000@localhost>

On Fri, 6 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I am using mod_python to serve up large files from the server to the client.
> I have noticed that the memory footprint of httpd gets rather large and
> stays that way.  Can someone give me a hint how to start figuring out which
> parts are holding on to that amount of memory.  Right now I have no clue
> whether it is httpd, mod_python, or my python programs.  Is there a way to
> figure out what the python memory profile is, or python GC stats?

It is most likely Python.

There is no easy way to identify the state of all variables within a
Python interpreter, but you can try a few things, such making sure that
your large variables don't persist between connection by assigning None to
them at the end.

Grisha


From rusddf at yahoo.com  Thu Apr  5 19:02:13 2001
From: rusddf at yahoo.com (Sergey)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] E-mail áàçà "Âñÿ Ðîññèÿ"
Message-ID: <0eb690458140741SERVER@server>

????????????!

E-mail ???? "??? ??????"

?????????? ??? ?????????? ???? ??????? ??????????? ????? ?????????? ?????????????.
???? ???????? 340 ????? ??????? (?? ??? ????? 30% - ?????? ???????????).
??? ?????? ?????????????? ????????? ? ??????? ??????????? ????????? ? ??????? 2001 ?.
? ??????? ??????????.

??????????? ????????? ??? ???????? ????????.

???? ????????????? ??? ???????? ???????? ??????? ???????, ??????,
???????????? ??????????? ? ?.?.

???? 1000 ??????

From stevena at permanent.cc  Sat Apr  7 16:32:23 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <3928573C.EFEB5271@myself.com>
Message-ID: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>

<html>
At 02:38 PM 5/21/2000 -0700, Wayne Izatt wrote:<br>
<blockquote type=cite cite>Hi all. I've built and installed a mod_python enabled apache. However,<br>
I'm not sure what, if any, directives I need to add to httpd.conf to get<br>
it to pass .py files to the python handler. When I point my browser at<br>
the test script, all that I get is the script in the browser window.<br>
<br>
Perhaps someone has a sample httpd.conf (just the handler stuff will do)<br>
or a vanilla .htaccess (if that's where the directives should go).<br>
<br>
(Yes, I've followed the installation instructions, but something simple<br>
is still eluding me).</blockquote><br>
I'm having the same experience.<br>
<br>
I tried the following directives:<br>
<br>
Alias /python /usr/local/apache/htdocs/python<br>
<br>
&lt;Location /python/&gt;<br>
&nbsp;&nbsp;&nbsp; AllowOverride All<br>
&nbsp;&nbsp;&nbsp; AddHandler python-program .py<br>
&nbsp;&nbsp;&nbsp; PythonDebug<br>
&nbsp;&nbsp;&nbsp; PythonHandler test<br>
&lt;/Location&gt;<br>
<br>
<br>
When I try loading the page, I get this error:<br>
<br>
\nERROR mod_python: &quot;PythonHandler test&quot;<br>
<br>
Traceback (innermost last):<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 107, in Dispatch object = self.resolve_object(module_name, object_str)<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 70, in resolve_object raise &quot;ResolveError&quot;, &quot;Couldn't resolve object '%s' in module '%s'.&quot; % \<br>
<br>
ResolveError: Couldn't resolve object 'handler' in module 'test'.<br>
<br>
NOTE: More output from other handlers, if any, may follow. This will NOT happen, and request processing will STOP at this point when you remove PythonDebug directive. <br>
<br>
<br>
I'm not quite sure what I'm doing wrong.&nbsp; Any ideas?<br>
<br>
<br>
steve</html>



From stevena at permanent.cc  Sat Apr  7 16:32:29 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] apache compile problems
Message-ID: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>

Hi,

I'm trying to compile apache with mod_python and I'm getting the following error:

[root@catatonia apache_1.3.12]# ./configure --activate-module=src/modules/extra/mod_python.c --prefix=/usr/local/apache --enable-module=all
Configuring for Apache, Version 1.3.12
 + using installation path layout: Apache (config.layout)
 + activated python module (modules/extra/mod_python.c)
Creating Makefile
Creating Configuration.apaci in src
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
cd ..; gcc  -DLINUX=2 -DUSE_HSREGEX -DUSE_EXPAT -I./lib/expat-lite `./apaci` -I/usr/include/python1.5    -o helpers/dummy helpers/dummy.c   -lm -lcrypt -lndbm -ldb /usr/lib/python1.5/config/libpython1.5.a   -ldl
gcc: /usr/lib/python1.5/config/libpython1.5.a: No such file or directory
make: *** [dummy] Error 1
Creating Makefile in src
 + configured for Linux platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + checking for system header files
 + adding selected modules
    o rewrite_module uses ConfigStart/End
 + using -lndbm for DBM support
      enabling DBM support for mod_rewrite
    o dbm_auth_module uses ConfigStart/End
    o db_auth_module uses ConfigStart/End
      using Berkeley-DB/2.x for mod_auth_db (-ldb)
    o python_module uses ConfigStart/End
 + using -ldl for vendor DSO support
 + checking sizeof various data types
 + doing sanity check on compiler and options
** A test compilation with your Makefile configuration
** failed.  The below error output from the compilation
** test will give you an idea what is failing. Note that
** Apache requires an ANSI C Compiler, such as gcc. 

======== Error Output for sanity check ========
============= End of Error Report =============

 Aborting!


I have no directory /usr/lib/python1.5/config, though the parent of that dir does exist.  I just freshly installed python 1.5.2 before trying the above.  Platform is Red Hat Linux 6.2.  Any ideas?


steve




From stevena at permanent.cc  Sat Apr  7 16:32:30 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] [SOLVED] apache compile problems
In-Reply-To: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521002528.015faf08@phear.dementian.com>

For some reason, the original installation of python on my system didn't have a config dir inside /usr/lib/python1.5.  I reinstalled python and it made sys.exec_prefix /usr/local; however, it didn't replace the old copies of python sitting in /usr/bin.  (It did put new copies in /usr/local/bin.)  When I deleted the old copies and created symlinks to the new copies, python then knew to look in /usr/local/lib/python1.5/config, and all was well.


steve




From stevena at permanent.cc  Sat Apr  7 16:32:35 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <Pine.LNX.4.21.0005211909500.29474-100000@saturn.ispol.com>
References: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521200358.015c0300@phear.dementian.com>

<html>
At 07:11 PM 5/21/2000 -0400, Gregory Trubetskoy wrote:<br>
<br>
<blockquote type=cite cite>This means that test.py doesn't have a function called &quot;handler&quot; defined<br>
in it.<br>
<br>
What's in your test.py?</blockquote><br>
I put exactly what the docs suggest:<br>
<br>
from mod_python import apache<br>
<br>
def handler(req):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.send_http_header()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.write(&quot;Hello World!&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return apache.OK<br>
<br>
<br>
However, I made the changes Wayne suggested, and now it works for me. :-)&nbsp; (It didn't initially, but it does now -- I can't explain why.)&nbsp; Apparently the AddModule and Directory directives did it...<br>
<br>
<br>
steve<br>
</html>



From ron at kramedjian.com  Sun Apr  8 10:13:46 2001
From: ron at kramedjian.com (Ronald E. Kramedjian)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Instalation Error
Message-ID: <002801c0c03e$822bd570$0501a8c0@D69HHG01>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3360 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/32b1ceee/smime-0001.bin
From gdamjan at mail.net.mk  Sun Apr  8 20:19:00 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>; from ron@kramedjian.com on Sun, Apr 08, 2001 at 10:13:46AM -0500
References: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <20010408201900.A376@local.izmislen.mk>

> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
... 
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'

Don't use a test.py script for testing mod_python. There is already a package 
named test in the standard Python distribution, and mod_python would try to load
it instead (which should be obvious in the line above).

Use something as mptest.py.




-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at verio.net  Sun Apr  8 16:56:09 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <Pine.BSF.4.32.0104081655490.67981-100000@localhost>

use a name for your script other than "test".

Grisha

On Sun, 8 Apr 2001, Ronald E. Kramedjian wrote:

> Gentle People,
>
> Your help would be most appreciated.
>
> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
>
> Ronald E. Kramedjian
> ------------------------------------------------------------------------------------------
>
> Mod_python error: "PythonHandler test"
>
> Traceback (most recent call last):
>
>   File "c:\python20\lib\mod_python\apache.py", line 180, in Dispatch
>     object = resolve_object(self.req, module, object_str, silent)
>
>   File "c:\python20\lib\mod_python\apache.py", line 396, in resolve_object
>     raise AttributeError, s
>
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'
>
> -----------------------------------------------------------------------------------------
>
>
>


From victor at prodigy.net  Sun Apr  8 17:38:31 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
Message-ID: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>


Sorry for a long message, but this requires a bit of explanation. I 
appreciate your patience in advance.

I have a bunch of python legacy code that used to be part of a large 
CGI-based system. This code simply used print statements to output HTML as 
follows:

def foo():
         print 'html1'
         print 'html2'

Now I want to convert CGI to mod_python, but I would like to re-use the 
legacy code with as little re-writing as possible (obviously the legacy 
code is a lot lengthier and more complicated than the example above). I am 
using the publisher module, which requires my code to return a string 
containing all of the HTML. So I thought I would be clever and do something 
like this:

import sys, cStringIO
def handler(req):
         out =  sys.stdout = StringIO()
         foo()
         return out

This works great as long as the second request does not arrive before the 
first one is done. Otherwise, the output gets screwed up. Since "out" is a 
local variable, each request has its own instance, but sys.stdout is a 
global. When the second request arrives, sys.stdout gets reassigned and the 
rest of the output produced by print statements in the foo() function goes 
to the new StringIO object. For example, if the second request arrives and 
gets executed between the two print statements of the first request, then 
the first request's output could be  'html1\n' and the second request's 
output could be 'html2\nhtml1\nhtml2\n'.

Has anyone dealt with such a situation? Any clever suggestion would be 
appreciated as I hate to have to go into all the legacy code and change it 
to something like this:

def foo():
         out = 'html1\n'
         out = out + 'html2\n'
         return out

def handler(req):
         return foo()

Thanks in advance.
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/b9ac82b3/attachment-0001.htm
From grisha at verio.net  Sun Apr  8 21:19:02 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:19 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>
Message-ID: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>


Victor -

Rather than invent ways to deal with legacy CGI code, I would bite the
bullet and rewrite the code without the use of "print". There are too many
subtle gotchas with simulating CGI...

Grisha



On Sun, 8 Apr 2001, Victor Muslin wrote:

>
> Sorry for a long message, but this requires a bit of explanation. I
> appreciate your patience in advance.
>
> I have a bunch of python legacy code that used to be part of a large
> CGI-based system. This code simply used print statements to output HTML as
> follows:
>
> def foo():
>          print 'html1'
>          print 'html2'
>
> Now I want to convert CGI to mod_python, but I would like to re-use the
> legacy code with as little re-writing as possible (obviously the legacy
> code is a lot lengthier and more complicated than the example above). I am
> using the publisher module, which requires my code to return a string
> containing all of the HTML. So I thought I would be clever and do something
> like this:
>
> import sys, cStringIO
> def handler(req):
>          out =  sys.stdout = StringIO()
>          foo()
>          return out
>
> This works great as long as the second request does not arrive before the
> first one is done. Otherwise, the output gets screwed up. Since "out" is a
> local variable, each request has its own instance, but sys.stdout is a
> global. When the second request arrives, sys.stdout gets reassigned and the
> rest of the output produced by print statements in the foo() function goes
> to the new StringIO object. For example, if the second request arrives and
> gets executed between the two print statements of the first request, then
> the first request's output could be  'html1\n' and the second request's
> output could be 'html2\nhtml1\nhtml2\n'.
>
> Has anyone dealt with such a situation? Any clever suggestion would be
> appreciated as I hate to have to go into all the legacy code and change it
> to something like this:
>
> def foo():
>          out = 'html1\n'
>          out = out + 'html2\n'
>          return out
>
> def handler(req):
>          return foo()
>
> Thanks in advance.
> __________________________________________________________________________________
> Victor Muslin      The power of accurate observation is frequently called
>                           cynicism by those who don't have it.
>                                        - George Bernard Shaw
>


From CHagner at fool.com  Mon Apr  9 17:26:57 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] PythonImport failure
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4804DAFD90@rover.foolhq.com>

Hi there,

This message is a continuation of a previous thread I started regarding my
difficulties in getting PythonImport to work.  (thread text is attached).

Moved my dev environment to Linux.  Still having failure of PythonImport
(see snippet below for error).  Simply put ChrisTest.py in the site-packages
directory.

[Mon Apr  9 17:10:38 2001] [notice] Apache/1.3.19 (Unix) mod_python/2.7.2
Python/2.0.42-S1.2.4 configured -- resuming normal operations
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest

Using the following directive

    PythonImport ChrisTest

Looking through mod_python.c, it's apparently failing on trying to import
the module (duh), but I haven't jumped in deeper.  Any help/ideas would be
greatly appreciated...  Thanks.

Chris
chagner
at
fool
dot
com

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
Sent: Tuesday, March 27, 2001 4:01 PM
To: Chris Hagner
Cc: 'mod_python@modpython.org'
Subject: RE: [mod_python] PythonImport failure



Try the mod_python 2.7.2 DLL and see if the problems persist

Grisha

On Tue, 27 Mar 2001, Chris Hagner wrote:

> A specific question about why PythonImport works for some modules and not
> for others.
>
> 1.  The following statement works.  It compiles/imports apache.py at
server
> startup.
>
> PythonImport mod_python.apache
>
> 2.  Now, when I create a dummy module in mod_python/MyObject.py
>
> def myFunction():
>     return "MyObject.myFunction()"
>
> class MyObject:
>
>     def __init__(self):
>         pass
>
> The following statement does not work.
>
> PythonImport mod_pytnon.MyObject
>
> Here's the error in error.log
> [Tue Mar 27 13:07:56 2001] [error] directive_PythonImport: error import
> mod_python.MyObject
> TypeError: must assign list (not "string") to slice
>
> Any help on this error msg?
>
> BTW, the first error line appears at start up... second appears upon
> immediate shutdown... probably just a buffer thing, but I thought I'd
share.
>
> 3.  I also tried import a base module which worked fine.
>
> PythonImport string
>
> 4.  But when I created a copy of string.py and simply renamed it, it
didn't
> work.
>
> PythonImport copyofstring
>
> Any thoughts on why mod_python appears to like some modules and not
others?
>
> Thanks in advance.
>
> Chris
>
>
>
> -----Original Message-----
> From: Chris Hagner [mailto:CHagner@fool.com]
> Sent: Thursday, March 15, 2001 12:07 PM
> To: 'Gregory (Grisha) Trubetskoy'
> Cc: 'mod_python@modpython.org'
> Subject: RE: [mod_python] PythonImport failure
>
>
> Thanks for the response.  For my tests, mypackage is a package named
> 'toolkit' and the mymodule is a module named 'brandconfig'.
>
> Oh yeah, I'm doing this on Apache/1.3.19 (Win32) mod_python/2.7.1
> Python/2.0.  I'm on Win2K (for development, sigh).
>
> INTERACTIVE SESSION TEST:
> ******************************
>
> Here's my python interactive session... the module only contains a single
> variable x.
>
> >>> import toolkit.brandconfig
> >>> dir(toolkit.brandconfig)
> ['__builtins__', '__doc__', '__file__', '__name__', 'x']
> >>> toolkit.brandconfig.x
> 123
> >>>
>
> So, the module is importable in my python environment.
>
>
> APACHE PYTHONIMPORT TEST:
> ******************************
>
> Just to be sure, I ran the apache test again.  Here's the httpd.conf
entry.
> Nothing shocking.
>
> <Directory "D:/site/brand1/htdocs">
>    AddHandler python-program .py
>    PythonHandler toolkit.publisher
>    PythonDebug on
>    PythonImport toolkit.brandconfig
> </Directory>
>
> Here's the response in the log upon starting apache.
>
>    [Thu Mar 15 11:39:10 2001] [error] directive_PythonImport: error
> importing toolkit.brandconfig
>
> Same as before.  Now, just to be sure, I blew away the brandconfig.py file
> (and the .pyc) so that it shouldn't even find it (just to see if I could
get
> a different error if it didn't even exist).  Result: No change.  Same
error
> in error.log.  Apparently, it's not even finding it.
>
> APACHE PYTHON SCRIPT TEST:
> ******************************
>
> So, it wasn't importing it on start up.  How about a python script in
> mod_python?
>
> Here's the code blurb...
>
> 	import foolkit.brandconfig
>        out_string = "foolkit.brandconfig.x: %s \n"% foolkit.brandconfig.x
>
> Did it work?  yup, the page displayed
>
> 	foolkit.brandconfig.x: 123
>
>
>
> Yes, I have read through the documentation and my need is to initialize a
> number of objects (i.e. dbconn pool) for use throughout my applications.
> Now, I am using a custom handler, so I could simply have the handler do
this
> initialization the first time it runs, but the PythonImport appeared to be
a
> code-free way to achieve this goal.  Do you all think this is a case where
I
> *really* need it?  If not, could someone share an example of when it
really
> deserves to be used?
>
> Thanks again for the help.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
> Sent: Thursday, March 15, 2001 11:26 AM
> To: Chris Hagner
> Cc: 'mod_python@modpython.org'
> Subject: Re: [mod_python] PythonImport failure
>
>
>
> Chris -
>
> Have you tried
>
> >>> import mypackage.mymodule
>
> from an interactive Python session?
>
> Also, regarding PythonPath - if you read documentation carefully, you'll
> notice that it says that no other directives have any effect at the time
> PythonImport is executed.
>
> Generally, you should not use PythonImport unless you *really* need it,
> which is almost never the case.
>
> Grisha
>
>
> On Thu, 15 Mar 2001, Chris Hagner wrote:
>
> > Greetings,
> >
> > I'm trying to get the PythonImport command to work.  Been through the
> > documentation, but it appears to want more than simply inserting
> >
> >    PythonImport mypackage.mymodule
> >
> > within my Directory tags in httd.conf.
> >
> > While mypackage.mymodule is under the standard python lib directory
> > (therefore should be found through the sys.path), the system spat out
the
> > following...
> >
> >     ...[error] directive_PythonImport: error importing
mypackage.mymodule
> >
> > I then moved the module to a different directory and appended that
> directory
> > to the sys.path using the PythonPath command (just to see if that
allowed
> it
> > to find the module).  No luck.
> >
> > I've found a handful of posts from June and August of last year, but no
> > posted solutions to getting the PythonImport command to work correctly.
> Of
> > course, there's a CVS commit with the comment "PythonImport works now"
so
> > I'm pretty sure it's me...
> >
> > As a random test, I tried a standard module...
> >
> >    PythonImport sys
> >
> > which appeared to work (no error msg), but I'm not really confident that
> > this was a meaningful test.
> >
> > Thanks in advance.
> >
> > Chris
> > chagner _at_ fool _dot_ com
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From marcf at becomm.com  Mon Apr  9 22:44:58 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] subintrepreters
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>

Hi,

I want to make sure that I understand the subinterpreters that are used by
mod_python.

Here is my scenario: I have two handlers defined in a single .py file.   One
of them submits files to a database and the other retrieves files from that
same database.  To avoid hitting the backend database, there is a fair
amount of caching going within the python code.

Now the question is whether the cached objects created by the submit handler
are shared with the one from the retrieve handler.  Anyone have a definitive
answer?

Thanks,
Marc

From grisha at verio.net  Tue Apr 10 10:49:32 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] subintrepreters
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104101048550.87097-100000@localhost>

By default, if they are in the same virtual server, they share the
interpreter.

Grisha

On Mon, 9 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I want to make sure that I understand the subinterpreters that are used by
> mod_python.
>
> Here is my scenario: I have two handlers defined in a single .py file.   One
> of them submits files to a database and the other retrieves files from that
> same database.  To avoid hitting the backend database, there is a fair
> amount of caching going within the python code.
>
> Now the question is whether the cached objects created by the submit handler
> are shared with the one from the retrieve handler.  Anyone have a definitive
> answer?
>
> Thanks,
> Marc
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From grisha at verio.net  Tue Apr 10 22:22:00 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] some issues
In-Reply-To: <20010215150733.A20391@siemens.atea.be>
Message-ID: <Pine.BSF.4.32.0104102220290.93109-100000@localhost>

Joost -

This was a bug with reusing a pointer to the internal representation of a
Python string after resizing it. For some reason on Linux and FreeBSD it
caused no problems, but showed on Solaris.

This should be fixed in the latest code available via CVS.

Grisha

On Thu, 15 Feb 2001, Joost Yervante Damad wrote:

> Hello,
>
> A friend of me discovered wierd bug in publisher :
>
> def tst(req, arg='none', test='none', longname='none'):
>         req._content_type_set = 0
>         return "Arguments are '%s', '%s' and '%s'" % (arg, test, longname)
>
> if we now do:
>
> https://r2d2.iplab.atea.be:8081/py/test.py/tst?arg=x&test=y&longname=z
>
> the result is:
>
> Arguments are '', '' and 'z'
>
> Aparently short names are not getting into the functions.
> Long names are. Or is this caused by name clashes?
>
> We tested this both with 2.7.1 and 2.7.2 on Solaris 2.6
> with apache 1.3.14 with SSL and mod_python statically linked.
>
> Another error I found:
>
> The handling of _content_type_set seems to be broken.
>
> publisher no longer functioned, bailin out at:
>
> if not req._content_type_set:
>
> giving an exeception stating that that variable was not found.
>
> Removing that part and setting the content_type to
> "text/html" is our current workaround.
>
> Any thoughts?
>
> Joost
>
> P.S.: but we love mod_python :)
>
> --
> Joost Damad - Siemens ICN D NC A - +3214252297
> --
> Five is a sufficiently close approximation to infinity.
>        -- Robert Firth
> "One, two, five."
>        -- Monty Python and the Holy Grail
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From mgpl1-NoTinnedHamThanks at zeta.org.au  Thu Apr 12 10:18:28 2001
From: mgpl1-NoTinnedHamThanks at zeta.org.au (Wilson Fletcher)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <3AD4F453.CE85A3AD@zeta.org.au>

Wouldn't it be better just to buffer the output and then just use one output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

I don't understand the problem with redirecting stdout. My understanding of Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session that fires up
it's own instance of the code. Is this not true ?

Secondly the idea of just rewriting something that works doesn't seem to be a good idea
to me. I would say rewrite if you're finding you are doing a lot of mainatainence on
existing code however if the code works well and has been tested, deployed etc, it
would be better to interfere with it as little as possible unless you already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

Wilson

"Gregory (Grisha) Trubetskoy" wrote:

> Victor -
>
> Rather than invent ways to deal with legacy CGI code, I would bite the
> bullet and rewrite the code without the use of "print". There are too many
> subtle gotchas with simulating CGI...
>
> Grisha
>
> On Sun, 8 Apr 2001, Victor Muslin wrote:
>
> >
> > Sorry for a long message, but this requires a bit of explanation. I
> > appreciate your patience in advance.
> >
> > I have a bunch of python legacy code that used to be part of a large
> > CGI-based system. This code simply used print statements to output HTML as
> > follows:
> >
> > def foo():
> >          print 'html1'
> >          print 'html2'
> >
> > Now I want to convert CGI to mod_python, but I would like to re-use the
> > legacy code with as little re-writing as possible (obviously the legacy
> > code is a lot lengthier and more complicated than the example above). I am
> > using the publisher module, which requires my code to return a string
> > containing all of the HTML. So I thought I would be clever and do something
> > like this:
> >
> > import sys, cStringIO
> > def handler(req):
> >          out =  sys.stdout = StringIO()
> >          foo()
> >          return out
> >
> > This works great as long as the second request does not arrive before the
> > first one is done. Otherwise, the output gets screwed up. Since "out" is a
> > local variable, each request has its own instance, but sys.stdout is a
> > global. When the second request arrives, sys.stdout gets reassigned and the
> > rest of the output produced by print statements in the foo() function goes
> > to the new StringIO object. For example, if the second request arrives and
> > gets executed between the two print statements of the first request, then
> > the first request's output could be  'html1\n' and the second request's
> > output could be 'html2\nhtml1\nhtml2\n'.
> >
> > Has anyone dealt with such a situation? Any clever suggestion would be
> > appreciated as I hate to have to go into all the legacy code and change it
> > to something like this:
> >
> > def foo():
> >          out = 'html1\n'
> >          out = out + 'html2\n'
> >          return out
> >
> > def handler(req):
> >          return foo()
> >
> > Thanks in advance.
> > __________________________________________________________________________________
> > Victor Muslin      The power of accurate observation is frequently called
> >                           cynicism by those who don't have it.
> >                                        - George Bernard Shaw
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From victor at prodigy.net  Fri Apr 13 02:35:02 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <3AD4F453.CE85A3AD@zeta.org.au>
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <4.3.2.7.0.20010413023353.00c188c0@pop.prodigy.net>

At 10:18 AM 4/12/2001 +1000, you wrote:
Wouldn't it be better just to buffer the output and then just use one 
output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

yes, this is what he is suggesting and exactly what I was trying to avoid 
in the first place. Also, while not being a CGI/Web guru, I can imagine a 
number of potential problems with having to buffer all of the output before 
sending it to the browser. First of all the output may be large and it may 
not be practical to assemble it in memory. Second it may be useful to allow 
browser to start rendering some output before it is completely created if 
it takes a long time to create dynamic output. Third, if the browser 
cancelled the request the only way to find out is to try to send the reply 
and get some sort of bad status. Imagine a script that does a set of 
time-consuming database queries to create the output. it would be useful to 
test whether the request was cancelled after each query by attempting to 
send something back (a space character perhaps) to see whether the socket 
is still open before doing the rest of the queries. Perhaps somebody could 
suggest how these scenarios could be handled with mod_python?

I don't understand the problem with redirecting stdout. My understanding of 
Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session 
that fires up
it's own instance of the code. Is this not true ?

I am using the "publisher" capability of mod_python. This is how I imagine 
it works (not having had the time to go through the code). There is a 
function -- call it handler() -- that handles requests. Let's say there are 
two identical concurrent requests. Both are handled by the same instance of 
Python interpeter that calls handler() for each one. All variables 
instantiated inside the handler() function are local to the function and, 
therefore, each request has its own instance of these variables. Variables 
that are module level (of the module where the handler() function is) of 
class-level are global, i.e. there is one instance of them in the 
interpreter and, therefore, they are shared by the requests. If this 
weren't the case you couldn't open a database connection once, for example, 
and keep it open instead of re-opening it for each request. sys.stdout 
happens to be a global variable and, therefore, shared by multiple 
instances of handler() and consequently by the requests. If code in one 
request reassigns it, the code in the other concurrent requests is affected.

Secondly the idea of just rewriting something that works doesn't seem to be 
a good idea
to me. I would say rewrite if you're finding you are doing a lot of 
mainatainence on
existing code however if the code works well and has been tested, deployed 
etc, it
would be better to interfere with it as little as possible unless you 
already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

I think you are making my point here. I did not want to re-write anything.


Wilson

"Gregory (Grisha) Trubetskoy" wrote:

 > Victor -
 >
 > Rather than invent ways to deal with legacy CGI code, I would bite the
 > bullet and rewrite the code without the use of "print". There are too many
 > subtle gotchas with simulating CGI...
 >
 > Grisha
 >
 > On Sun, 8 Apr 2001, Victor Muslin wrote:
 >
 > >
 > > Sorry for a long message, but this requires a bit of explanation. I
 > > appreciate your patience in advance.
 > >
 > > I have a bunch of python legacy code that used to be part of a large
 > > CGI-based system. This code simply used print statements to output HTML as
 > > follows:
 > >
 > > def foo():
 > > print 'html1'
 > > print 'html2'
 > >
 > > Now I want to convert CGI to mod_python, but I would like to re-use the
 > > legacy code with as little re-writing as possible (obviously the legacy
 > > code is a lot lengthier and more complicated than the example above). I am
 > > using the publisher module, which requires my code to return a string
 > > containing all of the HTML. So I thought I would be clever and do 
something
 > > like this:
 > >
 > > import sys, cStringIO
 > > def handler(req):
 > > out = sys.stdout = StringIO()
 > > foo()
 > > return out
 > >
 > > This works great as long as the second request does not arrive before the
 > > first one is done. Otherwise, the output gets screwed up. Since "out" is a
 > > local variable, each request has its own instance, but sys.stdout is a
 > > global. When the second request arrives, sys.stdout gets reassigned 
and the
 > > rest of the output produced by print statements in the foo() function goes
 > > to the new StringIO object. For example, if the second request arrives and
 > > gets executed between the two print statements of the first request, then
 > > the first request's output could be 'html1\n' and the second request's
 > > output could be 'html2\nhtml1\nhtml2\n'.
 > >
 > > Has anyone dealt with such a situation? Any clever suggestion would be
 > > appreciated as I hate to have to go into all the legacy code and change it
 > > to something like this:
 > >
 > > def foo():
 > > out = 'html1\n'
 > > out = out + 'html2\n'
 > > return out
 > >
 > > def handler(req):
 > > return foo()
 > >
 > > Thanks in advance.
 > >
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010413/96c1a4d3/attachment-0001.htm
From nineclue at bigfoot.com  Sat Apr 14 11:07:12 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable?
Message-ID: <Pine.LNX.4.10.10104141052440.2413-100000@mrham.hamslab.com>

Greetings...

I'm trying to implement custom session handler like PHP.
I think persistent variables that share between subinterpreters would
be nice to hold session variables.
When I tried, I think persistent variables are not shared to
subinterpreter.

Sorry for my poor English... And thanks in advance for any comment or
answer.

Suhku Huh

Followings are my custom handler.

from mod_python import apache
from base64 import decodestring, encodestring
from cPickle import loads, dumps
import pg

PG_DB = 'pyweb'
_SESSION_PATH = ( '/cluelabs', )
_MODPYTHONID = 'MODPYTHONID'

session_data = {}

class session_var:
	def __init__(self, con, id = None):
		self.con = con
		if id:
			self.new = 0
			r = self.con.query("select val from session where sess_id = '%s'" % id)
			if not r.ntuples():
				self.data = {}
			else:
				val = r.getresult()[0][0]
				self.data = loads(decodestring(val))
		else:
			import md5, time

			self.new = 1
			id =  md5.new(str(time.time())).hexdigest()
			self.data = {}
		self.id = id
	def __del__(self):
		if len(self.data) == 0:
			return
		self.save()
	def __getitem__(self, name):
		if self.data.has_key(name):
			return self.data[name]
		else:
			return None
	def __setitem__(self, name, value):
		self.data[name] = value
	def __delitem__(self, name):
		try:
			del self.name[name]
		except:
			pass
	def __len__(self):
		return len(self.data)
	def has_key(self, name):
		return self.data.has_key(name)
	def save(self):
		if self.new:
			self.con.query("insert into session values ('%s', '%s')" % (self.id, encodestring(dumps(self.data))))
		else:
			self.con.query("update session set val = '%s', create_time = current_timestamp where sess_id = '%s'" % (encodestring(dumps(self.data)), self.id))
		
def _get_cookie(req):
	if req.headers_in.has_key('Cookie'):
		ret = {}
		cookies = req.headers_in['Cookie'].split(';')
		for cookie in cookies:
			equal_pos = cookie.index('=')
			key, value = cookie[:equal_pos], cookie[equal_pos+1:]
			ret[key.strip()] = value.strip()
		return ret
	else:
		return None

def _start_session(req, con):
	global session_data

	py_log = open('/home/nineclue/py_log', 'a')
	py_log.write('Session_data length : %d\n' % len(session_data))
	py_log.close()
	if req.cookie and req.cookie.has_key(_MODPYTHONID):
		req.session_var = session_data[req.cookie[_MODPYTHONID]]
	else:
		req.session_var = session_var(con)
		req.headers_out.add('Set-Cookie', '%s = %s' % (_MODPYTHONID, req.session_var.id))
		req.send_http_header()
		session_data[req.session_var.id] = req.session_var

def _get_con():
	global pg_con

	try:
		con = pg_con
	except NameError:
		pg_con = pg.connect(PG_DB)
		con = pg_con
	
	return con

def handler(req):
	global session_data

	if req.cookie:
		for key in req.cookie.keys():
			req.write('Cookie (%s) : (%s)<BR>' % (key, req.cookie[key]))
	req.write('Session Variable has %d items' % len(session_data))
	if req.session_var.has_key('count'):
		req.session_var['count'] = req.session_var['count'] + 1
	else:
		req.session_var['count'] = 0
	req.write('Counter : %02d' % req.session_var['count'])
	return apache.OK

def headerparserhandler(req):
	name_split = req.uri.rfind('/')
	req.path, req.pname = req.uri[:name_split], req.uri[name_split + 1:]

	req.cookie = _get_cookie(req)
	if req.path in _SESSION_PATH:
		con = _get_con()
		_start_session(req, con)

	return apache.OK

When I try, counters are correctly increased at first time but Key error
is raised after and py_log (used at _start_session function) shows length
of session_data is 0.

I'm using Apache 1.3.19 with statistically compiled mod_python 2.7.2
Python/2.0 (thread enabled) in Mandrake 7.1.
 


From nineclue at bigfoot.com  Tue Apr 17 16:32:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>

Greetings...

I've posted somewhat long python program during development, which
may need pg module, postgres running with pyweb db created etc...

Here's short version, which don't work as I expected.

from mod_python import apache

session_data = {}
session_counter = 0

def handler(req):
        global session_data, session_counter

        if session_data.has_key('counter'):
                session_data['count'] = session_data['count'] + 1
        else:
                session_data['count'] = 0

        session_counter += 1
        req.write('<HTML>')
        req.write('Session data has %d items<BR>' % len(session_data))
        req.write('Counter : %02d<BR>' % session_data['count'])
        req.write('Alternative Counter : %02d<BR>' % session_counter)
        req.write('</HTML>')
        return apache.OK

When I loaded the page and tried several reloads, session_data dictionary
variable is never increased and session_counter variable is increased
after several tries. What I expected was both variable increase at each
reload.

In my thoughts, dictionary variable is not supported and main interpreter
is created in each Apache processes, which is shared by subinterpreters.

Sorry for posting again, long message and my poor English.

Thanks in advance.


From victor at prodigy.net  Tue Apr 17 08:25:04 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com
 >
Message-ID: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>

I don't see where you are creating a dictionary entry with a key 'counter'. 
Therefore, the statement in the else clause:

         session_data['count'] = 0

will always be executed. Perhaps you want to say:

          if session_data.has_key('count'):

At 04:32 PM 4/17/01 +0900, nineclue@bigfoot.com wrote:
>Greetings...
>
>I've posted somewhat long python program during development, which
>may need pg module, postgres running with pyweb db created etc...
>
>Here's short version, which don't work as I expected.
>
>from mod_python import apache
>
>session_data = {}
>session_counter = 0
>
>def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
>When I loaded the page and tried several reloads, session_data dictionary
>variable is never increased and session_counter variable is increased
>after several tries. What I expected was both variable increase at each
>reload.
>
>In my thoughts, dictionary variable is not supported and main interpreter
>is created in each Apache processes, which is shared by subinterpreters.
>
>Sorry for posting again, long message and my poor English.
>
>Thanks in advance.
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://www.modpython.org/mailman/listinfo/mod_python

__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010417/01836390/attachment-0001.htm
From nineclue at bigfoot.com  Tue Apr 17 21:52:54 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>
Message-ID: <Pine.LNX.4.10.10104172142090.7770-100000@mrham.hamslab.com>

You're right. :)

I had the obsession that dictionary is not correctly handled in
mod_python. So, I didn't even looked at the source second time.
Sorry about that.

I found that dictionary variable is handled by mod_python same as simple
variable. But it's still increased after several retries.
My apache configuration of StartServers and MinSpareServers are 
5. Main interpreter per apache process, right? Or I'm still confused or
under the delusion.


From grisha at modpython.org  Tue Apr 17 10:00:47 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>

I think you have a bug because you have "count" and "counter", so it may
not work for this reason alone.

But also - if this is on UNIX, then you have to keep in mind that Apache
runs as several independent processes, and you can only have persistance
per-process. There is no "simple" way to have cross-process persistance.

On Win32, where Apache runs as a single process, it should work OK.

Grisha

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> Greetings...
>
> I've posted somewhat long python program during development, which
> may need pg module, postgres running with pyweb db created etc...
>
> Here's short version, which don't work as I expected.
>
> from mod_python import apache
>
> session_data = {}
> session_counter = 0
>
> def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
> When I loaded the page and tried several reloads, session_data dictionary
> variable is never increased and session_counter variable is increased
> after several tries. What I expected was both variable increase at each
> reload.
>
> In my thoughts, dictionary variable is not supported and main interpreter
> is created in each Apache processes, which is shared by subinterpreters.
>
> Sorry for posting again, long message and my poor English.
>
> Thanks in advance.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at bigfoot.com  Tue Apr 17 23:34:02 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>
Message-ID: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>

Thank you for the point.

I have other questions. 

I'm trying to implement session like mechanism using mod_python. If
interpreter is created in each processes, is there a way to make a
variable really persistent? I think I should make some daemon that
connects thru named pipe to get/pass session information. Is there
any other way?

Second, in my first posting, I've created some ugly class that is attached
to Request object. I thought after handling of client's request, the
request object would be deleted. Am I right? Then what happens to the
attached class instance? If it is destructed with req object, I can save
session data in __del__ function. If not, should I hook cleanup phase to
save session data?

Lastly, I can't get mailing list's whole raw archive link. I just got 404
error.

I think I've already posted enough mails to the list. I AM really sorry.



From grisha at modpython.org  Tue Apr 17 10:50:07 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104171048001.76504-100000@localhost>

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

Yes, it's called cookies.

> Second, in my first posting, I've created some ugly class that is attached
> to Request object. I thought after handling of client's request, the
> request object would be deleted. Am I right? Then what happens to the
> attached class instance? If it is destructed with req object, I can save
> session data in __del__ function. If not, should I hook cleanup phase to
> save session data?

__del__ is not something you should rely on. You should register a cleanup
instead.

Grisha


From gdamjan at mail.net.mk  Wed Apr 18 00:55:47 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>; from nineclue@bigfoot.com on Tue, Apr 17, 2001 at 11:34:02PM +0900
References: <Pine.BSF.4.32.0104170957580.75906-100000@localhost> <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <20010418005547.A237@local.izmislen.mk>

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

I've been thinking about session managment for mod_python too, and it seems
like an important issue. I'd sugest we develop a common interface to session
managment, and then write specific modules that handle the job, by ways of
cookies, databases, special daemons etc...

Any ideas?

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From nineclue at bigfoot.com  Wed Apr 18 09:58:57 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.LNX.4.10.10104180948390.8965-100000@mrham.hamslab.com>


On Wed, 18 Apr 2001, Damjan wrote:

> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...

In my opinion, best way would be using shared memory if possible. I'm not
good at Apache & python, but I found that mod_auth_digest in Apache 2.0
supports session caching accross processes using shared memory (New
Features in Apache 2.0 page). 

A general dictionary variable per main interpreter. So handler can
register it's own variable within dictionary variable with a key, that
could be used in session handling, caching small tables (DBMS data)...


From grisha at modpython.org  Tue Apr 17 23:24:45 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>

In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ???????????? ??????????????????????
> Skopje, Macedonia		|           ????????????, ????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From benno at sesgroup.net  Wed Apr 18 13:58:15 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>; from grisha@modpython.org on Tue, Apr 17, 2001 at 11:24:45PM -0400
References: <20010418005547.A237@local.izmislen.mk> <Pine.BSF.4.32.0104172311590.82748-100000@localhost>
Message-ID: <20010418135815.A27089@sesgroup.net>

On Tue, 17 Apr 2001, Gregory (Grisha) Trubetskoy wrote:

> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.

<snip>

As someone who has used mod_python for a rather large project i have to 
agree with Grisha here. I don't want want all the state stuff in there on
project where I don't need it. mod_python gives me a platform where I can
people those things on top as I need them.

Also I don't think that you really need shared memory for session etc
since you can usually store that to a database, which gives you other
advantages. A decent database impl. should be fast enough to cope with
that kinda thing.

My 2c worth,

Benno

> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it seems
> > like an important issue. I'd sugest we develop a common interface to session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ???????????? ??????????????????????
> > Skopje, Macedonia		|           ????????????, ????????????????????
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From CHagner at fool.com  Wed Apr 18 00:40:29 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>

On the issue of supporting modules (i.e. user sessions), there are simply
too many ways to implement something like that to make it worth coupling it
to mod_python.  You'll either try to be too much for too many people (the
classic framework error) or you'll be so custom to your needs that your
audience is just you (not a bad thing, just not a place for a solution like
mod_python).

I completely agree with Grisha that even the handler is outside of the core
mod_python functionality.  That being said, a listing of available handlers
on the web site would be very useful for those starting/considering using
mod_python.  I do think that having this area up there (even it's a bit
spares initially) will motivate others to share their handlers/frameworks
that are used with mod_python.

What other handlers have people written?  I've got one that implements a
servlet-like call mechanism (thereby avoiding the urls being mapped to
script files).  It's not for everyone, but a perfect example of a decision
that was made for a specific need.

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Tuesday, April 17, 2001 11:25 PM
To: Damjan
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...



In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it
seems
> like an important issue. I'd sugest we develop a common interface to
session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ????????????
??????????????????????
> Skopje, Macedonia		|           ????????????,
????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From woodm at equire.com  Wed Apr 18 00:10:12 2001
From: woodm at equire.com (Matthew D. Wood)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
References: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <3ADD2FC3.4109069D@equire.com>

I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has some
sort of shared memory, then obviously, this is a potential place.  Other places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the goal
of mod_python is to give access, through a python interface, to the internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.  If
you want a more general thing, either remove some code, or at worst, you have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From nineclue at bigfoot.com  Wed Apr 18 16:26:10 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again.
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <Pine.LNX.4.10.10104181615250.9552-100000@mrham.hamslab.com>

mod_python don't have to come with custom module, but if Apache 2.0
supports shared memory (don't know about 1.3.X) it would be nice to see
that feature available to mod_python. It's not related to custom module.
But at least we can make somewhat modified persistent variable in UNIX
systems and make our custom module or ... I think this is related to
mod_python.

On Wed, 18 Apr 2001, Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
> 
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
> 
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
> 
> Chris
> 
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
> 
> 
> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
> 
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
> 
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
> 
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
> 
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ÐÐÐ¼ÑÐÐ½
> ÐÐÐ¾ÑÐ³Ð¸ÐÐÑÐÐ¸
> > Skopje, Macedonia		|           ÐÐÐ¾Ð¿ÑÐ,
> ÐÐÐÐÐÐ¾Ð½Ð¸ÑÐ
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From CHagner at fool.com  Wed Apr 18 10:19:58 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C9B@rover.foolhq.com>

I think we're actually in agreement here...

My point was not that the handler is the wrong place for these types of
things, only that the handler is not a core part of the mod_python package.
Having just tackled a new handler and framework, I too would love to see
some more visible framework solutions for mod_python.  That being said, one
of the best things about mod_python is that it isn't really a web app
framework.  It's a barebones implementation that requires some sort of
framework (a handler or more) for an actual app to be developed.

Similarly, I don't think a session handler is 'bad', just that making it a
part of the mod_python package weighs down the implementation (for those
that don't want/use it).  One of the reasons open source development works
so well is that the software is _highly_ componentized, thereby allowing
grisha to focus on his part and whoever to focus on something like a session
handler on top of mod_python (but not as a part of it).

I think we all see value in having the functionality available, and it
appears there's just a disagreement on how it should be made available (in
relation to mod_python).

Just my thoughts.  Take 'em or leave 'em.

Chris

-----Original Message-----
From: Matthew D. Wood [mailto:woodm@equire.com]
Sent: Wednesday, April 18, 2001 2:10 AM
To: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...


I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for
the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has
some
sort of shared memory, then obviously, this is a potential place.  Other
places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data
base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the
goal
of mod_python is to give access, through a python interface, to the
internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available
and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler
not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.
If
you want a more general thing, either remove some code, or at worst, you
have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling
it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution
like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the
core
> mod_python functionality.  That being said, a listing of available
handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways
of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From richard at ccpgames.com  Wed Apr 18 16:50:36 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:52:20 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>

I am currently working on session management for my project.  One thing
I can't
seem to do for the life of me is to clear out a cookie on the browser
thats
connecting to the site.

    r.headers_out["set-cookie:"] = \
        "IRWB_SESSIONID=%s;" \
	  "Expires: %s;" \
        "Cache-control: no-cache;" \
        "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)

Is what I use to try and expire a cookie immediately, it may be
overkill, but
still, it doesn't work as I wish.  However, it does work if I close the
browser
and reopen it to the given site.

Am I doing something wrong?  I am pretty sure I could clear out cookies
this
way in Visual Interdev/VB/ASP.

Thanks in advance,
Richard.

From slim at maya.com  Wed Apr 18 13:28:26 2001
From: slim at maya.com (Seung Chan Lim)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] cookies/session management
References: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>
Message-ID: <034101c0c82c$f9ebcbb0$befe46c0@airwolf>

>     r.headers_out["set-cookie:"] = \
>         "IRWB_SESSIONID=%s;" \
>   "Expires: %s;" \
>         "Cache-control: no-cache;" \
>         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
>

without knowing anything about mod_python, have you tried
setting the expires section to be

Thu, 01-Jan-70 00:00:01 GMT

? (i.e. in GMT format )

what do you mean by "it works if [you] close the browser and reopen it to
the given site." ?
you mean the cookie value lingers around in a given session ? are you
checking to
see if this cookie exist on the server side code or via client-side code
like javascript or something?

I'm just grabbing stuff out of thin-air here. =)

slim






From richard at ccpgames.com  Wed Apr 18 17:45:08 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>

> -----Original Message-----
> From: Seung Chan Lim [mailto:slim@maya.com]
> Sent: 18. apr?l 2001 17:28
> To: Mod_python@modpython.org
> Subject: Re: [mod_python] cookies/session management
> 
> 
> >     r.headers_out["set-cookie:"] = \
> >         "IRWB_SESSIONID=%s;" \
> >   "Expires: %s;" \
> >         "Cache-control: no-cache;" \
> >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> >
> 
> without knowing anything about mod_python, have you tried
> setting the expires section to be
> 
> Thu, 01-Jan-70 00:00:01 GMT

Now I have :)  Oops.  Unfortunately no change in behaviour.

> what do you mean by "it works if [you] close the browser and 
> reopen it to
> the given site." ?
> you mean the cookie value lingers around in a given session ?

Yes.
If I set an expiry date in the future, the cookie lingers past browser
open and closes as would be expected.
If I set something (including the expiry thing above) that indicates
that the cookie should be expunged then:
  - If I reload the page, the cookie is still there.
  - If I close and reopen the browser, the cookie is no longer there.

> are you
> checking to
> see if this cookie exist on the server side code or via 
> client-side code
> like javascript or something?

Server side code:
  if r.headers_in.has_key('Cookie'):
    c = r.headers_in['Cookie']

Richard.

From richard at ccpgames.com  Wed Apr 18 17:49:33 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C7@control.central.ccp.cc>

> Why don't you set          "IRWB_SESSIONID=%s;" to some 
> "Expire" value. At scriptfoundry session ids are the ids to a 
> session object. When this expires we flag the object to be expired. 

Isn't that what I am doing with:
    r.headers_out["set-cookie:"] =
      "IRWB_SESSIONID=%s;"
      "Expires: Thu, 01-Jan-70 00:00:01 GMT;"
      "Cache-control: no-cache;"
      "Max-Age=0" % sessionID
?

Unfortunately, the core problem is that if they get a new session
cookie with the old one marked as expired, they build up a range of
cookies in the headers (at least until the browser gets closed I
guess).

> thanos
> PS: We have a modpython handler that adds a session object to req.

Can you elaborate on this?  It sounds interesting and relevant but
when it comes down to it, I have no idea what you mean :)

Thanks,
Richard.

From richard at ccpgames.com  Wed Apr 18 22:10:53 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>

OK, next problem :)

My handler module imports my session handling module.
However, after a given amount of time, the session module is garbage
collected.  Either that or it is my handler module that is being
garbage collected and the session module then in turn (seems more
likely).

My question is, is there any way I can keep them both in memory?

Richard.

From gdamjan at mail.net.mk  Thu Apr 19 00:47:35 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] cookies/session management
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>; from richard@ccpgames.com on Wed, Apr 18, 2001 at 05:45:08PM -0000
References: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>
Message-ID: <20010419004735.A857@local.izmislen.mk>

> > >     r.headers_out["set-cookie:"] = \
> > >         "IRWB_SESSIONID=%s;" \
> > >   "Expires: %s;" \
> > >         "Cache-control: no-cache;" \
> > >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> > >
> > 
> > the given site." ?
> > you mean the cookie value lingers around in a given session ?
> 
> Yes.
> If I set an expiry date in the future, the cookie lingers past browser
> open and closes as would be expected.
> If I set something (including the expiry thing above) that indicates
> that the cookie should be expunged then:
>   - If I reload the page, the cookie is still there.
>   - If I close and reopen the browser, the cookie is no longer there.

Maybe it's a bug in the browser?? 
Anyway, try adding "path=/;" to the cookie and see what happens.

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at modpython.org  Wed Apr 18 23:33:58 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] garbage collection problems
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>
Message-ID: <Pine.BSF.4.32.0104182332110.6507-100000@localhost>

I've never seen Python garbage-collect something that still has a
reference to it - that functionality is rock solid

more likely your apache process dies/recycles itself.

Grisha

On Wed, 18 Apr 2001, Richard wrote:

> OK, next problem :)
>
> My handler module imports my session handling module.
> However, after a given amount of time, the session module is garbage
> collected.  Either that or it is my handler module that is being
> garbage collected and the session module then in turn (seems more
> likely).
>
> My question is, is there any way I can keep them both in memory?
>
> Richard.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From richard at ccpgames.com  Thu Apr 19 10:38:19 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>

> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> 
> I've never seen Python garbage-collect something that still has a
> reference to it - that functionality is rock solid
> 
> more likely your apache process dies/recycles itself.

This does seem to be sort of what is happening - namely that apache
seems to keep running but kill the interpreter and start a new one.

Is this the way it is supposed to work?
Have I misconfigured something?
Is there anything I can do about this?

Thanks,
Richard.

From rsalz at zolera.com  Thu Apr 19 07:20:56 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] garbage collection problems
References: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>
Message-ID: <3ADECA18.EE84B888@zolera.com>

> This does seem to be sort of what is happening - namely that apache
> seems to keep running but kill the interpreter and start a new one.

Most likely the apache process is exiting and a new one starting.
Read about MaxChildRequests in the apache config docs.

From benno at sesgroup.net  Sat Apr 21 01:03:25 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] internal_redirect
Message-ID: <20010421010325.A21438@sesgroup.net>

Hi,

I was wondering if it was possible to do an internal redirect
with mod_python? Apache seems to have the ap_internal_redirect
function which takes a request pointer and an URI, which would map
to Request.internal_redirect(uri) in python.

Just wondering if this is meant to be there and I'm missing something,
or if there is another way to achieve this, or if there is a reason
it isn't implemented.

Cheers,

Benno

From grisha at modpython.org  Fri Apr 20 11:39:34 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] internal_redirect
In-Reply-To: <20010421010325.A21438@sesgroup.net>
Message-ID: <Pine.BSF.4.32.0104201137510.35720-100000@localhost>

it's not there now, it was one of the "would be nice to have" features,
but many people are asking me about it, so it does seem like a needed
feature

On Sat, 21 Apr 2001, Ben Leslie wrote:

> Hi,
>
> I was wondering if it was possible to do an internal redirect
> with mod_python? Apache seems to have the ap_internal_redirect
> function which takes a request pointer and an URI, which would map
> to Request.internal_redirect(uri) in python.
>
> Just wondering if this is meant to be there and I'm missing something,
> or if there is another way to achieve this, or if there is a reason
> it isn't implemented.
>
> Cheers,
>
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From bbhaydon at bigpond.com  Sat Apr 21 13:13:55 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
Message-ID: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>

The posts re: persistent variables highlight the
need for a site to promotes and encompasses solutions
developed with modpython as per Zend.

Does anyone have an idea for a name??
Perhaps it's worth persuing if only to get service
providers to include modpython along with modphp and
modperl as an offering.

For my own part, I've been using the modusertrack in
Apache to do cookie creation, and have a simple cache
class to store state. Although I haven't actually tried
it, I am considering using ZODB as a solution for 
storing state between interpreters.

regards,

brett

bbhaydon at bigpond dot com

From benno at sesgroup.net  Sat Apr 21 13:26:23 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>; from bbhaydon@bigpond.com on Sat, Apr 21, 2001 at 01:13:55PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>
Message-ID: <20010421132623.A30371@sesgroup.net>

On Sat, 21 Apr 2001, Brett Haydon wrote:

> The posts re: persistent variables highlight the
> need for a site to promotes and encompasses solutions
> developed with modpython as per Zend.

I'm not sure exactly what you mean by zend here?

From deneb at unixwave.org  Sat Apr 21 12:41:01 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 01:26:23PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net>
Message-ID: <20010421124101.A442@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, Brett Haydon wrote:
> Whats wrong with a real database? I think you'll run into
> far fewer concurrency issues using a database vs. ZODB.
It will be nice to have a set of classes integrated in the mod_python,
which set will manage the DBMS as same as PHP has methods to interface
itself with MySQL. 
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From benno at sesgroup.net  Sat Apr 21 21:27:35 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421124101.A442@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 12:41:01PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org>
Message-ID: <20010421212735.A30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > Whats wrong with a real database? I think you'll run into
> > far fewer concurrency issues using a database vs. ZODB.
> It will be nice to have a set of classes integrated in the mod_python,
> which set will manage the DBMS as same as PHP has methods to interface
> itself with MySQL. 


But python already has all this! I don't see any need to have 
special mod_python things when you have the entire python libraries
available.

Benno

From deneb at unixwave.org  Sat Apr 21 14:03:52 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421212735.A30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 09:27:35PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net>
Message-ID: <20010421140352.A625@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> 
> > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > Whats wrong with a real database? I think you'll run into
> > > far fewer concurrency issues using a database vs. ZODB.
> > It will be nice to have a set of classes integrated in the mod_python,
> > which set will manage the DBMS as same as PHP has methods to interface
> > itself with MySQL. 
> 
> 
> But python already has all this! I don't see any need to have 
> special mod_python things when you have the entire python libraries
> available.
Performance :) That's why.
 
> Benno

From rsalz at zolera.com  Sat Apr 21 08:16:39 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <3AE17A27.A88F64AC@zolera.com>

> > But python already has all this! I don't see any need to have
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

WTF?

How will "import mysqldb" be any faster in mod_python than in other
python programs?

Please explain how you think you'll gain performance -- are you talking
about writing special C code with a python glue layer?  For
"authentication" only?

Yuk.
	/r$

From benno at sesgroup.net  Sat Apr 21 22:16:17 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421140352.A625@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 02:03:52PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <20010421221617.B30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> > 
> > > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > > Whats wrong with a real database? I think you'll run into
> > > > far fewer concurrency issues using a database vs. ZODB.
> > > It will be nice to have a set of classes integrated in the mod_python,
> > > which set will manage the DBMS as same as PHP has methods to interface
> > > itself with MySQL. 
> > 
> > 
> > But python already has all this! I don't see any need to have 
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

Explain how you can get better performance with some mythical mod_python
database module vs native python module? Personally I think any speedup 
woudl be very marginal and not worse the extreme cost of code duplication
etc.

Benno

From deneb at unixwave.org  Sat Apr 21 19:29:34 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <3AE17A27.A88F64AC@zolera.com>; from rsalz@zolera.com on Sat, Apr 21, 2001 at 08:16:39AM -0400
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <3AE17A27.A88F64AC@zolera.com>
Message-ID: <20010421192934.A1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 08:16:39AM -0400, Rich Salz wrote:
 
> Please explain how you think you'll gain performance -- are you talking
> about writing special C code with a python glue layer?  
Yes. 

From deneb at unixwave.org  Sat Apr 21 19:37:24 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421221617.B30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 10:16:17PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net>
Message-ID: <20010421193724.B1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> Explain how you can get better performance with some mythical mod_python
> database module vs native python module? Personally I think any speedup 
> woudl be very marginal and not worse the extreme cost of code duplication
> etc.

Writing for example the MySQLdb module inside mod_python ;-).
Simply in my projects I don't care about code duplication.
    

From benno at sesgroup.net  Sun Apr 22 09:58:04 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421193724.B1540@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 07:37:24PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net> <20010421193724.B1540@lisa.unixwave.org>
Message-ID: <20010422095804.A11979@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> > Explain how you can get better performance with some mythical mod_python
> > database module vs native python module? Personally I think any speedup 
> > woudl be very marginal and not worse the extreme cost of code duplication
> > etc.
> 
> Writing for example the MySQLdb module inside mod_python ;-).
> Simply in my projects I don't care about code duplication.

Well to be blunt I think that is pretty silly. You're yet to explain how
you would be able to achieve a speed up by having a module "inside" mod_python
versus putting "import MySQLdb" at the top of you handler. The handler is 
only started once so the extra milliseconds loading a module is irrelevant.

Next you'll be saying you want special regexp handling libraries and special
string handling libraries "inside" mod_python.

If mod_python ever does get a MySQLdb module inside it I will be the first
to fork the porject. (Not that I think Grisha would ever let it happen in
the first place).

Benno

From bbhaydon at bigpond.com  Mon Apr 23 14:47:02 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>
Message-ID: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>

>>I'm not sure exactly what you mean by zend here?

Ok, maybe I was a little vague. Ignoring Zend the PHP
engine for a second, most of what Zend the site is about
is promoting peripheral code and applications that build
upon or are built using PHP.

The PHP site itself is narrowly focused on PHP the language
much like the modpython site is about modpython not 
modpython solutions.

I personally think modpython needs a community site to give
it a higher exposure. Modpython promotes a different style
of development from say PHP, asp, etc, which needs a change
of thinking to see it's advantages, and lots of example 
code.

>>Whats wrong with a real database? I think you'll run into
far fewer concurrency issues using a database vs. ZODB.

I confess to having no idea on this. ZODB seemed a simpler
way to store objects, but maybe some benchmarking will be
prudent first..

Brett


From grisha at modpython.org  Mon Apr 23 10:06:16 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>
Message-ID: <Pine.BSF.4.32.0104231003410.7351-100000@localhost>

I think it's an excellent idea.

But ideas are just that - ideas, until someone acts on them...

;-)

Grisha

On Mon, 23 Apr 2001, Brett Haydon wrote:

> I personally think modpython needs a community site to give
> it a higher exposure. Modpython promotes a different style
> of development from say PHP, asp, etc, which needs a change
> of thinking to see it's advantages, and lots of example
> code.


From marcf at becomm.com  Mon Apr 23 11:34:09 2001
From: marcf at becomm.com (=?UTF-8?B?TWFyYyBGaXVjenluc2tp?=)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] =?UTF-8?B?UHVibGlzaGVyIHByb2JsZW0u?=
Message-ID: <A9DFD9380C01D4118E740050DA7A89703862A6@becomm-mis2.becomm.com>

Hi, 

I am using mod_python 2.7.2 on a linux RH7.0 machine running apache 1.3.14
and using Python 2.0.  Both my apache.py and publisher.py modules have minor
patches (one to reload modules in apache.py properly, the other to treat
file objects correctly in publisher.py), but those patched regions of code
are not the ones that I am seeing trouble with nor do I think they are
involved with the problem I am having.  But who knows.  Bottom line, the
line numbers listed below for publisher.py and apache.py may not match up
directly with the same modules in a pristine 2.7.2 release.

Below is a trace of the problem that I am seeing.

Mod_python error: "PythonHandler mod_python.publisher"
Traceback (most recent call last):
  File "/hotbeads/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File
"/hotbeads/local/lib/python2.0/site-packages/mod_python/publisher.py", line
171, in handler
    result = apply(object, (), args)
TypeError: not enough arguments; expected 2, got 1


The odd thing is that my code seems to be called correctly. My publisher
handler has two arguments (req and xmlfile) and it successfully processes
the xmlfile and returns a correct result followed by the above text.  So, it
seems that the type error is occurring _after_ the apply() has already done
its work.  I am fairly confused as to what is going on.  Can someone help me
out?

Thanks,
Marc

From CHagner at fool.com  Mon Apr 23 23:23:28 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>

Hey gang,

There's a utility called pydoc that's in the new python 2.1 release...
anyway, the author of it wrote a really snazzy error handling page for cgi
scripts (called cgitb)... check out the output and see if you find it
useful.

Here's a sample cgitb output page...
http://www.lfw.org/python/test4.html

Here's where you can get the module for it...
http://www.lfw.org/python/

Okay, except for the nasty colors, I'd love to see something closer to this
in the standard mod_python error handler(apache.py).  I guess the most
flexible way would be to have a PythonErrorModule directive and allow each
person to override the default error display with their own module (in this
case, the cgitb module).  The key is that this functionality would only
really be appropriate for a development environment...

Thoughts?

Chris

From grisha at modpython.org  Mon Apr 23 23:53:36 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] Fancy Shmancy Exception Output
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>
Message-ID: <Pine.BSF.4.32.0104232351330.19725-100000@localhost>

I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From CHagner at fool.com  Tue Apr 24 09:41:38 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47D00@rover.foolhq.com>

Yeah, the colors are pretty nasty... I'm thinking Yee (the author) is
color-blind...

FYI, cgitb does not have any 2.1 dependencies... I have it wired into my
handler and it works great (running 2.0).  As I said, this is less ideal,
since it should really be wired into apache.py so that the handler isn't
bothered with catching EVERY error...

I've gotten some pretty good feedback from our developers.  We're so used to
getting an error and then having to go to our tail of the error log (and
then to the code to see what line it is)... it's very nice to shorten that
cycle.

Here's the code snippet I used to integrate it (Prepare to be wowed...)

import cgitb

# Within the handler module's handler method...

    try:
        # all of the stuff that happens in my handler's primary method
    except:
       # NOTE: I use my own request object to wrap the apache-provided one, 
       # so these calls are not the standard apache API calls
       req.setContentType("text/html")
       req.sendHTTPHeader()
       # Calling the handle method of cgitb just prints the output of 
       # breaker() and html() to standard out.
       # Thus, I skip that and do it myself.
       errHtml = str(cgitb.breaker()) + str(cgitb.html())
       req.write(errHtml)

    return apache.OK

Grisha, I'm more than happy to make the mod to apache.py if you don't have
the time... All I'd need is a new directive that is accessible from within
mod_python.apahce.ReportError().  I don't think it would require any other
changes.  

Okay, thinking about it more, I'd add a parameter to ReportError called
error_handler (just like how the debug parameter is passed in)...

Thus, something like this would be added to mod_python.apache.Dispatch()

        config = _req.get_config()
        if config.has_key("PythonErrorHandler"):
            error_handler = config["PythonErrorHandler"]
        else:
            error_handler = None

and all ReportError() calls would have error_handler passed in...

        result = ReportError(etype, value, traceback, htype=htype,
hname=handler, debug=debug, error_handler=error_handler)

Then, ReportError would have something like this...

         if not debug:
                return HTTP_INTERNAL_SERVER_ERROR
         else:
                # write to client
                if error_handler:
                        req.content_type = 'text/html'
                        s = str(cgitb.breaker()) + str(cgitb.html())
                else:
                        req.content_type = 'text/plain'
                        s = '\nMod_python error: "%s %s"\n\n' % (htype,
hname)
                        for e in traceback.format_exception(etype, evalue,
etb):
                             s = s + e + '\n'

                req.send_http_header()
                req.write(s)

                return DONE

This code is a bit of a brain dump on my part, so don't even think that I've
run/tested it yet... :-)  Let me know if I'm missing something... 

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Monday, April 23, 2001 11:54 PM
To: Chris Hagner
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Fancy Shmancy Exception Output



I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to
this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in
this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

From richard at ccpgames.com  Wed Apr 25 23:54:50 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] Apache settings wrong?
Message-ID: <FC15F916EC764C42A4219BC30BFBC0720770A2@control.central.ccp.cc>

I have two mod_python directories defined in my apache config.
However, accessing the second shows me the first.
And of course, accessing the first shows me the first.
Am I doing something wrong?

Thanks,
Richard.

ScriptAlias /ir/ "/home/httpd/.../whelkboard/cgi/index.shtml"

<Directory /home/httpd/sorrows/whelkboard/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

ScriptAlias /icelandic/
"/home/httpd/.../icelandic-language/cgi/index.shtml"

<Directory /home/httpd/.../icelandic-language/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

From nineclue at bigfoot.com  Fri Apr 27 13:13:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] FieldStorage class
Message-ID: <Pine.LNX.4.10.10104261403020.21425-100000@mrham.hamslab.com>

Hello,

During playing with util.FieldStorage classes I found that when form data
is loaded with POST method, Request object has already has 'data' member
that is loaded with form variables, even without creating intance of
FieldStorage. I tried to search manual about this, but failed. 

Is this member is safe to use in my code? Will this be supported in future
versions?

Thanks in advance.

Suhku Huh



From adoyle at intl-interfaces.com  Mon Apr 30 10:13:05 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
Message-ID: <3AED72F1.F6056FFB@intl-interfaces.com>

Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
security for Apache? I'm getting segmentation faults when I try to use it on
an https address (things work fine under http).

I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
whether I'm invoking mod_python or not, the https side of things core dumps
if I have the mod_python directives in the httpsd.conf file and does not core
dump if I comment them out.

Based on Covalent's web site I've taken LARGEFILE support out of
Python/mod_python (
http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
)

You can see the code I'm running at
http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
and try it out by clicking on the map found at
http://www.intl-interfaces.net/cookbook/WMS/

Now I want to play with x.509 control over who can see what maps so I want to
move things into https.

Any help would be appreciated.

    Allan

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



From grisha at modpython.org  Mon Apr 30 10:35:04 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
In-Reply-To: <3AED72F1.F6056FFB@intl-interfaces.com>
Message-ID: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>

Since Raven is a commercial product, I think you should (at least try)
making it Covalent's problem :) I'd like to hear what they say, and if
they can suggest a fix, I'm sure we can incorporate it into the code.

Also - since the expiration of the RSA patent last september, there is no
legal need to use Raven, and mod_python works really well with mod_ssl.

Grisha

On Mon, 30 Apr 2001, Allan Doyle wrote:

> Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> security for Apache? I'm getting segmentation faults when I try to use it on
> an https address (things work fine under http).
>
> I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> whether I'm invoking mod_python or not, the https side of things core dumps
> if I have the mod_python directives in the httpsd.conf file and does not core
> dump if I comment them out.
>
> Based on Covalent's web site I've taken LARGEFILE support out of
> Python/mod_python (
> http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> )
>
> You can see the code I'm running at
> http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> and try it out by clicking on the map found at
> http://www.intl-interfaces.net/cookbook/WMS/
>
> Now I want to play with x.509 control over who can see what maps so I want to
> move things into https.
>
> Any help would be appreciated.
>
>     Allan
>
> --
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> Allan Doyle                     adoyle@intl-interfaces.com
> International Interfaces        +1 781 433 2695 (Office)
> http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From adoyle at intl-interfaces.com  Mon Apr 30 10:42:04 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 21:52:21 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
References: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>
Message-ID: <3AED79BC.A45C7CF8@intl-interfaces.com>

I've already talked to Covalent, they saw no immediate misconfiguration and are also looking
into it but suggested I try this list as well... I can give mod_ssl a whirl.

Thanks,

    Allan

"Gregory (Grisha) Trubetskoy" wrote:

> Since Raven is a commercial product, I think you should (at least try)
> making it Covalent's problem :) I'd like to hear what they say, and if
> they can suggest a fix, I'm sure we can incorporate it into the code.
>
> Also - since the expiration of the RSA patent last september, there is no
> legal need to use Raven, and mod_python works really well with mod_ssl.
>
> Grisha
>
> On Mon, 30 Apr 2001, Allan Doyle wrote:
>
> > Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> > security for Apache? I'm getting segmentation faults when I try to use it on
> > an https address (things work fine under http).
> >
> > I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> > Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> > whether I'm invoking mod_python or not, the https side of things core dumps
> > if I have the mod_python directives in the httpsd.conf file and does not core
> > dump if I comment them out.
> >
> > Based on Covalent's web site I've taken LARGEFILE support out of
> > Python/mod_python (
> > http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> > )
> >
> > You can see the code I'm running at
> > http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> > and try it out by clicking on the map found at
> > http://www.intl-interfaces.net/cookbook/WMS/
> >
> > Now I want to play with x.509 control over who can see what maps so I want to
> > move things into https.
> >
> > Any help would be appreciated.
> >
> >     Allan
> >
> > --
> > ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> > Allan Doyle                     adoyle@intl-interfaces.com
> > International Interfaces        +1 781 433 2695 (Office)
> > http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



From lisicky at datis.cdrail.cz  Mon Apr  2 13:43:51 2001
From: lisicky at datis.cdrail.cz (Jiri Lisicky)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] processing checkbox field from form
Message-ID: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>

I am beginner on python and mod_python.

When I have form without checkbox field, everythig is OK. I use
publisher and get fields as parameters of function.

But when I add checkbox field I get to trouble. Number of parameters
is changing. In html documentation I found: "Unselected checkboxes and
radio buttons do not return name/value pairs when the form is
submitted." 

I don't know how write function for processing this parameters from
that form.

Is somewhere any example for my problem?

thanks

warning: my english is poor
--
        Ji?? Lisick?                      ?D KM?P Olomouc
e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
 phone: +420-068-472-2272                 Olomouc, Czech Republic
              >>> ?e?tina ISO-8859-2 Compatible <<<

From nineclue at cluelabs.com  Mon Apr  2 22:18:04 2001
From: nineclue at cluelabs.com (Suhku Huh)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] Install Error
Message-ID: <001d01c0bb77$5aa15a00$4901fea9@dongnam.thrunet.com>

Greetings...

I've just compiled Apache with mod_python and mod_ssl using ApacheToolbox statically and tried to execute testing script (mptest.py) but failed.

Followings are error message in log file. 

'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Sun Apr  1 22:25:52 2001] [error] [client 127.0.0.1] python_handler: make_obcallback returned no obCallBack!

I'm using Linux Mandrake 7.1 (kernel 2.2.16).
ApacheToolbox downloaded up to date sources of mod_python(2.7.2), Python(2.0), and Apache(1.3.19).
Directory configuration of Apache and Python code are exactly same as
manual Testing section.

Any help or comment would be appreciated.

Suhku Huh
nineclue@bigfoot.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010402/ddfe84b2/attachment-0002.htm
From johannes.govaerts at siemens.atea.be  Mon Apr  2 15:48:12 2001
From: johannes.govaerts at siemens.atea.be (Johannes Govaerts)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>; from lisicky@datis.cdrail.cz on Mon, Apr 02, 2001 at 13:43:51 +0200
References: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>
Message-ID: <20010402154812.A5396@zubr.iplab.atea.be>

You can use default values to deal with the changing number of parameters
in your function:
e.g. something like function(parameter1, parameter2, checkbox='not
checked')

Johannes.


On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> I am beginner on python and mod_python.
> 
> When I have form without checkbox field, everythig is OK. I use
> publisher and get fields as parameters of function.
> 
> But when I add checkbox field I get to trouble. Number of parameters
> is changing. In html documentation I found: "Unselected checkboxes and
> radio buttons do not return name/value pairs when the form is
> submitted." 
> 
> I don't know how write function for processing this parameters from
> that form.
> 
> Is somewhere any example for my problem?
> 
> thanks
> 
> warning: my english is poor
> --
>         Ji?? Lisick?                      ?D KM?P Olomouc
> e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
>  phone: +420-068-472-2272                 Olomouc, Czech Republic
>               >>> ?e?tina ISO-8859-2 Compatible <<<
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 
> 

From aiglauer at yahoo.com  Mon Apr  2 08:49:30 2001
From: aiglauer at yahoo.com (Alexis Iglauer)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154812.A5396@zubr.iplab.atea.be>
Message-ID: <20010402154930.86243.qmail@web13905.mail.yahoo.com>

A more elegant way could be to pass the parameters as a single
dictionary, not as individual parameters - and then use .has_key() to
check for the available params.

I generally use the following code to split a URL into params (req is
the apache request):
-----------------
URL = urlparse.urlparse (req.unparsed_uri)
params = {}
try:
    for x in split(URL[4], '&'):
        params[split(x,'=')[0]] = split(x,'=')[1]
except IndexError:
    pass
---------------------

I then pass 'params' to my functions.  I can check for a checkbox
called XXX by saying:

if params.has_key('XXX'):

This method will not happily handle multiple parameter values, but
could easily be modified to do so.

HTH
Alexis

--- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> You can use default values to deal with the changing number of
> parameters
> in your function:
> e.g. something like function(parameter1, parameter2, checkbox='not
> checked')
> 
> Johannes.
> 
> 
> On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > I am beginner on python and mod_python.
> > 
> > When I have form without checkbox field, everythig is OK. I use
> > publisher and get fields as parameters of function.
> > 
> > But when I add checkbox field I get to trouble. Number of
> parameters
> > is changing. In html documentation I found: "Unselected checkboxes
> and
> > radio buttons do not return name/value pairs when the form is
> > submitted." 
> > 
> > I don't know how write function for processing this parameters from
> > that form.
> > 
> > Is somewhere any example for my problem?
> > 
> > thanks
> > 
> > warning: my english is poor
> > --
> >         Jiøí Lisický                      ÈD KM®P Olomouc
> > e-mail: lisicky@datis.cdrail.cz           Vídeòská 15
> >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> >               >>> èe¹tina ISO-8859-2 Compatible <<<
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> > 
> > 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


__________________________________________________
Do You Yahoo!?
Get email at your own domain with Yahoo! Mail. 
http://personal.mail.yahoo.com/?.refer=text

From grisha at modpython.org  Mon Apr  2 12:31:37 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154930.86243.qmail@web13905.mail.yahoo.com>
Message-ID: <Pine.BSF.4.32.0104021231010.2762-100000@localhost>

I think the publisher modules already does what you're trying to do a
little bit cleaner

Grisha

On Mon, 2 Apr 2001, Alexis Iglauer wrote:

> A more elegant way could be to pass the parameters as a single
> dictionary, not as individual parameters - and then use .has_key() to
> check for the available params.
>
> I generally use the following code to split a URL into params (req is
> the apache request):
> -----------------
> URL = urlparse.urlparse (req.unparsed_uri)
> params = {}
> try:
>     for x in split(URL[4], '&'):
>         params[split(x,'=')[0]] = split(x,'=')[1]
> except IndexError:
>     pass
> ---------------------
>
> I then pass 'params' to my functions.  I can check for a checkbox
> called XXX by saying:
>
> if params.has_key('XXX'):
>
> This method will not happily handle multiple parameter values, but
> could easily be modified to do so.
>
> HTH
> Alexis
>
> --- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> > You can use default values to deal with the changing number of
> > parameters
> > in your function:
> > e.g. something like function(parameter1, parameter2, checkbox='not
> > checked')
> >
> > Johannes.
> >
> >
> > On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > > I am beginner on python and mod_python.
> > >
> > > When I have form without checkbox field, everythig is OK. I use
> > > publisher and get fields as parameters of function.
> > >
> > > But when I add checkbox field I get to trouble. Number of
> > parameters
> > > is changing. In html documentation I found: "Unselected checkboxes
> > and
> > > radio buttons do not return name/value pairs when the form is
> > > submitted."
> > >
> > > I don't know how write function for processing this parameters from
> > > that form.
> > >
> > > Is somewhere any example for my problem?
> > >
> > > thanks
> > >
> > > warning: my english is poor
> > > --
> > >         Ji?? Lisick?                      ?D KM?P Olomouc
> > > e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
> > >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> > >               >>> ?e?tina ISO-8859-2 Compatible <<<
> > > _______________________________________________
> > > Mod_python mailing list
> > > Mod_python@modpython.org
> > > http://www.modpython.org/mailman/listinfo/mod_python
> > >
> > >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
>
>
> __________________________________________________
> Do You Yahoo!?
> Get email at your own domain with Yahoo! Mail.
> http://personal.mail.yahoo.com/?.refer=text
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at mrham.hamslab.com  Tue Apr  3 21:32:45 2001
From: nineclue at mrham.hamslab.com (nineclue@mrham.hamslab.com)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] Sorry, Install error.
Message-ID: <Pine.LNX.4.10.10104032126360.23083-100000@mrham.hamslab.com>

Greetings....

Sorry for the contamination.
Now I'm using PINE thru telnet.

I've compiled Apache with mod_python using ApacheToolbox. When I tried
the Test (mptest.py) script, Server Error is raised. 
Followings are part of error_log.

[Tue Apr  3 21:35:23 2001] [notice] Apache/1.3.19 (Unix)
mod_gzip/1.3.19.1a mod_python/2.7.2 Python/2.0 mod_ssl/2.8.1 OpenSSL/0.9.5a configured --
resuming normal operations
[Tue Apr  3 21:35:23 2001] [notice] suEXEC mechanism enabled (wrapper: 
/usr/local/apache/bin/suexec)
'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Tue Apr  3 21:35:44 2001] [error] [client 127.0.0.1] python_handler:
make_oballback returned no obCallBack!

Any comment or answer would be appreciated.

Suhku Huh



From tom_bentz at tamcomm.com  Wed Apr  4 19:15:00 2001
From: tom_bentz at tamcomm.com (Tom Bentz)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] Apache configuration
Message-ID: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>

When I set this in my httpd.conf:
AddHandler python-program .py
the browser tries to download the python file

When I add this:
PythonHandler mod_python.publisher
I get this error in my browser:  'The page cannot be found'
    
Any ideas??  Thanks.



From joost.damad at siemens.atea.be  Thu Apr  5 08:00:44 2001
From: joost.damad at siemens.atea.be (Joost Yervante Damad)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] Apache configuration
In-Reply-To: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>; from tom_bentz@tamcomm.com on Wed, Apr 04, 2001 at 07:15:00PM -0700
References: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>
Message-ID: <20010405080044.B10114@siemens.atea.be>

Dit you try to read the manual?
The example in there should work fine,
and give you a clue on how to roll your own config.

'Tom Bentz' wrote about '[mod_python] Apache configuration' - Thu, Apr 05, 2001 at 04:15:00AM CEST
> When I set this in my httpd.conf:
> AddHandler python-program .py
> the browser tries to download the python file
> 
> When I add this:
> PythonHandler mod_python.publisher
> I get this error in my browser:  'The page cannot be found'
>     
> Any ideas??  Thanks.
> 

What url are you viewing, what is your exact configuration?

-- 
Joost Damad - Siemens IC D NC A - +3214252297
--
** WARNING **: Invalid seek
wvError: (escher.c:45) Not a container, panic (200)
 wvError: (escher.c:366) Damn found nothing
 wvError: (fspa.c:99) found no fspa, panic

From mhagger at alum.mit.edu  Thu Apr  5 09:31:38 2001
From: mhagger at alum.mit.edu (Michael Haggerty)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] Apache 2.0
Message-ID: <m2u2435v7p.fsf@freak.kaiserty.com>

Hi,

Does mod_python support the multithreaded model that is coming in
Apache 2.0?  If not, are there plans to add support for it?  Are there
other Python-in-Apache modules that support Apache 2.0?

Michael

-- 
Michael Haggerty
mhagger@alum.mit.edu

From xkrajic at ics.muni.cz  Thu Apr  5 21:02:09 2001
From: xkrajic at ics.muni.cz (Ondrej Krajicek)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] Apache 1.3.19/Win32 Internal server error
References: <200104051810.f35IA1c36397@eden.ispol.com>
Message-ID: <3ACCC131.80A38B5D@ics.muni.cz>

Hello all,

I've downloaded latest mod_python (2.7.2 and precompiled dll
for Windows). I've placed mod_python.so (renamed dll) to
the proper directory (it loads) and I've copied
lib directory from mod_python package to
my site-packages directory. The sys.path
looks like this (python site.py):

sys.path = [
    'd:\\app\\python\\lib',
    'd:\\app\\python\\pythonwin',
    'd:\\app\\python\\win32',
    'd:\\app\\python\\win32\\lib',
    'd:\\app\\python',
    'd:\\app\\python\\dlls',
    'd:\\app\\python\\lib\\plat-win',
    'd:\\app\\python\\lib\\lib-tk',
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-packages\\mod_python',
]

site directories = [
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-python',
]

I've set up the example as is stated in manual,
but instead of nice "Hello World!" message
smiling to me, I get internal server error (500).
Log excerpt:

make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!

When I try to execute the test.py in interpreter
(python test.py), I got:

Traceback (most recent call last):
  File "test.py", line 1, in ?
    from mod_python import apache
  File "d:\app\python\lib\site-packages\mod_python\apache.py", line 55,
in ?
    import _apache
ImportError: No module named _apache

My configuration is:
Windows 2000 Server Sp1
ActivePython from ActiveState (based on Python2.0)
Apache 1.3.19 for Win32 running as service

I am new to python, new to apache and new to mod_python.
Can anyone please help me ?

TIA,

Ondrej Krajicek

-- 
---------------------------------------------------------------------
Ondrej Krajicek OK-)
email: xkrajic et {ics,fi}.muni.cz
                               Omnia ad maiorem Informaticae gloriam.
-->>> The Nexus Framework <<<-- sourceforge.net/projects/nexusproject
          Of course we can, moreover we must, it is our holiest duty.
---------------------------------------------------------------------

From grisha at verio.net  Fri Apr  6 14:54:39 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] Apache 2.0
In-Reply-To: <m2u2435v7p.fsf@freak.kaiserty.com>
Message-ID: <Pine.BSF.4.32.0104061453200.46934-100000@localhost>

mod_snake (modsnake.sourceforge.net) works with Apache 2.0

mod_python isn't going to work with 2.0 for a couple of months at least

Grisha

On 5 Apr 2001, Michael Haggerty wrote:

> Hi,
>
> Does mod_python support the multithreaded model that is coming in
> Apache 2.0?  If not, are there plans to add support for it?  Are there
> other Python-in-Apache modules that support Apache 2.0?
>
> Michael
>
> --
> Michael Haggerty
> mhagger@alum.mit.edu
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From marcf at becomm.com  Fri Apr  6 18:17:41 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:58:50 2004
Subject: [mod_python] apache processes are getting large memory footprint
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>

Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0

From marcf at becomm.com  Fri Apr  6 18:34:01 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] apache processes are getting large memory footpr
	int
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B9@becomm-mis2.becomm.com>

I just found the gc module, which seems to be a builtin module.  If I try to
import it, then mod_python seems to barf.  Any reason for this?

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File "/scratch/local/lib/python2.0/site-packages/mod_python/publisher.py",
line 128, in handler
    module = apache.import_module(module_name, _req, [path])

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 346, in import_module
    module = imp.load_module(mname, f, p, d)

  File "/scratch/apache/htdocs/hotbeads/dispatch.py", line 1, in ?
    import gc

ImportError: No module named gc





-----Original Message-----
From: Marc Fiuczynski [mailto:marcf@becomm.com]
Sent: Friday, April 06, 2001 6:18 PM
To: 'mod_python@modpython.org'
Subject: [mod_python] apache processes are getting large memory
footprint


Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From grisha at verio.net  Fri Apr  6 22:07:46 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] apache processes are getting large memory footprint
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104062204240.50197-100000@localhost>

On Fri, 6 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I am using mod_python to serve up large files from the server to the client.
> I have noticed that the memory footprint of httpd gets rather large and
> stays that way.  Can someone give me a hint how to start figuring out which
> parts are holding on to that amount of memory.  Right now I have no clue
> whether it is httpd, mod_python, or my python programs.  Is there a way to
> figure out what the python memory profile is, or python GC stats?

It is most likely Python.

There is no easy way to identify the state of all variables within a
Python interpreter, but you can try a few things, such making sure that
your large variables don't persist between connection by assigning None to
them at the end.

Grisha


From rusddf at yahoo.com  Thu Apr  5 19:02:13 2001
From: rusddf at yahoo.com (Sergey)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] E-mail áàçà "Âñÿ Ðîññèÿ"
Message-ID: <0eb690458140741SERVER@server>

????????????!

E-mail ???? "??? ??????"

?????????? ??? ?????????? ???? ??????? ??????????? ????? ?????????? ?????????????.
???? ???????? 340 ????? ??????? (?? ??? ????? 30% - ?????? ???????????).
??? ?????? ?????????????? ????????? ? ??????? ??????????? ????????? ? ??????? 2001 ?.
? ??????? ??????????.

??????????? ????????? ??? ???????? ????????.

???? ????????????? ??? ???????? ???????? ??????? ???????, ??????,
???????????? ??????????? ? ?.?.

???? 1000 ??????

From stevena at permanent.cc  Sat Apr  7 16:32:23 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <3928573C.EFEB5271@myself.com>
Message-ID: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>

<html>
At 02:38 PM 5/21/2000 -0700, Wayne Izatt wrote:<br>
<blockquote type=cite cite>Hi all. I've built and installed a mod_python enabled apache. However,<br>
I'm not sure what, if any, directives I need to add to httpd.conf to get<br>
it to pass .py files to the python handler. When I point my browser at<br>
the test script, all that I get is the script in the browser window.<br>
<br>
Perhaps someone has a sample httpd.conf (just the handler stuff will do)<br>
or a vanilla .htaccess (if that's where the directives should go).<br>
<br>
(Yes, I've followed the installation instructions, but something simple<br>
is still eluding me).</blockquote><br>
I'm having the same experience.<br>
<br>
I tried the following directives:<br>
<br>
Alias /python /usr/local/apache/htdocs/python<br>
<br>
&lt;Location /python/&gt;<br>
&nbsp;&nbsp;&nbsp; AllowOverride All<br>
&nbsp;&nbsp;&nbsp; AddHandler python-program .py<br>
&nbsp;&nbsp;&nbsp; PythonDebug<br>
&nbsp;&nbsp;&nbsp; PythonHandler test<br>
&lt;/Location&gt;<br>
<br>
<br>
When I try loading the page, I get this error:<br>
<br>
\nERROR mod_python: &quot;PythonHandler test&quot;<br>
<br>
Traceback (innermost last):<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 107, in Dispatch object = self.resolve_object(module_name, object_str)<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 70, in resolve_object raise &quot;ResolveError&quot;, &quot;Couldn't resolve object '%s' in module '%s'.&quot; % \<br>
<br>
ResolveError: Couldn't resolve object 'handler' in module 'test'.<br>
<br>
NOTE: More output from other handlers, if any, may follow. This will NOT happen, and request processing will STOP at this point when you remove PythonDebug directive. <br>
<br>
<br>
I'm not quite sure what I'm doing wrong.&nbsp; Any ideas?<br>
<br>
<br>
steve</html>



From stevena at permanent.cc  Sat Apr  7 16:32:29 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] apache compile problems
Message-ID: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>

Hi,

I'm trying to compile apache with mod_python and I'm getting the following error:

[root@catatonia apache_1.3.12]# ./configure --activate-module=src/modules/extra/mod_python.c --prefix=/usr/local/apache --enable-module=all
Configuring for Apache, Version 1.3.12
 + using installation path layout: Apache (config.layout)
 + activated python module (modules/extra/mod_python.c)
Creating Makefile
Creating Configuration.apaci in src
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
cd ..; gcc  -DLINUX=2 -DUSE_HSREGEX -DUSE_EXPAT -I./lib/expat-lite `./apaci` -I/usr/include/python1.5    -o helpers/dummy helpers/dummy.c   -lm -lcrypt -lndbm -ldb /usr/lib/python1.5/config/libpython1.5.a   -ldl
gcc: /usr/lib/python1.5/config/libpython1.5.a: No such file or directory
make: *** [dummy] Error 1
Creating Makefile in src
 + configured for Linux platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + checking for system header files
 + adding selected modules
    o rewrite_module uses ConfigStart/End
 + using -lndbm for DBM support
      enabling DBM support for mod_rewrite
    o dbm_auth_module uses ConfigStart/End
    o db_auth_module uses ConfigStart/End
      using Berkeley-DB/2.x for mod_auth_db (-ldb)
    o python_module uses ConfigStart/End
 + using -ldl for vendor DSO support
 + checking sizeof various data types
 + doing sanity check on compiler and options
** A test compilation with your Makefile configuration
** failed.  The below error output from the compilation
** test will give you an idea what is failing. Note that
** Apache requires an ANSI C Compiler, such as gcc. 

======== Error Output for sanity check ========
============= End of Error Report =============

 Aborting!


I have no directory /usr/lib/python1.5/config, though the parent of that dir does exist.  I just freshly installed python 1.5.2 before trying the above.  Platform is Red Hat Linux 6.2.  Any ideas?


steve




From stevena at permanent.cc  Sat Apr  7 16:32:30 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] [SOLVED] apache compile problems
In-Reply-To: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521002528.015faf08@phear.dementian.com>

For some reason, the original installation of python on my system didn't have a config dir inside /usr/lib/python1.5.  I reinstalled python and it made sys.exec_prefix /usr/local; however, it didn't replace the old copies of python sitting in /usr/bin.  (It did put new copies in /usr/local/bin.)  When I deleted the old copies and created symlinks to the new copies, python then knew to look in /usr/local/lib/python1.5/config, and all was well.


steve




From stevena at permanent.cc  Sat Apr  7 16:32:35 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <Pine.LNX.4.21.0005211909500.29474-100000@saturn.ispol.com>
References: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521200358.015c0300@phear.dementian.com>

<html>
At 07:11 PM 5/21/2000 -0400, Gregory Trubetskoy wrote:<br>
<br>
<blockquote type=cite cite>This means that test.py doesn't have a function called &quot;handler&quot; defined<br>
in it.<br>
<br>
What's in your test.py?</blockquote><br>
I put exactly what the docs suggest:<br>
<br>
from mod_python import apache<br>
<br>
def handler(req):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.send_http_header()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.write(&quot;Hello World!&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return apache.OK<br>
<br>
<br>
However, I made the changes Wayne suggested, and now it works for me. :-)&nbsp; (It didn't initially, but it does now -- I can't explain why.)&nbsp; Apparently the AddModule and Directory directives did it...<br>
<br>
<br>
steve<br>
</html>



From ron at kramedjian.com  Sun Apr  8 10:13:46 2001
From: ron at kramedjian.com (Ronald E. Kramedjian)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Instalation Error
Message-ID: <002801c0c03e$822bd570$0501a8c0@D69HHG01>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3360 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/32b1ceee/smime-0002.bin
From gdamjan at mail.net.mk  Sun Apr  8 20:19:00 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>; from ron@kramedjian.com on Sun, Apr 08, 2001 at 10:13:46AM -0500
References: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <20010408201900.A376@local.izmislen.mk>

> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
... 
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'

Don't use a test.py script for testing mod_python. There is already a package 
named test in the standard Python distribution, and mod_python would try to load
it instead (which should be obvious in the line above).

Use something as mptest.py.




-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at verio.net  Sun Apr  8 16:56:09 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <Pine.BSF.4.32.0104081655490.67981-100000@localhost>

use a name for your script other than "test".

Grisha

On Sun, 8 Apr 2001, Ronald E. Kramedjian wrote:

> Gentle People,
>
> Your help would be most appreciated.
>
> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
>
> Ronald E. Kramedjian
> ------------------------------------------------------------------------------------------
>
> Mod_python error: "PythonHandler test"
>
> Traceback (most recent call last):
>
>   File "c:\python20\lib\mod_python\apache.py", line 180, in Dispatch
>     object = resolve_object(self.req, module, object_str, silent)
>
>   File "c:\python20\lib\mod_python\apache.py", line 396, in resolve_object
>     raise AttributeError, s
>
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'
>
> -----------------------------------------------------------------------------------------
>
>
>


From victor at prodigy.net  Sun Apr  8 17:38:31 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
Message-ID: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>


Sorry for a long message, but this requires a bit of explanation. I 
appreciate your patience in advance.

I have a bunch of python legacy code that used to be part of a large 
CGI-based system. This code simply used print statements to output HTML as 
follows:

def foo():
         print 'html1'
         print 'html2'

Now I want to convert CGI to mod_python, but I would like to re-use the 
legacy code with as little re-writing as possible (obviously the legacy 
code is a lot lengthier and more complicated than the example above). I am 
using the publisher module, which requires my code to return a string 
containing all of the HTML. So I thought I would be clever and do something 
like this:

import sys, cStringIO
def handler(req):
         out =  sys.stdout = StringIO()
         foo()
         return out

This works great as long as the second request does not arrive before the 
first one is done. Otherwise, the output gets screwed up. Since "out" is a 
local variable, each request has its own instance, but sys.stdout is a 
global. When the second request arrives, sys.stdout gets reassigned and the 
rest of the output produced by print statements in the foo() function goes 
to the new StringIO object. For example, if the second request arrives and 
gets executed between the two print statements of the first request, then 
the first request's output could be  'html1\n' and the second request's 
output could be 'html2\nhtml1\nhtml2\n'.

Has anyone dealt with such a situation? Any clever suggestion would be 
appreciated as I hate to have to go into all the legacy code and change it 
to something like this:

def foo():
         out = 'html1\n'
         out = out + 'html2\n'
         return out

def handler(req):
         return foo()

Thanks in advance.
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/b9ac82b3/attachment-0002.htm
From grisha at verio.net  Sun Apr  8 21:19:02 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>
Message-ID: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>


Victor -

Rather than invent ways to deal with legacy CGI code, I would bite the
bullet and rewrite the code without the use of "print". There are too many
subtle gotchas with simulating CGI...

Grisha



On Sun, 8 Apr 2001, Victor Muslin wrote:

>
> Sorry for a long message, but this requires a bit of explanation. I
> appreciate your patience in advance.
>
> I have a bunch of python legacy code that used to be part of a large
> CGI-based system. This code simply used print statements to output HTML as
> follows:
>
> def foo():
>          print 'html1'
>          print 'html2'
>
> Now I want to convert CGI to mod_python, but I would like to re-use the
> legacy code with as little re-writing as possible (obviously the legacy
> code is a lot lengthier and more complicated than the example above). I am
> using the publisher module, which requires my code to return a string
> containing all of the HTML. So I thought I would be clever and do something
> like this:
>
> import sys, cStringIO
> def handler(req):
>          out =  sys.stdout = StringIO()
>          foo()
>          return out
>
> This works great as long as the second request does not arrive before the
> first one is done. Otherwise, the output gets screwed up. Since "out" is a
> local variable, each request has its own instance, but sys.stdout is a
> global. When the second request arrives, sys.stdout gets reassigned and the
> rest of the output produced by print statements in the foo() function goes
> to the new StringIO object. For example, if the second request arrives and
> gets executed between the two print statements of the first request, then
> the first request's output could be  'html1\n' and the second request's
> output could be 'html2\nhtml1\nhtml2\n'.
>
> Has anyone dealt with such a situation? Any clever suggestion would be
> appreciated as I hate to have to go into all the legacy code and change it
> to something like this:
>
> def foo():
>          out = 'html1\n'
>          out = out + 'html2\n'
>          return out
>
> def handler(req):
>          return foo()
>
> Thanks in advance.
> __________________________________________________________________________________
> Victor Muslin      The power of accurate observation is frequently called
>                           cynicism by those who don't have it.
>                                        - George Bernard Shaw
>


From CHagner at fool.com  Mon Apr  9 17:26:57 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] PythonImport failure
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4804DAFD90@rover.foolhq.com>

Hi there,

This message is a continuation of a previous thread I started regarding my
difficulties in getting PythonImport to work.  (thread text is attached).

Moved my dev environment to Linux.  Still having failure of PythonImport
(see snippet below for error).  Simply put ChrisTest.py in the site-packages
directory.

[Mon Apr  9 17:10:38 2001] [notice] Apache/1.3.19 (Unix) mod_python/2.7.2
Python/2.0.42-S1.2.4 configured -- resuming normal operations
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest

Using the following directive

    PythonImport ChrisTest

Looking through mod_python.c, it's apparently failing on trying to import
the module (duh), but I haven't jumped in deeper.  Any help/ideas would be
greatly appreciated...  Thanks.

Chris
chagner
at
fool
dot
com

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
Sent: Tuesday, March 27, 2001 4:01 PM
To: Chris Hagner
Cc: 'mod_python@modpython.org'
Subject: RE: [mod_python] PythonImport failure



Try the mod_python 2.7.2 DLL and see if the problems persist

Grisha

On Tue, 27 Mar 2001, Chris Hagner wrote:

> A specific question about why PythonImport works for some modules and not
> for others.
>
> 1.  The following statement works.  It compiles/imports apache.py at
server
> startup.
>
> PythonImport mod_python.apache
>
> 2.  Now, when I create a dummy module in mod_python/MyObject.py
>
> def myFunction():
>     return "MyObject.myFunction()"
>
> class MyObject:
>
>     def __init__(self):
>         pass
>
> The following statement does not work.
>
> PythonImport mod_pytnon.MyObject
>
> Here's the error in error.log
> [Tue Mar 27 13:07:56 2001] [error] directive_PythonImport: error import
> mod_python.MyObject
> TypeError: must assign list (not "string") to slice
>
> Any help on this error msg?
>
> BTW, the first error line appears at start up... second appears upon
> immediate shutdown... probably just a buffer thing, but I thought I'd
share.
>
> 3.  I also tried import a base module which worked fine.
>
> PythonImport string
>
> 4.  But when I created a copy of string.py and simply renamed it, it
didn't
> work.
>
> PythonImport copyofstring
>
> Any thoughts on why mod_python appears to like some modules and not
others?
>
> Thanks in advance.
>
> Chris
>
>
>
> -----Original Message-----
> From: Chris Hagner [mailto:CHagner@fool.com]
> Sent: Thursday, March 15, 2001 12:07 PM
> To: 'Gregory (Grisha) Trubetskoy'
> Cc: 'mod_python@modpython.org'
> Subject: RE: [mod_python] PythonImport failure
>
>
> Thanks for the response.  For my tests, mypackage is a package named
> 'toolkit' and the mymodule is a module named 'brandconfig'.
>
> Oh yeah, I'm doing this on Apache/1.3.19 (Win32) mod_python/2.7.1
> Python/2.0.  I'm on Win2K (for development, sigh).
>
> INTERACTIVE SESSION TEST:
> ******************************
>
> Here's my python interactive session... the module only contains a single
> variable x.
>
> >>> import toolkit.brandconfig
> >>> dir(toolkit.brandconfig)
> ['__builtins__', '__doc__', '__file__', '__name__', 'x']
> >>> toolkit.brandconfig.x
> 123
> >>>
>
> So, the module is importable in my python environment.
>
>
> APACHE PYTHONIMPORT TEST:
> ******************************
>
> Just to be sure, I ran the apache test again.  Here's the httpd.conf
entry.
> Nothing shocking.
>
> <Directory "D:/site/brand1/htdocs">
>    AddHandler python-program .py
>    PythonHandler toolkit.publisher
>    PythonDebug on
>    PythonImport toolkit.brandconfig
> </Directory>
>
> Here's the response in the log upon starting apache.
>
>    [Thu Mar 15 11:39:10 2001] [error] directive_PythonImport: error
> importing toolkit.brandconfig
>
> Same as before.  Now, just to be sure, I blew away the brandconfig.py file
> (and the .pyc) so that it shouldn't even find it (just to see if I could
get
> a different error if it didn't even exist).  Result: No change.  Same
error
> in error.log.  Apparently, it's not even finding it.
>
> APACHE PYTHON SCRIPT TEST:
> ******************************
>
> So, it wasn't importing it on start up.  How about a python script in
> mod_python?
>
> Here's the code blurb...
>
> 	import foolkit.brandconfig
>        out_string = "foolkit.brandconfig.x: %s \n"% foolkit.brandconfig.x
>
> Did it work?  yup, the page displayed
>
> 	foolkit.brandconfig.x: 123
>
>
>
> Yes, I have read through the documentation and my need is to initialize a
> number of objects (i.e. dbconn pool) for use throughout my applications.
> Now, I am using a custom handler, so I could simply have the handler do
this
> initialization the first time it runs, but the PythonImport appeared to be
a
> code-free way to achieve this goal.  Do you all think this is a case where
I
> *really* need it?  If not, could someone share an example of when it
really
> deserves to be used?
>
> Thanks again for the help.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
> Sent: Thursday, March 15, 2001 11:26 AM
> To: Chris Hagner
> Cc: 'mod_python@modpython.org'
> Subject: Re: [mod_python] PythonImport failure
>
>
>
> Chris -
>
> Have you tried
>
> >>> import mypackage.mymodule
>
> from an interactive Python session?
>
> Also, regarding PythonPath - if you read documentation carefully, you'll
> notice that it says that no other directives have any effect at the time
> PythonImport is executed.
>
> Generally, you should not use PythonImport unless you *really* need it,
> which is almost never the case.
>
> Grisha
>
>
> On Thu, 15 Mar 2001, Chris Hagner wrote:
>
> > Greetings,
> >
> > I'm trying to get the PythonImport command to work.  Been through the
> > documentation, but it appears to want more than simply inserting
> >
> >    PythonImport mypackage.mymodule
> >
> > within my Directory tags in httd.conf.
> >
> > While mypackage.mymodule is under the standard python lib directory
> > (therefore should be found through the sys.path), the system spat out
the
> > following...
> >
> >     ...[error] directive_PythonImport: error importing
mypackage.mymodule
> >
> > I then moved the module to a different directory and appended that
> directory
> > to the sys.path using the PythonPath command (just to see if that
allowed
> it
> > to find the module).  No luck.
> >
> > I've found a handful of posts from June and August of last year, but no
> > posted solutions to getting the PythonImport command to work correctly.
> Of
> > course, there's a CVS commit with the comment "PythonImport works now"
so
> > I'm pretty sure it's me...
> >
> > As a random test, I tried a standard module...
> >
> >    PythonImport sys
> >
> > which appeared to work (no error msg), but I'm not really confident that
> > this was a meaningful test.
> >
> > Thanks in advance.
> >
> > Chris
> > chagner _at_ fool _dot_ com
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From marcf at becomm.com  Mon Apr  9 22:44:58 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] subintrepreters
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>

Hi,

I want to make sure that I understand the subinterpreters that are used by
mod_python.

Here is my scenario: I have two handlers defined in a single .py file.   One
of them submits files to a database and the other retrieves files from that
same database.  To avoid hitting the backend database, there is a fair
amount of caching going within the python code.

Now the question is whether the cached objects created by the submit handler
are shared with the one from the retrieve handler.  Anyone have a definitive
answer?

Thanks,
Marc

From grisha at verio.net  Tue Apr 10 10:49:32 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] subintrepreters
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104101048550.87097-100000@localhost>

By default, if they are in the same virtual server, they share the
interpreter.

Grisha

On Mon, 9 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I want to make sure that I understand the subinterpreters that are used by
> mod_python.
>
> Here is my scenario: I have two handlers defined in a single .py file.   One
> of them submits files to a database and the other retrieves files from that
> same database.  To avoid hitting the backend database, there is a fair
> amount of caching going within the python code.
>
> Now the question is whether the cached objects created by the submit handler
> are shared with the one from the retrieve handler.  Anyone have a definitive
> answer?
>
> Thanks,
> Marc
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From grisha at verio.net  Tue Apr 10 22:22:00 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] some issues
In-Reply-To: <20010215150733.A20391@siemens.atea.be>
Message-ID: <Pine.BSF.4.32.0104102220290.93109-100000@localhost>

Joost -

This was a bug with reusing a pointer to the internal representation of a
Python string after resizing it. For some reason on Linux and FreeBSD it
caused no problems, but showed on Solaris.

This should be fixed in the latest code available via CVS.

Grisha

On Thu, 15 Feb 2001, Joost Yervante Damad wrote:

> Hello,
>
> A friend of me discovered wierd bug in publisher :
>
> def tst(req, arg='none', test='none', longname='none'):
>         req._content_type_set = 0
>         return "Arguments are '%s', '%s' and '%s'" % (arg, test, longname)
>
> if we now do:
>
> https://r2d2.iplab.atea.be:8081/py/test.py/tst?arg=x&test=y&longname=z
>
> the result is:
>
> Arguments are '', '' and 'z'
>
> Aparently short names are not getting into the functions.
> Long names are. Or is this caused by name clashes?
>
> We tested this both with 2.7.1 and 2.7.2 on Solaris 2.6
> with apache 1.3.14 with SSL and mod_python statically linked.
>
> Another error I found:
>
> The handling of _content_type_set seems to be broken.
>
> publisher no longer functioned, bailin out at:
>
> if not req._content_type_set:
>
> giving an exeception stating that that variable was not found.
>
> Removing that part and setting the content_type to
> "text/html" is our current workaround.
>
> Any thoughts?
>
> Joost
>
> P.S.: but we love mod_python :)
>
> --
> Joost Damad - Siemens ICN D NC A - +3214252297
> --
> Five is a sufficiently close approximation to infinity.
>        -- Robert Firth
> "One, two, five."
>        -- Monty Python and the Holy Grail
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From mgpl1-NoTinnedHamThanks at zeta.org.au  Thu Apr 12 10:18:28 2001
From: mgpl1-NoTinnedHamThanks at zeta.org.au (Wilson Fletcher)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <3AD4F453.CE85A3AD@zeta.org.au>

Wouldn't it be better just to buffer the output and then just use one output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

I don't understand the problem with redirecting stdout. My understanding of Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session that fires up
it's own instance of the code. Is this not true ?

Secondly the idea of just rewriting something that works doesn't seem to be a good idea
to me. I would say rewrite if you're finding you are doing a lot of mainatainence on
existing code however if the code works well and has been tested, deployed etc, it
would be better to interfere with it as little as possible unless you already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

Wilson

"Gregory (Grisha) Trubetskoy" wrote:

> Victor -
>
> Rather than invent ways to deal with legacy CGI code, I would bite the
> bullet and rewrite the code without the use of "print". There are too many
> subtle gotchas with simulating CGI...
>
> Grisha
>
> On Sun, 8 Apr 2001, Victor Muslin wrote:
>
> >
> > Sorry for a long message, but this requires a bit of explanation. I
> > appreciate your patience in advance.
> >
> > I have a bunch of python legacy code that used to be part of a large
> > CGI-based system. This code simply used print statements to output HTML as
> > follows:
> >
> > def foo():
> >          print 'html1'
> >          print 'html2'
> >
> > Now I want to convert CGI to mod_python, but I would like to re-use the
> > legacy code with as little re-writing as possible (obviously the legacy
> > code is a lot lengthier and more complicated than the example above). I am
> > using the publisher module, which requires my code to return a string
> > containing all of the HTML. So I thought I would be clever and do something
> > like this:
> >
> > import sys, cStringIO
> > def handler(req):
> >          out =  sys.stdout = StringIO()
> >          foo()
> >          return out
> >
> > This works great as long as the second request does not arrive before the
> > first one is done. Otherwise, the output gets screwed up. Since "out" is a
> > local variable, each request has its own instance, but sys.stdout is a
> > global. When the second request arrives, sys.stdout gets reassigned and the
> > rest of the output produced by print statements in the foo() function goes
> > to the new StringIO object. For example, if the second request arrives and
> > gets executed between the two print statements of the first request, then
> > the first request's output could be  'html1\n' and the second request's
> > output could be 'html2\nhtml1\nhtml2\n'.
> >
> > Has anyone dealt with such a situation? Any clever suggestion would be
> > appreciated as I hate to have to go into all the legacy code and change it
> > to something like this:
> >
> > def foo():
> >          out = 'html1\n'
> >          out = out + 'html2\n'
> >          return out
> >
> > def handler(req):
> >          return foo()
> >
> > Thanks in advance.
> > __________________________________________________________________________________
> > Victor Muslin      The power of accurate observation is frequently called
> >                           cynicism by those who don't have it.
> >                                        - George Bernard Shaw
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From victor at prodigy.net  Fri Apr 13 02:35:02 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <3AD4F453.CE85A3AD@zeta.org.au>
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <4.3.2.7.0.20010413023353.00c188c0@pop.prodigy.net>

At 10:18 AM 4/12/2001 +1000, you wrote:
Wouldn't it be better just to buffer the output and then just use one 
output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

yes, this is what he is suggesting and exactly what I was trying to avoid 
in the first place. Also, while not being a CGI/Web guru, I can imagine a 
number of potential problems with having to buffer all of the output before 
sending it to the browser. First of all the output may be large and it may 
not be practical to assemble it in memory. Second it may be useful to allow 
browser to start rendering some output before it is completely created if 
it takes a long time to create dynamic output. Third, if the browser 
cancelled the request the only way to find out is to try to send the reply 
and get some sort of bad status. Imagine a script that does a set of 
time-consuming database queries to create the output. it would be useful to 
test whether the request was cancelled after each query by attempting to 
send something back (a space character perhaps) to see whether the socket 
is still open before doing the rest of the queries. Perhaps somebody could 
suggest how these scenarios could be handled with mod_python?

I don't understand the problem with redirecting stdout. My understanding of 
Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session 
that fires up
it's own instance of the code. Is this not true ?

I am using the "publisher" capability of mod_python. This is how I imagine 
it works (not having had the time to go through the code). There is a 
function -- call it handler() -- that handles requests. Let's say there are 
two identical concurrent requests. Both are handled by the same instance of 
Python interpeter that calls handler() for each one. All variables 
instantiated inside the handler() function are local to the function and, 
therefore, each request has its own instance of these variables. Variables 
that are module level (of the module where the handler() function is) of 
class-level are global, i.e. there is one instance of them in the 
interpreter and, therefore, they are shared by the requests. If this 
weren't the case you couldn't open a database connection once, for example, 
and keep it open instead of re-opening it for each request. sys.stdout 
happens to be a global variable and, therefore, shared by multiple 
instances of handler() and consequently by the requests. If code in one 
request reassigns it, the code in the other concurrent requests is affected.

Secondly the idea of just rewriting something that works doesn't seem to be 
a good idea
to me. I would say rewrite if you're finding you are doing a lot of 
mainatainence on
existing code however if the code works well and has been tested, deployed 
etc, it
would be better to interfere with it as little as possible unless you 
already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

I think you are making my point here. I did not want to re-write anything.


Wilson

"Gregory (Grisha) Trubetskoy" wrote:

 > Victor -
 >
 > Rather than invent ways to deal with legacy CGI code, I would bite the
 > bullet and rewrite the code without the use of "print". There are too many
 > subtle gotchas with simulating CGI...
 >
 > Grisha
 >
 > On Sun, 8 Apr 2001, Victor Muslin wrote:
 >
 > >
 > > Sorry for a long message, but this requires a bit of explanation. I
 > > appreciate your patience in advance.
 > >
 > > I have a bunch of python legacy code that used to be part of a large
 > > CGI-based system. This code simply used print statements to output HTML as
 > > follows:
 > >
 > > def foo():
 > > print 'html1'
 > > print 'html2'
 > >
 > > Now I want to convert CGI to mod_python, but I would like to re-use the
 > > legacy code with as little re-writing as possible (obviously the legacy
 > > code is a lot lengthier and more complicated than the example above). I am
 > > using the publisher module, which requires my code to return a string
 > > containing all of the HTML. So I thought I would be clever and do 
something
 > > like this:
 > >
 > > import sys, cStringIO
 > > def handler(req):
 > > out = sys.stdout = StringIO()
 > > foo()
 > > return out
 > >
 > > This works great as long as the second request does not arrive before the
 > > first one is done. Otherwise, the output gets screwed up. Since "out" is a
 > > local variable, each request has its own instance, but sys.stdout is a
 > > global. When the second request arrives, sys.stdout gets reassigned 
and the
 > > rest of the output produced by print statements in the foo() function goes
 > > to the new StringIO object. For example, if the second request arrives and
 > > gets executed between the two print statements of the first request, then
 > > the first request's output could be 'html1\n' and the second request's
 > > output could be 'html2\nhtml1\nhtml2\n'.
 > >
 > > Has anyone dealt with such a situation? Any clever suggestion would be
 > > appreciated as I hate to have to go into all the legacy code and change it
 > > to something like this:
 > >
 > > def foo():
 > > out = 'html1\n'
 > > out = out + 'html2\n'
 > > return out
 > >
 > > def handler(req):
 > > return foo()
 > >
 > > Thanks in advance.
 > >
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010413/96c1a4d3/attachment-0002.htm
From nineclue at bigfoot.com  Sat Apr 14 11:07:12 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Persistent variable?
Message-ID: <Pine.LNX.4.10.10104141052440.2413-100000@mrham.hamslab.com>

Greetings...

I'm trying to implement custom session handler like PHP.
I think persistent variables that share between subinterpreters would
be nice to hold session variables.
When I tried, I think persistent variables are not shared to
subinterpreter.

Sorry for my poor English... And thanks in advance for any comment or
answer.

Suhku Huh

Followings are my custom handler.

from mod_python import apache
from base64 import decodestring, encodestring
from cPickle import loads, dumps
import pg

PG_DB = 'pyweb'
_SESSION_PATH = ( '/cluelabs', )
_MODPYTHONID = 'MODPYTHONID'

session_data = {}

class session_var:
	def __init__(self, con, id = None):
		self.con = con
		if id:
			self.new = 0
			r = self.con.query("select val from session where sess_id = '%s'" % id)
			if not r.ntuples():
				self.data = {}
			else:
				val = r.getresult()[0][0]
				self.data = loads(decodestring(val))
		else:
			import md5, time

			self.new = 1
			id =  md5.new(str(time.time())).hexdigest()
			self.data = {}
		self.id = id
	def __del__(self):
		if len(self.data) == 0:
			return
		self.save()
	def __getitem__(self, name):
		if self.data.has_key(name):
			return self.data[name]
		else:
			return None
	def __setitem__(self, name, value):
		self.data[name] = value
	def __delitem__(self, name):
		try:
			del self.name[name]
		except:
			pass
	def __len__(self):
		return len(self.data)
	def has_key(self, name):
		return self.data.has_key(name)
	def save(self):
		if self.new:
			self.con.query("insert into session values ('%s', '%s')" % (self.id, encodestring(dumps(self.data))))
		else:
			self.con.query("update session set val = '%s', create_time = current_timestamp where sess_id = '%s'" % (encodestring(dumps(self.data)), self.id))
		
def _get_cookie(req):
	if req.headers_in.has_key('Cookie'):
		ret = {}
		cookies = req.headers_in['Cookie'].split(';')
		for cookie in cookies:
			equal_pos = cookie.index('=')
			key, value = cookie[:equal_pos], cookie[equal_pos+1:]
			ret[key.strip()] = value.strip()
		return ret
	else:
		return None

def _start_session(req, con):
	global session_data

	py_log = open('/home/nineclue/py_log', 'a')
	py_log.write('Session_data length : %d\n' % len(session_data))
	py_log.close()
	if req.cookie and req.cookie.has_key(_MODPYTHONID):
		req.session_var = session_data[req.cookie[_MODPYTHONID]]
	else:
		req.session_var = session_var(con)
		req.headers_out.add('Set-Cookie', '%s = %s' % (_MODPYTHONID, req.session_var.id))
		req.send_http_header()
		session_data[req.session_var.id] = req.session_var

def _get_con():
	global pg_con

	try:
		con = pg_con
	except NameError:
		pg_con = pg.connect(PG_DB)
		con = pg_con
	
	return con

def handler(req):
	global session_data

	if req.cookie:
		for key in req.cookie.keys():
			req.write('Cookie (%s) : (%s)<BR>' % (key, req.cookie[key]))
	req.write('Session Variable has %d items' % len(session_data))
	if req.session_var.has_key('count'):
		req.session_var['count'] = req.session_var['count'] + 1
	else:
		req.session_var['count'] = 0
	req.write('Counter : %02d' % req.session_var['count'])
	return apache.OK

def headerparserhandler(req):
	name_split = req.uri.rfind('/')
	req.path, req.pname = req.uri[:name_split], req.uri[name_split + 1:]

	req.cookie = _get_cookie(req)
	if req.path in _SESSION_PATH:
		con = _get_con()
		_start_session(req, con)

	return apache.OK

When I try, counters are correctly increased at first time but Key error
is raised after and py_log (used at _start_session function) shows length
of session_data is 0.

I'm using Apache 1.3.19 with statistically compiled mod_python 2.7.2
Python/2.0 (thread enabled) in Mandrake 7.1.
 


From nineclue at bigfoot.com  Tue Apr 17 16:32:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>

Greetings...

I've posted somewhat long python program during development, which
may need pg module, postgres running with pyweb db created etc...

Here's short version, which don't work as I expected.

from mod_python import apache

session_data = {}
session_counter = 0

def handler(req):
        global session_data, session_counter

        if session_data.has_key('counter'):
                session_data['count'] = session_data['count'] + 1
        else:
                session_data['count'] = 0

        session_counter += 1
        req.write('<HTML>')
        req.write('Session data has %d items<BR>' % len(session_data))
        req.write('Counter : %02d<BR>' % session_data['count'])
        req.write('Alternative Counter : %02d<BR>' % session_counter)
        req.write('</HTML>')
        return apache.OK

When I loaded the page and tried several reloads, session_data dictionary
variable is never increased and session_counter variable is increased
after several tries. What I expected was both variable increase at each
reload.

In my thoughts, dictionary variable is not supported and main interpreter
is created in each Apache processes, which is shared by subinterpreters.

Sorry for posting again, long message and my poor English.

Thanks in advance.


From victor at prodigy.net  Tue Apr 17 08:25:04 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com
 >
Message-ID: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>

I don't see where you are creating a dictionary entry with a key 'counter'. 
Therefore, the statement in the else clause:

         session_data['count'] = 0

will always be executed. Perhaps you want to say:

          if session_data.has_key('count'):

At 04:32 PM 4/17/01 +0900, nineclue@bigfoot.com wrote:
>Greetings...
>
>I've posted somewhat long python program during development, which
>may need pg module, postgres running with pyweb db created etc...
>
>Here's short version, which don't work as I expected.
>
>from mod_python import apache
>
>session_data = {}
>session_counter = 0
>
>def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
>When I loaded the page and tried several reloads, session_data dictionary
>variable is never increased and session_counter variable is increased
>after several tries. What I expected was both variable increase at each
>reload.
>
>In my thoughts, dictionary variable is not supported and main interpreter
>is created in each Apache processes, which is shared by subinterpreters.
>
>Sorry for posting again, long message and my poor English.
>
>Thanks in advance.
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://www.modpython.org/mailman/listinfo/mod_python

__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010417/01836390/attachment-0002.htm
From nineclue at bigfoot.com  Tue Apr 17 21:52:54 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>
Message-ID: <Pine.LNX.4.10.10104172142090.7770-100000@mrham.hamslab.com>

You're right. :)

I had the obsession that dictionary is not correctly handled in
mod_python. So, I didn't even looked at the source second time.
Sorry about that.

I found that dictionary variable is handled by mod_python same as simple
variable. But it's still increased after several retries.
My apache configuration of StartServers and MinSpareServers are 
5. Main interpreter per apache process, right? Or I'm still confused or
under the delusion.


From grisha at modpython.org  Tue Apr 17 10:00:47 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>

I think you have a bug because you have "count" and "counter", so it may
not work for this reason alone.

But also - if this is on UNIX, then you have to keep in mind that Apache
runs as several independent processes, and you can only have persistance
per-process. There is no "simple" way to have cross-process persistance.

On Win32, where Apache runs as a single process, it should work OK.

Grisha

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> Greetings...
>
> I've posted somewhat long python program during development, which
> may need pg module, postgres running with pyweb db created etc...
>
> Here's short version, which don't work as I expected.
>
> from mod_python import apache
>
> session_data = {}
> session_counter = 0
>
> def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
> When I loaded the page and tried several reloads, session_data dictionary
> variable is never increased and session_counter variable is increased
> after several tries. What I expected was both variable increase at each
> reload.
>
> In my thoughts, dictionary variable is not supported and main interpreter
> is created in each Apache processes, which is shared by subinterpreters.
>
> Sorry for posting again, long message and my poor English.
>
> Thanks in advance.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at bigfoot.com  Tue Apr 17 23:34:02 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>
Message-ID: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>

Thank you for the point.

I have other questions. 

I'm trying to implement session like mechanism using mod_python. If
interpreter is created in each processes, is there a way to make a
variable really persistent? I think I should make some daemon that
connects thru named pipe to get/pass session information. Is there
any other way?

Second, in my first posting, I've created some ugly class that is attached
to Request object. I thought after handling of client's request, the
request object would be deleted. Am I right? Then what happens to the
attached class instance? If it is destructed with req object, I can save
session data in __del__ function. If not, should I hook cleanup phase to
save session data?

Lastly, I can't get mailing list's whole raw archive link. I just got 404
error.

I think I've already posted enough mails to the list. I AM really sorry.



From grisha at modpython.org  Tue Apr 17 10:50:07 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:51 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104171048001.76504-100000@localhost>

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

Yes, it's called cookies.

> Second, in my first posting, I've created some ugly class that is attached
> to Request object. I thought after handling of client's request, the
> request object would be deleted. Am I right? Then what happens to the
> attached class instance? If it is destructed with req object, I can save
> session data in __del__ function. If not, should I hook cleanup phase to
> save session data?

__del__ is not something you should rely on. You should register a cleanup
instead.

Grisha


From gdamjan at mail.net.mk  Wed Apr 18 00:55:47 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>; from nineclue@bigfoot.com on Tue, Apr 17, 2001 at 11:34:02PM +0900
References: <Pine.BSF.4.32.0104170957580.75906-100000@localhost> <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <20010418005547.A237@local.izmislen.mk>

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

I've been thinking about session managment for mod_python too, and it seems
like an important issue. I'd sugest we develop a common interface to session
managment, and then write specific modules that handle the job, by ways of
cookies, databases, special daemons etc...

Any ideas?

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From nineclue at bigfoot.com  Wed Apr 18 09:58:57 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.LNX.4.10.10104180948390.8965-100000@mrham.hamslab.com>


On Wed, 18 Apr 2001, Damjan wrote:

> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...

In my opinion, best way would be using shared memory if possible. I'm not
good at Apache & python, but I found that mod_auth_digest in Apache 2.0
supports session caching accross processes using shared memory (New
Features in Apache 2.0 page). 

A general dictionary variable per main interpreter. So handler can
register it's own variable within dictionary variable with a key, that
could be used in session handling, caching small tables (DBMS data)...


From grisha at modpython.org  Tue Apr 17 23:24:45 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>

In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ???????????? ??????????????????????
> Skopje, Macedonia		|           ????????????, ????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From benno at sesgroup.net  Wed Apr 18 13:58:15 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>; from grisha@modpython.org on Tue, Apr 17, 2001 at 11:24:45PM -0400
References: <20010418005547.A237@local.izmislen.mk> <Pine.BSF.4.32.0104172311590.82748-100000@localhost>
Message-ID: <20010418135815.A27089@sesgroup.net>

On Tue, 17 Apr 2001, Gregory (Grisha) Trubetskoy wrote:

> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.

<snip>

As someone who has used mod_python for a rather large project i have to 
agree with Grisha here. I don't want want all the state stuff in there on
project where I don't need it. mod_python gives me a platform where I can
people those things on top as I need them.

Also I don't think that you really need shared memory for session etc
since you can usually store that to a database, which gives you other
advantages. A decent database impl. should be fast enough to cope with
that kinda thing.

My 2c worth,

Benno

> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it seems
> > like an important issue. I'd sugest we develop a common interface to session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ???????????? ??????????????????????
> > Skopje, Macedonia		|           ????????????, ????????????????????
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From CHagner at fool.com  Wed Apr 18 00:40:29 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>

On the issue of supporting modules (i.e. user sessions), there are simply
too many ways to implement something like that to make it worth coupling it
to mod_python.  You'll either try to be too much for too many people (the
classic framework error) or you'll be so custom to your needs that your
audience is just you (not a bad thing, just not a place for a solution like
mod_python).

I completely agree with Grisha that even the handler is outside of the core
mod_python functionality.  That being said, a listing of available handlers
on the web site would be very useful for those starting/considering using
mod_python.  I do think that having this area up there (even it's a bit
spares initially) will motivate others to share their handlers/frameworks
that are used with mod_python.

What other handlers have people written?  I've got one that implements a
servlet-like call mechanism (thereby avoiding the urls being mapped to
script files).  It's not for everyone, but a perfect example of a decision
that was made for a specific need.

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Tuesday, April 17, 2001 11:25 PM
To: Damjan
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...



In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it
seems
> like an important issue. I'd sugest we develop a common interface to
session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ????????????
??????????????????????
> Skopje, Macedonia		|           ????????????,
????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From woodm at equire.com  Wed Apr 18 00:10:12 2001
From: woodm at equire.com (Matthew D. Wood)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again...
References: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <3ADD2FC3.4109069D@equire.com>

I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has some
sort of shared memory, then obviously, this is a potential place.  Other places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the goal
of mod_python is to give access, through a python interface, to the internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.  If
you want a more general thing, either remove some code, or at worst, you have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From nineclue at bigfoot.com  Wed Apr 18 16:26:10 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again.
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <Pine.LNX.4.10.10104181615250.9552-100000@mrham.hamslab.com>

mod_python don't have to come with custom module, but if Apache 2.0
supports shared memory (don't know about 1.3.X) it would be nice to see
that feature available to mod_python. It's not related to custom module.
But at least we can make somewhat modified persistent variable in UNIX
systems and make our custom module or ... I think this is related to
mod_python.

On Wed, 18 Apr 2001, Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
> 
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
> 
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
> 
> Chris
> 
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
> 
> 
> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
> 
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
> 
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
> 
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
> 
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ÐÐÐ¼ÑÐÐ½
> ÐÐÐ¾ÑÐ³Ð¸ÐÐÑÐÐ¸
> > Skopje, Macedonia		|           ÐÐÐ¾Ð¿ÑÐ,
> ÐÐÐÐÐÐ¾Ð½Ð¸ÑÐ
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From CHagner at fool.com  Wed Apr 18 10:19:58 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C9B@rover.foolhq.com>

I think we're actually in agreement here...

My point was not that the handler is the wrong place for these types of
things, only that the handler is not a core part of the mod_python package.
Having just tackled a new handler and framework, I too would love to see
some more visible framework solutions for mod_python.  That being said, one
of the best things about mod_python is that it isn't really a web app
framework.  It's a barebones implementation that requires some sort of
framework (a handler or more) for an actual app to be developed.

Similarly, I don't think a session handler is 'bad', just that making it a
part of the mod_python package weighs down the implementation (for those
that don't want/use it).  One of the reasons open source development works
so well is that the software is _highly_ componentized, thereby allowing
grisha to focus on his part and whoever to focus on something like a session
handler on top of mod_python (but not as a part of it).

I think we all see value in having the functionality available, and it
appears there's just a disagreement on how it should be made available (in
relation to mod_python).

Just my thoughts.  Take 'em or leave 'em.

Chris

-----Original Message-----
From: Matthew D. Wood [mailto:woodm@equire.com]
Sent: Wednesday, April 18, 2001 2:10 AM
To: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...


I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for
the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has
some
sort of shared memory, then obviously, this is a potential place.  Other
places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data
base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the
goal
of mod_python is to give access, through a python interface, to the
internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available
and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler
not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.
If
you want a more general thing, either remove some code, or at worst, you
have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling
it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution
like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the
core
> mod_python functionality.  That being said, a listing of available
handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways
of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From richard at ccpgames.com  Wed Apr 18 16:50:36 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>

I am currently working on session management for my project.  One thing
I can't
seem to do for the life of me is to clear out a cookie on the browser
thats
connecting to the site.

    r.headers_out["set-cookie:"] = \
        "IRWB_SESSIONID=%s;" \
	  "Expires: %s;" \
        "Cache-control: no-cache;" \
        "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)

Is what I use to try and expire a cookie immediately, it may be
overkill, but
still, it doesn't work as I wish.  However, it does work if I close the
browser
and reopen it to the given site.

Am I doing something wrong?  I am pretty sure I could clear out cookies
this
way in Visual Interdev/VB/ASP.

Thanks in advance,
Richard.

From slim at maya.com  Wed Apr 18 13:28:26 2001
From: slim at maya.com (Seung Chan Lim)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] cookies/session management
References: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>
Message-ID: <034101c0c82c$f9ebcbb0$befe46c0@airwolf>

>     r.headers_out["set-cookie:"] = \
>         "IRWB_SESSIONID=%s;" \
>   "Expires: %s;" \
>         "Cache-control: no-cache;" \
>         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
>

without knowing anything about mod_python, have you tried
setting the expires section to be

Thu, 01-Jan-70 00:00:01 GMT

? (i.e. in GMT format )

what do you mean by "it works if [you] close the browser and reopen it to
the given site." ?
you mean the cookie value lingers around in a given session ? are you
checking to
see if this cookie exist on the server side code or via client-side code
like javascript or something?

I'm just grabbing stuff out of thin-air here. =)

slim






From richard at ccpgames.com  Wed Apr 18 17:45:08 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>

> -----Original Message-----
> From: Seung Chan Lim [mailto:slim@maya.com]
> Sent: 18. apr?l 2001 17:28
> To: Mod_python@modpython.org
> Subject: Re: [mod_python] cookies/session management
> 
> 
> >     r.headers_out["set-cookie:"] = \
> >         "IRWB_SESSIONID=%s;" \
> >   "Expires: %s;" \
> >         "Cache-control: no-cache;" \
> >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> >
> 
> without knowing anything about mod_python, have you tried
> setting the expires section to be
> 
> Thu, 01-Jan-70 00:00:01 GMT

Now I have :)  Oops.  Unfortunately no change in behaviour.

> what do you mean by "it works if [you] close the browser and 
> reopen it to
> the given site." ?
> you mean the cookie value lingers around in a given session ?

Yes.
If I set an expiry date in the future, the cookie lingers past browser
open and closes as would be expected.
If I set something (including the expiry thing above) that indicates
that the cookie should be expunged then:
  - If I reload the page, the cookie is still there.
  - If I close and reopen the browser, the cookie is no longer there.

> are you
> checking to
> see if this cookie exist on the server side code or via 
> client-side code
> like javascript or something?

Server side code:
  if r.headers_in.has_key('Cookie'):
    c = r.headers_in['Cookie']

Richard.

From richard at ccpgames.com  Wed Apr 18 17:49:33 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C7@control.central.ccp.cc>

> Why don't you set          "IRWB_SESSIONID=%s;" to some 
> "Expire" value. At scriptfoundry session ids are the ids to a 
> session object. When this expires we flag the object to be expired. 

Isn't that what I am doing with:
    r.headers_out["set-cookie:"] =
      "IRWB_SESSIONID=%s;"
      "Expires: Thu, 01-Jan-70 00:00:01 GMT;"
      "Cache-control: no-cache;"
      "Max-Age=0" % sessionID
?

Unfortunately, the core problem is that if they get a new session
cookie with the old one marked as expired, they build up a range of
cookies in the headers (at least until the browser gets closed I
guess).

> thanos
> PS: We have a modpython handler that adds a session object to req.

Can you elaborate on this?  It sounds interesting and relevant but
when it comes down to it, I have no idea what you mean :)

Thanks,
Richard.

From richard at ccpgames.com  Wed Apr 18 22:10:53 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>

OK, next problem :)

My handler module imports my session handling module.
However, after a given amount of time, the session module is garbage
collected.  Either that or it is my handler module that is being
garbage collected and the session module then in turn (seems more
likely).

My question is, is there any way I can keep them both in memory?

Richard.

From gdamjan at mail.net.mk  Thu Apr 19 00:47:35 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] cookies/session management
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>; from richard@ccpgames.com on Wed, Apr 18, 2001 at 05:45:08PM -0000
References: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>
Message-ID: <20010419004735.A857@local.izmislen.mk>

> > >     r.headers_out["set-cookie:"] = \
> > >         "IRWB_SESSIONID=%s;" \
> > >   "Expires: %s;" \
> > >         "Cache-control: no-cache;" \
> > >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> > >
> > 
> > the given site." ?
> > you mean the cookie value lingers around in a given session ?
> 
> Yes.
> If I set an expiry date in the future, the cookie lingers past browser
> open and closes as would be expected.
> If I set something (including the expiry thing above) that indicates
> that the cookie should be expunged then:
>   - If I reload the page, the cookie is still there.
>   - If I close and reopen the browser, the cookie is no longer there.

Maybe it's a bug in the browser?? 
Anyway, try adding "path=/;" to the cookie and see what happens.

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at modpython.org  Wed Apr 18 23:33:58 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] garbage collection problems
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>
Message-ID: <Pine.BSF.4.32.0104182332110.6507-100000@localhost>

I've never seen Python garbage-collect something that still has a
reference to it - that functionality is rock solid

more likely your apache process dies/recycles itself.

Grisha

On Wed, 18 Apr 2001, Richard wrote:

> OK, next problem :)
>
> My handler module imports my session handling module.
> However, after a given amount of time, the session module is garbage
> collected.  Either that or it is my handler module that is being
> garbage collected and the session module then in turn (seems more
> likely).
>
> My question is, is there any way I can keep them both in memory?
>
> Richard.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From richard at ccpgames.com  Thu Apr 19 10:38:19 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>

> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> 
> I've never seen Python garbage-collect something that still has a
> reference to it - that functionality is rock solid
> 
> more likely your apache process dies/recycles itself.

This does seem to be sort of what is happening - namely that apache
seems to keep running but kill the interpreter and start a new one.

Is this the way it is supposed to work?
Have I misconfigured something?
Is there anything I can do about this?

Thanks,
Richard.

From rsalz at zolera.com  Thu Apr 19 07:20:56 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] garbage collection problems
References: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>
Message-ID: <3ADECA18.EE84B888@zolera.com>

> This does seem to be sort of what is happening - namely that apache
> seems to keep running but kill the interpreter and start a new one.

Most likely the apache process is exiting and a new one starting.
Read about MaxChildRequests in the apache config docs.

From benno at sesgroup.net  Sat Apr 21 01:03:25 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] internal_redirect
Message-ID: <20010421010325.A21438@sesgroup.net>

Hi,

I was wondering if it was possible to do an internal redirect
with mod_python? Apache seems to have the ap_internal_redirect
function which takes a request pointer and an URI, which would map
to Request.internal_redirect(uri) in python.

Just wondering if this is meant to be there and I'm missing something,
or if there is another way to achieve this, or if there is a reason
it isn't implemented.

Cheers,

Benno

From grisha at modpython.org  Fri Apr 20 11:39:34 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] internal_redirect
In-Reply-To: <20010421010325.A21438@sesgroup.net>
Message-ID: <Pine.BSF.4.32.0104201137510.35720-100000@localhost>

it's not there now, it was one of the "would be nice to have" features,
but many people are asking me about it, so it does seem like a needed
feature

On Sat, 21 Apr 2001, Ben Leslie wrote:

> Hi,
>
> I was wondering if it was possible to do an internal redirect
> with mod_python? Apache seems to have the ap_internal_redirect
> function which takes a request pointer and an URI, which would map
> to Request.internal_redirect(uri) in python.
>
> Just wondering if this is meant to be there and I'm missing something,
> or if there is another way to achieve this, or if there is a reason
> it isn't implemented.
>
> Cheers,
>
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From bbhaydon at bigpond.com  Sat Apr 21 13:13:55 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
Message-ID: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>

The posts re: persistent variables highlight the
need for a site to promotes and encompasses solutions
developed with modpython as per Zend.

Does anyone have an idea for a name??
Perhaps it's worth persuing if only to get service
providers to include modpython along with modphp and
modperl as an offering.

For my own part, I've been using the modusertrack in
Apache to do cookie creation, and have a simple cache
class to store state. Although I haven't actually tried
it, I am considering using ZODB as a solution for 
storing state between interpreters.

regards,

brett

bbhaydon at bigpond dot com

From benno at sesgroup.net  Sat Apr 21 13:26:23 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>; from bbhaydon@bigpond.com on Sat, Apr 21, 2001 at 01:13:55PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>
Message-ID: <20010421132623.A30371@sesgroup.net>

On Sat, 21 Apr 2001, Brett Haydon wrote:

> The posts re: persistent variables highlight the
> need for a site to promotes and encompasses solutions
> developed with modpython as per Zend.

I'm not sure exactly what you mean by zend here?

From deneb at unixwave.org  Sat Apr 21 12:41:01 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 01:26:23PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net>
Message-ID: <20010421124101.A442@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, Brett Haydon wrote:
> Whats wrong with a real database? I think you'll run into
> far fewer concurrency issues using a database vs. ZODB.
It will be nice to have a set of classes integrated in the mod_python,
which set will manage the DBMS as same as PHP has methods to interface
itself with MySQL. 
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From benno at sesgroup.net  Sat Apr 21 21:27:35 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421124101.A442@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 12:41:01PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org>
Message-ID: <20010421212735.A30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > Whats wrong with a real database? I think you'll run into
> > far fewer concurrency issues using a database vs. ZODB.
> It will be nice to have a set of classes integrated in the mod_python,
> which set will manage the DBMS as same as PHP has methods to interface
> itself with MySQL. 


But python already has all this! I don't see any need to have 
special mod_python things when you have the entire python libraries
available.

Benno

From deneb at unixwave.org  Sat Apr 21 14:03:52 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421212735.A30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 09:27:35PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net>
Message-ID: <20010421140352.A625@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> 
> > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > Whats wrong with a real database? I think you'll run into
> > > far fewer concurrency issues using a database vs. ZODB.
> > It will be nice to have a set of classes integrated in the mod_python,
> > which set will manage the DBMS as same as PHP has methods to interface
> > itself with MySQL. 
> 
> 
> But python already has all this! I don't see any need to have 
> special mod_python things when you have the entire python libraries
> available.
Performance :) That's why.
 
> Benno

From rsalz at zolera.com  Sat Apr 21 08:16:39 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <3AE17A27.A88F64AC@zolera.com>

> > But python already has all this! I don't see any need to have
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

WTF?

How will "import mysqldb" be any faster in mod_python than in other
python programs?

Please explain how you think you'll gain performance -- are you talking
about writing special C code with a python glue layer?  For
"authentication" only?

Yuk.
	/r$

From benno at sesgroup.net  Sat Apr 21 22:16:17 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421140352.A625@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 02:03:52PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <20010421221617.B30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> > 
> > > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > > Whats wrong with a real database? I think you'll run into
> > > > far fewer concurrency issues using a database vs. ZODB.
> > > It will be nice to have a set of classes integrated in the mod_python,
> > > which set will manage the DBMS as same as PHP has methods to interface
> > > itself with MySQL. 
> > 
> > 
> > But python already has all this! I don't see any need to have 
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

Explain how you can get better performance with some mythical mod_python
database module vs native python module? Personally I think any speedup 
woudl be very marginal and not worse the extreme cost of code duplication
etc.

Benno

From deneb at unixwave.org  Sat Apr 21 19:29:34 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <3AE17A27.A88F64AC@zolera.com>; from rsalz@zolera.com on Sat, Apr 21, 2001 at 08:16:39AM -0400
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <3AE17A27.A88F64AC@zolera.com>
Message-ID: <20010421192934.A1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 08:16:39AM -0400, Rich Salz wrote:
 
> Please explain how you think you'll gain performance -- are you talking
> about writing special C code with a python glue layer?  
Yes. 

From deneb at unixwave.org  Sat Apr 21 19:37:24 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421221617.B30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 10:16:17PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net>
Message-ID: <20010421193724.B1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> Explain how you can get better performance with some mythical mod_python
> database module vs native python module? Personally I think any speedup 
> woudl be very marginal and not worse the extreme cost of code duplication
> etc.

Writing for example the MySQLdb module inside mod_python ;-).
Simply in my projects I don't care about code duplication.
    

From benno at sesgroup.net  Sun Apr 22 09:58:04 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421193724.B1540@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 07:37:24PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net> <20010421193724.B1540@lisa.unixwave.org>
Message-ID: <20010422095804.A11979@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> > Explain how you can get better performance with some mythical mod_python
> > database module vs native python module? Personally I think any speedup 
> > woudl be very marginal and not worse the extreme cost of code duplication
> > etc.
> 
> Writing for example the MySQLdb module inside mod_python ;-).
> Simply in my projects I don't care about code duplication.

Well to be blunt I think that is pretty silly. You're yet to explain how
you would be able to achieve a speed up by having a module "inside" mod_python
versus putting "import MySQLdb" at the top of you handler. The handler is 
only started once so the extra milliseconds loading a module is irrelevant.

Next you'll be saying you want special regexp handling libraries and special
string handling libraries "inside" mod_python.

If mod_python ever does get a MySQLdb module inside it I will be the first
to fork the porject. (Not that I think Grisha would ever let it happen in
the first place).

Benno

From bbhaydon at bigpond.com  Mon Apr 23 14:47:02 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>
Message-ID: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>

>>I'm not sure exactly what you mean by zend here?

Ok, maybe I was a little vague. Ignoring Zend the PHP
engine for a second, most of what Zend the site is about
is promoting peripheral code and applications that build
upon or are built using PHP.

The PHP site itself is narrowly focused on PHP the language
much like the modpython site is about modpython not 
modpython solutions.

I personally think modpython needs a community site to give
it a higher exposure. Modpython promotes a different style
of development from say PHP, asp, etc, which needs a change
of thinking to see it's advantages, and lots of example 
code.

>>Whats wrong with a real database? I think you'll run into
far fewer concurrency issues using a database vs. ZODB.

I confess to having no idea on this. ZODB seemed a simpler
way to store objects, but maybe some benchmarking will be
prudent first..

Brett


From grisha at modpython.org  Mon Apr 23 10:06:16 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:52 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>
Message-ID: <Pine.BSF.4.32.0104231003410.7351-100000@localhost>

I think it's an excellent idea.

But ideas are just that - ideas, until someone acts on them...

;-)

Grisha

On Mon, 23 Apr 2001, Brett Haydon wrote:

> I personally think modpython needs a community site to give
> it a higher exposure. Modpython promotes a different style
> of development from say PHP, asp, etc, which needs a change
> of thinking to see it's advantages, and lots of example
> code.


From marcf at becomm.com  Mon Apr 23 11:34:09 2001
From: marcf at becomm.com (=?UTF-8?B?TWFyYyBGaXVjenluc2tp?=)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] =?UTF-8?B?UHVibGlzaGVyIHByb2JsZW0u?=
Message-ID: <A9DFD9380C01D4118E740050DA7A89703862A6@becomm-mis2.becomm.com>

Hi, 

I am using mod_python 2.7.2 on a linux RH7.0 machine running apache 1.3.14
and using Python 2.0.  Both my apache.py and publisher.py modules have minor
patches (one to reload modules in apache.py properly, the other to treat
file objects correctly in publisher.py), but those patched regions of code
are not the ones that I am seeing trouble with nor do I think they are
involved with the problem I am having.  But who knows.  Bottom line, the
line numbers listed below for publisher.py and apache.py may not match up
directly with the same modules in a pristine 2.7.2 release.

Below is a trace of the problem that I am seeing.

Mod_python error: "PythonHandler mod_python.publisher"
Traceback (most recent call last):
  File "/hotbeads/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File
"/hotbeads/local/lib/python2.0/site-packages/mod_python/publisher.py", line
171, in handler
    result = apply(object, (), args)
TypeError: not enough arguments; expected 2, got 1


The odd thing is that my code seems to be called correctly. My publisher
handler has two arguments (req and xmlfile) and it successfully processes
the xmlfile and returns a correct result followed by the above text.  So, it
seems that the type error is occurring _after_ the apply() has already done
its work.  I am fairly confused as to what is going on.  Can someone help me
out?

Thanks,
Marc

From CHagner at fool.com  Mon Apr 23 23:23:28 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>

Hey gang,

There's a utility called pydoc that's in the new python 2.1 release...
anyway, the author of it wrote a really snazzy error handling page for cgi
scripts (called cgitb)... check out the output and see if you find it
useful.

Here's a sample cgitb output page...
http://www.lfw.org/python/test4.html

Here's where you can get the module for it...
http://www.lfw.org/python/

Okay, except for the nasty colors, I'd love to see something closer to this
in the standard mod_python error handler(apache.py).  I guess the most
flexible way would be to have a PythonErrorModule directive and allow each
person to override the default error display with their own module (in this
case, the cgitb module).  The key is that this functionality would only
really be appropriate for a development environment...

Thoughts?

Chris

From grisha at modpython.org  Mon Apr 23 23:53:36 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] Fancy Shmancy Exception Output
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>
Message-ID: <Pine.BSF.4.32.0104232351330.19725-100000@localhost>

I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From CHagner at fool.com  Tue Apr 24 09:41:38 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47D00@rover.foolhq.com>

Yeah, the colors are pretty nasty... I'm thinking Yee (the author) is
color-blind...

FYI, cgitb does not have any 2.1 dependencies... I have it wired into my
handler and it works great (running 2.0).  As I said, this is less ideal,
since it should really be wired into apache.py so that the handler isn't
bothered with catching EVERY error...

I've gotten some pretty good feedback from our developers.  We're so used to
getting an error and then having to go to our tail of the error log (and
then to the code to see what line it is)... it's very nice to shorten that
cycle.

Here's the code snippet I used to integrate it (Prepare to be wowed...)

import cgitb

# Within the handler module's handler method...

    try:
        # all of the stuff that happens in my handler's primary method
    except:
       # NOTE: I use my own request object to wrap the apache-provided one, 
       # so these calls are not the standard apache API calls
       req.setContentType("text/html")
       req.sendHTTPHeader()
       # Calling the handle method of cgitb just prints the output of 
       # breaker() and html() to standard out.
       # Thus, I skip that and do it myself.
       errHtml = str(cgitb.breaker()) + str(cgitb.html())
       req.write(errHtml)

    return apache.OK

Grisha, I'm more than happy to make the mod to apache.py if you don't have
the time... All I'd need is a new directive that is accessible from within
mod_python.apahce.ReportError().  I don't think it would require any other
changes.  

Okay, thinking about it more, I'd add a parameter to ReportError called
error_handler (just like how the debug parameter is passed in)...

Thus, something like this would be added to mod_python.apache.Dispatch()

        config = _req.get_config()
        if config.has_key("PythonErrorHandler"):
            error_handler = config["PythonErrorHandler"]
        else:
            error_handler = None

and all ReportError() calls would have error_handler passed in...

        result = ReportError(etype, value, traceback, htype=htype,
hname=handler, debug=debug, error_handler=error_handler)

Then, ReportError would have something like this...

         if not debug:
                return HTTP_INTERNAL_SERVER_ERROR
         else:
                # write to client
                if error_handler:
                        req.content_type = 'text/html'
                        s = str(cgitb.breaker()) + str(cgitb.html())
                else:
                        req.content_type = 'text/plain'
                        s = '\nMod_python error: "%s %s"\n\n' % (htype,
hname)
                        for e in traceback.format_exception(etype, evalue,
etb):
                             s = s + e + '\n'

                req.send_http_header()
                req.write(s)

                return DONE

This code is a bit of a brain dump on my part, so don't even think that I've
run/tested it yet... :-)  Let me know if I'm missing something... 

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Monday, April 23, 2001 11:54 PM
To: Chris Hagner
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Fancy Shmancy Exception Output



I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to
this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in
this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

From richard at ccpgames.com  Wed Apr 25 23:54:50 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] Apache settings wrong?
Message-ID: <FC15F916EC764C42A4219BC30BFBC0720770A2@control.central.ccp.cc>

I have two mod_python directories defined in my apache config.
However, accessing the second shows me the first.
And of course, accessing the first shows me the first.
Am I doing something wrong?

Thanks,
Richard.

ScriptAlias /ir/ "/home/httpd/.../whelkboard/cgi/index.shtml"

<Directory /home/httpd/sorrows/whelkboard/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

ScriptAlias /icelandic/
"/home/httpd/.../icelandic-language/cgi/index.shtml"

<Directory /home/httpd/.../icelandic-language/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

From nineclue at bigfoot.com  Fri Apr 27 13:13:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] FieldStorage class
Message-ID: <Pine.LNX.4.10.10104261403020.21425-100000@mrham.hamslab.com>

Hello,

During playing with util.FieldStorage classes I found that when form data
is loaded with POST method, Request object has already has 'data' member
that is loaded with form variables, even without creating intance of
FieldStorage. I tried to search manual about this, but failed. 

Is this member is safe to use in my code? Will this be supported in future
versions?

Thanks in advance.

Suhku Huh



From adoyle at intl-interfaces.com  Mon Apr 30 10:13:05 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
Message-ID: <3AED72F1.F6056FFB@intl-interfaces.com>

Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
security for Apache? I'm getting segmentation faults when I try to use it on
an https address (things work fine under http).

I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
whether I'm invoking mod_python or not, the https side of things core dumps
if I have the mod_python directives in the httpsd.conf file and does not core
dump if I comment them out.

Based on Covalent's web site I've taken LARGEFILE support out of
Python/mod_python (
http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
)

You can see the code I'm running at
http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
and try it out by clicking on the map found at
http://www.intl-interfaces.net/cookbook/WMS/

Now I want to play with x.509 control over who can see what maps so I want to
move things into https.

Any help would be appreciated.

    Allan

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



From grisha at modpython.org  Mon Apr 30 10:35:04 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
In-Reply-To: <3AED72F1.F6056FFB@intl-interfaces.com>
Message-ID: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>

Since Raven is a commercial product, I think you should (at least try)
making it Covalent's problem :) I'd like to hear what they say, and if
they can suggest a fix, I'm sure we can incorporate it into the code.

Also - since the expiration of the RSA patent last september, there is no
legal need to use Raven, and mod_python works really well with mod_ssl.

Grisha

On Mon, 30 Apr 2001, Allan Doyle wrote:

> Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> security for Apache? I'm getting segmentation faults when I try to use it on
> an https address (things work fine under http).
>
> I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> whether I'm invoking mod_python or not, the https side of things core dumps
> if I have the mod_python directives in the httpsd.conf file and does not core
> dump if I comment them out.
>
> Based on Covalent's web site I've taken LARGEFILE support out of
> Python/mod_python (
> http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> )
>
> You can see the code I'm running at
> http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> and try it out by clicking on the map found at
> http://www.intl-interfaces.net/cookbook/WMS/
>
> Now I want to play with x.509 control over who can see what maps so I want to
> move things into https.
>
> Any help would be appreciated.
>
>     Allan
>
> --
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> Allan Doyle                     adoyle@intl-interfaces.com
> International Interfaces        +1 781 433 2695 (Office)
> http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From adoyle at intl-interfaces.com  Mon Apr 30 10:42:04 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 21:58:53 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
References: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>
Message-ID: <3AED79BC.A45C7CF8@intl-interfaces.com>

I've already talked to Covalent, they saw no immediate misconfiguration and are also looking
into it but suggested I try this list as well... I can give mod_ssl a whirl.

Thanks,

    Allan

"Gregory (Grisha) Trubetskoy" wrote:

> Since Raven is a commercial product, I think you should (at least try)
> making it Covalent's problem :) I'd like to hear what they say, and if
> they can suggest a fix, I'm sure we can incorporate it into the code.
>
> Also - since the expiration of the RSA patent last september, there is no
> legal need to use Raven, and mod_python works really well with mod_ssl.
>
> Grisha
>
> On Mon, 30 Apr 2001, Allan Doyle wrote:
>
> > Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> > security for Apache? I'm getting segmentation faults when I try to use it on
> > an https address (things work fine under http).
> >
> > I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> > Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> > whether I'm invoking mod_python or not, the https side of things core dumps
> > if I have the mod_python directives in the httpsd.conf file and does not core
> > dump if I comment them out.
> >
> > Based on Covalent's web site I've taken LARGEFILE support out of
> > Python/mod_python (
> > http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> > )
> >
> > You can see the code I'm running at
> > http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> > and try it out by clicking on the map found at
> > http://www.intl-interfaces.net/cookbook/WMS/
> >
> > Now I want to play with x.509 control over who can see what maps so I want to
> > move things into https.
> >
> > Any help would be appreciated.
> >
> >     Allan
> >
> > --
> > ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> > Allan Doyle                     adoyle@intl-interfaces.com
> > International Interfaces        +1 781 433 2695 (Office)
> > http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



From lisicky at datis.cdrail.cz  Mon Apr  2 13:43:51 2001
From: lisicky at datis.cdrail.cz (Jiri Lisicky)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] processing checkbox field from form
Message-ID: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>

I am beginner on python and mod_python.

When I have form without checkbox field, everythig is OK. I use
publisher and get fields as parameters of function.

But when I add checkbox field I get to trouble. Number of parameters
is changing. In html documentation I found: "Unselected checkboxes and
radio buttons do not return name/value pairs when the form is
submitted." 

I don't know how write function for processing this parameters from
that form.

Is somewhere any example for my problem?

thanks

warning: my english is poor
--
        Ji?? Lisick?                      ?D KM?P Olomouc
e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
 phone: +420-068-472-2272                 Olomouc, Czech Republic
              >>> ?e?tina ISO-8859-2 Compatible <<<

From nineclue at cluelabs.com  Mon Apr  2 22:18:04 2001
From: nineclue at cluelabs.com (Suhku Huh)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Install Error
Message-ID: <001d01c0bb77$5aa15a00$4901fea9@dongnam.thrunet.com>

Greetings...

I've just compiled Apache with mod_python and mod_ssl using ApacheToolbox statically and tried to execute testing script (mptest.py) but failed.

Followings are error message in log file. 

'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Sun Apr  1 22:25:52 2001] [error] [client 127.0.0.1] python_handler: make_obcallback returned no obCallBack!

I'm using Linux Mandrake 7.1 (kernel 2.2.16).
ApacheToolbox downloaded up to date sources of mod_python(2.7.2), Python(2.0), and Apache(1.3.19).
Directory configuration of Apache and Python code are exactly same as
manual Testing section.

Any help or comment would be appreciated.

Suhku Huh
nineclue@bigfoot.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010402/ddfe84b2/attachment-0003.htm
From johannes.govaerts at siemens.atea.be  Mon Apr  2 15:48:12 2001
From: johannes.govaerts at siemens.atea.be (Johannes Govaerts)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>; from lisicky@datis.cdrail.cz on Mon, Apr 02, 2001 at 13:43:51 +0200
References: <ijogctgb0ekv97pnqinnbh4scq0hcdmkm3@4ax.com>
Message-ID: <20010402154812.A5396@zubr.iplab.atea.be>

You can use default values to deal with the changing number of parameters
in your function:
e.g. something like function(parameter1, parameter2, checkbox='not
checked')

Johannes.


On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> I am beginner on python and mod_python.
> 
> When I have form without checkbox field, everythig is OK. I use
> publisher and get fields as parameters of function.
> 
> But when I add checkbox field I get to trouble. Number of parameters
> is changing. In html documentation I found: "Unselected checkboxes and
> radio buttons do not return name/value pairs when the form is
> submitted." 
> 
> I don't know how write function for processing this parameters from
> that form.
> 
> Is somewhere any example for my problem?
> 
> thanks
> 
> warning: my english is poor
> --
>         Ji?? Lisick?                      ?D KM?P Olomouc
> e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
>  phone: +420-068-472-2272                 Olomouc, Czech Republic
>               >>> ?e?tina ISO-8859-2 Compatible <<<
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 
> 

From aiglauer at yahoo.com  Mon Apr  2 08:49:30 2001
From: aiglauer at yahoo.com (Alexis Iglauer)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154812.A5396@zubr.iplab.atea.be>
Message-ID: <20010402154930.86243.qmail@web13905.mail.yahoo.com>

A more elegant way could be to pass the parameters as a single
dictionary, not as individual parameters - and then use .has_key() to
check for the available params.

I generally use the following code to split a URL into params (req is
the apache request):
-----------------
URL = urlparse.urlparse (req.unparsed_uri)
params = {}
try:
    for x in split(URL[4], '&'):
        params[split(x,'=')[0]] = split(x,'=')[1]
except IndexError:
    pass
---------------------

I then pass 'params' to my functions.  I can check for a checkbox
called XXX by saying:

if params.has_key('XXX'):

This method will not happily handle multiple parameter values, but
could easily be modified to do so.

HTH
Alexis

--- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> You can use default values to deal with the changing number of
> parameters
> in your function:
> e.g. something like function(parameter1, parameter2, checkbox='not
> checked')
> 
> Johannes.
> 
> 
> On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > I am beginner on python and mod_python.
> > 
> > When I have form without checkbox field, everythig is OK. I use
> > publisher and get fields as parameters of function.
> > 
> > But when I add checkbox field I get to trouble. Number of
> parameters
> > is changing. In html documentation I found: "Unselected checkboxes
> and
> > radio buttons do not return name/value pairs when the form is
> > submitted." 
> > 
> > I don't know how write function for processing this parameters from
> > that form.
> > 
> > Is somewhere any example for my problem?
> > 
> > thanks
> > 
> > warning: my english is poor
> > --
> >         Jiøí Lisický                      ÈD KM®P Olomouc
> > e-mail: lisicky@datis.cdrail.cz           Vídeòská 15
> >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> >               >>> èe¹tina ISO-8859-2 Compatible <<<
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> > 
> > 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


__________________________________________________
Do You Yahoo!?
Get email at your own domain with Yahoo! Mail. 
http://personal.mail.yahoo.com/?.refer=text

From grisha at modpython.org  Mon Apr  2 12:31:37 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] processing checkbox field from form
In-Reply-To: <20010402154930.86243.qmail@web13905.mail.yahoo.com>
Message-ID: <Pine.BSF.4.32.0104021231010.2762-100000@localhost>

I think the publisher modules already does what you're trying to do a
little bit cleaner

Grisha

On Mon, 2 Apr 2001, Alexis Iglauer wrote:

> A more elegant way could be to pass the parameters as a single
> dictionary, not as individual parameters - and then use .has_key() to
> check for the available params.
>
> I generally use the following code to split a URL into params (req is
> the apache request):
> -----------------
> URL = urlparse.urlparse (req.unparsed_uri)
> params = {}
> try:
>     for x in split(URL[4], '&'):
>         params[split(x,'=')[0]] = split(x,'=')[1]
> except IndexError:
>     pass
> ---------------------
>
> I then pass 'params' to my functions.  I can check for a checkbox
> called XXX by saying:
>
> if params.has_key('XXX'):
>
> This method will not happily handle multiple parameter values, but
> could easily be modified to do so.
>
> HTH
> Alexis
>
> --- Johannes Govaerts <johannes.govaerts@siemens.atea.be> wrote:
> > You can use default values to deal with the changing number of
> > parameters
> > in your function:
> > e.g. something like function(parameter1, parameter2, checkbox='not
> > checked')
> >
> > Johannes.
> >
> >
> > On Mon, 02 Apr 2001 13:43:51 Jiri Lisicky wrote:
> > > I am beginner on python and mod_python.
> > >
> > > When I have form without checkbox field, everythig is OK. I use
> > > publisher and get fields as parameters of function.
> > >
> > > But when I add checkbox field I get to trouble. Number of
> > parameters
> > > is changing. In html documentation I found: "Unselected checkboxes
> > and
> > > radio buttons do not return name/value pairs when the form is
> > > submitted."
> > >
> > > I don't know how write function for processing this parameters from
> > > that form.
> > >
> > > Is somewhere any example for my problem?
> > >
> > > thanks
> > >
> > > warning: my english is poor
> > > --
> > >         Ji?? Lisick?                      ?D KM?P Olomouc
> > > e-mail: lisicky@datis.cdrail.cz           V?de?sk? 15
> > >  phone: +420-068-472-2272                 Olomouc, Czech Republic
> > >               >>> ?e?tina ISO-8859-2 Compatible <<<
> > > _______________________________________________
> > > Mod_python mailing list
> > > Mod_python@modpython.org
> > > http://www.modpython.org/mailman/listinfo/mod_python
> > >
> > >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
>
>
> __________________________________________________
> Do You Yahoo!?
> Get email at your own domain with Yahoo! Mail.
> http://personal.mail.yahoo.com/?.refer=text
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at mrham.hamslab.com  Tue Apr  3 21:32:45 2001
From: nineclue at mrham.hamslab.com (nineclue@mrham.hamslab.com)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Sorry, Install error.
Message-ID: <Pine.LNX.4.10.10104032126360.23083-100000@mrham.hamslab.com>

Greetings....

Sorry for the contamination.
Now I'm using PINE thru telnet.

I've compiled Apache with mod_python using ApacheToolbox. When I tried
the Test (mptest.py) script, Server Error is raised. 
Followings are part of error_log.

[Tue Apr  3 21:35:23 2001] [notice] Apache/1.3.19 (Unix)
mod_gzip/1.3.19.1a mod_python/2.7.2 Python/2.0 mod_ssl/2.8.1 OpenSSL/0.9.5a configured --
resuming normal operations
[Tue Apr  3 21:35:23 2001] [notice] suEXEC mechanism enabled (wrapper: 
/usr/local/apache/bin/suexec)
'import site' failed; use -v for traceback
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Tue Apr  3 21:35:44 2001] [error] [client 127.0.0.1] python_handler:
make_oballback returned no obCallBack!

Any comment or answer would be appreciated.

Suhku Huh



From tom_bentz at tamcomm.com  Wed Apr  4 19:15:00 2001
From: tom_bentz at tamcomm.com (Tom Bentz)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Apache configuration
Message-ID: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>

When I set this in my httpd.conf:
AddHandler python-program .py
the browser tries to download the python file

When I add this:
PythonHandler mod_python.publisher
I get this error in my browser:  'The page cannot be found'
    
Any ideas??  Thanks.



From joost.damad at siemens.atea.be  Thu Apr  5 08:00:44 2001
From: joost.damad at siemens.atea.be (Joost Yervante Damad)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Apache configuration
In-Reply-To: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>; from tom_bentz@tamcomm.com on Wed, Apr 04, 2001 at 07:15:00PM -0700
References: <000201c0bd76$3e49fa00$0e998d3f@tamcomm.com>
Message-ID: <20010405080044.B10114@siemens.atea.be>

Dit you try to read the manual?
The example in there should work fine,
and give you a clue on how to roll your own config.

'Tom Bentz' wrote about '[mod_python] Apache configuration' - Thu, Apr 05, 2001 at 04:15:00AM CEST
> When I set this in my httpd.conf:
> AddHandler python-program .py
> the browser tries to download the python file
> 
> When I add this:
> PythonHandler mod_python.publisher
> I get this error in my browser:  'The page cannot be found'
>     
> Any ideas??  Thanks.
> 

What url are you viewing, what is your exact configuration?

-- 
Joost Damad - Siemens IC D NC A - +3214252297
--
** WARNING **: Invalid seek
wvError: (escher.c:45) Not a container, panic (200)
 wvError: (escher.c:366) Damn found nothing
 wvError: (fspa.c:99) found no fspa, panic

From mhagger at alum.mit.edu  Thu Apr  5 09:31:38 2001
From: mhagger at alum.mit.edu (Michael Haggerty)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Apache 2.0
Message-ID: <m2u2435v7p.fsf@freak.kaiserty.com>

Hi,

Does mod_python support the multithreaded model that is coming in
Apache 2.0?  If not, are there plans to add support for it?  Are there
other Python-in-Apache modules that support Apache 2.0?

Michael

-- 
Michael Haggerty
mhagger@alum.mit.edu

From xkrajic at ics.muni.cz  Thu Apr  5 21:02:09 2001
From: xkrajic at ics.muni.cz (Ondrej Krajicek)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Apache 1.3.19/Win32 Internal server error
References: <200104051810.f35IA1c36397@eden.ispol.com>
Message-ID: <3ACCC131.80A38B5D@ics.muni.cz>

Hello all,

I've downloaded latest mod_python (2.7.2 and precompiled dll
for Windows). I've placed mod_python.so (renamed dll) to
the proper directory (it loads) and I've copied
lib directory from mod_python package to
my site-packages directory. The sys.path
looks like this (python site.py):

sys.path = [
    'd:\\app\\python\\lib',
    'd:\\app\\python\\pythonwin',
    'd:\\app\\python\\win32',
    'd:\\app\\python\\win32\\lib',
    'd:\\app\\python',
    'd:\\app\\python\\dlls',
    'd:\\app\\python\\lib\\plat-win',
    'd:\\app\\python\\lib\\lib-tk',
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-packages\\mod_python',
]

site directories = [
    'd:\\app\\python\\lib\\site-packages',
    'd:\\app\\python\\lib\\site-python',
]

I've set up the example as is stated in manual,
but instead of nice "Hello World!" message
smiling to me, I get internal server error (500).
Log excerpt:

make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
make_obcallback(): could not import mod_python.apache.
make_obcallback(): could not call init.
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:34 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!
[Thu Apr 05 20:34:35 2001] [error] [client 127.0.0.1] python_handler:
make_obcallback returned no obCallBack!

When I try to execute the test.py in interpreter
(python test.py), I got:

Traceback (most recent call last):
  File "test.py", line 1, in ?
    from mod_python import apache
  File "d:\app\python\lib\site-packages\mod_python\apache.py", line 55,
in ?
    import _apache
ImportError: No module named _apache

My configuration is:
Windows 2000 Server Sp1
ActivePython from ActiveState (based on Python2.0)
Apache 1.3.19 for Win32 running as service

I am new to python, new to apache and new to mod_python.
Can anyone please help me ?

TIA,

Ondrej Krajicek

-- 
---------------------------------------------------------------------
Ondrej Krajicek OK-)
email: xkrajic et {ics,fi}.muni.cz
                               Omnia ad maiorem Informaticae gloriam.
-->>> The Nexus Framework <<<-- sourceforge.net/projects/nexusproject
          Of course we can, moreover we must, it is our holiest duty.
---------------------------------------------------------------------

From grisha at verio.net  Fri Apr  6 14:54:39 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Apache 2.0
In-Reply-To: <m2u2435v7p.fsf@freak.kaiserty.com>
Message-ID: <Pine.BSF.4.32.0104061453200.46934-100000@localhost>

mod_snake (modsnake.sourceforge.net) works with Apache 2.0

mod_python isn't going to work with 2.0 for a couple of months at least

Grisha

On 5 Apr 2001, Michael Haggerty wrote:

> Hi,
>
> Does mod_python support the multithreaded model that is coming in
> Apache 2.0?  If not, are there plans to add support for it?  Are there
> other Python-in-Apache modules that support Apache 2.0?
>
> Michael
>
> --
> Michael Haggerty
> mhagger@alum.mit.edu
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From marcf at becomm.com  Fri Apr  6 18:17:41 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] apache processes are getting large memory footprint
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>

Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0

From marcf at becomm.com  Fri Apr  6 18:34:01 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] apache processes are getting large memory footpr
	int
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861B9@becomm-mis2.becomm.com>

I just found the gc module, which seems to be a builtin module.  If I try to
import it, then mod_python seems to barf.  Any reason for this?

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File "/scratch/local/lib/python2.0/site-packages/mod_python/publisher.py",
line 128, in handler
    module = apache.import_module(module_name, _req, [path])

  File "/scratch/local/lib/python2.0/site-packages/mod_python/apache.py",
line 346, in import_module
    module = imp.load_module(mname, f, p, d)

  File "/scratch/apache/htdocs/hotbeads/dispatch.py", line 1, in ?
    import gc

ImportError: No module named gc





-----Original Message-----
From: Marc Fiuczynski [mailto:marcf@becomm.com]
Sent: Friday, April 06, 2001 6:18 PM
To: 'mod_python@modpython.org'
Subject: [mod_python] apache processes are getting large memory
footprint


Hi,

I am using mod_python to serve up large files from the server to the client.
I have noticed that the memory footprint of httpd gets rather large and
stays that way.  Can someone give me a hint how to start figuring out which
parts are holding on to that amount of memory.  Right now I have no clue
whether it is httpd, mod_python, or my python programs.  Is there a way to
figure out what the python memory profile is, or python GC stats?

Thanks,
Marc

ps., my configuration is as follows:
*python module is being invoked via mod_python's
 publisher interface.
*mod_python 2.7.2
*python 2.0
*apache 1.3.14
*Red Hat Linux 7.0
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From grisha at verio.net  Fri Apr  6 22:07:46 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] apache processes are getting large memory footprint
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861B8@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104062204240.50197-100000@localhost>

On Fri, 6 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I am using mod_python to serve up large files from the server to the client.
> I have noticed that the memory footprint of httpd gets rather large and
> stays that way.  Can someone give me a hint how to start figuring out which
> parts are holding on to that amount of memory.  Right now I have no clue
> whether it is httpd, mod_python, or my python programs.  Is there a way to
> figure out what the python memory profile is, or python GC stats?

It is most likely Python.

There is no easy way to identify the state of all variables within a
Python interpreter, but you can try a few things, such making sure that
your large variables don't persist between connection by assigning None to
them at the end.

Grisha


From rusddf at yahoo.com  Thu Apr  5 19:02:13 2001
From: rusddf at yahoo.com (Sergey)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] E-mail áàçà "Âñÿ Ðîññèÿ"
Message-ID: <0eb690458140741SERVER@server>

????????????!

E-mail ???? "??? ??????"

?????????? ??? ?????????? ???? ??????? ??????????? ????? ?????????? ?????????????.
???? ???????? 340 ????? ??????? (?? ??? ????? 30% - ?????? ???????????).
??? ?????? ?????????????? ????????? ? ??????? ??????????? ????????? ? ??????? 2001 ?.
? ??????? ??????????.

??????????? ????????? ??? ???????? ????????.

???? ????????????? ??? ???????? ???????? ??????? ???????, ??????,
???????????? ??????????? ? ?.?.

???? 1000 ??????

From stevena at permanent.cc  Sat Apr  7 16:32:23 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <3928573C.EFEB5271@myself.com>
Message-ID: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>

<html>
At 02:38 PM 5/21/2000 -0700, Wayne Izatt wrote:<br>
<blockquote type=cite cite>Hi all. I've built and installed a mod_python enabled apache. However,<br>
I'm not sure what, if any, directives I need to add to httpd.conf to get<br>
it to pass .py files to the python handler. When I point my browser at<br>
the test script, all that I get is the script in the browser window.<br>
<br>
Perhaps someone has a sample httpd.conf (just the handler stuff will do)<br>
or a vanilla .htaccess (if that's where the directives should go).<br>
<br>
(Yes, I've followed the installation instructions, but something simple<br>
is still eluding me).</blockquote><br>
I'm having the same experience.<br>
<br>
I tried the following directives:<br>
<br>
Alias /python /usr/local/apache/htdocs/python<br>
<br>
&lt;Location /python/&gt;<br>
&nbsp;&nbsp;&nbsp; AllowOverride All<br>
&nbsp;&nbsp;&nbsp; AddHandler python-program .py<br>
&nbsp;&nbsp;&nbsp; PythonDebug<br>
&nbsp;&nbsp;&nbsp; PythonHandler test<br>
&lt;/Location&gt;<br>
<br>
<br>
When I try loading the page, I get this error:<br>
<br>
\nERROR mod_python: &quot;PythonHandler test&quot;<br>
<br>
Traceback (innermost last):<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 107, in Dispatch object = self.resolve_object(module_name, object_str)<br>
<br>
File &quot;/usr/local/lib/python1.5/site-packages/mod_python/apache.py&quot;, line 70, in resolve_object raise &quot;ResolveError&quot;, &quot;Couldn't resolve object '%s' in module '%s'.&quot; % \<br>
<br>
ResolveError: Couldn't resolve object 'handler' in module 'test'.<br>
<br>
NOTE: More output from other handlers, if any, may follow. This will NOT happen, and request processing will STOP at this point when you remove PythonDebug directive. <br>
<br>
<br>
I'm not quite sure what I'm doing wrong.&nbsp; Any ideas?<br>
<br>
<br>
steve</html>



From stevena at permanent.cc  Sat Apr  7 16:32:29 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] apache compile problems
Message-ID: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>

Hi,

I'm trying to compile apache with mod_python and I'm getting the following error:

[root@catatonia apache_1.3.12]# ./configure --activate-module=src/modules/extra/mod_python.c --prefix=/usr/local/apache --enable-module=all
Configuring for Apache, Version 1.3.12
 + using installation path layout: Apache (config.layout)
 + activated python module (modules/extra/mod_python.c)
Creating Makefile
Creating Configuration.apaci in src
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
grep: /usr/lib/python1.5/config/Makefile: No such file or directory
cd ..; gcc  -DLINUX=2 -DUSE_HSREGEX -DUSE_EXPAT -I./lib/expat-lite `./apaci` -I/usr/include/python1.5    -o helpers/dummy helpers/dummy.c   -lm -lcrypt -lndbm -ldb /usr/lib/python1.5/config/libpython1.5.a   -ldl
gcc: /usr/lib/python1.5/config/libpython1.5.a: No such file or directory
make: *** [dummy] Error 1
Creating Makefile in src
 + configured for Linux platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + checking for system header files
 + adding selected modules
    o rewrite_module uses ConfigStart/End
 + using -lndbm for DBM support
      enabling DBM support for mod_rewrite
    o dbm_auth_module uses ConfigStart/End
    o db_auth_module uses ConfigStart/End
      using Berkeley-DB/2.x for mod_auth_db (-ldb)
    o python_module uses ConfigStart/End
 + using -ldl for vendor DSO support
 + checking sizeof various data types
 + doing sanity check on compiler and options
** A test compilation with your Makefile configuration
** failed.  The below error output from the compilation
** test will give you an idea what is failing. Note that
** Apache requires an ANSI C Compiler, such as gcc. 

======== Error Output for sanity check ========
============= End of Error Report =============

 Aborting!


I have no directory /usr/lib/python1.5/config, though the parent of that dir does exist.  I just freshly installed python 1.5.2 before trying the above.  Platform is Red Hat Linux 6.2.  Any ideas?


steve




From stevena at permanent.cc  Sat Apr  7 16:32:30 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] [SOLVED] apache compile problems
In-Reply-To: <4.3.1.2.20000520233846.014d7ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521002528.015faf08@phear.dementian.com>

For some reason, the original installation of python on my system didn't have a config dir inside /usr/lib/python1.5.  I reinstalled python and it made sys.exec_prefix /usr/local; however, it didn't replace the old copies of python sitting in /usr/bin.  (It did put new copies in /usr/local/bin.)  When I deleted the old copies and created symlinks to the new copies, python then knew to look in /usr/local/lib/python1.5/config, and all was well.


steve




From stevena at permanent.cc  Sat Apr  7 16:32:35 2001
From: stevena at permanent.cc (Steven D. Arnold)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] .htaccess and httpd.conf
In-Reply-To: <Pine.LNX.4.21.0005211909500.29474-100000@saturn.ispol.com>
References: <4.3.1.2.20000521175332.01f98ee8@phear.dementian.com>
Message-ID: <4.3.1.2.20000521200358.015c0300@phear.dementian.com>

<html>
At 07:11 PM 5/21/2000 -0400, Gregory Trubetskoy wrote:<br>
<br>
<blockquote type=cite cite>This means that test.py doesn't have a function called &quot;handler&quot; defined<br>
in it.<br>
<br>
What's in your test.py?</blockquote><br>
I put exactly what the docs suggest:<br>
<br>
from mod_python import apache<br>
<br>
def handler(req):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.send_http_header()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req.write(&quot;Hello World!&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return apache.OK<br>
<br>
<br>
However, I made the changes Wayne suggested, and now it works for me. :-)&nbsp; (It didn't initially, but it does now -- I can't explain why.)&nbsp; Apparently the AddModule and Directory directives did it...<br>
<br>
<br>
steve<br>
</html>



From ron at kramedjian.com  Sun Apr  8 10:13:46 2001
From: ron at kramedjian.com (Ronald E. Kramedjian)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Instalation Error
Message-ID: <002801c0c03e$822bd570$0501a8c0@D69HHG01>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3360 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/32b1ceee/smime-0003.bin
From gdamjan at mail.net.mk  Sun Apr  8 20:19:00 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>; from ron@kramedjian.com on Sun, Apr 08, 2001 at 10:13:46AM -0500
References: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <20010408201900.A376@local.izmislen.mk>

> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
... 
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'

Don't use a test.py script for testing mod_python. There is already a package 
named test in the standard Python distribution, and mod_python would try to load
it instead (which should be obvious in the line above).

Use something as mptest.py.




-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at verio.net  Sun Apr  8 16:56:09 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] Instalation Error
In-Reply-To: <002801c0c03e$822bd570$0501a8c0@D69HHG01>
Message-ID: <Pine.BSF.4.32.0104081655490.67981-100000@localhost>

use a name for your script other than "test".

Grisha

On Sun, 8 Apr 2001, Ronald E. Kramedjian wrote:

> Gentle People,
>
> Your help would be most appreciated.
>
> I have reviewed each step of the windows installation instructions carefully.  I have followed them carefully, fully and have verified that I did.  Yet when I try to run test.py I receive the following message, any ideas?
>
> Ronald E. Kramedjian
> ------------------------------------------------------------------------------------------
>
> Mod_python error: "PythonHandler test"
>
> Traceback (most recent call last):
>
>   File "c:\python20\lib\mod_python\apache.py", line 180, in Dispatch
>     object = resolve_object(self.req, module, object_str, silent)
>
>   File "c:\python20\lib\mod_python\apache.py", line 396, in resolve_object
>     raise AttributeError, s
>
> AttributeError: module 'c:\python20\lib\test\__init__.py' contains no 'handler'
>
> -----------------------------------------------------------------------------------------
>
>
>


From victor at prodigy.net  Sun Apr  8 17:38:31 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
Message-ID: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>


Sorry for a long message, but this requires a bit of explanation. I 
appreciate your patience in advance.

I have a bunch of python legacy code that used to be part of a large 
CGI-based system. This code simply used print statements to output HTML as 
follows:

def foo():
         print 'html1'
         print 'html2'

Now I want to convert CGI to mod_python, but I would like to re-use the 
legacy code with as little re-writing as possible (obviously the legacy 
code is a lot lengthier and more complicated than the example above). I am 
using the publisher module, which requires my code to return a string 
containing all of the HTML. So I thought I would be clever and do something 
like this:

import sys, cStringIO
def handler(req):
         out =  sys.stdout = StringIO()
         foo()
         return out

This works great as long as the second request does not arrive before the 
first one is done. Otherwise, the output gets screwed up. Since "out" is a 
local variable, each request has its own instance, but sys.stdout is a 
global. When the second request arrives, sys.stdout gets reassigned and the 
rest of the output produced by print statements in the foo() function goes 
to the new StringIO object. For example, if the second request arrives and 
gets executed between the two print statements of the first request, then 
the first request's output could be  'html1\n' and the second request's 
output could be 'html2\nhtml1\nhtml2\n'.

Has anyone dealt with such a situation? Any clever suggestion would be 
appreciated as I hate to have to go into all the legacy code and change it 
to something like this:

def foo():
         out = 'html1\n'
         out = out + 'html2\n'
         return out

def handler(req):
         return foo()

Thanks in advance.
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010408/b9ac82b3/attachment-0003.htm
From grisha at verio.net  Sun Apr  8 21:19:02 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:40 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <4.3.2.7.0.20010408171950.00c0bc80@pop.prodigy.net>
Message-ID: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>


Victor -

Rather than invent ways to deal with legacy CGI code, I would bite the
bullet and rewrite the code without the use of "print". There are too many
subtle gotchas with simulating CGI...

Grisha



On Sun, 8 Apr 2001, Victor Muslin wrote:

>
> Sorry for a long message, but this requires a bit of explanation. I
> appreciate your patience in advance.
>
> I have a bunch of python legacy code that used to be part of a large
> CGI-based system. This code simply used print statements to output HTML as
> follows:
>
> def foo():
>          print 'html1'
>          print 'html2'
>
> Now I want to convert CGI to mod_python, but I would like to re-use the
> legacy code with as little re-writing as possible (obviously the legacy
> code is a lot lengthier and more complicated than the example above). I am
> using the publisher module, which requires my code to return a string
> containing all of the HTML. So I thought I would be clever and do something
> like this:
>
> import sys, cStringIO
> def handler(req):
>          out =  sys.stdout = StringIO()
>          foo()
>          return out
>
> This works great as long as the second request does not arrive before the
> first one is done. Otherwise, the output gets screwed up. Since "out" is a
> local variable, each request has its own instance, but sys.stdout is a
> global. When the second request arrives, sys.stdout gets reassigned and the
> rest of the output produced by print statements in the foo() function goes
> to the new StringIO object. For example, if the second request arrives and
> gets executed between the two print statements of the first request, then
> the first request's output could be  'html1\n' and the second request's
> output could be 'html2\nhtml1\nhtml2\n'.
>
> Has anyone dealt with such a situation? Any clever suggestion would be
> appreciated as I hate to have to go into all the legacy code and change it
> to something like this:
>
> def foo():
>          out = 'html1\n'
>          out = out + 'html2\n'
>          return out
>
> def handler(req):
>          return foo()
>
> Thanks in advance.
> __________________________________________________________________________________
> Victor Muslin      The power of accurate observation is frequently called
>                           cynicism by those who don't have it.
>                                        - George Bernard Shaw
>


From CHagner at fool.com  Mon Apr  9 17:26:57 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] PythonImport failure
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4804DAFD90@rover.foolhq.com>

Hi there,

This message is a continuation of a previous thread I started regarding my
difficulties in getting PythonImport to work.  (thread text is attached).

Moved my dev environment to Linux.  Still having failure of PythonImport
(see snippet below for error).  Simply put ChrisTest.py in the site-packages
directory.

[Mon Apr  9 17:10:38 2001] [notice] Apache/1.3.19 (Unix) mod_python/2.7.2
Python/2.0.42-S1.2.4 configured -- resuming normal operations
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest
TypeError: must assign list (not "string") to slice
[Mon Apr  9 17:10:38 2001] [error] directive_PythonImport: error importing
ChrisTest

Using the following directive

    PythonImport ChrisTest

Looking through mod_python.c, it's apparently failing on trying to import
the module (duh), but I haven't jumped in deeper.  Any help/ideas would be
greatly appreciated...  Thanks.

Chris
chagner
at
fool
dot
com

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
Sent: Tuesday, March 27, 2001 4:01 PM
To: Chris Hagner
Cc: 'mod_python@modpython.org'
Subject: RE: [mod_python] PythonImport failure



Try the mod_python 2.7.2 DLL and see if the problems persist

Grisha

On Tue, 27 Mar 2001, Chris Hagner wrote:

> A specific question about why PythonImport works for some modules and not
> for others.
>
> 1.  The following statement works.  It compiles/imports apache.py at
server
> startup.
>
> PythonImport mod_python.apache
>
> 2.  Now, when I create a dummy module in mod_python/MyObject.py
>
> def myFunction():
>     return "MyObject.myFunction()"
>
> class MyObject:
>
>     def __init__(self):
>         pass
>
> The following statement does not work.
>
> PythonImport mod_pytnon.MyObject
>
> Here's the error in error.log
> [Tue Mar 27 13:07:56 2001] [error] directive_PythonImport: error import
> mod_python.MyObject
> TypeError: must assign list (not "string") to slice
>
> Any help on this error msg?
>
> BTW, the first error line appears at start up... second appears upon
> immediate shutdown... probably just a buffer thing, but I thought I'd
share.
>
> 3.  I also tried import a base module which worked fine.
>
> PythonImport string
>
> 4.  But when I created a copy of string.py and simply renamed it, it
didn't
> work.
>
> PythonImport copyofstring
>
> Any thoughts on why mod_python appears to like some modules and not
others?
>
> Thanks in advance.
>
> Chris
>
>
>
> -----Original Message-----
> From: Chris Hagner [mailto:CHagner@fool.com]
> Sent: Thursday, March 15, 2001 12:07 PM
> To: 'Gregory (Grisha) Trubetskoy'
> Cc: 'mod_python@modpython.org'
> Subject: RE: [mod_python] PythonImport failure
>
>
> Thanks for the response.  For my tests, mypackage is a package named
> 'toolkit' and the mymodule is a module named 'brandconfig'.
>
> Oh yeah, I'm doing this on Apache/1.3.19 (Win32) mod_python/2.7.1
> Python/2.0.  I'm on Win2K (for development, sigh).
>
> INTERACTIVE SESSION TEST:
> ******************************
>
> Here's my python interactive session... the module only contains a single
> variable x.
>
> >>> import toolkit.brandconfig
> >>> dir(toolkit.brandconfig)
> ['__builtins__', '__doc__', '__file__', '__name__', 'x']
> >>> toolkit.brandconfig.x
> 123
> >>>
>
> So, the module is importable in my python environment.
>
>
> APACHE PYTHONIMPORT TEST:
> ******************************
>
> Just to be sure, I ran the apache test again.  Here's the httpd.conf
entry.
> Nothing shocking.
>
> <Directory "D:/site/brand1/htdocs">
>    AddHandler python-program .py
>    PythonHandler toolkit.publisher
>    PythonDebug on
>    PythonImport toolkit.brandconfig
> </Directory>
>
> Here's the response in the log upon starting apache.
>
>    [Thu Mar 15 11:39:10 2001] [error] directive_PythonImport: error
> importing toolkit.brandconfig
>
> Same as before.  Now, just to be sure, I blew away the brandconfig.py file
> (and the .pyc) so that it shouldn't even find it (just to see if I could
get
> a different error if it didn't even exist).  Result: No change.  Same
error
> in error.log.  Apparently, it's not even finding it.
>
> APACHE PYTHON SCRIPT TEST:
> ******************************
>
> So, it wasn't importing it on start up.  How about a python script in
> mod_python?
>
> Here's the code blurb...
>
> 	import foolkit.brandconfig
>        out_string = "foolkit.brandconfig.x: %s \n"% foolkit.brandconfig.x
>
> Did it work?  yup, the page displayed
>
> 	foolkit.brandconfig.x: 123
>
>
>
> Yes, I have read through the documentation and my need is to initialize a
> number of objects (i.e. dbconn pool) for use throughout my applications.
> Now, I am using a custom handler, so I could simply have the handler do
this
> initialization the first time it runs, but the PythonImport appeared to be
a
> code-free way to achieve this goal.  Do you all think this is a case where
I
> *really* need it?  If not, could someone share an example of when it
really
> deserves to be used?
>
> Thanks again for the help.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@verio.net]
> Sent: Thursday, March 15, 2001 11:26 AM
> To: Chris Hagner
> Cc: 'mod_python@modpython.org'
> Subject: Re: [mod_python] PythonImport failure
>
>
>
> Chris -
>
> Have you tried
>
> >>> import mypackage.mymodule
>
> from an interactive Python session?
>
> Also, regarding PythonPath - if you read documentation carefully, you'll
> notice that it says that no other directives have any effect at the time
> PythonImport is executed.
>
> Generally, you should not use PythonImport unless you *really* need it,
> which is almost never the case.
>
> Grisha
>
>
> On Thu, 15 Mar 2001, Chris Hagner wrote:
>
> > Greetings,
> >
> > I'm trying to get the PythonImport command to work.  Been through the
> > documentation, but it appears to want more than simply inserting
> >
> >    PythonImport mypackage.mymodule
> >
> > within my Directory tags in httd.conf.
> >
> > While mypackage.mymodule is under the standard python lib directory
> > (therefore should be found through the sys.path), the system spat out
the
> > following...
> >
> >     ...[error] directive_PythonImport: error importing
mypackage.mymodule
> >
> > I then moved the module to a different directory and appended that
> directory
> > to the sys.path using the PythonPath command (just to see if that
allowed
> it
> > to find the module).  No luck.
> >
> > I've found a handful of posts from June and August of last year, but no
> > posted solutions to getting the PythonImport command to work correctly.
> Of
> > course, there's a CVS commit with the comment "PythonImport works now"
so
> > I'm pretty sure it's me...
> >
> > As a random test, I tried a standard module...
> >
> >    PythonImport sys
> >
> > which appeared to work (no error msg), but I'm not really confident that
> > this was a meaningful test.
> >
> > Thanks in advance.
> >
> > Chris
> > chagner _at_ fool _dot_ com
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From marcf at becomm.com  Mon Apr  9 22:44:58 2001
From: marcf at becomm.com (Marc Fiuczynski)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] subintrepreters
Message-ID: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>

Hi,

I want to make sure that I understand the subinterpreters that are used by
mod_python.

Here is my scenario: I have two handlers defined in a single .py file.   One
of them submits files to a database and the other retrieves files from that
same database.  To avoid hitting the backend database, there is a fair
amount of caching going within the python code.

Now the question is whether the cached objects created by the submit handler
are shared with the one from the retrieve handler.  Anyone have a definitive
answer?

Thanks,
Marc

From grisha at verio.net  Tue Apr 10 10:49:32 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] subintrepreters
In-Reply-To: <A9DFD9380C01D4118E740050DA7A89703861D3@becomm-mis2.becomm.com>
Message-ID: <Pine.BSF.4.32.0104101048550.87097-100000@localhost>

By default, if they are in the same virtual server, they share the
interpreter.

Grisha

On Mon, 9 Apr 2001, Marc Fiuczynski wrote:

> Hi,
>
> I want to make sure that I understand the subinterpreters that are used by
> mod_python.
>
> Here is my scenario: I have two handlers defined in a single .py file.   One
> of them submits files to a database and the other retrieves files from that
> same database.  To avoid hitting the backend database, there is a fair
> amount of caching going within the python code.
>
> Now the question is whether the cached objects created by the submit handler
> are shared with the one from the retrieve handler.  Anyone have a definitive
> answer?
>
> Thanks,
> Marc
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From grisha at verio.net  Tue Apr 10 22:22:00 2001
From: grisha at verio.net (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] some issues
In-Reply-To: <20010215150733.A20391@siemens.atea.be>
Message-ID: <Pine.BSF.4.32.0104102220290.93109-100000@localhost>

Joost -

This was a bug with reusing a pointer to the internal representation of a
Python string after resizing it. For some reason on Linux and FreeBSD it
caused no problems, but showed on Solaris.

This should be fixed in the latest code available via CVS.

Grisha

On Thu, 15 Feb 2001, Joost Yervante Damad wrote:

> Hello,
>
> A friend of me discovered wierd bug in publisher :
>
> def tst(req, arg='none', test='none', longname='none'):
>         req._content_type_set = 0
>         return "Arguments are '%s', '%s' and '%s'" % (arg, test, longname)
>
> if we now do:
>
> https://r2d2.iplab.atea.be:8081/py/test.py/tst?arg=x&test=y&longname=z
>
> the result is:
>
> Arguments are '', '' and 'z'
>
> Aparently short names are not getting into the functions.
> Long names are. Or is this caused by name clashes?
>
> We tested this both with 2.7.1 and 2.7.2 on Solaris 2.6
> with apache 1.3.14 with SSL and mod_python statically linked.
>
> Another error I found:
>
> The handling of _content_type_set seems to be broken.
>
> publisher no longer functioned, bailin out at:
>
> if not req._content_type_set:
>
> giving an exeception stating that that variable was not found.
>
> Removing that part and setting the content_type to
> "text/html" is our current workaround.
>
> Any thoughts?
>
> Joost
>
> P.S.: but we love mod_python :)
>
> --
> Joost Damad - Siemens ICN D NC A - +3214252297
> --
> Five is a sufficiently close approximation to infinity.
>        -- Robert Firth
> "One, two, five."
>        -- Monty Python and the Holy Grail
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From mgpl1-NoTinnedHamThanks at zeta.org.au  Thu Apr 12 10:18:28 2001
From: mgpl1-NoTinnedHamThanks at zeta.org.au (Wilson Fletcher)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <3AD4F453.CE85A3AD@zeta.org.au>

Wouldn't it be better just to buffer the output and then just use one output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

I don't understand the problem with redirecting stdout. My understanding of Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session that fires up
it's own instance of the code. Is this not true ?

Secondly the idea of just rewriting something that works doesn't seem to be a good idea
to me. I would say rewrite if you're finding you are doing a lot of mainatainence on
existing code however if the code works well and has been tested, deployed etc, it
would be better to interfere with it as little as possible unless you already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

Wilson

"Gregory (Grisha) Trubetskoy" wrote:

> Victor -
>
> Rather than invent ways to deal with legacy CGI code, I would bite the
> bullet and rewrite the code without the use of "print". There are too many
> subtle gotchas with simulating CGI...
>
> Grisha
>
> On Sun, 8 Apr 2001, Victor Muslin wrote:
>
> >
> > Sorry for a long message, but this requires a bit of explanation. I
> > appreciate your patience in advance.
> >
> > I have a bunch of python legacy code that used to be part of a large
> > CGI-based system. This code simply used print statements to output HTML as
> > follows:
> >
> > def foo():
> >          print 'html1'
> >          print 'html2'
> >
> > Now I want to convert CGI to mod_python, but I would like to re-use the
> > legacy code with as little re-writing as possible (obviously the legacy
> > code is a lot lengthier and more complicated than the example above). I am
> > using the publisher module, which requires my code to return a string
> > containing all of the HTML. So I thought I would be clever and do something
> > like this:
> >
> > import sys, cStringIO
> > def handler(req):
> >          out =  sys.stdout = StringIO()
> >          foo()
> >          return out
> >
> > This works great as long as the second request does not arrive before the
> > first one is done. Otherwise, the output gets screwed up. Since "out" is a
> > local variable, each request has its own instance, but sys.stdout is a
> > global. When the second request arrives, sys.stdout gets reassigned and the
> > rest of the output produced by print statements in the foo() function goes
> > to the new StringIO object. For example, if the second request arrives and
> > gets executed between the two print statements of the first request, then
> > the first request's output could be  'html1\n' and the second request's
> > output could be 'html2\nhtml1\nhtml2\n'.
> >
> > Has anyone dealt with such a situation? Any clever suggestion would be
> > appreciated as I hate to have to go into all the legacy code and change it
> > to something like this:
> >
> > def foo():
> >          out = 'html1\n'
> >          out = out + 'html2\n'
> >          return out
> >
> > def handler(req):
> >          return foo()
> >
> > Thanks in advance.
> > __________________________________________________________________________________
> > Victor Muslin      The power of accurate observation is frequently called
> >                           cynicism by those who don't have it.
> >                                        - George Bernard Shaw
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From victor at prodigy.net  Fri Apr 13 02:35:02 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] CGI to mod_python -- what's the best way?
In-Reply-To: <3AD4F453.CE85A3AD@zeta.org.au>
References: <Pine.BSF.4.32.0104082117100.68077-100000@localhost>
Message-ID: <4.3.2.7.0.20010413023353.00c188c0@pop.prodigy.net>

At 10:18 AM 4/12/2001 +1000, you wrote:
Wouldn't it be better just to buffer the output and then just use one 
output to send
the entire buffer ? Isn't that what Grisha was suggesting in the first place ?

yes, this is what he is suggesting and exactly what I was trying to avoid 
in the first place. Also, while not being a CGI/Web guru, I can imagine a 
number of potential problems with having to buffer all of the output before 
sending it to the browser. First of all the output may be large and it may 
not be practical to assemble it in memory. Second it may be useful to allow 
browser to start rendering some output before it is completely created if 
it takes a long time to create dynamic output. Third, if the browser 
cancelled the request the only way to find out is to try to send the reply 
and get some sort of bad status. Imagine a script that does a set of 
time-consuming database queries to create the output. it would be useful to 
test whether the request was cancelled after each query by attempting to 
send something back (a space character perhaps) to see whether the socket 
is still open before doing the rest of the queries. Perhaps somebody could 
suggest how these scenarios could be handled with mod_python?

I don't understand the problem with redirecting stdout. My understanding of 
Mod-Python
is that it just keeps the intertpreter running so it reduces start up time. I
understood that each CGI session is still, as always, a separate session 
that fires up
it's own instance of the code. Is this not true ?

I am using the "publisher" capability of mod_python. This is how I imagine 
it works (not having had the time to go through the code). There is a 
function -- call it handler() -- that handles requests. Let's say there are 
two identical concurrent requests. Both are handled by the same instance of 
Python interpeter that calls handler() for each one. All variables 
instantiated inside the handler() function are local to the function and, 
therefore, each request has its own instance of these variables. Variables 
that are module level (of the module where the handler() function is) of 
class-level are global, i.e. there is one instance of them in the 
interpreter and, therefore, they are shared by the requests. If this 
weren't the case you couldn't open a database connection once, for example, 
and keep it open instead of re-opening it for each request. sys.stdout 
happens to be a global variable and, therefore, shared by multiple 
instances of handler() and consequently by the requests. If code in one 
request reassigns it, the code in the other concurrent requests is affected.

Secondly the idea of just rewriting something that works doesn't seem to be 
a good idea
to me. I would say rewrite if you're finding you are doing a lot of 
mainatainence on
existing code however if the code works well and has been tested, deployed 
etc, it
would be better to interfere with it as little as possible unless you 
already know that
current requirements will make a rewrite inevitable at some stage in the future
(obviously I'm not just talking about a few lines of python here ).

I think you are making my point here. I did not want to re-write anything.


Wilson

"Gregory (Grisha) Trubetskoy" wrote:

 > Victor -
 >
 > Rather than invent ways to deal with legacy CGI code, I would bite the
 > bullet and rewrite the code without the use of "print". There are too many
 > subtle gotchas with simulating CGI...
 >
 > Grisha
 >
 > On Sun, 8 Apr 2001, Victor Muslin wrote:
 >
 > >
 > > Sorry for a long message, but this requires a bit of explanation. I
 > > appreciate your patience in advance.
 > >
 > > I have a bunch of python legacy code that used to be part of a large
 > > CGI-based system. This code simply used print statements to output HTML as
 > > follows:
 > >
 > > def foo():
 > > print 'html1'
 > > print 'html2'
 > >
 > > Now I want to convert CGI to mod_python, but I would like to re-use the
 > > legacy code with as little re-writing as possible (obviously the legacy
 > > code is a lot lengthier and more complicated than the example above). I am
 > > using the publisher module, which requires my code to return a string
 > > containing all of the HTML. So I thought I would be clever and do 
something
 > > like this:
 > >
 > > import sys, cStringIO
 > > def handler(req):
 > > out = sys.stdout = StringIO()
 > > foo()
 > > return out
 > >
 > > This works great as long as the second request does not arrive before the
 > > first one is done. Otherwise, the output gets screwed up. Since "out" is a
 > > local variable, each request has its own instance, but sys.stdout is a
 > > global. When the second request arrives, sys.stdout gets reassigned 
and the
 > > rest of the output produced by print statements in the foo() function goes
 > > to the new StringIO object. For example, if the second request arrives and
 > > gets executed between the two print statements of the first request, then
 > > the first request's output could be 'html1\n' and the second request's
 > > output could be 'html2\nhtml1\nhtml2\n'.
 > >
 > > Has anyone dealt with such a situation? Any clever suggestion would be
 > > appreciated as I hate to have to go into all the legacy code and change it
 > > to something like this:
 > >
 > > def foo():
 > > out = 'html1\n'
 > > out = out + 'html2\n'
 > > return out
 > >
 > > def handler(req):
 > > return foo()
 > >
 > > Thanks in advance.
 > >
__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010413/96c1a4d3/attachment-0003.htm
From nineclue at bigfoot.com  Sat Apr 14 11:07:12 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable?
Message-ID: <Pine.LNX.4.10.10104141052440.2413-100000@mrham.hamslab.com>

Greetings...

I'm trying to implement custom session handler like PHP.
I think persistent variables that share between subinterpreters would
be nice to hold session variables.
When I tried, I think persistent variables are not shared to
subinterpreter.

Sorry for my poor English... And thanks in advance for any comment or
answer.

Suhku Huh

Followings are my custom handler.

from mod_python import apache
from base64 import decodestring, encodestring
from cPickle import loads, dumps
import pg

PG_DB = 'pyweb'
_SESSION_PATH = ( '/cluelabs', )
_MODPYTHONID = 'MODPYTHONID'

session_data = {}

class session_var:
	def __init__(self, con, id = None):
		self.con = con
		if id:
			self.new = 0
			r = self.con.query("select val from session where sess_id = '%s'" % id)
			if not r.ntuples():
				self.data = {}
			else:
				val = r.getresult()[0][0]
				self.data = loads(decodestring(val))
		else:
			import md5, time

			self.new = 1
			id =  md5.new(str(time.time())).hexdigest()
			self.data = {}
		self.id = id
	def __del__(self):
		if len(self.data) == 0:
			return
		self.save()
	def __getitem__(self, name):
		if self.data.has_key(name):
			return self.data[name]
		else:
			return None
	def __setitem__(self, name, value):
		self.data[name] = value
	def __delitem__(self, name):
		try:
			del self.name[name]
		except:
			pass
	def __len__(self):
		return len(self.data)
	def has_key(self, name):
		return self.data.has_key(name)
	def save(self):
		if self.new:
			self.con.query("insert into session values ('%s', '%s')" % (self.id, encodestring(dumps(self.data))))
		else:
			self.con.query("update session set val = '%s', create_time = current_timestamp where sess_id = '%s'" % (encodestring(dumps(self.data)), self.id))
		
def _get_cookie(req):
	if req.headers_in.has_key('Cookie'):
		ret = {}
		cookies = req.headers_in['Cookie'].split(';')
		for cookie in cookies:
			equal_pos = cookie.index('=')
			key, value = cookie[:equal_pos], cookie[equal_pos+1:]
			ret[key.strip()] = value.strip()
		return ret
	else:
		return None

def _start_session(req, con):
	global session_data

	py_log = open('/home/nineclue/py_log', 'a')
	py_log.write('Session_data length : %d\n' % len(session_data))
	py_log.close()
	if req.cookie and req.cookie.has_key(_MODPYTHONID):
		req.session_var = session_data[req.cookie[_MODPYTHONID]]
	else:
		req.session_var = session_var(con)
		req.headers_out.add('Set-Cookie', '%s = %s' % (_MODPYTHONID, req.session_var.id))
		req.send_http_header()
		session_data[req.session_var.id] = req.session_var

def _get_con():
	global pg_con

	try:
		con = pg_con
	except NameError:
		pg_con = pg.connect(PG_DB)
		con = pg_con
	
	return con

def handler(req):
	global session_data

	if req.cookie:
		for key in req.cookie.keys():
			req.write('Cookie (%s) : (%s)<BR>' % (key, req.cookie[key]))
	req.write('Session Variable has %d items' % len(session_data))
	if req.session_var.has_key('count'):
		req.session_var['count'] = req.session_var['count'] + 1
	else:
		req.session_var['count'] = 0
	req.write('Counter : %02d' % req.session_var['count'])
	return apache.OK

def headerparserhandler(req):
	name_split = req.uri.rfind('/')
	req.path, req.pname = req.uri[:name_split], req.uri[name_split + 1:]

	req.cookie = _get_cookie(req)
	if req.path in _SESSION_PATH:
		con = _get_con()
		_start_session(req, con)

	return apache.OK

When I try, counters are correctly increased at first time but Key error
is raised after and py_log (used at _start_session function) shows length
of session_data is 0.

I'm using Apache 1.3.19 with statistically compiled mod_python 2.7.2
Python/2.0 (thread enabled) in Mandrake 7.1.
 


From nineclue at bigfoot.com  Tue Apr 17 16:32:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>

Greetings...

I've posted somewhat long python program during development, which
may need pg module, postgres running with pyweb db created etc...

Here's short version, which don't work as I expected.

from mod_python import apache

session_data = {}
session_counter = 0

def handler(req):
        global session_data, session_counter

        if session_data.has_key('counter'):
                session_data['count'] = session_data['count'] + 1
        else:
                session_data['count'] = 0

        session_counter += 1
        req.write('<HTML>')
        req.write('Session data has %d items<BR>' % len(session_data))
        req.write('Counter : %02d<BR>' % session_data['count'])
        req.write('Alternative Counter : %02d<BR>' % session_counter)
        req.write('</HTML>')
        return apache.OK

When I loaded the page and tried several reloads, session_data dictionary
variable is never increased and session_counter variable is increased
after several tries. What I expected was both variable increase at each
reload.

In my thoughts, dictionary variable is not supported and main interpreter
is created in each Apache processes, which is shared by subinterpreters.

Sorry for posting again, long message and my poor English.

Thanks in advance.


From victor at prodigy.net  Tue Apr 17 08:25:04 2001
From: victor at prodigy.net (Victor Muslin)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com
 >
Message-ID: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>

I don't see where you are creating a dictionary entry with a key 'counter'. 
Therefore, the statement in the else clause:

         session_data['count'] = 0

will always be executed. Perhaps you want to say:

          if session_data.has_key('count'):

At 04:32 PM 4/17/01 +0900, nineclue@bigfoot.com wrote:
>Greetings...
>
>I've posted somewhat long python program during development, which
>may need pg module, postgres running with pyweb db created etc...
>
>Here's short version, which don't work as I expected.
>
>from mod_python import apache
>
>session_data = {}
>session_counter = 0
>
>def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
>When I loaded the page and tried several reloads, session_data dictionary
>variable is never increased and session_counter variable is increased
>after several tries. What I expected was both variable increase at each
>reload.
>
>In my thoughts, dictionary variable is not supported and main interpreter
>is created in each Apache processes, which is shared by subinterpreters.
>
>Sorry for posting again, long message and my poor English.
>
>Thanks in advance.
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://www.modpython.org/mailman/listinfo/mod_python

__________________________________________________________________________________
Victor Muslin      The power of accurate observation is frequently called
                          cynicism by those who don't have it.
                                       - George Bernard Shaw
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20010417/01836390/attachment-0003.htm
From nineclue at bigfoot.com  Tue Apr 17 21:52:54 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <4.3.2.7.0.20010417082213.00babce0@pop.prodigy.net>
Message-ID: <Pine.LNX.4.10.10104172142090.7770-100000@mrham.hamslab.com>

You're right. :)

I had the obsession that dictionary is not correctly handled in
mod_python. So, I didn't even looked at the source second time.
Sorry about that.

I found that dictionary variable is handled by mod_python same as simple
variable. But it's still increased after several retries.
My apache configuration of StartServers and MinSpareServers are 
5. Main interpreter per apache process, right? Or I'm still confused or
under the delusion.


From grisha at modpython.org  Tue Apr 17 10:00:47 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104171622280.7366-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>

I think you have a bug because you have "count" and "counter", so it may
not work for this reason alone.

But also - if this is on UNIX, then you have to keep in mind that Apache
runs as several independent processes, and you can only have persistance
per-process. There is no "simple" way to have cross-process persistance.

On Win32, where Apache runs as a single process, it should work OK.

Grisha

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> Greetings...
>
> I've posted somewhat long python program during development, which
> may need pg module, postgres running with pyweb db created etc...
>
> Here's short version, which don't work as I expected.
>
> from mod_python import apache
>
> session_data = {}
> session_counter = 0
>
> def handler(req):
>         global session_data, session_counter
>
>         if session_data.has_key('counter'):
>                 session_data['count'] = session_data['count'] + 1
>         else:
>                 session_data['count'] = 0
>
>         session_counter += 1
>         req.write('<HTML>')
>         req.write('Session data has %d items<BR>' % len(session_data))
>         req.write('Counter : %02d<BR>' % session_data['count'])
>         req.write('Alternative Counter : %02d<BR>' % session_counter)
>         req.write('</HTML>')
>         return apache.OK
>
> When I loaded the page and tried several reloads, session_data dictionary
> variable is never increased and session_counter variable is increased
> after several tries. What I expected was both variable increase at each
> reload.
>
> In my thoughts, dictionary variable is not supported and main interpreter
> is created in each Apache processes, which is shared by subinterpreters.
>
> Sorry for posting again, long message and my poor English.
>
> Thanks in advance.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From nineclue at bigfoot.com  Tue Apr 17 23:34:02 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104170957580.75906-100000@localhost>
Message-ID: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>

Thank you for the point.

I have other questions. 

I'm trying to implement session like mechanism using mod_python. If
interpreter is created in each processes, is there a way to make a
variable really persistent? I think I should make some daemon that
connects thru named pipe to get/pass session information. Is there
any other way?

Second, in my first posting, I've created some ugly class that is attached
to Request object. I thought after handling of client's request, the
request object would be deleted. Am I right? Then what happens to the
attached class instance? If it is destructed with req object, I can save
session data in __del__ function. If not, should I hook cleanup phase to
save session data?

Lastly, I can't get mailing list's whole raw archive link. I just got 404
error.

I think I've already posted enough mails to the list. I AM really sorry.



From grisha at modpython.org  Tue Apr 17 10:50:07 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <Pine.BSF.4.32.0104171048001.76504-100000@localhost>

On Tue, 17 Apr 2001 nineclue@bigfoot.com wrote:

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

Yes, it's called cookies.

> Second, in my first posting, I've created some ugly class that is attached
> to Request object. I thought after handling of client's request, the
> request object would be deleted. Am I right? Then what happens to the
> attached class instance? If it is destructed with req object, I can save
> session data in __del__ function. If not, should I hook cleanup phase to
> save session data?

__del__ is not something you should rely on. You should register a cleanup
instead.

Grisha


From gdamjan at mail.net.mk  Wed Apr 18 00:55:47 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>; from nineclue@bigfoot.com on Tue, Apr 17, 2001 at 11:34:02PM +0900
References: <Pine.BSF.4.32.0104170957580.75906-100000@localhost> <Pine.LNX.4.10.10104172313400.8102-100000@mrham.hamslab.com>
Message-ID: <20010418005547.A237@local.izmislen.mk>

> I'm trying to implement session like mechanism using mod_python. If
> interpreter is created in each processes, is there a way to make a
> variable really persistent? I think I should make some daemon that
> connects thru named pipe to get/pass session information. Is there
> any other way?

I've been thinking about session managment for mod_python too, and it seems
like an important issue. I'd sugest we develop a common interface to session
managment, and then write specific modules that handle the job, by ways of
cookies, databases, special daemons etc...

Any ideas?

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From nineclue at bigfoot.com  Wed Apr 18 09:58:57 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.LNX.4.10.10104180948390.8965-100000@mrham.hamslab.com>


On Wed, 18 Apr 2001, Damjan wrote:

> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...

In my opinion, best way would be using shared memory if possible. I'm not
good at Apache & python, but I found that mod_auth_digest in Apache 2.0
supports session caching accross processes using shared memory (New
Features in Apache 2.0 page). 

A general dictionary variable per main interpreter. So handler can
register it's own variable within dictionary variable with a key, that
could be used in session handling, caching small tables (DBMS data)...


From grisha at modpython.org  Tue Apr 17 23:24:45 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <20010418005547.A237@local.izmislen.mk>
Message-ID: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>

In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it seems
> like an important issue. I'd sugest we develop a common interface to session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ???????????? ??????????????????????
> Skopje, Macedonia		|           ????????????, ????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From benno at sesgroup.net  Wed Apr 18 13:58:15 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
In-Reply-To: <Pine.BSF.4.32.0104172311590.82748-100000@localhost>; from grisha@modpython.org on Tue, Apr 17, 2001 at 11:24:45PM -0400
References: <20010418005547.A237@local.izmislen.mk> <Pine.BSF.4.32.0104172311590.82748-100000@localhost>
Message-ID: <20010418135815.A27089@sesgroup.net>

On Tue, 17 Apr 2001, Gregory (Grisha) Trubetskoy wrote:

> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.

<snip>

As someone who has used mod_python for a rather large project i have to 
agree with Grisha here. I don't want want all the state stuff in there on
project where I don't need it. mod_python gives me a platform where I can
people those things on top as I need them.

Also I don't think that you really need shared memory for session etc
since you can usually store that to a database, which gives you other
advantages. A decent database impl. should be fast enough to cope with
that kinda thing.

My 2c worth,

Benno

> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it seems
> > like an important issue. I'd sugest we develop a common interface to session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ???????????? ??????????????????????
> > Skopje, Macedonia		|           ????????????, ????????????????????
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From CHagner at fool.com  Wed Apr 18 00:40:29 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>

On the issue of supporting modules (i.e. user sessions), there are simply
too many ways to implement something like that to make it worth coupling it
to mod_python.  You'll either try to be too much for too many people (the
classic framework error) or you'll be so custom to your needs that your
audience is just you (not a bad thing, just not a place for a solution like
mod_python).

I completely agree with Grisha that even the handler is outside of the core
mod_python functionality.  That being said, a listing of available handlers
on the web site would be very useful for those starting/considering using
mod_python.  I do think that having this area up there (even it's a bit
spares initially) will motivate others to share their handlers/frameworks
that are used with mod_python.

What other handlers have people written?  I've got one that implements a
servlet-like call mechanism (thereby avoiding the urls being mapped to
script files).  It's not for everyone, but a perfect example of a decision
that was made for a specific need.

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Tuesday, April 17, 2001 11:25 PM
To: Damjan
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...



In my (humble) opinion, things like this are outside the scope of
mod_python, since the goal of mod_python is apache/python integration -
not building web application frameworks. In other words, mod_python is
something that makes Apache internals available in Python to give the
developer more power and speed, it's not something to make web application
development necessarily easier.

There are a few of application frameworks out there that support
mod_python - webware is one of them. I don't know much about those things,
but I think they have features like state keeping, etc.

(To that extent, even the mod_python.publisher handler is outside the
scope of mod_python, but I am willing to pursue it since it is immediately
usable, it serves as good test for advanced mod_python capabilities and
it's a pretty a good mod_python example program.)

Ultimately, there should be an area on the website that lists mod_python
modules that do various things that aren't part of mod_python
distribution. Right now there aren't enough of them out there to justify
it, but eventually there will be I'm sure.

So if you develop something that serves a particular need, please post it
to the list, and eventually we will have a collection of mod_python
modules/examples/whatever that people can use.

Grisha

On Wed, 18 Apr 2001, Damjan wrote:

> > I'm trying to implement session like mechanism using mod_python. If
> > interpreter is created in each processes, is there a way to make a
> > variable really persistent? I think I should make some daemon that
> > connects thru named pipe to get/pass session information. Is there
> > any other way?
>
> I've been thinking about session managment for mod_python too, and it
seems
> like an important issue. I'd sugest we develop a common interface to
session
> managment, and then write specific modules that handle the job, by ways of
> cookies, databases, special daemons etc...
>
> Any ideas?
>
> --
> Damjan Georgievski		|           ????????????
??????????????????????
> Skopje, Macedonia		|           ????????????,
????????????????????
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From woodm at equire.com  Wed Apr 18 00:10:12 2001
From: woodm at equire.com (Matthew D. Wood)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
References: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <3ADD2FC3.4109069D@equire.com>

I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has some
sort of shared memory, then obviously, this is a potential place.  Other places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the goal
of mod_python is to give access, through a python interface, to the internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.  If
you want a more general thing, either remove some code, or at worst, you have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From nineclue at bigfoot.com  Wed Apr 18 16:26:10 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again.
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47C95@rover.foolhq.com>
Message-ID: <Pine.LNX.4.10.10104181615250.9552-100000@mrham.hamslab.com>

mod_python don't have to come with custom module, but if Apache 2.0
supports shared memory (don't know about 1.3.X) it would be nice to see
that feature available to mod_python. It's not related to custom module.
But at least we can make somewhat modified persistent variable in UNIX
systems and make our custom module or ... I think this is related to
mod_python.

On Wed, 18 Apr 2001, Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution like
> mod_python).
> 
> I completely agree with Grisha that even the handler is outside of the core
> mod_python functionality.  That being said, a listing of available handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
> 
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
> 
> Chris
> 
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
> 
> 
> 
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
> 
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
> 
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
> 
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
> 
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
> 
> Grisha
> 
> On Wed, 18 Apr 2001, Damjan wrote:
> 
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski		|           ÐÐÐ¼ÑÐÐ½
> ÐÐÐ¾ÑÐ³Ð¸ÐÐÑÐÐ¸
> > Skopje, Macedonia		|           ÐÐÐ¾Ð¿ÑÐ,
> ÐÐÐÐÐÐ¾Ð½Ð¸ÑÐ
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From CHagner at fool.com  Wed Apr 18 10:19:58 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] Persistent variable again...
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47C9B@rover.foolhq.com>

I think we're actually in agreement here...

My point was not that the handler is the wrong place for these types of
things, only that the handler is not a core part of the mod_python package.
Having just tackled a new handler and framework, I too would love to see
some more visible framework solutions for mod_python.  That being said, one
of the best things about mod_python is that it isn't really a web app
framework.  It's a barebones implementation that requires some sort of
framework (a handler or more) for an actual app to be developed.

Similarly, I don't think a session handler is 'bad', just that making it a
part of the mod_python package weighs down the implementation (for those
that don't want/use it).  One of the reasons open source development works
so well is that the software is _highly_ componentized, thereby allowing
grisha to focus on his part and whoever to focus on something like a session
handler on top of mod_python (but not as a part of it).

I think we all see value in having the functionality available, and it
appears there's just a disagreement on how it should be made available (in
relation to mod_python).

Just my thoughts.  Take 'em or leave 'em.

Chris

-----Original Message-----
From: Matthew D. Wood [mailto:woodm@equire.com]
Sent: Wednesday, April 18, 2001 2:10 AM
To: mod_python@modpython.org
Subject: Re: [mod_python] Persistent variable again...


I have to disagree.  I think that mod-python (and mod_snake) handlers are
perfect places to put session handlers.  To me, the mod_python framework is
somewhat equivelent to the PHP module only more flexable.  PHP implemented
sessions, and there is no reason why mod_python should be innapropriate for
the
task.  It may be a bit difficult, but not impossible.  If Apache 2.0 has
some
sort of shared memory, then obviously, this is a potential place.  Other
places
certainly include cookies and databases.  The clear advantage of the shared
memory scenario is speed.  This is definitely the case for a
session.data_base_connection variable.  You would have to access the data
base
way to many times just to do a simple query.  I hate having to recreate
database connections every page, and I don't like leaving one open all the
time.  I would much prefer to open it once for each user, then close it when
things time out.

I guess I don't understand why a session handler would be so bad.  If the
goal
of mod_python is to give access, through a python interface, to the
internals
of apache in order to create pages or other environments, why can't we just
treat sessions as a feature, or object that we create in a handler?

I'm not suggesting that mod_python should come packaged with session
capabilities built in.  NO WAY!  What I am saying is that a session handler,
that somebody develops and posts on the mod_python page, could be available
and
tremendously usefull.  I know that mod_snake comes packaged with 3 or 4
"typical" handlers that you can choose to use, or not.  One is a python-cgi
accelerator, one is an embedded python handler; why would a session handler
not
be appropriate?  Then, the users could have a base session handler that they
could modify as they see fit.  If they want a more specific thing, specify.
If
you want a more general thing, either remove some code, or at worst, you
have
an example to work with.

Just my opinions.






Chris Hagner wrote:

> On the issue of supporting modules (i.e. user sessions), there are simply
> too many ways to implement something like that to make it worth coupling
it
> to mod_python.  You'll either try to be too much for too many people (the
> classic framework error) or you'll be so custom to your needs that your
> audience is just you (not a bad thing, just not a place for a solution
like
> mod_python).
>
> I completely agree with Grisha that even the handler is outside of the
core
> mod_python functionality.  That being said, a listing of available
handlers
> on the web site would be very useful for those starting/considering using
> mod_python.  I do think that having this area up there (even it's a bit
> spares initially) will motivate others to share their handlers/frameworks
> that are used with mod_python.
>
> What other handlers have people written?  I've got one that implements a
> servlet-like call mechanism (thereby avoiding the urls being mapped to
> script files).  It's not for everyone, but a perfect example of a decision
> that was made for a specific need.
>
> Chris
>
> -----Original Message-----
> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> Sent: Tuesday, April 17, 2001 11:25 PM
> To: Damjan
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] Persistent variable again...
>
> In my (humble) opinion, things like this are outside the scope of
> mod_python, since the goal of mod_python is apache/python integration -
> not building web application frameworks. In other words, mod_python is
> something that makes Apache internals available in Python to give the
> developer more power and speed, it's not something to make web application
> development necessarily easier.
>
> There are a few of application frameworks out there that support
> mod_python - webware is one of them. I don't know much about those things,
> but I think they have features like state keeping, etc.
>
> (To that extent, even the mod_python.publisher handler is outside the
> scope of mod_python, but I am willing to pursue it since it is immediately
> usable, it serves as good test for advanced mod_python capabilities and
> it's a pretty a good mod_python example program.)
>
> Ultimately, there should be an area on the website that lists mod_python
> modules that do various things that aren't part of mod_python
> distribution. Right now there aren't enough of them out there to justify
> it, but eventually there will be I'm sure.
>
> So if you develop something that serves a particular need, please post it
> to the list, and eventually we will have a collection of mod_python
> modules/examples/whatever that people can use.
>
> Grisha
>
> On Wed, 18 Apr 2001, Damjan wrote:
>
> > > I'm trying to implement session like mechanism using mod_python. If
> > > interpreter is created in each processes, is there a way to make a
> > > variable really persistent? I think I should make some daemon that
> > > connects thru named pipe to get/pass session information. Is there
> > > any other way?
> >
> > I've been thinking about session managment for mod_python too, and it
> seems
> > like an important issue. I'd sugest we develop a common interface to
> session
> > managment, and then write specific modules that handle the job, by ways
of
> > cookies, databases, special daemons etc...
> >
> > Any ideas?
> >
> > --
> > Damjan Georgievski            |           ???????~????
> ??????????????????????
> > Skopje, Macedonia             |           ?????????~??,
> ?????????????????~??
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://www.modpython.org/mailman/listinfo/mod_python

From richard at ccpgames.com  Wed Apr 18 16:50:36 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>

I am currently working on session management for my project.  One thing
I can't
seem to do for the life of me is to clear out a cookie on the browser
thats
connecting to the site.

    r.headers_out["set-cookie:"] = \
        "IRWB_SESSIONID=%s;" \
	  "Expires: %s;" \
        "Cache-control: no-cache;" \
        "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)

Is what I use to try and expire a cookie immediately, it may be
overkill, but
still, it doesn't work as I wish.  However, it does work if I close the
browser
and reopen it to the given site.

Am I doing something wrong?  I am pretty sure I could clear out cookies
this
way in Visual Interdev/VB/ASP.

Thanks in advance,
Richard.

From slim at maya.com  Wed Apr 18 13:28:26 2001
From: slim at maya.com (Seung Chan Lim)
Date: Fri Jan  9 22:02:41 2004
Subject: [mod_python] cookies/session management
References: <FC15F916EC764C42A4219BC30BFBC0721112C5@control.central.ccp.cc>
Message-ID: <034101c0c82c$f9ebcbb0$befe46c0@airwolf>

>     r.headers_out["set-cookie:"] = \
>         "IRWB_SESSIONID=%s;" \
>   "Expires: %s;" \
>         "Cache-control: no-cache;" \
>         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
>

without knowing anything about mod_python, have you tried
setting the expires section to be

Thu, 01-Jan-70 00:00:01 GMT

? (i.e. in GMT format )

what do you mean by "it works if [you] close the browser and reopen it to
the given site." ?
you mean the cookie value lingers around in a given session ? are you
checking to
see if this cookie exist on the server side code or via client-side code
like javascript or something?

I'm just grabbing stuff out of thin-air here. =)

slim






From richard at ccpgames.com  Wed Apr 18 17:45:08 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>

> -----Original Message-----
> From: Seung Chan Lim [mailto:slim@maya.com]
> Sent: 18. apr?l 2001 17:28
> To: Mod_python@modpython.org
> Subject: Re: [mod_python] cookies/session management
> 
> 
> >     r.headers_out["set-cookie:"] = \
> >         "IRWB_SESSIONID=%s;" \
> >   "Expires: %s;" \
> >         "Cache-control: no-cache;" \
> >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> >
> 
> without knowing anything about mod_python, have you tried
> setting the expires section to be
> 
> Thu, 01-Jan-70 00:00:01 GMT

Now I have :)  Oops.  Unfortunately no change in behaviour.

> what do you mean by "it works if [you] close the browser and 
> reopen it to
> the given site." ?
> you mean the cookie value lingers around in a given session ?

Yes.
If I set an expiry date in the future, the cookie lingers past browser
open and closes as would be expected.
If I set something (including the expiry thing above) that indicates
that the cookie should be expunged then:
  - If I reload the page, the cookie is still there.
  - If I close and reopen the browser, the cookie is no longer there.

> are you
> checking to
> see if this cookie exist on the server side code or via 
> client-side code
> like javascript or something?

Server side code:
  if r.headers_in.has_key('Cookie'):
    c = r.headers_in['Cookie']

Richard.

From richard at ccpgames.com  Wed Apr 18 17:49:33 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] cookies/session management
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112C7@control.central.ccp.cc>

> Why don't you set          "IRWB_SESSIONID=%s;" to some 
> "Expire" value. At scriptfoundry session ids are the ids to a 
> session object. When this expires we flag the object to be expired. 

Isn't that what I am doing with:
    r.headers_out["set-cookie:"] =
      "IRWB_SESSIONID=%s;"
      "Expires: Thu, 01-Jan-70 00:00:01 GMT;"
      "Cache-control: no-cache;"
      "Max-Age=0" % sessionID
?

Unfortunately, the core problem is that if they get a new session
cookie with the old one marked as expired, they build up a range of
cookies in the headers (at least until the browser gets closed I
guess).

> thanos
> PS: We have a modpython handler that adds a session object to req.

Can you elaborate on this?  It sounds interesting and relevant but
when it comes down to it, I have no idea what you mean :)

Thanks,
Richard.

From richard at ccpgames.com  Wed Apr 18 22:10:53 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>

OK, next problem :)

My handler module imports my session handling module.
However, after a given amount of time, the session module is garbage
collected.  Either that or it is my handler module that is being
garbage collected and the session module then in turn (seems more
likely).

My question is, is there any way I can keep them both in memory?

Richard.

From gdamjan at mail.net.mk  Thu Apr 19 00:47:35 2001
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] cookies/session management
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>; from richard@ccpgames.com on Wed, Apr 18, 2001 at 05:45:08PM -0000
References: <FC15F916EC764C42A4219BC30BFBC0721112C6@control.central.ccp.cc>
Message-ID: <20010419004735.A857@local.izmislen.mk>

> > >     r.headers_out["set-cookie:"] = \
> > >         "IRWB_SESSIONID=%s;" \
> > >   "Expires: %s;" \
> > >         "Cache-control: no-cache;" \
> > >         "Max-Age=0" % (sessionID, time.time() - TIME_YEAR)
> > >
> > 
> > the given site." ?
> > you mean the cookie value lingers around in a given session ?
> 
> Yes.
> If I set an expiry date in the future, the cookie lingers past browser
> open and closes as would be expected.
> If I set something (including the expiry thing above) that indicates
> that the cookie should be expunged then:
>   - If I reload the page, the cookie is still there.
>   - If I close and reopen the browser, the cookie is no longer there.

Maybe it's a bug in the browser?? 
Anyway, try adding "path=/;" to the cookie and see what happens.

-- 
Damjan Georgievski		|           ?????? ???????????
Skopje, Macedonia		|           ??????, ??????????

From grisha at modpython.org  Wed Apr 18 23:33:58 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] garbage collection problems
In-Reply-To: <FC15F916EC764C42A4219BC30BFBC072077093@control.central.ccp.cc>
Message-ID: <Pine.BSF.4.32.0104182332110.6507-100000@localhost>

I've never seen Python garbage-collect something that still has a
reference to it - that functionality is rock solid

more likely your apache process dies/recycles itself.

Grisha

On Wed, 18 Apr 2001, Richard wrote:

> OK, next problem :)
>
> My handler module imports my session handling module.
> However, after a given amount of time, the session module is garbage
> collected.  Either that or it is my handler module that is being
> garbage collected and the session module then in turn (seems more
> likely).
>
> My question is, is there any way I can keep them both in memory?
>
> Richard.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From richard at ccpgames.com  Thu Apr 19 10:38:19 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] garbage collection problems
Message-ID: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>

> From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
> 
> I've never seen Python garbage-collect something that still has a
> reference to it - that functionality is rock solid
> 
> more likely your apache process dies/recycles itself.

This does seem to be sort of what is happening - namely that apache
seems to keep running but kill the interpreter and start a new one.

Is this the way it is supposed to work?
Have I misconfigured something?
Is there anything I can do about this?

Thanks,
Richard.

From rsalz at zolera.com  Thu Apr 19 07:20:56 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] garbage collection problems
References: <FC15F916EC764C42A4219BC30BFBC0721112D2@control.central.ccp.cc>
Message-ID: <3ADECA18.EE84B888@zolera.com>

> This does seem to be sort of what is happening - namely that apache
> seems to keep running but kill the interpreter and start a new one.

Most likely the apache process is exiting and a new one starting.
Read about MaxChildRequests in the apache config docs.

From benno at sesgroup.net  Sat Apr 21 01:03:25 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] internal_redirect
Message-ID: <20010421010325.A21438@sesgroup.net>

Hi,

I was wondering if it was possible to do an internal redirect
with mod_python? Apache seems to have the ap_internal_redirect
function which takes a request pointer and an URI, which would map
to Request.internal_redirect(uri) in python.

Just wondering if this is meant to be there and I'm missing something,
or if there is another way to achieve this, or if there is a reason
it isn't implemented.

Cheers,

Benno

From grisha at modpython.org  Fri Apr 20 11:39:34 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] internal_redirect
In-Reply-To: <20010421010325.A21438@sesgroup.net>
Message-ID: <Pine.BSF.4.32.0104201137510.35720-100000@localhost>

it's not there now, it was one of the "would be nice to have" features,
but many people are asking me about it, so it does seem like a needed
feature

On Sat, 21 Apr 2001, Ben Leslie wrote:

> Hi,
>
> I was wondering if it was possible to do an internal redirect
> with mod_python? Apache seems to have the ap_internal_redirect
> function which takes a request pointer and an URI, which would map
> to Request.internal_redirect(uri) in python.
>
> Just wondering if this is meant to be there and I'm missing something,
> or if there is another way to achieve this, or if there is a reason
> it isn't implemented.
>
> Cheers,
>
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From bbhaydon at bigpond.com  Sat Apr 21 13:13:55 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
Message-ID: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>

The posts re: persistent variables highlight the
need for a site to promotes and encompasses solutions
developed with modpython as per Zend.

Does anyone have an idea for a name??
Perhaps it's worth persuing if only to get service
providers to include modpython along with modphp and
modperl as an offering.

For my own part, I've been using the modusertrack in
Apache to do cookie creation, and have a simple cache
class to store state. Although I haven't actually tried
it, I am considering using ZODB as a solution for 
storing state between interpreters.

regards,

brett

bbhaydon at bigpond dot com

From benno at sesgroup.net  Sat Apr 21 13:26:23 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>; from bbhaydon@bigpond.com on Sat, Apr 21, 2001 at 01:13:55PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com>
Message-ID: <20010421132623.A30371@sesgroup.net>

On Sat, 21 Apr 2001, Brett Haydon wrote:

> The posts re: persistent variables highlight the
> need for a site to promotes and encompasses solutions
> developed with modpython as per Zend.

I'm not sure exactly what you mean by zend here?

From deneb at unixwave.org  Sat Apr 21 12:41:01 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 01:26:23PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net>
Message-ID: <20010421124101.A442@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, Brett Haydon wrote:
> Whats wrong with a real database? I think you'll run into
> far fewer concurrency issues using a database vs. ZODB.
It will be nice to have a set of classes integrated in the mod_python,
which set will manage the DBMS as same as PHP has methods to interface
itself with MySQL. 
> Benno
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From benno at sesgroup.net  Sat Apr 21 21:27:35 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421124101.A442@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 12:41:01PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org>
Message-ID: <20010421212735.A30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > Whats wrong with a real database? I think you'll run into
> > far fewer concurrency issues using a database vs. ZODB.
> It will be nice to have a set of classes integrated in the mod_python,
> which set will manage the DBMS as same as PHP has methods to interface
> itself with MySQL. 


But python already has all this! I don't see any need to have 
special mod_python things when you have the entire python libraries
available.

Benno

From deneb at unixwave.org  Sat Apr 21 14:03:52 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421212735.A30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 09:27:35PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net>
Message-ID: <20010421140352.A625@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> 
> > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > Whats wrong with a real database? I think you'll run into
> > > far fewer concurrency issues using a database vs. ZODB.
> > It will be nice to have a set of classes integrated in the mod_python,
> > which set will manage the DBMS as same as PHP has methods to interface
> > itself with MySQL. 
> 
> 
> But python already has all this! I don't see any need to have 
> special mod_python things when you have the entire python libraries
> available.
Performance :) That's why.
 
> Benno

From rsalz at zolera.com  Sat Apr 21 08:16:39 2001
From: rsalz at zolera.com (Rich Salz)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <3AE17A27.A88F64AC@zolera.com>

> > But python already has all this! I don't see any need to have
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

WTF?

How will "import mysqldb" be any faster in mod_python than in other
python programs?

Please explain how you think you'll gain performance -- are you talking
about writing special C code with a python glue layer?  For
"authentication" only?

Yuk.
	/r$

From benno at sesgroup.net  Sat Apr 21 22:16:17 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421140352.A625@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 02:03:52PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org>
Message-ID: <20010421221617.B30802@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 09:27:35PM +1000, Ben Leslie wrote:
> > On Sat, 21 Apr 2001, deneb@unixwave.org wrote:
> > 
> > > On Sat, Apr 21, 2001 at 01:26:23PM +1000, Ben Leslie wrote:
> > > > On Sat, 21 Apr 2001, Brett Haydon wrote:
> > > > Whats wrong with a real database? I think you'll run into
> > > > far fewer concurrency issues using a database vs. ZODB.
> > > It will be nice to have a set of classes integrated in the mod_python,
> > > which set will manage the DBMS as same as PHP has methods to interface
> > > itself with MySQL. 
> > 
> > 
> > But python already has all this! I don't see any need to have 
> > special mod_python things when you have the entire python libraries
> > available.
> Performance :) That's why.

Explain how you can get better performance with some mythical mod_python
database module vs native python module? Personally I think any speedup 
woudl be very marginal and not worse the extreme cost of code duplication
etc.

Benno

From deneb at unixwave.org  Sat Apr 21 19:29:34 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <3AE17A27.A88F64AC@zolera.com>; from rsalz@zolera.com on Sat, Apr 21, 2001 at 08:16:39AM -0400
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <3AE17A27.A88F64AC@zolera.com>
Message-ID: <20010421192934.A1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 08:16:39AM -0400, Rich Salz wrote:
 
> Please explain how you think you'll gain performance -- are you talking
> about writing special C code with a python glue layer?  
Yes. 

From deneb at unixwave.org  Sat Apr 21 19:37:24 2001
From: deneb at unixwave.org (deneb@unixwave.org)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421221617.B30802@sesgroup.net>; from benno@sesgroup.net on Sat, Apr 21, 2001 at 10:16:17PM +1000
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net>
Message-ID: <20010421193724.B1540@lisa.unixwave.org>

On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> Explain how you can get better performance with some mythical mod_python
> database module vs native python module? Personally I think any speedup 
> woudl be very marginal and not worse the extreme cost of code duplication
> etc.

Writing for example the MySQLdb module inside mod_python ;-).
Simply in my projects I don't care about code duplication.
    

From benno at sesgroup.net  Sun Apr 22 09:58:04 2001
From: benno at sesgroup.net (Ben Leslie)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421193724.B1540@lisa.unixwave.org>; from deneb@unixwave.org on Sat, Apr 21, 2001 at 07:37:24PM +0200
References: <NCBBKMABOKFCDLPIKKGIOEOECCAA.bbhaydon@bigpond.com> <20010421132623.A30371@sesgroup.net> <20010421124101.A442@lisa.unixwave.org> <20010421212735.A30802@sesgroup.net> <20010421140352.A625@lisa.unixwave.org> <20010421221617.B30802@sesgroup.net> <20010421193724.B1540@lisa.unixwave.org>
Message-ID: <20010422095804.A11979@sesgroup.net>

On Sat, 21 Apr 2001, deneb@unixwave.org wrote:

> On Sat, Apr 21, 2001 at 10:16:17PM +1000, Ben Leslie wrote:
> > Explain how you can get better performance with some mythical mod_python
> > database module vs native python module? Personally I think any speedup 
> > woudl be very marginal and not worse the extreme cost of code duplication
> > etc.
> 
> Writing for example the MySQLdb module inside mod_python ;-).
> Simply in my projects I don't care about code duplication.

Well to be blunt I think that is pretty silly. You're yet to explain how
you would be able to achieve a speed up by having a module "inside" mod_python
versus putting "import MySQLdb" at the top of you handler. The handler is 
only started once so the extra milliseconds loading a module is irrelevant.

Next you'll be saying you want special regexp handling libraries and special
string handling libraries "inside" mod_python.

If mod_python ever does get a MySQLdb module inside it I will be the first
to fork the porject. (Not that I think Grisha would ever let it happen in
the first place).

Benno

From bbhaydon at bigpond.com  Mon Apr 23 14:47:02 2001
From: bbhaydon at bigpond.com (Brett Haydon)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <20010421132623.A30371@sesgroup.net>
Message-ID: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>

>>I'm not sure exactly what you mean by zend here?

Ok, maybe I was a little vague. Ignoring Zend the PHP
engine for a second, most of what Zend the site is about
is promoting peripheral code and applications that build
upon or are built using PHP.

The PHP site itself is narrowly focused on PHP the language
much like the modpython site is about modpython not 
modpython solutions.

I personally think modpython needs a community site to give
it a higher exposure. Modpython promotes a different style
of development from say PHP, asp, etc, which needs a change
of thinking to see it's advantages, and lots of example 
code.

>>Whats wrong with a real database? I think you'll run into
far fewer concurrency issues using a database vs. ZODB.

I confess to having no idea on this. ZODB seemed a simpler
way to store objects, but maybe some benchmarking will be
prudent first..

Brett


From grisha at modpython.org  Mon Apr 23 10:06:16 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] RE: PHP is to Zend as ModPython is to ???
In-Reply-To: <NCBBKMABOKFCDLPIKKGIEEOHCCAA.bbhaydon@bigpond.com>
Message-ID: <Pine.BSF.4.32.0104231003410.7351-100000@localhost>

I think it's an excellent idea.

But ideas are just that - ideas, until someone acts on them...

;-)

Grisha

On Mon, 23 Apr 2001, Brett Haydon wrote:

> I personally think modpython needs a community site to give
> it a higher exposure. Modpython promotes a different style
> of development from say PHP, asp, etc, which needs a change
> of thinking to see it's advantages, and lots of example
> code.


From marcf at becomm.com  Mon Apr 23 11:34:09 2001
From: marcf at becomm.com (=?UTF-8?B?TWFyYyBGaXVjenluc2tp?=)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] =?UTF-8?B?UHVibGlzaGVyIHByb2JsZW0u?=
Message-ID: <A9DFD9380C01D4118E740050DA7A89703862A6@becomm-mis2.becomm.com>

Hi, 

I am using mod_python 2.7.2 on a linux RH7.0 machine running apache 1.3.14
and using Python 2.0.  Both my apache.py and publisher.py modules have minor
patches (one to reload modules in apache.py properly, the other to treat
file objects correctly in publisher.py), but those patched regions of code
are not the ones that I am seeing trouble with nor do I think they are
involved with the problem I am having.  But who knows.  Bottom line, the
line numbers listed below for publisher.py and apache.py may not match up
directly with the same modules in a pristine 2.7.2 release.

Below is a trace of the problem that I am seeing.

Mod_python error: "PythonHandler mod_python.publisher"
Traceback (most recent call last):
  File "/hotbeads/local/lib/python2.0/site-packages/mod_python/apache.py",
line 189, in Dispatch
    result = object(self.req)

  File
"/hotbeads/local/lib/python2.0/site-packages/mod_python/publisher.py", line
171, in handler
    result = apply(object, (), args)
TypeError: not enough arguments; expected 2, got 1


The odd thing is that my code seems to be called correctly. My publisher
handler has two arguments (req and xmlfile) and it successfully processes
the xmlfile and returns a correct result followed by the above text.  So, it
seems that the type error is occurring _after_ the apply() has already done
its work.  I am fairly confused as to what is going on.  Can someone help me
out?

Thanks,
Marc

From CHagner at fool.com  Mon Apr 23 23:23:28 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>

Hey gang,

There's a utility called pydoc that's in the new python 2.1 release...
anyway, the author of it wrote a really snazzy error handling page for cgi
scripts (called cgitb)... check out the output and see if you find it
useful.

Here's a sample cgitb output page...
http://www.lfw.org/python/test4.html

Here's where you can get the module for it...
http://www.lfw.org/python/

Okay, except for the nasty colors, I'd love to see something closer to this
in the standard mod_python error handler(apache.py).  I guess the most
flexible way would be to have a PythonErrorModule directive and allow each
person to override the default error display with their own module (in this
case, the cgitb module).  The key is that this functionality would only
really be appropriate for a development environment...

Thoughts?

Chris

From grisha at modpython.org  Mon Apr 23 23:53:36 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] Fancy Shmancy Exception Output
In-Reply-To: <13CDDE6A53DBD311BC3200508B6F0C4805E47CFF@rover.foolhq.com>
Message-ID: <Pine.BSF.4.32.0104232351330.19725-100000@localhost>

I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From CHagner at fool.com  Tue Apr 24 09:41:38 2001
From: CHagner at fool.com (Chris Hagner)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] Fancy Shmancy Exception Output
Message-ID: <13CDDE6A53DBD311BC3200508B6F0C4805E47D00@rover.foolhq.com>

Yeah, the colors are pretty nasty... I'm thinking Yee (the author) is
color-blind...

FYI, cgitb does not have any 2.1 dependencies... I have it wired into my
handler and it works great (running 2.0).  As I said, this is less ideal,
since it should really be wired into apache.py so that the handler isn't
bothered with catching EVERY error...

I've gotten some pretty good feedback from our developers.  We're so used to
getting an error and then having to go to our tail of the error log (and
then to the code to see what line it is)... it's very nice to shorten that
cycle.

Here's the code snippet I used to integrate it (Prepare to be wowed...)

import cgitb

# Within the handler module's handler method...

    try:
        # all of the stuff that happens in my handler's primary method
    except:
       # NOTE: I use my own request object to wrap the apache-provided one, 
       # so these calls are not the standard apache API calls
       req.setContentType("text/html")
       req.sendHTTPHeader()
       # Calling the handle method of cgitb just prints the output of 
       # breaker() and html() to standard out.
       # Thus, I skip that and do it myself.
       errHtml = str(cgitb.breaker()) + str(cgitb.html())
       req.write(errHtml)

    return apache.OK

Grisha, I'm more than happy to make the mod to apache.py if you don't have
the time... All I'd need is a new directive that is accessible from within
mod_python.apahce.ReportError().  I don't think it would require any other
changes.  

Okay, thinking about it more, I'd add a parameter to ReportError called
error_handler (just like how the debug parameter is passed in)...

Thus, something like this would be added to mod_python.apache.Dispatch()

        config = _req.get_config()
        if config.has_key("PythonErrorHandler"):
            error_handler = config["PythonErrorHandler"]
        else:
            error_handler = None

and all ReportError() calls would have error_handler passed in...

        result = ReportError(etype, value, traceback, htype=htype,
hname=handler, debug=debug, error_handler=error_handler)

Then, ReportError would have something like this...

         if not debug:
                return HTTP_INTERNAL_SERVER_ERROR
         else:
                # write to client
                if error_handler:
                        req.content_type = 'text/html'
                        s = str(cgitb.breaker()) + str(cgitb.html())
                else:
                        req.content_type = 'text/plain'
                        s = '\nMod_python error: "%s %s"\n\n' % (htype,
hname)
                        for e in traceback.format_exception(etype, evalue,
etb):
                             s = s + e + '\n'

                req.send_http_header()
                req.write(s)

                return DONE

This code is a bit of a brain dump on my part, so don't even think that I've
run/tested it yet... :-)  Let me know if I'm missing something... 

Chris

-----Original Message-----
From: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Sent: Monday, April 23, 2001 11:54 PM
To: Chris Hagner
Cc: mod_python@modpython.org
Subject: Re: [mod_python] Fancy Shmancy Exception Output



I propose a new directive:

PythonPinkError On

seriosly speaking - this looks neat. I wonder if it has anything specific
to python 2.1 in it, since mod_python has to be compatible with 1.5.2 I
think, at least for a while...

On Mon, 23 Apr 2001, Chris Hagner wrote:

> Hey gang,
>
> There's a utility called pydoc that's in the new python 2.1 release...
> anyway, the author of it wrote a really snazzy error handling page for cgi
> scripts (called cgitb)... check out the output and see if you find it
> useful.
>
> Here's a sample cgitb output page...
> http://www.lfw.org/python/test4.html
>
> Here's where you can get the module for it...
> http://www.lfw.org/python/
>
> Okay, except for the nasty colors, I'd love to see something closer to
this
> in the standard mod_python error handler(apache.py).  I guess the most
> flexible way would be to have a PythonErrorModule directive and allow each
> person to override the default error display with their own module (in
this
> case, the cgitb module).  The key is that this functionality would only
> really be appropriate for a development environment...
>
> Thoughts?
>
> Chris
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>

From richard at ccpgames.com  Wed Apr 25 23:54:50 2001
From: richard at ccpgames.com (Richard)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] Apache settings wrong?
Message-ID: <FC15F916EC764C42A4219BC30BFBC0720770A2@control.central.ccp.cc>

I have two mod_python directories defined in my apache config.
However, accessing the second shows me the first.
And of course, accessing the first shows me the first.
Am I doing something wrong?

Thanks,
Richard.

ScriptAlias /ir/ "/home/httpd/.../whelkboard/cgi/index.shtml"

<Directory /home/httpd/sorrows/whelkboard/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

ScriptAlias /icelandic/
"/home/httpd/.../icelandic-language/cgi/index.shtml"

<Directory /home/httpd/.../icelandic-language/cgi>
    DirectoryIndex index.shtml
    SetHandler python-program
    PythonHandler index
</Directory>

From nineclue at bigfoot.com  Fri Apr 27 13:13:06 2001
From: nineclue at bigfoot.com (nineclue@bigfoot.com)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] FieldStorage class
Message-ID: <Pine.LNX.4.10.10104261403020.21425-100000@mrham.hamslab.com>

Hello,

During playing with util.FieldStorage classes I found that when form data
is loaded with POST method, Request object has already has 'data' member
that is loaded with form variables, even without creating intance of
FieldStorage. I tried to search manual about this, but failed. 

Is this member is safe to use in my code? Will this be supported in future
versions?

Thanks in advance.

Suhku Huh



From adoyle at intl-interfaces.com  Mon Apr 30 10:13:05 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
Message-ID: <3AED72F1.F6056FFB@intl-interfaces.com>

Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
security for Apache? I'm getting segmentation faults when I try to use it on
an https address (things work fine under http).

I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
whether I'm invoking mod_python or not, the https side of things core dumps
if I have the mod_python directives in the httpsd.conf file and does not core
dump if I comment them out.

Based on Covalent's web site I've taken LARGEFILE support out of
Python/mod_python (
http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
)

You can see the code I'm running at
http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
and try it out by clicking on the map found at
http://www.intl-interfaces.net/cookbook/WMS/

Now I want to play with x.509 control over who can see what maps so I want to
move things into https.

Any help would be appreciated.

    Allan

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



From grisha at modpython.org  Mon Apr 30 10:35:04 2001
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
In-Reply-To: <3AED72F1.F6056FFB@intl-interfaces.com>
Message-ID: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>

Since Raven is a commercial product, I think you should (at least try)
making it Covalent's problem :) I'd like to hear what they say, and if
they can suggest a fix, I'm sure we can incorporate it into the code.

Also - since the expiration of the RSA patent last september, there is no
legal need to use Raven, and mod_python works really well with mod_ssl.

Grisha

On Mon, 30 Apr 2001, Allan Doyle wrote:

> Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> security for Apache? I'm getting segmentation faults when I try to use it on
> an https address (things work fine under http).
>
> I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> whether I'm invoking mod_python or not, the https side of things core dumps
> if I have the mod_python directives in the httpsd.conf file and does not core
> dump if I comment them out.
>
> Based on Covalent's web site I've taken LARGEFILE support out of
> Python/mod_python (
> http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> )
>
> You can see the code I'm running at
> http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> and try it out by clicking on the map found at
> http://www.intl-interfaces.net/cookbook/WMS/
>
> Now I want to play with x.509 control over who can see what maps so I want to
> move things into https.
>
> Any help would be appreciated.
>
>     Allan
>
> --
> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> Allan Doyle                     adoyle@intl-interfaces.com
> International Interfaces        +1 781 433 2695 (Office)
> http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From adoyle at intl-interfaces.com  Mon Apr 30 10:42:04 2001
From: adoyle at intl-interfaces.com (Allan Doyle)
Date: Fri Jan  9 22:02:42 2004
Subject: [mod_python] Mod_python 2.7.2 and RavenSSL
References: <Pine.BSF.4.32.0104301032070.15509-100000@localhost>
Message-ID: <3AED79BC.A45C7CF8@intl-interfaces.com>

I've already talked to Covalent, they saw no immediate misconfiguration and are also looking
into it but suggested I try this list as well... I can give mod_ssl a whirl.

Thanks,

    Allan

"Gregory (Grisha) Trubetskoy" wrote:

> Since Raven is a commercial product, I think you should (at least try)
> making it Covalent's problem :) I'd like to hear what they say, and if
> they can suggest a fix, I'm sure we can incorporate it into the code.
>
> Also - since the expiration of the RSA patent last september, there is no
> legal need to use Raven, and mod_python works really well with mod_ssl.
>
> Grisha
>
> On Mon, 30 Apr 2001, Allan Doyle wrote:
>
> > Has anyone successfully integrated mod_python 2.7.2 with Covalent's Raven SSL
> > security for Apache? I'm getting segmentation faults when I try to use it on
> > an https address (things work fine under http).
> >
> > I'm running RedHat 7.0, Apache 1.3.12, Raven SSL 1.5.3, mod_python 2.7.2, and
> > Python 2.0. I'm using DSO and am loading mod_python first. It doesn't matter
> > whether I'm invoking mod_python or not, the https side of things core dumps
> > if I have the mod_python directives in the httpsd.conf file and does not core
> > dump if I comment them out.
> >
> > Based on Covalent's web site I've taken LARGEFILE support out of
> > Python/mod_python (
> > http://www.covalent.net/support/view_faq?faqid=119&productid=25&catid=0&search_string=perl
> > )
> >
> > You can see the code I'm running at
> > http://www.intl-interfaces.net/cookbook/WMS/basic-wms2.py
> > and try it out by clicking on the map found at
> > http://www.intl-interfaces.net/cookbook/WMS/
> >
> > Now I want to play with x.509 control over who can see what maps so I want to
> > move things into https.
> >
> > Any help would be appreciated.
> >
> >     Allan
> >
> > --
> > ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> > Allan Doyle                     adoyle@intl-interfaces.com
> > International Interfaces        +1 781 433 2695 (Office)
> > http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://www.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Allan Doyle                     adoyle@intl-interfaces.com
International Interfaces        +1 781 433 2695 (Office)
http://www.intl-interfaces.com  +1 781 254 9484 (Mobile/Voicemail)



