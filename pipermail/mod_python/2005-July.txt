From gnulife at gmail.com  Fri Jul  1 00:02:14 2005
From: gnulife at gmail.com (GNULife)
Date: Fri Jul  1 00:02:27 2005
Subject: [mod_python] How to access like "http://localhost/html/test.html"
 under mod_python.publisher ?
Message-ID: <42C4C046.1030207@gmail.com>

Now, it return the error:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "C:\Program Files\python 2.4\Lib\site-packages\mod_python\apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "C:\Program Files\python 2.4\Lib\site-packages\mod_python\publisher.py", line 98, in handler
    path=[path])

  File "C:\Program Files\python 2.4\Lib\site-packages\mod_python\apache.py", line 454, in import_module
    f, p, d = imp.find_module(parts[i], path)

ImportError: No module named head

How to access like "http://localhost/html/test.html" under
mod_python.publisher ?
From grahamd at dscpl.com.au  Fri Jul  1 00:33:08 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul  1 00:33:14 2005
Subject: [mod_python] How to access like
	"http://localhost/html/test.html"under mod_python.publisher ?
Message-ID: <1120192387.6415@dscpl.user.openhosting.com>

GNULife wrote ..
> Now, it return the error:
> 
> Mod_python error: "PythonHandler mod_python.publisher"
> 
> ImportError: No module named head

Sorry, my psychic powers aren't working very well today. :-)

You are going to have to provide your code, what the name of that code file
is and what URL you were using is.

> How to access like "http://localhost/html/test.html" under
> mod_python.publisher ?

You can always set up mod_python.publisher as:

  AddHandler python-program .html
  PythonHandler mod_python.publisher

Do this though and you can't have static .html files in the same
directory as mod_python.publisher expects to be handling all
.html requests.

It also doesn't work well if you expect to have multiple published
methods in the same file, whether in a flat namespace or hierarchical
by using objects. This is because the URL for the published methods
ends up actually being something like:

  http://localhost/html/test.html/method1

Ie., the ".html" extension isn't at the end of the URL.

The only other option you have is to get messy and use mod_rewrite
to remap actual ".html" URLs to mod_python.publisher style URLs on
the fly.

Other than that, you would have to look at using an alternate
extension package for mod_python that focuses more on resource
based URLs where the URL reflects the type of content being returned.
When using mod_python.publisher you almost have to use REST
style URLs, ie., no extension to stop the ".py" appearing.

Maybe you would like to explain what you are trying to achieve and
whether you are using some templating system or using handcrafted
HTML. People may then be able to suggest better alternatives.

Graham
From sasha at systemvaruhuset.com  Fri Jul  1 05:50:41 2005
From: sasha at systemvaruhuset.com (Sasha Vincic)
Date: Fri Jul  1 05:50:44 2005
Subject: [mod_python] Fwd: Mod_python compiled with one python but uses other
Message-ID: <6c02eac66db0be46dcd778b6837a4a56@systemvaruhuset.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2169 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050701/bd8cc1f9/smime.bin
From grahamd at dscpl.com.au  Fri Jul  1 06:24:34 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul  1 06:24:44 2005
Subject: [mod_python] [Vampire] Module partially loaded?
In-Reply-To: <20050630215213.GA2190@laperouse.internatif.org>
References: <20050630215213.GA2190@laperouse.internatif.org>
Message-ID: <83330d84e0fef2388edaf326848d78e1@dscpl.com.au>


On 01/07/2005, at 7:52 AM, Stephane Bortzmeyer wrote:

> I have a Python module which defines several functions and also
> includes a bit a code is executed when the module is imported:
>
> do_something()
>
> def function1():
>    ...
>
> If do_something() fails (it connects to a database and the database
> server may be down), the rest of the module is not executed, function1
> is not defined but the module stays loaded: further requests just get
> a message that there is no function1 defined.
>
> Restarting Apache is the only solution to get rid of the partly loaded
> module.
>
> It seems a bug to me: if the module cannot be fully loaded because the
> initialization code fails, the module should not be loaded at all, so
> that further attempts have a chance to succeed.

I'll do some checking, but modules are imported using:

         # Perform the actual import of the module.

         try:
           execfile(file,module.__dict__)

         except:
           # Importation of module has failed for some
           # reason. If this is the very first import of
           # the module, need to discard the cache entry
           # entirely else a subsequent attempt to load
           # the module will wrongly think it was
           # successfully loaded already.

           if cache.module is None:
             del self._cache[label]

           raise

Thus, an exception on import is explicitly detected but only
for the purpose of ensuring that if this is the first time
that the module is being imported that the cache is cleared
of the partially constructed entry. If this isn't done then on
next import attempt it may think it has been loaded and
module reference will be None.

In either case, the error is propagated and the failed module
should be thrown away.

Is the module the error occurs in being explicitly loaded
using vampire.importModule() or using the "import" statement
and relying on the import hook to call vampire.importModule()
for you? Also, does it happen on the first loading of the
module or has the module been changed and is it on a reload?

Graham

From nicolas.lehuen at gmail.com  Fri Jul  1 06:29:49 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Fri Jul  1 06:29:55 2005
Subject: [mod_python] [Vampire] Module partially loaded?
In-Reply-To: <83330d84e0fef2388edaf326848d78e1@dscpl.com.au>
References: <20050630215213.GA2190@laperouse.internatif.org>
	<83330d84e0fef2388edaf326848d78e1@dscpl.com.au>
Message-ID: <c298f2d705070103293bdfe5dd@mail.gmail.com>

Maybe you can force reload by touching the module's modified timestamp ?

Regards,
Nicolas

2005/7/1, Graham Dumpleton <grahamd@dscpl.com.au>:
> 
> On 01/07/2005, at 7:52 AM, Stephane Bortzmeyer wrote:
> 
> > I have a Python module which defines several functions and also
> > includes a bit a code is executed when the module is imported:
> >
> > do_something()
> >
> > def function1():
> >    ...
> >
> > If do_something() fails (it connects to a database and the database
> > server may be down), the rest of the module is not executed, function1
> > is not defined but the module stays loaded: further requests just get
> > a message that there is no function1 defined.
> >
> > Restarting Apache is the only solution to get rid of the partly loaded
> > module.
> >
> > It seems a bug to me: if the module cannot be fully loaded because the
> > initialization code fails, the module should not be loaded at all, so
> > that further attempts have a chance to succeed.
> 
> I'll do some checking, but modules are imported using:
> 
>          # Perform the actual import of the module.
> 
>          try:
>            execfile(file,module.__dict__)
> 
>          except:
>            # Importation of module has failed for some
>            # reason. If this is the very first import of
>            # the module, need to discard the cache entry
>            # entirely else a subsequent attempt to load
>            # the module will wrongly think it was
>            # successfully loaded already.
> 
>            if cache.module is None:
>              del self._cache[label]
> 
>            raise
> 
> Thus, an exception on import is explicitly detected but only
> for the purpose of ensuring that if this is the first time
> that the module is being imported that the cache is cleared
> of the partially constructed entry. If this isn't done then on
> next import attempt it may think it has been loaded and
> module reference will be None.
> 
> In either case, the error is propagated and the failed module
> should be thrown away.
> 
> Is the module the error occurs in being explicitly loaded
> using vampire.importModule() or using the "import" statement
> and relying on the import hook to call vampire.importModule()
> for you? Also, does it happen on the first loading of the
> module or has the module been changed and is it on a reload?
> 
> Graham
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From bortzmeyer at nic.fr  Fri Jul  1 06:36:18 2005
From: bortzmeyer at nic.fr (Stephane Bortzmeyer)
Date: Fri Jul  1 06:39:02 2005
Subject: [mod_python] Re: [Vampire] Module partially loaded?
In-Reply-To: <83330d84e0fef2388edaf326848d78e1@dscpl.com.au>
References: <20050630215213.GA2190@laperouse.internatif.org>
	<83330d84e0fef2388edaf326848d78e1@dscpl.com.au>
Message-ID: <20050701103618.GA6695@laperouse.internatif.org>

On Fri, Jul 01, 2005 at 08:24:34PM +1000,
 Graham Dumpleton <grahamd@dscpl.com.au> wrote 
 a message of 60 lines which said:

> Is the module the error occurs in being explicitly loaded using
> vampire.importModule() or using the "import" statement and relying
> on the import hook to call vampire.importModule() for you?

"import" statement. BTW, this is a pure Python script, not a Cheetah
template.

> Also, does it happen on the first loading of the module or has the
> module been changed and is it on a reload?

Same behaviour in both cases.
From grahamd at dscpl.com.au  Fri Jul  1 06:51:05 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul  1 06:51:24 2005
Subject: [mod_python] [Vampire] Module partially loaded?
In-Reply-To: <c298f2d705070103293bdfe5dd@mail.gmail.com>
References: <20050630215213.GA2190@laperouse.internatif.org>
	<83330d84e0fef2388edaf326848d78e1@dscpl.com.au>
	<c298f2d705070103293bdfe5dd@mail.gmail.com>
Message-ID: <41d039423bad5fde35ebda3766af1286@dscpl.com.au>

If things were working properly, that strictly shouldn't be required,
but I do note that I possibly do the wrong thing in the that I update
the mtime in the cache before reimporting the module. This would be
bad if the import fails as it wouldn't try to keep reloading the module
and would instead use the working one loaded into the cache only. But
then, this could also be good as although it would error on one request,
after that it would use the good one still in the cache until the one
on disk was fixed and modification time updated. I may well have done
it intentionally that way, can't remember. :-)

Either way, this issue shouldn't result in a partly loaded broken
module, although I have some other ideas as to why it might be 
occurring?

Graham

On 01/07/2005, at 8:29 PM, Nicolas Lehuen wrote:

> Maybe you can force reload by touching the module's modified timestamp 
> ?
>
> Regards,
> Nicolas
>
> 2005/7/1, Graham Dumpleton <grahamd@dscpl.com.au>:
>>
>> On 01/07/2005, at 7:52 AM, Stephane Bortzmeyer wrote:
>>
>>> I have a Python module which defines several functions and also
>>> includes a bit a code is executed when the module is imported:
>>>
>>> do_something()
>>>
>>> def function1():
>>>    ...
>>>
>>> If do_something() fails (it connects to a database and the database
>>> server may be down), the rest of the module is not executed, 
>>> function1
>>> is not defined but the module stays loaded: further requests just get
>>> a message that there is no function1 defined.
>>>
>>> Restarting Apache is the only solution to get rid of the partly 
>>> loaded
>>> module.
>>>
>>> It seems a bug to me: if the module cannot be fully loaded because 
>>> the
>>> initialization code fails, the module should not be loaded at all, so
>>> that further attempts have a chance to succeed.
>>
>> I'll do some checking, but modules are imported using:
>>
>>          # Perform the actual import of the module.
>>
>>          try:
>>            execfile(file,module.__dict__)
>>
>>          except:
>>            # Importation of module has failed for some
>>            # reason. If this is the very first import of
>>            # the module, need to discard the cache entry
>>            # entirely else a subsequent attempt to load
>>            # the module will wrongly think it was
>>            # successfully loaded already.
>>
>>            if cache.module is None:
>>              del self._cache[label]
>>
>>            raise
>>
>> Thus, an exception on import is explicitly detected but only
>> for the purpose of ensuring that if this is the first time
>> that the module is being imported that the cache is cleared
>> of the partially constructed entry. If this isn't done then on
>> next import attempt it may think it has been loaded and
>> module reference will be None.
>>
>> In either case, the error is propagated and the failed module
>> should be thrown away.
>>
>> Is the module the error occurs in being explicitly loaded
>> using vampire.importModule() or using the "import" statement
>> and relying on the import hook to call vampire.importModule()
>> for you? Also, does it happen on the first loading of the
>> module or has the module been changed and is it on a reload?
>>
>> Graham
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>

From bortzmeyer at nic.fr  Fri Jul  1 06:42:45 2005
From: bortzmeyer at nic.fr (Stephane Bortzmeyer)
Date: Fri Jul  1 06:54:27 2005
Subject: [mod_python] Re: [Vampire] Module partially loaded?
In-Reply-To: <c298f2d705070103293bdfe5dd@mail.gmail.com>
References: <20050630215213.GA2190@laperouse.internatif.org>
	<83330d84e0fef2388edaf326848d78e1@dscpl.com.au>
	<c298f2d705070103293bdfe5dd@mail.gmail.com>
Message-ID: <20050701104244.GA6998@laperouse.internatif.org>

On Fri, Jul 01, 2005 at 12:29:49PM +0200,
 Nicolas Lehuen <nicolas.lehuen@gmail.com> wrote 
 a message of 72 lines which said:

> Maybe you can force reload by touching the module's modified
> timestamp ?

I cannot ask the future users to send an email to webmaster each time
they see the problem, I would prefer an automatic solution :-)

From JoshC at usracmfg.com  Fri Jul  1 14:14:28 2005
From: JoshC at usracmfg.com (Joshua Cohen)
Date: Fri Jul  1 14:14:49 2005
Subject: [mod_python] Newbie Connection Problems
Message-ID: <F0E8C229CF67D411AA94009027C6BA1603E8F3E1@fnmail1.fncorp.com>

Hi Everyone, 

I have been programming in Python for a while now but am new to the mod_python module. I am having problems connecting to a MySQL database using MySQLdb. The database is 4.0.24 and is located on a Windows 2000 server. I am running a Fedora Core 4 PC with Apache 2/Python2.4.1 I have no issues with running a simple test script against mod_python in Apache, all is well. However, when I try to import MySQLdb and create a simple database connection I receive an error

OperationalError: (2003, "Can't connect to MySQL server on 'IPADDRESSHIDDEN' (13)")

The code is very simple and is as follows:

import MySQLdb

def sql():
     db_connection = MySQLdb.connect(host="IPADDRESS", user="user", passwd="password", db="database", port=3306)


There is no reason for me to go further with the code since I cannot even establish an connection to the DB. If I execute the same basic lines through a prompt, I am able to connect to the DB and query without any issues. 

Any ideas what is going wrong? I've waisted away enough of my life searching google for a solution. 

Thanks,

Josh


From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 09:01:29 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?ISO-8859-2?Q?Martin_MOKREJ=A9?=)
Date: Mon Jul  4 09:01:36 2005
Subject: [mod_python] Where to get latest sources of mod_python?
Message-ID: <42C93329.2060305@ribosome.natur.cuni.cz>

Hi,
  I have some weird problem with module imports under mod_python.
While reloading the webpage on every second reload I get a module import error.

  Similarly, I'm getting python executed in "restricted" mode just after
I use (not import) cElementTree module. Fredrik Lundh mentioned some users
had such problems when expat library was different to the used by apache
itself. I got everything recompiled but nothing changed. I use Gentoo
linux, btw. I have no problems when using elementtree to parse xml files.

  So, I would like to download latest cvs snapshot of mod_python as
reading the bugreports on your web impressed me you are going to
release 3.2 version rather soon.

  I followed the instructions at http://www.modpython.org/ so I got
to this cvs repository.

# cvs -t update -dR
  -> main: Session ID is 483142c930984567
  -> main loop with CVSROOT=/home/cvspublic
  -> open_connection_to_server (:pserver:anoncvs@cvs.apache.org:/home/cvspublic)
  -> Connecting to cvs.apache.org(209.237.227.194):2401.


  Unfortunately, the flex path is hardcoded to /usr/local/bin/flex so
it leads me to suspicion that I checked out some wrong branch (I have HEAD
or whatever was the default). Any pointers? And please, put the cvs commands
on the web. And at the best generate snapshots automatically.

Thank you!
Martin
From jcigar at ulb.ac.be  Mon Jul  4 09:30:46 2005
From: jcigar at ulb.ac.be (Julien)
Date: Mon Jul  4 09:28:40 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <42C93329.2060305@ribosome.natur.cuni.cz>
References: <42C93329.2060305@ribosome.natur.cuni.cz>
Message-ID: <1120483847.6034.8.camel@horologium>

Are you using multiple interpreters or vhosts ?

If yes, check
http://www.modpython.org/live/current/doc-html/pyapi-interps.html
and try the PythonInterpPerDirectory directive :
"PythonInterpPerDirectory on" in your .htaccess file

If you use the Clearsilver template engine, don't forget to do a
neo_cgi.update() after an import neo_cgi.

On Mon, 2005-07-04 at 15:01 +0200, Martin MOKREJ? wrote:
> Hi,
>   I have some weird problem with module imports under mod_python.
> While reloading the webpage on every second reload I get a module import error.
> 
>   Similarly, I'm getting python executed in "restricted" mode just after
> I use (not import) cElementTree module. Fredrik Lundh mentioned some users
> had such problems when expat library was different to the used by apache
> itself. I got everything recompiled but nothing changed. I use Gentoo
> linux, btw. I have no problems when using elementtree to parse xml files.
> 
>   So, I would like to download latest cvs snapshot of mod_python as
> reading the bugreports on your web impressed me you are going to
> release 3.2 version rather soon.
> 
>   I followed the instructions at http://www.modpython.org/ so I got
> to this cvs repository.
> 
> # cvs -t update -dR
>   -> main: Session ID is 483142c930984567
>   -> main loop with CVSROOT=/home/cvspublic
>   -> open_connection_to_server (:pserver:anoncvs@cvs.apache.org:/home/cvspublic)
>   -> Connecting to cvs.apache.org(209.237.227.194):2401.
> 
> 
>   Unfortunately, the flex path is hardcoded to /usr/local/bin/flex so
> it leads me to suspicion that I checked out some wrong branch (I have HEAD
> or whatever was the default). Any pointers? And please, put the cvs commands
> on the web. And at the best generate snapshots automatically.
> 
> Thank you!
> Martin
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 
-- 
Julien Cigar (jcigar@ulb.ac.be)
Belgian Biodiversity Information Facility
Universit? Libre de Bruxelles
Campus de la Plaine CP 257
B?timent NO, Bureau 4 N4 115C (Niveau 4)
Boulevard du Triomphe, entr?e ULB 2
B-1050 Bruxelles
http://www.bebif.be

From nicolas.lehuen at gmail.com  Mon Jul  4 10:18:40 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Mon Jul  4 10:18:47 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <42C93329.2060305@ribosome.natur.cuni.cz>
References: <42C93329.2060305@ribosome.natur.cuni.cz>
Message-ID: <c298f2d70507040718626fe65c@mail.gmail.com>

Hi,

The CVS archive is no longer used and is completely deprecated. Please
fetch the latest source version using Subversion
(http://subversion.tigris.org/), with the following command line :

svn checkout http://svn.apache.org/repos/asf/httpd/mod_python/trunk mod_python

Regards,

Nicolas

2005/7/4, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> Hi,
>   I have some weird problem with module imports under mod_python.
> While reloading the webpage on every second reload I get a module import error.
> 
>   Similarly, I'm getting python executed in "restricted" mode just after
> I use (not import) cElementTree module. Fredrik Lundh mentioned some users
> had such problems when expat library was different to the used by apache
> itself. I got everything recompiled but nothing changed. I use Gentoo
> linux, btw. I have no problems when using elementtree to parse xml files.
> 
>   So, I would like to download latest cvs snapshot of mod_python as
> reading the bugreports on your web impressed me you are going to
> release 3.2 version rather soon.
> 
>   I followed the instructions at http://www.modpython.org/ so I got
> to this cvs repository.
> 
> # cvs -t update -dR
>   -> main: Session ID is 483142c930984567
>   -> main loop with CVSROOT=/home/cvspublic
>   -> open_connection_to_server (:pserver:anoncvs@cvs.apache.org:/home/cvspublic)
>   -> Connecting to cvs.apache.org(209.237.227.194):2401.
> 
>   Unfortunately, the flex path is hardcoded to /usr/local/bin/flex so
> it leads me to suspicion that I checked out some wrong branch (I have HEAD
> or whatever was the default). Any pointers? And please, put the cvs commands
> on the web. And at the best generate snapshots automatically.
> 
> Thank you!
> Martin
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 10:24:56 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?ISO-8859-2?Q?Martin_MOKREJ=A9?=)
Date: Mon Jul  4 10:25:03 2005
Subject: [mod_python] mod_python claims it cannot find a module
Message-ID: <42C946B8.2050501@ribosome.natur.cuni.cz>

Hi,
  when I have in httpd.conf:

<IfDefine PYTHON>
  <IfModule !mod_python.c>
    LoadModule python_module    modules/mod_python.so
  </IfModule>
</IfDefine>

<IfModule mod_python.c>

AddHandler mod_python .py
PythonHandler mod_python.publisher
PythonInterpPerDirectory On
PythonDebug On


and no .htaccess in my public_html directory and access
http://aquarius/~mmokrejs/IRES2/IRESite_web.py?page=all, I get:


Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 187, in handler
    module = page_cache[req]

  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 77, in __getitem__
    return self._checkitem(name)[2]

  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 118, in _checkitem
    opened = self.check(key, name, entry)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 67, in check
    return ModuleCache.check(self, key, req, entry)

  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 249, in check
    opened = file(key, self.mode)

IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/IRES2/index.py'


But, when I create .htaccess with:

AddHandler mod_python .py
PythonHandler mod_python.publisher
PythonInterpPerDirectory On
PythonDebug On

it works.

index.py really doesn't exist. I get rid of this stupid error when .htaccess
contains only:

<IfModule mod_dir.c>
    DirectoryIndex IRESite_web.py
</IfModule>




But then it complains about another module on line 1 in the source file:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 187, in handler
    module = page_cache[req]

  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 77, in __getitem__
    return self._checkitem(name)[2]

  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 119, in _checkitem
    value = self.build(key, name, opened, entry)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 77, in build
    return ModuleCache.build(self, key, req, opened, entry)

  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 369, in build
    exec opened in module.__dict__

  File "/home/mmokrejs/public_html/IRES2/IRESite_web.py", line 1, in ?
    import web_settings

ImportError: No module named web_settings





The errors changed, however from 
IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/IRES2/index.py'
to
ImportError: No module named web_settings


Why does it happen? I use at the moment http://cvs.apache.org/snapshots/mod_python/mod_python_20050704111017.tar.gz
under apache-2.0.54.


Martin
From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 10:40:03 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Mon Jul  4 10:40:10 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <c298f2d70507040718626fe65c@mail.gmail.com>
References: <42C93329.2060305@ribosome.natur.cuni.cz>
	<c298f2d70507040718626fe65c@mail.gmail.com>
Message-ID: <42C94A43.3030903@ribosome.natur.cuni.cz>



Nicolas Lehuen wrote:
> Hi,
> 
> The CVS archive is no longer used and is completely deprecated. Please
> fetch the latest source version using Subversion
> (http://subversion.tigris.org/), with the following command line :
> 
> svn checkout http://svn.apache.org/repos/asf/httpd/mod_python/trunk mod_python

So even the contents of http://cvs.apache.org/snapshots/mod_python
are deprecated? It's quite messy as www.mod_python.org talks about httpd-python
cvs module. The mod_python module which snapshots I've just digged out
are more up-to-date, seems to me. So still not evound up-to-date? ;)

Please, fix the docs on your web! And many thanks for answers.
Martin

> 
> Regards,
> 
> Nicolas
> 
> 2005/7/4, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> 
>>Hi,
>>  I have some weird problem with module imports under mod_python.
>>While reloading the webpage on every second reload I get a module import error.
>>
>>  Similarly, I'm getting python executed in "restricted" mode just after
>>I use (not import) cElementTree module. Fredrik Lundh mentioned some users
>>had such problems when expat library was different to the used by apache
>>itself. I got everything recompiled but nothing changed. I use Gentoo
>>linux, btw. I have no problems when using elementtree to parse xml files.
>>
>>  So, I would like to download latest cvs snapshot of mod_python as
>>reading the bugreports on your web impressed me you are going to
>>release 3.2 version rather soon.
>>
>>  I followed the instructions at http://www.modpython.org/ so I got
>>to this cvs repository.
>>
>># cvs -t update -dR
>>  -> main: Session ID is 483142c930984567
>>  -> main loop with CVSROOT=/home/cvspublic
>>  -> open_connection_to_server (:pserver:anoncvs@cvs.apache.org:/home/cvspublic)
>>  -> Connecting to cvs.apache.org(209.237.227.194):2401.
>>
>>  Unfortunately, the flex path is hardcoded to /usr/local/bin/flex so
>>it leads me to suspicion that I checked out some wrong branch (I have HEAD
>>or whatever was the default). Any pointers? And please, put the cvs commands
>>on the web. And at the best generate snapshots automatically.
>>
>>Thank you!
>>Martin
From nicolas.lehuen at gmail.com  Mon Jul  4 10:51:26 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Mon Jul  4 10:51:32 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <42C94A43.3030903@ribosome.natur.cuni.cz>
References: <42C93329.2060305@ribosome.natur.cuni.cz>
	<c298f2d70507040718626fe65c@mail.gmail.com>
	<42C94A43.3030903@ribosome.natur.cuni.cz>
Message-ID: <c298f2d705070407516fdc927@mail.gmail.com>

Yes, the instructions on the web site are deprecated too. We know that
and are working on it, hopefully.

I didn't know there was some snapshots online, but having a look at it
it effectively is quite recent. Some changes have been made since then
about the session cookie name, but that's all.

2005/7/4, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> 
> 
> Nicolas Lehuen wrote:
> > Hi,
> >
> > The CVS archive is no longer used and is completely deprecated. Please
> > fetch the latest source version using Subversion
> > (http://subversion.tigris.org/), with the following command line :
> >
> > svn checkout http://svn.apache.org/repos/asf/httpd/mod_python/trunk mod_python
> 
> So even the contents of http://cvs.apache.org/snapshots/mod_python
> are deprecated? It's quite messy as www.mod_python.org talks about httpd-python
> cvs module. The mod_python module which snapshots I've just digged out
> are more up-to-date, seems to me. So still not evound up-to-date? ;)
> 
> Please, fix the docs on your web! And many thanks for answers.
> Martin
> 
> >
> > Regards,
> >
> > Nicolas
> >
> > 2005/7/4, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> >
> >>Hi,
> >>  I have some weird problem with module imports under mod_python.
> >>While reloading the webpage on every second reload I get a module import error.
> >>
> >>  Similarly, I'm getting python executed in "restricted" mode just after
> >>I use (not import) cElementTree module. Fredrik Lundh mentioned some users
> >>had such problems when expat library was different to the used by apache
> >>itself. I got everything recompiled but nothing changed. I use Gentoo
> >>linux, btw. I have no problems when using elementtree to parse xml files.
> >>
> >>  So, I would like to download latest cvs snapshot of mod_python as
> >>reading the bugreports on your web impressed me you are going to
> >>release 3.2 version rather soon.
> >>
> >>  I followed the instructions at http://www.modpython.org/ so I got
> >>to this cvs repository.
> >>
> >># cvs -t update -dR
> >>  -> main: Session ID is 483142c930984567
> >>  -> main loop with CVSROOT=/home/cvspublic
> >>  -> open_connection_to_server (:pserver:anoncvs@cvs.apache.org:/home/cvspublic)
> >>  -> Connecting to cvs.apache.org(209.237.227.194):2401.
> >>
> >>  Unfortunately, the flex path is hardcoded to /usr/local/bin/flex so
> >>it leads me to suspicion that I checked out some wrong branch (I have HEAD
> >>or whatever was the default). Any pointers? And please, put the cvs commands
> >>on the web. And at the best generate snapshots automatically.
> >>
> >>Thank you!
> >>Martin
>

From jcigar at ulb.ac.be  Mon Jul  4 10:56:18 2005
From: jcigar at ulb.ac.be (Julien)
Date: Mon Jul  4 10:54:11 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <42C946B8.2050501@ribosome.natur.cuni.cz>
References: <42C946B8.2050501@ribosome.natur.cuni.cz>
Message-ID: <1120488978.6034.10.camel@horologium>

can you paste your code to http://rafb.net/paste/ ?

On Mon, 2005-07-04 at 16:24 +0200, Martin MOKREJ? wrote:
> Hi,
>   when I have in httpd.conf:
> 
> <IfDefine PYTHON>
>   <IfModule !mod_python.c>
>     LoadModule python_module    modules/mod_python.so
>   </IfModule>
> </IfDefine>
> 
> <IfModule mod_python.c>
> 
> AddHandler mod_python .py
> PythonHandler mod_python.publisher
> PythonInterpPerDirectory On
> PythonDebug On
> 
> 
> and no .htaccess in my public_html directory and access
> http://aquarius/~mmokrejs/IRES2/IRESite_web.py?page=all, I get:
> 
> 
> Mod_python error: "PythonHandler mod_python.publisher"
> 
> Traceback (most recent call last):
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
>     result = object(req)
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 187, in handler
>     module = page_cache[req]
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 77, in __getitem__
>     return self._checkitem(name)[2]
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 118, in _checkitem
>     opened = self.check(key, name, entry)
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 67, in check
>     return ModuleCache.check(self, key, req, entry)
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 249, in check
>     opened = file(key, self.mode)
> 
> IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/IRES2/index.py'
> 
> 
> But, when I create .htaccess with:
> 
> AddHandler mod_python .py
> PythonHandler mod_python.publisher
> PythonInterpPerDirectory On
> PythonDebug On
> 
> it works.
> 
> index.py really doesn't exist. I get rid of this stupid error when .htaccess
> contains only:
> 
> <IfModule mod_dir.c>
>     DirectoryIndex IRESite_web.py
> </IfModule>
> 
> 
> 
> 
> But then it complains about another module on line 1 in the source file:
> 
> Mod_python error: "PythonHandler mod_python.publisher"
> 
> Traceback (most recent call last):
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
>     result = object(req)
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 187, in handler
>     module = page_cache[req]
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 77, in __getitem__
>     return self._checkitem(name)[2]
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 119, in _checkitem
>     value = self.build(key, name, opened, entry)
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 77, in build
>     return ModuleCache.build(self, key, req, opened, entry)
> 
>   File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 369, in build
>     exec opened in module.__dict__
> 
>   File "/home/mmokrejs/public_html/IRES2/IRESite_web.py", line 1, in ?
>     import web_settings
> 
> ImportError: No module named web_settings
> 
> 
> 
> 
> 
> The errors changed, however from 
> IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/IRES2/index.py'
> to
> ImportError: No module named web_settings
> 
> 
> Why does it happen? I use at the moment http://cvs.apache.org/snapshots/mod_python/mod_python_20050704111017.tar.gz
> under apache-2.0.54.
> 
> 
> Martin
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 
-- 
Julien Cigar (jcigar@ulb.ac.be)
Belgian Biodiversity Information Facility
Universit? Libre de Bruxelles
Campus de la Plaine CP 257
B?timent NO, Bureau 4 N4 115C (Niveau 4)
Boulevard du Triomphe, entr?e ULB 2
B-1050 Bruxelles
http://www.bebif.be

From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 11:02:53 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?ISO-8859-15?Q?Martin_MOKREJ=A6?=)
Date: Mon Jul  4 11:03:02 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <1120488978.6034.10.camel@horologium>
References: <42C946B8.2050501@ribosome.natur.cuni.cz>
	<1120488978.6034.10.camel@horologium>
Message-ID: <42C94F9D.2090402@ribosome.natur.cuni.cz>

I'll make a small testcase if you wish. The code breaks in the latter case on very
first line of my code where is

import web_settings

with ImportError: No module named web_settings


In the former error 
IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/IRES2/index.py'
it breaks even before executing my code, as python
handler looks for index.py which doesn't even exist. I have to tell
apache that it shouldn't even look for index.py with that configuration
directive. Still don't understand why when I'm accessing
http://aquarius/~mmokrejs/IRES2/IRESite_web.py and not http://aquarius/~mmokrejs/IRES2/

Martin


Julien wrote:
> can you paste your code to http://rafb.net/paste/ ?
> 
> On Mon, 2005-07-04 at 16:24 +0200, Martin MOKREJ? wrote:
> 
>>Hi,
>>  when I have in httpd.conf:
>>
>><IfDefine PYTHON>
>>  <IfModule !mod_python.c>
>>    LoadModule python_module    modules/mod_python.so
>>  </IfModule>
>></IfDefine>
>>
>><IfModule mod_python.c>
>>
>>AddHandler mod_python .py
>>PythonHandler mod_python.publisher
>>PythonInterpPerDirectory On
>>PythonDebug On
>>
>>
>>and no .htaccess in my public_html directory and access
>>http://aquarius/~mmokrejs/IRES2/IRESite_web.py?page=all, I get:
>>
>>
>>Mod_python error: "PythonHandler mod_python.publisher"
>>
>>Traceback (most recent call last):
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
>>    result = object(req)
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 187, in handler
>>    module = page_cache[req]
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 77, in __getitem__
>>    return self._checkitem(name)[2]
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 118, in _checkitem
>>    opened = self.check(key, name, entry)
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 67, in check
>>    return ModuleCache.check(self, key, req, entry)
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 249, in check
>>    opened = file(key, self.mode)
>>
>>IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/IRES2/index.py'
>>
>>
>>But, when I create .htaccess with:
>>
>>AddHandler mod_python .py
>>PythonHandler mod_python.publisher
>>PythonInterpPerDirectory On
>>PythonDebug On
>>
>>it works.
>>
>>index.py really doesn't exist. I get rid of this stupid error when .htaccess
>>contains only:
>>
>><IfModule mod_dir.c>
>>    DirectoryIndex IRESite_web.py
>></IfModule>
>>
>>
>>
>>
>>But then it complains about another module on line 1 in the source file:
>>
>>Mod_python error: "PythonHandler mod_python.publisher"
>>
>>Traceback (most recent call last):
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
>>    result = object(req)
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 187, in handler
>>    module = page_cache[req]
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 77, in __getitem__
>>    return self._checkitem(name)[2]
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 119, in _checkitem
>>    value = self.build(key, name, opened, entry)
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 77, in build
>>    return ModuleCache.build(self, key, req, opened, entry)
>>
>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line 369, in build
>>    exec opened in module.__dict__
>>
>>  File "/home/mmokrejs/public_html/IRES2/IRESite_web.py", line 1, in ?
>>    import web_settings
>>
>>ImportError: No module named web_settings
>>
>>
>>
>>
>>
>>The errors changed, however from 
>>IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/IRES2/index.py'
>>to
>>ImportError: No module named web_settings
>>
>>
>>Why does it happen? I use at the moment http://cvs.apache.org/snapshots/mod_python/mod_python_20050704111017.tar.gz
>>under apache-2.0.54.
>>
>>
>>Martin
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>

-- 
Martin Mokrejs
Email: 'bW9rcmVqc21Acmlib3NvbWUubmF0dXIuY3VuaS5jeg==\n'.decode('base64')
GPG key is at http://www.natur.cuni.cz/~mmokrejs
From nicolas.lehuen at gmail.com  Mon Jul  4 11:20:16 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Mon Jul  4 11:20:22 2005
Subject: Fwd: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <c298f2d705070408193bb3f2fb@mail.gmail.com>
References: <42C93329.2060305@ribosome.natur.cuni.cz>
	<c298f2d70507040718626fe65c@mail.gmail.com>
	<42C94A43.3030903@ribosome.natur.cuni.cz>
	<c298f2d705070407516fdc927@mail.gmail.com>
	<42C9500B.20608@ribosome.natur.cuni.cz>
	<c298f2d705070408193bb3f2fb@mail.gmail.com>
Message-ID: <c298f2d70507040820651c6d1c@mail.gmail.com>

Here are the high level release notes for the upcoming release :

http://issues.apache.org/jira/secure/ReleaseNote.jspa?version=11060&styleName=Html&projectId=10640&Create=Create

If you want some more details, you can fetch the subversion log using :

svn log --limit 50 (to get the last 50 logs entries)

Do not hesitate to enter new bugs into the JIRA repository (
http://issues.apache.org/jira/browse/MODPYTHON ) as soon as you find
them.

Regards,
Nicolas

2005/7/4, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> The NEWS file is quite outdated. Is there any 'Changelog'?
>
> Nicolas Lehuen wrote:
> > Yes, the instructions on the web site are deprecated too. We know that
> > and are working on it, hopefully.
> >
> > I didn't know there was some snapshots online, but having a look at it
> > it effectively is quite recent. Some changes have been made since then
> > about the session cookie name, but that's all.
> >
> > 2005/7/4, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> >
> >>
> >>Nicolas Lehuen wrote:
> >>
> >>>Hi,
> >>>
> >>>The CVS archive is no longer used and is completely deprecated. Please
> >>>fetch the latest source version using Subversion
> >>>(http://subversion.tigris.org/), with the following command line :
> >>>
> >>>svn checkout http://svn.apache.org/repos/asf/httpd/mod_python/trunk mod_python
> >>
> >>So even the contents of http://cvs.apache.org/snapshots/mod_python
> >>are deprecated? It's quite messy as www.mod_python.org talks about httpd-python
> >>cvs module. The mod_python module which snapshots I've just digged out
> >>are more up-to-date, seems to me. So still not evound up-to-date? ;)
> >>
> >>Please, fix the docs on your web! And many thanks for answers.
> >>Martin
> >>
> >>
> >>>Regards,
> >>>
> >>>Nicolas
> >>>
> >>>2005/7/4, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> >>>
> >>>
> >>>>Hi,
> >>>> I have some weird problem with module imports under mod_python.
> >>>>While reloading the webpage on every second reload I get a module import error.
> >>>>
> >>>> Similarly, I'm getting python executed in "restricted" mode just after
> >>>>I use (not import) cElementTree module. Fredrik Lundh mentioned some users
> >>>>had such problems when expat library was different to the used by apache
> >>>>itself. I got everything recompiled but nothing changed. I use Gentoo
> >>>>linux, btw. I have no problems when using elementtree to parse xml files.
> >>>>
> >>>> So, I would like to download latest cvs snapshot of mod_python as
> >>>>reading the bugreports on your web impressed me you are going to
> >>>>release 3.2 version rather soon.
> >>>>
> >>>> I followed the instructions at http://www.modpython.org/ so I got
> >>>>to this cvs repository.
> >>>>
> >>>># cvs -t update -dR
> >>>> -> main: Session ID is 483142c930984567
> >>>> -> main loop with CVSROOT=/home/cvspublic
> >>>> -> open_connection_to_server (:pserver:anoncvs@cvs.apache.org:/home/cvspublic)
> >>>> -> Connecting to cvs.apache.org(209.237.227.194):2401.
> >>>>
> >>>> Unfortunately, the flex path is hardcoded to /usr/local/bin/flex so
> >>>>it leads me to suspicion that I checked out some wrong branch (I have HEAD
> >>>>or whatever was the default). Any pointers? And please, put the cvs commands
> >>>>on the web. And at the best generate snapshots automatically.
> >>>>
> >>>>Thank you!
> >>>>Martin
> >>
>
> --
> Martin Mokrejs
> Email: 'bW9rcmVqc21Acmlib3NvbWUubmF0dXIuY3VuaS5jeg==\n'.decode('base64')
> GPG key is at http://www.natur.cuni.cz/~mmokrejs
>

From grahamd at dscpl.com.au  Mon Jul  4 18:01:29 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul  4 18:01:47 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <42C94F9D.2090402@ribosome.natur.cuni.cz>
References: <42C946B8.2050501@ribosome.natur.cuni.cz>
	<1120488978.6034.10.camel@horologium>
	<42C94F9D.2090402@ribosome.natur.cuni.cz>
Message-ID: <61cc3f2f474b9416d9e0b1270ca72a5a@dscpl.com.au>

Enable mod_python handler inside the context of a "Directory" directive
and not at global scope within Apache configuration file.

<Directory /home/mmokrejs/public_html/IRES2>
AddHandler mod_python .py
PythonHandler mod_python.publisher
PythonDebug On
</Directory>

If web_settings is in that actual directory, it should then be found.
If web_settings is elsewhere, it will only find it if it is somewhere
along the Python module search path.

There are various little issues in current versions code based related
to defaulting to index() function. Ie.,

http://issues.apache.org/jira/browse/MODPYTHON-24
http://issues.apache.org/jira/browse/MODPYTHON-23

There may be some strangeness bound up in all that whereby it has other
problems where Directory directive isn't used.

Graham

On 05/07/2005, at 1:02 AM, Martin MOKREJ? wrote:

> I'll make a small testcase if you wish. The code breaks in the latter  
> case on very
> first line of my code where is
>
> import web_settings
>
> with ImportError: No module named web_settings
>
>
> In the former error IOError: [Errno 2] No such file or directory:  
> '/home/mmokrejs/public_html/IRES2/index.py'
> it breaks even before executing my code, as python
> handler looks for index.py which doesn't even exist. I have to tell
> apache that it shouldn't even look for index.py with that configuration
> directive. Still don't understand why when I'm accessing
> http://aquarius/~mmokrejs/IRES2/IRESite_web.py and not  
> http://aquarius/~mmokrejs/IRES2/
>
> Martin
>
>
> Julien wrote:
>> can you paste your code to http://rafb.net/paste/ ?
>> On Mon, 2005-07-04 at 16:24 +0200, Martin MOKREJ? wrote:
>>> Hi,
>>>  when I have in httpd.conf:
>>>
>>> <IfDefine PYTHON>
>>>  <IfModule !mod_python.c>
>>>    LoadModule python_module    modules/mod_python.so
>>>  </IfModule>
>>> </IfDefine>
>>>
>>> <IfModule mod_python.c>
>>>
>>> AddHandler mod_python .py
>>> PythonHandler mod_python.publisher
>>> PythonInterpPerDirectory On
>>> PythonDebug On
>>>
>>>
>>> and no .htaccess in my public_html directory and access
>>> http://aquarius/~mmokrejs/IRES2/IRESite_web.py?page=all, I get:
>>>
>>>
>>> Mod_python error: "PythonHandler mod_python.publisher"
>>>
>>> Traceback (most recent call last):
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line  
>>> 299, in HandlerDispatch
>>>    result = object(req)
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",  
>>> line 187, in handler
>>>    module = page_cache[req]
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line  
>>> 77, in __getitem__
>>>    return self._checkitem(name)[2]
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line  
>>> 118, in _checkitem
>>>    opened = self.check(key, name, entry)
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",  
>>> line 67, in check
>>>    return ModuleCache.check(self, key, req, entry)
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line  
>>> 249, in check
>>>    opened = file(key, self.mode)
>>>
>>> IOError: [Errno 2] No such file or directory:  
>>> '/home/mmokrejs/public_html/IRES2/index.py'
>>>
>>>
>>> But, when I create .htaccess with:
>>>
>>> AddHandler mod_python .py
>>> PythonHandler mod_python.publisher
>>> PythonInterpPerDirectory On
>>> PythonDebug On
>>>
>>> it works.
>>>
>>> index.py really doesn't exist. I get rid of this stupid error when  
>>> .htaccess
>>> contains only:
>>>
>>> <IfModule mod_dir.c>
>>>    DirectoryIndex IRESite_web.py
>>> </IfModule>
>>>
>>>
>>>
>>>
>>> But then it complains about another module on line 1 in the source  
>>> file:
>>>
>>> Mod_python error: "PythonHandler mod_python.publisher"
>>>
>>> Traceback (most recent call last):
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line  
>>> 299, in HandlerDispatch
>>>    result = object(req)
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",  
>>> line 187, in handler
>>>    module = page_cache[req]
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line  
>>> 77, in __getitem__
>>>    return self._checkitem(name)[2]
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line  
>>> 119, in _checkitem
>>>    value = self.build(key, name, opened, entry)
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",  
>>> line 77, in build
>>>    return ModuleCache.build(self, key, req, opened, entry)
>>>
>>>  File "/usr/lib/python2.4/site-packages/mod_python/cache.py", line  
>>> 369, in build
>>>    exec opened in module.__dict__
>>>
>>>  File "/home/mmokrejs/public_html/IRES2/IRESite_web.py", line 1, in ?
>>>    import web_settings
>>>
>>> ImportError: No module named web_settings
>>>
>>>
>>>
>>>
>>>
>>> The errors changed, however from IOError: [Errno 2] No such file or  
>>> directory: '/home/mmokrejs/public_html/IRES2/index.py'
>>> to
>>> ImportError: No module named web_settings
>>>
>>>
>>> Why does it happen? I use at the moment  
>>> http://cvs.apache.org/snapshots/mod_python/ 
>>> mod_python_20050704111017.tar.gz
>>> under apache-2.0.54.
>>>
>>>
>>> Martin
>>> _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>
>
> -- 
> Martin Mokrejs
> Email:  
> 'bW9rcmVqc21Acmlib3NvbWUubmF0dXIuY3VuaS5jeg==\n'.decode('base64')
> GPG key is at http://www.natur.cuni.cz/~mmokrejs
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python


From grahamd at dscpl.com.au  Mon Jul  4 18:06:29 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul  4 18:06:39 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <42C93329.2060305@ribosome.natur.cuni.cz>
References: <42C93329.2060305@ribosome.natur.cuni.cz>
Message-ID: <6996393881ab1d0d493da065eeb9c783@dscpl.com.au>


On 04/07/2005, at 11:01 PM, Martin MOKREJ? wrote:

> Hi,
>  I have some weird problem with module imports under mod_python.
> While reloading the webpage on every second reload I get a module  
> import error.
>
>  Similarly, I'm getting python executed in "restricted" mode just after
> I use (not import) cElementTree module. Fredrik Lundh mentioned some  
> users
> had such problems when expat library was different to the used by  
> apache
> itself. I got everything recompiled but nothing changed. I use Gentoo
> linux, btw. I have no problems when using elementtree to parse xml  
> files.

Restricted mode problems tend to relate to use of Python 2.3.5, Python  
2.4
or later versions, and a Python code module which is imported making  
use of
threads. See:

    
http://sourceforge.net/tracker/index.php? 
func=detail&aid=1163563&group_id=5470&atid=105470

Ie., it may be this problem in Python itself. If it is, you would need  
to use
Python 2.3.4 or earlier version. I don't know if a version of Python  
which
patches this problem has been released yet or not.

Graham


From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 18:15:43 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Mon Jul  4 18:16:00 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <61cc3f2f474b9416d9e0b1270ca72a5a@dscpl.com.au>
References: <42C946B8.2050501@ribosome.natur.cuni.cz>
	<1120488978.6034.10.camel@horologium>
	<42C94F9D.2090402@ribosome.natur.cuni.cz>
	<61cc3f2f474b9416d9e0b1270ca72a5a@dscpl.com.au>
Message-ID: <42C9B50F.1090603@ribosome.natur.cuni.cz>

Graham Dumpleton wrote:
> Enable mod_python handler inside the context of a "Directory" directive
> and not at global scope within Apache configuration file.
> 
> <Directory /home/mmokrejs/public_html/IRES2>
> AddHandler mod_python .py
> PythonHandler mod_python.publisher
> PythonDebug On
> </Directory>
> 
> If web_settings is in that actual directory, it should then be found.

Well, you are right I have it at the moment in the "global scope".
I used to have it under the "Directory" directive. why doesn't that
approach work?

Could mod_python "overload" the standard error message of import
and spit something like a reference to a proper description
with URL? ;-) I mean if it is possible to detect this situation
at least somehow ...

This is the "DirectoryIndex IRESite_web.py" requirement case:
IOError: [Errno 2] No such file or directory:  '/home/mmokrejs/public_html/IRES2/index.py' 

This is the python PYTHON_PATH problem:
ImportError: No module named web_settings

The URL was always:
http://aquarius/~mmokrejs/IRES2/IRESite_web.py?page=all
From grahamd at dscpl.com.au  Mon Jul  4 18:43:03 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul  4 18:43:14 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <42C9B50F.1090603@ribosome.natur.cuni.cz>
References: <42C946B8.2050501@ribosome.natur.cuni.cz>
	<1120488978.6034.10.camel@horologium>
	<42C94F9D.2090402@ribosome.natur.cuni.cz>
	<61cc3f2f474b9416d9e0b1270ca72a5a@dscpl.com.au>
	<42C9B50F.1090603@ribosome.natur.cuni.cz>
Message-ID: <b72bfb141a13fe8690c0c80ff8e8e67b@dscpl.com.au>


On 05/07/2005, at 8:15 AM, Martin MOKREJ? wrote:

> Graham Dumpleton wrote:
>> Enable mod_python handler inside the context of a "Directory" 
>> directive
>> and not at global scope within Apache configuration file.
>> <Directory /home/mmokrejs/public_html/IRES2>
>> AddHandler mod_python .py
>> PythonHandler mod_python.publisher
>> PythonDebug On
>> </Directory>
>> If web_settings is in that actual directory, it should then be found.
>
> Well, you are right I have it at the moment in the "global scope".
> I used to have it under the "Directory" directive. why doesn't that
> approach work?

If the PythonHandler directive appears at global scope or within the
context of a Location directory, there is no relationship to a physical
directory. When there is a relationship to a physical directory, then
mod_python will add the root directory where PythonHandler is specified
for automatically into the Python module search path.

Having done this, if any publisher module uses the "import" statement
explicitly to import a module where the module is in that root directory
where PythonHandler was specified for, the module will be found okay.

Note that this only applies for child modules in the root directory 
where
PythonHandler directive was specified. If you had publisher modules in
a subdirectory and it used "import" to get to a child module in the sub
directory, it will not work as the subdirectory isn't added to the
Python module search path.

Because of problems with mixing "import" with the mod_python module
loader, you are actually better of using:

   from mod_python import apache
   import os

   directory = os.path.dirname(__file__)

   web_settings = apache.import_module("web_settings",path=[directory])

Here you are explicitly telling it which directory to get the module
from and avoid all problems with things not being found in the Python
module search path. You should only use this for loading in your own
modules though, not standard Python modules.

> Could mod_python "overload" the standard error message of import
> and spit something like a reference to a proper description
> with URL? ;-) I mean if it is possible to detect this situation
> at least somehow ...
>
> This is the "DirectoryIndex IRESite_web.py" requirement case:
> IOError: [Errno 2] No such file or directory:  
> '/home/mmokrejs/public_html/IRES2/index.py'
> This is the python PYTHON_PATH problem:
> ImportError: No module named web_settings
>
> The URL was always:
> http://aquarius/~mmokrejs/IRES2/IRESite_web.py?page=all

I haven't confirmed it, but because of the import error in IRESite_web,
mod_python.publisher would have tried instead to import "index.py" and
find a function in it called IRESite_web(). The bug in mod_python
was that if that then failed, the original import error message wasn't
being raised and instead that for index.py was. Thus, you couldn't see
what the original error was. Thus, you just hit a strange bug which is
giving wrong indication of the problem.

Setting DirectoryIndex will not help in this case as 
mod_python.publisher
ignores it at that point and will look for index.py regardless. The
DirectoryIndex directive is only used by Apache at the point that a
URL maps to the actual directory name.

Graham



From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 19:19:45 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Mon Jul  4 19:19:57 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <6996393881ab1d0d493da065eeb9c783@dscpl.com.au>
References: <42C93329.2060305@ribosome.natur.cuni.cz>
	<6996393881ab1d0d493da065eeb9c783@dscpl.com.au>
Message-ID: <42C9C411.3010804@ribosome.natur.cuni.cz>



Graham Dumpleton wrote:
> 
> On 04/07/2005, at 11:01 PM, Martin MOKREJ? wrote:
> 
>> Hi,
>>  I have some weird problem with module imports under mod_python.
>> While reloading the webpage on every second reload I get a module  
>> import error.
>>
>>  Similarly, I'm getting python executed in "restricted" mode just after
>> I use (not import) cElementTree module. Fredrik Lundh mentioned some  
>> users
>> had such problems when expat library was different to the used by  apache
>> itself. I got everything recompiled but nothing changed. I use Gentoo
>> linux, btw. I have no problems when using elementtree to parse xml  
>> files.
> 
> 
> Restricted mode problems tend to relate to use of Python 2.3.5, Python  2.4
> or later versions, and a Python code module which is imported making  
> use of
> threads. See:
> 
>    http://sourceforge.net/tracker/index.php? 
> func=detail&aid=1163563&group_id=5470&atid=105470
> 
> Ie., it may be this problem in Python itself. If it is, you would need  
> to use
> Python 2.3.4 or earlier version. I don't know if a version of Python  which
> patches this problem has been released yet or not.


I used python 2.3.5 too. The testhandler is giving me this output even for
the "restricted" mode testcase. So it might be it's same primary bug as
with the index.py problems reported today.

General information

Mod_python error: "PythonHandler mod_python.testhandler"

Traceback (most recent call last):

 File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
   result = object(req)

 File "/usr/lib/python2.4/site-packages/mod_python/testhandler.py", line 120, in handler
   req.write('

\n'%( File "/usr/lib/python2.4/posixpath.py", line 60, in join if b.startswith('/'): AttributeError: 'NoneType' object has no attribute 'startswith'
Apache version    Apache
Apache threaded MPM    Yes, maximum 25 threads / process
Apache forked MPM    Yes, maximum 6 processes
Apache server root    /usr/lib/apache2
Apache document root    /var/www/localhost/htdocs
%s    %s (view last 100 lines 


.htaccess contained:

AddHandler mod_python .py
# PythonHandler mod_python.publisher
# the testhandler gives interresting debug info when something goes wrong
PythonHandler mod_python.testhandler
# make sure processes started under same apache VirtualHost do not have a collision
PythonInterpPerDirectory On
PythonDebug On



Martin
From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 19:52:06 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Mon Jul  4 19:52:12 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <b72bfb141a13fe8690c0c80ff8e8e67b@dscpl.com.au>
References: <42C946B8.2050501@ribosome.natur.cuni.cz>
	<1120488978.6034.10.camel@horologium>
	<42C94F9D.2090402@ribosome.natur.cuni.cz>
	<61cc3f2f474b9416d9e0b1270ca72a5a@dscpl.com.au>
	<42C9B50F.1090603@ribosome.natur.cuni.cz>
	<b72bfb141a13fe8690c0c80ff8e8e67b@dscpl.com.au>
Message-ID: <42C9CBA6.2040507@ribosome.natur.cuni.cz>

Graham Dumpleton wrote:
> 
> On 05/07/2005, at 8:15 AM, Martin MOKREJ? wrote:
> 
>> Graham Dumpleton wrote:
>>
>>> Enable mod_python handler inside the context of a "Directory" directive
>>> and not at global scope within Apache configuration file.
>>> <Directory /home/mmokrejs/public_html/IRES2>
>>> AddHandler mod_python .py
>>> PythonHandler mod_python.publisher
>>> PythonDebug On
>>> </Directory>
>>> If web_settings is in that actual directory, it should then be found.
>>
>>
>> Well, you are right I have it at the moment in the "global scope".
>> I used to have it under the "Directory" directive. why doesn't that
>> approach work?
> 
> 
> If the PythonHandler directive appears at global scope or within the
> context of a Location directory, there is no relationship to a physical
> directory. When there is a relationship to a physical directory, then
> mod_python will add the root directory where PythonHandler is specified
> for automatically into the Python module search path.
> 
> Having done this, if any publisher module uses the "import" statement
> explicitly to import a module where the module is in that root directory
> where PythonHandler was specified for, the module will be found okay.
> 
> Note that this only applies for child modules in the root directory where
> PythonHandler directive was specified. If you had publisher modules in
> a subdirectory and it used "import" to get to a child module in the sub
> directory, it will not work as the subdirectory isn't added to the
> Python module search path.
> 
> Because of problems with mixing "import" with the mod_python module
> loader, you are actually better of using:
> 
>   from mod_python import apache
>   import os
> 
>   directory = os.path.dirname(__file__)
> 
>   web_settings = apache.import_module("web_settings",path=[directory])
> 
> Here you are explicitly telling it which directory to get the module
> from and avoid all problems with things not being found in the Python
> module search path. You should only use this for loading in your own
> modules though, not standard Python modules.

Graham, how can I fork the code so that for normal "console" use it would do
normal import and that when running under mod_apache it would run this trick?
I use the modules also for command-line tests and some utilities.
What variable should I look for in __dict__.keys()? ;-)
From grahamd at dscpl.com.au  Mon Jul  4 20:05:05 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul  4 20:05:10 2005
Subject: [mod_python] mod_python claims it cannot find a module
Message-ID: <1120521905.24685@dscpl.user.openhosting.com>

=?windows-1252?Q?Martin_MOKREJ=8A?= wrote ..
> > Because of problems with mixing "import" with the mod_python module
> > loader, you are actually better of using:
> > 
> >   from mod_python import apache
> >   import os
> > 
> >   directory = os.path.dirname(__file__)
> > 
> >   web_settings = apache.import_module("web_settings",path=[directory])
> > 
> > Here you are explicitly telling it which directory to get the module
> > from and avoid all problems with things not being found in the Python
> > module search path. You should only use this for loading in your own
> > modules though, not standard Python modules.
> 
> Graham, how can I fork the code so that for normal "console" use it would
> do
> normal import and that when running under mod_apache it would run this
> trick?
> I use the modules also for command-line tests and some utilities.
> What variable should I look for in __dict__.keys()? ;-)

You could use:

  try:
    from mod_python import apache
    directory = os.path.dirname(__file__)
    web_settings = apache.import_module("web_settings",path=[directory])
  except:
    import web_settings

The import of "apache" from a command line script will fail and thus
it will fall through to normal "import" statement for importing web_settings.

There are cleaner ways, but it gets quite complicated and the mod_python
module importing system as implemented by apache.import_module() has
some problems at  the moment which makes it even worse. This all might
get solved in a future version of mod_python and at that point the cleaner
way may be available.

Graham
From grahamd at dscpl.com.au  Mon Jul  4 20:34:46 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul  4 20:34:57 2005
Subject: [mod_python] Where to get latest sources of mod_python?
Message-ID: <1120523686.10643@dscpl.user.openhosting.com>

The testhandler problem lies in:

    req.write('<tr><td><code>%s</code></td><td><code>%s</code> (<a href="?view_log=1" target="_new">view last 100 lines</a>)</td></tr>\n'%(
        'Apache error log',
        os.path.join(apache.server_root(),req.server.error_fname)

The value of req.server.error_fname is possibly None and so it fails.

The testhandler probably needs to be modified to cope with this.

Graham

=?windows-1252?Q?Martin_MOKREJ=8A?= wrote ..
> 
> 
> Graham Dumpleton wrote:
> > 
> > On 04/07/2005, at 11:01 PM, Martin MOKREJ? wrote:
> > 
> >> Hi,
> >>  I have some weird problem with module imports under mod_python.
> >> While reloading the webpage on every second reload I get a module  
> >> import error.
> >>
> >>  Similarly, I'm getting python executed in "restricted" mode just after
> >> I use (not import) cElementTree module. Fredrik Lundh mentioned some
> >> users
> >> had such problems when expat library was different to the used by  apache
> >> itself. I got everything recompiled but nothing changed. I use Gentoo
> >> linux, btw. I have no problems when using elementtree to parse xml 
> >> files.
> > 
> > 
> > Restricted mode problems tend to relate to use of Python 2.3.5, Python
> 2.4
> > or later versions, and a Python code module which is imported making
> > use of
> > threads. See:
> > 
> >    http://sourceforge.net/tracker/index.php? 
> > func=detail&aid=1163563&group_id=5470&atid=105470
> > 
> > Ie., it may be this problem in Python itself. If it is, you would need
> > to use
> > Python 2.3.4 or earlier version. I don't know if a version of Python
> which
> > patches this problem has been released yet or not.
> 
> 
> I used python 2.3.5 too. The testhandler is giving me this output even
> for
> the "restricted" mode testcase. So it might be it's same primary bug as
> with the index.py problems reported today.
> 
> General information
> 
> Mod_python error: "PythonHandler mod_python.testhandler"
> 
> Traceback (most recent call last):
> 
>  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299,
> in HandlerDispatch
>    result = object(req)
> 
>  File "/usr/lib/python2.4/site-packages/mod_python/testhandler.py", line
> 120, in handler
>    req.write('
> 
> \n'%( File "/usr/lib/python2.4/posixpath.py", line 60, in join if b.startswith('/'):
> AttributeError: 'NoneType' object has no attribute 'startswith'
> Apache version    Apache
> Apache threaded MPM    Yes, maximum 25 threads / process
> Apache forked MPM    Yes, maximum 6 processes
> Apache server root    /usr/lib/apache2
> Apache document root    /var/www/localhost/htdocs
> %s    %s (view last 100 lines 
> 
> 
> .htaccess contained:
> 
> AddHandler mod_python .py
> # PythonHandler mod_python.publisher
> # the testhandler gives interresting debug info when something goes wrong
> PythonHandler mod_python.testhandler
> # make sure processes started under same apache VirtualHost do not have
> a collision
> PythonInterpPerDirectory On
> PythonDebug On
> 
> 
> 
> Martin
From mmokrejs at ribosome.natur.cuni.cz  Mon Jul  4 20:40:22 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Mon Jul  4 20:40:27 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <1120523686.10643@dscpl.user.openhosting.com>
References: <1120523686.10643@dscpl.user.openhosting.com>
Message-ID: <42C9D6F6.3000906@ribosome.natur.cuni.cz>

Does this help to understand why the problem occurs in my case?

# grep -v '#' /etc/apache2/httpd.conf  | grep Log
ErrorLog logs/error_log
LogLevel warn
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %b" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent
CustomLog logs/access_log common
# grep -v '#' /etc/apache2/modules.d/*  | grep Log
/etc/apache2/modules.d/41_mod_ssl.default-vhost.conf:ErrorLog logs/ssl_error_log
/etc/apache2/modules.d/41_mod_ssl.default-vhost.conf:   TransferLog logs/ssl_access_log
/etc/apache2/modules.d/41_mod_ssl.default-vhost.conf:CustomLog logs/ssl_request_log \
#

Martin

Graham Dumpleton wrote:
> The testhandler problem lies in:
> 
>     req.write('<tr><td><code>%s</code></td><td><code>%s</code> (<a href="?view_log=1" target="_new">view last 100 lines</a>)</td></tr>\n'%(
>         'Apache error log',
>         os.path.join(apache.server_root(),req.server.error_fname)
> 
> The value of req.server.error_fname is possibly None and so it fails.
> 
> The testhandler probably needs to be modified to cope with this.
> 
> Graham
> 
> =?windows-1252?Q?Martin_MOKREJ=8A?= wrote ..
> 
>>
>>Graham Dumpleton wrote:
>>
>>>On 04/07/2005, at 11:01 PM, Martin MOKREJ? wrote:
>>>
>>>
>>>>Hi,
>>>> I have some weird problem with module imports under mod_python.
>>>>While reloading the webpage on every second reload I get a module  
>>>>import error.
>>>>
>>>> Similarly, I'm getting python executed in "restricted" mode just after
>>>>I use (not import) cElementTree module. Fredrik Lundh mentioned some
>>>>users
>>>>had such problems when expat library was different to the used by  apache
>>>>itself. I got everything recompiled but nothing changed. I use Gentoo
>>>>linux, btw. I have no problems when using elementtree to parse xml 
>>>>files.
>>>
>>>
>>>Restricted mode problems tend to relate to use of Python 2.3.5, Python
>>
>>2.4
>>
>>>or later versions, and a Python code module which is imported making
>>>use of
>>>threads. See:
>>>
>>>   http://sourceforge.net/tracker/index.php? 
>>>func=detail&aid=1163563&group_id=5470&atid=105470
>>>
>>>Ie., it may be this problem in Python itself. If it is, you would need
>>>to use
>>>Python 2.3.4 or earlier version. I don't know if a version of Python
>>
>>which
>>
>>>patches this problem has been released yet or not.
>>
>>
>>I used python 2.3.5 too. The testhandler is giving me this output even
>>for
>>the "restricted" mode testcase. So it might be it's same primary bug as
>>with the index.py problems reported today.
>>
>>General information
>>
>>Mod_python error: "PythonHandler mod_python.testhandler"
>>
>>Traceback (most recent call last):
>>
>> File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299,
>>in HandlerDispatch
>>   result = object(req)
>>
>> File "/usr/lib/python2.4/site-packages/mod_python/testhandler.py", line
>>120, in handler
>>   req.write('
>>
>>\n'%( File "/usr/lib/python2.4/posixpath.py", line 60, in join if b.startswith('/'):
>>AttributeError: 'NoneType' object has no attribute 'startswith'
>>Apache version    Apache
>>Apache threaded MPM    Yes, maximum 25 threads / process
>>Apache forked MPM    Yes, maximum 6 processes
>>Apache server root    /usr/lib/apache2
>>Apache document root    /var/www/localhost/htdocs
>>%s    %s (view last 100 lines 
>>
>>
>>.htaccess contained:
>>
>>AddHandler mod_python .py
>># PythonHandler mod_python.publisher
>># the testhandler gives interresting debug info when something goes wrong
>>PythonHandler mod_python.testhandler
>># make sure processes started under same apache VirtualHost do not have
>>a collision
>>PythonInterpPerDirectory On
>>PythonDebug On
From nicolas.lehuen at gmail.com  Tue Jul  5 02:11:27 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Tue Jul  5 02:11:33 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <1120521905.24685@dscpl.user.openhosting.com>
References: <1120521905.24685@dscpl.user.openhosting.com>
Message-ID: <c298f2d7050704231118a75af7@mail.gmail.com>

Thanks Graham, this was getting a little bit tricky for me...

AFAIK the publisher doesn't try to import index.py if importing the 
requested file fails. However, at one point I'm testing whether the 
requested file exists or not like this :

####################### The publisher handler himself 
########################## 

def handler(req):

 req.allow_methods(["GET", "POST", "HEAD"])
 if req.method not in ["GET", "POST", "HEAD"]:
 raise apache.SERVER_RETURN, apache.HTTP_METHOD_NOT_ALLOWED

 # if the file exists, req.finfo is not None
 if req.finfo:
 
 # The file exists, so we have a request of the form :
 # /directory/[module][/func_path]
 
 # we check whether there is a file name or not
 path, filename = split(req.filename)
 if not filename:
 
 # if not, we look for index.py
 req.filename = join(path, 'index.py')

 # Now we build the function path
 if not req.path_info or req.path_info=='/':

 # we don't have a path info, or it's just a slash,
 # so we'll call index
 func_path = 'index'

 else:

 # we have a path_info, so we use it, removing the first slash
 func_path = req.path_info[1:]
 
 else:
 
 # First we check if there is a Python module with that name
 # just by adding a .py extension
 if isfile(req.filename+'.py'):

 req.filename += '.py'
 
 # Now we build the function path
 if not req.path_info or req.path_info=='/':
 
 # we don't have a path info, or it's just a slash,
 # so we'll call index
 func_path = 'index'
 
 else:
 
 # we have a path_info, so we use it, removing the first slash
 func_path = req.path_info[1:]
 else:

 # The file does not exist, so it seems we are in the
 # case of a request in the form :
 # /directory/func_path
 
 # we'll just insert the module name index.py in the middle
 path, func_path = split(req.filename)
 req.filename = join(path, 'index.py')
 
 # I don't know if it's still possible to have a path_info
 # but if we have one, we append it to the filename which
 # is considered as a path_info.
 if req.path_info:
 func_path = func_path + req.path_info

What I suspect in Martin's case is that req.finfo returns None because of 
the global scope of his PythonHandler configuration, or something like that. 
Therefore, the publisher ends up executing the last branch which splits the 
requested file name into directory + func_path and adds index.py to the 
directory. I'll try to reproduce this behaviour and let you know about this.

Regards,
Nicolas

2005/7/5, Graham Dumpleton <grahamd@dscpl.com.au>:
> 
> =?windows-1252?Q?Martin_MOKREJ=8A?= wrote ..
> > > Because of problems with mixing "import" with the mod_python module
> > > loader, you are actually better of using:
> > >
> > > from mod_python import apache
> > > import os
> > >
> > > directory = os.path.dirname(__file__)
> > >
> > > web_settings = apache.import_module("web_settings",path=[directory])
> > >
> > > Here you are explicitly telling it which directory to get the module
> > > from and avoid all problems with things not being found in the Python
> > > module search path. You should only use this for loading in your own
> > > modules though, not standard Python modules.
> >
> > Graham, how can I fork the code so that for normal "console" use it 
> would
> > do
> > normal import and that when running under mod_apache it would run this
> > trick?
> > I use the modules also for command-line tests and some utilities.
> > What variable should I look for in __dict__.keys()? ;-)
> 
> You could use:
> 
> try:
> from mod_python import apache
> directory = os.path.dirname(__file__)
> web_settings = apache.import_module("web_settings",path=[directory])
> except:
> import web_settings
> 
> The import of "apache" from a command line script will fail and thus
> it will fall through to normal "import" statement for importing 
> web_settings.
> 
> There are cleaner ways, but it gets quite complicated and the mod_python
> module importing system as implemented by apache.import_module() has
> some problems at the moment which makes it even worse. This all might
> get solved in a future version of mod_python and at that point the cleaner
> way may be available.
> 
> Graham
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050705/df9d4d95/attachment.html
From nicolas.lehuen at gmail.com  Tue Jul  5 02:18:30 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Tue Jul  5 02:18:36 2005
Subject: [mod_python] Where to get latest sources of mod_python?
In-Reply-To: <1120523686.10643@dscpl.user.openhosting.com>
References: <1120523686.10643@dscpl.user.openhosting.com>
Message-ID: <c298f2d705070423182401f39e@mail.gmail.com>

Yup, I've corrected this in the subversion repository.

2005/7/5, Graham Dumpleton <grahamd@dscpl.com.au>:
> 
> The testhandler problem lies in:
> 
> req.write('<tr><td><code>%s</code></td><td><code>%s</code> (<a 
> href="?view_log=1" target="_new">view last 100 lines</a>)</td></tr>\n'%(
> 'Apache error log',
> os.path.join(apache.server_root(),req.server.error_fname)
> 
> The value of req.server.error_fname is possibly None and so it fails.
> 
> The testhandler probably needs to be modified to cope with this.
> 
> Graham
> 
> =?windows-1252?Q?Martin_MOKREJ=8A?= wrote ..
> >
> >
> > Graham Dumpleton wrote:
> > >
> > > On 04/07/2005, at 11:01 PM, Martin MOKREJ? wrote:
> > >
> > >> Hi,
> > >> I have some weird problem with module imports under mod_python.
> > >> While reloading the webpage on every second reload I get a module
> > >> import error.
> > >>
> > >> Similarly, I'm getting python executed in "restricted" mode just 
> after
> > >> I use (not import) cElementTree module. Fredrik Lundh mentioned some
> > >> users
> > >> had such problems when expat library was different to the used by 
> apache
> > >> itself. I got everything recompiled but nothing changed. I use Gentoo
> > >> linux, btw. I have no problems when using elementtree to parse xml
> > >> files.
> > >
> > >
> > > Restricted mode problems tend to relate to use of Python 2.3.5, Python
> > 2.4
> > > or later versions, and a Python code module which is imported making
> > > use of
> > > threads. See:
> > >
> > > http://sourceforge.net/tracker/index.php?
> > > func=detail&aid=1163563&group_id=5470&atid=105470
> > >
> > > Ie., it may be this problem in Python itself. If it is, you would need
> > > to use
> > > Python 2.3.4 or earlier version. I don't know if a version of Python
> > which
> > > patches this problem has been released yet or not.
> >
> >
> > I used python 2.3.5 too. The testhandler is giving me this output even
> > for
> > the "restricted" mode testcase. So it might be it's same primary bug as
> > with the index.py problems reported today.
> >
> > General information
> >
> > Mod_python error: "PythonHandler mod_python.testhandler"
> >
> > Traceback (most recent call last):
> >
> > File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299,
> > in HandlerDispatch
> > result = object(req)
> >
> > File "/usr/lib/python2.4/site-packages/mod_python/testhandler.py", line
> > 120, in handler
> > req.write('
> >
> > \n'%( File "/usr/lib/python2.4/posixpath.py", line 60, in join if 
> b.startswith('/'):
> > AttributeError: 'NoneType' object has no attribute 'startswith'
> > Apache version Apache
> > Apache threaded MPM Yes, maximum 25 threads / process
> > Apache forked MPM Yes, maximum 6 processes
> > Apache server root /usr/lib/apache2
> > Apache document root /var/www/localhost/htdocs
> > %s %s (view last 100 lines
> >
> >
> > .htaccess contained:
> >
> > AddHandler mod_python .py
> > # PythonHandler mod_python.publisher
> > # the testhandler gives interresting debug info when something goes 
> wrong
> > PythonHandler mod_python.testhandler
> > # make sure processes started under same apache VirtualHost do not have
> > a collision
> > PythonInterpPerDirectory On
> > PythonDebug On
> >
> >
> >
> > Martin
> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050705/8995c160/attachment-0001.html
From grahamd at dscpl.com.au  Tue Jul  5 07:19:06 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Jul  5 07:19:54 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <c298f2d7050704231118a75af7@mail.gmail.com>
References: <1120521905.24685@dscpl.user.openhosting.com>
	<c298f2d7050704231118a75af7@mail.gmail.com>
Message-ID: <2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>


On 05/07/2005, at 4:11 PM, Nicolas Lehuen wrote:
>
>  What I suspect in Martin's case is that req.finfo returns None 
> because of the global scope of his PythonHandler configuration, or 
> something like that. Therefore, the publisher ends up executing the 
> last branch which splits the requested file name into directory + 
> func_path and adds index.py to the directory. I'll try to reproduce 
> this behaviour and let you know about this.

Except that Martin wasn't using your latest version of the publisher,
but that in the 3.1.[34] as I understand it, so I don't think you can
compare it to what you do now.

What you do now may well work fine, I have never sat down to look at
it properly. Although it worries me a bit that you use req.finfo as 
isn't
that making an assumption that the file that Apache identifies is 
actually
the Python code file when it may not. Just speculating, but what happens
if someone was using:

   SetHandler mod_python
   PythonHandler mod_python.publisher | .html

and there existed a "xxx.py" and xxx.html". Here req.finfo would refer 
to
the ".html" file and not ".py" file. Will this matter? Anyway, the use 
of
req.finfo seems confusing to me and not sure how one benefits except
maybe to try and avoid a stat call.

One day I will sit down and look at it properly, but no time at the 
moment.

Graham


From mmokrejs at ribosome.natur.cuni.cz  Tue Jul  5 07:25:48 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Tue Jul  5 07:26:14 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
References: <1120521905.24685@dscpl.user.openhosting.com>
	<c298f2d7050704231118a75af7@mail.gmail.com>
	<2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
Message-ID: <42CA6E3C.8000606@ribosome.natur.cuni.cz>

Graham Dumpleton wrote:
> 
> On 05/07/2005, at 4:11 PM, Nicolas Lehuen wrote:
> 
>>
>>  What I suspect in Martin's case is that req.finfo returns None 
>> because of the global scope of his PythonHandler configuration, or 
>> something like that. Therefore, the publisher ends up executing the 
>> last branch which splits the requested file name into directory + 
>> func_path and adds index.py to the directory. I'll try to reproduce 
>> this behaviour and let you know about this.
> 
> 
> Except that Martin wasn't using your latest version of the publisher,
> but that in the 3.1.[34] as I understand it, so I don't think you can

But yesterday I have upgraded to the snapshot posted. ;-)

Martin
From mmokrejs at ribosome.natur.cuni.cz  Tue Jul  5 07:58:21 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Tue Jul  5 07:58:32 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
References: <1120521905.24685@dscpl.user.openhosting.com>
	<c298f2d7050704231118a75af7@mail.gmail.com>
	<2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
Message-ID: <42CA75DD.6070807@ribosome.natur.cuni.cz>



Graham Dumpleton wrote:
> 
> On 05/07/2005, at 4:11 PM, Nicolas Lehuen wrote:
> 
>>
>>  What I suspect in Martin's case is that req.finfo returns None 
>> because of the global scope of his PythonHandler configuration, or 
>> something like that. Therefore, the publisher ends up executing the 
>> last branch which splits the requested file name into directory + 
>> func_path and adds index.py to the directory. I'll try to reproduce 
>> this behaviour and let you know about this.
> 
> 
> Except that Martin wasn't using your latest version of the publisher,
> but that in the 3.1.[34] as I understand it, so I don't think you can
> compare it to what you do now.

I have compiled current svn version of mod_python against python-2.3.4
to obey the bugs in python-2.3.5 through 2.4.1. To recap the situation,
I have at the moment NO GLOBAL PythonHandler in httpd.conf, I use
only .htaccess (aka Directory directive):

# .htaccess:
AddHandler mod_python .py
PythonHandler mod_python.publisher
PythonDebug On

Options -Indexes



URL: http://aquarius/~mmokrejs/conference/index.py

ERROR:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "/usr/lib/python2.3/site-packages/mod_python/publisher.py", line 187, in handler
    module = page_cache[req]

  File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line 77, in __getitem__
    return self._checkitem(name)[2]

  File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line 118, in _checkitem
    opened = self.check(key, name, entry)

  File "/usr/lib/python2.3/site-packages/mod_python/publisher.py", line 67, in check
    return ModuleCache.check(self, key, req, entry)

  File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line 249, in check
    opened = file(key, self.mode)

IOError: [Errno 2] No such file or directory: '/home/mmokrejs/public_html/conference/index.py'




Alternatively, when I just switch to testhandler under same setup, I get:




AddHandler mod_python .py
PythonHandler mod_python.testhandler
PythonDebug On

Options -Indexes

URL: http://aquarius/~mmokrejs/conference/index.py

No error, but output from testhandler is attached. :( I thought it will tell me something else. ;-)
I think request.notes['ap-mime-exceptions-list'] contains some weird characters, at least while
viewing this HTMLized output. ;)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050705/63925942/index.html
From grahamd at dscpl.com.au  Tue Jul  5 08:06:33 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Jul  5 08:08:08 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <42CA75DD.6070807@ribosome.natur.cuni.cz>
References: <1120521905.24685@dscpl.user.openhosting.com>
	<c298f2d7050704231118a75af7@mail.gmail.com>
	<2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
	<42CA75DD.6070807@ribosome.natur.cuni.cz>
Message-ID: <c215775e225079f10bccb2d2fc2deb7e@dscpl.com.au>

Nicolas, you should probably consider running everything through  
cgi.escape() when
sticking stuff into the HTML. For example, Apache configuration uses  
'<...>' and these
aren't being escaped. The HTML doesn't therefore display properly.

Not sure if this will address the weird characters or not.

On 05/07/2005, at 9:58 PM, Martin MOKREJ? wrote:

>
>
> Graham Dumpleton wrote:
>> On 05/07/2005, at 4:11 PM, Nicolas Lehuen wrote:
>>>
>>>  What I suspect in Martin's case is that req.finfo returns None  
>>> because of the global scope of his PythonHandler configuration, or  
>>> something like that. Therefore, the publisher ends up executing the  
>>> last branch which splits the requested file name into directory +  
>>> func_path and adds index.py to the directory. I'll try to reproduce  
>>> this behaviour and let you know about this.
>> Except that Martin wasn't using your latest version of the publisher,
>> but that in the 3.1.[34] as I understand it, so I don't think you can
>> compare it to what you do now.
>
> I have compiled current svn version of mod_python against python-2.3.4
> to obey the bugs in python-2.3.5 through 2.4.1. To recap the situation,
> I have at the moment NO GLOBAL PythonHandler in httpd.conf, I use
> only .htaccess (aka Directory directive):
>
> # .htaccess:
> AddHandler mod_python .py
> PythonHandler mod_python.publisher
> PythonDebug On
>
> Options -Indexes
>
>
>
> URL: http://aquarius/~mmokrejs/conference/index.py
>
> ERROR:
>
> Mod_python error: "PythonHandler mod_python.publisher"
>
> Traceback (most recent call last):
>
>  File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line  
> 299, in HandlerDispatch
>    result = object(req)
>
>  File "/usr/lib/python2.3/site-packages/mod_python/publisher.py", line  
> 187, in handler
>    module = page_cache[req]
>
>  File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line 77,  
> in __getitem__
>    return self._checkitem(name)[2]
>
>  File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line  
> 118, in _checkitem
>    opened = self.check(key, name, entry)
>
>  File "/usr/lib/python2.3/site-packages/mod_python/publisher.py", line  
> 67, in check
>    return ModuleCache.check(self, key, req, entry)
>
>  File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line  
> 249, in check
>    opened = file(key, self.mode)
>
> IOError: [Errno 2] No such file or directory:  
> '/home/mmokrejs/public_html/conference/index.py'
>
>
>
>
> Alternatively, when I just switch to testhandler under same setup, I  
> get:
>
>
>
>
> AddHandler mod_python .py
> PythonHandler mod_python.testhandler
> PythonDebug On
>
> Options -Indexes
>
> URL: http://aquarius/~mmokrejs/conference/index.py
>
> No error, but output from testhandler is attached. :( I thought it  
> will tell me something else. ;-)
> I think request.notes['ap-mime-exceptions-list'] contains some weird  
> characters, at least while
> viewing this HTMLized output. ;)
> General information
>
> Apache version
> Apache
>
> Apache threaded MPM
> Yes, maximum 25 threads / process
>
> Apache forked MPM
> Yes, maximum 6 processes
>
> Apache server root
> /usr/lib/apache2
>
> Apache document root
> /var/www/localhost/htdocs
>
> Apache error log
> None
>
> Python sys.version
> 2.3.4 (#1, Jul 5 2005, 12:35:17) [GCC 3.4.4 (Gentoo 3.4.4,  
> ssp-3.4.4-1.0, pie-8.7.8)]
>
> Python sys.path
> /home/mmokrejs/public_html/conference/
> /usr/lib/python23.zip
> /usr/lib/python2.3
> /usr/lib/python2.3/plat-linux2
> /usr/lib/python2.3/lib-tk
> /usr/lib/python2.3/lib-dynload
> /usr/lib/portage/pym
> /usr/lib/python2.3/site-packages
>
> Python interpreter name
> aquarius.doma
>
> mod_python.publisher available
> Yes
>
> mod_python.psp available
> Yes
>
> Request input headers
>
> Key
> Value
>
> Host
> aquarius
>
> User-Agent
> Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) Gecko/20050511
>
> Accept
> text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/ 
> plain;q=0.8,image/png,*/*;q=0.5
>
> Accept-Language
> cs,en-us;q=0.7,en;q=0.3
>
> Accept-Encoding
> gzip,deflate
>
> Accept-Charset
> ISO-8859-2,utf-8;q=0.7,*;q=0.7
>
> Keep-Alive
> 300
>
> Connection
> keep-alive
>
> Pragma
> no-cache
>
> Cache-Control
> no-cache
>
> Request environment
>
> Key
> Value
>
> GATEWAY_INTERFACE
> CGI/1.1
>
> SERVER_PROTOCOL
> HTTP/1.1
>
> REQUEST_METHOD
> GET
>
> QUERY_STRING
>
> REQUEST_URI
> /~mmokrejs/conference/index.py
>
> SCRIPT_NAME
> /~mmokrejs/conference/index.py
>
> HTTP_HOST
> aquarius
>
> HTTP_USER_AGENT
> Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) Gecko/20050511
>
> HTTP_ACCEPT
> text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/ 
> plain;q=0.8,image/png,*/*;q=0.5
>
> HTTP_ACCEPT_LANGUAGE
> cs,en-us;q=0.7,en;q=0.3
>
> HTTP_ACCEPT_ENCODING
> gzip,deflate
>
> HTTP_ACCEPT_CHARSET
> ISO-8859-2,utf-8;q=0.7,*;q=0.7
>
> HTTP_KEEP_ALIVE
> 300
>
> HTTP_CONNECTION
> keep-alive
>
> HTTP_PRAGMA
> no-cache
>
> HTTP_CACHE_CONTROL
> no-cache
>
> PATH
> /bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin:/opt/intel_cc_80/bin:/ 
> usr/local/Acrobat5/bin:/usr/local/mysql/bin:/bin:/usr/bin:/usr/ 
> heimdal/bin:/usr/local/sbin:/usr/local/bin:/usr/afs/bin:/usr/local/ 
> sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin:/usr/i686- 
> pc-linux-gnu/gcc-bin/3.4.4:/opt/intel/compiler81/bin:/opt/intel/ 
> compiler70/ia32/bin:/opt/blackdown-jdk-1.4.2.02/bin:/opt/blackdown- 
> jdk-1.4.2.02/jre/bin:/usr/qt/3/bin:/usr/kde/3.4/sbin:/usr/kde/3.4/bin: 
> /usr/kde/3.3/sbin:/usr/kde/3.3/bin:/usr/qt/2/bin:/opt/vmware/bin:/opt/ 
> XnView:/var/qmail/bin
>
> SERVER_SIGNATURE
> Apache Server at aquarius Port 80
>
> SERVER_SOFTWARE
> Apache
>
> SERVER_NAME
> aquarius
>
> SERVER_ADDR
> 192.168.0.11
>
> SERVER_PORT
> 80
>
> REMOTE_ADDR
> 192.168.0.11
>
> DOCUMENT_ROOT
> /var/www/localhost/htdocs
>
> SERVER_ADMIN
> root@localhost
>
> SCRIPT_FILENAME
> /home/mmokrejs/public_html/conference/index.py
>
> REMOTE_PORT
> 50990
>
> Request configuration
>
> Key
> Value
>
> PythonDebug
> 1
>
> Request options
>
> Key
> Value
>
> Request notes
>
> Key
> Value
>
> python_init_ran
> 1
>
> mod_userdir_user
> mmokrejs
>
> ap-mime-exceptions-list
> ? 
>
> Server configuration
>
> Key
> Value
>
> PythonDebug
> 1
>
> Server configuration tree
> PidFile "/var/run/apache2.pid"
> Timeout 300
> KeepAlive On
> MaxKeepAliveRequests 100
> KeepAliveTimeout 15
> StartServers 2
> ThreadsPerChild 25
> MinSpareThreads 25
> MaxSpareThreads 75
> MaxClients 150
> MaxRequestsPerChild 0
> Listen 80
> AliasMatch ^/manual(?:/(?:de|en|es|fr|ja|ko|ru))?(/.*)?$  
> "/usr/share/doc/apache-2.0.53/manual$1"
>     Options Indexes
>     AllowOverride None
>     Order allow,deny
>     Allow from all
>             SetHandler type-map
>     SetEnvIf Request_URI ^/manual/(de|en|es|fr|ja|ko|ru)/  
> prefer-language=$1
>     RedirectMatch 301 ^/manual(?:/(de|en|es|fr|ja|ko|ru)){2,}(/.*)?$  
> /manual/$1$2
> SSLRandomSeed startup builtin
> SSLRandomSeed connect builtin
> Listen 443
> AddType application/x-x509-ca-cert .crt
> AddType application/x-pkcs7-crl    .crl
> SSLPassPhraseDialog builtin
> SSLSessionCache shm:/var/cache/apache2/ssl_scache(512000)
> SSLSessionCacheTimeout 300
> SSLMutex file:/var/cache/apache2/ssl_mutex
>     DocumentRoot "/var/www/localhost/htdocs"
>     ServerName localhost:443
>     ServerAdmin root@localhost
>     ErrorLog logs/ssl_error_log
>     TransferLog logs/ssl_access_log
>     SSLEngine on
>     SSLCipherSuite  
> ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
>     SSLCertificateFile conf/ssl/server.crt
>     SSLCertificateKeyFile conf/ssl/server.key
>             SSLOptions +StdEnvVars
>             SSLOptions +StdEnvVars
>     SetEnvIf User-Agent ".*MSIE.*" nokeepalive ssl-unclean-shutdown     
>  downgrade-1.0 force-response-1.0
>     CustomLog logs/ssl_request_log           "%t %h %{SSL_PROTOCOL}x  
> %{SSL_CIPHER}x \"%r\" %b"
>     RewriteEngine On
>     RewriteOptions inherit
> Alias /webalizer "/var/www/webalizer"
>     Options None
>     AllowOverride None
>     Order allow,deny
>     Allow from all
> User apache
> Group apache
> ServerAdmin root@localhost
> UseCanonicalName Off
>     Options FollowSymLinks
>     AllowOverride None
> UserDir public_html
>     AllowOverride All
>     Options -MultiViews -Indexes SymLinksIfOwnerMatch IncludesNoExec
>             Order allow,deny
>         Allow from all
>             Order deny,allow
>         Deny from all
> DirectoryIndex index.html index.html.var
> AccessFileName .htaccess
>     Order allow,deny
>     Deny from all
> TypesConfig /etc/mime.types
> DefaultType text/plain
> HostnameLookups Off
> ErrorLog logs/error_log
> LogLevel warn
> LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\"  
> \"%{User-Agent}i\"" combined
> LogFormat "%h %l %u %t \"%r\" %>s %b" common
> LogFormat "%{Referer}i -> %U" referer
> LogFormat "%{User-agent}i" agent
> CustomLog logs/access_log common
> ServerTokens Prod
> ServerSignature On
> Alias /icons/ "/var/www/localhost/icons/"
>     Options Indexes -MultiViews
>     AllowOverride None
>     Order allow,deny
>     Allow from all
> ScriptAlias /cgi-bin/ /var/www/localhost/cgi-bin/
> ScriptAlias /protected-cgi-bin/ /var/www/localhost/protected-cgi-bin/
>     AllowOverride None
>     Options None
>     Order allow,deny
>     Allow from all
> IndexOptions FancyIndexing VersionSort
> AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip
> AddIconByType (TXT,/icons/text.gif) text/*
> AddIconByType (IMG,/icons/image2.gif) image/*
> AddIconByType (SND,/icons/sound2.gif) audio/*
> AddIconByType (VID,/icons/movie.gif) video/*
> AddIcon /icons/binary.gif .bin .exe
> AddIcon /icons/binhex.gif .hqx
> AddIcon /icons/tar.gif .tar
> AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
> AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
> AddIcon /icons/a.gif .ps .ai .eps
> AddIcon /icons/layout.gif .html .shtml .htm .pdf
> AddIcon /icons/text.gif .txt
> AddIcon /icons/c.gif .c
> AddIcon /icons/p.gif .pl .py
> AddIcon /icons/f.gif .for
> AddIcon /icons/dvi.gif .dvi
> AddIcon /icons/uuencoded.gif .uu
> AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
> AddIcon /icons/tex.gif .tex
> AddIcon /icons/bomb.gif core
> AddIcon /icons/back.gif ..
> AddIcon /icons/hand.right.gif README
> AddIcon /icons/folder.gif ^^DIRECTORY^^
> AddIcon /icons/blank.gif ^^BLANKICON^^
> DefaultIcon /icons/unknown.gif
> ReadmeName README.html
> HeaderName HEADER.html
> IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t .svn
> AddLanguage ca .ca
> AddLanguage cs .cz .cs
> AddLanguage da .dk
> AddLanguage de .de
> AddLanguage el .el
> AddLanguage en .en
> AddLanguage eo .eo
> AddLanguage es .es
> AddLanguage et .et
> AddLanguage fr .fr
> AddLanguage he .he
> AddLanguage hr .hr
> AddLanguage it .it
> AddLanguage ja .ja
> AddLanguage ko .ko
> AddLanguage ltz .ltz
> AddLanguage nl .nl
> AddLanguage nn .nn
> AddLanguage no .no
> AddLanguage pl .po
> AddLanguage pt .pt
> AddLanguage pt-BR .pt-br
> AddLanguage ru .ru
> AddLanguage sv .sv
> AddLanguage zh-CN .zh-cn
> AddLanguage zh-TW .zh-tw
> LanguagePriority cs en ca da de el eo es et fr he hr it ja ko ltz nl  
> nn no pl pt pt-BR ru sv zh-CN zh-TW
> ForceLanguagePriority Prefer Fallback
> AddDefaultCharset ISO-8859-2
> AddCharset ISO-8859-1  .iso8859-1  .latin1
> AddCharset ISO-8859-2  .iso8859-2  .latin2 .cen
> AddCharset ISO-8859-3  .iso8859-3  .latin3
> AddCharset ISO-8859-4  .iso8859-4  .latin4
> AddCharset ISO-8859-5  .iso8859-5  .latin5 .cyr .iso-ru
> AddCharset ISO-8859-6  .iso8859-6  .latin6 .arb
> AddCharset ISO-8859-7  .iso8859-7  .latin7 .grk
> AddCharset ISO-8859-8  .iso8859-8  .latin8 .heb
> AddCharset ISO-8859-9  .iso8859-9  .latin9 .trk
> AddCharset ISO-2022-JP .iso2022-jp .jis
> AddCharset ISO-2022-KR .iso2022-kr .kis
> AddCharset ISO-2022-CN .iso2022-cn .cis
> AddCharset Big5        .Big5       .big5
> AddCharset WINDOWS-1251 .cp-1251   .win-1251
> AddCharset CP866       .cp866
> AddCharset KOI8-r      .koi8-r .koi8-ru
> AddCharset KOI8-ru     .koi8-uk .ua
> AddCharset ISO-10646-UCS-2 .ucs2
> AddCharset ISO-10646-UCS-4 .ucs4
> AddCharset UTF-8       .utf8
> AddCharset GB2312      .gb2312 .gb
> AddCharset utf-7       .utf7
> AddCharset utf-8       .utf8
> AddCharset big5        .big5 .b5
> AddCharset EUC-TW      .euc-tw
> AddCharset EUC-JP      .euc-jp
> AddCharset EUC-KR      .euc-kr
> AddCharset shift_jis   .sjis
> AddType application/x-compress .Z
> AddType application/x-gzip .gz .tgz
> AddHandler type-map var
> BrowserMatch "Mozilla/2" nokeepalive
> BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0  
> force-response-1.0
> BrowserMatch "RealPlayer 4\.0" force-response-1.0
> BrowserMatch "Java/1\.0" force-response-1.0
> BrowserMatch "JDK/1\.0" force-response-1.0
> BrowserMatch "Microsoft Data Access Internet Publishing Provider"  
> redirect-carefully
> BrowserMatch "^WebDrive" redirect-carefully
> BrowserMatch "^WebDAVFS/1.[012]" redirect-carefully
> BrowserMatch "^gnome-vfs" redirect-carefully
> NameVirtualHost *:80
>     DocumentRoot "/var/www/localhost/htdocs"
>             Options Indexes FollowSymLinks -MultiViews
>         AllowOverride None
>         Order allow,deny
>         Allow from all
>


From grahamd at dscpl.com.au  Tue Jul  5 07:43:58 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Jul  5 08:09:01 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <42CA6E3C.8000606@ribosome.natur.cuni.cz>
References: <1120521905.24685@dscpl.user.openhosting.com>
	<c298f2d7050704231118a75af7@mail.gmail.com>
	<2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
	<42CA6E3C.8000606@ribosome.natur.cuni.cz>
Message-ID: <25c0f16d618137f6985b4ed0e75575d1@dscpl.com.au>


On 05/07/2005, at 9:25 PM, Martin MOKREJ? wrote:

> Graham Dumpleton wrote:
>> On 05/07/2005, at 4:11 PM, Nicolas Lehuen wrote:
>>>
>>>  What I suspect in Martin's case is that req.finfo returns None 
>>> because of the global scope of his PythonHandler configuration, or 
>>> something like that. Therefore, the publisher ends up executing the 
>>> last branch which splits the requested file name into directory + 
>>> func_path and adds index.py to the directory. I'll try to reproduce 
>>> this behaviour and let you know about this.
>> Except that Martin wasn't using your latest version of the publisher,
>> but that in the 3.1.[34] as I understand it, so I don't think you can
>
> But yesterday I have upgraded to the snapshot posted. ;-)

Okay, I am mightily confused now. Going back to your original posting
and looking properly at the stack traces you were already using a
version newer than 3.1.4 even at that point. I have been making comments
on the basis you were using 3.1.[34]. If it has at all been helpful
then it has probably been by luck more than anything else. Can see
how Nicolas might have been confused about what I was going on about.
Anyway, since you are using unreleased code and I haven't looked
at it yet or tried to use, Nicolas will just have to sort it out. :-)

Graham

From mmokrejs at ribosome.natur.cuni.cz  Tue Jul  5 08:21:23 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Tue Jul  5 08:21:30 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <25c0f16d618137f6985b4ed0e75575d1@dscpl.com.au>
References: <1120521905.24685@dscpl.user.openhosting.com>
	<c298f2d7050704231118a75af7@mail.gmail.com>
	<2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
	<42CA6E3C.8000606@ribosome.natur.cuni.cz>
	<25c0f16d618137f6985b4ed0e75575d1@dscpl.com.au>
Message-ID: <42CA7B43.5050602@ribosome.natur.cuni.cz>



Graham Dumpleton wrote:
> 
> On 05/07/2005, at 9:25 PM, Martin MOKREJ? wrote:
> 
>> Graham Dumpleton wrote:
>>
>>> On 05/07/2005, at 4:11 PM, Nicolas Lehuen wrote:
>>>
>>>>
>>>>  What I suspect in Martin's case is that req.finfo returns None 
>>>> because of the global scope of his PythonHandler configuration, or 
>>>> something like that. Therefore, the publisher ends up executing the 
>>>> last branch which splits the requested file name into directory + 
>>>> func_path and adds index.py to the directory. I'll try to reproduce 
>>>> this behaviour and let you know about this.
>>>
>>> Except that Martin wasn't using your latest version of the publisher,
>>> but that in the 3.1.[34] as I understand it, so I don't think you can
>>
>>
>> But yesterday I have upgraded to the snapshot posted. ;-)
> 
> 
> Okay, I am mightily confused now. Going back to your original posting
> and looking properly at the stack traces you were already using a
> version newer than 3.1.4 even at that point. I have been making comments
> on the basis you were using 3.1.[34]. If it has at all been helpful

As I said I had same problems with 3.1.4 before. Maybe the problem was because
of the 2.4.1 python. I upgraded twice. Yesterday to some snapshot
from apache.org, which was svn checkout around end of June,
according to Nikolas it was missing just some recent cookies patches.

Today have installed python-2.3.4 and picked up current svn and posted
the testhandler outputs. Have to install few more packages into the python2.3
tree to play more with my testcases. Sorry for all the confusion.

> then it has probably been by luck more than anything else. Can see
> how Nicolas might have been confused about what I was going on about.
> Anyway, since you are using unreleased code and I haven't looked
> at it yet or tried to use, Nicolas will just have to sort it out. :-)

Well, you have my sources so you know what all you can reproduce.
From JoshC at usracmfg.com  Tue Jul  5 08:47:18 2005
From: JoshC at usracmfg.com (Joshua Cohen)
Date: Tue Jul  5 08:48:11 2005
Subject: [mod_python] Newbie Connection Problems
Message-ID: <F0E8C229CF67D411AA94009027C6BA1603E8F3E4@fnmail1.fncorp.com>

Johnathan, 

Thanks for the help. It was indeed SELinux that was causing the problem. Once I disabled it, the connection worked as it should. 

Thanks Again, 

Josh

-----Original Message-----
From: Johnathan Gurley [mailto:johnathan.gurley@gmail.com]
Sent: Saturday, July 02, 2005 2:40 PM
To: Joshua Cohen
Subject: Re: [mod_python] Newbie Connection Problems


Greetings,

Error code 13 is "Permission denied", so you might want to try
checking the permissions of the user that is running apache.  Also,
most people who are using Fedora report that they have a lot of
general software problems due to the default permission settings of
SELinux.  If you haven't already, try disabling it and see if the
connection goes through.  I hope this helps.

Regards,


Johnathan Gurley

On 7/1/05, Joshua Cohen <JoshC@usracmfg.com> wrote:
> Hi Everyone,
> 
> I have been programming in Python for a while now but am new to the mod_python module. I am having problems connecting to a MySQL database using MySQLdb. The database is 4.0.24 and is located on a Windows 2000 server. I am running a Fedora Core 4 PC with Apache 2/Python2.4.1 I have no issues with running a simple test script against mod_python in Apache, all is well. However, when I try to import MySQLdb and create a simple database connection I receive an error
> 
> OperationalError: (2003, "Can't connect to MySQL server on 'IPADDRESSHIDDEN' (13)")
> 
> The code is very simple and is as follows:
> 
> import MySQLdb
> 
> def sql():
>      db_connection = MySQLdb.connect(host="IPADDRESS", user="user", passwd="password", db="database", port=3306)
> 
> 
> There is no reason for me to go further with the code since I cannot even establish an connection to the DB. If I execute the same basic lines through a prompt, I am able to connect to the DB and query without any issues.
> 
> Any ideas what is going wrong? I've waisted away enough of my life searching google for a solution.
> 
> Thanks,
> 
> Josh
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From nicolas.lehuen at gmail.com  Tue Jul  5 08:50:02 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Tue Jul  5 08:50:59 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <42CA75DD.6070807@ribosome.natur.cuni.cz>
References: <1120521905.24685@dscpl.user.openhosting.com>
	<c298f2d7050704231118a75af7@mail.gmail.com>
	<2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>
	<42CA75DD.6070807@ribosome.natur.cuni.cz>
Message-ID: <c298f2d7050705055068df6e49@mail.gmail.com>

Martin,

From what I see in your source code, you should request for :

http://aquarius/~mmokrejs/conference/index_conference.py<http://aquarius/%7Emmokrejs/conference/index.py>

and not :

http://aquarius/~mmokrejs/conference/index.py<http://aquarius/%7Emmokrejs/conference/index.py>

Because you commented out the Index directive in the .htaccess. Do you still 
have the problem when fixing this ? FYI, I have installed your source code 
on my machine, and everything is OK except for the various import problems 
that have to be sorted otherwise. For instance, I've added :

PythonPath sys.path+["/path/to/conference"]

to the .htaccess file and now sql_io is correctly found.

To me, apart from the annoying import issues that can worked around (until 
we have a nice solution), everything is working OK.

Regards,

2005/7/5, Martin MOKREJ? <mmokrejs@ribosome.natur.cuni.cz>:
> 
> 
> 
> Graham Dumpleton wrote:
> >
> > On 05/07/2005, at 4:11 PM, Nicolas Lehuen wrote:
> >
> >>
> >> What I suspect in Martin's case is that req.finfo returns None
> >> because of the global scope of his PythonHandler configuration, or
> >> something like that. Therefore, the publisher ends up executing the
> >> last branch which splits the requested file name into directory +
> >> func_path and adds index.py to the directory. I'll try to reproduce
> >> this behaviour and let you know about this.
> >
> >
> > Except that Martin wasn't using your latest version of the publisher,
> > but that in the 3.1.[34] as I understand it, so I don't think you can
> > compare it to what you do now.
> 
> I have compiled current svn version of mod_python against python-2.3.4
> to obey the bugs in python-2.3.5 through 2.4.1. To recap the situation,
> I have at the moment NO GLOBAL PythonHandler in httpd.conf, I use
> only .htaccess (aka Directory directive):
> 
> # .htaccess:
> AddHandler mod_python .py
> PythonHandler mod_python.publisher
> PythonDebug On
> 
> Options -Indexes
> 
> URL: http://aquarius/~mmokrejs/conference/index.py
> 
> ERROR:
> 
> Mod_python error: "PythonHandler mod_python.publisher"
> 
> Traceback (most recent call last):
> 
> File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 299, in 
> HandlerDispatch
> result = object(req)
> 
> File "/usr/lib/python2.3/site-packages/mod_python/publisher.py", line 187, 
> in handler
> module = page_cache[req]
> 
> File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line 77, in 
> __getitem__
> return self._checkitem(name)[2]
> 
> File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line 118, in 
> _checkitem
> opened = self.check(key, name, entry)
> 
> File "/usr/lib/python2.3/site-packages/mod_python/publisher.py", line 67, 
> in check
> return ModuleCache.check(self, key, req, entry)
> 
> File "/usr/lib/python2.3/site-packages/mod_python/cache.py", line 249, in 
> check
> opened = file(key, self.mode)
> 
> IOError: [Errno 2] No such file or directory: 
> '/home/mmokrejs/public_html/conference/index.py'
> 
> Alternatively, when I just switch to testhandler under same setup, I get:
> 
> AddHandler mod_python .py
> PythonHandler mod_python.testhandler
> PythonDebug On
> 
> Options -Indexes
> 
> URL: http://aquarius/~mmokrejs/conference/index.py
> 
> No error, but output from testhandler is attached. :( I thought it will 
> tell me something else. ;-)
> I think request.notes['ap-mime-exceptions-list'] contains some weird 
> characters, at least while
> viewing this HTMLized output. ;)
> 
> 
> 
> General information 
> Apache versionApache 
> Apache threaded MPMYes, maximum 25 threads / process 
> Apache forked MPMYes, maximum 6 processes 
> Apache server root/usr/lib/apache2 
> Apache document root/var/www/localhost/htdocs 
> Apache error logNone 
> Python sys.version2.3.4 (#1, Jul 5 2005, 12:35:17) [GCC 3.4.4 (Gentoo 
> 3.4.4, ssp-3.4.4-1.0, pie-8.7.8)] 
> Python sys.path/home/mmokrejs/public_html/conference/
> /usr/lib/python23.zip
> /usr/lib/python2.3
> /usr/lib/python2.3/plat-linux2
> /usr/lib/python2.3/lib-tk
> /usr/lib/python2.3/lib-dynload
> /usr/lib/portage/pym
> /usr/lib/python2.3/site-packages
> 
> Python interpreter nameaquarius.doma 
> mod_python.publisher availableYes 
> mod_python.psp availableYes 
> Request input headers 
> KeyValue 
> Hostaquarius 
> User-AgentMozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) Gecko/20050511 
> 
> Accepttext/xml,application/xml,application/xhtml+xml,text/html;q=0.9
> ,text/plain;q=0.8,image/png,*/*;q=0.5 
> Accept-Languagecs,en-us;q=0.7,en;q=0.3 
> Accept-Encodinggzip,deflate 
> Accept-CharsetISO-8859-2,utf-8;q=0.7,*;q=0.7 
> Keep-Alive300 
> Connectionkeep-alive 
> Pragmano-cache 
> Cache-Controlno-cache 
> Request environment 
> KeyValue 
> GATEWAY_INTERFACECGI/1.1 
> SERVER_PROTOCOLHTTP/1.1 
> REQUEST_METHODGET 
> QUERY_STRING 
> REQUEST_URI/~mmokrejs/conference/index.py 
> SCRIPT_NAME/~mmokrejs/conference/index.py 
> HTTP_HOSTaquarius 
> HTTP_USER_AGENTMozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) 
> Gecko/20050511 
> HTTP_ACCEPTtext/xml,application/xml,application/xhtml+xml,text/html;q=0.9
> ,text/plain;q=0.8,image/png,*/*;q=0.5 
> HTTP_ACCEPT_LANGUAGEcs,en-us;q=0.7,en;q=0.3 
> HTTP_ACCEPT_ENCODINGgzip,deflate 
> HTTP_ACCEPT_CHARSETISO-8859-2,utf-8;q=0.7,*;q=0.7 
> HTTP_KEEP_ALIVE300 
> HTTP_CONNECTIONkeep-alive 
> HTTP_PRAGMAno-cache 
> HTTP_CACHE_CONTROLno-cache 
> 
> PATH/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin:/opt/intel_cc_80/bin:/usr/local/Acrobat5/bin:/usr/local/mysql/bin:/bin:/usr/bin:/usr/heimdal/bin:/usr/local/sbin:/usr/local/bin:/usr/afs/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin:/usr/i686-pc-linux-gnu/gcc-bin/3.4.4:/opt/intel/compiler81/bin:/opt/intel/compiler70/ia32/bin:/opt/blackdown-
> jdk-1.4.2.02/bin:/opt/blackdown-jdk-1.4.2.02/jre/bin:/usr/qt/3/bin:/usr/kde/3.4/sbin:/usr/kde/3.4/bin:/usr/kde/3.3/sbin:/usr/kde/3.3/bin:/usr/qt/2/bin:/opt/vmware/bin:/opt/XnView:/var/qmail/bin 
> 
> SERVER_SIGNATUREApache Server at aquarius Port 80 
> SERVER_SOFTWAREApache 
> SERVER_NAMEaquarius 
> SERVER_ADDR192.168.0.11 
> SERVER_PORT80 
> REMOTE_ADDR192.168.0.11 
> DOCUMENT_ROOT/var/www/localhost/htdocs 
> SERVER_ADMINroot@localhost 
> SCRIPT_FILENAME/home/mmokrejs/public_html/conference/index.py 
> REMOTE_PORT50990 
> Request configuration 
> KeyValue 
> PythonDebug1 
> Request options 
> KeyValue 
> Request notes 
> KeyValue 
> python_init_ran1 
> mod_userdir_usermmokrejs 
> ap-mime-exceptions-list?  
> Server configuration 
> KeyValue 
> PythonDebug1 
> Server configuration tree PidFile "/var/run/apache2.pid"
> Timeout 300
> KeepAlive On
> MaxKeepAliveRequests 100
> KeepAliveTimeout 15
> StartServers 2
> ThreadsPerChild 25
> MinSpareThreads 25
> MaxSpareThreads 75
> MaxClients 150
> MaxRequestsPerChild 0
> Listen 80
> AliasMatch ^/manual(?:/(?:de|en|es|fr|ja|ko|ru))?(/.*)?$ 
> "/usr/share/doc/apache-2.0.53/manual$1"
> 
> Options Indexes
> AllowOverride None
> Order allow,deny
> Allow from all
> 
> SetHandler type-map
> SetEnvIf Request_URI ^/manual/(de|en|es|fr|ja|ko|ru)/ prefer-language=$1
> RedirectMatch 301 ^/manual(?:/(de|en|es|fr|ja|ko|ru)){2,}(/.*)?$ 
> /manual/$1$2
> SSLRandomSeed startup builtin
> SSLRandomSeed connect builtin
> Listen 443
> AddType application/x-x509-ca-cert .crt
> AddType application/x-pkcs7-crl .crl
> SSLPassPhraseDialog builtin
> SSLSessionCache shm:/var/cache/apache2/ssl_scache(512000)
> SSLSessionCacheTimeout 300
> SSLMutex file:/var/cache/apache2/ssl_mutex
> 
> DocumentRoot "/var/www/localhost/htdocs"
> ServerName localhost:443
> ServerAdmin root@localhost
> ErrorLog logs/ssl_error_log
> TransferLog logs/ssl_access_log
> SSLEngine on
> SSLCipherSuite 
> ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
> SSLCertificateFile conf/ssl/server.crt
> SSLCertificateKeyFile conf/ssl/server.key
> 
> SSLOptions +StdEnvVars
> 
> SSLOptions +StdEnvVars
> SetEnvIf User-Agent ".*MSIE.*" nokeepalive ssl-unclean-shutdown 
> downgrade-1.0 force-response-1.0
> CustomLog logs/ssl_request_log "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x 
> \"%r\" %b"
> RewriteEngine On
> RewriteOptions inherit
> Alias /webalizer "/var/www/webalizer"
> 
> Options None
> AllowOverride None
> Order allow,deny
> Allow from all
> User apache
> Group apache
> ServerAdmin root@localhost
> UseCanonicalName Off
> 
> Options FollowSymLinks
> AllowOverride None
> UserDir public_html
> 
> AllowOverride All
> Options -MultiViews -Indexes SymLinksIfOwnerMatch IncludesNoExec
> 
> Order allow,deny
> Allow from all
> 
> Order deny,allow
> Deny from all
> DirectoryIndex index.html index.html.var
> AccessFileName .htaccess
> 
> Order allow,deny
> Deny from all
> TypesConfig /etc/mime.types
> DefaultType text/plain
> HostnameLookups Off
> ErrorLog logs/error_log
> LogLevel warn
> LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" 
> combined
> LogFormat "%h %l %u %t \"%r\" %>s %b" common
> LogFormat "%{Referer}i -> %U" referer
> LogFormat "%{User-agent}i" agent
> CustomLog logs/access_log common
> ServerTokens Prod
> ServerSignature On
> Alias /icons/ "/var/www/localhost/icons/"
> 
> Options Indexes -MultiViews
> AllowOverride None
> Order allow,deny
> Allow from all
> ScriptAlias /cgi-bin/ /var/www/localhost/cgi-bin/
> ScriptAlias /protected-cgi-bin/ /var/www/localhost/protected-cgi-bin/
> 
> AllowOverride None
> Options None
> Order allow,deny
> Allow from all
> IndexOptions FancyIndexing VersionSort
> AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip
> AddIconByType (TXT,/icons/text.gif) text/*
> AddIconByType (IMG,/icons/image2.gif) image/*
> AddIconByType (SND,/icons/sound2.gif) audio/*
> AddIconByType (VID,/icons/movie.gif) video/*
> AddIcon /icons/binary.gif .bin .exe
> AddIcon /icons/binhex.gif .hqx
> AddIcon /icons/tar.gif .tar
> AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
> AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
> AddIcon /icons/a.gif .ps .ai .eps
> AddIcon /icons/layout.gif .html .shtml .htm .pdf
> AddIcon /icons/text.gif .txt
> AddIcon /icons/c.gif .c
> AddIcon /icons/p.gif .pl .py
> AddIcon /icons/f.gif .for
> AddIcon /icons/dvi.gif .dvi
> AddIcon /icons/uuencoded.gif .uu
> AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
> AddIcon /icons/tex.gif .tex
> AddIcon /icons/bomb.gif core
> AddIcon /icons/back.gif ..
> AddIcon /icons/hand.right.gif README
> AddIcon /icons/folder.gif ^^DIRECTORY^^
> AddIcon /icons/blank.gif ^^BLANKICON^^
> DefaultIcon /icons/unknown.gif
> ReadmeName README.html
> HeaderName HEADER.html
> IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t .svn
> AddLanguage ca .ca
> AddLanguage cs .cz .cs
> AddLanguage da .dk
> AddLanguage de .de
> AddLanguage el .el
> AddLanguage en .en
> AddLanguage eo .eo
> AddLanguage es .es
> AddLanguage et .et
> AddLanguage fr .fr
> AddLanguage he .he
> AddLanguage hr .hr
> AddLanguage it .it
> AddLanguage ja .ja
> AddLanguage ko .ko
> AddLanguage ltz .ltz
> AddLanguage nl .nl
> AddLanguage nn .nn
> AddLanguage no .no
> AddLanguage pl .po
> AddLanguage pt .pt
> AddLanguage pt-BR .pt-br
> AddLanguage ru .ru
> AddLanguage sv .sv
> AddLanguage zh-CN .zh-cn
> AddLanguage zh-TW .zh-tw
> LanguagePriority cs en ca da de el eo es et fr he hr it ja ko ltz nl nn no 
> pl pt pt-BR ru sv zh-CN zh-TW
> ForceLanguagePriority Prefer Fallback
> AddDefaultCharset ISO-8859-2
> AddCharset ISO-8859-1 .iso8859-1 .latin1
> AddCharset ISO-8859-2 .iso8859-2 .latin2 .cen
> AddCharset ISO-8859-3 .iso8859-3 .latin3
> AddCharset ISO-8859-4 .iso8859-4 .latin4
> AddCharset ISO-8859-5 .iso8859-5 .latin5 .cyr .iso-ru
> AddCharset ISO-8859-6 .iso8859-6 .latin6 .arb
> AddCharset ISO-8859-7 .iso8859-7 .latin7 .grk
> AddCharset ISO-8859-8 .iso8859-8 .latin8 .heb
> AddCharset ISO-8859-9 .iso8859-9 .latin9 .trk
> AddCharset ISO-2022-JP .iso2022-jp .jis
> AddCharset ISO-2022-KR .iso2022-kr .kis
> AddCharset ISO-2022-CN .iso2022-cn .cis
> AddCharset Big5 .Big5 .big5
> AddCharset WINDOWS-1251 .cp-1251 .win-1251
> AddCharset CP866 .cp866
> AddCharset KOI8-r .koi8-r .koi8-ru
> AddCharset KOI8-ru .koi8-uk .ua
> AddCharset ISO-10646-UCS-2 .ucs2
> AddCharset ISO-10646-UCS-4 .ucs4
> AddCharset UTF-8 .utf8
> AddCharset GB2312 .gb2312 .gb
> AddCharset utf-7 .utf7
> AddCharset utf-8 .utf8
> AddCharset big5 .big5 .b5
> AddCharset EUC-TW .euc-tw
> AddCharset EUC-JP .euc-jp
> AddCharset EUC-KR .euc-kr
> AddCharset shift_jis .sjis
> AddType application/x-compress .Z
> AddType application/x-gzip .gz .tgz
> AddHandler type-map var
> BrowserMatch "Mozilla/2" nokeepalive
> BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
> BrowserMatch "RealPlayer 4\.0" force-response-1.0
> BrowserMatch "Java/1\.0" force-response-1.0
> BrowserMatch "JDK/1\.0" force-response-1.0
> BrowserMatch "Microsoft Data Access Internet Publishing Provider" 
> redirect-carefully
> BrowserMatch "^WebDrive" redirect-carefully
> BrowserMatch "^WebDAVFS/1.[012]" redirect-carefully
> BrowserMatch "^gnome-vfs" redirect-carefully
> NameVirtualHost *:80
> 
> DocumentRoot "/var/www/localhost/htdocs"
> 
> Options Indexes FollowSymLinks -MultiViews
> AllowOverride None
> Order allow,deny
> Allow from all
> 
> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050705/3d3a41a3/attachment-0001.html
From mmokrejs at ribosome.natur.cuni.cz  Tue Jul  5 08:57:14 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Tue Jul  5 08:57:22 2005
Subject: [mod_python] mod_python claims it cannot find a module
In-Reply-To: <c298f2d7050705055068df6e49@mail.gmail.com>
References: <1120521905.24685@dscpl.user.openhosting.com>	
	<c298f2d7050704231118a75af7@mail.gmail.com>	
	<2bdd71811c6b50be0bc72354affc00a0@dscpl.com.au>	
	<42CA75DD.6070807@ribosome.natur.cuni.cz>
	<c298f2d7050705055068df6e49@mail.gmail.com>
Message-ID: <42CA83AA.3080502@ribosome.natur.cuni.cz>

Nicolas Lehuen wrote:
> Martin,
> 
> From what I see in your source code, you should request for :
> 
> http://aquarius/~mmokrejs/conference/index_conference.py<http://aquarius/%7Emmokrejs/conference/index.py>
> 
> and not :
> 
> http://aquarius/~mmokrejs/conference/index.py<http://aquarius/%7Emmokrejs/conference/index.py>
> 
> Because you commented out the Index directive in the .htaccess. Do you still 
> have the problem when fixing this ? FYI, I have installed your source code 

Umm, no, you are right, I was too fast when doing this today. sorry for noise.

> on my machine, and everything is OK except for the various import problems 
> that have to be sorted otherwise. For instance, I've added :
> 
> PythonPath sys.path+["/path/to/conference"]
> 
> to the .htaccess file and now sql_io is correctly found.
> 
> To me, apart from the annoying import issues that can worked around (until 

I have just reproduced the "file() constructor not accessible in restricted mode" error.
More in a separate thread.

> we have a nice solution), everything is working OK.

Well, I have used the apache.import functions as Graham proposed yesterday. The code
looks like this at the moment in file where I import my own modules and works:


#! /usr/bin/env python

# $Id:

# import system-wide modules as they are in the PYTHON_PATH
import os

# import our modules but do not depend on PYTHON_PATH
# When we get executed under mod_python, the cuurent
# directory is not in PYTHON_PATH _if_ PythonHandler
# was not defined under "Directory" directive in httpd.conf
# or within .htaccess. But that still doesn't help
# with modules located in subdirectories - those are
# not in PYTHON_PATH even in "Directory" case!
# So, workaround that too here.
# http://www.modpython.org/pipermail/mod_python/2005-July/018588.html

try:
    from mod_python import apache

    _directory = os.path.dirname(__file__)
    for _my_modulename in ['web_settings', 'web_header', 'web_menu', 'web_text_frame', 'web_footer', 'sql_io', 'helper_functions']:
        __dict__[_my_modulename] = apache.import_module(_my_modulename, path=[_directory])
except:
    import web_settings
    import web_header
    import web_menu
    import web_text_frame
    import web_footer
    import sql_io
    import helper_functions


[cut]

From mmokrejs at ribosome.natur.cuni.cz  Tue Jul  5 09:41:44 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?ISO-8859-2?Q?Martin_MOKREJ=A9?=)
Date: Tue Jul  5 09:41:52 2005
Subject: [mod_python] file() constructor not accessible in restricted mode
Message-ID: <42CA8E18.7010909@ribosome.natur.cuni.cz>

python-2.3.4, mod_python as of today from svn tree, cElementTree-1.0.2-20050302,
elementtree-1.2.6-20050316. No PythonHandler installed in httpd.conf,
only in .htaccess.

I get the error reproducibly upon cElementTree use when I either set or unset
PythonInterpPerDirectory On
in .htaccess without restarting apache (I mean I just comment out the line
or remove the `#').

When I switch to ElementTree I can comment and uncomment the line in .htaccess
as many times as I wish and do not have to restart apache. Probably it relates to
the fact the python modules written in Ansi C are cached ...
In real world life this test doesn't make much sense but I just believe
something similar maybe happened to me in other situations. At least the error
message is same. A short testcase is included.

cElementTree and elementTree were configured to use python2.3 at the same time.
Also mod_python was configured to use python2.3.

aquarius mysql # ldd /usr/lib/python2.3/site-packages/cElementTree.so 
        linux-gate.so.1 =>  (0xffffe000)
        libpthread.so.0 => /lib/tls/libpthread.so.0 (0xb7eda000)
        libc.so.6 => /lib/tls/libc.so.6 (0xb7dc6000)
        /lib/ld-linux.so.2 (0x80000000)
aquarius mysql # ldd /usr/sbin/apache2
        linux-gate.so.1 =>  (0xffffe000)
        libz.so.1 => /lib/libz.so.1 (0xb7f56000)
        libssl.so.0.9.7 => /usr/lib/libssl.so.0.9.7 (0xb7f26000)
        libcrypto.so.0.9.7 => /usr/lib/libcrypto.so.0.9.7 (0xb7e25000)
        libaprutil-0.so.0 => /usr/lib/libaprutil-0.so.0 (0xb7e0c000)
        libgdbm.so.3 => /usr/lib/libgdbm.so.3 (0xb7e05000)
        libdb-4.2.so => /usr/lib/libdb-4.2.so (0xb7d1f000)
        libexpat.so.0 => /usr/lib/libexpat.so.0 (0xb7cf0000)
        libapr-0.so.0 => /usr/lib/libapr-0.so.0 (0xb7ccc000)
        librt.so.1 => /lib/tls/librt.so.1 (0xb7cc3000)
        libm.so.6 => /lib/tls/libm.so.6 (0xb7ca1000)
        libcrypt.so.1 => /lib/libcrypt.so.1 (0xb7c74000)
        libnsl.so.1 => /lib/libnsl.so.1 (0xb7c5f000)
        libpthread.so.0 => /lib/tls/libpthread.so.0 (0xb7c4c000)
        libdl.so.2 => /lib/libdl.so.2 (0xb7c48000)
        libc.so.6 => /lib/tls/libc.so.6 (0xb7b34000)
        /lib/ld-linux.so.2 (0xb7f92000)
aquarius mysql # ldd /usr/lib/apache2/modules/mod_python.so 
        linux-gate.so.1 =>  (0xffffe000)
        libpthread.so.0 => /lib/tls/libpthread.so.0 (0xb7e5e000)
        libdl.so.2 => /lib/libdl.so.2 (0xb7e5a000)
        libutil.so.1 => /lib/libutil.so.1 (0xb7e56000)
        libm.so.6 => /lib/tls/libm.so.6 (0xb7e34000)
        libc.so.6 => /lib/tls/libc.so.6 (0xb7d20000)
        /lib/ld-linux.so.2 (0x80000000)
aquarius mysql # 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: index_conference.py
Type: text/x-python
Size: 927 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050705/504198e8/index_conference.py
-------------- next part --------------
AddHandler mod_python .py
PythonHandler mod_python.publisher
#PythonHandler mod_python.testhandler
#PythonInterpPerDirectory On
PythonDebug On

<IfModule mod_dir.c>
    DirectoryIndex index_conference.py
</IfModule>

Options -Indexes
From gomo at datafull.com  Wed Jul  6 01:58:29 2005
From: gomo at datafull.com (Gonzalo =?ISO-8859-1?Q?Sainz-Tr=E1paga?=)
Date: Wed Jul  6 01:59:01 2005
Subject: [mod_python] Vampire for module reloading
Message-ID: <1120629509.2170.14.camel@localhost>

Hi,

I am developing a web application in Python and I have advanced quite a
bit. I always restart my Apache instance in order to have my modules
reloaded when I modify them.
Basically, my problem is I will be hosting the site on shared hosting,
and therefore I can't restart the webserver. I have read that Vampire
provides an alternate way to load modules that will make restarting
Apache unnecesary.
Still, when I browsed the website and navigated through the docs
provided with Vampire, I found myself quite lost with it.
I would like to know if I can install Vampire on a shared hosting
computer to which I don't have root access (and probably just FTP
access), and if it's possible to drop-in Vampire's module reloading
system instead of mod_python's without major rewrites of my code.
If this is possible, I would really appreciate some quick pointers and
directions on how to accomplish this. Basically, some comments on the
code snippet that appears under "Module Importing System" on Vampire's
website would be great.

Thanks in advance,
-- 
Gonzalo Sainz-Tr?paga (GomoX)
GnuPG Fingerprint: A0AF 3BBF EB93 7EFE 6628  C5A5 F073 9442 6DE4 A497
Public Key: http://pgp.mit.edu:11371/pks/lookup?op=get&search=0x6DE4A497
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050706/aaf331ba/attachment.bin
From jcigar at ulb.ac.be  Wed Jul  6 02:53:32 2005
From: jcigar at ulb.ac.be (Julien)
Date: Wed Jul  6 02:53:34 2005
Subject: [mod_python] Vampire for module reloading
In-Reply-To: <1120629509.2170.14.camel@localhost>
References: <1120629509.2170.14.camel@localhost>
Message-ID: <1120632812.7760.3.camel@horologium>

On Wed, 2005-07-06 at 02:58 -0300, Gonzalo Sainz-Tr?paga wrote:
> Hi,

Hello

> I am developing a web application in Python and I have advanced quite a
> bit. I always restart my Apache instance in order to have my modules
> reloaded when I modify them.

in place of import your_module try apache.import_module("your_module",
log=1, autoreload=1), and try the PythonAutoReload configuration
directive.

> Basically, my problem is I will be hosting the site on shared hosting,
> and therefore I can't restart the webserver. I have read that Vampire
> provides an alternate way to load modules that will make restarting
> Apache unnecesary.
> Still, when I browsed the website and navigated through the docs
> provided with Vampire, I found myself quite lost with it.
> I would like to know if I can install Vampire on a shared hosting
> computer to which I don't have root access (and probably just FTP
> access), and if it's possible to drop-in Vampire's module reloading
> system instead of mod_python's without major rewrites of my code.
> If this is possible, I would really appreciate some quick pointers and
> directions on how to accomplish this. Basically, some comments on the
> code snippet that appears under "Module Importing System" on Vampire's
> website would be great.
> 
> Thanks in advance,
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Julien Cigar (jcigar@ulb.ac.be)
Belgian Biodiversity Information Facility
Universit? Libre de Bruxelles
Campus de la Plaine CP 257
B?timent NO, Bureau 4 N4 115C (Niveau 4)
Boulevard du Triomphe, entr?e ULB 2
B-1050 Bruxelles
http://www.bebif.be

From grahamd at dscpl.com.au  Wed Jul  6 03:12:14 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul  6 03:12:24 2005
Subject: [mod_python] Vampire for module reloading
Message-ID: <1120633934.26670@dscpl.user.openhosting.com>

Julien wrote ..
> On Wed, 2005-07-06 at 02:58 -0300, Gonzalo Sainz-Tr?paga wrote:
> > Hi,
> 
> Hello
> 
> > I am developing a web application in Python and I have advanced quite
> a
> > bit. I always restart my Apache instance in order to have my modules
> > reloaded when I modify them.
> 
> in place of import your_module try apache.import_module("your_module",
> log=1, autoreload=1), and try the PythonAutoReload configuration
> directive.

If they aren't doing that, it is at least a start. But the real problem is
that apache.import_module() has various problems and if you use
it, you will still have to restart Apache in various cases. Therefore,
it doesn't really solve the problem of avoiding restarts altogether.
From realtega at gmail.com  Wed Jul  6 04:10:56 2005
From: realtega at gmail.com (Claudio)
Date: Wed Jul  6 04:12:51 2005
Subject: [mod_python] templating for newbie
Message-ID: <1120637456.2420.7.camel@Portega>

Hi,

I'm using the publisher handler. I'm trying to create a nested template
but I don't know how can I do it.

This is the code of the .py file

from mod_python import psp, apache
	
def index(req, name=''):
	
	
	req.content_type = "text/html"
	req.send_http_header()
	
	d = {}
	d = {'name': 'First'}
	
	
	
	filtri_tmpl = psp.PSP(req, filename='filtri.tmpl', vars = d)
	
	
	form_tmpl = psp.PSP(req, filename='form.tmpl')
	
	
	form_tmpl.run(vars = {'filtri_tmpl': filtri_tmpl })

	return

This is the form.tmpl

Lista dei filtri da poter settare

<FORM action="" method="POST">
  

<TABLE>
<%= filtri_tmpl %>


<TD><INPUT type="reset" name="reset" value="Reset"></TD>
<TD></TD>
<TD><INPUT type="submit" name="invia" value="Invia"></TD>
</TABLE>

</FORM>

This is the filtri.tmpl

<TR>
<TD>Nome filtro</TD>
<TD><%= name %></TD>
</TR>


How can I fill the form.tmpl with more than one elements like
filtri.tmpl? As example... a list of name?

Thank you


From huzaifa at hostway.com  Wed Jul  6 11:11:11 2005
From: huzaifa at hostway.com (Huzaifa Tapal)
Date: Wed Jul  6 11:11:18 2005
Subject: [mod_python] socket.py ssl() method problem in mod_python
Message-ID: <42CBF48F.5010101@hostway.com>

Hello All,

I recently came across a problem in making secure socket connections 
only introduced in the mod_python (persistent) version of my 
application.  It seems that after a number of successful socket 
connections, somehow and in someway the interpreter gets corrupted and 
start receiving an error stating "socket object is not of type _sock" 
coming from the socket.py module in python.

To further explain, in httplib.py the connect method in HTTPSConnection, 
creates a socket instance and then passes it the ssl() method in 
socket.py to make it a secure socket connection.  That is where the 
problem occurs and somehow the ssl() method starts claiming that its 
receiving a bad type of socket object.

After a whole lot of poking around I think the problem is in socket.py's 
implementation of the modular level ssl() method and that it is not 
thread safe.  Here is what the ssl() method looks like:

    def ssl(sock, keyfile=None, certfile=None):
         if hasattr(sock, "_sock"):
             sock = sock._sock
         return _realssl(sock, keyfile, certfile)


I thought that the hasattr() call and then the referencing of the passed 
socket object was somehow corrupting the mod_python interpreter and 
thereafter any ssl() socket connections were failing with that error.  
So I made a patch to httplib.py's connect() method to pass in a 
socket._sock to the ssl() method instead so that the ssl() method 
doesn't have to do the switch and that seems to work fine.

After that successful attempt, we tried to determine, whether hasattr 
check was need at all and that we can simply just modify the ssl() 
method to be as following:

    def ssl(sock, keyfile=None, certfile=None):
         return _realssl(sock._sock, keyfile, certfile)


That reintroduced the original error.  At this point I am stumped as to 
what could be causing this type of interpreter corruption to happen for 
the ssl() method.  I know the fact that the ssl() method is global in 
the socket.py module has something to do with it but I can't figure it 
how does the passed sock object be corrupted everytime.

Does anybody have any insight into this problem or has run into this 
problem at all?

Hozi


From David.Bear at asu.edu  Wed Jul  6 23:44:35 2005
From: David.Bear at asu.edu (David Bear)
Date: Wed Jul  6 23:44:52 2005
Subject: [mod_python] mod python uses
Message-ID: <20050707034435.GE32074@asu.edu>

I'm still trying to determine if modpython is right for me. I need to
accomplish a couple of things..

first, I will be using zope for all 'managed content', so I was hoping
there may be some usefull linkages that modpython would have with
zope.. if not, thats okay.

second, I want a fast way to run python code that would normaly run
through cgi. will modpython run python code faster through psp?

third, modpython just seemed 'cool' but I'm still trying to see where
if fits with my needs. I'd be interested to see what others may be
doing with modpython and zope together..

finally, I'd also be interested in some comparisons between psp and
php or asp... I'm attracted to zope becuase it attempts to separate
code/content/presentation.. but putting code right in with the html is
a very simple concept, and widely implemented. So I'm curious how psp
compares to php et al in terms of performance, 'safety (security)',
etc.

any input appreciated. I know these are rather vague questions.
-- 
David Bear
phone: 	480-965-8257
fax: 	480-965-9189
College of Public Programs/ASU
Wilson Hall 232
Tempe, AZ 85287-0803
 "Beware the IP portfolio, everyone will be suspect of trespassing"
From grahamd at dscpl.com.au  Thu Jul  7 02:47:05 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul  7 02:47:19 2005
Subject: [mod_python] Vampire for module reloading
Message-ID: <1120718825.12305@dscpl.user.openhosting.com>

Gonzalo =?ISO-8859-1?Q?Sainz-Tr=E1paga?= wrote ..
>
> I would like to know if I can install Vampire on a shared hosting
> computer to which I don't have root access (and probably just FTP
> access),

This is generally possible. You would need to set PythonPath explicitly
within your .htaccess files to reference the parent directory of where
Vampire is installed. You should ensure though that your code runs
in its own interpreter namespace just in case someone else were also
to try and use Vampire. Although, using a distinct interpreter is good
practice when using shared hosting regardless of whether you are
using shared hosting.

> and if it's possible to drop-in Vampire's module reloading
> system instead of mod_python's without major rewrites of my code.

First you need to ask whether it is worth it. Although the standard
module importing system doesn't work as well as it should, unless
your code and the relationship between explicitly imported modules
is complicated, you can probably get away with using what is already
provided with mod_python.

The simplest hack to avoid a restart yet force your files to be reloaded
is simply to touch all your files so that there modification times change.
You just need to ensure that automatic reloading is always enabled.

As someone pointed out already, any local imports of modules which
are a part of your web application should not use the "import" statement
but should instead explicitly use apache.import_module(). Although
they said to replace all uses of "import", you should only do so for your
own code. Do not use apache.import_module() for modules which are
a part of the standard Python distribution. The apache.import_module()
function also doesn't work very well with packages, so avoid using
packages for your own code.

Note that you should also avoid having the same named Python module
file in multiple locations as apache.import_module() doesn't cope with
that very well. Ie., don't have multiple index.py files for example if using
mod_python.publisher.

You should also avoid setting PythonPath and supply an explicit directory
location to apache.import_module() all the time. ie.,

  module = apache.import_module(name,path=[directory])

This will help to avoid issues in picking up the wrong module if you use
a name which mirrors a standard module name.

There are lots of other issues to contend with, but really depends on
how complicated your code is. Most people don't have that complicated
a system and so the provided mechanism and its problems can be
lived with.

> If this is possible, I would really appreciate some quick pointers and
> directions on how to accomplish this. Basically, some comments on the
> code snippet that appears under "Module Importing System" on Vampire's
> website would be great.

You are better of using what mod_python provides. When you understand
how module loading works in that and come to understand the problems
in the provided system and how it is affecting you, then you might look at
Vampire again. Even before that, you are probably still better to post here
on the mailing list as to the exact problem you are seeing in case there is
a workaround for it.

Graham
From sasha at systemvaruhuset.com  Thu Jul  7 02:17:45 2005
From: sasha at systemvaruhuset.com (Sasha Vincic)
Date: Thu Jul  7 02:54:35 2005
Subject: [mod_python] mod python uses
In-Reply-To: <20050707034435.GE32074@asu.edu>
References: <20050707034435.GE32074@asu.edu>
Message-ID: <4ed65ecf36ecc21271ea20aba6096b60@systemvaruhuset.com>


On Jul 7, 2005, at 05:44, David Bear wrote:

>
> first, I will be using zope for all 'managed content', so I was hoping
> there may be some usefull linkages that modpython would have with
> zope.. if not, thats okay.

Check out railroad from Infrae.

Sasha Vin?i?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2169 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050707/6d9cba7f/smime.bin
From jcigar at ulb.ac.be  Thu Jul  7 03:04:16 2005
From: jcigar at ulb.ac.be (Julien)
Date: Thu Jul  7 03:04:13 2005
Subject: [mod_python] mod python uses
In-Reply-To: <20050707034435.GE32074@asu.edu>
References: <20050707034435.GE32074@asu.edu>
Message-ID: <1120719856.12536.26.camel@horologium>

On Wed, 2005-07-06 at 20:44 -0700, David Bear wrote:
> I'm still trying to determine if modpython is right for me. I need to
> accomplish a couple of things..

sure it is :-)

> first, I will be using zope for all 'managed content', so I was hoping
> there may be some usefull linkages that modpython would have with
> zope.. if not, thats okay.

I'm not a Zope addict ... so no idea

> second, I want a fast way to run python code that would normaly run
> through cgi. will modpython run python code faster through psp?

PSP is just a way to convert text documents (mostly (x)HTML) containing
Python into Python code. You can use PSP as a template engine ... but I
personally don't like it, because the template becomes unreadable, and
the indentation is _really_ annoying in a template ...

> third, modpython just seemed 'cool' but I'm still trying to see where
> if fits with my needs. I'd be interested to see what others may be
> doing with modpython and zope together..
> 
> finally, I'd also be interested in some comparisons between psp and
> php or asp... I'm attracted to zope becuase it attempts to separate
> code/content/presentation.. but putting code right in with the html is
> a very simple concept, and widely implemented. So I'm curious how psp
> compares to php et al in terms of performance, 'safety (security)',
> etc.

mod_python is a lot faster than pure CGI. In terms of performance, I
would say that it's a bit faster than PHP (depends of your handler). 
For separing code and presentation, I suggest the CLEARSILVER
(http://www.clearsilver.net/) template engine, which is written in Pure
C (with Python bindings) and is language neutral

> any input appreciated. I know these are rather vague questions.

I'm using mod_python since 3 months (at work). Before that, I used
mostly PHP for web. I would say that mod_python is really great (I think
I will not return to PHP ...).

-- 
Julien Cigar (jcigar@ulb.ac.be)
Belgian Biodiversity Information Facility
Universit? Libre de Bruxelles
Campus de la Plaine CP 257
B?timent NO, Bureau 4 N4 115C (Niveau 4)
Boulevard du Triomphe, entr?e ULB 2
B-1050 Bruxelles
http://www.bebif.be

From manjeet at infogridpacific.com  Thu Jul  7 04:55:42 2005
From: manjeet at infogridpacific.com (Manjeet Chaudhary)
Date: Thu Jul  7 04:55:59 2005
Subject: [mod_python] severe memory leak problem with mod_python
Message-ID: <42CCEE0E.4000608@infogridpacific.com>

Hi Guys

We are facing memory leak problem; most probably due to mod_python.
Our application is web-based application using below mentioned Apache 
server version including mod-python. We are using Publisher Handler in 
mod-python.
We are facing a severe memory leak problem [ memory is used and never 
being freed , it is freed only when we stop apache server (httpd) or 
restart it]. We are using dbxml(2.1.8) as our backend database. Our 
program (python module) in cgi-bin dir is processing the url request. 
The module is accessing the document from the dbxml container through 
Simple - XML -RPC communication and returning to the browser. As the no. 
of requests increases memory is used up [never freed again] and the 
server crashes [CentOS automatically kill the process], but if we stop 
or restart httpd the memory is released in huge amount . There were 
similar problems in dbxml version 2.0.9 , but those were solved when we 
upgraded it to version 2.1.8.

I have already updated my kernel, mod_python, dbxml.
I used Valgrind to check memory leak. But in summary report it is not 
showing any type of memory leak.

I also read that is there is some problem with Python and it's memory 
management. ( http://evanjones.ca/python-memory.html ). Is this a 
problem due to Python's memory management. But our other 
application/servers are working fine.

It seems that apache/mod_python process is leaking memory.
This is a serious problem and so we need a solution for it.

Please help me out for solving this problem.
Maybe somebody here has any idea what is going on.

Thank you in advance and all the best,
Manjeet Chaudhary

Summary:
-----------------------------------------------------------
.................
Hardware/Softwares and OS we are using :-
Pentium4 machine with 1GB DDR-RAM.
CentOS 4.0 - kernel 2.6.9-11-EL. Upgraded from 2.6.9-3
Dbxml - 2.1.8 upgraded from 2.0.9
Mod_Python - 3.1.4 with Patches
Python - 2.3.4.
HTTPD server - Apache/2.0.52
Pybsdbd - bsddb3-4.3.3
.................
Httpd Configurations: (mod_python specific. We are using .htaccess in 
cgi-bin directory )

<Directory "/var/www/cgi-bin">
AllowOverride FileInfo
Options FollowSymLinks
Order allow,deny
Allow from all
</Directory>
.................
.htaccess file:

AddHandler mod_python .py
SetHandler mod_python
PythonHandler mod_python.publisher
PythonDebug On
.................
Remedies i applied:
1. Updated Kernel from 2.6.9-3 to 2.6.9-11.EL as suggested in 
http://lists.centos.org/pipermail/centos/2005-June/007113.html
2. Updated DbXml from 2.0.9 to 2.1.8 as suggested in
http://www.sleepycat.com/xml_update/2.1.8/if.2.1.8.html
3. Reinstalled mod_python with patches as mentioned in
http://www.dscpl.com.au/projects/vampire/patches.html
From blashyrkrealm at hotmail.com  Thu Jul  7 05:23:16 2005
From: blashyrkrealm at hotmail.com (Rafath doom oculta)
Date: Thu Jul  7 05:23:22 2005
Subject: [mod_python] Problems with apxs
Message-ID: <BAY103-F9A28E471CBF04A805A213ACD80@phx.gbl>

I've installed Apache 2.0.54 following the INSTALL file instructions and the 
installation seems correct. I've installed it in /usr/local/apache

Then I've begun to install mod python 3.1.4.  When I execute the command to 
detect apxs, it detect the direction with any problem.
However, when I execute the command to detect python library, it shows two 
warnings and 1 error related with the apxs searching

The commands that I've written to install Apache are these:
      ./configure --prefix=/usr/local/apache
      make
      make install
     /usr/local/apache/bin/apachectl start

    configuration of installation tree and the modules for DSO mechanism
    CC="pgcc" CFLAGS="-O2"
   ./configure --prefix=/sw/pkg/apache      --enable-rewrite=shared      
--enable-speling=shared

The command that I've written in mod Python are:
    ./configure --with-apxs=/usr/local/apache/bin/apxs

  ./configure --with-python=/usr/local/bin/python2.3
  The warnings and the error produced by this command are:

   configure: checking whether apxs is available...
  checking for --with-apxs... no
  checking for apxs in /usr/local/apache/sbin... no
  checking for apxs in your PATH... checking for apxs... no
  configure: WARNING: **** apxs was not found, DSO compilation will not be 
available.
  configure: WARNING: **** You can use --with-apxs to specify where your 
apxs is.
  configure: error: Neither static nor DSO option available, there is no 
point in continuing.

Any reply will be nice

Thanks


From nicolas.lehuen at gmail.com  Thu Jul  7 05:55:16 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Thu Jul  7 05:55:24 2005
Subject: [mod_python] severe memory leak problem with mod_python
In-Reply-To: <42CCEE0E.4000608@infogridpacific.com>
References: <42CCEE0E.4000608@infogridpacific.com>
Message-ID: <c298f2d70507070255515ca318@mail.gmail.com>

Hi Manjeet,

Could you be affected by this bug ?

http://issues.apache.org/jira/browse/MODPYTHON-1

It is fixed in the current development version but still present in the 
3.1.4 version.

Another possible memory leak (which is not confirmed yet) is the 
PythonOption configuration directive :

http://issues.apache.org/jira/browse/MODPYTHON-60

But apparently you are not using it.

Regards,
Nicolas

2005/7/7, Manjeet Chaudhary <manjeet@infogridpacific.com>:
> 
> Hi Guys
> 
> We are facing memory leak problem; most probably due to mod_python.
> Our application is web-based application using below mentioned Apache
> server version including mod-python. We are using Publisher Handler in
> mod-python.
> We are facing a severe memory leak problem [ memory is used and never
> being freed , it is freed only when we stop apache server (httpd) or
> restart it]. We are using dbxml(2.1.8) as our backend database. Our
> program (python module) in cgi-bin dir is processing the url request.
> The module is accessing the document from the dbxml container through
> Simple - XML -RPC communication and returning to the browser. As the no.
> of requests increases memory is used up [never freed again] and the
> server crashes [CentOS automatically kill the process], but if we stop
> or restart httpd the memory is released in huge amount . There were
> similar problems in dbxml version 2.0.9 , but those were solved when we
> upgraded it to version 2.1.8.
> 
> I have already updated my kernel, mod_python, dbxml.
> I used Valgrind to check memory leak. But in summary report it is not
> showing any type of memory leak.
> 
> I also read that is there is some problem with Python and it's memory
> management. ( http://evanjones.ca/python-memory.html ). Is this a
> problem due to Python's memory management. But our other
> application/servers are working fine.
> 
> It seems that apache/mod_python process is leaking memory.
> This is a serious problem and so we need a solution for it.
> 
> Please help me out for solving this problem.
> Maybe somebody here has any idea what is going on.
> 
> Thank you in advance and all the best,
> Manjeet Chaudhary
> 
> Summary:
> -----------------------------------------------------------
> .................
> Hardware/Softwares and OS we are using :-
> Pentium4 machine with 1GB DDR-RAM.
> CentOS 4.0 - kernel 2.6.9-11-EL. Upgraded from 2.6.9-3
> Dbxml - 2.1.8 upgraded from 2.0.9
> Mod_Python - 3.1.4 with Patches
> Python - 2.3.4.
> HTTPD server - Apache/2.0.52
> Pybsdbd - bsddb3-4.3.3
> .................
> Httpd Configurations: (mod_python specific. We are using .htaccess in
> cgi-bin directory )
> 
> <Directory "/var/www/cgi-bin">
> AllowOverride FileInfo
> Options FollowSymLinks
> Order allow,deny
> Allow from all
> </Directory>
> .................
> .htaccess file:
> 
> AddHandler mod_python .py
> SetHandler mod_python
> PythonHandler mod_python.publisher
> PythonDebug On
> .................
> Remedies i applied:
> 1. Updated Kernel from 2.6.9-3 to 2.6.9-11.EL as suggested in
> http://lists.centos.org/pipermail/centos/2005-June/007113.html
> 2. Updated DbXml from 2.0.9 to 2.1.8 as suggested in
> http://www.sleepycat.com/xml_update/2.1.8/if.2.1.8.html
> 3. Reinstalled mod_python with patches as mentioned in
> http://www.dscpl.com.au/projects/vampire/patches.html
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050707/7b4d4877/attachment-0001.html
From manjeet at infogridpacific.com  Thu Jul  7 06:53:31 2005
From: manjeet at infogridpacific.com (Manjeet Chaudhary)
Date: Thu Jul  7 06:53:51 2005
Subject: [mod_python] severe memory leak problem with mod_python
In-Reply-To: <c298f2d70507070255515ca318@mail.gmail.com>
References: <42CCEE0E.4000608@infogridpacific.com>
	<c298f2d70507070255515ca318@mail.gmail.com>
Message-ID: <42CD09AB.5030207@infogridpacific.com>

Hi Nicolas

> Could you be affected by this bug ?
> http://issues.apache.org/jira/browse/MODPYTHON-1

We are not using any cyclic reference...

> It is fixed in the current development version but still present in 
> the 3.1.4 version.

Presently i am using patched version of mod_python-3.1.4. Two patches i 
used are : http://www.dscpl.com.au/projects/vampire/patches.html
I found a new releases of mod_python after "ver 3.1.4"; 
"mod_python-3.2.0-experimental-release" and the "Current Development 
Version" on mod_python's subversion. Which one i should install.

> Another possible memory leak (which is not confirmed yet) is the 
> PythonOption configuration directive :
> http://issues.apache.org/jira/browse/MODPYTHON-60
> But apparently you are not using it.

Yes we are not using  PythonOption directive.
I will retry using newer version of mod_python. Any other solution

Thank you
Manjeet Chaudhary

>
> Regards,
> Nicolas
>
> 2005/7/7, Manjeet Chaudhary <manjeet@infogridpacific.com 
> <mailto:manjeet@infogridpacific.com>>:
>
>     Hi Guys
>
>     We are facing memory leak problem; most probably due to mod_python.
>     Our application is web-based application using below mentioned Apache
>     server version including mod-python. We are using Publisher
>     Handler in
>     mod-python.
>     We are facing a severe memory leak problem [ memory is used and never
>     being freed , it is freed only when we stop apache server (httpd) or
>     restart it]. We are using dbxml(2.1.8) as our backend database. Our
>     program (python module) in cgi-bin dir is processing the url request.
>     The module is accessing the document from the dbxml container through
>     Simple - XML -RPC communication and returning to the browser. As
>     the no.
>     of requests increases memory is used up [never freed again] and the
>     server crashes [CentOS automatically kill the process], but if we stop
>     or restart httpd the memory is released in huge amount . There were
>     similar problems in dbxml version 2.0.9 , but those were solved
>     when we
>     upgraded it to version 2.1.8.
>
>     I have already updated my kernel, mod_python, dbxml.
>     I used Valgrind to check memory leak. But in summary report it is not
>     showing any type of memory leak.
>
>     I also read that is there is some problem with Python and it's memory
>     management. ( http://evanjones.ca/python-memory.html ). Is this a
>     problem due to Python's memory management. But our other
>     application/servers are working fine.
>
>     It seems that apache/mod_python process is leaking memory.
>     This is a serious problem and so we need a solution for it.
>
>     Please help me out for solving this problem.
>     Maybe somebody here has any idea what is going on.
>
>     Thank you in advance and all the best,
>     Manjeet Chaudhary
>
>     Summary:
>     -----------------------------------------------------------
>     .................
>     Hardware/Softwares and OS we are using :-
>     Pentium4 machine with 1GB DDR-RAM.
>     CentOS 4.0 - kernel 2.6.9-11-EL. Upgraded from 2.6.9-3
>     Dbxml - 2.1.8 upgraded from 2.0.9
>     Mod_Python - 3.1.4 with Patches
>     Python - 2.3.4.
>     HTTPD server - Apache/2.0.52
>     Pybsdbd - bsddb3-4.3.3
>     .................
>     Httpd Configurations: (mod_python specific. We are using .htaccess in
>     cgi-bin directory )
>
>     <Directory "/var/www/cgi-bin">
>     AllowOverride FileInfo
>     Options FollowSymLinks
>     Order allow,deny
>     Allow from all
>     </Directory>
>     .................
>     .htaccess file:
>
>     AddHandler mod_python .py
>     SetHandler mod_python
>     PythonHandler mod_python.publisher
>     PythonDebug On
>     .................
>     Remedies i applied:
>     1. Updated Kernel from 2.6.9-3 to 2.6.9-11.EL as suggested in
>     http://lists.centos.org/pipermail/centos/2005-June/007113.html
>     <http://lists.centos.org/pipermail/centos/2005-June/007113.html>
>     2. Updated DbXml from 2.0.9 to 2.1.8 as suggested in
>     http://www.sleepycat.com/xml_update/2.1.8/if.2.1.8.html
>     3. Reinstalled mod_python with patches as mentioned in
>     http://www.dscpl.com.au/projects/vampire/patches.html
>     _______________________________________________
>     Mod_python mailing list
>     Mod_python@modpython.org <mailto:Mod_python@modpython.org>
>     http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From grahamd at dscpl.com.au  Thu Jul  7 07:54:48 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul  7 08:25:22 2005
Subject: [mod_python] Articles on module importing.
Message-ID: <a7076c0d5bcba6e7842b68172f3283ef@dscpl.com.au>

For a while now I have been working on a series of articles to cover
the basics of the module importing system in mod_python, the various
problems it has and how it may be fixed. Because of work and other
commitments, I haven't had a chance to do anything on this for a few
weeks and my ability to get back to it in the near future doesn't look
too good either.

As such, I am going to make available what I have done so far. This
equates to a bit of background information on the interfaces to the
module importing system as well as a list of the problems it currently
has. The latter list may yet be extended as there were some things I
hadn't covered but I have managed to forget what they were. I have
also rushed at the last minute to try and make it presentable and
add a few last items, thus I may need to tweak a few things.

What is missing is my ideas of how the module importing system can be
fixed. I would rather get documented what I feel needs to be done
before I get drawn into an any arguments on how to fix it. Thus, feel
free to comment on the list of problems/issues, letting me know of any
other problems you know of or where you feel I am wrong in my analysis,
but can we please defer the discussion on how to fix it for a while
yet. :-)

The articles can be found along with my prior article on getting
started with mod_python at:

   http://www.dscpl.com.au/articles.html

The two new articles which have been posted are:

   http://www.dscpl.com.au/articles/modpython-002.html
   http://www.dscpl.com.au/articles/modpython-003.html

I have posted this message to the general list rather than just the
developer list as the information may be of general interest in as
much as it will raise awareness that there are actually problems.
I suggest that when we later get down to discussions on how to fix
it that it be done on the developer list and not here however.

Graham

From list at joreybump.com  Thu Jul  7 11:26:42 2005
From: list at joreybump.com (Jorey Bump)
Date: Thu Jul  7 11:27:00 2005
Subject: [mod_python] mod python uses
In-Reply-To: <20050707034435.GE32074@asu.edu>
References: <20050707034435.GE32074@asu.edu>
Message-ID: <42CD49B2.2050701@joreybump.com>

David Bear wrote:

> second, I want a fast way to run python code that would normaly run
> through cgi. 

Like any embedded interpreter, mod_python is significantly faster than CGI.

> finally, I'd also be interested in some comparisons between psp and
> php or asp... I'm attracted to zope becuase it attempts to separate
> code/content/presentation.. but putting code right in with the html is
> a very simple concept, and widely implemented. 

It's also the BASIC of the WWW, in that it serves as an entry point for 
novice developers that are familiar with HTML, but have little 
programming experience. Embedding code in HTML can also be very useful 
in leveraging the diverse talents of a team (designers can use familiar 
tools and programmers can include code, without stepping on each other's 
toes). I find that I'm much more productive if I abandon this paradigm 
entirely, however, and handle all of my content generation 
programatically.

> So I'm curious how psp
> compares to php et al in terms of performance, 'safety (security)',
> etc.
> 
> any input appreciated. I know these are rather vague questions.

I don't use PSP, mainly because it reminds me of PHP, ASP, etc. I now 
find the perl and PHP projects I maintain to be a chore, and woefully 
inadequate compared to python. But I also think python encourages 
developers to write concise and legible code in a way that's possible in 
  the other languages, but rarely implemented.

Common security principals apply to all web application languages, so I 
can't say that any of them are inherently more secure. I think the 
number of security fixes for mod_python are historically less than PHP, 
but that doesn't mean you can't write a completely insecure app for 
mod_python. In fact, it's quite easy when you get started, because you 
might not realize which objects are available to the client for 
inspection. But mod_python tends to stay out of your way, and I think 
that's a good thing, if you're up to the task.

I think the most important consideration here is one of administration. 
Once CGI is enabled, a user can maintain an app almost entirely with 
FTP. But with embedded interpreters, the onus shifts to the system 
administrator, who is likely to stick with a single configuration that 
may or may not be modified by the developer (via .htaccess, for 
example). Basic PHP apps usually run as expected, but the interpreter 
might not always have the desired compilation options. Still, most PHP 
applications can be made to be fairly portable.

In my experience, using mod_python almost certainly requires the 
developer to have administrative access to the web server. This is 
mainly due to the module import mechanism. Once a PHP page is edited, 
the changes occur immediately. Since mod_python takes advantage of 
python's module caching (which contributes to its performance) it is 
necessary to reload imported modules when they are edited. The easiest 
way to do this is to restart apache. Since this isn't practical in a 
production environment, attempts are being made to improve the import 
mechanism (google for "mod_python import mechanism" to get an idea of 
the issues involved). Of course, this all depends on the handler being 
used.

To sum up, mod_python requires more low level web server configuration 
than PHP or CGI, and probably requires a lot more cooperation between 
developers that share an interpreter. I'll continue to use it because I 
find it to be extremely productive, but usually only in situations where 
I'm the sole administrator, developer and designer.

From gomo at datafull.com  Thu Jul  7 11:32:28 2005
From: gomo at datafull.com (Gonzalo =?ISO-8859-1?Q?Sainz-Tr=E1paga?=)
Date: Thu Jul  7 11:34:01 2005
Subject: [mod_python] Vampire for module reloading
In-Reply-To: <1120718825.12305@dscpl.user.openhosting.com>
References: <1120718825.12305@dscpl.user.openhosting.com>
Message-ID: <1120750348.2170.23.camel@localhost>

Hi,

Thanks for all the help.

On Thu, 2005-07-07 at 02:47 -0400, Graham Dumpleton wrote:
> As someone pointed out already, any local imports of modules which
> are a part of your web application should not use the "import" statement
> but should instead explicitly use apache.import_module(). Although
> they said to replace all uses of "import", you should only do so for your
> own code. Do not use apache.import_module() for modules which are
> a part of the standard Python distribution. The apache.import_module()
> function also doesn't work very well with packages, so avoid using
> packages for your own code.

What do you mean by "packages"? I am using sqlobject and a few others
which are installed in my shared hosting directory, inside a "packages"
file. What I am doing is altering sys.path in a config.py file that is
imported by all the other files in my application.
I will drop this and replace is with import_module() and the
corresponding path for the files like you recommended, but what do you
mean by "doesn't work very well"?

Thanks again,
-- 
Gonzalo Sainz-Tr?paga (GomoX)
GnuPG Fingerprint: A0AF 3BBF EB93 7EFE 6628  C5A5 F073 9442 6DE4 A497
Public Key: http://pgp.mit.edu:11371/pks/lookup?op=get&search=0x6DE4A497
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050707/4aab0316/attachment.bin
From mmokrejs at ribosome.natur.cuni.cz  Thu Jul  7 13:44:42 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Thu Jul  7 13:44:58 2005
Subject: [mod_python] Problems with apxs
In-Reply-To: <BAY103-F9A28E471CBF04A805A213ACD80@phx.gbl>
References: <BAY103-F9A28E471CBF04A805A213ACD80@phx.gbl>
Message-ID: <42CD6A0A.7020102@ribosome.natur.cuni.cz>

Rafath doom oculta wrote:
> I've installed Apache 2.0.54 following the INSTALL file instructions and 
> the installation seems correct. I've installed it in /usr/local/apache
> 
> Then I've begun to install mod python 3.1.4.  When I execute the command 
> to detect apxs, it detect the direction with any problem.
> However, when I execute the command to detect python library, it shows 
> two warnings and 1 error related with the apxs searching
> 
> The commands that I've written to install Apache are these:
>      ./configure --prefix=/usr/local/apache
>      make
>      make install
>     /usr/local/apache/bin/apachectl start
> 
>    configuration of installation tree and the modules for DSO mechanism
>    CC="pgcc" CFLAGS="-O2"
>   ./configure --prefix=/sw/pkg/apache      --enable-rewrite=shared      
> --enable-speling=shared
> 
> The command that I've written in mod Python are:
>    ./configure --with-apxs=/usr/local/apache/bin/apxs

Check if the file is there. At least my apache-2.0.54 has apxs2!
Look for /usr/local/apache/bin/apxs2 or even /usr/local/apache/sbin/apxs2

In case of doubt:

$ find / -name apxs*

Martin
From list at joreybump.com  Thu Jul  7 14:34:49 2005
From: list at joreybump.com (Jorey Bump)
Date: Thu Jul  7 14:34:58 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <a7076c0d5bcba6e7842b68172f3283ef@dscpl.com.au>
References: <a7076c0d5bcba6e7842b68172f3283ef@dscpl.com.au>
Message-ID: <42CD75C9.9010006@joreybump.com>

Graham Dumpleton wrote:

> What is missing is my ideas of how the module importing system can be
> fixed. I would rather get documented what I feel needs to be done
> before I get drawn into an any arguments on how to fix it. Thus, feel
> free to comment on the list of problems/issues, letting me know of any
> other problems you know of or where you feel I am wrong in my analysis,
> but can we please defer the discussion on how to fix it for a while
> yet. :-)
> 
> The articles can be found along with my prior article on getting
> started with mod_python at:
> 
>   http://www.dscpl.com.au/articles.html
> 
> The two new articles which have been posted are:
> 
>   http://www.dscpl.com.au/articles/modpython-002.html
>   http://www.dscpl.com.au/articles/modpython-003.html
> 
> I have posted this message to the general list rather than just the
> developer list as the information may be of general interest in as
> much as it will raise awareness that there are actually problems.
> I suggest that when we later get down to discussions on how to fix
> it that it be done on the developer list and not here however.

Graham, this is great work. It's helpful to understand the inner 
workings of mod_python when confronting the issues that arise.

Most (but not all) of the issues you raise concern writing handlers. I'd 
hate to see someone leave with the wrong impression about how to deal 
with these issues in their applications, when the advice given is more 
appropriate at the handler level. While each issue you discuss clearly 
demonstrates a problem, we should identify the higher level problems 
that fixing the module import system would address (such as, "Editing 
imported modules doesn't take effect immediately.").

On the other side of the coin, it's important to identify what sort of 
functionality should be retained. For example, despite its faults, an 
application written for mod_python.publisher can look like any other 
python application. Attempts to use alternate importing mechanisms at 
this level would look ugly and, even worse, make most of the code 
proprietary to mod_python (using apache.import_module() instead of 
import, for example). Extending the path outside of the application, 
such as via PythonPath, plays an important role here in the localised 
environment used by many developers. It can be key for the portability 
of the code, especially to non-mod_python environments.

It should be an established goal that web applications written for any 
handler included with mod_python can be written using only the standard 
library, even if that's not always the practice. It would be a shame to 
see developers come to mod_python only to find obstacles that restrict 
their productivity (and I'll grant that the current import issues fall 
into that category).

I think that defining the higher level problems and goals now will help 
to arrive at solutions that might not necessarily involve fixing current 
components.

For example, let's imagine that all of mod_python's import problems can 
be solved with some kind of magic bullet:

1. We want the PythonPath extended automatically based on the location 
of a file.

2. We want imported modules to be unloaded/reloaded automatically if 
modified or replaced in any way.

3. Imports of application code should be handled in a way that supports 
the packaging and portablility of an application.

Perhaps this can be addressed by adding code that looks for a .htPython 
directory in a file's current directory. This could be used to hold 
imported modules and packages shared by other files in the current 
directory. Because it follows an established convention, mod_python 
could import it in a way that doesn't cause namespace collisions and 
allows it to check it explicitly for changes. Conventional import 
statements can be used because it simply becomes part of an 
application's path (but not for the entire virtual host). Finally, a 
little security is offered if the server is configured to deny direct 
access to .ht* resources (typical in many apache installations). A 
compromise, to be sure, but it does allow sensitive resources to be 
packaged with an application.

I know you didn't want to go into the mechanics of fixing the module 
import mechanism, and I offer this only as an example to highlight the 
benefits of determining *what* to fix before deciding *how* to fix it. A 
scheme such as the one I outline offers backwards compatibility for 
legacy applications at the expense of adding some code that offers 
important new functionality. Hopefully, any changes to mod_python can be 
done in a similar way that doesn't threaten to fork the code.

From grahamd at dscpl.com.au  Thu Jul  7 18:50:49 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul  7 18:51:07 2005
Subject: [mod_python] Vampire for module reloading
Message-ID: <1120776649.14520@dscpl.user.openhosting.com>

Gonzalo =?ISO-8859-1?Q?Sainz-Tr=E1paga?= wrote ..

> On Thu, 2005-07-07 at 02:47 -0400, Graham Dumpleton wrote:
> > As someone pointed out already, any local imports of modules which
> > are a part of your web application should not use the "import" statement
> > but should instead explicitly use apache.import_module(). Although
> > they said to replace all uses of "import", you should only do so for
> your
> > own code. Do not use apache.import_module() for modules which are
> > a part of the standard Python distribution. The apache.import_module()
> > function also doesn't work very well with packages, so avoid using
> > packages for your own code.
> 
> What do you mean by "packages"?

When I say package, what I am referring to is where Python modules are
structured in a directory where the top level directory has __init__.py in it
denoting to Python that it is actually a directory based package rather
than a file based module.

Ie., module would be a single file of form:

  module.py

and package is where a directory is used and there could be multiple
parts to it:

  package/__init__.py
  package/submodule.py
  package/subpackage/__init__.py

> I am using sqlobject and a few others
> which are installed in my shared hosting directory, inside a "packages"
> file.

The sqlobject system is structured as a package.

> What I am doing is altering sys.path in a config.py file that is
> imported by all the other files in my application.

Setting sys.path explicitly from inside Python code files executing under
mod_python is generally not a good idea. At least it could be a problem
in a multithread MPM.

> I will drop this and replace is with import_module() and the
> corresponding path for the files like you recommended, but what do you
> mean by "doesn't work very well"?

Doesn't work very well, as in don't expect automatic module reloading to
work as you think it should when you use "import_module()" on a package.
Also, if you access submodules or subpackages from a package, you will
end up with redundant imports occuring even though nothing has changed.
There are also various other issues when you get complicated packages.
See just posted article on problems with module importing system:

  http://www.dscpl.com.au/articles.html

Because "sqlobject" is a package, therefore don't use "import_module()"
with it. In this case, sqlobject isn't one of your own and would normally be
in Python site-packages directory. For any externally sourced code like this
stick it in a special directory separate to your own code. This may actually
be what your "packages" directory is already for.

For these externally sourced packages you don't have much choice but to
explicitly set PythonPath directive to define their location and continue to
use the "import" statement.

As for your own code, it is better not to organise it as packages if you want
to be able to use "import_module()" with it.

Anyway, I am sure others will disagree with me on all this. :-)

Graham
From litestar at gmail.com  Thu Jul  7 20:10:59 2005
From: litestar at gmail.com (LiteStar numnums)
Date: Thu Jul  7 20:11:03 2005
Subject: [mod_python] Apache2 + mod_python + DragonFly?
Message-ID: <283f5df105070717104b7abb9e@mail.gmail.com>

Anyone have any luck with the above configuration? I simply installed
all from package source, but apache pukes when attempting to load
mod_python:
Cannot load /usr/local/libexec/apache2/mod_python.so into server:
/usr/local/libexec/apache2/mod_python.so: Undefined symbol
"pthread_create".
If not from packages, anyone running the above config from source? Cheers!
 -- Stefan
-- 
In possibility the eternal, rightly understood, continually lays out
only a small piece at a time
In possibility the eternal is continually near enough to be at hand
and yet far enough away to keep man advancing towards the
eternal, on the way, in forward movement. In this way the ternal lures
and draws a person, in the possible, from craddle to grave
if he just chooses to hope
   <<Soren Kierkegaard>>

From grahamd at dscpl.com.au  Thu Jul  7 20:14:20 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul  7 20:14:42 2005
Subject: [mod_python] Articles on module importing.
Message-ID: <1120781660.1939@dscpl.user.openhosting.com>

Jorey Bump wrote ..
> 
> Most (but not all) of the issues you raise concern writing handlers. I'd
> hate to see someone leave with the wrong impression about how to deal 
> with these issues in their applications, when the advice given is more
> appropriate at the handler level.

If you feel that this primarily only affects those who are writing their own
high level handlers, as opposed to those who might instead be using the
mod_python.publisher handler, then I would suggest you are wrong.

The current mod_python.publisher handler uses the import_module()
function internally to load modules and so it is just as much afflicted by many
of these problems, more so when within a published module the code uses
the import_module() explicitly and even if only the "import" statement is
used within that module.

> I think that defining the higher level problems and goals now will help
> to arrive at solutions that might not necessarily involve fixing current
> components.
> 
> For example, let's imagine that all of mod_python's import problems can
> be solved with some kind of magic bullet:
> 
> 1. We want the PythonPath extended automatically based on the location
> of a file.

This is not a goal or requirement, it is indicative of a solution. To provide
the desired behaviour doesn't require PythonPath be extended as there are
actually better ways of achieving the same thing and still maintain the
required transparency that you require.

The real goal you are probably alluding to is that within a Python code
file serving as a handler you want the "import" statement to be able to
pick up a module that resides in the same directory. Yes?

At the moment, if using mod_python.publisher this only works where the
published module is in the same directory as where the PythonHandler
directive was specified, it does not work where the published module is
in a subdirectory. Thus, should the ability to use the "import" statement
in this way also work for a published module in a subdirectory of where
the handler directive was originally defined?

> 2. We want imported modules to be unloaded/reloaded automatically if 
> modified or replaced in any way.

What sort of imported modules though? Should this only apply to modules
imported by import_module() whether as a high level handler or explicitly
by the user or within something like mod_python.publisher? Should it also
apply to modules imported using the "import" statement for (1) above?
Should there be depth based dependency checking such that if some
grand child module imported at global scope within a high level handler
is changed, that all parents of the module up to the high level handler
should be automatically reloaded?

> 3. Imports of application code should be handled in a way that supports
> the packaging and portablility of an application.

Packages are a big problem when it comes to making automatic module
reloading work properly. I have probably put in a few days worth of
effort just into this particular issue of late and still don't have a workable
solution. I got to the point where I could finally see what might yield
a workable solution and then stopped as the code was getting overly
complicated, so much so that one had to question whether it was worth
the trouble.

The problem with packages is that although simple packages where
module imports fall into a strict tree and parents import all their children
at the outset can be made to work, if you want to support multi level
dependency checking for changes in the module reloading scheme, it
gets really hard after that. This is because the module imports within a
package can result in a graph of dependencies inclusive of cycles. The 
final solution which I stopped short of implementing entailed having to
treat a package as a complete blob and if any file within the package
changed, you had to force reloading of every file within the package
and anything that relied on any part of the package.

At some point there is going to have to be a major decision made as
to whether import_module() should support packages or not. This will
be a trade off between a great deal more complexity in the module
importing system or not supporting packages, thereby forcing someone
to use the bog standard "import" mechanisms in Python for packages
and thus give up any form of automatic module reloading.

> I know you didn't want to go into the mechanics of fixing the module 
> import mechanism, and I offer this only as an example to highlight the
> benefits of determining *what* to fix before deciding *how* to fix it.
> A  scheme such as the one I outline offers backwards compatibility for 
> legacy applications at the expense of adding some code that offers 
> important new functionality. 

If one kept everything backward compatable you will still have a broken
system as some problems cannot be fixed except by breaking backward
compatability. The best one could achieve in some areas is to have the
new system be incompatible, but provide a option which allows the old
behaviour to be selectively turned on for parts of the document tree. This
would allow old code to work, but at the same time would open up the
code to some of the existing problems.

One does has to look at what the high level goals are and I don't mind
a bit of discussion on this. It gets to a point though that it becomes
really hard to enumerate the goals without showing how they would
be achieved. Past discussions have degenerated into mail storms
because without an explaination of the problem, as well as a specific plan
in front of people as to how it could be fixed and how it would work to
focus on, it would just diverge into half a dozen different conversations
ranging from taking issue with whether it was a problem in the first
place to one of a number of solutions that didn't really address the
problem because the person proposing it didn't really understand the
problem.

Thus my experience from past discussions on this was that there are a
great deal more issues and questions to be answered than most appreciate.
Some others have tended to focus on a specific aspect of one issue not
realising that there are half a dozen other factors that need to be considered
on that one point.

> Hopefully, any changes to mod_python can be
> done in a similar way that doesn't threaten to fork the code.

I am not out to fork the mod_python code. I am very conscious of
maintaining backward compatability and I want to see mod_python
fixed. It has been slow progress though in getting some users to
even accept what the problems are and that they do exist and that
they aren't some figment of my crazed imagination. It is has been
even harder getting some to accept some of the solutions I have
been proposing. They seem to think I am going to break everything
or inforce some new world order. I have almost given up trying a
few times. My SO is very patient, but she has a limit when it comes
to spending so much time on something which isn't what I am
mean't to be focusing on. :-(


Graham
From grahamd at dscpl.com.au  Thu Jul  7 20:22:36 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul  7 20:22:42 2005
Subject: [mod_python] Apache2 + mod_python + DragonFly?
Message-ID: <1120782156.7797@dscpl.user.openhosting.com>

LiteStar numnums wrote ..
> Anyone have any luck with the above configuration? I simply installed
> all from package source, but apache pukes when attempting to load
> mod_python:
> Cannot load /usr/local/libexec/apache2/mod_python.so into server:
> /usr/local/libexec/apache2/mod_python.so: Undefined symbol
> "pthread_create".
> If not from packages, anyone running the above config from source? Cheers!

Start by reading the FAQ entry for this problem:

  http://www.modpython.org/FAQ/faqw.py?query=pthread&querytype=simple&casefold=yes&req=search

It comes about because Apache was linked with the pthread functions
but Python/mod_python requires it. The FAQ gives a solution for BSD.
Otherwise, you are going to have to relink Apache and ensure it uses
library with the pthread functions in it.

Graham
From grahamd at dscpl.com.au  Thu Jul  7 20:32:57 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul  7 20:33:03 2005
Subject: [mod_python] Apache2 + mod_python + DragonFly?
Message-ID: <1120782777.14402@dscpl.user.openhosting.com>

Graham Dumpleton wrote ..
> 
> It comes about because Apache was linked with the pthread functions
> but Python/mod_python requires it. 

Sorry, meant to say:

  It comes about because Apache wasn't linked with the pthread functions
  but Python/mod_python requires it.

Graham
From litestar at gmail.com  Thu Jul  7 20:33:05 2005
From: litestar at gmail.com (LiteStar numnums)
Date: Thu Jul  7 20:33:10 2005
Subject: [mod_python] Apache2 + mod_python + DragonFly?
In-Reply-To: <1120782156.7797@dscpl.user.openhosting.com>
References: <1120782156.7797@dscpl.user.openhosting.com>
Message-ID: <283f5df105070717337c1d57d6@mail.gmail.com>

That wasn't the point; the point was to know if I was simply brain
dead or that the package was the problem. Besides which, my LD_PRELOAD
and LD_LIBRARY_PATH were already modified. So, has anyone had a
problem with DragonFly or am I simply thick. Cheers!
 -- Stefan

On 7/7/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> LiteStar numnums wrote ..
> > Anyone have any luck with the above configuration? I simply installed
> > all from package source, but apache pukes when attempting to load
> > mod_python:
> > Cannot load /usr/local/libexec/apache2/mod_python.so into server:
> > /usr/local/libexec/apache2/mod_python.so: Undefined symbol
> > "pthread_create".
> > If not from packages, anyone running the above config from source? Cheers!
> 
> Start by reading the FAQ entry for this problem:
> 
>   http://www.modpython.org/FAQ/faqw.py?query=pthread&querytype=simple&casefold=yes&req=search
> 
> It comes about because Apache was linked with the pthread functions
> but Python/mod_python requires it. The FAQ gives a solution for BSD.
> Otherwise, you are going to have to relink Apache and ensure it uses
> library with the pthread functions in it.
> 
> Graham
> 


-- 
In possibility the eternal, rightly understood, continually lays out
only a small piece at a time
In possibility the eternal is continually near enough to be at hand
and yet far enough away to keep man advancing towards the
eternal, on the way, in forward movement. In this way the ternal lures
and draws a person, in the possible, from craddle to grave
if he just chooses to hope
   <<Soren Kierkegaard>>

From litestar at gmail.com  Thu Jul  7 20:37:06 2005
From: litestar at gmail.com (LiteStar numnums)
Date: Thu Jul  7 20:37:11 2005
Subject: [mod_python] Apache2 + mod_python + DragonFly?
In-Reply-To: <283f5df105070717337c1d57d6@mail.gmail.com>
References: <1120782156.7797@dscpl.user.openhosting.com>
	<283f5df105070717337c1d57d6@mail.gmail.com>
Message-ID: <283f5df1050707173767be510b@mail.gmail.com>

Doesn't matter; I'm thick =)
Cheers!
 -- Stefan

On 7/7/05, LiteStar numnums <litestar@gmail.com> wrote:
> That wasn't the point; the point was to know if I was simply brain
> dead or that the package was the problem. Besides which, my LD_PRELOAD
> and LD_LIBRARY_PATH were already modified. So, has anyone had a
> problem with DragonFly or am I simply thick. Cheers!
>  -- Stefan
> 
> On 7/7/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> > LiteStar numnums wrote ..
> > > Anyone have any luck with the above configuration? I simply installed
> > > all from package source, but apache pukes when attempting to load
> > > mod_python:
> > > Cannot load /usr/local/libexec/apache2/mod_python.so into server:
> > > /usr/local/libexec/apache2/mod_python.so: Undefined symbol
> > > "pthread_create".
> > > If not from packages, anyone running the above config from source? Cheers!
> >
> > Start by reading the FAQ entry for this problem:
> >
> >   http://www.modpython.org/FAQ/faqw.py?query=pthread&querytype=simple&casefold=yes&req=search
> >
> > It comes about because Apache was linked with the pthread functions
> > but Python/mod_python requires it. The FAQ gives a solution for BSD.
> > Otherwise, you are going to have to relink Apache and ensure it uses
> > library with the pthread functions in it.
> >
> > Graham
> >
> 
> 
> --
> In possibility the eternal, rightly understood, continually lays out
> only a small piece at a time
> In possibility the eternal is continually near enough to be at hand
> and yet far enough away to keep man advancing towards the
> eternal, on the way, in forward movement. In this way the ternal lures
> and draws a person, in the possible, from craddle to grave
> if he just chooses to hope
>    <<Soren Kierkegaard>>
> 


-- 
In possibility the eternal, rightly understood, continually lays out
only a small piece at a time
In possibility the eternal is continually near enough to be at hand
and yet far enough away to keep man advancing towards the
eternal, on the way, in forward movement. In this way the ternal lures
and draws a person, in the possible, from craddle to grave
if he just chooses to hope
   <<Soren Kierkegaard>>

From grahamd at dscpl.com.au  Thu Jul  7 20:40:06 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul  7 20:40:11 2005
Subject: [mod_python] Apache2 + mod_python + DragonFly?
Message-ID: <1120783206.19146@dscpl.user.openhosting.com>

The error:

 Cannot load /usr/local/libexec/apache2/mod_python.so into server:
 /usr/local/libexec/apache2/mod_python.so: Undefined symbol
 "pthread_create".

is nothing to do with DragonFly and is more fundamental than that.
It would happen with any module you tried to use which made use
of threading. I found that importing the "socket" module on a BSD
system was generally enough to trigger the same problem.

However, since you think it is a DragonFly problem, then there isn't
much I can do to help you.

Graham

LiteStar numnums wrote ..
> That wasn't the point; the point was to know if I was simply brain
> dead or that the package was the problem. Besides which, my LD_PRELOAD
> and LD_LIBRARY_PATH were already modified. So, has anyone had a
> problem with DragonFly or am I simply thick. Cheers!
>  -- Stefan
> 
> On 7/7/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> > LiteStar numnums wrote ..
> > > Anyone have any luck with the above configuration? I simply installed
> > > all from package source, but apache pukes when attempting to load
> > > mod_python:
> > > Cannot load /usr/local/libexec/apache2/mod_python.so into server:
> > > /usr/local/libexec/apache2/mod_python.so: Undefined symbol
> > > "pthread_create".
> > > If not from packages, anyone running the above config from source?
> Cheers!
> > 
> > Start by reading the FAQ entry for this problem:
> > 
> >   http://www.modpython.org/FAQ/faqw.py?query=pthread&querytype=simple&casefold=yes&req=search
> > 
> > It comes about because Apache was linked with the pthread functions
> > but Python/mod_python requires it. The FAQ gives a solution for BSD.
> > Otherwise, you are going to have to relink Apache and ensure it uses
> > library with the pthread functions in it.
> > 
> > Graham
> > 
> 
> 
> -- 
> In possibility the eternal, rightly understood, continually lays out
> only a small piece at a time
> In possibility the eternal is continually near enough to be at hand
> and yet far enough away to keep man advancing towards the
> eternal, on the way, in forward movement. In this way the ternal lures
> and draws a person, in the possible, from craddle to grave
> if he just chooses to hope
>    <<Soren Kierkegaard>>
From litestar at gmail.com  Thu Jul  7 20:50:47 2005
From: litestar at gmail.com (LiteStar numnums)
Date: Thu Jul  7 20:50:53 2005
Subject: [mod_python] Apache2 + mod_python + DragonFly?
In-Reply-To: <1120783206.19146@dscpl.user.openhosting.com>
References: <1120783206.19146@dscpl.user.openhosting.com>
Message-ID: <283f5df105070717504c9848ec@mail.gmail.com>

As I said, I'm thick. I found the problem, which was something else to
do with libraries. Thanks anyway.
--Stefan

On 7/7/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> The error:
> 
>  Cannot load /usr/local/libexec/apache2/mod_python.so into server:
>  /usr/local/libexec/apache2/mod_python.so: Undefined symbol
>  "pthread_create".
> 
> is nothing to do with DragonFly and is more fundamental than that.
> It would happen with any module you tried to use which made use
> of threading. I found that importing the "socket" module on a BSD
> system was generally enough to trigger the same problem.
> 
> However, since you think it is a DragonFly problem, then there isn't
> much I can do to help you.
> 
> Graham
> 
> LiteStar numnums wrote ..
> > That wasn't the point; the point was to know if I was simply brain
> > dead or that the package was the problem. Besides which, my LD_PRELOAD
> > and LD_LIBRARY_PATH were already modified. So, has anyone had a
> > problem with DragonFly or am I simply thick. Cheers!
> >  -- Stefan
> >
> > On 7/7/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> > > LiteStar numnums wrote ..
> > > > Anyone have any luck with the above configuration? I simply installed
> > > > all from package source, but apache pukes when attempting to load
> > > > mod_python:
> > > > Cannot load /usr/local/libexec/apache2/mod_python.so into server:
> > > > /usr/local/libexec/apache2/mod_python.so: Undefined symbol
> > > > "pthread_create".
> > > > If not from packages, anyone running the above config from source?
> > Cheers!
> > >
> > > Start by reading the FAQ entry for this problem:
> > >
> > >   http://www.modpython.org/FAQ/faqw.py?query=pthread&querytype=simple&casefold=yes&req=search
> > >
> > > It comes about because Apache was linked with the pthread functions
> > > but Python/mod_python requires it. The FAQ gives a solution for BSD.
> > > Otherwise, you are going to have to relink Apache and ensure it uses
> > > library with the pthread functions in it.
> > >
> > > Graham
> > >
> >
> >
> > --
> > In possibility the eternal, rightly understood, continually lays out
> > only a small piece at a time
> > In possibility the eternal is continually near enough to be at hand
> > and yet far enough away to keep man advancing towards the
> > eternal, on the way, in forward movement. In this way the ternal lures
> > and draws a person, in the possible, from craddle to grave
> > if he just chooses to hope
> >    <<Soren Kierkegaard>>
> 


-- 
In possibility the eternal, rightly understood, continually lays out
only a small piece at a time
In possibility the eternal is continually near enough to be at hand
and yet far enough away to keep man advancing towards the
eternal, on the way, in forward movement. In this way the ternal lures
and draws a person, in the possible, from craddle to grave
if he just chooses to hope
   <<Soren Kierkegaard>>

From list at joreybump.com  Thu Jul  7 23:33:32 2005
From: list at joreybump.com (Jorey Bump)
Date: Thu Jul  7 23:33:47 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <1120781660.1939@dscpl.user.openhosting.com>
References: <1120781660.1939@dscpl.user.openhosting.com>
Message-ID: <42CDF40C.1020200@joreybump.com>

Graham Dumpleton wrote:
> Jorey Bump wrote ..
> 
>>Most (but not all) of the issues you raise concern writing handlers. I'd
>>hate to see someone leave with the wrong impression about how to deal 
>>with these issues in their applications, when the advice given is more
>>appropriate at the handler level.
> 
> If you feel that this primarily only affects those who are writing their own
> high level handlers, as opposed to those who might instead be using the
> mod_python.publisher handler, then I would suggest you are wrong.

No, I understand that an application inherits the problems of the 
handler on which it was based.

> The current mod_python.publisher handler uses the import_module()
> function internally to load modules and so it is just as much afflicted by many
> of these problems, more so when within a published module the code uses
> the import_module() explicitly and even if only the "import" statement is
> used within that module.

Understood. My point is that alternate import mechanisms such as 
import_module() shouldn't be encouraged in *published* modules or 
modules that are based on other handlers. I think we both agree that we 
want the average Python programmer to be able to start using mod_python 
  as seamlessly as possible. Unfortunately, they need to choose a 
handler, and usually aren't any more interested in writing their own 
handler than a PHP programmer would be. I like to use Publisher, and I 
have worked around every limitation except one: After editing modules 
imported by a published module, apache must be restarted. So I agree 
that this is a serious problem that must be fixed, and not only in the 
Publisher handler.

>>I think that defining the higher level problems and goals now will help
>>to arrive at solutions that might not necessarily involve fixing current
>>components.
>>
>>For example, let's imagine that all of mod_python's import problems can
>>be solved with some kind of magic bullet:
>>
>>1. We want the PythonPath extended automatically based on the location
>>of a file.
> 
> This is not a goal or requirement, it is indicative of a solution. To provide
> the desired behaviour doesn't require PythonPath be extended as there are
> actually better ways of achieving the same thing and still maintain the
> required transparency that you require.
> 
> The real goal you are probably alluding to is that within a Python code
> file serving as a handler you want the "import" statement to be able to
> pick up a module that resides in the same directory. Yes?

No. I think it's poor practice to put any kind of library files in a 
directory that is accessible to browsers, even with other languages. The 
risk is too high that someone with knowledge of your directory structure 
can call your support modules directly, causing unintended side effects.

What I would like to see is path extension that is private to the 
application (not just the handler) but is otherwise indistinguishable 
from other parts of the search path. Naturally, it should come first, 
somewhat *emulating* the way the current directory is added to sys.path 
when running python from the command line, but without the risk of 
placing the modules/packages where they can be exposed to a browser. 
Because mod_python runs as the apache user, and not the user who owns 
the files, it's impossible to establish a convention that places this 
extended path outside the DocumentRoot. But a convention is required, 
hence my .htPython suggestion.

> At the moment, if using mod_python.publisher this only works where the
> published module is in the same directory as where the PythonHandler
> directive was specified, it does not work where the published module is
> in a subdirectory. Thus, should the ability to use the "import" statement
> in this way also work for a published module in a subdirectory of where
> the handler directive was originally defined?

No. For backwards compatibility, I'd leave this behaviour as-is. We use 
the phrase "published module" to refer to a module that we intend a 
browser to access, but mod_python.publisher makes no such distinction. I 
don't want to see mod_python automagically package subdirectories or add 
them to the path because it gives newbies more rope to hang themselves. 
How can mod_python know if a subdirectory contains published or 
importable modules? It's better to check for a specially named directory 
and let the handler add it to the path. And it's not enough to restrict 
this special directory to the location where the PythonHandler was 
specified, because we want to be able to easily install the application 
elsewhere. Therefore, it has to be in the same directory as the 
published module. For example, http://host/app/ might contain this:

  .htPython/module1.py
  .htPython/module2.py
  app1.py
  app2.py

#app1.py

import module1
import module2

def index
     a = module1.do(something)
     return module2.show(a)

app1 imports modules from the special directory, but app2 doesn't. No 
big deal. What's nice is that app.tgz could be untarred anywhere that 
the appropriate PythonHandler is defined, and it wouldn't be necessary 
to manually extend the PythonPath with an explicit file specification.

The only precaution left for the developer is to name imported 
modules/packages appropriately to prevent collisions, but this must be 
done for all Python apps, anyway. Ideally, the path would be modified 
per "published" module, but I don't know if that's even possible.

>>2. We want imported modules to be unloaded/reloaded automatically if 
>>modified or replaced in any way.
> 
> What sort of imported modules though? Should this only apply to modules
> imported by import_module() whether as a high level handler or explicitly
> by the user or within something like mod_python.publisher? Should it also
> apply to modules imported using the "import" statement for (1) above?
> Should there be depth based dependency checking such that if some
> grand child module imported at global scope within a high level handler
> is changed, that all parents of the module up to the high level handler
> should be automatically reloaded?

Depth is certainly an issue, but one could assume (or at least establish 
the convention) that the custom modules in .htPython mostly import 
stable modules that are unlikely to change, such as those in the 
standard library. The mere possibility of specifying a conventional and 
portable location for custom modules goes a long way towards solving the 
import problem.

>>3. Imports of application code should be handled in a way that supports
>>the packaging and portablility of an application.
> 
> Packages are a big problem when it comes to making automatic module
> reloading work properly. I have probably put in a few days worth of
> effort just into this particular issue of late and still don't have a workable
> solution. I got to the point where I could finally see what might yield
> a workable solution and then stopped as the code was getting overly
> complicated, so much so that one had to question whether it was worth
> the trouble.

Sorry, by packaging I meant simply creating a tarball or zipfile for 
distribution, not a Python package.

> The problem with packages...

I currently develop most of my Publisher applications as packages that 
are stored in a directory prefixed to PythonPath. It works fine and I 
couldn't bear to lose that functionality (although I obviously still 
need to restart apache after editing package code). Unfortunately, I 
don't know enough about the import mechanism to understand the 
difference between reloading modules vs. packages, so I don't know if my 
scheme offers any solution here (or even if it's feasible).

From grahamd at dscpl.com.au  Fri Jul  8 00:59:06 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul  8 00:59:24 2005
Subject: [mod_python] Articles on module importing.
Message-ID: <1120798746.19962@dscpl.user.openhosting.com>

Jorey Bump wrote ..
> > The current mod_python.publisher handler uses the import_module()
> > function internally to load modules and so it is just as much afflicted
> by many
> > of these problems, more so when within a published module the code uses
> > the import_module() explicitly and even if only the "import" statement
> is
> > used within that module.
> 
> Understood. My point is that alternate import mechanisms such as 
> import_module() shouldn't be encouraged in *published* modules or 
> modules that are based on other handlers. I think we both agree that we
> want the average Python programmer to be able to start using mod_python
>   as seamlessly as possible. 

What would you think of a scheme whereby you could use the "import"
statement and underneath it would magically and seamlessly translate
that into a call to import_module() for you?

The call to import_module() under the covers would only happen though where
the module was in the same directory, or in one of a set of special directories
designated by a path distinct from sys.path. If a module wasn't found in
those places, it will fall back to use of the standard Python import
mechanism and search in only sys.path.

Thus, for those modules local to the document tree or in specially
designated directories, even though the "import" statement was used,
automatic module reloading would work. Because the "import"
statement is used, you don't need to have two sets of code, one for
command line use and one for use under mod_python. Under mod_python,
if necessary, all you would need to do is designate those special directories
where modules are stored which you want managed by "import_module()"
under the covers instead of the standard Python module import mechanism.

> After editing modules 
> imported by a published module, apache must be restarted.

Or all the modules that inherit it need to be touched so there modification
time changes. :-)

> >>1. We want the PythonPath extended automatically based on the location
> >>of a file.
> > 
> > This is not a goal or requirement, it is indicative of a solution. To
> provide
> > the desired behaviour doesn't require PythonPath be extended as there
> are
> > actually better ways of achieving the same thing and still maintain the
> > required transparency that you require.
> > 
> > The real goal you are probably alluding to is that within a Python code
> > file serving as a handler you want the "import" statement to be able
> to
> > pick up a module that resides in the same directory. Yes?
> 
> No. I think it's poor practice to put any kind of library files in a 
> directory that is accessible to browsers, even with other languages. The
> risk is too high that someone with knowledge of your directory structure
> can call your support modules directly, causing unintended side effects.

It could be viewed as being not recommended for beginners who don't
understand all the security implications, but it is possible now and when
someone who knows how to secure the system properly does it, it can
be quick means to and end and can save a lot of pain in other ways.

Thus, whether one does this or not is going to be a convention only.
Depending on what type of handler system you are using, putting such
common code in modules starting with an underscore and using some
thing like the following in a .htaccess file:

  <Files "_*">
  deny from all
  </Files>

can be enough to stop the code being exposed.

> > At the moment, if using mod_python.publisher this only works where the
> > published module is in the same directory as where the PythonHandler
> > directive was specified, it does not work where the published module is
> > in a subdirectory. Thus, should the ability to use the "import" statement
> > in this way also work for a published module in a subdirectory of where
> > the handler directive was originally defined?
> 
> No. For backwards compatibility, I'd leave this behaviour as-is. We use
> the phrase "published module" to refer to a module that we intend a 
> browser to access, but mod_python.publisher makes no such distinction.
> I  don't want to see mod_python automagically package subdirectories or add
> them to the path because it gives newbies more rope to hang themselves.

What if the scheme didn't actually involve the addition of either the top level
handler directory or the subdirectories into sys.path in the first place for this
to work?

The problem we get at the moment is that we get questions of why this sort
of importing doesn't work for subdirectories in the first place. How only the
top level handler directory is added into sys.path is explained. End result is
that they go and fiddle with PythonPath explicitly anyway and still hang
themselves.

Wouldn't it be preferable if a scheme could be offered where "import" just
works for modules in the same directory regardless of whether the importer is
in the top level handler directory or a subdirectory, especially where the
manner it was implemented didn't require extension of sys.path and where
automatic module reloading worked?

I feel it comes down to looking at how all users want and expect this stuff
to work, rather than drawing conclusions as to whether one way is better
than another, and make it work, but make it work transparently in what
would be regarded as correct way for the mod_python case.

> Therefore, it has to be in the same directory as the 
> published module. For example, http://host/app/ might contain this:
> 
>   .htPython/module1.py
>   .htPython/module2.py
>   app1.py
>   app2.py
> 
> #app1.py
> 
> import module1
> import module2
> 
> def index
>      a = module1.do(something)
>      return module2.show(a)
> 
> app1 imports modules from the special directory, but app2 doesn't. No 
> big deal. What's nice is that app.tgz could be untarred anywhere that 
> the appropriate PythonHandler is defined, and it wouldn't be necessary
> to manually extend the PythonPath with an explicit file specification.

Unless you take extra precautions by adding "deny from all" into the
".htPython/.htaccess" file, these modules are still going to be accessible.
That you have to take explicit steps to protect them is not much
different to using a convention of using a leading underscore.

> The only precaution left for the developer is to name imported 
> modules/packages appropriately to prevent collisions, but this must be
> done for all Python apps, anyway. Ideally, the path would be modified 
> per "published" module, but I don't know if that's even possible.

If the "import" statement overlays "import_module()" and the later supports
the same named module in different directories, you wouldn't have to
worry about collisions. If it knows to grab them from this directory using
this mechanism before looking elsewhere through some special path
designation, then you could have everything you want and more.

Am getting into implementation, which I did't want to, but what if for
this to work one way was to add the following to the start of your
appl1.py file:

  import os

  directory = os.path.dirname(__file__)
  modules = os.path.join(directory,".htPython")
  __path__.insert(0,modules)

  import module1
  import module2

You need to add a few lines, but it gives you control on where "import"
looks, but through a bit of magic when it finds "module1" existant in
that directory it will also use "import_module()" to actually load it and
when it handles same named modules the collision problems go away.

> Depth is certainly an issue, but one could assume (or at least establish
> the convention) that the custom modules in .htPython mostly import 
> stable modules that are unlikely to change, such as those in the 
> standard library. The mere possibility of specifying a conventional and
> portable location for custom modules goes a long way towards solving the
> import problem.

It isn't that a specifying a special location is important, but that there is
a separation between sys.path modules where standard Python import
infrastructure is used, and web application directories where under the
covers of "import" the "import_module()" function is used. Thus with the
example above, a mechanism is provided to specify where you directory
is, but you set your own convention as to what it is named and where
it is located.

> Sorry, by packaging I meant simply creating a tarball or zipfile for 
> distribution, not a Python package.

Which means in your case, you wouldn't be affected if "import_module()"
didn't support Python packages within the web application area.

> I currently develop most of my Publisher applications as packages that
> are stored in a directory prefixed to PythonPath. It works fine and I 
> couldn't bear to lose that functionality (although I obviously still 
> need to restart apache after editing package code). Unfortunately, I 
> don't know enough about the import mechanism to understand the 
> difference between reloading modules vs. packages, so I don't know if my
> scheme offers any solution here (or even if it's feasible).

It is all feasible, except for Python packages which may just not be worth
the effort. I know it is feasible, because for how you are using things, it
is already possible and working in "vampire::publisher". ;-)

Graham
From nicolas.lehuen at gmail.com  Fri Jul  8 02:11:33 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Fri Jul  8 02:11:40 2005
Subject: [mod_python] Vampire for module reloading
In-Reply-To: <1120776649.14520@dscpl.user.openhosting.com>
References: <1120776649.14520@dscpl.user.openhosting.com>
Message-ID: <c298f2d70507072311799856c9@mail.gmail.com>

2005/7/8, Graham Dumpleton <grahamd@dscpl.com.au>:
> 
> For these externally sourced packages you don't have much choice but to
> explicitly set PythonPath directive to define their location and continue 
> to
> use the "import" statement.
> 
> As for your own code, it is better not to organise it as packages if you 
> want
> to be able to use "import_module()" with it.
> 
> Anyway, I am sure others will disagree with me on all this. :-)
> 
> Graham
> 

Well, I for one completely agree with you. I really think "library" code 
(like sqlobject or Mysqldb or any other package which is not related to 
mod_python publishing) should be imported the standard way (using the import 
keyword) by appending the path to the libraries with the PythonPath 
directive. apache.import_module should only be used for published pages and 
dynamic modules.

Regards,
Nicolas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050708/05c74736/attachment.html
From list at joreybump.com  Fri Jul  8 09:40:23 2005
From: list at joreybump.com (Jorey Bump)
Date: Fri Jul  8 09:40:37 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <1120798746.19962@dscpl.user.openhosting.com>
References: <1120798746.19962@dscpl.user.openhosting.com>
Message-ID: <42CE8247.4080807@joreybump.com>

Graham Dumpleton wrote:
> Jorey Bump wrote ..
> 
>>Understood. My point is that alternate import mechanisms such as 
>>import_module() shouldn't be encouraged in *published* modules or 
>>modules that are based on other handlers. I think we both agree that we
>>want the average Python programmer to be able to start using mod_python
>>  as seamlessly as possible. 
> 
> What would you think of a scheme whereby you could use the "import"
> statement and underneath it would magically and seamlessly translate
> that into a call to import_module() for you?
> 
> The call to import_module() under the covers would only happen though where
> the module was in the same directory, or in one of a set of special directories
> designated by a path distinct from sys.path. If a module wasn't found in
> those places, it will fall back to use of the standard Python import
> mechanism and search in only sys.path.

Yes, this is precisely what I'm trying to describe.

> Thus, for those modules local to the document tree or in specially
> designated directories, even though the "import" statement was used,
> automatic module reloading would work. Because the "import"
> statement is used, you don't need to have two sets of code, one for
> command line use and one for use under mod_python. Under mod_python,
> if necessary, all you would need to do is designate those special directories
> where modules are stored which you want managed by "import_module()"
> under the covers instead of the standard Python module import mechanism.

Exactly. But there could also be a default (i.e. ".htPython"), to 
provide some commonality among installations, to ease configuration for 
both the developer and administrator.

>>After editing modules 
>>imported by a published module, apache must be restarted.
> 
> 
> Or all the modules that inherit it need to be touched so there modification
> time changes. :-)

Yes, perhaps I overemphasized, but I find such workarounds to be 
tedious, also ("OK, I edited a module, now what other files do I need to 
touch?". The holy grail here is behaviour similar to PHP, where file 
edits take immediate effect, but without losing the performance gains 
from module caching, whenever possible.

>>No. I think it's poor practice to put any kind of library files in a 
>>directory that is accessible to browsers, even with other languages. The
>>risk is too high that someone with knowledge of your directory structure
>>can call your support modules directly, causing unintended side effects.
> 
> It could be viewed as being not recommended for beginners who don't
> understand all the security implications, but it is possible now and when
> someone who knows how to secure the system properly does it, it can
> be quick means to and end and can save a lot of pain in other ways.

Absolutely. I wouldn't want to prevent it, but I still think it's a bad 
idea.

> Thus, whether one does this or not is going to be a convention only.

Correct.

> Depending on what type of handler system you are using, putting such
> common code in modules starting with an underscore and using some
> thing like the following in a .htaccess file:
> 
>   <Files "_*">
>   deny from all
>   </Files>
> 
> can be enough to stop the code being exposed.

Yes, but here we're getting into one of the current weaknesses of 
mod_python: It requires too much administrative capability.

What's needed is a handler that's included in the mod_python 
distribution that allows an admin to install and configure mod_python 
once, and developers to use it immediately for web applications, with 
many of the associated headaches taken care of behind the scenes. 
Publisher2, perhaps. :)

>>I  don't want to see mod_python automagically package subdirectories or add
>>them to the path because it gives newbies more rope to hang themselves.
> 
> What if the scheme didn't actually involve the addition of either the top level
> handler directory or the subdirectories into sys.path in the first place for this
> to work?

Yes, a virtualization may be necessary, especially when trying to 
prevent collisions. But when taken out of the mod_python environment, 
the code should still work (although one may have to prefix the special 
directory to PYTHONPATH or move the modules into the search path).

> The problem we get at the moment is that we get questions of why this sort
> of importing doesn't work for subdirectories in the first place. How only the
> top level handler directory is added into sys.path is explained. End result is
> that they go and fiddle with PythonPath explicitly anyway and still hang
> themselves.

I hesitate to mention it, but maybe the directory in which the 
PythonHandler is defined could also have the special quality where the 
modules in .htPython are available to all other modules in the 
interpreter, regardless of location. Actually, this is easily done now, 
without any changes to mod_python. Simply define this in a virtual host:

DocumentRoot /var/www/host1/site

<LocationMatch ".htPython">
   Deny from All
</LocationMatch>

<Directory /var/www/host1/site/app>
   SetHandler python-program
   PythonHandler mod_python.publisher
   PythonDebug On
   PythonPath "['/var/www/host1/site/app/.htPython'] + sys.path"
</Directory>

An admin could do this now, making it much easier to support 
mod_python.publisher on a server for multiple clients. One advantage is 
that a team of developers would have a common area to store custom 
modules for import, and they would at least be able to avoid name 
collisions for these modules (if not the published modules).

A little protection is offered by denying browser access to the 
.htPython directory, but it should noted that any other system user can 
read those files. This is a problem shared by most web applications, not 
just those written for mod_python, even when the files are stored 
outside of the DocumentRoot.

This also eases application distribution, but it's not as simple as 
tarballing a single directory.

> Wouldn't it be preferable if a scheme could be offered where "import" just
> works for modules in the same directory regardless of whether the importer is
> in the top level handler directory or a subdirectory, especially where the
> manner it was implemented didn't require extension of sys.path and where
> automatic module reloading worked?

Yes, but I fear that it encourages bad practice in the web application 
sphere. And it will cause problems exactly because it's perfectly 
acceptable, even desirable, in other application domains. In some ways, 
it's best to treat a module accessible by a browser as a simple frontend 
to a backend application; an interface, if you will. You don't encounter 
this problem at all if your standalone application includes a web server 
and is proxied through apache, for example.

> I feel it comes down to looking at how all users want and expect this stuff
> to work, rather than drawing conclusions as to whether one way is better
> than another, and make it work, but make it work transparently in what
> would be regarded as correct way for the mod_python case.

Well, the customer isn't always right -- mod_python is never going to be 
the same as PHP (I hope!). Some of the shock to new users is a result of 
their experience with other languages, so they will need to learn new 
tricks. But even for experienced Python programmers, some annoyances 
remain. I'd like to address these, first.

> Unless you take extra precautions by adding "deny from all" into the
> ".htPython/.htaccess" file, these modules are still going to be accessible.
> That you have to take explicit steps to protect them is not much
> different to using a convention of using a leading underscore.

Yes, you're right. I mistakenly assumed that the default config of most 
apache installations forbids access to any resource that begins with 
".ht", but this actually only applies to files, so some administrative 
step must be taken. Although it would be a good idea for mod_python 
itself to prevent access, it must also be handled by apache, in case 
mod_python isn't running. Since it's in the DocumentRoot, it's important 
not to leak information. In any case, using a special directory is more 
explicit (and flexible) than a file naming convention, IMHO.

> If the "import" statement overlays "import_module()" and the later supports
> the same named module in different directories, you wouldn't have to
> worry about collisions. If it knows to grab them from this directory using
> this mechanism before looking elsewhere through some special path
> designation, then you could have everything you want and more.
> 
> Am getting into implementation, which I did't want to, but what if for
> this to work one way was to add the following to the start of your
> appl1.py file:
> 
>   import os
> 
>   directory = os.path.dirname(__file__)
>   modules = os.path.join(directory,".htPython")
>   __path__.insert(0,modules)
> 
>   import module1
>   import module2
> 
> You need to add a few lines, but it gives you control on where "import"
> looks, but through a bit of magic when it finds "module1" existant in
> that directory it will also use "import_module()" to actually load it and
> when it handles same named modules the collision problems go away.

Yes, but I wouldn't want to ask a developer to do this in a published 
module. It's too much of a "gotcha".

> It isn't that a specifying a special location is important, but that there is
> a separation between sys.path modules where standard Python import
> infrastructure is used, and web application directories where under the
> covers of "import" the "import_module()" function is used. Thus with the
> example above, a mechanism is provided to specify where you directory
> is, but you set your own convention as to what it is named and where
> it is located.

Yes, but I think it's important to handle this outside of the published 
module, in the handler, even if the standard import mechanism is only 
being enhanced or simulated. Too much special code in the published 
module makes it proprietary to mod_python, in which case, you might as 
well use a full blown framework.

From realtega at gmail.com  Fri Jul  8 09:46:42 2005
From: realtega at gmail.com (Claudio)
Date: Fri Jul  8 09:48:12 2005
Subject: [mod_python] searching for publisher example
Message-ID: <1120830402.2450.30.camel@Portega>

Hi, 

could someone send me any example of code that use the publisher
handler, or any link of site that having it?

Thank you

From dharana at dharana.net  Fri Jul  8 10:12:00 2005
From: dharana at dharana.net (dharana)
Date: Fri Jul  8 10:12:33 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <1120798746.19962@dscpl.user.openhosting.com>
References: <1120798746.19962@dscpl.user.openhosting.com>
Message-ID: <42CE89B0.7070701@dharana.net>

Graham Dumpleton wrote:
> 
> It is all feasible, except for Python packages which may just not be worth
> the effort. I know it is feasible, because for how you are using things, it
> is already possible and working in "vampire::publisher". ;-)
> 

I'm a bit lost with the details of the implementation, but a reocurring fear 
that strikes me while reading some of the emails is: "packages not supported". 
Could you clarify if with the new method you won't be able to import packages or 
if you won't be able to automatically reload modified modules inside packages?

Thanks,

-- 
dharana

From nick at dd.revealed.net  Fri Jul  8 10:34:08 2005
From: nick at dd.revealed.net (Nick)
Date: Fri Jul  8 10:34:38 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <42CE89B0.7070701@dharana.net>
References: <1120798746.19962@dscpl.user.openhosting.com>
	<42CE89B0.7070701@dharana.net>
Message-ID: <42CE8EE0.9040201@dd.revealed.net>

If I read this right (and please verify that I am understanding this 
correctly as well), that import_module doesn't/wouldn't support importing 
packages that just use the stock Python import mechanism.  It could be 
possible to call import_module in the __init__.py and in all the submodules 
to refer to any modules in the package, but that is left to the programmer.

Otherwise, you could import packages normally, just not supporting reloading.

Nick

dharana wrote:
> Graham Dumpleton wrote:
> 
>>
>> It is all feasible, except for Python packages which may just not be 
>> worth
>> the effort. I know it is feasible, because for how you are using 
>> things, it
>> is already possible and working in "vampire::publisher". ;-)
>>
> 
> I'm a bit lost with the details of the implementation, but a reocurring 
> fear that strikes me while reading some of the emails is: "packages not 
> supported". Could you clarify if with the new method you won't be able 
> to import packages or if you won't be able to automatically reload 
> modified modules inside packages?
> 
> Thanks,
> 

From dharana at dharana.net  Fri Jul  8 10:39:19 2005
From: dharana at dharana.net (dharana)
Date: Fri Jul  8 10:39:31 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <42CE8EE0.9040201@dd.revealed.net>
References: <1120798746.19962@dscpl.user.openhosting.com>
	<42CE89B0.7070701@dharana.net> <42CE8EE0.9040201@dd.revealed.net>
Message-ID: <42CE9017.2030301@dharana.net>

Nick wrote:
> If I read this right (and please verify that I am understanding this 
> correctly as well), that import_module doesn't/wouldn't support 
> importing packages that just use the stock Python import mechanism.  It 
> could be possible to call import_module in the __init__.py and in all 
> the submodules to refer to any modules in the package, but that is left 
> to the programmer.
> 
> Otherwise, you could import packages normally, just not supporting 
> reloading.

Oh, ok. I feel better now. But I think I should comment that then, for me, the 
new mechanism  won't make a difference in the "apachectl restart" routine. I 
will continue to do restart apache if the new mechanism doesn't supports 
packages. I've abstracted a lot of things in my custom handler/webapp so the 
only thing I'm changing nowadays are inside packages (99% of the time).

> 
> Nick
> 
> dharana wrote:
> 
>> Graham Dumpleton wrote:
>>
>>>
>>> It is all feasible, except for Python packages which may just not be 
>>> worth
>>> the effort. I know it is feasible, because for how you are using 
>>> things, it
>>> is already possible and working in "vampire::publisher". ;-)
>>>
>>
>> I'm a bit lost with the details of the implementation, but a 
>> reocurring fear that strikes me while reading some of the emails is: 
>> "packages not supported". Could you clarify if with the new method you 
>> won't be able to import packages or if you won't be able to 
>> automatically reload modified modules inside packages?
>>
>> Thanks,
>>
> 
> 
> 
> 

-- 
dharana

From list at joreybump.com  Fri Jul  8 10:49:09 2005
From: list at joreybump.com (Jorey Bump)
Date: Fri Jul  8 10:49:17 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <42CE9017.2030301@dharana.net>
References: <1120798746.19962@dscpl.user.openhosting.com>	<42CE89B0.7070701@dharana.net>
	<42CE8EE0.9040201@dd.revealed.net> <42CE9017.2030301@dharana.net>
Message-ID: <42CE9265.7040308@joreybump.com>

dharana wrote:

> Oh, ok. I feel better now. But I think I should comment that then, for 
> me, the new mechanism  won't make a difference in the "apachectl 
> restart" routine. I will continue to do restart apache if the new 
> mechanism doesn't supports packages. I've abstracted a lot of things in 
> my custom handler/webapp so the only thing I'm changing nowadays are 
> inside packages (99% of the time).

Same here. My published modules typically have only a few functions in 
them, and they are usually interfaces to code from package imports. The 
reload mechanism would have to support packages to avoid being another 
pandora's box.
From grahamd at dscpl.com.au  Sat Jul  9 02:40:40 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul  9 02:40:59 2005
Subject: [mod_python] Articles on module importing.
In-Reply-To: <42CE9265.7040308@joreybump.com>
References: <1120798746.19962@dscpl.user.openhosting.com>	<42CE89B0.7070701@dharana.net>
	<42CE8EE0.9040201@dd.revealed.net>
	<42CE9017.2030301@dharana.net> <42CE9265.7040308@joreybump.com>
Message-ID: <04a229f102a6dc71c26dbf081dbbe155@dscpl.com.au>

Note that this has been pushed to the mod_python developers list. It is
suggested that if you are interested in following this discussion that
you subscribe to that list instead. Anyone replying to this email please
remove the standard mod_python list from the cc to keep it just on the
developers list.

Sorry, it is long email. I was probably deluded in thinking I could
defer discussions on implementation, but then I guess it isn't strictly
as it is still more at the level of how it could work. You might want to
digest the email for some time before replying. :-)

On 09/07/2005, at 12:49 AM, Jorey Bump wrote:

> dharana wrote:
>
>> Oh, ok. I feel better now. But I think I should comment that then, 
>> for me, the new mechanism  won't make a difference in the "apachectl 
>> restart" routine. I will continue to do restart apache if the new 
>> mechanism doesn't supports packages. I've abstracted a lot of things 
>> in my custom handler/webapp so the only thing I'm changing nowadays 
>> are inside packages (99% of the time).
>
> Same here. My published modules typically have only a few functions in 
> them, and they are usually interfaces to code from package imports. 
> The reload mechanism would have to support packages to avoid being 
> another pandora's box.

I'll try and expand on some of the issues about Python packages and why
it becomes so complicated and provide direction on how it all can work.
I know it can work as I already have an implementation similar to what
is described. :-)

The import_module() currently allows you to import the top level of a 
Python
package, or a sub module/package within a Python package. Its current 
support
for importing a sub module/package at the moment is broken in various 
ways,
as I documented in my article.

You probably would not notice these issues if your use of Python 
packages is
simplistic, ie., merely to have a bunch of modules kept within a 
specific
namespace for convenience. For example, an empty __init__.py in the top 
level
directory and a series of file based modules contained within that 
directory.
Also, the fact that modules are currently reloaded on top of the 
existing
instance does lesson the possibility of problems.

Once a Python package starts to get more complicated and you have
internal dependencies between different parts of the package itself, you
will more easily start to encounter problems. This is because dependency
cycles can develop between the different parts of the Python package. 
The
consequence of this is that even if only one part of the Python package
changes, the only sane thing to do is to reload the complete package. As
such, at the moment the only reliable way to reload a Python package
properly is to restart Apache.

If an updated import_module() function attempted to try and support 
automatic
reloading of packages properly, it would have to take a similar approach
whereby where if even a single part of the Python package is changed, 
it would
have to ensure that the whole Python package was reloaded.

I haven't quite worked out whether this is even totally possible yet. 
Even
to get to the point where I have has exceedingly complicated the design 
of
the module importing system.

The reasons for the extra complexity, is that in order to support 
different
named modules/packages in different directories, you cannot store 
modules
in sys.modules as they are keyed based on the module/package name.

The problem now is that due to how Python internally supports the 
"import"
statement internal to a Python package, whereby it will first look for a
module within in the package itself, requires that the component modules
of the Python package be stored in sys.modules. I don't know why, but it
doesn't work if it isn't.

Thus you have a contradiction. The parts of a Python package must be
present in sys.modules for imports internal to the Python package to
work, but to put it in sys.modules runs up against the goal of being
able to use the same name for a module/package in different directories.

To achieve both goals entails still storing the Python package parts
in sys.modules, but they aren't internally assigned its true name.
Instead they are given a unique name derived from the path name of
the file containing the code for that component. Ie., __name__ within
the module and the key used to store it in sys.modules use this magic
generated name.

Problem now is that when an import hook is asked to find the sub part
of a Python package, rather than use the true name of the package in
the dotted path, eg., "a.b", it will sometimes use the magic name for
the parent parts of the path, eg., "magic_name.b". Therefore you have to
do some translation of the magic names back and forth.

This all gets even worse when one looks at the issue of modules 
reloading
on top of the existing instance, which can cause loss of access to 
resources
without them being closed off properly and other problems in a 
multithreaded
MPM. To get around the issues, you keep around the old instance of a
module/package while importing it again into a separate object space.
For packages where it has to be in sys.modules, it means that magic name
therefore has to incorporate an instance count such that the name
changes for each revision of the package.

I don't expect most to understand all this, I just hope you believe me
when I say that trying to provide support for reloading of Python 
packages
is hard. My worry is that the addition of all this extra complexity will
make the code fragile as it may unknowingly include too many 
dependencies
on subtle nuances of how the Python module import system works. Thus,
it may work fine now (if it can be made to work in the first place),
but the next major version of Python may break it and we may not always
be able to work out how to tweak it to work with a newer version of 
Python.

What does this all mean?

First is that I really don't see it as practical that import_module()
be able to support Python packages, whether that means importing from
the root of the package or a sub part of the package, as part of a
scheme to handle automatic module reloading. To do so adds too much
complexity, with the code being much more fragile as a result.

I will point out now that this would not affect the ability to specify
a Python package or sub part of a package in a handler directive such
as PythonHandler. This is because the dispatch callback for a handler
is more complicated than it being just a call to import_module(). As
such, within the dispatch callback, it can do some checks to ascertain
how it should import a module.

For example, if the module specified by the directive is located in
the directory the handler pertains to, it would use import_module(),
specifying the exact directory the module should be loaded from.

As a fallback, it would then use the standard Python module import
mechanism to otherwise import the module. This would cause sys.path
to be consulted and the handler could be a Python package as a result.
No automatic module reloading would be available for a handler module
found along sys.path in this way.

Because the dispatch callback would explicitly check the directory for
which the directive is defined to find the module and tell the
import_module() explicitly this directory, there would not actually
be a need for that directory to be put in sys.path. This means there
would be no overlap of directories for which import_module() is being
used and those in sys.path. The "import" statement within a handler
in the directory would be made to work without use of sys.path using
import hooks and other means so that it transparently flows through
and uses import_module() instead.

For those cases where someone does not want to put a handler in the
directory the directive applies to, but still make use of automatic
module reloading, there could be an alternate path definition. For
example PythonImportModulePath. This path would be searched for the
file based module and if found, import_module() used to explicitly
load it from that directory.

Thus, for a handler directive, steps would be:

1. Look in directory directive is defined for and if handler module
is there, load it using import_module(). It can only be a file based
module. The name of the module doesn't have to be unique.

2. Look in directories defined by PythonImportModulePath and if found
there, load it using import_module(). It again can only be a file based
module. The name of the module doesn't have to be unique (but should 
it).

3. If still not found, use inbuilt Python __import__ mechanism to try
and find handler module. In this case, could be a file based module or
package, but it must be on sys.path. The PythonPath setting can still
be used to extend sys.path as to alternate places to look. The name of
the module/package must be unique within the set of all modules and
packages available by searching sys.path.

Next issue is how import_module() would work when called explicitly
within a handler.

Up till now if no path has been supplied to import_module() it would
search sys.path. This I believe needs to change.

Instead of searching sys.path, it should instead search
PythonImportModulePath. The reason for this is that it retains the
clear separation between directories where the standard Python
builtin import mechanism is used and those where import_module()
is used. Doing this avoids the problems caused by a module being
imported from different places using the different mechanisms.

The trick here is how does import_module() get access to the value
of PythonImportModulePath as it is generally only accessible via the
req object and a user may not have that available to supply to the
import_module() method. There is a similar problem here with how the
log and autoreload options have to be passed to import_module().

The solution here is that mod_python itself, which already holds the
req object when it calls the handler, should provide a means to
access the current request object from code where it doesn't otherwise
have it. This could be as _apache.current_request(). In general it
would be the intention that this only be used for Python code within
mod_python itself, like import_module(), but it may also be useful
to implementors of other handlers extending on mod_python.

With this function, import_module() can internally derive the value
of PythonImportModulePath as well as PythonDebug and PythonAutoReload.
Knowing the latter makes the log and autoreload options redundant and
addresses other issues I raised in my article.

As to when a path is explicitly supplied to import_module(), this
would still behave the same way, with that path being searched for
the module.

Note though that when import_module() is used, it would only look
for file based modules. It would not pick up Python packages even
if located in the directories where it was told to look.

Because this would break backward compatibility, what one might
instead do then, is provide a new apache.import_file() function.
This function would strictly enforce only being able to load file
based modules. The import_module() method then could implement the
steps:

1. If no explicit search path provided, set the search path to the
value of PythonImportModulePath.

2. Look in directories defined by search path and if found
there, load it using import_file(). It can only be a file based
module. The name of the module doesn't have to be unique.

3. If still not found, use inbuilt Python __import__ mechanism to try
and find handler module. In this case, could be a file based module or
package, but it must be on sys.path. The PythonPath setting can still
be used to extend sys.path as to alternate places to look. The name of
the module/package must be unique within the set of all modules and
packages available by searching sys.path.  No automatic reloading
would apply to modules/packages found this way.

The import_file() function would though have to raise some unique
exception type so that the import_module() knows that the module could
not be found and thus move on to trying __import__ instead.

If import_module() is implemented like this, then the existing code
to find the handler probably wouldn't need to be changed and neither
would any user code. Whereas before any modules found on sys.path
using import_module() would have automatic module reloading applied
to them, this would no longer occur and thus user would need to
shift any additional search directories added using PythonPath
into PythonImportModulePath instead. That way module reloading would
work on them. Because of the multiple levels of functions, a name
other than PythonImportModulePath may be more appropriate.

Next is what happens when the "import" statement is used within
a handler. At the moment it will allow importing of modules from
directories specified by handler directive and sys.path.

In this case, import hooks as per PEP 302 would be used to customise
how the "import" statement works. It would work similar to the steps
above except that the search path would be the combination of the
directory in which the importers code is located, the handler root
directory and the value of PythonImportModulePath. If it isn't in
those locations it would fall through to using standard import from
sys.path. Obviously if found on sys.path, no automatic module reloading
and because Python packages aren't supported by import_module(), they
have to be on sys.path.

Note that this would always add a search of local directory where
the Python code is located first. This is different to now for the
case of a subdirectory, but I really feel that this makes more sense
when you consider that for the nearest parallel, ie., that of packages,
it will always find a module in the same directory first. I know this
isn't a true Python package, but that modules can be spread over
a directory hierarchy when dispatchers such as mod_python.publisher
are used yet there is still only one handler root, makes it similar
in some ways.

It also must be noted that "import" would only try and use the 
mod_python
module importing system if the module in which it was used was itself
loaded using the mod_python module importing system in the first place.
Thus, the use of "import" in a module/package anywhere along sys.path
would not be impacted and would not start using the mod_python module
importing system.

As a final summary:

1. Existing code wouldn't need to be changed if two levels of
import_module()/import_file() are implemented as described. Ie.,
where import_module() gives appearance of providing same features
as before.

2. Python packages would have to be on sys.path though. This
would only be an issue though for where someone had put the Python
package in the handler root directory, rather than elsewhere and
hadn't extended the PythonPath setting explicitly.

3. Python packages would not be candidates for automatic module
reloading.

4. Simple file based modules outside of the handler directories
which were previously identified by setting PythonPath would not
be candidates for automatic module reloading unless those
directories are moved from PythonPath to PythonImportModulePath.

5. The import statement would now transparently make use of the
mod_python module importing system in modules to import file based
modules not on sys.path as appropriate. These modules would be
candidates for automatic module reloading. This bit of magic would
only occur for modules imported using the mod_python module importing
system in the first place.

Hmmm, rambled on more than I should have there. Gotta rush out for
a dinner date now. :-)

Graham

From roberto.c.aguilar at gmail.com  Sat Jul  9 02:45:39 2005
From: roberto.c.aguilar at gmail.com (Roberto Aguilar)
Date: Sat Jul  9 02:45:44 2005
Subject: [mod_python] Failed to acquire global mutex lock on OS X 10.4.1
Message-ID: <e190e34805070823455e48b3a9@mail.gmail.com>

Hello all,

I'm trying to use mod_python on a Mac and ran into a problem when
creating a mod_python.Session instance.  When I do:

from mod_python import apache, Session

def handler(req):
    s = Session.Session(req)
    [...]

I get the following error:

File "/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/site-packages/mod_python/Session.py",
line 215, in lock
    _apache._global_lock(self._req.server, self._sid)

ValueError: Failed to acquire global mutex lock

I'm using the following software:

httpd 2.0.54 (./configure --prefix=/berto --enable-dav --enable-dav-fs
--enable-cgi && make && make install)
mod_python 3.1.4 (./configure --prefix=/berto
--with-apxs=/berto/bin/apxs --with-python=/usr/bin/python && make &&
make install)
python 2.3.5 (OS X Tiger default)

Any suggestions would be greatly appreciated.

Thanks in advance!

-Roberto.

From rouadec at gmail.com  Sun Jul 10 07:28:58 2005
From: rouadec at gmail.com (antoine)
Date: Sun Jul 10 07:29:03 2005
Subject: [mod_python] global var on 2.7
Message-ID: <e2219c8a0507100428320d53df@mail.gmail.com>

Hello,

I've this problem trying to get a particular var to be loaded once and
for all using mod_python 2.7 on apache 1.3 (debian sarge stable) with
python 2.1. The same code worked perfectly well with mod_python
3.1/apache2/python2.3 but I've been a little bit too optimistic on my
hosting server uptodateness and spent the last week with downgrading
issues...

So I'm using the publisher handler and here is a resume of my index.py:

bigdic = None

def index(req):
  global bigdic
  if bigdic:
    req.write("bigdic already loaded")
  else
    req.write("bigdic loading...")
    bigdic = loooong_and_painfull_process()
    req.write("done, pfiouh")

this work perfectly well with the new components (apache2 and all) but
not with the old one (apache1.3 and company) which I _have to_ use,
meaning I get the "bigdic loading....done" message every time I reload
the page.

I tried the PythonImport but it segfaults apache (wether at the
virtual host level or the directory level)

I'm not running out of idea yet but before I get into crazy mode
looking for a complicated solution has any of you encounter and
resolved the same problem before?

Just to make it clear : upgrading any of the component is not an
option, I could rewrite/patch the publisher handler though.

Thanks for your time
-- 
Antoine
http://delaunay.org/antoine

From grahamd at dscpl.com.au  Sun Jul 10 07:43:38 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Jul 10 07:43:50 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <e2219c8a0507100428320d53df@mail.gmail.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>
Message-ID: <abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>

You misunderstand how Apache/mod_python works.

If Apache is running in prefork mode each unique request is not
necessarily managed within the same process. As a result, setting
a global variable doesn't mean the next request will see the same
value as it could be executing in a different process.

More than likely, your Apache 2 configuration was set to run in
worker mode. That is, all requests were handled in the same
process but possibly as different threads. Thus it always saw
the updated value. Not so with prefork mode though.

Since you don't have access to sessions in mod_python 2.7, you
are going to have to come up with your own way of saving state
out to the file system somehow to track such things.

Graham

On 10/07/2005, at 9:28 PM, antoine wrote:

> Hello,
>
> I've this problem trying to get a particular var to be loaded once and
> for all using mod_python 2.7 on apache 1.3 (debian sarge stable) with
> python 2.1. The same code worked perfectly well with mod_python
> 3.1/apache2/python2.3 but I've been a little bit too optimistic on my
> hosting server uptodateness and spent the last week with downgrading
> issues...
>
> So I'm using the publisher handler and here is a resume of my index.py:
>
> bigdic = None
>
> def index(req):
>   global bigdic
>   if bigdic:
>     req.write("bigdic already loaded")
>   else
>     req.write("bigdic loading...")
>     bigdic = loooong_and_painfull_process()
>     req.write("done, pfiouh")
>
> this work perfectly well with the new components (apache2 and all) but
> not with the old one (apache1.3 and company) which I _have to_ use,
> meaning I get the "bigdic loading....done" message every time I reload
> the page.
>
> I tried the PythonImport but it segfaults apache (wether at the
> virtual host level or the directory level)
>
> I'm not running out of idea yet but before I get into crazy mode
> looking for a complicated solution has any of you encounter and
> resolved the same problem before?
>
> Just to make it clear : upgrading any of the component is not an
> option, I could rewrite/patch the publisher handler though.
>
> Thanks for your time
> -- 
> Antoine
> http://delaunay.org/antoine
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From rouadec at gmail.com  Sun Jul 10 08:14:16 2005
From: rouadec at gmail.com (antoine)
Date: Sun Jul 10 08:14:21 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <e2219c8a0507100513521a813f@mail.gmail.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>
	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>
	<e2219c8a0507100513521a813f@mail.gmail.com>
Message-ID: <e2219c8a050710051467b541de@mail.gmail.com>

What you are saying if that if I reload my page enought time I should
start re-using the bigdic object?
Well, it make some sense, i'm going to try using the advices you gave
there http://www.modpython.org/pipermail/mod_python/2005-March/017662.html
about the os.getpid() process and see if that can put my mind to rest.

Thanks for showing me the way,

On 7/10/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> You misunderstand how Apache/mod_python works.
>
> If Apache is running in prefork mode each unique request is not
> necessarily managed within the same process. As a result, setting
> a global variable doesn't mean the next request will see the same
> value as it could be executing in a different process.
>
> More than likely, your Apache 2 configuration was set to run in
> worker mode. That is, all requests were handled in the same
> process but possibly as different threads. Thus it always saw
> the updated value. Not so with prefork mode though.
>
> Since you don't have access to sessions in mod_python 2.7, you
> are going to have to come up with your own way of saving state
> out to the file system somehow to track such things.
>
> Graham
>
> On 10/07/2005, at 9:28 PM, antoine wrote:
>
> > Hello,
> >
> > I've this problem trying to get a particular var to be loaded once and
> > for all using mod_python 2.7 on apache 1.3 (debian sarge stable) with
> > python 2.1. The same code worked perfectly well with mod_python
> > 3.1/apache2/python2.3 but I've been a little bit too optimistic on my
> > hosting server uptodateness and spent the last week with downgrading
> > issues...
> >
> > So I'm using the publisher handler and here is a resume of my index.py:
> >
> > bigdic = None
> >
> > def index(req):
> >   global bigdic
> >   if bigdic:
> >     req.write("bigdic already loaded")
> >   else
> >     req.write("bigdic loading...")
> >     bigdic = loooong_and_painfull_process()
> >     req.write("done, pfiouh")
> >
> > this work perfectly well with the new components (apache2 and all) but
> > not with the old one (apache1.3 and company) which I _have to_ use,
> > meaning I get the "bigdic loading....done" message every time I reload
> > the page.
> >
> > I tried the PythonImport but it segfaults apache (wether at the
> > virtual host level or the directory level)
> >
> > I'm not running out of idea yet but before I get into crazy mode
> > looking for a complicated solution has any of you encounter and
> > resolved the same problem before?
> >
> > Just to make it clear : upgrading any of the component is not an
> > option, I could rewrite/patch the publisher handler though.
> >
> > Thanks for your time
> > --
> > Antoine
> > http://delaunay.org/antoine
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>


--
Antoine
http://delaunay.org/antoine


-- 
Antoine
http://delaunay.org/antoine

From list at joreybump.com  Sun Jul 10 09:39:56 2005
From: list at joreybump.com (Jorey Bump)
Date: Sun Jul 10 09:40:07 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <e2219c8a050710051467b541de@mail.gmail.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>	<e2219c8a0507100513521a813f@mail.gmail.com>
	<e2219c8a050710051467b541de@mail.gmail.com>
Message-ID: <42D1252C.4040603@joreybump.com>

antoine wrote:
> What you are saying if that if I reload my page enought time I should
> start re-using the bigdic object?

No, in your environment (prefork) you can get semipersistent objects by 
creating them in modules that your published modules import, thereby 
taking advantage of module caching, but they won't be truly global. Your 
imported module should initialize the object and handle exceptions if 
you anticipate failures (I do this for database handles, which 
occassionally disappear).

If you need to use truly global values, you are going to have to look at 
pickling, file manipulation, or some kind of database.
From rouadec at gmail.com  Sun Jul 10 10:06:59 2005
From: rouadec at gmail.com (antoine)
Date: Sun Jul 10 10:07:04 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <e2219c8a05071007061d1c1aec@mail.gmail.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>
	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>
	<e2219c8a0507100513521a813f@mail.gmail.com>
	<e2219c8a050710051467b541de@mail.gmail.com>
	<42D1252C.4040603@joreybump.com>
	<e2219c8a05071007061d1c1aec@mail.gmail.com>
Message-ID: <e2219c8a050710070635beae23@mail.gmail.com>

hum, ok but I tried a few more time to access this page in different
fashions and I can say in some circonstances the processes are being
reused (and therefore my bigdict object is not reloaded, as expected)
so it is consistent with Graham explanations.

The cached module "trick"  should be more performant that the "global"
only if the modules are cached once for all the processes (and nor per
process) I guess? Anyway, I'll try and see for myself.

Should this module also use global or not? Is a simple implementation like:

CacheBigdic.py
def getBigDic():
  return looong_and_painful_process()

enough or should I go for :
CacheBigdic.py
bigdic = None
def getBigDic():
  global bigdic
  if not bigdic:
    return looong_and_painful_process()
  else:
    return bigdic

and call this from index.py with

import CacheBigdic
bigdic = CacheBigdic.getBigdic()
def index(req):
  ...
  use(bigdic)
  ...


I do not need truly global var, the cached object is never modified
(and the long_and_painful_process() is already nothing but a (c)pickle
;).

On 7/10/05, Jorey Bump <list@joreybump.com> wrote:
> antoine wrote:
> > What you are saying if that if I reload my page enought time I should
> > start re-using the bigdic object?
>
> No, in your environment (prefork) you can get semipersistent objects by
> creating them in modules that your published modules import, thereby
> taking advantage of module caching, but they won't be truly global. Your
> imported module should initialize the object and handle exceptions if
> you anticipate failures (I do this for database handles, which
> occassionally disappear).
>
> If you need to use truly global values, you are going to have to look at
> pickling, file manipulation, or some kind of database.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>


--
Antoine
http://delaunay.org/antoine


-- 
Antoine
http://delaunay.org/antoine

From rouadec at gmail.com  Sun Jul 10 12:40:14 2005
From: rouadec at gmail.com (antoine)
Date: Sun Jul 10 12:40:21 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <42D1457C.4090609@joreybump.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>
	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>
	<e2219c8a0507100513521a813f@mail.gmail.com>
	<e2219c8a050710051467b541de@mail.gmail.com>
	<42D1252C.4040603@joreybump.com>
	<e2219c8a05071007061d1c1aec@mail.gmail.com>
	<42D1457C.4090609@joreybump.com>
Message-ID: <e2219c8a0507100940193d2d53@mail.gmail.com>

ok, thanks for those advices and insight into mod_python. I'll do more
testing with the caching module it looks like a solution to my current
problem.

it's not trusly enormous but the loading makes the difference between
an instantaneous page and a one second delay.

I'm forwarding your answer to the mailing list for the future
generations ;) (or at least the ones stuck with apache1.3 :)

On 7/10/05, Jorey Bump <list@joreybump.com> wrote:
> antoine wrote:
> > hum, ok but I tried a few more time to access this page in different
> > fashions and I can say in some circonstances the processes are being
> > reused (and therefore my bigdict object is not reloaded, as expected)
> > so it is consistent with Graham explanations.
> 
> I may have misinterpreted your statement to mean that you would
> eventually begin using the object in a persistent manner, rather than
> occassionally access it, which is the case and consistent with both of
> our explanations.
> 
> > The cached module "trick"  should be more performant that the "global"
> > only if the modules are cached once for all the processes (and nor per
> > process) I guess? Anyway, I'll try and see for myself.
> 
> Well, they are cached per child, so you get a boost.
> 
> > Should this module also use global or not? Is a simple implementation like:
> 
> I wouldn't.
> 
> > CacheBigdic.py
> > def getBigDic():
> >   return looong_and_painful_process()
> >
> > enough or should I go for :
> > CacheBigdic.py
> > bigdic = None
> > def getBigDic():
> >   global bigdic
> >   if not bigdic:
> >     return looong_and_painful_process()
> >   else:
> >     return bigdic
> >
> > and call this from index.py with
> >
> > import CacheBigdic
> > bigdic = CacheBigdic.getBigdic()
> > def index(req):
> >   ...
> >   use(bigdic)
> >   ...
> 
> I'd do this, probably:
> 
> # CacheBigdic.py
> 
> bigdic = looong_and_painful_process()
> 
> # publishedmodulewithuniquename.py
> 
> import CacheBigdic
> def index(req):
>     ...
>     use(CacheBigdic.bigdic)
>     ...
> 
> If you find errors appearing in your apache log under heavy load, you
> may need to alter CacheBigdic.py:
> 
> try:
>     bigdic = looong_and_painful_process()
> except TheErrorYouSee:
>     bigdic = looong_and_painful_process()
> 
> It looks redundant, but it's needed because the module is cached. In any
> case, it's important to protect yourself if your bigdic gets you in trouble.
> 
> > I do not need truly global var, the cached object is never modified
> > (and the long_and_painful_process() is already nothing but a (c)pickle
> > ;).
> 
> Then this should work, but be aware that if your bigdic is truly
> enormous, you should tuck it away and only use it when needed. Excessive
> handling of bigdic could result in a huge load and bring your system to
> exhaustion.
> 
> A database is a good candidate for this.
> 


-- 
Antoine
http://delaunay.org/antoine

From nicolas.lehuen at gmail.com  Sun Jul 10 13:42:18 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Sun Jul 10 13:42:29 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <e2219c8a0507100940193d2d53@mail.gmail.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>
	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>
	<e2219c8a0507100513521a813f@mail.gmail.com>
	<e2219c8a050710051467b541de@mail.gmail.com>
	<42D1252C.4040603@joreybump.com>
	<e2219c8a05071007061d1c1aec@mail.gmail.com>
	<42D1457C.4090609@joreybump.com>
	<e2219c8a0507100940193d2d53@mail.gmail.com>
Message-ID: <c298f2d70507101042150bd897@mail.gmail.com>

By all means let's archive this thread, for it contains this paragraph :

> Then this should work, but be aware that if your bigdic is truly
> enormous, you should tuck it away and only use it when needed. Excessive
> handling of bigdic could result in a huge load and bring your system to
> exhaustion.

THIS is some seriously technical stuff that should only be told in private 
circles ;).

Regards,
Nicolas

2005/7/10, antoine <rouadec@gmail.com>:
> 
> ok, thanks for those advices and insight into mod_python. I'll do more
> testing with the caching module it looks like a solution to my current
> problem.
> 
> it's not trusly enormous but the loading makes the difference between
> an instantaneous page and a one second delay.
> 
> I'm forwarding your answer to the mailing list for the future
> generations ;) (or at least the ones stuck with apache1.3 :)
> 
> On 7/10/05, Jorey Bump <list@joreybump.com> wrote:
> > antoine wrote:
> > > hum, ok but I tried a few more time to access this page in different
> > > fashions and I can say in some circonstances the processes are being
> > > reused (and therefore my bigdict object is not reloaded, as expected)
> > > so it is consistent with Graham explanations.
> >
> > I may have misinterpreted your statement to mean that you would
> > eventually begin using the object in a persistent manner, rather than
> > occassionally access it, which is the case and consistent with both of
> > our explanations.
> >
> > > The cached module "trick" should be more performant that the "global"
> > > only if the modules are cached once for all the processes (and nor per
> > > process) I guess? Anyway, I'll try and see for myself.
> >
> > Well, they are cached per child, so you get a boost.
> >
> > > Should this module also use global or not? Is a simple implementation 
> like:
> >
> > I wouldn't.
> >
> > > CacheBigdic.py
> > > def getBigDic():
> > > return looong_and_painful_process()
> > >
> > > enough or should I go for :
> > > CacheBigdic.py
> > > bigdic = None
> > > def getBigDic():
> > > global bigdic
> > > if not bigdic:
> > > return looong_and_painful_process()
> > > else:
> > > return bigdic
> > >
> > > and call this from index.py with
> > >
> > > import CacheBigdic
> > > bigdic = CacheBigdic.getBigdic()
> > > def index(req):
> > > ...
> > > use(bigdic)
> > > ...
> >
> > I'd do this, probably:
> >
> > # CacheBigdic.py
> >
> > bigdic = looong_and_painful_process()
> >
> > # publishedmodulewithuniquename.py
> >
> > import CacheBigdic
> > def index(req):
> > ...
> > use(CacheBigdic.bigdic)
> > ...
> >
> > If you find errors appearing in your apache log under heavy load, you
> > may need to alter CacheBigdic.py:
> >
> > try:
> > bigdic = looong_and_painful_process()
> > except TheErrorYouSee:
> > bigdic = looong_and_painful_process()
> >
> > It looks redundant, but it's needed because the module is cached. In any
> > case, it's important to protect yourself if your bigdic gets you in 
> trouble.
> >
> > > I do not need truly global var, the cached object is never modified
> > > (and the long_and_painful_process() is already nothing but a (c)pickle
> > > ;).
> >
> > Then this should work, but be aware that if your bigdic is truly
> > enormous, you should tuck it away and only use it when needed. Excessive
> > handling of bigdic could result in a huge load and bring your system to
> > exhaustion.
> >
> > A database is a good candidate for this.
> >
> 
> 
> --
> Antoine
> http://delaunay.org/antoine
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050710/82b52d48/attachment.html
From list at joreybump.com  Sun Jul 10 15:02:38 2005
From: list at joreybump.com (Jorey Bump)
Date: Sun Jul 10 15:02:48 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <c298f2d70507101042150bd897@mail.gmail.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>	
	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>	
	<e2219c8a0507100513521a813f@mail.gmail.com>	
	<e2219c8a050710051467b541de@mail.gmail.com>	
	<42D1252C.4040603@joreybump.com>	
	<e2219c8a05071007061d1c1aec@mail.gmail.com>	
	<42D1457C.4090609@joreybump.com>	
	<e2219c8a0507100940193d2d53@mail.gmail.com>
	<c298f2d70507101042150bd897@mail.gmail.com>
Message-ID: <42D170CE.1080605@joreybump.com>

Nicolas Lehuen wrote:
> By all means let's archive this thread, for it contains this paragraph :
> 
>  > Then this should work, but be aware that if your bigdic is truly
>  > enormous, you should tuck it away and only use it when needed. Excessive
>  > handling of bigdic could result in a huge load and bring your system to
>  > exhaustion.
> 
> THIS is some seriously technical stuff that should only be told in 
> private circles ;).

BTW, I forgot to mention that mod_python.publisher makes certain 
toplevel objects callable, so the code you provided below contains a 
security risk where you reassign your object (retaining dotted notation 
in your published modules can protect you from a number of ills):

> 2005/7/10, antoine <rouadec@gmail.com <mailto:rouadec@gmail.com>>:
>> and call this from index.py with
>>
>> import CacheBigdic
>> bigdic = CacheBigdic.getBigdic()
>> def index(req):
>>   ...
>>   use(bigdic)
>>   ...

You could get into a lot of trouble exposing your bigdic to the public.

From grahamd at dscpl.com.au  Sun Jul 10 18:16:03 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Jul 10 18:16:23 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <e2219c8a0507100940193d2d53@mail.gmail.com>
References: <e2219c8a0507100428320d53df@mail.gmail.com>
	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>
	<e2219c8a0507100513521a813f@mail.gmail.com>
	<e2219c8a050710051467b541de@mail.gmail.com>
	<42D1252C.4040603@joreybump.com>
	<e2219c8a05071007061d1c1aec@mail.gmail.com>
	<42D1457C.4090609@joreybump.com>
	<e2219c8a0507100940193d2d53@mail.gmail.com>
Message-ID: <2187eea70a2e07e5def30500efb70ebd@dscpl.com.au>


>> I'd do this, probably:
>>
>> # CacheBigdic.py
>>
>> bigdic = looong_and_painful_process()
>>
>> # publishedmodulewithuniquename.py
>>
>> import CacheBigdic
>> def index(req):
>>     ...
>>     use(CacheBigdic.bigdic)
>>     ...

This way of doing things can be problematic and may not be advisable.

The problem is that since the long and painful process is done at time
of import (while the thread holds the global import lock) in a threaded
MPM, you will block every request in the process which might want to
import a module. Thus, if it took ten seconds, in the worse case when
Apache process is just started, all requests could be stalled for ten
seconds.

You are much better off doing it the first time you need it as you
were doing. Doing it only the first time it is required also enables
you to more easily return an error response if it fails. Subsequent
requests which try again automatically to initiate the action.

If you do create it the first time it is required like this though,
in a multithreaded MPM, you will need to use a thread lock to prevent
more than one thread trying to create it the first time at the same
time.

>> If you find errors appearing in your apache log under heavy load, you
>> may need to alter CacheBigdic.py:
>>
>> try:
>>     bigdic = looong_and_painful_process()
>> except TheErrorYouSee:
>>     bigdic = looong_and_painful_process()
>>
>> It looks redundant, but it's needed because the module is cached. In 
>> any
>> case, it's important to protect yourself if your bigdic gets you in 
>> trouble.

And if it fails the second time as well? At some point you would have
to give up and the only way to reinitiate the action is to reload the
module with no means of returning an customised error response as to
what went wrong. Thus doing it at the time of the request is again
preferable to do it at the time of import.

Graham

From list at joreybump.com  Sun Jul 10 20:52:38 2005
From: list at joreybump.com (Jorey Bump)
Date: Sun Jul 10 20:52:50 2005
Subject: [mod_python] global var on 2.7
In-Reply-To: <2187eea70a2e07e5def30500efb70ebd@dscpl.com.au>
References: <e2219c8a0507100428320d53df@mail.gmail.com>
	<abcc578ee4639e6aefb88747f5ae2339@dscpl.com.au>
	<e2219c8a0507100513521a813f@mail.gmail.com>
	<e2219c8a050710051467b541de@mail.gmail.com>
	<42D1252C.4040603@joreybump.com>
	<e2219c8a05071007061d1c1aec@mail.gmail.com>
	<42D1457C.4090609@joreybump.com>
	<e2219c8a0507100940193d2d53@mail.gmail.com>
	<2187eea70a2e07e5def30500efb70ebd@dscpl.com.au>
Message-ID: <42D1C2D6.6080207@joreybump.com>

Graham Dumpleton wrote:
> 
>>> I'd do this, probably:
>>>
>>> # CacheBigdic.py
>>>
>>> bigdic = looong_and_painful_process()
>>>
>>> # publishedmodulewithuniquename.py
>>>
>>> import CacheBigdic
>>> def index(req):
>>>     ...
>>>     use(CacheBigdic.bigdic)
>>>     ...
> 
> This way of doing things can be problematic and may not be advisable.
> 
> The problem is that since the long and painful process is done at time
> of import (while the thread holds the global import lock) in a threaded
> MPM, you will block every request in the process which might want to
> import a module. Thus, if it took ten seconds, in the worse case when
> Apache process is just started, all requests could be stalled for ten
> seconds.

Threaded MPM is not used by apache 1.3.x, which was the reason for the 
original post.

> You are much better off doing it the first time you need it as you
> were doing. Doing it only the first time it is required also enables
> you to more easily return an error response if it fails. Subsequent
> requests which try again automatically to initiate the action.

True, perhaps, now that we know it's a readonly object, in which case 
making it global is kind of a moot point. Anyway, I did say this was 
only semipersistent (in the sense that different processes won't share 
the exact same object). Without knowing the details of the application, 
it's hard to say if it benefits from a semipersistent cache or implicit 
creation/destruction for each request. I'll side with you here, although 
the OP would probably do well to consider a database with connection 
pooling of some sort.

>>> If you find errors appearing in your apache log under heavy load, you
>>> may need to alter CacheBigdic.py:
>>>
>>> try:
>>>     bigdic = looong_and_painful_process()
>>> except TheErrorYouSee:
>>>     bigdic = looong_and_painful_process()
>>>
>>> It looks redundant, but it's needed because the module is cached.
> 
> And if it fails the second time as well? 

The error is explicit, so I'd say go back to the drawing board and fix 
the real problem. Sometimes catching the exception once is enough 
('MySQL server has gone away' errors, for example). As long as it's not 
a crutch, catching exceptions has its place.

> At some point you would have
> to give up and the only way to reinitiate the action is to reload the
> module with no means of returning an customised error response as to
> what went wrong. Thus doing it at the time of the request is again
> preferable to do it at the time of import.

It really all depends on what looong_and_painful_process() does, what 
exceptions are raised, what type of data sharing is required, 
dependencies on other daemons or processes, how much memory, etc... If 
an object is too fragile to initialize at time of import, that doesn't 
necessarily mean it will be robustly created at the time of the request, 
either.

From roberto.c.aguilar at gmail.com  Mon Jul 11 12:24:21 2005
From: roberto.c.aguilar at gmail.com (Roberto Aguilar)
Date: Mon Jul 11 12:24:27 2005
Subject: [mod_python] Using PythonAutoReload
Message-ID: <e190e3480507110924438bb1f4@mail.gmail.com>

Hello everyone,

I've been trying to figure out how to develop python web scripts
without having to restart httpd every time I make a change to a
module.  I found the directive:

PythonAutoReload

so I explicitly set it to On in httpd.conf.  But, in the following
script, for example:

----
from mod_python import apache
import test

def handler(req):
    req.content_type = 'text/plain'
    
    f = test.foo()
    req.write('string: %s\n' % (f.getString()))
    
    return apache.OK
----

any modifications to the module "test" (tell getString() to return
"string1", then change it to return "string2") will not appear
consistently across all the httpd sub-processes until the server is
restarted.  It appears this directive only xhecks the modification
time of the requested module, or in my case, the handler script.

Most of the development I'm doing is within modules so bouncing the
server each time I make a change is a bit tedious.  Is there some way
to get mod_python to check the modification time of any module being
imported?

Thanks!

-Roberto.

From grahamd at dscpl.com.au  Mon Jul 11 17:59:22 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul 11 17:59:35 2005
Subject: [mod_python] Using PythonAutoReload
In-Reply-To: <e190e3480507110924438bb1f4@mail.gmail.com>
References: <e190e3480507110924438bb1f4@mail.gmail.com>
Message-ID: <aa9beb25c5e20b817671c3f7b11ce0d4@dscpl.com.au>

The automatic module reloading scheme doesn't apply to modules which
have been imported using the "import" statement.

Check out the mod_python documentation or "apache.import_module()".
You might also have a read of:

   http://www.dscpl.com.au/articles/modpython-002.html
   http://www.dscpl.com.au/articles/modpython-003.html

to understand what you do need to use on what, when things get
reloaded and various problems.

There have been discussions of late about fixing the module reloading
mechanism with one proposal being that where appropriate that "import"
automatically map onto the module reloading mechanism, but it isn't
there now.

Graham

On 12/07/2005, at 2:24 AM, Roberto Aguilar wrote:

> Hello everyone,
>
> I've been trying to figure out how to develop python web scripts
> without having to restart httpd every time I make a change to a
> module.  I found the directive:
>
> PythonAutoReload
>
> so I explicitly set it to On in httpd.conf.  But, in the following
> script, for example:
>
> ----
> from mod_python import apache
> import test
>
> def handler(req):
>     req.content_type = 'text/plain'
>
>     f = test.foo()
>     req.write('string: %s\n' % (f.getString()))
>
>     return apache.OK
> ----
>
> any modifications to the module "test" (tell getString() to return
> "string1", then change it to return "string2") will not appear
> consistently across all the httpd sub-processes until the server is
> restarted.  It appears this directive only xhecks the modification
> time of the requested module, or in my case, the handler script.
>
> Most of the development I'm doing is within modules so bouncing the
> server each time I make a change is a bit tedious.  Is there some way
> to get mod_python to check the modification time of any module being
> imported?
>
> Thanks!
>
> -Roberto.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From gomo at datafull.com  Mon Jul 11 20:41:16 2005
From: gomo at datafull.com (Gonzalo =?ISO-8859-1?Q?Sainz-Tr=E1paga?=)
Date: Mon Jul 11 20:42:22 2005
Subject: [mod_python] Sessions in 2.7 [trouble]
Message-ID: <1121128876.2170.77.camel@localhost>

Hi, I just realized mod_python 3.x is only available for Apache 2.0.
Sadly, I realized it by reading:
ImportError: No module named Session
In my browser after having uploaded everything.

So I have quite a problem here. I have to find a (sort of) drop-in
replacement for 3.x sessions, and i have to do it *fast*. I checked the
links in the FAQ, and the only one that looks like it could work is PSO.

This said, PSO requires these options:
                PythonFixupHandler pso.modpython::fixup
                PythonLogHandler pso.modpython::cleanup
in an Apache conf file. My problem is, I am on shared hosting and PSO is
installed in my web directory, so the default python installation is not
aware of it, and therefore Apache can't find it.

I need either 
a) a way to get pso to work (is there any way to set these options from
python? I have a globally imported file where I can add whatever is
needed)
b) a suggestion on a simple, straight-forward package to manage sessions
(pretty much like what mod_python has!)

Thanks in advance,

-- 
Gonzalo Sainz-Tr?paga (GomoX)
GnuPG Fingerprint: A0AF 3BBF EB93 7EFE 6628  C5A5 F073 9442 6DE4 A497
Public Key: http://pgp.mit.edu:11371/pks/lookup?op=get&search=0x6DE4A497
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050711/278d582b/attachment.bin
From grahamd at dscpl.com.au  Mon Jul 11 21:36:55 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul 11 21:37:06 2005
Subject: [mod_python] Sessions in 2.7 [trouble]
Message-ID: <1121132215.10683@dscpl.user.openhosting.com>

Gonzalo =?ISO-8859-1?Q?Sainz-Tr=E1paga?= wrote ..
> This said, PSO requires these options:
>                 PythonFixupHandler pso.modpython::fixup
>                 PythonLogHandler pso.modpython::cleanup
> in an Apache conf file. My problem is, I am on shared hosting and PSO is
> installed in my web directory, so the default python installation is not
> aware of it, and therefore Apache can't find it.

Such definitions can also be placed in a .htaccess file within your
document area. If the "pso" package is located in the same directory,
it should be able to be found without doing anything else. If you
do put it in the same directory though, there are potential security
implications. Thus you might want to keep the "pso" package elsewhere
and very carefully set PythonPath option to refer to that other directory.
Because using PythonPath overrides the automatic inclusion of the
document directory in the path, it could break other things and so
you may to have explicitly put the document directory in PythonPath
as well.

Graham
From patfitz at gmail.com  Tue Jul 12 03:51:16 2005
From: patfitz at gmail.com (Patrick Fitzsimmons)
Date: Tue Jul 12 03:51:22 2005
Subject: [mod_python] mod_python crashes Apache under Windows XP
In-Reply-To: <c298f2d70506270212466da73b@mail.gmail.com>
References: <1119856402.27103@dscpl.user.openhosting.com>
	<76d1249d050627002515ab91ef@mail.gmail.com>
	<c298f2d70506270212466da73b@mail.gmail.com>
Message-ID: <76d1249d050712005115cadf9a@mail.gmail.com>

Ok, I have finally gotten some time to do some debugging, and I found
what the problem is (but now how to fix it :-( )

First, the "other.html" reference comes from the Apache conf file,
it's the file Apache is supposed to serve up in case of an internal
server error.  Because I set all .html files to be handled by
mod_python, it was sending it back in as a request.  I looked in the
log files to get what the internal server error was:

[Tue Jul 12 03:33:25 2005] [error] [client 127.0.0.6] PythonHandler
dispatch: IOError: Write failed, client closed connection.

What I still don't know is why requests are getting mixed together. 
This never happens when I've used PHP, so I'm guessing there is some
bug in the request handler.  If I am clicking fast enough, the same
browser page will display results from 3 or 4 different requests.

I did try upgrading to mod_python 3.2 but I did not notice any change.

I also tried out my application on a Linux machine and have not had
this problem occur.  So hopefully I will still be able to use
mod_python, because I am just using it on Windows for development.


Thanks for your help,
Patrick




On 6/27/05, Nicolas Lehuen <nicolas.lehuen@gmail.com> wrote:
> Hi Patrick,
> 
> If you want to try the latest mod_python 3.2 development release, it
> is available here :
> 
> http://nicolas.lehuen.com/download/mod_python
> 
> Your problem is very strange. I can't find any reference to
> "other.html" in mod_python's source code. Are you 100% sure that you
> are the only one using your server during the stress testing ?
> 
> Regards,
> Nicolas
> 
> 2005/6/27, Patrick Fitzsimmons <patfitz@gmail.com>:
> > Correction, I am in fact using 3.1.3.  Do I need a compiler to run the
> > 3.2 snapshot, or is it just python?  If I need a compiler, which
> > should I use?
> >
> > Also, I've played around a little more, and found that sometimes the
> > output to the browser was the folloing:
> >
> > /view.html 1 /view.html /other.html 1 /other.html /other.html 2
> >
> > That means the code "print 1" is actually being run twice, even though
> > it only appears once in the script.  It seems that two different
> > browser requests are being handled at the same time.
> >
> > -Patrick
> >
> > On 6/27/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
> > > Patrick Fitzsimmons wrote ..
> > > > I am running mod_python 3.1 under Apache 2.0.50.0 and Windows XP.
> > >
> > > Are you really using mod_python 3.1, or are you perhaps using 3.1.3 or
> > > 3.1.4?
> > >
> > > Would you be prepared to try out a snapshot of the as yet unreleased 3.2?
> > > There are some threading problems in earlier versions which this version
> > > addresses. There is a chance it may be related to that.
> > >
> > > Anyway, there are others on the list who use Win32 whereas I don't, so
> > > they may have more intelligent things to say. I at least just wanted to
> > > clarify which version you were using.
> > >
> > > Graham
> > >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>

From JoshC at usracmfg.com  Tue Jul 12 10:59:27 2005
From: JoshC at usracmfg.com (Joshua Cohen)
Date: Tue Jul 12 10:59:33 2005
Subject: [mod_python] Firefox - Showing Output Source
Message-ID: <F0E8C229CF67D411AA94009027C6BA1603E8F405@fnmail1.fncorp.com>

Hello everyone. 

I am attempting to use PSP as a template for outputting Python programs. The problem I am having is when I run the example given in the Mod_Python doc's, Firefox displays the full source as the output. The variables will be replaced as specified, however all of the source is visible on the page. e.g: 

The output on Firefox is:

<html>
  <!-- This is a simple psp template called template.html -->
  <h1>Hello, world!</h1>
</html>0

However, Internet Explorer displays the output properly and all that is output is :

Hello, world!
0
Has anyone else seen this problem?

Here is my code:

Template File:

<html>
  <!-- This is a simple psp template called template.html -->
  <h1>Hello, <%=what%>!</h1>
</html>

Python Source:

from mod_python import apache, psp

def handler(req):
    template = psp.PSP(req, filename='../hello.html')
    template.run({'what':'world'})
    return apache.OK

Thanks!

Josh

From realtega at gmail.com  Tue Jul 12 11:25:50 2005
From: realtega at gmail.com (Claudio)
Date: Tue Jul 12 11:27:17 2005
Subject: [mod_python] Firefox - Showing Output Source
In-Reply-To: <F0E8C229CF67D411AA94009027C6BA1603E8F405@fnmail1.fncorp.com>
References: <F0E8C229CF67D411AA94009027C6BA1603E8F405@fnmail1.fncorp.com>
Message-ID: <1121181950.2710.18.camel@Portega>

Sorry, try

from mod_python import apache, psp 


def handler(req):
	template = psp.PSP(req, filename='../hello.html')
	req.content_type = "text/html"
	req.send_http_header()
	template.run({'what':'world'}) 
	return apache.OK

Claudio



Il giorno mar, 12/07/2005 alle 10.59 -0400, Joshua Cohen ha scritto:
> Hello everyone. 
> 
> I am attempting to use PSP as a template for outputting Python programs. The problem I am having is when I run the example given in the Mod_Python doc's, Firefox displays the full source as the output. The variables will be replaced as specified, however all of the source is visible on the page. e.g: 
> 
> The output on Firefox is:
> 
> <html>
>   <!-- This is a simple psp template called template.html -->
>   <h1>Hello, world!</h1>
> </html>0
> 
> However, Internet Explorer displays the output properly and all that is output is :
> 
> Hello, world!
> 0
> Has anyone else seen this problem?
> 
> Here is my code:
> 
> Template File:
> 
> <html>
>   <!-- This is a simple psp template called template.html -->
>   <h1>Hello, <%=what%>!</h1>
> </html>
> 
> Python Source:
> 
> from mod_python import apache, psp
> 
> def handler(req):
>     template = psp.PSP(req, filename='../hello.html')
>     template.run({'what':'world'})
>     return apache.OK
> 
> Thanks!
> 
> Josh
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From JoshC at usracmfg.com  Tue Jul 12 11:41:48 2005
From: JoshC at usracmfg.com (Joshua Cohen)
Date: Tue Jul 12 11:41:54 2005
Subject: [mod_python] Firefox - Showing Output Source
Message-ID: <F0E8C229CF67D411AA94009027C6BA1603E8F407@fnmail1.fncorp.com>

That did the trick! 

Thanks, 

Josh

-----Original Message-----
From: Claudio [mailto:realtega@gmail.com]
Sent: Tuesday, July 12, 2005 11:26 AM
To: mod_python@modpython.org
Subject: Re: [mod_python] Firefox - Showing Output Source


Sorry, try

from mod_python import apache, psp 


def handler(req):
	template = psp.PSP(req, filename='../hello.html')
	req.content_type = "text/html"
	req.send_http_header()
	template.run({'what':'world'}) 
	return apache.OK

Claudio



Il giorno mar, 12/07/2005 alle 10.59 -0400, Joshua Cohen ha scritto:
> Hello everyone. 
> 
> I am attempting to use PSP as a template for outputting Python programs. The problem I am having is when I run the example given in the Mod_Python doc's, Firefox displays the full source as the output. The variables will be replaced as specified, however all of the source is visible on the page. e.g: 
> 
> The output on Firefox is:
> 
> <html>
>   <!-- This is a simple psp template called template.html -->
>   <h1>Hello, world!</h1>
> </html>0
> 
> However, Internet Explorer displays the output properly and all that is output is :
> 
> Hello, world!
> 0
> Has anyone else seen this problem?
> 
> Here is my code:
> 
> Template File:
> 
> <html>
>   <!-- This is a simple psp template called template.html -->
>   <h1>Hello, <%=what%>!</h1>
> </html>
> 
> Python Source:
> 
> from mod_python import apache, psp
> 
> def handler(req):
>     template = psp.PSP(req, filename='../hello.html')
>     template.run({'what':'world'})
>     return apache.OK
> 
> Thanks!
> 
> Josh
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From r.pelizzi at virgilio.it  Tue Jul 12 17:28:06 2005
From: r.pelizzi at virgilio.it (R. Pelizzi)
Date: Tue Jul 12 17:27:19 2005
Subject: [mod_python] Text appended to the page when refreshing
Message-ID: <42D435E6.7090407@virgilio.it>

I'm using the publisher handler and when i refresh a page that returns
some html code (a full page, enclosed in html tags) the output is
appended to the page (duplicated, if the python script isn't changed). So
<html><body><p>Hello World!</p></body></html>
becomes
<html><body><p>Hello World!</p><p>Hello World!</p></body></html>
This is so weird... is this behaviour related to my browser (i noticed
that both firefox and konqueror do it) or to my "buggy" code? What could
be wrong?


From falka777 at gmx.de  Tue Jul 12 18:09:11 2005
From: falka777 at gmx.de (Wojtek Dabrowski)
Date: Tue Jul 12 18:03:58 2005
Subject: [mod_python] Text appended to the page when refreshing
In-Reply-To: <42D435E6.7090407@virgilio.it>
References: <42D435E6.7090407@virgilio.it>
Message-ID: <42D43F87.9080400@gmx.de>

> I'm using the publisher handler and when i refresh a page that returns
> some html code (a full page, enclosed in html tags) the output is
> appended to the page (duplicated, if the python script isn't changed).

I have had a similiar problem. In my case, the output was generated as a
list of lines, kind of like:

def handler(req):
  page=bla()
  for line in page.x:
    req.write(line)

class bla:
  x = list()
  def __init__(self):
    self.x.append("HTML lines")

Now x=list didn't generate an empty list, but x sometimes still held the
output generated last time the page was called. I corrected this by
adding an x=[] in the __init__ to get:

class bla:
  x = list()
  def __init__(self):
    x=[]
    self.x.append("HTML lines")

This cleared x of any garbage that might have been there, and it works
fine now.

I don't know why x=list() didn't generate an empty list, I just know it
didn't ;) If there's anybody who can actually explain why this happened,
I'd be grateful.

Have a nice day,
-Wojtek

--
This is a .signature-virus. If you see this, copy it into your .signature!
If you don't know what a .signature is, you've most probably been
infected by another virus of name Microsoft. In this case, please remove
yourself from my fov or infect yourself with linux ;)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/e5a5080a/signature.bin
From dharana at dharana.net  Tue Jul 12 19:29:43 2005
From: dharana at dharana.net (dharana)
Date: Tue Jul 12 19:30:04 2005
Subject: [mod_python] Help with memory problems
Message-ID: <42D45267.1040802@dharana.net>

look at this screenshot:

http://dharana.net/memory_concerns.png

It shows two screenshots of the same page of my webapp. The lower one was shoot 
just after an apachectl start. The second one was shot after 6 consecutive 
refreshes where memory usage increased every time by a lot of Mbs.

I use a lot of custom modules, from db calls to xslt transformations (with 
libxml). But in the page shown in the screenshot it does little. The strange 
thing is that after a few more page refreshes the memory load goes back to 23Mb 
and then increases again.

I use some light module-level caching (I cache the 3 queries executed in the 
lower page). But I don't think this is causing the heavy memory usage because 
after it goes back to 23Mb it does query again (ie: the caching mechanism still 
has it's cache).

I use apache prefork and Maxrequestperchild 0. After every page refresh the unr 
obj var shown on the page doesn't changes. It's either 63 or 0.

mem, resident and stack come from this script:

http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/286222

unr obj is just the output of gc.collect() after everything else is done (the 
debug print is printed just before return apache.OK.

What I am asking is for some help or pointers in how to track down who is 
causing this or where to look for reducing the memory usage.


Thanks,

-- 
dharana

From dharana at dharana.net  Tue Jul 12 19:49:24 2005
From: dharana at dharana.net (dharana)
Date: Tue Jul 12 19:49:43 2005
Subject: [mod_python] Help with memory problems
In-Reply-To: <42D45267.1040802@dharana.net>
References: <42D45267.1040802@dharana.net>
Message-ID: <42D45704.6040106@dharana.net>

Please, ignore my previous email. The massive leak was being caused by 
FileSession. I was using an earlier snapshot and after upgrading to:

http://svn.apache.org/snapshots/mod_python/mod_python_20050712224304.tar.gz

Everything went back normal. After checking everything works go upgrade 
production. Load problem solved. I feel much better now, python handles the 
heavy complexity I imposed to him with no problems.


How much is left for 3.2? I can't use an stable mp release right now because I 
need several things included in 3.2 (segfaults for psp, filesession, etc) and 
using svn HEAD in a prod server is scary.

dharana wrote:
> look at this screenshot:
> 
> http://dharana.net/memory_concerns.png
> 
> It shows two screenshots of the same page of my webapp. The lower one 
> was shoot just after an apachectl start. The second one was shot after 6 
> consecutive refreshes where memory usage increased every time by a lot 
> of Mbs.
> 
> I use a lot of custom modules, from db calls to xslt transformations 
> (with libxml). But in the page shown in the screenshot it does little. 
> The strange thing is that after a few more page refreshes the memory 
> load goes back to 23Mb and then increases again.
> 
> I use some light module-level caching (I cache the 3 queries executed in 
> the lower page). But I don't think this is causing the heavy memory 
> usage because after it goes back to 23Mb it does query again (ie: the 
> caching mechanism still has it's cache).
> 
> I use apache prefork and Maxrequestperchild 0. After every page refresh 
> the unr obj var shown on the page doesn't changes. It's either 63 or 0.
> 
> mem, resident and stack come from this script:
> 
> http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/286222
> 
> unr obj is just the output of gc.collect() after everything else is done 
> (the debug print is printed just before return apache.OK.
> 
> What I am asking is for some help or pointers in how to track down who 
> is causing this or where to look for reducing the memory usage.
> 
> 
> Thanks,
> 

-- 
dharana

From r.pelizzi at virgilio.it  Tue Jul 12 20:13:10 2005
From: r.pelizzi at virgilio.it (R. Pelizzi)
Date: Tue Jul 12 20:12:23 2005
Subject: [mod_python] Text appended to the page when refreshing
In-Reply-To: <42D43F87.9080400@gmx.de>
References: <42D435E6.7090407@virgilio.it> <42D43F87.9080400@gmx.de>
Message-ID: <42D45C96.6070404@virgilio.it>

Wojtek Dabrowski wrote:

>>I'm using the publisher handler and when i refresh a page that returns
>>some html code (a full page, enclosed in html tags) the output is
>>appended to the page (duplicated, if the python script isn't changed).
>>    
>>
>
>I have had a similiar problem. In my case, the output was generated as a
>list of lines, kind of like:
>
>def handler(req):
>  page=bla()
>  for line in page.x:
>    req.write(line)
>
>class bla:
>  x = list()
>  def __init__(self):
>    self.x.append("HTML lines")
>
>Now x=list didn't generate an empty list, but x sometimes still held the
>output generated last time the page was called. I corrected this by
>adding an x=[] in the __init__ to get:
>
>class bla:
>  x = list()
>  def __init__(self):
>    x=[]
>    self.x.append("HTML lines")
>
>This cleared x of any garbage that might have been there, and it works
>fine now.
>
>I don't know why x=list() didn't generate an empty list, I just know it
>didn't ;) If there's anybody who can actually explain why this happened,
>I'd be grateful.
>  
>
Strange: you're using a class variable but every instance deletes it.
What's the purpose of such a list anyway? Couldn't you just set self.x
in __init__? Also, since i think mod_python reuses the same interpreter
(python session) for multiple requests (opposed to cgi), it is
predictable that class attributes are shared among requests. My class,
though, has only instance variables. These shouldn't be (and arent')
shared in normal-python scripting. Now, i wonder how using mod_python
messes everything up.
From r.pelizzi at virgilio.it  Tue Jul 12 20:29:49 2005
From: r.pelizzi at virgilio.it (R. Pelizzi)
Date: Tue Jul 12 20:29:15 2005
Subject: [mod_python] Text appended to the page when refreshing
In-Reply-To: <42D45C96.6070404@virgilio.it>
References: <42D435E6.7090407@virgilio.it> <42D43F87.9080400@gmx.de>
	<42D45C96.6070404@virgilio.it>
Message-ID: <42D4607D.5090904@virgilio.it>

R. Pelizzi wrote:

>Wojtek Dabrowski wrote:
>
>  
>
>>>I'm using the publisher handler and when i refresh a page that returns
>>>some html code (a full page, enclosed in html tags) the output is
>>>appended to the page (duplicated, if the python script isn't changed).
>>>   
>>>
>>>      
>>>
>>I have had a similiar problem. In my case, the output was generated as a
>>list of lines, kind of like:
>>
>>def handler(req):
>> page=bla()
>> for line in page.x:
>>   req.write(line)
>>
>>class bla:
>> x = list()
>> def __init__(self):
>>   self.x.append("HTML lines")
>>
>>Now x=list didn't generate an empty list, but x sometimes still held the
>>output generated last time the page was called. I corrected this by
>>adding an x=[] in the __init__ to get:
>>
>>class bla:
>> x = list()
>> def __init__(self):
>>   x=[]
>>   self.x.append("HTML lines")
>>
>>This cleared x of any garbage that might have been there, and it works
>>fine now.
>>
>>I don't know why x=list() didn't generate an empty list, I just know it
>>didn't ;) If there's anybody who can actually explain why this happened,
>>I'd be grateful.
>> 
>>
>>    
>>
>Strange: you're using a class variable but every instance deletes it.
>What's the purpose of such a list anyway? Couldn't you just set self.x
>in __init__? Also, since i think mod_python reuses the same interpreter
>(python session) for multiple requests (opposed to cgi), it is
>predictable that class attributes are shared among requests. My class,
>though, has only instance variables. These shouldn't be (and arent')
>shared in normal-python scripting. Now, i wonder how using mod_python
>messes everything up.
>  
>
Ok, forget about the whole thing: the behaviour has been observed in the
standard interpreter too, and i found a way to fix it. Looks like i
still need to wet my feet with python...

From gomo at datafull.com  Tue Jul 12 21:17:30 2005
From: gomo at datafull.com (Gonzalo =?ISO-8859-1?Q?Sainz-Tr=E1paga?=)
Date: Tue Jul 12 21:18:41 2005
Subject: [mod_python] Sessions in 2.7 [solved]
In-Reply-To: <1121128876.2170.77.camel@localhost>
References: <1121128876.2170.77.camel@localhost>
Message-ID: <1121217450.2170.88.camel@localhost>

Hi,

On Mon, 2005-07-11 at 21:41 -0300, Gonzalo Sainz-Tr?paga wrote:
> Hi, I just realized mod_python 3.x is only available for Apache 2.0.
> Sadly, I realized it by reading:
> ImportError: No module named Session
> In my browser after having uploaded everything.
> 
> So I have quite a problem here. I have to find a (sort of) drop-in
> replacement for 3.x sessions, and i have to do it *fast*. I checked the
> links in the FAQ, and the only one that looks like it could work is PSO.

Ok, here's how I worked this out (for the record).
First, I googled quite a bit and finally bumped into Myghty, a Python
port of HTML::Mason. Myghty has it's own Session implementation which is
100% syntax compatible with mod_python's. So, I changed my import
statement and everything ran fine in Apache 2.0 (my local server).

Strangely, the remote server (Apache 1.3) didn't allow me to log in. It
turned out it wasn't sending any cookies. After a *lot* of head smashing
I finally realized (with help from Myghty's author) that mod_python 2.7
requires you to explicitely request.send_http_header() on your handlers,
while 3.1 does not. This is not really mentioned in the documentation,
it is just silently removed from the corresponding page in 3.1's docs.
Adding this single line made everything work fine.

So, what did we learn?
-> When in need for compatibility with Apache 1.3 and 2.0, use Myghty's
sessions instead of mod_python's ones, and use
request.send_http_header() in your handlers to avoid strange, seemingly
unexplainable behaviours.

I also modified the mod_python FAQ and added these 2 things.

Thanks to Graham for the quick reply,

-- 
Gonzalo Sainz-Tr?paga (GomoX)
GnuPG Fingerprint: A0AF 3BBF EB93 7EFE 6628  C5A5 F073 9442 6DE4 A497
Public Key: http://pgp.mit.edu:11371/pks/lookup?op=get&search=0x6DE4A497
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050712/dc589ece/attachment.bin
From jd at commandprompt.com  Tue Jul 12 23:19:01 2005
From: jd at commandprompt.com (Joshua D. Drake)
Date: Tue Jul 12 23:18:20 2005
Subject: [mod_python] Templating Systems
In-Reply-To: <1121217450.2170.88.camel@localhost>
References: <1121128876.2170.77.camel@localhost>
	<1121217450.2170.88.camel@localhost>
Message-ID: <42D48825.3000304@commandprompt.com>

Hello,

I have been playing with mod_python for a couple of days now.
At first it was a kind of a pain in the butt ;) then I decided
that I only wanted mod_python not mod_python + vampire.

However I still need a templating system. I have looked at PSP
but I don't like the whole want to be PHP/ASP embed python in html
of it.

What I really want, is something like Smarty (smarty.php.net) for
mod_python. Any thoughts?

Sincerely,

Joshua D. Drake


-- 
Your PostgreSQL solutions provider, Command Prompt, Inc.
24x7 support - 1.800.492.2240, programming, and consulting
Home of PostgreSQL Replicator, plPHP, plPerlNG and pgPHPToolkit
http://www.commandprompt.com / http://www.postgresql.org
From gnb at itga.com.au  Wed Jul 13 00:20:45 2005
From: gnb at itga.com.au (Gregory Bond)
Date: Wed Jul 13 00:21:00 2005
Subject: [mod_python] Templating Systems
In-Reply-To: <42D48825.3000304@commandprompt.com>
References: <1121128876.2170.77.camel@localhost>	<1121217450.2170.88.camel@localhost>
	<42D48825.3000304@commandprompt.com>
Message-ID: <42D4969D.8030309@itga.com.au>

Joshua D. Drake wrote:

> However I still need a templating system.

See the FAQ entry:

http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.010.htp
From jd at commandprompt.com  Wed Jul 13 01:37:04 2005
From: jd at commandprompt.com (Joshua D. Drake)
Date: Wed Jul 13 01:36:16 2005
Subject: [mod_python] Templating Systems
In-Reply-To: <42D4969D.8030309@itga.com.au>
References: <1121128876.2170.77.camel@localhost>	<1121217450.2170.88.camel@localhost>
	<42D48825.3000304@commandprompt.com> <42D4969D.8030309@itga.com.au>
Message-ID: <42D4A880.6000000@commandprompt.com>

Gregory Bond wrote:
> Joshua D. Drake wrote:
> 
>> However I still need a templating system.
> 
> 
> See the FAQ entry:
> 
> http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.010.htp

This is good info, thanks but I was actually looking for some opinions. 
I am not trying to start a flamewar but hearing/reading about 
experiences from actual mod_python users is going to be helpful.

Sincerely,

Joshua D. Drake




-- 
Your PostgreSQL solutions provider, Command Prompt, Inc.
24x7 support - 1.800.492.2240, programming, and consulting
Home of PostgreSQL Replicator, plPHP, plPerlNG and pgPHPToolkit
http://www.commandprompt.com / http://www.postgresql.org
From grahamd at dscpl.com.au  Wed Jul 13 02:10:29 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul 13 02:10:46 2005
Subject: [mod_python] Templating Systems
Message-ID: <1121235029.12830@dscpl.user.openhosting.com>

Joshua D. Drake wrote ..
> Gregory Bond wrote:
> > Joshua D. Drake wrote:
> > 
> >> However I still need a templating system.
> > 
> > 
> > See the FAQ entry:
> > 
> > http://www.modpython.org/FAQ/faqw.py?req=show&file=faq03.010.htp
> 
> This is good info, thanks but I was actually looking for some opinions.
> I am not trying to start a flamewar but hearing/reading about 
> experiences from actual mod_python users is going to be helpful.

Different systems are implemented in different ways and it more
depends on your personal preferences for the type of system you want.
The different systems can be loosely categorised into the following
types:

1. Python code executed as part of Template with call outs to get data. (eg PSP)
2. Psuedo code executed as part of Template will call outs to get data. (eg Cheetah)
3. DOM like object manipulated from outside by Python code (eg HTMLTemplate)
4. Template execution populates fields in template from prebuilt dictionary.
5. Markup is embedded within actual Python code.

What sort of system do you prefer to work with? PHP can be likened to
1 and 2.

Some system have a cleaner conceptual seperation of view from
controller (code to populate it), eg., HTMLTemplate, thus allowing third
party web site design programs to still be used.

Graham
From roberto.c.aguilar at gmail.com  Wed Jul 13 03:05:06 2005
From: roberto.c.aguilar at gmail.com (Roberto Aguilar)
Date: Wed Jul 13 03:05:11 2005
Subject: [mod_python] Re: Failed to acquire global mutex lock on OS X 10.4.1
In-Reply-To: <e190e34805070823455e48b3a9@mail.gmail.com>
References: <e190e34805070823455e48b3a9@mail.gmail.com>
Message-ID: <e190e3480507130005761a4b60@mail.gmail.com>

I found the problem.

I used the default httpd.conf after building from source.  The default
user is nobody, which doesn't have any permissions on the machine. 
After making that a real user, mutex locks were happy, which made
sessions happy.

-berto.

On 7/8/05, Roberto Aguilar <roberto.c.aguilar@gmail.com> wrote:
> Hello all,
> 
> I'm trying to use mod_python on a Mac and ran into a problem when
> creating a mod_python.Session instance.  When I do:
> 
> from mod_python import apache, Session
> 
> def handler(req):
>     s = Session.Session(req)
>     [...]
> 
> I get the following error:
> 
> File "/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/site-packages/mod_python/Session.py",
> line 215, in lock
>     _apache._global_lock(self._req.server, self._sid)
> 
> ValueError: Failed to acquire global mutex lock
> 
> I'm using the following software:
> 
> httpd 2.0.54 (./configure --prefix=/berto --enable-dav --enable-dav-fs
> --enable-cgi && make && make install)
> mod_python 3.1.4 (./configure --prefix=/berto
> --with-apxs=/berto/bin/apxs --with-python=/usr/bin/python && make &&
> make install)
> python 2.3.5 (OS X Tiger default)
> 
> Any suggestions would be greatly appreciated.
> 
> Thanks in advance!
> 
> -Roberto.
>

From roberto.c.aguilar at gmail.com  Wed Jul 13 03:28:00 2005
From: roberto.c.aguilar at gmail.com (Roberto Aguilar)
Date: Wed Jul 13 03:28:05 2005
Subject: [mod_python] "unsubscriptable object" error when instantiating a
	session
Message-ID: <e190e34805071300283c393433@mail.gmail.com>

Hello,

When attempting to instantiate a session object, I get the following error:

  File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
line 389, in Session
    timeout=timeout, lock=lock)

  File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
line 294, in __init__
    timeout=timeout, lock=lock)

  File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
line 132, in __init__
    Cookie.add_cookie(self._req, self.make_cookie())

  File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
line 160, in make_cookie
    c.path = dirpath[len(docroot):]

TypeError: unsubscriptable object

Turns out dirpath = None on the two systems I've tried this on:

- linux, apache 2.0.54, python 2.2, mod_python 3.1.4
- os x apache 2.0.54, python 2.4.1, mod_python 3.1.4

I'm not sure if I did the correct thing, but, here is a patch to solve
the issue.  Please let me know if what I did is totally off.  But, at
least sessions are working just fine now.  : )

Thanks!

-berto.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Session.py.patch
Type: application/octet-stream
Size: 1481 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/4e634b03/Session.py.obj
From mamading at gmail.com  Wed Jul 13 04:36:57 2005
From: mamading at gmail.com (Mamading Ceesay)
Date: Wed Jul 13 04:37:04 2005
Subject: [mod_python] Templating Systems
In-Reply-To: <42D48825.3000304@commandprompt.com>
References: <1121128876.2170.77.camel@localhost>
	<1121217450.2170.88.camel@localhost>
	<42D48825.3000304@commandprompt.com>
Message-ID: <57a9359705071301362d233df4@mail.gmail.com>

On 13/07/05, Joshua D. Drake <jd@commandprompt.com> wrote:
> 
> What I really want, is something like Smarty (smarty.php.net) for
> mod_python. Any thoughts?
> 

Cheetah? http://cheetahtemplate.org/

-- 
Mamading Ceesay

A Letter To The Terrorists, From London
http://www.lnreview.co.uk/news/005167.php

From SamirMishra at cbuae.gov.ae  Wed Jul 13 04:47:01 2005
From: SamirMishra at cbuae.gov.ae (Samir Mishra)
Date: Wed Jul 13 05:17:10 2005
Subject: [mod_python] Templating Systems
Message-ID: <211AD0070D42D1118C7B00A024FF19AE2EC2A4@AUHEXCH>

I also like kid (http://kid-template.sourceforge.net) and xist
(http://www.livinglogic.de/Python/xist). They may not be smarty-like but
they're simple and allow for decent content-logic separation. Myghty is also
pretty good. Different approaches, and I find myself using handlers based on
file extension.

Maybe I should stick to one...


-----Original Message-----
From: Joshua D. Drake [mailto:jd@commandprompt.com]
Sent: Wednesday, July 13, 2005 07:19
To: mod_python@modpython.org
Subject: [mod_python] Templating Systems


Hello,

I have been playing with mod_python for a couple of days now.
At first it was a kind of a pain in the butt ;) then I decided
that I only wanted mod_python not mod_python + vampire.

However I still need a templating system. I have looked at PSP
but I don't like the whole want to be PHP/ASP embed python in html
of it.

What I really want, is something like Smarty (smarty.php.net) for
mod_python. Any thoughts?

Sincerely,

Joshua D. Drake


-- 
Your PostgreSQL solutions provider, Command Prompt, Inc.
24x7 support - 1.800.492.2240, programming, and consulting
Home of PostgreSQL Replicator, plPHP, plPerlNG and pgPHPToolkit
http://www.commandprompt.com / http://www.postgresql.org
_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python
From mrohrmueller at ra.rockwell.com  Wed Jul 13 05:16:34 2005
From: mrohrmueller at ra.rockwell.com (Manfred Rohrmueller)
Date: Wed Jul 13 05:19:36 2005
Subject: [mod_python] mod_python crash on MP system
Message-ID: <OFECF4C292.F8493FC0-ONC125703D.00326EB9-C125703D.0032E9AF@ra.rockwell.com>

We have a crash similar to 
 http://www.modpython.org/pipermail/mod_python/2004-February/015004.html, 
but we still get the crash even with a very small configuration file...

The crash can be reproduced faster, if the number of
threads (ThreadsPerChild) is higher, the Apache
process priority is set to 'Realtime' or 'High' and the
number of clients is high. This crash looks similar to the one described 
in

Can anyone help with this stack trace?

Thanks in advance

  Manfred


-------------------------------------------------------------------

OS
Windows XP SP2+ Hyperthreading ON;
Windows 2003 SP1 2xXEON + Hyperthreading ON

Server: Apache/2.0.54 (Win32) mod_python/3.1.4 Python/2.3.5
Server: Apache/2.0.52 (Win32) mod_python/3.1.4 Python/2.3.5
Server: Apache/2.0.54 (Win32) mod_python/3.1.3 Python/2.3.5
Server: Apache/2.0.52 (Win32) mod_python/3.1.3 Python/2.3.5

Command line:
apache.exe -DDEBUG -DONE_PROCESS -C "DocumentRoot ..." -C "Listen 8080" -C 
"PidFile ..." -C "ServerAdmin ..." -C "ServerRoot ..." -C "ServerName ..." 
-d ... -f ... -C "PythonPath '[...]'"

-------------------------------------------------------------------
20 worker threads

Apache Threads:
        388     main    child_main      Normal  0
        2212    worker_main     apr_stat        Normal  0
        440     worker_main     apr_file_open   Normal  0
        1744    worker_main     apr_stat        Normal  0
        1556    worker_main     apr_winapi_GetFileAttributesExW Normal  0
        2116    worker_main     EnterNonRecursiveMutex  Normal  0
        172     worker_main     apr_stat        Normal  0
        2964    worker_main     EnterNonRecursiveMutex  Normal  0
        3876    worker_main     EnterNonRecursiveMutex  Normal  0
        1516    worker_main     EnterNonRecursiveMutex  Normal  0
        4044    worker_main     EnterNonRecursiveMutex  Normal  0
        1552    worker_main     EnterNonRecursiveMutex  Normal  0
        3604    worker_main     EnterNonRecursiveMutex  Normal  0
        1728    worker_main     EnterNonRecursiveMutex  Normal  0
        2848    worker_main     apr_file_flush  Normal  0
        3784    worker_main     EnterNonRecursiveMutex  Normal  0
        3860    worker_main     EnterNonRecursiveMutex  Normal  0
        3816    worker_main     EnterNonRecursiveMutex  Normal  0
        2036    worker_main     EnterNonRecursiveMutex  Normal  0
        1780    worker_main     EnterNonRecursiveMutex  Normal  0
>       3468    worker_main     __ascii_stricmp Normal  0
        1292    winnt_accept    winnt_accept    Normal  0

-------------------------------------------------------------------
Stack:
>       msvcr71.dll!__ascii_stricmp(void * dst=0x68747950, void * 
src=0x4c27725b)  Line 79        Asm
        msvcr71.dll!_stricmp(const char * dst=0x68747950, const char * 
src=0x4c27725b)  Line 57 + 0xb  C
        libapr.dll!table_mergesort(apr_pool_t * pool=0x68747950, 
apr_table_entry_t * * values=0x00000001, int n=0x00000003)  Line 975 + 
0x11    C
        libapr.dll!apr_table_compress(apr_table_t * t=0x008e7148, unsigned 
int flags=0x00000000)  Line 1092        C
        libapr.dll!apr_table_overlap(apr_table_t * a=0x008e7148, const 
apr_table_t * b=0x008b12b8, unsigned int flags=0x00000000)  Line 1206 + 
0xe     C
        mod_python.so!python_merge_config(apr_pool_t * p=0x008e61b8, void 
* current_conf=0x0087f3c8, void * new_conf=0x008b1150)  Line 618        C
        libhttpd.dll!ap_merge_per_dir_configs(apr_pool_t * p=0x008e61b8, 
ap_conf_vector_t * base=0x008734b8, ap_conf_vector_t * 
new_conf=0x008b0e38)  Line 241 + 0x5    C
        libhttpd.dll!ap_location_walk(request_rec * r=0x008e61f0)  Line 
1290 + 0x11     C
        libhttpd.dll!ap_process_request_internal(request_rec * 
r=0x00000000)  Line 136 + 0x6   C
        libhttpd.dll!ap_process_request(request_rec * r=0x008e61f0)  Line 
248     C
        libhttpd.dll!ap_process_http_connection(conn_rec * c=0x008e22b0) 
Line 251 + 0x6  C
        libhttpd.dll!ap_run_process_connection(conn_rec * c=0x008e22b0) 
Line 43 + 0x25  C
        libhttpd.dll!ap_process_connection(conn_rec * c=0x008e22b0, void * 
csd=0x008e21e0)  Line 176 + 0x6 C
        libhttpd.dll!worker_main(void * thread_num_val=0x008e22a8)  Line 
733     C
        msvcr71.dll!_threadstartex(void * ptd=0x003039d8)  Line 241 + 0x6 
C
        kernel32.dll!GetModuleFileNameA()  + 0x1b4

-------------------------------------------------------------------
Test script (crash_apache.py):
# begin: crash_apache.py
#! sessions  have to coresponde to the (ThreadsPerChild/number of clients)
sessions=10

import urllib, threading

class getu(threading.Thread):
  def __init__(self, nom):
    self.nom = nom
    threading.Thread.__init__(self)
  def run(self):
    for i in range(10000):
      rr = urllib.urlopen("http://localhost:8080/test/thread_%s_%s.pd" % (self.nom, i))
      rr.readlines()
      rr.close()

threads = [getu(i) for i in range(sessions)]

def c ():
  [t.start() for t in threads]
  [t.join() for t in threads]

"""
import crash_apache
crash_apache.c()
"""
# end: crash_apache.py

-------------------------------------------------------------------
Test handler (mptest.py):

from mod_python import apache
requestCount = 0
rsp = "<html><body>#[%s]</body></html>"
def handler(apacheRequest):
  global requestCount
  apache.log_error( "Request #%d" % requestCount )
  requestCount += 1
  apacheRequest.write( rsp% requestCount)
  apacheRequest.flush()
  return apache.OK


-------------------------------------------------------------------
Stripped HTTP config: (comments removed)

Timeout 300
KeepAlive On
MaxKeepAliveRequests 0
KeepAliveTimeout 90

<IfModule mpm_winnt.c>
ThreadsPerChild 20
MaxRequestsPerChild  0
</IfModule>

LoadModule alias_module modules/mod_alias.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule python_module modules/mod_python.so


<Directory "/">
</Directory>

DefaultType text/plain
HostnameLookups Off
LogLevel error

PythonImport mptest main_interpreter
<LocationMatch "/test/.*\.pd">
  SetHandler python-program
  PythonHandler mptest::handler
  PythonEnablePdb Off
  PythonDebug On
  PythonAutoReload Off
  PythonInterpPerDirectory Off
  PythonInterpreter main_interpreter
</LocationMatch>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/3da6a980/attachment-0001.html
From grahamd at dscpl.com.au  Wed Jul 13 05:40:41 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul 13 05:40:58 2005
Subject: [mod_python] "unsubscriptable object" error when instantiating a
	session
In-Reply-To: <e190e34805071300283c393433@mail.gmail.com>
References: <e190e34805071300283c393433@mail.gmail.com>
Message-ID: <a9c037188f9e9b904af5c7e39af3a404@dscpl.com.au>

Known issue, see:

   http://issues.apache.org/jira/browse/MODPYTHON-50

It is because you are setting PythonHandler outside of a Directory
directive. You could have worked around the problem by setting
ApplicationPath rather than changing source code, although source
code fix has already been included for next version.

On 13/07/2005, at 5:28 PM, Roberto Aguilar wrote:

> Hello,
>
> When attempting to instantiate a session object, I get the following 
> error:
>
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 389, in Session
>     timeout=timeout, lock=lock)
>
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 294, in __init__
>     timeout=timeout, lock=lock)
>
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 132, in __init__
>     Cookie.add_cookie(self._req, self.make_cookie())
>
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 160, in make_cookie
>     c.path = dirpath[len(docroot):]
>
> TypeError: unsubscriptable object
>
> Turns out dirpath = None on the two systems I've tried this on:
>
> - linux, apache 2.0.54, python 2.2, mod_python 3.1.4
> - os x apache 2.0.54, python 2.4.1, mod_python 3.1.4
>
> I'm not sure if I did the correct thing, but, here is a patch to solve
> the issue.  Please let me know if what I did is totally off.  But, at
> least sessions are working just fine now.  : )
>
> Thanks!
>
> -berto.
> <Session.py.patch>_______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From fabiovenni at tin.it  Wed Jul 13 06:45:27 2005
From: fabiovenni at tin.it (fabiovenni@tin.it)
Date: Wed Jul 13 06:45:35 2005
Subject: [mod_python] Newbie: mod_python.publisher application structure
Message-ID: <42D3CDD000001CF2@ims3a.cp.tin.it>

I'm a totally newbie in python and mod_python. Just a couple of weeks of
part-time toying.

I've managed to write a minimal blog using the mod_python.publisher handler.
This is the code, gross probably but does the job:

class Blog:

  def index(self, req):
    return """
  <html>
      <form action="post" method="POST">
  <pre>
  Title: <input style="vertical-align: top;" type="text" name="title">
   Body: <textarea style="vertical-align: top;" name="body" rows=4 cols=20></textarea>
         <input type="submit">
  </pre>
      </form>
  </html>
  """

  def post(self, req, title, body):
    return """
  <html>
  <pre>
  Title: %s
   Body: %s

  <a href="save?title=%s&body=%s" title="save post">Save!</a>
  </pre>
  </html>
  """ % (title, body, title, body)

  def save(self, req, title, body):
    import sys
    import time
    now = time.time()
    filename = req.document_root()+"/posts/"+str(now)[:-3]
    post = """<strong>%s</strong>\n%s""" % (title, body)
    try:
      fi = open(filename, 'w')
      fi.write(post)
      fi.close()
    except IOError:
      return '<pre>It hasn\'t been possible to save your post</pre>'

    return """
  <html>
    <pre>
  <strong>%s saved!</strong>
  <a href=\"list\" title=\"List\">List</a>
    </pre>
  </html>
    """ % (filename)

  def list(self, req):
    import os 
    from datetime import datetime
    dirname = str(req.document_root())+"/posts"
    output = "<html>\n<pre>\n"
    for post in os.listdir(dirname)[::-1]:
      output += "<em>"+str(datetime.fromtimestamp(float(post)))+"</em>\n"
      fi = open(dirname+"/"+post, 'r')
      output += fi.read()
      fi.close()
      output += "<hr />\n"
    output += "\n\n<a href=\"/\" title=\"New Post\">New Post</a>\n</pre>\n</html>"
    return output

Now, I was considering to build up a more complicated example and make it
my blog actual engine. I've choosen to use publisher because I like the mapping
URL --> callable object, but now I have some doubts that TFM doesn't solve,
or probably it will in a couple of month time. What is a callable object
in python?

As a web designer, navigation is very important to me so I plan websites
starting from the URL, my problem is that I can't think a class structure
that does the job:

myblogdomain.net/ 
myblogdomain.net/index     Resolved as the index page

myblogdomain.net/archives/2005/jun/    Resolved as blog.archives('2005','Jun')
myblogdomain.net/archives/2005           Resolved as blog.archives('2005')

myblogdomain.net/post/timestamp         Resolved as blog.post('timestamp')

I've been playing around with this:
http://www.modpython.org/pipermail/mod_python/2005-March/017560.html
but I'm confused on how to actually implement it. Do I have to put the Blog
class inside a index.py file? and configure Apache like this:

    <Directory /home/share/mod_python/first/>
        SetHandler mod_python
        PythonHandler mod_python.publisher
        PythonDebug On
    </Directory>

What I'm searching for is an application structure suggestion more than a
coding hint. I would like to have a single controller that handles requests
and traslate them to Blog's method calls, probably proxied by a class that
hanldes to fetch request parameters?

I'm confused please help me

Fabio



From list at joreybump.com  Wed Jul 13 09:33:02 2005
From: list at joreybump.com (Jorey Bump)
Date: Wed Jul 13 09:33:11 2005
Subject: [mod_python] Re: Failed to acquire global mutex lock on OS X
	10.4.1
In-Reply-To: <e190e3480507130005761a4b60@mail.gmail.com>
References: <e190e34805070823455e48b3a9@mail.gmail.com>
	<e190e3480507130005761a4b60@mail.gmail.com>
Message-ID: <42D5180E.2@joreybump.com>

Roberto Aguilar wrote:
> I found the problem.
> 
> I used the default httpd.conf after building from source.  The default
> user is nobody, which doesn't have any permissions on the machine. 
> After making that a real user, mutex locks were happy, which made
> sessions happy.

I'm sorry that I can't help you with your mutex locking problem, but it 
seems to me that increasing the privileges of the Apache user is 
potentially hazardous.

From jd at commandprompt.com  Wed Jul 13 11:54:46 2005
From: jd at commandprompt.com (Joshua D. Drake)
Date: Wed Jul 13 11:54:01 2005
Subject: [mod_python] Templating Systems
In-Reply-To: <1121235029.12830@dscpl.user.openhosting.com>
References: <1121235029.12830@dscpl.user.openhosting.com>
Message-ID: <42D53946.3000605@commandprompt.com>


> 1. Python code executed as part of Template with call outs to get data. (eg PSP)
> 2. Psuedo code executed as part of Template will call outs to get data. (eg Cheetah)
> 3. DOM like object manipulated from outside by Python code (eg HTMLTemplate)
> 4. Template execution populates fields in template from prebuilt dictionary.
> 5. Markup is embedded within actual Python code.
> 
> What sort of system do you prefer to work with? PHP can be likened to
> 1 and 2.

Well I am used to smarty which as close as I can tell is like number 3. 
I was also considering just using XSLT. I have not ever messed with XSLT
but figured it might be a good way to go.

Sincerely,

Joshua D. Drake



> 
> Some system have a cleaner conceptual seperation of view from
> controller (code to populate it), eg., HTMLTemplate, thus allowing third
> party web site design programs to still be used.
> 
> Graham


-- 
Your PostgreSQL solutions provider, Command Prompt, Inc.
24x7 support - 1.800.492.2240, programming, and consulting
Home of PostgreSQL Replicator, plPHP, plPerlNG and pgPHPToolkit
http://www.commandprompt.com / http://www.postgresql.org
From jg.lists at sympatico.ca  Wed Jul 13 12:09:50 2005
From: jg.lists at sympatico.ca (Jim Gallacher)
Date: Wed Jul 13 12:09:53 2005
Subject: [mod_python] "unsubscriptable object" error when instantiating
	a	session
In-Reply-To: <e190e34805071300283c393433@mail.gmail.com>
References: <e190e34805071300283c393433@mail.gmail.com>
Message-ID: <42D53CCE.2050801@sympatico.ca>

This has already been fixed in the development version.

Jim

Roberto Aguilar wrote:
> Hello,
> 
> When attempting to instantiate a session object, I get the following error:
> 
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 389, in Session
>     timeout=timeout, lock=lock)
> 
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 294, in __init__
>     timeout=timeout, lock=lock)
> 
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 132, in __init__
>     Cookie.add_cookie(self._req, self.make_cookie())
> 
>   File "/berto/lib/python2.4/site-packages/mod_python/Session.py",
> line 160, in make_cookie
>     c.path = dirpath[len(docroot):]
> 
> TypeError: unsubscriptable object
> 
> Turns out dirpath = None on the two systems I've tried this on:
> 
> - linux, apache 2.0.54, python 2.2, mod_python 3.1.4
> - os x apache 2.0.54, python 2.4.1, mod_python 3.1.4
> 
> I'm not sure if I did the correct thing, but, here is a patch to solve
> the issue.  Please let me know if what I did is totally off.  But, at
> least sessions are working just fine now.  : )
> 
> Thanks!
> 
> -berto.
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From ochipepe at gmx.net  Wed Jul 13 14:11:53 2005
From: ochipepe at gmx.net (Alexandre F. Santos)
Date: Wed Jul 13 14:11:59 2005
Subject: [mod_python] Fwd: mod python configuration problem
References: <28323.1121277402@www10.gmx.net>
Message-ID: <22259.1121278313@www28.gmx.net>


Hello,

I would like to use mod_python but I'm having problems getting it to work. I
know you hate to answear newbie questions, but please note:

- I managed to convince an admin to install mod_python on his server, and so
far he has been cooperative. But still, I don't have previleged access to
the server, and must ask his help to get mod_python to work.

- I have read a bit of documentation on mod_python, and also the nice
http://www.dscpl.com.au/articles/modpython-001.html tutorial. But I had no
luck so far.

  Here are the specs I could gather about the server:

Python 2.3.5
mod_python 3.1.3
Apache server handler API 2.0 (20020903)

Mod_python shows up in the apache configuration (as seen by phpinfo()). I
asked the admin to do the test recommended in the tutorial to identify
mod_python and send me the output:
-------------------
# python
Python 2.3.5 (#2, May  4 2005, 08:51:39)
[GCC 3.3.5 (Debian 1:3.3.5-12)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import mod_python.psp
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "/usr/lib/python2.3/site-packages/mod_python/psp.py", line 20, in ?
    import apache, Session, util, _psp
  File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 28, in
?
    import _apache
ImportError: No module named _apache
>>>
-------------------

So mod_python 3.1.3 seems indeed to be installed and working.

I created a home/xp/ folder where I put a hello.txt file and verifyed that I
could access it via the web.

I then created there an .htaccess file:
AddHandler python-program .py
PythonHandler mptest
PythonDebug On

and a mptest.py file:
>from mod_python import apache

def handler(req):
    req.content_type = 'text/plain'
    req.send_http_header()
    req.write('mptest.py\n')
    return apache.OK

Going for the /xp/mptest.py file with my browser yielded the following:
-------------------------
Internal Server Error

The server encountered an internal error or misconfiguration and was unable
to complete your request.

Please contact the server administrator, [no address given] and inform them
of the time the error occurred, and anything you might have done that may
have caused the error.

More information about this error may be available in the server error log.
-------------------------

Now of course I don't have access to the server error log, but before I
contact the admin, could you give me some indications about what could be
wrong and what would be the best approach to address this issue?

Thanks,

Alex

-- 
GMX DSL = Maximale Leistung zum minimalen Preis!
2000 MB nur 2,99, Flatrate ab 4,99 Euro/Monat: http://www.gmx.net/de/go/dsl
From listspam at flowtheory.net  Wed Jul 13 14:26:22 2005
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Wed Jul 13 14:26:24 2005
Subject: [mod_python] Fwd: mod python configuration problem
In-Reply-To: <22259.1121278313@www28.gmx.net>
References: <28323.1121277402@www10.gmx.net> <22259.1121278313@www28.gmx.net>
Message-ID: <f8752e6b696be8c52e05d7a4d6741882@flowtheory.net>

The absolute first thing you need to do is add PythonDebug to your 
.htaccess file so you won't have to pester him for the error log 
output.

-jag

-------------- next part --------------
A non-text attachment was scrubbed...
Name: unknown.jpg
Type: image/jpeg
Size: 1984 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/d0129993/unknown.jpg
-------------- next part --------------

Joshua Ginsberg -- joshg@brainstorminternet.net
Brainstorm Internet Network Operations
970-247-1442 x131
On Jul 13, 2005, at 12:11 PM, Alexandre F. Santos wrote:

>
> Hello,
>
> I would like to use mod_python but I'm having problems getting it to 
> work. I
> know you hate to answear newbie questions, but please note:
>
> - I managed to convince an admin to install mod_python on his server, 
> and so
> far he has been cooperative. But still, I don't have previleged access 
> to
> the server, and must ask his help to get mod_python to work.
>
> - I have read a bit of documentation on mod_python, and also the nice
> http://www.dscpl.com.au/articles/modpython-001.html tutorial. But I 
> had no
> luck so far.
>
>   Here are the specs I could gather about the server:
>
> Python 2.3.5
> mod_python 3.1.3
> Apache server handler API 2.0 (20020903)
>
> Mod_python shows up in the apache configuration (as seen by 
> phpinfo()). I
> asked the admin to do the test recommended in the tutorial to identify
> mod_python and send me the output:
> -------------------
> # python
> Python 2.3.5 (#2, May  4 2005, 08:51:39)
> [GCC 3.3.5 (Debian 1:3.3.5-12)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
>>>> import mod_python.psp
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
>   File "/usr/lib/python2.3/site-packages/mod_python/psp.py", line 20, 
> in ?
>     import apache, Session, util, _psp
>   File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 
> 28, in
> ?
>     import _apache
> ImportError: No module named _apache
>>>>
> -------------------
>
> So mod_python 3.1.3 seems indeed to be installed and working.
>
> I created a home/xp/ folder where I put a hello.txt file and verifyed 
> that I
> could access it via the web.
>
> I then created there an .htaccess file:
> AddHandler python-program .py
> PythonHandler mptest
> PythonDebug On
>
> and a mptest.py file:
>> from mod_python import apache
>
> def handler(req):
>     req.content_type = 'text/plain'
>     req.send_http_header()
>     req.write('mptest.py\n')
>     return apache.OK
>
> Going for the /xp/mptest.py file with my browser yielded the following:
> -------------------------
> Internal Server Error
>
> The server encountered an internal error or misconfiguration and was 
> unable
> to complete your request.
>
> Please contact the server administrator, [no address given] and inform 
> them
> of the time the error occurred, and anything you might have done that 
> may
> have caused the error.
>
> More information about this error may be available in the server error 
> log.
> -------------------------
>
> Now of course I don't have access to the server error log, but before I
> contact the admin, could you give me some indications about what could 
> be
> wrong and what would be the best approach to address this issue?
>
> Thanks,
>
> Alex
>
> -- 
> GMX DSL = Maximale Leistung zum minimalen Preis!
> 2000 MB nur 2,99, Flatrate ab 4,99 Euro/Monat: 
> http://www.gmx.net/de/go/dsl
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From listspam at flowtheory.net  Wed Jul 13 16:00:14 2005
From: listspam at flowtheory.net (Joshua Ginsberg)
Date: Wed Jul 13 16:00:16 2005
Subject: [mod_python] Re: [mod python] Fwd: mod python configuration problem
In-Reply-To: <25051.1121282416@www28.gmx.net>
References: <f8752e6b696be8c52e05d7a4d6741882@flowtheory.net>
	<25051.1121282416@www28.gmx.net>
Message-ID: <0febf8e49def6751952fbe8f07379728@flowtheory.net>

Sorry -- didn't really look closely at it. I need to learn to read.

First -- python-program is wrong for a handler. You want mod_python.
Second -- the send_http_header is not necessary, methinks.

Try that.

-jag


-------------- next part --------------
A non-text attachment was scrubbed...
Name: unknown.jpg
Type: image/jpeg
Size: 1984 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/20ecdeca/unknown.jpg
-------------- next part --------------

Joshua Ginsberg -- joshg@brainstorminternet.net
Brainstorm Internet Network Operations
970-247-1442 x131
On Jul 13, 2005, at 1:20 PM, Alexandre F. Santos wrote:

> Hi Jag,
>
> Thanks for your help, but here is my .htaccess file:
> -------------------------------
> AddHandler python-program .py
> PythonHandler mptest
> PythonDebug On
> -------------------------------
>
> PythonDebug is already on (although it is true I don't receive 
> debugging
> info).
>
> Is there a mistake in the command?
>
> Alex
>
>
>
>> --- Urspr?ngliche Nachricht ---
>> Von: Joshua Ginsberg <listspam@flowtheory.net>
>> An: "Alexandre F. Santos" <ochipepe@gmx.net>
>> Kopie: mod_python@modpython.org
>> Betreff: Re: [mod_python] Fwd: mod python configuration problem
>> Datum: Wed, 13 Jul 2005 12:26:22 -0600
>>
>> The absolute first thing you need to do is add PythonDebug to your
>> .htaccess file so you won't have to pester him for the error log
>> output.
>>
>> -jag
>>
>>
>
> -- 
> 5 GB Mailbox, 50 FreeSMS http://www.gmx.net/de/go/promail
> +++ GMX - die erste Adresse f???r Mail, Message, More +++
>
From list at joreybump.com  Wed Jul 13 16:25:15 2005
From: list at joreybump.com (Jorey Bump)
Date: Wed Jul 13 16:25:23 2005
Subject: [mod_python] Newbie: mod_python.publisher application structure
In-Reply-To: <42D3CDD000001CF2@ims3a.cp.tin.it>
References: <42D3CDD000001CF2@ims3a.cp.tin.it>
Message-ID: <42D578AB.2010907@joreybump.com>

fabiovenni@tin.it wrote:
> I'm a totally newbie in python and mod_python. Just a couple of weeks of
> part-time toying.
> 
> I've managed to write a minimal blog using the mod_python.publisher handler.
> This is the code, gross probably but does the job:
[...]
> Now, I was considering to build up a more complicated example and make it
> my blog actual engine. I've choosen to use publisher because I like the mapping
> URL --> callable object, but now I have some doubts that TFM doesn't solve,
> or probably it will in a couple of month time. What is a callable object
> in python?

Read the short manual from start to finish, it's very concise so it's 
easy to miss the finer points. Be sure to read the manual for your 
version of mod_python!

Here is a demo module to give some idea of what objects are published, 
although it's not exhaustive (and may even give slightly different 
results between mod_python versions). It will create links for you to 
try in your browser:

demo.py:

"""
Demo module to show published objects when using mod_python.publisher.
"""

import sys
from sys import path

_hidden = path
docstr = __doc__
mypassword = "BIGsecret!"

class SomeClass:
     "Uh-oh, it's OO"
     def __init__(self):
         self.someattr = "hello"
     def somefunction(self):
         return "hello"

# a published instance
someinstance = SomeClass()

def somefunction():
     "a published function"
     someattr = "hello"
     def somefunction():
         return "hello"
     return "hello"

dirlist = dir()

def index(req):
     "default function"
     header = "<html><head><title>Publisher demo</title></head><body><p>"
     footer = "</p></body></html>"
     link1 = '<a href="%s">http://host/handlerdir/demo/%s</a> <br>'
     link2 = '<a href="%s.%s">http://host/handlerdir/demo/%s.%s</a> <br>'
     link3 = '<a href="%s/%s">http://host/handlerdir/demo/%s/%s</a> <br>'
     links = ['<a href="../demo/">http://host/handlerdir/demo/</a> <br>']
     links.extend([link1 % (i, i) for i in dirlist])
     for o in ['someinstance', 'somefunction']:
         checklist = ['someattr', 'somefunction']
         links.extend([link2 % (o, i, o, i) for i in checklist])
         links.extend([link3 % (o, i, o, i) for i in checklist])
     return "\n".join([header, "\n".join(links), footer])

> As a web designer, navigation is very important to me so I plan websites
> starting from the URL, my problem is that I can't think a class structure
> that does the job:
> 
> myblogdomain.net/ 
> myblogdomain.net/index     Resolved as the index page
> 
> myblogdomain.net/archives/2005/jun/    Resolved as blog.archives('2005','Jun')
> myblogdomain.net/archives/2005           Resolved as blog.archives('2005')

You'll probably want to do this instead:

myblogdomain.net/archives?y=2005&m=jun

> I've been playing around with this:
> http://www.modpython.org/pipermail/mod_python/2005-March/017560.html
> but I'm confused on how to actually implement it. Do I have to put the Blog
> class inside a index.py file? and configure Apache like this:
> 
>     <Directory /home/share/mod_python/first/>
>         SetHandler mod_python
>         PythonHandler mod_python.publisher
>         PythonDebug On
>     </Directory>
> 
> What I'm searching for is an application structure suggestion more than a
> coding hint. I would like to have a single controller that handles requests
> and traslate them to Blog's method calls, probably proxied by a class that
> hanldes to fetch request parameters?

It can be tricky to run the entire site from index.py/index(). You may 
want to use SetHandler None in subdirectories that contain other 
resources, such as images, css, etc.






From jkohans at gmail.com  Wed Jul 13 17:45:48 2005
From: jkohans at gmail.com (Jeremy Kohansimeh)
Date: Wed Jul 13 17:46:52 2005
Subject: [mod_python] Getting an Old Session
Message-ID: <b07823bd05071314451f23c61a@mail.gmail.com>

Hello,

I have a problem where I am not able to reinstate an old Session. On initial 
login I record the session id and then check that the pysid cookie has been 
set appropriately in my browser, which it has. But, on a subsequent call 
when I try to reinstate the same session, I get a new one back that no 
longer has any of the items I have saved. I have been using the following 
code for diagnostics:

def handler(req, **kw):
"""handles initial requests"""

# used for debugging
f = open( '/home/jeremyk/public_html/data/foo.log', 'a+')

cookies = Cookie.get_cookies( req)
if cookies.has_key( 'pysid'):
pysid = cookies[ 'pysid'].value

f.write( 'pysid is ' + pysid + '\n')
req.sess = Session.Session( req, sid=pysid)
else:
req.sess = Session.Session( req)

#req.sess = Session.Session( req)
req.sess.set_timeout( 20 * 60)
id = req.sess.id()

if not req.sess.is_new():
f.write( 'old session: ' + id + '\n')
else:
f.write( 'new session: ' + id + '\n')

f.close()

return segment.dispatchToHandler( req)

I know that I do not need to specify the sid attribute of Session for an old 
session to be reinstated (this can be determined from the request object), 
but it wasn't working when I did it that way either. Something that seems 
very strange to me is that the pysid value I get back from here does not 
match the cookie that has been set in my browser. As you can see, I set the 
timeout to 20 minutes, which is much longer than the time inbetween the 2 
calls. Is there anything else I should try?

Thanks for any help.

Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/f361de2f/attachment-0001.html
From grahamd at dscpl.com.au  Wed Jul 13 18:04:33 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul 13 18:04:56 2005
Subject: [mod_python] Re: [mod python] Fwd: mod python configuration
	problem
In-Reply-To: <0febf8e49def6751952fbe8f07379728@flowtheory.net>
References: <f8752e6b696be8c52e05d7a4d6741882@flowtheory.net>
	<25051.1121282416@www28.gmx.net>
	<0febf8e49def6751952fbe8f07379728@flowtheory.net>
Message-ID: <a76ccd09438282f9096aab2c6f8a0eb0@dscpl.com.au>

On 14/07/2005, at 6:00 AM, Joshua Ginsberg wrote:

> Sorry -- didn't really look closely at it. I need to learn to read.
>
> First -- python-program is wrong for a handler. You want mod_python.
> Second -- the send_http_header is not necessary, methinks.

What he used should be fine. If you read the document referenced
it clearly indicates that they are recommended be used because
they both work on both mod_python 2.7 and 3.1 If you use
mod_python instead of python-program and don't use send_http_header()
it will not work on mod_python 2.7.

From grahamd at dscpl.com.au  Wed Jul 13 18:55:34 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul 13 18:55:45 2005
Subject: [mod_python] Fwd: mod python configuration problem
In-Reply-To: <22259.1121278313@www28.gmx.net>
References: <28323.1121277402@www10.gmx.net> <22259.1121278313@www28.gmx.net>
Message-ID: <f5f03c4c9cb918f2dd97a4bc1209d1e4@dscpl.com.au>


On 14/07/2005, at 4:11 AM, Alexandre F. Santos wrote:
> Mod_python shows up in the apache configuration (as seen by 
> phpinfo()). I
> asked the admin to do the test recommended in the tutorial to identify
> mod_python and send me the output:
> -------------------
> # python
> Python 2.3.5 (#2, May  4 2005, 08:51:39)
> [GCC 3.3.5 (Debian 1:3.3.5-12)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
>>>> import mod_python.psp
> Traceback (most recent call last):
>   File "<stdin>", line 1, in ?
>   File "/usr/lib/python2.3/site-packages/mod_python/psp.py", line 20, 
> in ?
>     import apache, Session, util, _psp
>   File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 
> 28, in
> ?
>     import _apache
> ImportError: No module named _apache
>>>>
> -------------------
>
> So mod_python 3.1.3 seems indeed to be installed and working.

That only shows that the part of mod_python which lives outside of 
Apache
has been installed. To know for sure that the Apache DSO module for
mod_python has been installed, you need to sight the startup line in
Apache log file for it. Ie., something like:

   [Tue Feb 01 16:08:21 2005] [notice] Apache/2.0.51 (Unix)
     mod_python/3.1.3 Python/2.3 configured -- resuming normal operations

> I created a home/xp/ folder where I put a hello.txt file and verifyed 
> that I
> could access it via the web.
>
> I then created there an .htaccess file:
> AddHandler python-program .py
> PythonHandler mptest
> PythonDebug On
>
> and a mptest.py file:
>> from mod_python import apache
>
> def handler(req):
>     req.content_type = 'text/plain'
>     req.send_http_header()
>     req.write('mptest.py\n')
>     return apache.OK
>
> Going for the /xp/mptest.py file with my browser yielded the following:
> -------------------------
> Internal Server Error

After having added in the .htaccess file, could you still access the 
"hello.txt"
file or did attempting to access it also yield an internal server error.

If accessing "hello.txt" also yielded an internal server error, it 
could be
options in the .htaccess file. I know the article says:

   If instead of the string "mptest.py" you see the actual source code 
contained
   in the file, or your browser asks you to save the response to a file 
and that
   file contains the source code, the main Apache configuration may not 
be enabled
   so as to allow you to specify Apache handlers in a ".htaccess" file. 
To enable
   this facility, edit your main Apache configuration file and add in an
   appropriate location:

     <Directory /some/directory>
     AllowOverride FileInfo
     </Directory>

but it may be possible that the lack of the AllowOverride for FileInfo 
could
also perhaps result in an internal server error response. If this is 
the case,
accessing "hello.txt" should yield the error as well and you'll need to 
get
the AllowOverride option enabled for your directory.

> Now of course I don't have access to the server error log, but before I
> contact the admin, could you give me some indications about what could 
> be
> wrong and what would be the best approach to address this issue?

Since you have PythonDebug set to On, if mod_python was working and it 
was a
problem in your handler, or ability to find the handler, you would have 
got
a stack trace back in the browser instead of the generic 500 error, so 
not
likely a problem there.

Unfortunately this leaves a horrid set of possibilities where even what 
is in
the Apache error log may not help. This is because for certain 500 
errors
internal to mod_python when trying to initially process your request, it
either doesn't log anything at all, or logs it to stderr but doesn't 
flush
it properly meaning that it doesn't appear in the Apache logs until 
Apache is
next shutdown/restarted. Both these cases have been dealt with for the 
next
version of mod_python, but you are going to have to contend with them.

   http://issues.apache.org/jira/browse/MODPYTHON-41
   http://issues.apache.org/jira/browse/MODPYTHON-35

The cause of these problems tends to be where for some reason the 
version of
the mod_python module loaded into Apache is looking in the wrong place 
for
the Python code files installed into the site-packages directory of the
Python installation, ie., those which the command line test at start was
trying to determine existed. It could simply not be finding the Python 
code
files or finding the wrong version if there are multiple versions of 
Python
installed on the system.

All I can suggest is getting proof from the logs that mod_python is 
loaded.
Ie., that the line above exists in some form. Get any errors messages 
that
look like that they may be from mod_python in the log from the time when
the request was made, or any other strange errors that might have 
appeared
in the log when Apache was next shutdown/restarted.

Graham

From modpy at sparq.org  Wed Jul 13 18:59:51 2005
From: modpy at sparq.org (Kevin Quick)
Date: Wed Jul 13 18:59:56 2005
Subject: [mod_python] Directory wildcard handling
Message-ID: <1121295591.42d59ce77e8e2@webmail.sparq.org>

Attached is a patch that does two things:

1) On module import failures, logfile contains additional information showing
   system paths as well as module name.

2) Support of Python*Handler found in a wildcard-based directory.  For example,

<IfModule mod_python.c> 
    <Directory /home/*/public_html/python> 
        AddHandler mod_python .py 
        PythonHandler helloworld 
        PythonDebug on 
    </Directory> 
</IfModule> 

which mirrors a corresponding perl setting and would allow the user to
place a mod_python handler in their $HOME/public_html/python directory.

In the current code, the wildcard is not translated, the sys.path update
will be invalid, and the user's module will not be accessible.  The attached
patch provides a fix for this.

N.B. There are obvious security issues in using this type of configuration,
but this is very useful for dev environments, and security would implemented
via explicit alternatives anyhow.

-- 
-KQ




-------------------------------------------------
This mail sent through IMP: http://horde.org/imp/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: kwq_path_cvsdiff.diff
Type: application/octet-stream
Size: 1185 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/90af2c68/kwq_path_cvsdiff.obj
From grahamd at dscpl.com.au  Wed Jul 13 19:08:49 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul 13 19:09:05 2005
Subject: [mod_python] Newbie: mod_python.publisher application structure
In-Reply-To: <42D578AB.2010907@joreybump.com>
References: <42D3CDD000001CF2@ims3a.cp.tin.it> <42D578AB.2010907@joreybump.com>
Message-ID: <27fdad0b8b9c2ffce843ddc2adfc3625@dscpl.com.au>


On 14/07/2005, at 6:25 AM, Jorey Bump wrote:
>> As a web designer, navigation is very important to me so I plan 
>> websites
>> starting from the URL, my problem is that I can't think a class 
>> structure
>> that does the job:
>> myblogdomain.net/ myblogdomain.net/index     Resolved as the index 
>> page
>> myblogdomain.net/archives/2005/jun/    Resolved as 
>> blog.archives('2005','Jun')
>> myblogdomain.net/archives/2005           Resolved as 
>> blog.archives('2005')
>
> You'll probably want to do this instead:
>
> myblogdomain.net/archives?y=2005&m=jun

FWIW, if you had Vampire you could say:

   def _archives(year,month=None):
     ...

   archives = vampire.PathArgs(_archives)

Ie., it will resolve as:

   myblogdomain.net/archives/2005/jun/    Calls _archives('2005','jun')
   myblogdomain.net/archives/2005           Calls _archives('2005')

Note that this doesn't require you to be using Vampire's dispatch 
mechanism
or its version of publisher, this should work in stock standard version 
of
mod_python.publisher.

Unlike the vampire.PathInfo() class which can be ported to work with
mod_python.publisher such that there is no dependency on Vampire, that
can't be easily done with vampire.PathArgs() as it depends on some
introspection routines for which there is no equivalent in mod_python.
You would either have to rip the introspection routine out of Vampire
or write a replacement for it. It just uses the "inspect" module from
Python, so not too hard. :-)

Graham

From grahamd at dscpl.com.au  Wed Jul 13 19:13:58 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul 13 19:14:07 2005
Subject: [mod_python] Directory wildcard handling
In-Reply-To: <1121295591.42d59ce77e8e2@webmail.sparq.org>
References: <1121295591.42d59ce77e8e2@webmail.sparq.org>
Message-ID: <7577149fe486e2c60abd9d7201a1cd71@dscpl.com.au>

When suggesting patches, you should also log them in JIRA, first making
sure that it isn't already a known issue. This is better than posting 
them
only to the mailing list as the mailing list archive is a bit broken and
attachments aren't currently accessible from the web interface to the
archive and therefore patches will most likely be lost.

The JIRA bug tracking system can be found at:

   http://issues.apache.org/jira/browse/MODPYTHON

On 14/07/2005, at 8:59 AM, Kevin Quick wrote:

> Attached is a patch that does two things:
>
> 1) On module import failures, logfile contains additional information 
> showing
>    system paths as well as module name.
>
> 2) Support of Python*Handler found in a wildcard-based directory.  For 
> example,
>
> <IfModule mod_python.c>
>     <Directory /home/*/public_html/python>
>         AddHandler mod_python .py
>         PythonHandler helloworld
>         PythonDebug on
>     </Directory>
> </IfModule>
>
> which mirrors a corresponding perl setting and would allow the user to
> place a mod_python handler in their $HOME/public_html/python directory.
>
> In the current code, the wildcard is not translated, the sys.path 
> update
> will be invalid, and the user's module will not be accessible.  The 
> attached
> patch provides a fix for this.
>
> N.B. There are obvious security issues in using this type of 
> configuration,
> but this is very useful for dev environments, and security would 
> implemented
> via explicit alternatives anyhow.
>
> -- 
> -KQ
>
>
>
>
> -------------------------------------------------
> This mail sent through IMP: http://horde.org/imp/
> <kwq_path_cvsdiff.diff>_______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grahamd at dscpl.com.au  Wed Jul 13 19:43:51 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Wed Jul 13 19:44:01 2005
Subject: [mod_python] Directory wildcard handling
In-Reply-To: <1121297886.42d5a5deb6bba@webmail.sparq.org>
References: <1121295591.42d59ce77e8e2@webmail.sparq.org>
	<7577149fe486e2c60abd9d7201a1cd71@dscpl.com.au>
	<1121297886.42d5a5deb6bba@webmail.sparq.org>
Message-ID: <97cce68914ee62ec34fc3685c9338ed9@dscpl.com.au>


On 14/07/2005, at 9:38 AM, Kevin Quick wrote:
>
> Thanks!  This information wasn't apparent from the www.modpython.org 
> site,
> and I couldn't access any archive for the python-dev mailing list.  
> I've
> moved this suggesstion to JIRA now and will use that in the future.

The archives for the mod_python developer list is in a non obvious 
place:

   http://www.mail-archive.com/python-dev@httpd.apache.org/

Not sure if this is the official archive or not.

Graham

From jg.lists at sympatico.ca  Wed Jul 13 19:59:41 2005
From: jg.lists at sympatico.ca (Jim Gallacher)
Date: Wed Jul 13 19:59:47 2005
Subject: [mod_python] Getting an Old Session
In-Reply-To: <b07823bd05071314451f23c61a@mail.gmail.com>
References: <b07823bd05071314451f23c61a@mail.gmail.com>
Message-ID: <42D5AAED.5090305@sympatico.ca>

Jeremy Kohansimeh wrote:
> Hello,
> 
> I have a problem where I am not able to reinstate an old Session.  On 
> initial login I record the session id and then check that the pysid 
> cookie has been set appropriately in my browser, which it has.  But, on 
> a subsequent call when I try to reinstate the same session, I get a new 
> one back that no longer has any of the items I have saved.  I have been 
> using the following code for diagnostics:
> 
> def handler(req, **kw):
>     """handles initial requests"""
>    
>     # used for debugging
>     f = open( '/home/jeremyk/public_html/data/foo.log', 'a+')
>    
>     cookies = Cookie.get_cookies( req)
>     if cookies.has_key( 'pysid'):
>         pysid = cookies[ 'pysid'].value
>        
>         f.write( 'pysid is ' + pysid + '\n')
>         req.sess = Session.Session( req, sid=pysid)
>     else:
>         req.sess = Session.Session( req)
>        
>     #req.sess = Session.Session( req)
>     req.sess.set_timeout( 20 * 60)
>     id = req.sess.id()
>    
>     if not req.sess.is_new():
>         f.write( 'old session: ' + id + '\n')
>     else:
>         f.write( 'new session: ' + id + '\n')
>    
>     f.close()
>        
>     return segment.dispatchToHandler( req)
> 
> I know that I do not need to specify the sid attribute of Session for an 
> old session to be reinstated (this can be determined from the request 
> object), but it wasn't working when I did it that way either.  Something 
> that seems very strange to me is that the pysid value I get back from 
> here does not match the cookie that has been set in my browser.  As you 
> can see, I set the timeout to 20 minutes, which is much longer than the 
> time inbetween the 2 calls.  Is there anything else I should try?
> 

In your example code you never save the session data. When you create a 
session instance with an explicit sid, Session tries to load the 
corresponding session. If that session does not exist a new session id 
is created, and thus you see a new pysid on each request.

You need req.sess.save() somewhere in your code.

Regards,
Jim

From jkohans at gmail.com  Wed Jul 13 20:30:15 2005
From: jkohans at gmail.com (Jeremy Kohansimeh)
Date: Wed Jul 13 20:30:27 2005
Subject: [mod_python] Getting an Old Session
In-Reply-To: <42D5AAED.5090305@sympatico.ca>
References: <b07823bd05071314451f23c61a@mail.gmail.com>
	<42D5AAED.5090305@sympatico.ca>
Message-ID: <b07823bd050713173031075eb9@mail.gmail.com>

I should have mentioned that this is done and it is done before any HTML is 
written to the browser. So, there should not be the problem of having saved 
the session after some HTML has been written to the browser, which would 
prevent the cookie from being set.

Jeremy

On 7/13/05, Jim Gallacher <jg.lists@sympatico.ca> wrote:
> 
> Jeremy Kohansimeh wrote:
> > Hello,
> >
> > I have a problem where I am not able to reinstate an old Session. On
> > initial login I record the session id and then check that the pysid
> > cookie has been set appropriately in my browser, which it has. But, on
> > a subsequent call when I try to reinstate the same session, I get a new
> > one back that no longer has any of the items I have saved. I have been
> > using the following code for diagnostics:
> >
> > def handler(req, **kw):
> > """handles initial requests"""
> >
> > # used for debugging
> > f = open( '/home/jeremyk/public_html/data/foo.log', 'a+')
> >
> > cookies = Cookie.get_cookies( req)
> > if cookies.has_key( 'pysid'):
> > pysid = cookies[ 'pysid'].value
> >
> > f.write( 'pysid is ' + pysid + '\n')
> > req.sess = Session.Session( req, sid=pysid)
> > else:
> > req.sess = Session.Session( req)
> >
> > #req.sess = Session.Session( req)
> > req.sess.set_timeout( 20 * 60)
> > id = req.sess.id()
> >
> > if not req.sess.is_new():
> > f.write( 'old session: ' + id + '\n')
> > else:
> > f.write( 'new session: ' + id + '\n')
> >
> > f.close()
> >
> > return segment.dispatchToHandler( req)
> >
> > I know that I do not need to specify the sid attribute of Session for an
> > old session to be reinstated (this can be determined from the request
> > object), but it wasn't working when I did it that way either. Something
> > that seems very strange to me is that the pysid value I get back from
> > here does not match the cookie that has been set in my browser. As you
> > can see, I set the timeout to 20 minutes, which is much longer than the
> > time inbetween the 2 calls. Is there anything else I should try?
> >
> 
> In your example code you never save the session data. When you create a
> session instance with an explicit sid, Session tries to load the
> corresponding session. If that session does not exist a new session id
> is created, and thus you see a new pysid on each request.
> 
> You need req.sess.save() somewhere in your code.
> 
> Regards,
> Jim
> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050713/72b44f32/attachment-0001.html
From roberto.c.aguilar at gmail.com  Wed Jul 13 23:31:21 2005
From: roberto.c.aguilar at gmail.com (Roberto Aguilar)
Date: Wed Jul 13 23:31:32 2005
Subject: [mod_python] Templating Systems
In-Reply-To: <42D53946.3000605@commandprompt.com>
References: <1121235029.12830@dscpl.user.openhosting.com>
	<42D53946.3000605@commandprompt.com>
Message-ID: <e190e34805071320313a2fd40e@mail.gmail.com>

I'm quite the fan of having the python code deal strictly with an
xml.dom.minidom object and at the end pass it along to the browser,
or, if the client doesn't support XML, transform it server-side.

I'm currently using libxsltmod to do server-side transforms:

import libxsltmod, xml.dom.minidom

xslPath = '/path/to/xsl'
doc = xml.dom.minidom.Document()

[...]

req.write(libxsltmod.translate_to_string(
            'f', xslPath,
            's', doc.toxml()))

-berto.

On 7/13/05, Joshua D. Drake <jd@commandprompt.com> wrote:
> 
> > 1. Python code executed as part of Template with call outs to get data. (eg PSP)
> > 2. Psuedo code executed as part of Template will call outs to get data. (eg Cheetah)
> > 3. DOM like object manipulated from outside by Python code (eg HTMLTemplate)
> > 4. Template execution populates fields in template from prebuilt dictionary.
> > 5. Markup is embedded within actual Python code.
> >
> > What sort of system do you prefer to work with? PHP can be likened to
> > 1 and 2.
> 
> Well I am used to smarty which as close as I can tell is like number 3.
> I was also considering just using XSLT. I have not ever messed with XSLT
> but figured it might be a good way to go.
> 
> Sincerely,
> 
> Joshua D. Drake
> 
> 
> 
> >
> > Some system have a cleaner conceptual seperation of view from
> > controller (code to populate it), eg., HTMLTemplate, thus allowing third
> > party web site design programs to still be used.
> >
> > Graham
> 
> 
> --
> Your PostgreSQL solutions provider, Command Prompt, Inc.
> 24x7 support - 1.800.492.2240, programming, and consulting
> Home of PostgreSQL Replicator, plPHP, plPerlNG and pgPHPToolkit
> http://www.commandprompt.com / http://www.postgresql.org
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From jim at joshua.smcvt.edu  Fri Jul 15 15:50:09 2005
From: jim at joshua.smcvt.edu (Jim Hefferon)
Date: Fri Jul 15 15:50:12 2005
Subject: [mod_python] PostReadRequestHandler
Message-ID: <1121457009.30663.35.camel@joshua.smcvt.edu>

Hello,  

I'm sorry to bother folks, but I have a "Hello World"-type question.  

I want to write a small handler that redirects if the URI satisfies some
criteria (I have pre-made some autoindex pages and so want to redirect
to those if possible).  My understanding of handlers is very weak, but I
thought that a PostReadRequestHandler is the right thing, as then all
the URI translations, etc. can do their stuff after I reroute some
URI's.  That is, I had in mind something like his:
  def postreadrequesthandler(req):
     uriPath=req.parsed_uri[apache.URI_PATH]
     if uriPath satisfies criteria:
        redirect
        return apache.OK
     return apache.DECLINED

I put these lines in my 000-default in a virtual host context:
  setHandler mod_python
  PythonPath "sys.path+['/dir/containing/py/file']"
  PythonPostReadRequestHandler filename
  PythonDebug On
The error.log says something about mod_python 3.1.3 resuming normal
operations, so I think I am OK.

I wrote a small handler, just as a test.  It says only
  def postreadrequesthandler(req):
    return apache.DECLINED
(I've also experimented with apache.OK)  I expected it to have no effect
on the behavior of apache as my understanding was that the request would
go to the next handler up the line.

Instead, when I restart apache, it gives me a 404 every time, and every
time sends me a copy of the cgi program that is the 404 error handler. 
That is, that the 404 should be executed as a cgi is gone (of course, it
works if I comment out the lines above from the 000-default and restart
and ask for something that isn't there).  The error.log says "attempt to
serve directory" so it is not looking for the index.html file in the
dir.  So I'm thinking that all subsequent handlers are not being
invoked, or else that I am just clueless (I suspect that latter!).

I have the latest Debian, am using Apache 2.0, and got mod_python
pre-packaged (that is, I didn't compile it myself, or anything). 

No doubt I'm doing something dopey, but I usually write by starting with
a small script that works and expanding.  I'm unable to get the small
script to go here.  If someone has a suggestion, I'd be very grateful.

Thanks,
Jim Hefferon

-- 
If there?s one thing we?ve learned, it?s that there is no such thing as
cheap meta-data.  --Tim Bray

From amery at geeks.cl  Fri Jul 15 19:15:10 2005
From: amery at geeks.cl (Alejandro Mery)
Date: Fri Jul 15 19:14:57 2005
Subject: [mod_python] handling virtual files
Message-ID: <42D8437E.5020306@geeks.cl>

Hi, i need some directions :-)

i need to have 'virtual' and real files on a tree, virtual paths have a 
folder on the root which somehow gets the next folder, and again and 
again. mixing different methods. /dir1/dir2/dir3/dir4/file

dir1 is simply a folder, dir2 is 'mounted' for a database, where dir3 is 
  simply a folder, and dir4 is a 'COW' (copy on write) of another directory.

i get the file into temporal location and now i call the file handler 
over the temporal location but thinking its on the virtual one.

but req.filename is read-only.. how should i solve this problem? what do 
you recommend?

TIA,
Alejandro Mery
From grahamd at dscpl.com.au  Fri Jul 15 19:49:42 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul 15 19:49:53 2005
Subject: [mod_python] handling virtual files
In-Reply-To: <42D8437E.5020306@geeks.cl>
References: <42D8437E.5020306@geeks.cl>
Message-ID: <53659ab8ebc9dd201ff9d035cc1f2c0f@dscpl.com.au>


On 16/07/2005, at 9:15 AM, Alejandro Mery wrote:

> Hi, i need some directions :-)
>
> i need to have 'virtual' and real files on a tree, virtual paths have 
> a folder on the root which somehow gets the next folder, and again and 
> again. mixing different methods. /dir1/dir2/dir3/dir4/file
>
> dir1 is simply a folder, dir2 is 'mounted' for a database, where dir3 
> is  simply a folder, and dir4 is a 'COW' (copy on write) of another 
> directory.
>
> i get the file into temporal location and now i call the file handler 
> over the temporal location but thinking its on the virtual one.
>
> but req.filename is read-only.. how should i solve this problem? what 
> do you recommend?

In mod_python 3.X, req.filename can be modified. It was read only
in mod_python 2.7 though.

What base handler were you thinking of using, were you thinking
of starting with something like mod_python.publisher or writing
your own handlers from scratch?

In respect of req.filename, its use becomes limited in a system
where you have virtual directory concepts, or where you want to
store the physical files somewhere else besides the actual document
tree and have a proxy handler which serves them up. This is because
req.filename is set based on what physical files Apache is able
to identify and thus if the files are elsewhere or map to a virtual
resource, it by itself doesn't help much. Thus, you still need to
go off and do your own interpretation of req.path_info to identify
the actual virtual resource.

Anyway, that you feel you need to modify req.filename sounds like
you have in mind a scheme like the WSGI middlware stack where
middlware components can modify things like the script name and
path info to reflect how much of the URI has been processed and
also automatically remap it as necessary to support operation
of nested middleware components. This componentised approach can
certainly make it easier to implement more complex systems where
there is a mix of physical and virtual resources. You might thus
want to consider using WSGI on top of mod_python to make use of that
top of model. Alternatively, I have been working on similar stuff
for mod_python for a while, even before knowing that WSGI was doing
a similar thing, but want I am doing is still in a slightly volatile
state. If you are interested though, we can take the discussion
off list.....

Graham 

From grahamd at dscpl.com.au  Fri Jul 15 20:28:57 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul 15 20:29:02 2005
Subject: [mod_python] PostReadRequestHandler
In-Reply-To: <1121457009.30663.35.camel@joshua.smcvt.edu>
References: <1121457009.30663.35.camel@joshua.smcvt.edu>
Message-ID: <0ed7f851448c771aa60809e2de0f1d26@dscpl.com.au>


On 16/07/2005, at 5:50 AM, Jim Hefferon wrote:

> Instead, when I restart apache, it gives me a 404 every time, and every
> time sends me a copy of the cgi program that is the 404 error handler.
> That is, that the 404 should be executed as a cgi is gone (of course, 
> it
> works if I comment out the lines above from the 000-default and restart
> and ask for something that isn't there).  The error.log says "attempt 
> to
> serve directory" so it is not looking for the index.html file in the
> dir.  So I'm thinking that all subsequent handlers are not being
> invoked, or else that I am just clueless (I suspect that latter!).

When you use SetHandler to enable mod_python, it effectively disables 
the
execution of other high level handlers. This is a problem when you are
using PythonHandler to generate content for some requests and declining
others. For example, if you wanted ".php" files to be treated normally
they will not.

In your case, you aren't using PythonHandler and it isn't actually
necessary to use SetHandler or AddHandler to enable mod_python as that
is only required if you are specifying PythonHandler for content phase.
It isn't necessary when you are only defining handlers for other phases.
 From memory this isn't obvious from documentation and I only even
stumbled across it by accident. I just hope my memory is correct. :-)

Thus, comment out SetHandler and try:

   #SetHandler mod_python
   PythonPath "sys.path+['/dir/containing/py/file']"
   PythonPostReadRequestHandler filename
   PythonDebug On

If you were using PythonHandler for some content delivery, the only way
of ensuring other high level handlers run properly, is to disable the
SetHandler for those extension types. For example, you might have:

   SetHandler mod_python
   PythonHandler filename

   <Files *.php>
   SetHandler None
   </Files>

   <Files *.cgi>
   SetHandler None
   </Files>

Graham

From grahamd at dscpl.com.au  Sat Jul 16 00:18:11 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 16 00:18:29 2005
Subject: [mod_python] handling virtual files
In-Reply-To: <53659ab8ebc9dd201ff9d035cc1f2c0f@dscpl.com.au>
References: <42D8437E.5020306@geeks.cl>
	<53659ab8ebc9dd201ff9d035cc1f2c0f@dscpl.com.au>
Message-ID: <fa7a45e9872dd2b75e1dd90c7ea9c1d3@dscpl.com.au>

You might also look at:

   http://www.boddie.org.uk/python/WebStack.html

Embodies the same idea of componentised middleware and can host
on top of mod_python.

Graham

On 16/07/2005, at 9:49 AM, Graham Dumpleton wrote:

>
> On 16/07/2005, at 9:15 AM, Alejandro Mery wrote:
>
>> Hi, i need some directions :-)
>>
>> i need to have 'virtual' and real files on a tree, virtual paths have 
>> a folder on the root which somehow gets the next folder, and again 
>> and again. mixing different methods. /dir1/dir2/dir3/dir4/file
>>
>> dir1 is simply a folder, dir2 is 'mounted' for a database, where dir3 
>> is  simply a folder, and dir4 is a 'COW' (copy on write) of another 
>> directory.
>>
>> i get the file into temporal location and now i call the file handler 
>> over the temporal location but thinking its on the virtual one.
>>
>> but req.filename is read-only.. how should i solve this problem? what 
>> do you recommend?
>
> In mod_python 3.X, req.filename can be modified. It was read only
> in mod_python 2.7 though.
>
> What base handler were you thinking of using, were you thinking
> of starting with something like mod_python.publisher or writing
> your own handlers from scratch?
>
> In respect of req.filename, its use becomes limited in a system
> where you have virtual directory concepts, or where you want to
> store the physical files somewhere else besides the actual document
> tree and have a proxy handler which serves them up. This is because
> req.filename is set based on what physical files Apache is able
> to identify and thus if the files are elsewhere or map to a virtual
> resource, it by itself doesn't help much. Thus, you still need to
> go off and do your own interpretation of req.path_info to identify
> the actual virtual resource.
>
> Anyway, that you feel you need to modify req.filename sounds like
> you have in mind a scheme like the WSGI middlware stack where
> middlware components can modify things like the script name and
> path info to reflect how much of the URI has been processed and
> also automatically remap it as necessary to support operation
> of nested middleware components. This componentised approach can
> certainly make it easier to implement more complex systems where
> there is a mix of physical and virtual resources. You might thus
> want to consider using WSGI on top of mod_python to make use of that
> top of model. Alternatively, I have been working on similar stuff
> for mod_python for a while, even before knowing that WSGI was doing
> a similar thing, but want I am doing is still in a slightly volatile
> state. If you are interested though, we can take the discussion
> off list.....
>
> Graham
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mamading at gmail.com  Sat Jul 16 06:48:44 2005
From: mamading at gmail.com (Mamading Ceesay)
Date: Sat Jul 16 06:48:48 2005
Subject: [mod_python] Templating Systems
In-Reply-To: <42D48825.3000304@commandprompt.com>
References: <1121128876.2170.77.camel@localhost>
	<1121217450.2170.88.camel@localhost>
	<42D48825.3000304@commandprompt.com>
Message-ID: <57a9359705071603486a149a45@mail.gmail.com>

On 13/07/05, Joshua D. Drake <jd@commandprompt.com> wrote:
> 
> What I really want, is something like Smarty (smarty.php.net) for
> mod_python. Any thoughts?
> 

The newly-arrived Django framework supports mod_python and has a
Smarty-like templating system
http://www.djangoproject.com/documentation/templates/

-- 
Mamading Ceesay

A Letter To The Terrorists, From London
http://www.lnreview.co.uk/news/005167.php

From wouter at squirrel-systems.com  Sat Jul 16 07:27:51 2005
From: wouter at squirrel-systems.com (Wouter van Marle)
Date: Sat Jul 16 07:28:09 2005
Subject: [mod_python] mod_python startup error
Message-ID: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>

Hi all,

After an upgrade to Mandrake 10.2, mod_python shows the following error:

Mod_python error: "PythonHandler mod_python.publisher"


Traceback (most recent call last):

  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
    result = object(req)

  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 98, in handler
    path=[path])

  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 454, in import_module
    f, p, d = imp.find_module(parts[i], path)

ImportError: No module named index


>From my address bar I can see that this is before the very first page
(an html page that redirects to the python based content and thereby
changes the url in the address bar). Any idea what's going wrong here?

The software, from rpm packages:
apache2-2.0.53-9mdk
apache2-mod_python-2.0.53_3.1.4-4mdk
python-base-2.4.1-2mdk
python-2.4.1-2mdk

Wouter.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050716/4b5ea192/attachment.html
From grahamd at dscpl.com.au  Sat Jul 16 07:41:46 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 16 07:42:39 2005
Subject: [mod_python] mod_python startup error
In-Reply-To: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
References: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
Message-ID: <b918ba563da38a6dd7126572c0550596@dscpl.com.au>

Have you specified:

   PythonHandler mod_python.publisher

within a <Directory> directive or in a .htaccess file?

If you haven't and you instead put it at global scope or within a
<Location> directive, you can have such problems because PythonPath
will not be automatically extended with the name of the directory
for which PythonHandler is specified.

Alternatively, are you setting PythonPath explicitly in any way?
Setting PythonPath explicitly can also override the automatic addition
of the PythonHandler directive to PythonPath and again module will
not be able to be found.

You might want to post the snippet of Apache configuration where you
setup use of mod_python. There is no need to send the whole Apache
configuration, just the relevant bit, ensuring though you show any
context it is set within, such as <Location>, <Directory> when it
is appropriate.

Graham

On 16/07/2005, at 9:27 PM, Wouter van Marle wrote:

>  Hi all,
>
>  After an upgrade to Mandrake 10.2, mod_python shows the following 
> error:
>
>  Mod_python error: "PythonHandler mod_python.publisher"
>
> Traceback (most recent call last):
>
>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 
> 299, in HandlerDispatch
>     result = object(req)
>
>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", 
> line 98, in handler
>     path=[path])
>
>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 
> 454, in import_module
>     f, p, d = imp.find_module(parts[i], path)
>
> ImportError: No module named index
>
>
>  >From my address bar I can see that this is before the very first 
> page (an html page that redirects to the python based content and 
> thereby changes the url in the address bar). Any idea what's going 
> wrong here?
>
>  The software, from rpm packages:
>  apache2-2.0.53-9mdk
>  apache2-mod_python-2.0.53_3.1.4-4mdk
>  python-base-2.4.1-2mdk
>  python-2.4.1-2mdk
>
>  Wouter. _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From wouter at squirrel-systems.com  Sat Jul 16 08:09:57 2005
From: wouter at squirrel-systems.com (Wouter van Marle)
Date: Sat Jul 16 08:10:04 2005
Subject: [mod_python] mod_python startup error
In-Reply-To: <b918ba563da38a6dd7126572c0550596@dscpl.com.au>
References: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
	<b918ba563da38a6dd7126572c0550596@dscpl.com.au>
Message-ID: <1121515797.9595.14.camel@cm61-18-245-172.hkcable.com.hk>

Graham,

Here the relevant details:

in httpd2.conf one line:

LoadModule python_module        extramodules/mod_python.so


In 16_mod_python.conf:

<Location /python>
    SetHandler python-program
    PythonHandler mod_python.publisher
</Location>

After dinner I'm going to look into this more! This is the current
setup.

Wouter.

On Sat, 2005-07-16 at 21:41 +1000, Graham Dumpleton wrote:
> Have you specified:
> 
>    PythonHandler mod_python.publisher
> 
> within a <Directory> directive or in a .htaccess file?
> 
> If you haven't and you instead put it at global scope or within a
> <Location> directive, you can have such problems because PythonPath
> will not be automatically extended with the name of the directory
> for which PythonHandler is specified.
> 
> Alternatively, are you setting PythonPath explicitly in any way?
> Setting PythonPath explicitly can also override the automatic addition
> of the PythonHandler directive to PythonPath and again module will
> not be able to be found.
> 
> You might want to post the snippet of Apache configuration where you
> setup use of mod_python. There is no need to send the whole Apache
> configuration, just the relevant bit, ensuring though you show any
> context it is set within, such as <Location>, <Directory> when it
> is appropriate.
> 
> Graham
> 
> On 16/07/2005, at 9:27 PM, Wouter van Marle wrote:
> 
> >  Hi all,
> >
> >  After an upgrade to Mandrake 10.2, mod_python shows the following 
> > error:
> >
> >  Mod_python error: "PythonHandler mod_python.publisher"
> >
> > Traceback (most recent call last):
> >
> >   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 
> > 299, in HandlerDispatch
> >     result = object(req)
> >
> >   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", 
> > line 98, in handler
> >     path=[path])
> >
> >   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 
> > 454, in import_module
> >     f, p, d = imp.find_module(parts[i], path)
> >
> > ImportError: No module named index
> >
> >
> >  >From my address bar I can see that this is before the very first 
> > page (an html page that redirects to the python based content and 
> > thereby changes the url in the address bar). Any idea what's going 
> > wrong here?
> >
> >  The software, from rpm packages:
> >  apache2-2.0.53-9mdk
> >  apache2-mod_python-2.0.53_3.1.4-4mdk
> >  python-base-2.4.1-2mdk
> >  python-2.4.1-2mdk
> >
> >  Wouter. _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> 
> 

From grahamd at dscpl.com.au  Sat Jul 16 08:27:08 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 16 08:27:15 2005
Subject: [mod_python] mod_python startup error
In-Reply-To: <1121515797.9595.14.camel@cm61-18-245-172.hkcable.com.hk>
References: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
	<b918ba563da38a6dd7126572c0550596@dscpl.com.au>
	<1121515797.9595.14.camel@cm61-18-245-172.hkcable.com.hk>
Message-ID: <b9bd595433a7009dfca39c7f4c39f710@dscpl.com.au>

Presuming that the location '/python' maps to a physical directory
called '/var/www/html/python', try instead using:

   <Directory /var/www/html/python>
   SetHandler python-program
   PythonHandler mod_python.publisher
   </Directory>

When <Location> is used, there is no associated physical directory
and therefore mod_python can't know what directory to add to the
PythonPath (sys.path) for you.

Only problem with this theory as I just realised though is that
mod_python.publisher shouldn't be relying on sys.path to load the
actual modules. It will instead explicitly provide the directory
to apache.import_module(). In other words, it should work okay
how you had it.

What was the URL you were using to access the page? Do you know
if "MultiViews" Apache option is enabled or disabled for that
directory?

Graham

On 16/07/2005, at 10:09 PM, Wouter van Marle wrote:

> Graham,
>
> Here the relevant details:
>
> in httpd2.conf one line:
>
> LoadModule python_module        extramodules/mod_python.so
>
>
> In 16_mod_python.conf:
>
> <Location /python>
>     SetHandler python-program
>     PythonHandler mod_python.publisher
> </Location>
>
> After dinner I'm going to look into this more! This is the current
> setup.
>
> Wouter.
>
> On Sat, 2005-07-16 at 21:41 +1000, Graham Dumpleton wrote:
>> Have you specified:
>>
>>    PythonHandler mod_python.publisher
>>
>> within a <Directory> directive or in a .htaccess file?
>>
>> If you haven't and you instead put it at global scope or within a
>> <Location> directive, you can have such problems because PythonPath
>> will not be automatically extended with the name of the directory
>> for which PythonHandler is specified.
>>
>> Alternatively, are you setting PythonPath explicitly in any way?
>> Setting PythonPath explicitly can also override the automatic addition
>> of the PythonHandler directive to PythonPath and again module will
>> not be able to be found.
>>
>> You might want to post the snippet of Apache configuration where you
>> setup use of mod_python. There is no need to send the whole Apache
>> configuration, just the relevant bit, ensuring though you show any
>> context it is set within, such as <Location>, <Directory> when it
>> is appropriate.
>>
>> Graham
>>
>> On 16/07/2005, at 9:27 PM, Wouter van Marle wrote:
>>
>>>  Hi all,
>>>
>>>  After an upgrade to Mandrake 10.2, mod_python shows the following
>>> error:
>>>
>>>  Mod_python error: "PythonHandler mod_python.publisher"
>>>
>>> Traceback (most recent call last):
>>>
>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line
>>> 299, in HandlerDispatch
>>>     result = object(req)
>>>
>>>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
>>> line 98, in handler
>>>     path=[path])
>>>
>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line
>>> 454, in import_module
>>>     f, p, d = imp.find_module(parts[i], path)
>>>
>>> ImportError: No module named index
>>>
>>>
>>>> From my address bar I can see that this is before the very first
>>> page (an html page that redirects to the python based content and
>>> thereby changes the url in the address bar). Any idea what's going
>>> wrong here?
>>>
>>>  The software, from rpm packages:
>>>  apache2-2.0.53-9mdk
>>>  apache2-mod_python-2.0.53_3.1.4-4mdk
>>>  python-base-2.4.1-2mdk
>>>  python-2.4.1-2mdk
>>>
>>>  Wouter. _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>

From amery at geeks.cl  Sat Jul 16 10:07:08 2005
From: amery at geeks.cl (Alejandro Mery)
Date: Sat Jul 16 10:07:09 2005
Subject: [mod_python] handling virtual files
In-Reply-To: <53659ab8ebc9dd201ff9d035cc1f2c0f@dscpl.com.au>
References: <42D8437E.5020306@geeks.cl> <53659ab8ebc9dd201ff9d035cc1f2c0f@ds
	cpl.com.au>
Message-ID: <42D9148C.7060203@geeks.cl>


> In mod_python 3.X, req.filename can be modified. It was read only
> in mod_python 2.7 though.

nice :-)

> What base handler were you thinking of using, were you thinking
> of starting with something like mod_python.publisher or writing
> your own handlers from scratch?

my own PythonHandler-s from scratch. I want to write handlers for the 
different kind of folders and for the different kind of file, but 
keeping file handlers also usable as direct handlers. for example a 
handler to render dir/foo.xmi as png and dir/foo.xmi?height=200 with 
that fixed height and scaling. or html from .tex files, with 
foo.txt?pdf=yes&papersize=letter options even if files are real or not.
i mean, to be called by folder handler or directly by apache.

> In respect of req.filename, its use becomes limited in a system
> where you have virtual directory concepts, or where you want to
> store the physical files somewhere else besides the actual document
> tree and have a proxy handler which serves them up. This is because
> req.filename is set based on what physical files Apache is able
> to identify and thus if the files are elsewhere or map to a virtual
> resource, it by itself doesn't help much. Thus, you still need to
> go off and do your own interpretation of req.path_info to identify
> the actual virtual resource.

yes, my folders are handling req.path_info recursively but i don't know 
how fake files for the file handlers. what do you recommend? to use a 
different Handler 'stage' (i.e. different that PythonHandler)?

> Anyway, that you feel you need to modify req.filename sounds like
> you have in mind a scheme like the WSGI middlware stack where
> middlware components can modify things like the script name and
> path info to reflect how much of the URI has been processed and
> also automatically remap it as necessary to support operation
> of nested middleware components. This componentised approach can
> certainly make it easier to implement more complex systems where
> there is a mix of physical and virtual resources. You might thus
> want to consider using WSGI on top of mod_python to make use of that
> top of model. Alternatively, I have been working on similar stuff
> for mod_python for a while, even before knowing that WSGI was doing
> a similar thing, but want I am doing is still in a slightly volatile
> state. If you are interested though, we can take the discussion
> off list.....

i have nothing serious written or designed yet, if you think i need WSGI 
lets go there :)

Regards,
Alejandro Mery
From ochipepe at gmx.net  Sat Jul 16 11:29:18 2005
From: ochipepe at gmx.net (Alexandre F. Santos)
Date: Sat Jul 16 11:29:23 2005
Subject: [mod_python] Re: [mod python] Fwd: mod python configuration problem
References: <f5f03c4c9cb918f2dd97a4bc1209d1e4@dscpl.com.au>
Message-ID: <12144.1121527758@www30.gmx.net>

Hello,

I finally got the admin to do some of the stuff Graham suggested to try to
find what is not working in mod_python (always gives error 500 while trying
to access a .py file):

1 - Checking that mod_python is running:

> .... To know for sure that the Apache DSO module for
> mod_python has been installed, you need to sight the startup line in
> Apache log file for it. Ie., something like:
> 
>    [Tue Feb 01 16:08:21 2005] [notice] Apache/2.0.51 (Unix)
>      mod_python/3.1.3 Python/2.3 configured -- resuming normal operations

Searching through his logs, the admin only found "-- resuming normal
operations" at startup but no mention of mod_python. He mentions that this
could be due to the fact that he wrote

ServerTokens Prod
ServerSignature Off

in the general Apache configuration.

So basically it's not proven that mod_python is running... Is there any way
of checking it without restarting the server?

2 - Checking that the Apache conf allows defining handlers in a .htaccess
file:

>    ... the main Apache configuration may not 
> be enabled
>    so as to allow you to specify Apache handlers in a ".htaccess" file. 
> To enable
>    this facility, edit your main Apache configuration file and add in an
>    appropriate location:
> 
>      <Directory /some/directory>
>      AllowOverride FileInfo
>      </Directory>
> 
> but it may be possible that the lack of the AllowOverride for FileInfo 
> could
> also perhaps result in an internal server error response. If this is 
> the case,
> accessing "hello.txt" should yield the error as well and you'll need to 
> get
> the AllowOverride option enabled for your directory.

I could access hello.txt without any problems

As for the AllowOverride FileInfo, the admin says that's ok, and the folders
containing the user accessible space even have AllowOverride All

3 - log error message while accessing a .py file:


> Unfortunately this leaves a horrid set of possibilities where even what 
> is in
> the Apache error log may not help. This is because for certain 500 
> errors
> internal to mod_python when trying to initially process your request, it
> either doesn't log anything at all, or logs it to stderr but doesn't 
> flush
> it properly meaning that it doesn't appear in the Apache logs until 
> Apache is
> next shutdown/restarted. Both these cases have been dealt with for the 
> next
> version of mod_python, but you are going to have to contend with them.

The admin tells me that accessing a .py file (causing a 500 error) does not
issue a python related error message.

I guess from here on the next step is to find a way to check that mod_python
is working. I hope there's a way to do that without asking the admin to
restart apache (he's been very cooperative, but I think that's rather
abusive).

Thanks for the help,

Alex

-- 
5 GB Mailbox, 50 FreeSMS http://www.gmx.net/de/go/promail
+++ GMX - die erste Adresse f�r Mail, Message, More +++
From wouter at squirrel-systems.com  Sat Jul 16 12:06:48 2005
From: wouter at squirrel-systems.com (Wouter van Marle)
Date: Sat Jul 16 12:06:55 2005
Subject: [mod_python] mod_python startup error
In-Reply-To: <b9bd595433a7009dfca39c7f4c39f710@dscpl.com.au>
References: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
	<b918ba563da38a6dd7126572c0550596@dscpl.com.au>
	<1121515797.9595.14.camel@cm61-18-245-172.hkcable.com.hk>
	<b9bd595433a7009dfca39c7f4c39f710@dscpl.com.au>
Message-ID: <1121530009.9595.24.camel@cm61-18-245-172.hkcable.com.hk>

Graham,

Thanks for the quick replies.
Your suggestion with a complete path indeed didn't change anything.
Where/what is that module 'index' by the way? I can not find it.

Directory structure:
/var/www/html is the server root
/var/www/html/python contains all the python files
accessing the file:
http://localhost/
which should call index.html, which contains a redirect
to /python/main.py/index

Regarding MultiViews: that seems to be enabled (I don't know what it is,
I just leave it to the default installation values). In commonhttpd.conf
I have the following:

<Directory />
  Options -All -Multiviews

<Directory /var/www/html>
    Options -Indexes FollowSymLinks MultiViews

Wouter.

On Sat, 2005-07-16 at 22:27 +1000, Graham Dumpleton wrote:
> Presuming that the location '/python' maps to a physical directory
> called '/var/www/html/python', try instead using:
> 
>    <Directory /var/www/html/python>
>    SetHandler python-program
>    PythonHandler mod_python.publisher
>    </Directory>
> 
> When <Location> is used, there is no associated physical directory
> and therefore mod_python can't know what directory to add to the
> PythonPath (sys.path) for you.
> 
> Only problem with this theory as I just realised though is that
> mod_python.publisher shouldn't be relying on sys.path to load the
> actual modules. It will instead explicitly provide the directory
> to apache.import_module(). In other words, it should work okay
> how you had it.
> 
> What was the URL you were using to access the page? Do you know
> if "MultiViews" Apache option is enabled or disabled for that
> directory?
> 
> Graham
> 
> On 16/07/2005, at 10:09 PM, Wouter van Marle wrote:
> 
> > Graham,
> >
> > Here the relevant details:
> >
> > in httpd2.conf one line:
> >
> > LoadModule python_module        extramodules/mod_python.so
> >
> >
> > In 16_mod_python.conf:
> >
> > <Location /python>
> >     SetHandler python-program
> >     PythonHandler mod_python.publisher
> > </Location>
> >
> > After dinner I'm going to look into this more! This is the current
> > setup.
> >
> > Wouter.
> >
> > On Sat, 2005-07-16 at 21:41 +1000, Graham Dumpleton wrote:
> >> Have you specified:
> >>
> >>    PythonHandler mod_python.publisher
> >>
> >> within a <Directory> directive or in a .htaccess file?
> >>
> >> If you haven't and you instead put it at global scope or within a
> >> <Location> directive, you can have such problems because PythonPath
> >> will not be automatically extended with the name of the directory
> >> for which PythonHandler is specified.
> >>
> >> Alternatively, are you setting PythonPath explicitly in any way?
> >> Setting PythonPath explicitly can also override the automatic addition
> >> of the PythonHandler directive to PythonPath and again module will
> >> not be able to be found.
> >>
> >> You might want to post the snippet of Apache configuration where you
> >> setup use of mod_python. There is no need to send the whole Apache
> >> configuration, just the relevant bit, ensuring though you show any
> >> context it is set within, such as <Location>, <Directory> when it
> >> is appropriate.
> >>
> >> Graham
> >>
> >> On 16/07/2005, at 9:27 PM, Wouter van Marle wrote:
> >>
> >>>  Hi all,
> >>>
> >>>  After an upgrade to Mandrake 10.2, mod_python shows the following
> >>> error:
> >>>
> >>>  Mod_python error: "PythonHandler mod_python.publisher"
> >>>
> >>> Traceback (most recent call last):
> >>>
> >>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line
> >>> 299, in HandlerDispatch
> >>>     result = object(req)
> >>>
> >>>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
> >>> line 98, in handler
> >>>     path=[path])
> >>>
> >>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line
> >>> 454, in import_module
> >>>     f, p, d = imp.find_module(parts[i], path)
> >>>
> >>> ImportError: No module named index
> >>>
> >>>
> >>>> From my address bar I can see that this is before the very first
> >>> page (an html page that redirects to the python based content and
> >>> thereby changes the url in the address bar). Any idea what's going
> >>> wrong here?
> >>>
> >>>  The software, from rpm packages:
> >>>  apache2-2.0.53-9mdk
> >>>  apache2-mod_python-2.0.53_3.1.4-4mdk
> >>>  python-base-2.4.1-2mdk
> >>>  python-2.4.1-2mdk
> >>>
> >>>  Wouter. _______________________________________________
> >>> Mod_python mailing list
> >>> Mod_python@modpython.org
> >>> http://mailman.modpython.org/mailman/listinfo/mod_python
> >>
> >>
> 
> 

From grahamd at dscpl.com.au  Sat Jul 16 20:35:33 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 16 20:35:39 2005
Subject: [mod_python] mod_python startup error
In-Reply-To: <1121530009.9595.24.camel@cm61-18-245-172.hkcable.com.hk>
References: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
	<b918ba563da38a6dd7126572c0550596@dscpl.com.au>
	<1121515797.9595.14.camel@cm61-18-245-172.hkcable.com.hk>
	<b9bd595433a7009dfca39c7f4c39f710@dscpl.com.au>
	<1121530009.9595.24.camel@cm61-18-245-172.hkcable.com.hk>
Message-ID: <88ed31ae5e46f82fb0be120525a2ce1a@dscpl.com.au>

You might then be getting hit by this problem then:

   http://issues.apache.org/jira/browse/MODPYTHON-24

Your main.py might have an import error of some form and as a result
the publisher is instead trying to load index.py to find a function
in it called main(). The bug means you see any error in not being
able to find index.py rather than why main.py perhaps failed to load
in the first place.

Suggest that in main.py you do something like the following:

   import sys, traceback
   from mod_python import apache

   try:
     # all your existing code in the module indented

   except:
     
apache.log_error("exception=%r"%traceback.format_tb(sys.exc_info()[2]))
     raise

If the problem is that main.py is experiencing an import error, you
would now be able to see it.

Alternatively, you might be able to rename main.py to index.py and
access it through appropriate URL. Because it is the index.py file,
it might not try and fall through to the index file and you might see
any import error then.

Graham

On 17/07/2005, at 2:06 AM, Wouter van Marle wrote:

> Graham,
>
> Thanks for the quick replies.
> Your suggestion with a complete path indeed didn't change anything.
> Where/what is that module 'index' by the way? I can not find it.
>
> Directory structure:
> /var/www/html is the server root
> /var/www/html/python contains all the python files
> accessing the file:
> http://localhost/
> which should call index.html, which contains a redirect
> to /python/main.py/index
>
> Regarding MultiViews: that seems to be enabled (I don't know what it 
> is,
> I just leave it to the default installation values). In 
> commonhttpd.conf
> I have the following:
>
> <Directory />
>   Options -All -Multiviews
>
> <Directory /var/www/html>
>     Options -Indexes FollowSymLinks MultiViews
>
> Wouter.
>
> On Sat, 2005-07-16 at 22:27 +1000, Graham Dumpleton wrote:
>> Presuming that the location '/python' maps to a physical directory
>> called '/var/www/html/python', try instead using:
>>
>>    <Directory /var/www/html/python>
>>    SetHandler python-program
>>    PythonHandler mod_python.publisher
>>    </Directory>
>>
>> When <Location> is used, there is no associated physical directory
>> and therefore mod_python can't know what directory to add to the
>> PythonPath (sys.path) for you.
>>
>> Only problem with this theory as I just realised though is that
>> mod_python.publisher shouldn't be relying on sys.path to load the
>> actual modules. It will instead explicitly provide the directory
>> to apache.import_module(). In other words, it should work okay
>> how you had it.
>>
>> What was the URL you were using to access the page? Do you know
>> if "MultiViews" Apache option is enabled or disabled for that
>> directory?
>>
>> Graham
>>
>> On 16/07/2005, at 10:09 PM, Wouter van Marle wrote:
>>
>>> Graham,
>>>
>>> Here the relevant details:
>>>
>>> in httpd2.conf one line:
>>>
>>> LoadModule python_module        extramodules/mod_python.so
>>>
>>>
>>> In 16_mod_python.conf:
>>>
>>> <Location /python>
>>>     SetHandler python-program
>>>     PythonHandler mod_python.publisher
>>> </Location>
>>>
>>> After dinner I'm going to look into this more! This is the current
>>> setup.
>>>
>>> Wouter.
>>>
>>> On Sat, 2005-07-16 at 21:41 +1000, Graham Dumpleton wrote:
>>>> Have you specified:
>>>>
>>>>    PythonHandler mod_python.publisher
>>>>
>>>> within a <Directory> directive or in a .htaccess file?
>>>>
>>>> If you haven't and you instead put it at global scope or within a
>>>> <Location> directive, you can have such problems because PythonPath
>>>> will not be automatically extended with the name of the directory
>>>> for which PythonHandler is specified.
>>>>
>>>> Alternatively, are you setting PythonPath explicitly in any way?
>>>> Setting PythonPath explicitly can also override the automatic 
>>>> addition
>>>> of the PythonHandler directive to PythonPath and again module will
>>>> not be able to be found.
>>>>
>>>> You might want to post the snippet of Apache configuration where you
>>>> setup use of mod_python. There is no need to send the whole Apache
>>>> configuration, just the relevant bit, ensuring though you show any
>>>> context it is set within, such as <Location>, <Directory> when it
>>>> is appropriate.
>>>>
>>>> Graham
>>>>
>>>> On 16/07/2005, at 9:27 PM, Wouter van Marle wrote:
>>>>
>>>>>  Hi all,
>>>>>
>>>>>  After an upgrade to Mandrake 10.2, mod_python shows the following
>>>>> error:
>>>>>
>>>>>  Mod_python error: "PythonHandler mod_python.publisher"
>>>>>
>>>>> Traceback (most recent call last):
>>>>>
>>>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", 
>>>>> line
>>>>> 299, in HandlerDispatch
>>>>>     result = object(req)
>>>>>
>>>>>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
>>>>> line 98, in handler
>>>>>     path=[path])
>>>>>
>>>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", 
>>>>> line
>>>>> 454, in import_module
>>>>>     f, p, d = imp.find_module(parts[i], path)
>>>>>
>>>>> ImportError: No module named index
>>>>>
>>>>>
>>>>>> From my address bar I can see that this is before the very first
>>>>> page (an html page that redirects to the python based content and
>>>>> thereby changes the url in the address bar). Any idea what's going
>>>>> wrong here?
>>>>>
>>>>>  The software, from rpm packages:
>>>>>  apache2-2.0.53-9mdk
>>>>>  apache2-mod_python-2.0.53_3.1.4-4mdk
>>>>>  python-base-2.4.1-2mdk
>>>>>  python-2.4.1-2mdk
>>>>>
>>>>>  Wouter. _______________________________________________
>>>>> Mod_python mailing list
>>>>> Mod_python@modpython.org
>>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>
>>>>
>>
>>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grahamd at dscpl.com.au  Sat Jul 16 20:55:37 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 16 20:56:27 2005
Subject: [mod_python] handling virtual files
In-Reply-To: <42D9148C.7060203@geeks.cl>
References: <42D8437E.5020306@geeks.cl> <53659ab8ebc9dd201ff9d035cc1f2c0f@ds
	cpl.com.au> <42D9148C.7060203@geeks.cl>
Message-ID: <e9533445942fa7910c790421eeb36aae@dscpl.com.au>


On 17/07/2005, at 12:07 AM, Alejandro Mery wrote:

>> What base handler were you thinking of using, were you thinking
>> of starting with something like mod_python.publisher or writing
>> your own handlers from scratch?
>
> my own PythonHandler-s from scratch. I want to write handlers for the  
> different kind of folders and for the different kind of file, but  
> keeping file handlers also usable as direct handlers. for example a  
> handler to render dir/foo.xmi as png and dir/foo.xmi?height=200 with  
> that fixed height and scaling. or html from .tex files, with  
> foo.txt?pdf=yes&papersize=letter options even if files are real or  
> not.
> i mean, to be called by folder handler or directly by apache.

If your virtual file is notionally adjacent to an actual physical file,
the quickest way to get something working may be to use Vampire. This
is because Vampire was designed to make this specific sort of thing
very easy.

In Vampire it does dispatching to a Python module associated with a
physical file and can then within that Python module select a handler
based on the extension to the request.

Consider the ".tex" case first. Here you would have "foo.tex" present
and next to it you would create a "foo.py" Python module. In it you  
could
have:

   def handler_html(req):
     # render req.filename as HTML

   def handler_pdf(req,papersize="letter"):
     # render req.filename as PDF

You could have a customised Python module associated with each ".tex"  
file
or, because the process could be the same for all ".tex" files in a  
directory,
you could specify a default handler for ".html" or ".pdf" which is  
triggered
for any matching request against the directory and it would process the  
".tex"
file appropriately.

For an actual example, see:

   http://svn.dscpl.com.au/vampire/trunk/examples/reportlab/
   http://svn.dscpl.com.au/vampire/trunk/examples/reportlab/_handler.py

In this case rather than a ".tex" file as input, it is a ".rml" file
with output being ".pdf".

For another example of this idea of multiple views of a physical
resource, see:

    
http://svn.dscpl.com.au/vampire/trunk/examples/handler/complex_views.py
    
http://svn.dscpl.com.au/vampire/trunk/examples/handler/ 
complex_views.csv

Here there is a physical ".csv" file, but also virtual resource  
handlers in
the associated Python module for returning the data as HTML or tab  
separated
data.

Note how the Python module even has a handler for a ".csv" request so  
that
some checking can be done, with req.sendfile() being used to return the
actual ".csv" data.

You could do something similar for your ".xmi" files, although, it may  
make
sense to have a handler for ".png" which transforms ".xmi" file to PNG  
and
sends the response. Ie., use the appropriate extension type for the top
of content being returned.

> i have nothing serious written or designed yet, if you think i need  
> WSGI lets go there :)

Based on how you describe what you want, you might try Vampire first.  
More
complicated things can still be done with Vampire, but depends on how  
you
want that to work.

BTW, Vampire is available from:

   http://www.dscpl.com.au/projects/vampire

This is not the volatile package I talked of, that is something  
different I
am working on. Vampire is stable, with only known issue being an obscure
thing related to module reloading which you unlikely to run up against  
quickly.

There are various examples included with the source code, including all  
the
above.

Graham

From wouter at squirrel-systems.com  Sun Jul 17 04:47:40 2005
From: wouter at squirrel-systems.com (Wouter van Marle)
Date: Sun Jul 17 04:47:57 2005
Subject: [mod_python] mod_python startup error
In-Reply-To: <88ed31ae5e46f82fb0be120525a2ce1a@dscpl.com.au>
References: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
	<b918ba563da38a6dd7126572c0550596@dscpl.com.au>
	<1121515797.9595.14.camel@cm61-18-245-172.hkcable.com.hk>
	<b9bd595433a7009dfca39c7f4c39f710@dscpl.com.au>
	<1121530009.9595.24.camel@cm61-18-245-172.hkcable.com.hk>
	<88ed31ae5e46f82fb0be120525a2ce1a@dscpl.com.au>
Message-ID: <1121590060.9595.38.camel@cm61-18-245-172.hkcable.com.hk>

As test, I've removed all the python content of the site. I've a file
index.html that just displays "hello world!". And I still have the same
error! Now it's getting really weird. The index.shtml file as supplied
by the apache installation gives the same error. URL used was
http://localhost/index.html and http://localhost/index.shtml.

Then the try/except thing as you suggested, this basically the same
result as the error message on the screen.

However, I just found that when typing
http://localhost/python/main.py/home directly in the address bar, the
site is displayed. Without the images, and without the css based layout,
files which for some reason are tried imported as python modules. I get
error messages in error.log such as:
[notice] mod_python: (Re)importing module 'main.css' with path set to
'['/var/www/html']'
followed a bit later by:
[client 127.0.0.1] PythonHandler mod_python.publisher: ImportError: No
module named css, referer: http://localhost/python/main.py/home

Similar results with the .png images!
The referer is indeed the script/function that calls the psp.run()
function to display the page. It seems my apache tries to import every
single file as if it is a python module, unless it is passed directly to
apache through the req.write() method.

So time to start looking very hard again at my apache configuration... 

Wouter.

On Sun, 2005-07-17 at 10:35 +1000, Graham Dumpleton wrote:
> You might then be getting hit by this problem then:
> 
>    http://issues.apache.org/jira/browse/MODPYTHON-24
> 
> Your main.py might have an import error of some form and as a result
> the publisher is instead trying to load index.py to find a function
> in it called main(). The bug means you see any error in not being
> able to find index.py rather than why main.py perhaps failed to load
> in the first place.
> 
> Suggest that in main.py you do something like the following:
> 
>    import sys, traceback
>    from mod_python import apache
> 
>    try:
>      # all your existing code in the module indented
> 
>    except:
>      
> apache.log_error("exception=%r"%traceback.format_tb(sys.exc_info()[2]))
>      raise
> 
> If the problem is that main.py is experiencing an import error, you
> would now be able to see it.
> 
> Alternatively, you might be able to rename main.py to index.py and
> access it through appropriate URL. Because it is the index.py file,
> it might not try and fall through to the index file and you might see
> any import error then.
> 
> Graham
> 
> On 17/07/2005, at 2:06 AM, Wouter van Marle wrote:
> 
> > Graham,
> >
> > Thanks for the quick replies.
> > Your suggestion with a complete path indeed didn't change anything.
> > Where/what is that module 'index' by the way? I can not find it.
> >
> > Directory structure:
> > /var/www/html is the server root
> > /var/www/html/python contains all the python files
> > accessing the file:
> > http://localhost/
> > which should call index.html, which contains a redirect
> > to /python/main.py/index
> >
> > Regarding MultiViews: that seems to be enabled (I don't know what it 
> > is,
> > I just leave it to the default installation values). In 
> > commonhttpd.conf
> > I have the following:
> >
> > <Directory />
> >   Options -All -Multiviews
> >
> > <Directory /var/www/html>
> >     Options -Indexes FollowSymLinks MultiViews
> >
> > Wouter.
> >
> > On Sat, 2005-07-16 at 22:27 +1000, Graham Dumpleton wrote:
> >> Presuming that the location '/python' maps to a physical directory
> >> called '/var/www/html/python', try instead using:
> >>
> >>    <Directory /var/www/html/python>
> >>    SetHandler python-program
> >>    PythonHandler mod_python.publisher
> >>    </Directory>
> >>
> >> When <Location> is used, there is no associated physical directory
> >> and therefore mod_python can't know what directory to add to the
> >> PythonPath (sys.path) for you.
> >>
> >> Only problem with this theory as I just realised though is that
> >> mod_python.publisher shouldn't be relying on sys.path to load the
> >> actual modules. It will instead explicitly provide the directory
> >> to apache.import_module(). In other words, it should work okay
> >> how you had it.
> >>
> >> What was the URL you were using to access the page? Do you know
> >> if "MultiViews" Apache option is enabled or disabled for that
> >> directory?
> >>
> >> Graham
> >>
> >> On 16/07/2005, at 10:09 PM, Wouter van Marle wrote:
> >>
> >>> Graham,
> >>>
> >>> Here the relevant details:
> >>>
> >>> in httpd2.conf one line:
> >>>
> >>> LoadModule python_module        extramodules/mod_python.so
> >>>
> >>>
> >>> In 16_mod_python.conf:
> >>>
> >>> <Location /python>
> >>>     SetHandler python-program
> >>>     PythonHandler mod_python.publisher
> >>> </Location>
> >>>
> >>> After dinner I'm going to look into this more! This is the current
> >>> setup.
> >>>
> >>> Wouter.
> >>>
> >>> On Sat, 2005-07-16 at 21:41 +1000, Graham Dumpleton wrote:
> >>>> Have you specified:
> >>>>
> >>>>    PythonHandler mod_python.publisher
> >>>>
> >>>> within a <Directory> directive or in a .htaccess file?
> >>>>
> >>>> If you haven't and you instead put it at global scope or within a
> >>>> <Location> directive, you can have such problems because PythonPath
> >>>> will not be automatically extended with the name of the directory
> >>>> for which PythonHandler is specified.
> >>>>
> >>>> Alternatively, are you setting PythonPath explicitly in any way?
> >>>> Setting PythonPath explicitly can also override the automatic 
> >>>> addition
> >>>> of the PythonHandler directive to PythonPath and again module will
> >>>> not be able to be found.
> >>>>
> >>>> You might want to post the snippet of Apache configuration where you
> >>>> setup use of mod_python. There is no need to send the whole Apache
> >>>> configuration, just the relevant bit, ensuring though you show any
> >>>> context it is set within, such as <Location>, <Directory> when it
> >>>> is appropriate.
> >>>>
> >>>> Graham
> >>>>
> >>>> On 16/07/2005, at 9:27 PM, Wouter van Marle wrote:
> >>>>
> >>>>>  Hi all,
> >>>>>
> >>>>>  After an upgrade to Mandrake 10.2, mod_python shows the following
> >>>>> error:
> >>>>>
> >>>>>  Mod_python error: "PythonHandler mod_python.publisher"
> >>>>>
> >>>>> Traceback (most recent call last):
> >>>>>
> >>>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", 
> >>>>> line
> >>>>> 299, in HandlerDispatch
> >>>>>     result = object(req)
> >>>>>
> >>>>>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
> >>>>> line 98, in handler
> >>>>>     path=[path])
> >>>>>
> >>>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", 
> >>>>> line
> >>>>> 454, in import_module
> >>>>>     f, p, d = imp.find_module(parts[i], path)
> >>>>>
> >>>>> ImportError: No module named index
> >>>>>
> >>>>>
> >>>>>> From my address bar I can see that this is before the very first
> >>>>> page (an html page that redirects to the python based content and
> >>>>> thereby changes the url in the address bar). Any idea what's going
> >>>>> wrong here?
> >>>>>
> >>>>>  The software, from rpm packages:
> >>>>>  apache2-2.0.53-9mdk
> >>>>>  apache2-mod_python-2.0.53_3.1.4-4mdk
> >>>>>  python-base-2.4.1-2mdk
> >>>>>  python-2.4.1-2mdk
> >>>>>
> >>>>>  Wouter. _______________________________________________
> >>>>> Mod_python mailing list
> >>>>> Mod_python@modpython.org
> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
> >>>>
> >>>>
> >>
> >>
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> 
> 

From grahamd at dscpl.com.au  Sun Jul 17 04:56:06 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sun Jul 17 04:56:12 2005
Subject: [mod_python] mod_python startup error
In-Reply-To: <1121590060.9595.38.camel@cm61-18-245-172.hkcable.com.hk>
References: <1121513272.9595.4.camel@cm61-18-245-172.hkcable.com.hk>
	<b918ba563da38a6dd7126572c0550596@dscpl.com.au>
	<1121515797.9595.14.camel@cm61-18-245-172.hkcable.com.hk>
	<b9bd595433a7009dfca39c7f4c39f710@dscpl.com.au>
	<1121530009.9595.24.camel@cm61-18-245-172.hkcable.com.hk>
	<88ed31ae5e46f82fb0be120525a2ce1a@dscpl.com.au>
	<1121590060.9595.38.camel@cm61-18-245-172.hkcable.com.hk>
Message-ID: <27988a876a1e221b0aa6bb2111277b01@dscpl.com.au>

Is it all perhaps because you have:

   SetHandler mod_python
   PythonHandler mod_python.publisher

rather than:

   AddHandler mod_python .py
   PythonHandler mod_python.publisher

I had noted you were using SetHandler but presumed you were doing it
for a good reason and that only Python stuff was in the "python"
subdirectory.

If you have other file types in the "python" subdirectory and expect
Apache to serve them up normally, you cant use "SetHandler". You would
need to use "AddHandler" and only have requests with a ".py" extension
served by mod_python.publisher.

Graham

On 17/07/2005, at 6:47 PM, Wouter van Marle wrote:

> As test, I've removed all the python content of the site. I've a file
> index.html that just displays "hello world!". And I still have the same
> error! Now it's getting really weird. The index.shtml file as supplied
> by the apache installation gives the same error. URL used was
> http://localhost/index.html and http://localhost/index.shtml.
>
> Then the try/except thing as you suggested, this basically the same
> result as the error message on the screen.
>
> However, I just found that when typing
> http://localhost/python/main.py/home directly in the address bar, the
> site is displayed. Without the images, and without the css based  
> layout,
> files which for some reason are tried imported as python modules. I get
> error messages in error.log such as:
> [notice] mod_python: (Re)importing module 'main.css' with path set to
> '['/var/www/html']'
> followed a bit later by:
> [client 127.0.0.1] PythonHandler mod_python.publisher: ImportError: No
> module named css, referer: http://localhost/python/main.py/home
>
> Similar results with the .png images!
> The referer is indeed the script/function that calls the psp.run()
> function to display the page. It seems my apache tries to import every
> single file as if it is a python module, unless it is passed directly  
> to
> apache through the req.write() method.
>
> So time to start looking very hard again at my apache configuration...
>
> Wouter.
>
> On Sun, 2005-07-17 at 10:35 +1000, Graham Dumpleton wrote:
>> You might then be getting hit by this problem then:
>>
>>    http://issues.apache.org/jira/browse/MODPYTHON-24
>>
>> Your main.py might have an import error of some form and as a result
>> the publisher is instead trying to load index.py to find a function
>> in it called main(). The bug means you see any error in not being
>> able to find index.py rather than why main.py perhaps failed to load
>> in the first place.
>>
>> Suggest that in main.py you do something like the following:
>>
>>    import sys, traceback
>>    from mod_python import apache
>>
>>    try:
>>      # all your existing code in the module indented
>>
>>    except:
>>
>> apache.log_error("exception=%r"%traceback.format_tb(sys.exc_info()[2]) 
>> )
>>      raise
>>
>> If the problem is that main.py is experiencing an import error, you
>> would now be able to see it.
>>
>> Alternatively, you might be able to rename main.py to index.py and
>> access it through appropriate URL. Because it is the index.py file,
>> it might not try and fall through to the index file and you might see
>> any import error then.
>>
>> Graham
>>
>> On 17/07/2005, at 2:06 AM, Wouter van Marle wrote:
>>
>>> Graham,
>>>
>>> Thanks for the quick replies.
>>> Your suggestion with a complete path indeed didn't change anything.
>>> Where/what is that module 'index' by the way? I can not find it.
>>>
>>> Directory structure:
>>> /var/www/html is the server root
>>> /var/www/html/python contains all the python files
>>> accessing the file:
>>> http://localhost/
>>> which should call index.html, which contains a redirect
>>> to /python/main.py/index
>>>
>>> Regarding MultiViews: that seems to be enabled (I don't know what it
>>> is,
>>> I just leave it to the default installation values). In
>>> commonhttpd.conf
>>> I have the following:
>>>
>>> <Directory />
>>>   Options -All -Multiviews
>>>
>>> <Directory /var/www/html>
>>>     Options -Indexes FollowSymLinks MultiViews
>>>
>>> Wouter.
>>>
>>> On Sat, 2005-07-16 at 22:27 +1000, Graham Dumpleton wrote:
>>>> Presuming that the location '/python' maps to a physical directory
>>>> called '/var/www/html/python', try instead using:
>>>>
>>>>    <Directory /var/www/html/python>
>>>>    SetHandler python-program
>>>>    PythonHandler mod_python.publisher
>>>>    </Directory>
>>>>
>>>> When <Location> is used, there is no associated physical directory
>>>> and therefore mod_python can't know what directory to add to the
>>>> PythonPath (sys.path) for you.
>>>>
>>>> Only problem with this theory as I just realised though is that
>>>> mod_python.publisher shouldn't be relying on sys.path to load the
>>>> actual modules. It will instead explicitly provide the directory
>>>> to apache.import_module(). In other words, it should work okay
>>>> how you had it.
>>>>
>>>> What was the URL you were using to access the page? Do you know
>>>> if "MultiViews" Apache option is enabled or disabled for that
>>>> directory?
>>>>
>>>> Graham
>>>>
>>>> On 16/07/2005, at 10:09 PM, Wouter van Marle wrote:
>>>>
>>>>> Graham,
>>>>>
>>>>> Here the relevant details:
>>>>>
>>>>> in httpd2.conf one line:
>>>>>
>>>>> LoadModule python_module        extramodules/mod_python.so
>>>>>
>>>>>
>>>>> In 16_mod_python.conf:
>>>>>
>>>>> <Location /python>
>>>>>     SetHandler python-program
>>>>>     PythonHandler mod_python.publisher
>>>>> </Location>
>>>>>
>>>>> After dinner I'm going to look into this more! This is the current
>>>>> setup.
>>>>>
>>>>> Wouter.
>>>>>
>>>>> On Sat, 2005-07-16 at 21:41 +1000, Graham Dumpleton wrote:
>>>>>> Have you specified:
>>>>>>
>>>>>>    PythonHandler mod_python.publisher
>>>>>>
>>>>>> within a <Directory> directive or in a .htaccess file?
>>>>>>
>>>>>> If you haven't and you instead put it at global scope or within a
>>>>>> <Location> directive, you can have such problems because  
>>>>>> PythonPath
>>>>>> will not be automatically extended with the name of the directory
>>>>>> for which PythonHandler is specified.
>>>>>>
>>>>>> Alternatively, are you setting PythonPath explicitly in any way?
>>>>>> Setting PythonPath explicitly can also override the automatic
>>>>>> addition
>>>>>> of the PythonHandler directive to PythonPath and again module will
>>>>>> not be able to be found.
>>>>>>
>>>>>> You might want to post the snippet of Apache configuration where  
>>>>>> you
>>>>>> setup use of mod_python. There is no need to send the whole Apache
>>>>>> configuration, just the relevant bit, ensuring though you show any
>>>>>> context it is set within, such as <Location>, <Directory> when it
>>>>>> is appropriate.
>>>>>>
>>>>>> Graham
>>>>>>
>>>>>> On 16/07/2005, at 9:27 PM, Wouter van Marle wrote:
>>>>>>
>>>>>>>  Hi all,
>>>>>>>
>>>>>>>  After an upgrade to Mandrake 10.2, mod_python shows the  
>>>>>>> following
>>>>>>> error:
>>>>>>>
>>>>>>>  Mod_python error: "PythonHandler mod_python.publisher"
>>>>>>>
>>>>>>> Traceback (most recent call last):
>>>>>>>
>>>>>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py",
>>>>>>> line
>>>>>>> 299, in HandlerDispatch
>>>>>>>     result = object(req)
>>>>>>>
>>>>>>>   File  
>>>>>>> "/usr/lib/python2.4/site-packages/mod_python/publisher.py",
>>>>>>> line 98, in handler
>>>>>>>     path=[path])
>>>>>>>
>>>>>>>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py",
>>>>>>> line
>>>>>>> 454, in import_module
>>>>>>>     f, p, d = imp.find_module(parts[i], path)
>>>>>>>
>>>>>>> ImportError: No module named index
>>>>>>>
>>>>>>>
>>>>>>>> From my address bar I can see that this is before the very first
>>>>>>> page (an html page that redirects to the python based content and
>>>>>>> thereby changes the url in the address bar). Any idea what's  
>>>>>>> going
>>>>>>> wrong here?
>>>>>>>
>>>>>>>  The software, from rpm packages:
>>>>>>>  apache2-2.0.53-9mdk
>>>>>>>  apache2-mod_python-2.0.53_3.1.4-4mdk
>>>>>>>  python-base-2.4.1-2mdk
>>>>>>>  python-2.4.1-2mdk
>>>>>>>
>>>>>>>  Wouter. _______________________________________________
>>>>>>> Mod_python mailing list
>>>>>>> Mod_python@modpython.org
>>>>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>>
>>>>>>
>>>>
>>>>
>>>
>>> _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>

From hockeysk8 at gmail.com  Mon Jul 18 18:37:35 2005
From: hockeysk8 at gmail.com (Kevin J. Smith)
Date: Mon Jul 18 18:37:39 2005
Subject: [mod_python] running multiple mod_python apps under one apache
Message-ID: <1ee0630e05071815373f32eaa0@mail.gmail.com>

Hi,

Firstly, my apologies, as I had thought I had previously seen a discussion 
on this topic but for the life of me I could not find it in the list's 
archive.

I am currently trying to run a number of mod_python applications on one 
server but it is starting to be difficult to manage and was always clunky to 
implement. What are the ways to configure apache so that two mod_python 
applications can run under one apache without running into each other?

Currently, if each project has a config file then the last PythonPath 
directive trumps all previous, among other problems that we have worked 
around and if they are running as virtual sites then they must stick to 
unique directories as it is a flat namespace according to mod_python. Is 
there a way to do virtual hosting of mod_python? There is also the 
long-standing problem of having to restart apache when key modifications are 
done to the code otherwise it does not properly re-import the module. 
Therefore, the application owners have to be able to restart apache.

I have looked into the linux vserver project but I thought I saw on this 
list a more contained approach. What are folk's experience with hosting 
multiple mod_python applications on the same box or virtual hosting of 
mod_python.

Cheers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050718/329e83d0/attachment.html
From grahamd at dscpl.com.au  Mon Jul 18 19:51:46 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul 18 19:51:51 2005
Subject: [mod_python] running multiple mod_python apps under one apache
Message-ID: <1121730706.20978@dscpl.user.openhosting.com>

Kevin J. Smith wrote ..
>
> I am currently trying to run a number of mod_python applications on one
> server but it is starting to be difficult to manage and was always clunky
> to 
> implement. What are the ways to configure apache so that two mod_python
> applications can run under one apache without running into each other?

Have a look at the following directives for mod_python:

  PythonInterpreter
  PythonInterpPerDirective

These allow you to assign a separate Python interpreter to each distinct
application in slightly different ways. With each application running in a
distinct interpreter, it is harder for them to intefere with each other.

> There is also the 
> long-standing problem of having to restart apache when key modifications are 
> done to the code otherwise it does not properly re-import the module. 
> Therefore, the application owners have to be able to restart apache.

The module importation system as implemented by mod_python has various
shortcomings. It may perhaps help first to understand some of the issues
with it a bit better if don't understand them already. For that, suggest reading:

  http://www.dscpl.com.au/articles/modpython-002.html
  http://www.dscpl.com.au/articles/modpython-003.html

> Currently, if each project has a config file then the last PythonPath 
> directive trumps all previous, among other problems that we have worked
> around and if they are running as virtual sites then they must stick to
> unique directories as it is a flat namespace according to mod_python. Is
> there a way to do virtual hosting of mod_python?

That there is a flat namespace as you refer to it is a pain, although some on
the list reckon it is quite reasonable, as it is the Python way of doing things.

There has been slow movement on addressing the problems in the module
importing system and the above articles are a part of that process. There
has also been a bit of discussion on the mailing list recently about how it
could actually work:

  http://www.modpython.org/pipermail/mod_python/2005-July/018642.html

The closest you are going to get to a reasonable working solution at the
moment is to perhaps use the Vampire package as a base for applications.
This package provides a improved module importing system which solves
the major problems in the existing system. When used properly, you don't
get the namespace collision problems, and modifying code modules, even
when it isn't a top level handler will still result in the changed module and
anything which depends on it being reloaded.

Your mileage as far as what you can get out of Vampire will vary. If you
are adverse to using anything but the core mod_python system, then it
is likely it will be totally unacceptable and you'll have to mostly put up with
what you have.

FWIW, you can find information on Vampire at:

  http://www.dscpl.com.au/projects/vampire

Note that Vampire isn't a system where you are expected to do things the
Vampire way. With a little bit of extra trickery, you could largely keep what
you have as is with only minor tweaks. These sorts of tricks aren't necessarily
in the documentation though, so if you are interested would need to know
more about how your systems are setup and step you through what changes
to make.

Graham

From grahamd at dscpl.com.au  Mon Jul 18 20:21:07 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Mon Jul 18 20:21:10 2005
Subject: [mod_python] Talk on Vampire (Thursday 21st - Sydney/Australia)
Message-ID: <1121732467.7437@dscpl.user.openhosting.com>

For anyone who may reside in Sydney down here in the land of OZ, I
will be giving a bit of a talk on Vampire this Thursday as part of a
regular local Python users meetup.

The details of where and when are included below. If anyone here
actually manages to get there, I will be covering a bit on a new
project I am working on to replace Vampire. This will be the first
proper public outing of what I am up to on this new project. The
new system is even more componentised and I see it as something
that is simple enough in concept that it might be a good candidate
for inclusion in mod_python itself.

Graham


Alan Green wrote ..
> Date:   Thursday July 21
> Time:   6:00pm-8:30pm, with drinks and food during and after.
> Topics: Graham Dumpleton on The Vampire mod_python extension
>          Paul Fenwick "So you want to start a business?"
> 	
> Place:  James Squires Brewhouse
>          2 The Promenade,
>          King St Wharf
>          Sydney
> Fee:    $0.00
> 
> The Sydney Python meetup group is on this Thursday. The meeting time has
> been brought forward half an hour, and the formal part of the evening 
> will commence promptly at 6:30pm.
> 
> The James Squires Brewhouse managed to book the Python Meetup Group and
> the Perl Mongers in adjoining rooms for the same night. Everybody has 
> promised to be nice and we'll be combining with them to hear from one of
> their Melbourne gurus.
> 
> As always, everybody is welcome.
> 
> 
> Graham Dumpleton, author of Vampire, will be speaking first (6:30-7:30).
> He describes his presentation thusly:
> 
> "Although I'll talk a bit about the motivations behind writing Vampire
> and why this extra layer on top of mod_python is useful, what I want to
> talk about more is what I have learnt from writing Vampire. From that I
> would like to go on to describe a new and better way of doing this same
> thing for mod_python that Vampire attempted to do. This new approach 
> moves even further away from the monolithic framework approach towards
> small building blocks of functionality that can be slotted together to
> build up a web application how you want it and not how some framework 
> dictates you should do it."
> 
> More information on Vampire can be found at 
> http://www.dscpl.com.au/projects/vampire/
> 
> Paul Fenwick of the Melbourne Perl Mongers will also be speaking 
> (7:30-8:30). His talk, "So you want to start a business", will be 
> presented at the SAGE-AU conference later this year, and an abstract can
> be found online at 
> http://www.sage-au.org.au/conf/sage-au2005/speakers.html#fenwickabs
> 
> _______________________________________________
> python-au maillist  -  python-au@starship.python.net
> http://starship.python.net/mailman/listinfo/python-au
From list at joreybump.com  Tue Jul 19 14:28:44 2005
From: list at joreybump.com (Jorey Bump)
Date: Tue Jul 19 14:28:52 2005
Subject: [mod_python] running multiple mod_python apps under one apache
In-Reply-To: <1ee0630e05071815373f32eaa0@mail.gmail.com>
References: <1ee0630e05071815373f32eaa0@mail.gmail.com>
Message-ID: <42DD465C.2060405@joreybump.com>

Kevin J. Smith wrote:

> I have looked into the linux vserver project but I thought I saw on this 
> list a more contained approach.  What are folk's experience with hosting 
> multiple mod_python applications on the same box or virtual hosting of 
> mod_python.

I use mod_python.publisher in a standard name-based virtual host 
environment. My preferred setup is to use the SetHandler directive on a 
single subdirectory within the DocumentRoot (you can also use an Alias 
directory if you prefer the separation), and prefix the PythonPath with 
another directory outside of the DocumentRoot where I store my custom 
modules and packages. I also normally create a data directory outside of 
the DocumentRoot that is writable by the apache user to create, store, 
or manipulate files that should not be accessible by browsers:

/var/www/vhost/example.com/
   - python/
   - data/
   - website/
       - apps/

With this approach, you are less likely to create namespace collisions 
and have an infrastructure that lends itself to better security. Setting 
aside a specific directory for your mod_python apps may resemble CGI, 
but you still get the performance boost of the embedded interpreter. In 
a virtual host container, you would configure mod_python this way:

PythonPath "['/var/www/vhosts/example.com/python'] + sys.path"
<Directory /var/www/vhosts/example.com/website/apps>
    SetHandler python-program
    PythonHandler mod_python.publisher
    PythonDebug On
</Directory>

If you want to scatter your apps around your site, you could use 
AddHandler for your entire DocumentRoot directory, but this requires you 
to use the .py extension in the URL. One trick I have used involves 
using SetHandler in a FilesMatch directive and "registering" each 
*uniquely* named application:

PythonPath "['/var/www/vhost/example.com/python'] + sys.path"
<Directory /var/www/vhost/example.com/website>
   # use FilesMatch to register mod_python applications
   # these are regex strings, so no other file should contain them!!!
   <FilesMatch "whackamole|tron|mpwebmail">
     SetHandler python-program
     PythonHandler mod_python.publisher
     PythonDebug On
   </FilesMatch>
</Directory>

It must be strongly noted that no other resource of any type can share 
the regex strings used in the FilesMatch directive, so the names must be 
sufficiently unique (electronic.html would match the tron entry in this 
example, and get processed by mod_python). While it's tempting to list 
the entire module name (whackamole.py), you'll lose the ability to drop 
the .py extension in URLs. In a variation on this scheme, you invent a 
sufficiently unique string to include only in the names of your 
mod_python apps (xyz in xyzapp.py, appxyz.py, etc.). As an overall 
strategy, this leaves much to be desired, but it does demonstrate that 
finetuning is possible. I *rarely* adopt this technique.

In a name-based virtual hosting environment, a new interpreter is 
created for each virtual host. Therefore, it's best to define the 
PythonPath directive *once* for each virtual host. One virtual host's 
PythonPath will not clobber another's, however, so the structure I 
outlined earlier provides fairly good support for mod_python in a 
name-based virtual host environment.

The remaining issue is the need to restart apache after editing. There 
are no solutions to this as of yet in mod_python.publisher, but an 
alternative is to touch all imported modules. Since that isn't normally 
practical, either, it's very useful to have a staging environment and 
transfer your well-tested code to the production server when it is ready.



From kuzmaionitch at gmail.com  Thu Jul 21 17:48:17 2005
From: kuzmaionitch at gmail.com (Jayson Barr)
Date: Thu Jul 21 17:48:54 2005
Subject: [mod_python] Need help with configuration,
	coudn't find anything to help in the archives
Message-ID: <d31b796505072114484389168c@mail.gmail.com>

Hi,
I am having some configuration problems with mod_python i think.

My system info:
Debian 3.0
Linux Kernel 2.4
Apache 2.0.54
mod_python 3.2.3
Python 2.3.5

I used a .htaccess:
AddHandler python-program .py
PythonHandler mptest
PythonDebug On

mptest.py:
from mod_python import apache

def handler(req):
    req.content_type = 'text/plain'
    req.write('mptest.py\n')
    return apache.OK


Okay, so I get a 500 error in my browser and my server log says that
it can't import mod_python.apache

My first guess was that there was a problem with mod_python
installation.  I had installed it easilly enough, though:
apt-get install libapache2-mod-python2.3

Any help would be extremely appreciated

Thanks,
Jayson Barr
-- 
  @,,@   Jayson Barr~~~
  (------)    jbarr@nmt.edu~~~
( >__< )  (505)-977-5428~~~
^^ ~~ ^^   
NMT Langmuir Lab
801 Leroy Place

From grahamd at dscpl.com.au  Thu Jul 21 18:06:26 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul 21 18:06:37 2005
Subject: [mod_python] Need help with configuration,
	coudn't find anything to help in the archives
In-Reply-To: <d31b796505072114484389168c@mail.gmail.com>
References: <d31b796505072114484389168c@mail.gmail.com>
Message-ID: <39a7d7b9ab1afa3d36f0578ae0e69b95@dscpl.com.au>

To get you going while someone comes up with a suggestion, if
you haven't done so already, have a read of:

   http://www.dscpl.com.au/articles/modpython-001.html

On initial impressions it would look like the version of the
mod_python module being loaded into Apache is looking in the
wrong location for the installed Python part of mod_python.
Ie., the files that would be installed into the site-packages
directory of your Python installation. Alternatively, the files
aren't actually installed anywhere. Try some of the tests for
determining which version of mod_python is present as described
in article above, as that will also tell you if the Python bits
are installed as well.

BTW, mod_python 3.2.3 hasn't been released yet, presume you
meant to say mod_python 3.1.3. :-)

On 22/07/2005, at 7:48 AM, Jayson Barr wrote:

> Hi,
> I am having some configuration problems with mod_python i think.
>
> My system info:
> Debian 3.0
> Linux Kernel 2.4
> Apache 2.0.54
> mod_python 3.2.3
> Python 2.3.5
>
> I used a .htaccess:
> AddHandler python-program .py
> PythonHandler mptest
> PythonDebug On
>
> mptest.py:
> from mod_python import apache
>
> def handler(req):
>     req.content_type = 'text/plain'
>     req.write('mptest.py\n')
>     return apache.OK
>
>
> Okay, so I get a 500 error in my browser and my server log says that
> it can't import mod_python.apache
>
> My first guess was that there was a problem with mod_python
> installation.  I had installed it easilly enough, though:
> apt-get install libapache2-mod-python2.3
>
> Any help would be extremely appreciated
>
> Thanks,
> Jayson Barr
> -- 
>   @,,@   Jayson Barr~~~
>   (------)    jbarr@nmt.edu~~~
> ( >__< )  (505)-977-5428~~~
> ^^ ~~ ^^
> NMT Langmuir Lab
> 801 Leroy Place
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From mhellwig at xs4all.nl  Fri Jul 22 03:47:58 2005
From: mhellwig at xs4all.nl (Martin P. Hellwig)
Date: Fri Jul 22 03:50:10 2005
Subject: [mod_python] Need help with configuration, coudn't find anything
	to help in the archives
In-Reply-To: <d31b796505072114484389168c@mail.gmail.com>
References: <d31b796505072114484389168c@mail.gmail.com>
Message-ID: <42E0A4AE.9060802@xs4all.nl>

Jayson Barr wrote:

>Hi,
>I am having some configuration problems with mod_python i think.
>  
>
<snip config, error loading modpyton.apache>

Could you review your apache.conf or httpd.conf and make sure the 
follwowing line is present in the global environment:
LoadModule python_module libexec/apache2/mod_python.so

Modifying the apache configuration is always followed by restarting the 
apache daemon (httpd)

hth

-- 
mph

From deadwisdom at gmail.com  Fri Jul 22 15:49:03 2005
From: deadwisdom at gmail.com (Brant Harris)
Date: Fri Jul 22 15:49:08 2005
Subject: [mod_python] MySQL-python crashes mod_python
Message-ID: <694c06d605072212498bb7700@mail.gmail.com>

I'm trying to run a django app through mod_python.  When it accesses
the database:
Seg fault!
[Fri Jul 22 14:42:28 2005] [notice] child pid 2117 exit signal
Segmentation fault (11)

But when I use WSGI on the same application, it does fine.  Any idea
what's going on?

Thanks all.

From jg.lists at sympatico.ca  Fri Jul 22 16:38:24 2005
From: jg.lists at sympatico.ca (Jim Gallacher)
Date: Fri Jul 22 16:38:14 2005
Subject: [mod_python] MySQL-python crashes mod_python
In-Reply-To: <694c06d605072212498bb7700@mail.gmail.com>
References: <694c06d605072212498bb7700@mail.gmail.com>
Message-ID: <42E15940.3090909@sympatico.ca>

Brant Harris wrote:
> I'm trying to run a django app through mod_python.  When it accesses
> the database:
> Seg fault!
> [Fri Jul 22 14:42:28 2005] [notice] child pid 2117 exit signal
> Segmentation fault (11)
> 
> But when I use WSGI on the same application, it does fine.  Any idea
> what's going on?
> 

You are little light on the details here, but I'm guessing it may be 
related to this FAQ:

http://www.modpython.org/FAQ/faqw.py?req=show&file=faq02.013.htp

Regards,
Jim
From dharana at dharana.net  Sat Jul 23 15:18:33 2005
From: dharana at dharana.net (dharana)
Date: Sat Jul 23 15:20:39 2005
Subject: [mod_python] Question about PSP()
Message-ID: <42E29809.4070808@dharana.net>

I have a PSP file witch, when generated, results in an html page with template 
placeholders like ${i18n_something}. I've been looking at psp.py and it seems 
that the only possibility will be to write a custom req object that captures all 
the output. Either that or to not generate output with template placeholders (I 
fear thinking about having to change this).

Do you see a better solution?

-- 
dharana

From dharana at dharana.net  Sat Jul 23 15:35:06 2005
From: dharana at dharana.net (dharana)
Date: Sat Jul 23 15:38:03 2005
Subject: [mod_python] Question about PSP()
In-Reply-To: <42E29809.4070808@dharana.net>
References: <42E29809.4070808@dharana.net>
Message-ID: <42E29BEA.9040600@dharana.net>

btw, trying the req wrapper idea I wrote this:


         from StringIO import StringIO

         class reqwrapper(StringIO):
             def write(self, s, *args):
                 return StringIO.write(self, s)

             def flush(self):
                 pass

         reqwrap = reqwrapper()
         content_file = PSP(reqwrap, string=file_content)
         content_file.run(self.vars)

         logging.getLogger('app').debug('writen output: %s' % reqwrap.read())
	self.req.write(reqwrap.read())


it writtes nothing to either the real req object nor to the logging system. I 
checked both the source of psp.py, requestobject.c and StringIO.py and I can't 
see what I am failing to do.

Thanks in advance,


dharana wrote:
> I have a PSP file witch, when generated, results in an html page with 
> template placeholders like ${i18n_something}. I've been looking at 
> psp.py and it seems that the only possibility will be to write a custom 
> req object that captures all the output. Either that or to not generate 
> output with template placeholders (I fear thinking about having to 
> change this).
> 
> Do you see a better solution?
> 

-- 
dharana

From grahamd at dscpl.com.au  Sat Jul 23 18:36:08 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 23 18:36:55 2005
Subject: [mod_python] Question about PSP()
In-Reply-To: <42E29BEA.9040600@dharana.net>
References: <42E29809.4070808@dharana.net> <42E29BEA.9040600@dharana.net>
Message-ID: <006f2f6db96b3c264d7cde5ff0184e41@dscpl.com.au>

Do you perhaps mean to use:

   reqwrap.getvalue()

instead of:

   reqwrap.read()

Graham

On 24/07/2005, at 5:35 AM, dharana wrote:

> btw, trying the req wrapper idea I wrote this:
>
>
>         from StringIO import StringIO
>
>         class reqwrapper(StringIO):
>             def write(self, s, *args):
>                 return StringIO.write(self, s)
>
>             def flush(self):
>                 pass
>
>         reqwrap = reqwrapper()
>         content_file = PSP(reqwrap, string=file_content)
>         content_file.run(self.vars)
>
>         logging.getLogger('app').debug('writen output: %s' % 
> reqwrap.read())
> 	self.req.write(reqwrap.read())
>
>
> it writtes nothing to either the real req object nor to the logging 
> system. I checked both the source of psp.py, requestobject.c and 
> StringIO.py and I can't see what I am failing to do.
>
> Thanks in advance,
>
>
> dharana wrote:
>> I have a PSP file witch, when generated, results in an html page with 
>> template placeholders like ${i18n_something}. I've been looking at 
>> psp.py and it seems that the only possibility will be to write a 
>> custom req object that captures all the output. Either that or to not 
>> generate output with template placeholders (I fear thinking about 
>> having to change this).
>> Do you see a better solution?
>
> -- 
> dharana
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grahamd at dscpl.com.au  Sat Jul 23 18:52:42 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 23 18:52:56 2005
Subject: [mod_python] Question about PSP()
In-Reply-To: <b71082d8050723154350be15c4@mail.gmail.com>
References: <42E29809.4070808@dharana.net> <42E29BEA.9040600@dharana.net>
	<006f2f6db96b3c264d7cde5ff0184e41@dscpl.com.au>
	<b71082d8050723154350be15c4@mail.gmail.com>
Message-ID: <71a1850c6184d9f176aacfdcf4d8f90e@dscpl.com.au>


On 24/07/2005, at 8:43 AM, Bart wrote:

> On 7/23/05, Graham Dumpleton <grahamd@dscpl.com.au> wrote:
>> Do you perhaps mean to use:
>>
>>    reqwrap.getvalue()
>>
>> instead of:
>>
>>    reqwrap.read()
>>
>
> Can somebody explain to me what read() does since it doesn't read
> out data that is written? I have to say I find this rather 
> counterintuitive
> and have made the mistake a few times before I figured this out.

Read works when you supply the data to constructor of StringIO()
to begin with.

 >>> i=StringIO.StringIO("adsadsad")
 >>> i.read()
'adsadsad'


Graham

From deadwisdom at gmail.com  Mon Jul 25 15:20:17 2005
From: deadwisdom at gmail.com (Brant Harris)
Date: Mon Jul 25 15:20:38 2005
Subject: [mod_python] MySQL-python crashes mod_python
In-Reply-To: <42E15940.3090909@sympatico.ca>
References: <694c06d605072212498bb7700@mail.gmail.com>
	<42E15940.3090909@sympatico.ca>
Message-ID: <694c06d605072512202c9cdee9@mail.gmail.com>

Thank you thank you thank you, this was most deffinately the problem.

On 7/22/05, Jim Gallacher <jg.lists@sympatico.ca> wrote:
> Brant Harris wrote:
> > I'm trying to run a django app through mod_python.  When it accesses
> > the database:
> > Seg fault!
> > [Fri Jul 22 14:42:28 2005] [notice] child pid 2117 exit signal
> > Segmentation fault (11)
> >
> > But when I use WSGI on the same application, it does fine.  Any idea
> > what's going on?
> >
> 
> You are little light on the details here, but I'm guessing it may be
> related to this FAQ:
> 
> http://www.modpython.org/FAQ/faqw.py?req=show&file=faq02.013.htp
> 
> Regards,
> Jim
>

From jimpop at yahoo.com  Tue Jul 26 10:14:10 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Tue Jul 26 10:12:29 2005
Subject: [mod_python] mod_python and python2
Message-ID: <1122387250.5059.7.camel@localhost>

Hi all,

I have an interesting problem and I am not sure if there is an easy fix.

I have an apache 1.3 system with mod_python-2.7.8 on RH 7.3 platform.  I
want to use mod_python for a python2 application, but as I see it
mod_python is using python1.5 (which exists for rpm_python and can't be
removed).  Is there an easy httpd.conf directive to have mod_python use
python2, or is this something that requires rebuilding mod_python? 

Perhaps I am missing something in understanding how mod_python works,
let me know if you need more data.  Thanks,

-Jim P.


From JoshC at usracmfg.com  Tue Jul 26 12:57:02 2005
From: JoshC at usracmfg.com (Joshua Cohen)
Date: Tue Jul 26 12:57:07 2005
Subject: [mod_python] SMTPLIB
Message-ID: <F0E8C229CF67D411AA94009027C6BA1603E8F45D@fnmail1.fncorp.com>

Hi Everyone, 

I have been attempting to make use of the SMTPlib using the following code:

import smtplib
from mod_python import apache 

def maile(req):
    sys.stdout = req
    req.content_type = "text/html" 
    
    fromaddr = "b@b.com"
    toaddrs  = "c@c.com"
    # Add the From: and To: headers at the start!
    msg = ("From: %s\r\nTo: %s\r\n\r\n"
           % (fromaddr, ", ".join(toaddrs)))
    msg = msg + "THIS IS A TEST"
    
    server = smtplib.SMTP('MyServer')
    server.set_debuglevel(1)
    server.sendmail(fromaddr, toaddrs, msg)
    server.quit()

However when I execute the program, I receive the following error:

Mod_python error: "PythonHandler mod_python.publisher"
Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
    result = object(req)
  File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 98, in handler
    path=[path])
  File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 457, in import_module
    module = imp.load_module(mname, f, p, d)
  File "/var/www/html/reports/mail.py", line 1, in ?
    import smtplib
  File "/usr/lib/python2.4/smtplib.py", line 49, in ?
    from email.base64MIME import encode as encode_base64
ImportError: No module named base64MIME

************************************************************************
This module does infact exist and I am able to import it via the command line. Any ideas? 

I am running Fedora Core 4 w/Apache 2, Python 2.4.1, and Mod_Python

Thanks, 
Josh

From mmokrejs at ribosome.natur.cuni.cz  Tue Jul 26 15:46:12 2005
From: mmokrejs at ribosome.natur.cuni.cz (=?windows-1252?Q?Martin_MOKREJ=8A?=)
Date: Tue Jul 26 15:46:23 2005
Subject: [mod_python] SMTPLIB
In-Reply-To: <F0E8C229CF67D411AA94009027C6BA1603E8F45D@fnmail1.fncorp.com>
References: <F0E8C229CF67D411AA94009027C6BA1603E8F45D@fnmail1.fncorp.com>
Message-ID: <42E69304.7010903@ribosome.natur.cuni.cz>

Hi Joshua,

Joshua Cohen wrote:
> Hi Everyone, 
> 
> I have been attempting to make use of the SMTPlib using the following code:
> 
> import smtplib
from email.MIMEText import MIMEText

> from mod_python import apache 
> 
> def maile(req):
>     sys.stdout = req
>     req.content_type = "text/html" 
>     
>     fromaddr = "b@b.com"
>     toaddrs  = "c@c.com"
>     # Add the From: and To: headers at the start!
      msg = MIMEText("Dear colleague")
      msg['Subject'] = "THIS IS A TEST"
      msg['From'] = si.site_email
      msg['To'] = _email
      try:
          # send mail
          server = smtplib.SMTP(MyServer)
          server.sendmail(msg['From'], msg['To'], msg.as_string())
          server.quit()
      except Exception, e:
          dbhandler.rollback(raise_exception = 0)
          error += "Error while sending confirmation email to '" + msg['To'] + "' via SMTP server '" + MyServer + str(e)

>     msg = ("From: %s\r\nTo: %s\r\n\r\n"
>            % (fromaddr, ", ".join(toaddrs)))
>     msg = msg + "THIS IS A TEST"
>     
>     server = smtplib.SMTP('MyServer')
>     server.set_debuglevel(1)
>     server.sendmail(fromaddr, toaddrs, msg)
>     server.quit()
> 
> However when I execute the program, I receive the following error:
> 
> Mod_python error: "PythonHandler mod_python.publisher"
> Traceback (most recent call last):
>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 299, in HandlerDispatch
>     result = object(req)
>   File "/usr/lib/python2.4/site-packages/mod_python/publisher.py", line 98, in handler
>     path=[path])
>   File "/usr/lib/python2.4/site-packages/mod_python/apache.py", line 457, in import_module
>     module = imp.load_module(mname, f, p, d)
>   File "/var/www/html/reports/mail.py", line 1, in ?
>     import smtplib
>   File "/usr/lib/python2.4/smtplib.py", line 49, in ?
>     from email.base64MIME import encode as encode_base64
> ImportError: No module named base64MIME
From grahamd at dscpl.com.au  Tue Jul 26 16:51:14 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Tue Jul 26 16:51:30 2005
Subject: [mod_python] mod_python and python2
In-Reply-To: <1122387250.5059.7.camel@localhost>
References: <1122387250.5059.7.camel@localhost>
Message-ID: <f5d3cec57607b98953c130ca6ded68df@dscpl.com.au>


On 27/07/2005, at 12:14 AM, Jim Popovitch wrote:

> Hi all,
>
> I have an interesting problem and I am not sure if there is an easy 
> fix.
>
> I have an apache 1.3 system with mod_python-2.7.8 on RH 7.3 platform.  
> I
> want to use mod_python for a python2 application, but as I see it
> mod_python is using python1.5 (which exists for rpm_python and can't be
> removed).  Is there an easy httpd.conf directive to have mod_python use
> python2, or is this something that requires rebuilding mod_python?

No, you will need to rebuild mod_python to explicitly use the newer
version of Python.

From jimpop at yahoo.com  Tue Jul 26 17:06:49 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Tue Jul 26 17:06:55 2005
Subject: [mod_python] mod_python and python2
In-Reply-To: <f5d3cec57607b98953c130ca6ded68df@dscpl.com.au>
References: <1122387250.5059.7.camel@localhost>
	<f5d3cec57607b98953c130ca6ded68df@dscpl.com.au>
Message-ID: <1122412009.5125.0.camel@localhost>

On Wed, 2005-07-27 at 06:51 +1000, Graham Dumpleton wrote:
> On 27/07/2005, at 12:14 AM, Jim Popovitch wrote:
> 
> > Hi all,
> >
> > I have an interesting problem and I am not sure if there is an easy 
> > fix.
> >
> > I have an apache 1.3 system with mod_python-2.7.8 on RH 7.3 platform.  
> > I
> > want to use mod_python for a python2 application, but as I see it
> > mod_python is using python1.5 (which exists for rpm_python and can't be
> > removed).  Is there an easy httpd.conf directive to have mod_python use
> > python2, or is this something that requires rebuilding mod_python?
> 
> No, you will need to rebuild mod_python to explicitly use the newer
> version of Python.

Ok, thank you.

-Jim P.

From jimpop at yahoo.com  Tue Jul 26 17:45:22 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Tue Jul 26 17:45:29 2005
Subject: [mod_python] mod_python and python2
In-Reply-To: <f5d3cec57607b98953c130ca6ded68df@dscpl.com.au>
References: <1122387250.5059.7.camel@localhost>
	<f5d3cec57607b98953c130ca6ded68df@dscpl.com.au>
Message-ID: <1122414322.5313.5.camel@localhost>

On Wed, 2005-07-27 at 06:51 +1000, Graham Dumpleton wrote:

> No, you will need to rebuild mod_python to explicitly use the newer
> version of Python.

I checked the FAQ and found an entry on doing this (entry 2.21)  It says
to configure --with-python=/usr/local/bin/python2.4, but I am using
python2.2, so I do this:

  cd mod_python-2.7.11$ 
  ./configure --with-python=/usr/bin/python2.2

Then I get this:
....
   checking for --with-python... ./configure: cd: /usr/bin/python2.2: 
        Not a directory
   /root/BUILD/mod_python-2.7.11
   checking for python... no
   configure: error: python executable not found in /usr/bin/python2.2,
   perhaps you need to build Python first.


I have these rpms installed:

   rpm-python-4.0.4-7x.18
   python-1.5.2-43.73
   python2-2.2.2-11.7.3
   python-tools-1.5.2-43.73
   python2-devel-2.2.2-11.7.3

Do I really need to rebuild python2 from scratch just to get mod_python
working with it?  This seems like more work than necessary.  Is there
perhaps a mod_python2 project somewhere?

Thanks,

-Jim P.


From dagurp at gmail.com  Wed Jul 27 11:29:44 2005
From: dagurp at gmail.com (Dagur Pall Ammendrup)
Date: Wed Jul 27 11:29:51 2005
Subject: [mod_python] mod_python and Django
Message-ID: <42E7A868.6000005@gmail.com>

Hi,

I've been trying to get Django working with mod_python but I've had no
luck so far.

I made a topic about it on the django group
http://groups-beta.google.com/group/django-users/browse_thread/thread/3673f8e6cd813d3b/4dfe5bd3d1a3dbf3

and someone suggested that I should ask you guys since it looks more
like a mod_python problem.

The thing is that I have my project directory in sys.path (and it
appears if I try to print it out in a mod_python test page) but if I try
to import anything I'm told it doesn't exist.

From list at joreybump.com  Wed Jul 27 12:06:27 2005
From: list at joreybump.com (Jorey Bump)
Date: Wed Jul 27 12:06:34 2005
Subject: [mod_python] mod_python and Django
In-Reply-To: <42E7A868.6000005@gmail.com>
References: <42E7A868.6000005@gmail.com>
Message-ID: <42E7B103.2020701@joreybump.com>

Dagur Pall Ammendrup wrote:

> The thing is that I have my project directory in sys.path (and it
> appears if I try to print it out in a mod_python test page) but if I try
> to import anything I'm told it doesn't exist.

Only modules or packages can be imported, so if you're trying to import 
~dagur/workspace/myproject/settings/main.py, it must be packaged:

touch ~dagur/workspace/myproject/__init__.py
touch ~dagur/workspace/myproject/settings/__init__.py

It isn't necessary to put anything in __init__.py, but the files must exist.
From dagurp at gmail.com  Wed Jul 27 12:27:03 2005
From: dagurp at gmail.com (Dagur Pall Ammendrup)
Date: Wed Jul 27 12:27:05 2005
Subject: [mod_python] mod_python and Django
In-Reply-To: <42E7B103.2020701@joreybump.com>
References: <42E7A868.6000005@gmail.com> <42E7B103.2020701@joreybump.com>
Message-ID: <42E7B5D7.90600@gmail.com>

Jorey Bump wrote:

> Dagur Pall Ammendrup wrote:
>
>> The thing is that I have my project directory in sys.path (and it
>> appears if I try to print it out in a mod_python test page) but if I try
>> to import anything I'm told it doesn't exist.
>
>
> Only modules or packages can be imported, so if you're trying to 
> import ~dagur/workspace/myproject/settings/main.py, it must be packaged:
>
> touch ~dagur/workspace/myproject/__init__.py
> touch ~dagur/workspace/myproject/settings/__init__.py
>
> It isn't necessary to put anything in __init__.py, but the files must 
> exist.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

I did do that and I can import it just fine in the console. This is the 
error I get:

EnvironmentError: Could not import DJANGO_SETTINGS_MODULE 'myproject.settings.main' (is it on sys.path?): No module named myproject.settings.main


From list at joreybump.com  Wed Jul 27 12:42:32 2005
From: list at joreybump.com (Jorey Bump)
Date: Wed Jul 27 12:42:40 2005
Subject: [mod_python] mod_python and Django
In-Reply-To: <42E7B5D7.90600@gmail.com>
References: <42E7A868.6000005@gmail.com> <42E7B103.2020701@joreybump.com>
	<42E7B5D7.90600@gmail.com>
Message-ID: <42E7B978.3080201@joreybump.com>

Dagur Pall Ammendrup wrote:

> I did do that and I can import it just fine in the console. This is the 
> error I get:
> 
> EnvironmentError: Could not import DJANGO_SETTINGS_MODULE 
> 'myproject.settings.main' (is it on sys.path?): No module named 
> myproject.settings.main

Try these:

1. Configure mod_python in a <Directory> container, not a <Location> 
container.

2. Import sys in a mod_python test module and display sys.path. Check 
that it contains the path.

3. Be sure to use only one PythonPath directive per interpreter. 
Multiple PythonPath directives tend to clobber each other.
From jg.lists at sympatico.ca  Wed Jul 27 13:07:26 2005
From: jg.lists at sympatico.ca (Jim Gallacher)
Date: Wed Jul 27 13:07:01 2005
Subject: [mod_python] mod_python and Django
In-Reply-To: <42E7A868.6000005@gmail.com>
References: <42E7A868.6000005@gmail.com>
Message-ID: <42E7BF4E.4030709@sympatico.ca>

I've not used Django before (it was on my list of things to 
investigate), but I managed to install it on a Debian system using 
mod_python 3.1.4 without a problem.

The one thing that was not clear from the django installation doc is 
that you need to run `django-admin.py startproject myproject` to create 
the project directory. If you don't run this command then you will get 
the import errors you describe. This is detailed in the django tutorial.

Also FYI, mod_python will import modules from a symlinked directory just 
fine.

Regards,
Jim

Dagur Pall Ammendrup wrote:
> Hi,
> 
> I've been trying to get Django working with mod_python but I've had no
> luck so far.
> 
> I made a topic about it on the django group
> http://groups-beta.google.com/group/django-users/browse_thread/thread/3673f8e6cd813d3b/4dfe5bd3d1a3dbf3 
> 
> 
> and someone suggested that I should ask you guys since it looks more
> like a mod_python problem.
> 
> The thing is that I have my project directory in sys.path (and it
> appears if I try to print it out in a mod_python test page) but if I try
> to import anything I'm told it doesn't exist.
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From dagurp at gmail.com  Thu Jul 28 06:06:53 2005
From: dagurp at gmail.com (Dagur Pall Ammendrup)
Date: Thu Jul 28 06:06:56 2005
Subject: [mod_python] mod_python and Django
In-Reply-To: <42E7B978.3080201@joreybump.com>
References: <42E7A868.6000005@gmail.com>
	<42E7B103.2020701@joreybump.com>	<42E7B5D7.90600@gmail.com>
	<42E7B978.3080201@joreybump.com>
Message-ID: <42E8AE3D.30700@gmail.com>

Jorey Bump wrote:

> Dagur Pall Ammendrup wrote:
>
>> I did do that and I can import it just fine in the console. This is 
>> the error I get:
>>
>> EnvironmentError: Could not import DJANGO_SETTINGS_MODULE 
>> 'myproject.settings.main' (is it on sys.path?): No module named 
>> myproject.settings.main
>
>
> Try these:
>
> 1. Configure mod_python in a <Directory> container, not a <Location> 
> container.
>
> 2. Import sys in a mod_python test module and display sys.path. Check 
> that it contains the path.
>
> 3. Be sure to use only one PythonPath directive per interpreter. 
> Multiple PythonPath directives tend to clobber each other.
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
1. I had no luck with that at all

2. Already did, and the path is there.

3. I tried disabling spyce (which had the only other PythonPath 
directive) but that didn't have any effect either.
From jimpop at yahoo.com  Thu Jul 28 09:29:30 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 09:31:12 2005
Subject: [mod_python] mod_python and python2
In-Reply-To: <f5d3cec57607b98953c130ca6ded68df@dscpl.com.au>
References: <1122387250.5059.7.camel@localhost>
	<f5d3cec57607b98953c130ca6ded68df@dscpl.com.au>
Message-ID: <1122557370.10676.11.camel@localhost>

On Wed, 2005-07-27 at 06:51 +1000, Graham Dumpleton wrote:
> On 27/07/2005, at 12:14 AM, Jim Popovitch wrote:
> 
> > Hi all,
> >
> > I have an interesting problem and I am not sure if there is an easy 
> > fix.
> >
> > I have an apache 1.3 system with mod_python-2.7.8 on RH 7.3 platform.  
> > I
> > want to use mod_python for a python2 application, but as I see it
> > mod_python is using python1.5 (which exists for rpm_python and can't be
> > removed).  Is there an easy httpd.conf directive to have mod_python use
> > python2, or is this something that requires rebuilding mod_python?
> 
> No, you will need to rebuild mod_python to explicitly use the newer
> version of Python.

Any idea on how to do this?  When I run ./configure from mod_python-2.7.11 
it only recognizes python1.5.  How do I force it to use python2?

-Jim P.

From jimpop at yahoo.com  Thu Jul 28 14:56:07 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 14:57:41 2005
Subject: [mod_python] Point of frustration/disappointment
Message-ID: <1122576967.14334.15.camel@localhost>

Folks, I guess I am mostly disappointed in the lack of support for
Python2 in mod_python.  I've been struggling to get mod_python to work
with python2, but there is so much mis-information around that my
process has reached a deadend.

I tried to correct entry 2.21 in the FAQ, it's just plain wrong, but was
unable to make any changes.  I search for a way to edit the FAQ, and ran
across the PSF(?), (another deadend?)  All I want to do is use
mod_python, so I don't think the PSF is a place for me to be involved.

Back to my rant... Why does mod_python ignore Python2?  Here's a similar
email from 2002 that went unanswered:
http://www.modpython.org/pipermail/mod_python/2002-May/012624.html

Is there some low-key politics involved?  Is it time for a mod_python2
project?  I want to help, just unsure if it's even worth it.  I've had
excellent experiences with Python2 and Mailman.  However it is
interesting to note that Mailman avoids mod_python, I wonder if it's
from the same thing I experienced.

-Jim P.

From nick at dd.revealed.net  Thu Jul 28 15:15:40 2005
From: nick at dd.revealed.net (Nick)
Date: Thu Jul 28 15:16:19 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122576967.14334.15.camel@localhost>
References: <1122576967.14334.15.camel@localhost>
Message-ID: <42E92EDC.4020104@dd.revealed.net>

I looked back through the list archive, and you can probably solve your 
compilation problem by soft linking /usr/bin/python to /usr/bin/python2.2 
and running configure without the --with-python config option. 
--with-python doesn't work the way you think it works.  It expects a python 
source path.

Nick

Jim Popovitch wrote:
> Folks, I guess I am mostly disappointed in the lack of support for
> Python2 in mod_python.  I've been struggling to get mod_python to work
> with python2, but there is so much mis-information around that my
> process has reached a deadend.
> 
> I tried to correct entry 2.21 in the FAQ, it's just plain wrong, but was
> unable to make any changes.  I search for a way to edit the FAQ, and ran
> across the PSF(?), (another deadend?)  All I want to do is use
> mod_python, so I don't think the PSF is a place for me to be involved.
> 
> Back to my rant... Why does mod_python ignore Python2?  Here's a similar
> email from 2002 that went unanswered:
> http://www.modpython.org/pipermail/mod_python/2002-May/012624.html
> 
> Is there some low-key politics involved?  Is it time for a mod_python2
> project?  I want to help, just unsure if it's even worth it.  I've had
> excellent experiences with Python2 and Mailman.  However it is
> interesting to note that Mailman avoids mod_python, I wonder if it's
> from the same thing I experienced.
> 
> -Jim P.
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From jgentil at sebistar.net  Thu Jul 28 15:16:17 2005
From: jgentil at sebistar.net (Jon-Pierre Gentil)
Date: Thu Jul 28 15:16:43 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122576967.14334.15.camel@localhost>
References: <1122576967.14334.15.camel@localhost>
Message-ID: <200507281416.17382.jgentil@sebistar.net>

On Thursday 28 July 2005 01:56 pm, Jim Popovitch wrote:

> Folks, I guess I am mostly disappointed in the lack of support for
> Python2 in mod_python.  I've been struggling to get mod_python to work
> with python2, but there is so much mis-information around that my
> process has reached a deadend.

I'm having a hard time understanding what you're talking about with 
"python2"

Are you refering to the Python 2.x series?  If so, it's been running with 
it for a long time.  I use Python 2.3 with mod_python 3.1 in apache2 for 
a long time, and i'm getting ready to upgrade to Python 2.4.
From list at joreybump.com  Thu Jul 28 15:28:32 2005
From: list at joreybump.com (Jorey Bump)
Date: Thu Jul 28 15:28:38 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122576967.14334.15.camel@localhost>
References: <1122576967.14334.15.camel@localhost>
Message-ID: <42E931E0.3040900@joreybump.com>

Jim Popovitch wrote:
> Folks, I guess I am mostly disappointed in the lack of support for
> Python2 in mod_python.  I've been struggling to get mod_python to work
> with python2, but there is so much mis-information around that my
> process has reached a deadend.
> 
> I tried to correct entry 2.21 in the FAQ, it's just plain wrong, but was
> unable to make any changes.  I search for a way to edit the FAQ, and ran
> across the PSF(?), (another deadend?)  All I want to do is use
> mod_python, so I don't think the PSF is a place for me to be involved.
> 
> Back to my rant... Why does mod_python ignore Python2?  Here's a similar
> email from 2002 that went unanswered:
> http://www.modpython.org/pipermail/mod_python/2002-May/012624.html
> 
> Is there some low-key politics involved?  Is it time for a mod_python2
> project?  I want to help, just unsure if it's even worth it.  I've had
> excellent experiences with Python2 and Mailman.  However it is
> interesting to note that Mailman avoids mod_python, I wonder if it's
> from the same thing I experienced.

Of course mod_python supports python 2.x. Judging by your earlier posts, 
you are not reading the appropriate documentation. There is a world of 
difference between mod_python 2.7 and 3.1. For example, in 2.7 
--with-python takes a source directory as its argument, but 3.1 takes 
the location of the python binary you want to use:

http://www.modpython.org/live/mod_python-2.7.8/doc-html/inst-configure.html

Things will be much easier, however, if you upgrade your platform and 
use recent versions of python, mod_python and apache.
From jimpop at yahoo.com  Thu Jul 28 15:44:27 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 15:45:59 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <200507281416.17382.jgentil@sebistar.net>
References: <1122576967.14334.15.camel@localhost>
	<200507281416.17382.jgentil@sebistar.net>
Message-ID: <1122579867.14628.7.camel@localhost>

On Thu, 2005-07-28 at 14:16 -0500, Jon-Pierre Gentil wrote:
> I'm having a hard time understanding what you're talking about with 
> "python2"
> 
> Are you refering to the Python 2.x series?  If so, it's been running with 
> it for a long time.  I use Python 2.3 with mod_python 3.1 in apache2 for 
> a long time, and i'm getting ready to upgrade to Python 2.4.

I am using...

   Apache 1.3
   mod_python 2.7.11 (manual compile)
   python2-2.2.2
   
In order to make mod_python work partway, I had to install
python2-devel-2.2.2 on a production server (you should never 
have to install -devel packages on a production system)

This system also has python-1.5.2 installed on it, which is
/usr/bin/python, due to rpm-python and yum requirements. So,
replacing /usr/bin/python breaks other things, including
production server policies.

Finally, in order to even get mod_python to work, I had to
edit src/Makefile (added -DEAPI)

It just seems plain messy to me, especially in a production
environment.  It's ok to have to do this in a development
only environment.

-Jim P.


From list at joreybump.com  Thu Jul 28 16:11:37 2005
From: list at joreybump.com (Jorey Bump)
Date: Thu Jul 28 16:11:43 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122579867.14628.7.camel@localhost>
References: <1122576967.14334.15.camel@localhost>	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost>
Message-ID: <42E93BF9.5090902@joreybump.com>

Jim Popovitch wrote:

> In order to make mod_python work partway, I had to install
> python2-devel-2.2.2 on a production server (you should never 
> have to install -devel packages on a production system)
> 
> This system also has python-1.5.2 installed on it, which is
> /usr/bin/python, due to rpm-python and yum requirements. So,
> replacing /usr/bin/python breaks other things, including
> production server policies.
> 
> Finally, in order to even get mod_python to work, I had to
> edit src/Makefile (added -DEAPI)
> 
> It just seems plain messy to me, especially in a production
> environment.  It's ok to have to do this in a development
> only environment.

These are all limitations of Red Hat, and have little to do with 
mod_python. Some platforms do not support customization as well as 
others. If you want to compile software from scratch, you need the 
supporting files, which some distributions choose to break out into 
other packages. You can set up a development machine, compile the 
software, then transfer the results to your production environment. But 
when you do this, you are deviating from the philosophy and losing some 
of the benefits of your platform. You are better off upgrading or 
switching platforms.
From amarrero at mitre.org  Thu Jul 28 16:15:48 2005
From: amarrero at mitre.org (Alexis Marrero)
Date: Thu Jul 28 16:15:30 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122579867.14628.7.camel@localhost>
References: <1122576967.14334.15.camel@localhost>
	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost>
Message-ID: <99E369ED-5751-4FE8-8970-0C0D24143715@mitre.org>

Don't know exactly what "python2" is but, I have been using  
mod_python 3.1 with python 2.4, with Apache 2 on OS X (Panther and  
Panther Server), compiled from source. Very happy with the  
configuration.

/amn

On Jul 28, 2005, at 3:44 PM, Jim Popovitch wrote:

> On Thu, 2005-07-28 at 14:16 -0500, Jon-Pierre Gentil wrote:
>
>> I'm having a hard time understanding what you're talking about with
>> "python2"
>>
>> Are you refering to the Python 2.x series?  If so, it's been  
>> running with
>> it for a long time.  I use Python 2.3 with mod_python 3.1 in  
>> apache2 for
>> a long time, and i'm getting ready to upgrade to Python 2.4.
>>
>
> I am using...
>
>    Apache 1.3
>    mod_python 2.7.11 (manual compile)
>    python2-2.2.2
>
> In order to make mod_python work partway, I had to install
> python2-devel-2.2.2 on a production server (you should never
> have to install -devel packages on a production system)
>
> This system also has python-1.5.2 installed on it, which is
> /usr/bin/python, due to rpm-python and yum requirements. So,
> replacing /usr/bin/python breaks other things, including
> production server policies.
>
> Finally, in order to even get mod_python to work, I had to
> edit src/Makefile (added -DEAPI)
>
> It just seems plain messy to me, especially in a production
> environment.  It's ok to have to do this in a development
> only environment.
>
> -Jim P.
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>


From jimpop at yahoo.com  Thu Jul 28 16:56:24 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 16:57:53 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <42E93BF9.5090902@joreybump.com>
References: <1122576967.14334.15.camel@localhost>
	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost> <42E93BF9.5090902@joreybump.com>
Message-ID: <1122584185.15113.10.camel@localhost>

On Thu, 2005-07-28 at 16:11 -0400, Jorey Bump wrote:
> These are all limitations of Red Hat, and have little to do with 
> mod_python. 

They are not exclusive "limitations" of Redhat, and the argument is
easily won when defining the differences between what a secure
production system is and what a development box is.

> Some platforms do not support customization as well as 
> others. 

This isn't a customization issue at all.  It's a compilation and
development issue.  One example: mod_python switched meaning of
--with-python somewhere between here and there (but nobody readily
documented this in such a fashion that even complex goggling would
reveal).  Another:  even though python2 existed at the time, the
mod_python Makefile from v2.7.11 hardcodes /usr/bin/python signifying
that the developers never thought/intended for it to work with python2. 

> If you want to compile software from scratch, you need the 
> supporting files, which some distributions choose to break out into 
> other packages. You can set up a development machine, compile the 
> software, then transfer the results to your production environment. 

That is *exactly* my systems layout.  Dev work is done locally and
released after testing to production systems.  Unfortunately, local dev
work is not proceeding well as previously outlined.

> But when you do this, you are deviating from the philosophy and losing some 
> of the benefits of your platform. You are better off upgrading or 
> switching platforms.

...or the applications.  All I am trying to do is get python and
python2, from the same era, working with mod_python and apache releases
also from the same era.  Latest and "greatest" isn't necessary as
necessary functionality exists in the versions I am using (other than w/
mod_python).

-Jim P.



From jgentil at sebistar.net  Thu Jul 28 17:57:44 2005
From: jgentil at sebistar.net (Jon-Pierre Gentil)
Date: Thu Jul 28 17:58:13 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122584185.15113.10.camel@localhost>
References: <1122576967.14334.15.camel@localhost>
	<42E93BF9.5090902@joreybump.com>
	<1122584185.15113.10.camel@localhost>
Message-ID: <200507281657.44358.jgentil@sebistar.net>

On Thursday 28 July 2005 03:56 pm, Jim Popovitch wrote:

> > These are all limitations of Red Hat, and have little to do with
> > mod_python.
>
> They are not exclusive "limitations" of Redhat, and the argument is
> easily won when defining the differences between what a secure
> production system is and what a development box is.
>

They seem to be limitations of Redhat to me:  My debian machines do not 
need any sort of development libraries at all to run Python 2.3 with 
mod_python 3.1 or 2.7.  
From grahamd at dscpl.com.au  Thu Jul 28 18:07:02 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul 28 18:07:05 2005
Subject: [mod_python] Point of frustration/disappointment
Message-ID: <1122588422.2825@dscpl.user.openhosting.com>


On 29/07/2005, at 4:56 AM, Jim Popovitch wrote:

I tried to correct entry 2.21 in the FAQ, it's just plain wrong, but was
unable to make any changes.  I search for a way to edit the FAQ, and ran
across the PSF(?), (another deadend?)  All I want to do is use
mod_python, so I don't think the PSF is a place for me to be involved.

Ignore comments about PSF, don't put a passwd, it will work anyway.

Back to my rant... Why does mod_python ignore Python2?  Here's a similar
email from 2002 that went unanswered:
http://www.modpython.org/pipermail/mod_python/2002-May/012624.html

I have updated the FAQ entry to:

  Note that this doesn't work for older mod_python-2.X versions
  where --with-python option is used to refer to a source directory.
  For older mod_python versions, try:

    PYTHON_BIN=/usr/local/bin/python2.4 ./configure

Don't guarantee that this will work. Worked it out by spending about
one minute looking at "configure" source code and seeing that this
environment variable existed. Running configure in this way seemed
to do the correct thing, but didn't then compile it.

Sometimes one just has to read the source code to work these things out.

Is there some low-key politics involved?

No, as people have pointed out, you are using an older version and we
are all busy people and don't have all the answers in our head. :-(

Graham

From jimpop at yahoo.com  Thu Jul 28 19:10:39 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 19:12:09 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122588422.2825@dscpl.user.openhosting.com>
References: <1122588422.2825@dscpl.user.openhosting.com>
Message-ID: <1122592239.15618.1.camel@localhost>

On Thu, 2005-07-28 at 18:07 -0400, Graham Dumpleton wrote:
>
> I have updated the FAQ entry to:
> 
>   Note that this doesn't work for older mod_python-2.X versions
>   where --with-python option is used to refer to a source directory.
>   For older mod_python versions, try:
> 
>     PYTHON_BIN=/usr/local/bin/python2.4 ./configure
> 
> Don't guarantee that this will work. 

It doesn't.

$ PYTHON_BIN=/usr/bin/python2.2 ./configure
...
checking for --with-python... no
checking for python... (cached) /usr/bin/python
checking Python version... 1.5
checking whether Python is compiled with thread support... yes
....

-Jim P.

From grahamd at dscpl.com.au  Thu Jul 28 19:20:11 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Thu Jul 28 19:20:24 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122592239.15618.1.camel@localhost>
References: <1122588422.2825@dscpl.user.openhosting.com>
	<1122592239.15618.1.camel@localhost>
Message-ID: <cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>


On 29/07/2005, at 9:10 AM, Jim Popovitch wrote:

> On Thu, 2005-07-28 at 18:07 -0400, Graham Dumpleton wrote:
>>
>> I have updated the FAQ entry to:
>>
>>   Note that this doesn't work for older mod_python-2.X versions
>>   where --with-python option is used to refer to a source directory.
>>   For older mod_python versions, try:
>>
>>     PYTHON_BIN=/usr/local/bin/python2.4 ./configure
>>
>> Don't guarantee that this will work.
>
> It doesn't.
>
> $ PYTHON_BIN=/usr/bin/python2.2 ./configure
> ...
> checking for --with-python... no
> checking for python... (cached) /usr/bin/python
> checking Python version... 1.5
> checking whether Python is compiled with thread support... yes
> ....

Run:

   make distclean

It looks like you are rerunning configure when there is already a
cached set of values from running configure a previous time where
it picked up the version of Python you don't want. Ie., you don't
want to see "(cached)".

From jimpop at yahoo.com  Thu Jul 28 19:21:19 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 19:22:47 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <200507281657.44358.jgentil@sebistar.net>
References: <1122576967.14334.15.camel@localhost>
	<42E93BF9.5090902@joreybump.com> <1122584185.15113.10.camel@localhost>
	<200507281657.44358.jgentil@sebistar.net>
Message-ID: <1122592879.15618.7.camel@localhost>

On Thu, 2005-07-28 at 16:57 -0500, Jon-Pierre Gentil wrote:
> On Thursday 28 July 2005 03:56 pm, Jim Popovitch wrote:
> 
> > > These are all limitations of Red Hat, and have little to do with
> > > mod_python.
> >
> > They are not exclusive "limitations" of Redhat, and the argument is
> > easily won when defining the differences between what a secure
> > production system is and what a development box is.
> >
> 
> They seem to be limitations of Redhat to me:  My debian machines do not 
> need any sort of development libraries at all to run Python 2.3 with 
> mod_python 3.1 or 2.7. 

Debian, while quite large, does not encompass all other distros besides
Redhat.  ;-)  Besides, until last month running Debian stable in a
production environment was a PIA without a lot of foo similar to what I
am going through here now.  I guess my line of thinking differs
considerably from most on this list.  I don't want to replace all
(most?) applications just to make one work.  Apache 1.3 and Python 2.2
work just fine together.  Sadly the problem child is mod_python. :-(

-Jim P.

From jimpop at yahoo.com  Thu Jul 28 19:44:50 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 19:48:15 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>
References: <1122588422.2825@dscpl.user.openhosting.com>
	<1122592239.15618.1.camel@localhost>
	<cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>
Message-ID: <1122594290.15618.25.camel@localhost>

On Fri, 2005-07-29 at 09:20 +1000, Graham Dumpleton wrote:
> On 29/07/2005, at 9:10 AM, Jim Popovitch wrote:
> >
> > It doesn't.
> >
> > $ PYTHON_BIN=/usr/bin/python2.2 ./configure
> > ...
> > checking for --with-python... no
> > checking for python... (cached) /usr/bin/python
> > checking Python version... 1.5
> > checking whether Python is compiled with thread support... yes
> > ....
> 
> Run:
> 
>    make distclean
> 
> It looks like you are rerunning configure when there is already a
> cached set of values from running configure a previous time where
> it picked up the version of Python you don't want. Ie., you don't
> want to see "(cached)".

Ahhh, good eyes.  Yes, this does work then, at least it now configures
cleanly.  Here are my notes:

 systems have:
   apache      1.3  
   python      1.5  (primarily for yum)
   python2     2.2  (exists for Mailman)

 adding:
   mod_python  2.7.8 (from Fedora Legacy RH7.3 repository)
  
   download SRPM mod_python-2.7.8-1.7.3.2.legacy.src.rpm
   manually extract, and manually apply included patches

   configure mod_python with:
   $PYTHON_BIN=/usr/bin/python2.2 ./configure --with-apxs=/usr/sbin/apxs
   
   in order to 'make' the Makefile and other pieces still need
   for /usr/bin/python to be v2.2.  /usr/bin/python is a hard-link
   to /usr/bin/python1.5 (just as /usr/bin/python2 is a hard-link
   to /usr/bin/python2.2). To get around this we replace the existing
   /usr/bin/python with a hard-link to the python2.2 binary.

   $rm -f /usr/bin/python; ln /usr/bin/python2.2 /usr/bin/python

   now we can compile and install successfully.
   
   $make OPT="`/usr/sbin/apxs -q CFLAGS` -fPIC"
   $make install


Hope this helps someone, please email me if it ever does.

-Jim P.

















From jimpop at yahoo.com  Thu Jul 28 20:04:17 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 20:05:46 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122594290.15618.25.camel@localhost>
References: <1122588422.2825@dscpl.user.openhosting.com>
	<1122592239.15618.1.camel@localhost>
	<cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>
	<1122594290.15618.25.camel@localhost>
Message-ID: <1122595457.15618.28.camel@localhost>

On Thu, 2005-07-28 at 19:44 -0400, Jim Popovitch wrote:
> On Fri, 2005-07-29 at 09:20 +1000, Graham Dumpleton wrote:
> > On 29/07/2005, at 9:10 AM, Jim Popovitch wrote:
> > >
> > > It doesn't.
> > >
> > > $ PYTHON_BIN=/usr/bin/python2.2 ./configure
> > > ...
> > > checking for --with-python... no
> > > checking for python... (cached) /usr/bin/python
> > > checking Python version... 1.5
> > > checking whether Python is compiled with thread support... yes
> > > ....
> > 
> > Run:
> > 
> >    make distclean
> > 
> > It looks like you are rerunning configure when there is already a
> > cached set of values from running configure a previous time where
> > it picked up the version of Python you don't want. Ie., you don't
> > want to see "(cached)".
> 
> Ahhh, good eyes.  Yes, this does work then, at least it now configures
> cleanly.  Here are my notes:
> 
>  systems have:
>    apache      1.3  
>    python      1.5  (primarily for yum)
>    python2     2.2  (exists for Mailman)
> 
>  adding:
>    mod_python  2.7.8 (from Fedora Legacy RH7.3 repository)
>   
>    download SRPM mod_python-2.7.8-1.7.3.2.legacy.src.rpm
>    manually extract, and manually apply included patches
> 
>    configure mod_python with:
>    $PYTHON_BIN=/usr/bin/python2.2 ./configure --with-apxs=/usr/sbin/apxs
>    
>    in order to 'make' the Makefile and other pieces still need
>    for /usr/bin/python to be v2.2.  /usr/bin/python is a hard-link
>    to /usr/bin/python1.5 (just as /usr/bin/python2 is a hard-link
>    to /usr/bin/python2.2). To get around this we replace the existing
>    /usr/bin/python with a hard-link to the python2.2 binary.
> 
>    $rm -f /usr/bin/python; ln /usr/bin/python2.2 /usr/bin/python
> 
>    now we can compile and install successfully.
>    
>    $make OPT="`/usr/sbin/apxs -q CFLAGS` -fPIC"
>    $make install
> 

One follow-up comment: don't forget to unlink and
restore /usr/bin/python back to v1.5.

   $rm -f /usr/bin/python; ln /usr/bin/python1.5 /usr/bin/python

-Jim P.



From jimpop at yahoo.com  Thu Jul 28 21:18:10 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 21:19:41 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122594290.15618.25.camel@localhost>
References: <1122588422.2825@dscpl.user.openhosting.com>
	<1122592239.15618.1.camel@localhost>
	<cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>
	<1122594290.15618.25.camel@localhost>
Message-ID: <1122599891.15618.37.camel@localhost>

On Thu, 2005-07-28 at 19:44 -0400, Jim Popovitch wrote:
> On Fri, 2005-07-29 at 09:20 +1000, Graham Dumpleton wrote:
> > On 29/07/2005, at 9:10 AM, Jim Popovitch wrote:
> > >
> > > It doesn't.
> > >
> > > $ PYTHON_BIN=/usr/bin/python2.2 ./configure
> > > ...
> > > checking for --with-python... no
> > > checking for python... (cached) /usr/bin/python
> > > checking Python version... 1.5
> > > checking whether Python is compiled with thread support... yes
> > > ....
> > 
> > Run:
> > 
> >    make distclean
> > 
> > It looks like you are rerunning configure when there is already a
> > cached set of values from running configure a previous time where
> > it picked up the version of Python you don't want. Ie., you don't
> > want to see "(cached)".
> 
> Ahhh, good eyes.  Yes, this does work then, at least it now configures
> cleanly.  Here are my notes:
> 
>  systems have:
>    apache      1.3  
>    python      1.5  (primarily for yum)
>    python2     2.2  (exists for Mailman)
> 
>  adding:
>    mod_python  2.7.8 (from Fedora Legacy RH7.3 repository)
>   
>    download SRPM mod_python-2.7.8-1.7.3.2.legacy.src.rpm
>    manually extract, and manually apply included patches
> 
>    configure mod_python with:
>    $PYTHON_BIN=/usr/bin/python2.2 ./configure --with-apxs=/usr/sbin/apxs
>    
>    in order to 'make' the Makefile and other pieces still need
>    for /usr/bin/python to be v2.2.  /usr/bin/python is a hard-link
>    to /usr/bin/python1.5 (just as /usr/bin/python2 is a hard-link
>    to /usr/bin/python2.2). To get around this we replace the existing
>    /usr/bin/python with a hard-link to the python2.2 binary.
> 
>    $rm -f /usr/bin/python; ln /usr/bin/python2.2 /usr/bin/python
> 
>    now we can compile and install successfully.
>    
>    $make OPT="`/usr/sbin/apxs -q CFLAGS` -fPIC"
>    $make install
> 
> 
> Hope this helps someone, please email me if it ever does.
> 
> -Jim P.
> 

Well, now that it compiles cleanly... guess what...  I've run into the
(in)famous "cannot unmarshal code objects in restricted execution mode"
error for which google reveals years worth of past pleas for mod_python
to address.  I guess I'm not alone in my frustration and disappointment:

http://mail.zope.org/pipermail/zodb-dev/2005-March/008590.html

http://www.modpython.org/pipermail/mod_python/2005-March/017790.html

http://mail.python.org/pipermail/python-list/2002-June/109646.html

http://www.talkaboutprogramming.com/group/comp.lang.python/messages/255375.html

I guess I have a better understanding of restricted execution mode (one
of the primary reasons I stick w/ Py on this new project).
Unfortunately I need more help in understanding what to do.

-Jim P.



From list at joreybump.com  Thu Jul 28 23:05:47 2005
From: list at joreybump.com (Jorey Bump)
Date: Thu Jul 28 23:05:52 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122584185.15113.10.camel@localhost>
References: <1122576967.14334.15.camel@localhost>	
	<200507281416.17382.jgentil@sebistar.net>	
	<1122579867.14628.7.camel@localhost>
	<42E93BF9.5090902@joreybump.com>
	<1122584185.15113.10.camel@localhost>
Message-ID: <42E99D0B.9050308@joreybump.com>

Jim Popovitch wrote:
> On Thu, 2005-07-28 at 16:11 -0400, Jorey Bump wrote:
> 
>>These are all limitations of Red Hat, and have little to do with 
>>mod_python. 
> 
> They are not exclusive "limitations" of Redhat, and the argument is
> easily won when defining the differences between what a secure
> production system is and what a development box is.

The reason you can't easily change to another python on the system is 
because your version of Red Hat absolutely relies on the version of 
python that came with it, hence the limitation. There are other 
platforms that don't install or depend on python by default, so you can 
choose to install whatever version you wish.

>>Some platforms do not support customization as well as 
>>others. 
> 
> This isn't a customization issue at all.  

The Red Hat parts department doesn't support Python 2.x for its model 
7.3. Installing alternate versions of Python will void your warranty. :)

> It's a compilation and
> development issue.  One example: mod_python switched meaning of
> --with-python somewhere between here and there (but nobody readily
> documented this in such a fashion that even complex goggling would
> reveal).  Another:  even though python2 existed at the time, the
> mod_python Makefile from v2.7.11 hardcodes /usr/bin/python signifying
> that the developers never thought/intended for it to work with python2. 

That's because it's meant to work with the *system-wide* version of 
python, which is customarily a link. On my system:

  /usr/bin/python -> python2.3

Perl often uses the same convention. Nobody invokes python2.3 or 
perl5.8.4 directly by name. You will face the same issues trying to 
install mod_perl with a new version of perl. Unfortunately, you don't 
have the option of setting the link to a new binary because some RH 7.3 
components will break.

>>But when you do this, you are deviating from the philosophy and losing some 
>>of the benefits of your platform. You are better off upgrading or 
>>switching platforms.
> 
> ...or the applications.  All I am trying to do is get python and
> python2, from the same era, working with mod_python and apache releases
> also from the same era.  Latest and "greatest" isn't necessary as
> necessary functionality exists in the versions I am using (other than w/
> mod_python).

But for how long? RH 7.3 has been unsupported for quite a while. If 
you've been keeping up with security issues, you would have recompiled 
many components by now. With older systems, you can't escape the law of 
diminishing returns. At some point, you need to upgrade. By your own 
admission, you're at the "point of frustration/disappointment" all a 
result of trying to milk the last drop out of your outdated system. My 
(truly) friendly advice is to move on. Take your pick, Debian will 
apt-get you to a working system in minutes, Slackware will let you 
compile and install any version of mod_python/python/apache you want. 
I'm ridiculously conservative on this list, so believe me when I say I 
don't make this recommendation lightly. :)

From jackdied at jackdied.com  Thu Jul 28 23:08:15 2005
From: jackdied at jackdied.com (Jack Diederich)
Date: Thu Jul 28 23:08:22 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122599891.15618.37.camel@localhost>
References: <1122588422.2825@dscpl.user.openhosting.com>
	<1122592239.15618.1.camel@localhost>
	<cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>
	<1122594290.15618.25.camel@localhost>
	<1122599891.15618.37.camel@localhost>
Message-ID: <20050729030815.GI4840@performancedrivers.com>

On Thu, Jul 28, 2005 at 09:18:10PM -0400, Jim Popovitch wrote:
> 
> Well, now that it compiles cleanly... guess what...  I've run into the
> (in)famous "cannot unmarshal code objects in restricted execution mode"
> error for which google reveals years worth of past pleas for mod_python
> to address.  I guess I'm not alone in my frustration and disappointment:
> 

rexec was completely ineffective and was declared dangerous in the 2.2
timeframe (I think it was yanked in 2.3).  Your ongoing problems are not
the fault of mod_python, they are the fault of inexperience in *nix.
That's OK, but if you could stop channeling your frustration into hostility
on this list it would be appreciated.

-Jack
From jimpop at yahoo.com  Thu Jul 28 23:27:05 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 23:28:35 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <42E99D0B.9050308@joreybump.com>
References: <1122576967.14334.15.camel@localhost>
	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost> <42E93BF9.5090902@joreybump.com>
	<1122584185.15113.10.camel@localhost> <42E99D0B.9050308@joreybump.com>
Message-ID: <1122607625.16470.9.camel@localhost>

On Thu, 2005-07-28 at 23:05 -0400, Jorey Bump wrote:
> Jim Popovitch wrote:
> > On Thu, 2005-07-28 at 16:11 -0400, Jorey Bump wrote:
> > 
> >>These are all limitations of Red Hat, and have little to do with 
> >>mod_python. 
> > 
> > They are not exclusive "limitations" of Redhat, and the argument is
> > easily won when defining the differences between what a secure
> > production system is and what a development box is.
> 
> The reason you can't easily change to another python on the system is 
> because your version of Red Hat absolutely relies on the version of 
> python that came with it, hence the limitation. There are other 
> platforms that don't install or depend on python by default, so you can 
> choose to install whatever version you wish.

Python does support multiple installed versions, hence python and
python2 binaries. 

> >>Some platforms do not support customization as well as 
> >>others. 
> > 
> > This isn't a customization issue at all.  
> 
> The Red Hat parts department doesn't support Python 2.x for its model 
> 7.3. Installing alternate versions of Python will void your warranty. :)
> 
> > It's a compilation and
> > development issue.  One example: mod_python switched meaning of
> > --with-python somewhere between here and there (but nobody readily
> > documented this in such a fashion that even complex goggling would
> > reveal).  Another:  even though python2 existed at the time, the
> > mod_python Makefile from v2.7.11 hardcodes /usr/bin/python signifying
> > that the developers never thought/intended for it to work with python2. 
> 
> That's because it's meant to work with the *system-wide* version of 
> python, which is customarily a link. On my system:
>
>   /usr/bin/python -> python2.3

Mailman works fine w/ /usr/bin/python hard-linked to python1.5, yet
Mailman uses v2.2 solely and without problems.

> 
> Perl often uses the same convention. Nobody invokes python2.3 or 
> perl5.8.4 directly by name. You will face the same issues trying to 
> install mod_perl with a new version of perl. Unfortunately, you don't 
> have the option of setting the link to a new binary because some RH 7.3 
> components will break.

v1.5 is really only necessary for yum, but if you know multi-server
(linux) administration you know you need yum.

> >>But when you do this, you are deviating from the philosophy and losing some 
> >>of the benefits of your platform. You are better off upgrading or 
> >>switching platforms.
> > 
> > ...or the applications.  All I am trying to do is get python and
> > python2, from the same era, working with mod_python and apache releases
> > also from the same era.  Latest and "greatest" isn't necessary as
> > necessary functionality exists in the versions I am using (other than w/
> > mod_python).
> 
> But for how long? RH 7.3 has been unsupported for quite a while. 

Unsupported by who, Redhat?  Sure.  There are other support avenues
however.

> If you've been keeping up with security issues, you would have recompiled 
> many components by now. With older systems, you can't escape the law of 
> diminishing returns. At some point, you need to upgrade. By your own 
> admission, you're at the "point of frustration/disappointment" all a 
> result of trying to milk the last drop out of your outdated system. 

It's not outdated by most standards.  Sure it wasn't compiled yesterday,
but neither were you or I. ;-)  It is not uncommmon for Unix systems to
remain in operation for years at the same version level.  Patching is
important of course, but major system overhaul is rarely necessary
unless upgrading the hardware.  Did you know that Redhat 7.3 and Redhat
Enterprise Linix 2.1 are very similar in kernel and package versions.
Redhat EL 2.1 is still supported by Redhat.  Redhat EL 3.0 is not that
much more different from RHEL 2.1.

> My (truly) friendly advice is to move on. Take your pick, Debian will 
> apt-get you to a working system in minutes, Slackware will let you 
> compile and install any version of mod_python/python/apache you want. 
> I'm ridiculously conservative on this list, so believe me when I say I 
> don't make this recommendation lightly. :)

;-) I run Debian on my laptop, I know what Debian has to offer.  However
in this case swapping out the core OS on production systems just isn't
an overnight decision.

-Jim P.



From jimpop at yahoo.com  Thu Jul 28 23:32:57 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Thu Jul 28 23:34:26 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <20050729030815.GI4840@performancedrivers.com>
References: <1122588422.2825@dscpl.user.openhosting.com>
	<1122592239.15618.1.camel@localhost>
	<cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>
	<1122594290.15618.25.camel@localhost>
	<1122599891.15618.37.camel@localhost>
	<20050729030815.GI4840@performancedrivers.com>
Message-ID: <1122607977.16470.16.camel@localhost>

On Thu, 2005-07-28 at 23:08 -0400, Jack Diederich wrote:
> On Thu, Jul 28, 2005 at 09:18:10PM -0400, Jim Popovitch wrote:
> > 
> > Well, now that it compiles cleanly... guess what...  I've run into the
> > (in)famous "cannot unmarshal code objects in restricted execution mode"
> > error for which google reveals years worth of past pleas for mod_python
> > to address.  I guess I'm not alone in my frustration and disappointment:
> > 
> 
> rexec was completely ineffective and was declared dangerous in the 2.2
> timeframe (I think it was yanked in 2.3).  

v2.3 of mod_python or Python?

> Your ongoing problems are not
> the fault of mod_python, they are the fault of inexperience in *nix.

:-) you don't know me or my (in)experiences other then my well
documented experiences with mod_python which google seems to reveal is
well shared. 

> That's OK, but if you could stop channeling your frustration into hostility
> on this list it would be appreciated.

I have no hostility towards you or mod_python, I would be doing php
right now if I did.  I am however disappointed in what I have seen so
far wrt mod_python.  

-Jim P.

From jg.lists at sympatico.ca  Thu Jul 28 23:57:41 2005
From: jg.lists at sympatico.ca (Jim Gallacher)
Date: Thu Jul 28 23:57:07 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122607977.16470.16.camel@localhost>
References: <1122588422.2825@dscpl.user.openhosting.com>	<1122592239.15618.1.camel@localhost>	<cbe344f1215d236d6f425dcc2284ec9a@dscpl.com.au>	<1122594290.15618.25.camel@localhost>	<1122599891.15618.37.camel@localhost>	<20050729030815.GI4840@performancedrivers.com>
	<1122607977.16470.16.camel@localhost>
Message-ID: <42E9A935.2080606@sympatico.ca>

Jim Popovitch wrote:
> On Thu, 2005-07-28 at 23:08 -0400, Jack Diederich wrote:
> 
>>On Thu, Jul 28, 2005 at 09:18:10PM -0400, Jim Popovitch wrote:
>>
>>>Well, now that it compiles cleanly... guess what...  I've run into the
>>>(in)famous "cannot unmarshal code objects in restricted execution mode"
>>>error for which google reveals years worth of past pleas for mod_python
>>>to address.  I guess I'm not alone in my frustration and disappointment:
>>>
>>
>>rexec was completely ineffective and was declared dangerous in the 2.2
>>timeframe (I think it was yanked in 2.3).  
> 
> 
> v2.3 of mod_python or Python?

Python. See http://www.python.org/doc/2.3/lib/module-rexec.html

Jim G.

> 
>>Your ongoing problems are not
>>the fault of mod_python, they are the fault of inexperience in *nix.
> 
> 
> :-) you don't know me or my (in)experiences other then my well
> documented experiences with mod_python which google seems to reveal is
> well shared. 
> 
> 
>>That's OK, but if you could stop channeling your frustration into hostility
>>on this list it would be appreciated.
> 
> 
> I have no hostility towards you or mod_python, I would be doing php
> right now if I did.  I am however disappointed in what I have seen so
> far wrt mod_python.  
> 
> -Jim P.
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From list at joreybump.com  Fri Jul 29 00:18:19 2005
From: list at joreybump.com (Jorey Bump)
Date: Fri Jul 29 00:18:27 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122607625.16470.9.camel@localhost>
References: <1122576967.14334.15.camel@localhost>	
	<200507281416.17382.jgentil@sebistar.net>	
	<1122579867.14628.7.camel@localhost>
	<42E93BF9.5090902@joreybump.com>	
	<1122584185.15113.10.camel@localhost>
	<42E99D0B.9050308@joreybump.com>
	<1122607625.16470.9.camel@localhost>
Message-ID: <42E9AE0B.3060509@joreybump.com>

Jim Popovitch wrote:

> Python does support multiple installed versions, hence python and
> python2 binaries. 

Noone is saying you can't have multiple versions of python installed. 
But only one of them can be referenced at any given time as 
/usr/bin/python. The fact that your system uses a hard link to 
/usr/bin/python1.5 instead of a soft link doesn't change this. You will 
have a corresponding python<version> binary for every version of python 
you install, and /usr/bin/python will be linked to one of them. It's a 
rare system that doesn't follow this convention.

Switching back and forth is likely to cause problems. To avoid this, you 
will need to properly set configure options, customize the source code, 
  and/or set up a dedicated environment.
From grahamd at dscpl.com.au  Fri Jul 29 00:38:59 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul 29 00:39:16 2005
Subject: [mod_python] Point of frustration/disappointment
Message-ID: <1122611939.8499@dscpl.user.openhosting.com>

Jim Gallacher wrote ..
> Jim Popovitch wrote:
> > On Thu, 2005-07-28 at 23:08 -0400, Jack Diederich wrote:
> > 
> >>On Thu, Jul 28, 2005 at 09:18:10PM -0400, Jim Popovitch wrote:
> >>
> >>>Well, now that it compiles cleanly... guess what...  I've run into the
> >>>(in)famous "cannot unmarshal code objects in restricted execution mode"
> >>>error for which google reveals years worth of past pleas for mod_python
> >>>to address.  I guess I'm not alone in my frustration and disappointment:
> >>>
> >>
> >>rexec was completely ineffective and was declared dangerous in the 2.2
> >>timeframe (I think it was yanked in 2.3).  
> > 
> > 
> > v2.3 of mod_python or Python?
> 
> Python. See http://www.python.org/doc/2.3/lib/module-rexec.html

The sort of error related to "restricted execution mode" is in all
likelihood has got nothing to do with the "rexec" module. The checks for
whether Python thinks it is running in restricted execution mode are
much more low level than that. One can get these sort of problems in
code totally unrelated to the "rexec" module.

I can't remember exactly, but what it all boils down to is that if a
module replaces the "__builtins__" within its own global namespace with
something that is different to "__builtin__.__dict__" then Python will
set an internal flag associated with the execution context for that
thread which says it is running in "restricted execution mode".

When in this mode any code which is executed which can't run in
restricted execution mode will raise some sort of error like above. This
specific error above isn't the only error that can occur.

 I once managed to create a half dozen line program which would
illustrate this in action, but can't find it now and can't remember what
I did to trigger it. :-(

Thus, one possibility is whether the package the problem occurs in
fiddles with __builtins__ at all.

Anyway, if I find the test program which shows the problem or if I can
work it out again, I'll post it.

Graham

From jimpop at yahoo.com  Fri Jul 29 00:39:31 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Fri Jul 29 00:41:02 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <42E9AE0B.3060509@joreybump.com>
References: <1122576967.14334.15.camel@localhost>
	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost> <42E93BF9.5090902@joreybump.com>
	<1122584185.15113.10.camel@localhost> <42E99D0B.9050308@joreybump.com>
	<1122607625.16470.9.camel@localhost> <42E9AE0B.3060509@joreybump.com>
Message-ID: <1122611971.17164.6.camel@localhost>

On Fri, 2005-07-29 at 00:18 -0400, Jorey Bump wrote:
>
> Switching back and forth is likely to cause problems. To avoid this, you 
> will need to properly set configure options, 

mod_python does NOT support this with python2.x.  You can define
$PYTHON_BIN prior to running configure, however configure doesn't
properly set the install section of the Makefile to the correct value
(it leaves it simply as "python").

> customize the source code, 

crude and un-maintainable over time.  

>   and/or set up a dedicated environment.

it I setup a sep dedicated environment for everything I've done in
python.... Seriously, dedicated environments are only necessary when
using mod_python, other Python apps seem to do just fine.

-Jim P.

From grahamd at dscpl.com.au  Fri Jul 29 01:02:20 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul 29 01:02:36 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
Message-ID: <1122613340.24550@dscpl.user.openhosting.com>

Jim Popovitch wrote ..
> On Fri, 2005-07-29 at 00:18 -0400, Jorey Bump wrote:
> >
> > Switching back and forth is likely to cause problems. To avoid this,
> you 
> > will need to properly set configure options, 
> 
> mod_python does NOT support this with python2.x.  You can define
> $PYTHON_BIN prior to running configure, however configure doesn't
> properly set the install section of the Makefile to the correct value
> (it leaves it simply as "python").

Simply edit the generated "Makefile". You don't need to go and change
the links in /usr/bin just to do the build/install. Ie., change the
"Makefile" by hand to read:

  /usr/bin/python2.2 $(PY_STD_LIB)/compileall.py $(PY_STD_LIB)/site-packages/mod_python

or whatever version as a appropriate.

If you think editing generated makefiles is bad, edit "Makefile.in" and change:

  python $(PY_STD_LIB)/compileall.py $(PY_STD_LIB)/site-packages/mod_python

to:

  @PYTHON_BIN@ $(PY_STD_LIB)/compileall.py $(PY_STD_LIB)/site-packages/mod_python

Then rerun configure:

  PYTHON_BIN=/usr/bin/python2.2 ./configure

> > customize the source code, 
> 
> crude and un-maintainable over time.  

Necessary if you insist on using an older version of code when the issue
has been addressed in a newer version.
From list at joreybump.com  Fri Jul 29 01:05:11 2005
From: list at joreybump.com (Jorey Bump)
Date: Fri Jul 29 01:05:32 2005
Subject: Fix SpamAssassin (was Re: [SPAM] Re: [mod_python] Point of
	frustration/disappointment)
In-Reply-To: <200507281657.44358.jgentil@sebistar.net>
References: <1122576967.14334.15.camel@localhost>	<42E93BF9.5090902@joreybump.com>	<1122584185.15113.10.camel@localhost>
	<200507281657.44358.jgentil@sebistar.net>
Message-ID: <42E9B907.5070900@joreybump.com>

Does anyone on this list manage the modpython.org mail server? These 
[SPAM] tags and X-Spam-Status: headers are starting to get annoying. 
I'll volunteer my services, if necessary.
From grahamd at dscpl.com.au  Fri Jul 29 01:10:55 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Fri Jul 29 01:11:02 2005
Subject: Fix SpamAssassin (was Re: [SPAM] Re: [mod_python] Point
	offrustration/disappointment)
Message-ID: <1122613853.30136@dscpl.user.openhosting.com>

Jorey Bump wrote ..
> Does anyone on this list manage the modpython.org mail server? These 
> [SPAM] tags and X-Spam-Status: headers are starting to get annoying. 
> I'll volunteer my services, if necessary.

Are you sure that is the source?

I assumed that one of the very early respondants own spam system
classified it as spam, that they detected this and moved it back to
their inbox then simply replied to that message which their system
had classified as spam. In doing this they didn't fix the subject line
and the spam headers would probably still have been present and
reflected back.

I could be wrong.
From jgentil at sebistar.net  Fri Jul 29 01:19:56 2005
From: jgentil at sebistar.net (Jon-Pierre Gentil)
Date: Fri Jul 29 01:20:25 2005
Subject: Fix SpamAssassin (was Re: [SPAM] Re: [mod_python] Point
	offrustration/disappointment)
In-Reply-To: <1122613853.30136@dscpl.user.openhosting.com>
References: <1122613853.30136@dscpl.user.openhosting.com>
Message-ID: <200507290020.02537.jgentil@sebistar.net>

On Friday 29 July 2005 12:10 am, Graham Dumpleton wrote:

> > Does anyone on this list manage the modpython.org mail server? These
> > [SPAM] tags and X-Spam-Status: headers are starting to get annoying.
> > I'll volunteer my services, if necessary.
>
> Are you sure that is the source?
>
> I assumed that one of the very early respondants own spam system
> classified it as spam, that they detected this and moved it back to
> their inbox then simply replied to that message which their system
> had classified as spam. In doing this they didn't fix the subject line
> and the spam headers would probably still have been present and
> reflected back.

I noticed that my emails are marked as spam.  I run my own mail server and 
I do not mark outbound mail as spam.  :)

Hmm.

-- 
_________________________________________________________

  Jon-Pierre Gentil               PGP: 0x7E1CBA17
  jabber: jgentil@sebistar.net    web: www.sebistar.net
  "If you think education is expensive, try ignorance."
_________________________________________________________ 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 835 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050729/45b74225/attachment.bin
From matt at nipltd.com  Fri Jul 29 03:17:39 2005
From: matt at nipltd.com (Matt Hoskins)
Date: Fri Jul 29 03:17:52 2005
Subject: [mod_python] Re: Point of frustration/disappointment (Jim Popovitch)
In-Reply-To: <200507290329.j6T3T5BX025714@modpython.org>
References: <200507290329.j6T3T5BX025714@modpython.org>
Message-ID: <1122621459.17363.31.camel@triton>

> > The reason you can't easily change to another python on the system is 
> > because your version of Red Hat absolutely relies on the version of 
> > python that came with it, hence the limitation. There are other 
> > platforms that don't install or depend on python by default, so you can 
> > choose to install whatever version you wish.
> 
> Python does support multiple installed versions, hence python and
> python2 binaries. 

The python 2.x binary installed from source on a clean system will get
named with its version number and then hard linked to a binary called
"python" (often in /usr/local/bin). It's Red Hat's choice on that
particular version of their OS to package python 2.x such that the
binary is called python2 because for that platform the primary version
of python is the old 1.x series. They could have called it
"python-the-next-generation" if they wanted and still had their own
packaged applications work using it.

> > 
> > That's because it's meant to work with the *system-wide* version of 
> > python, which is customarily a link. On my system:
> >
> >   /usr/bin/python -> python2.3
> 
> Mailman works fine w/ /usr/bin/python hard-linked to python1.5, yet
> Mailman uses v2.2 solely and without problems.

Mailman is not using the system-wide default version of python if it's
using python v2.2 on a system where the pathed binary of "python" is 1.5
- perhaps mailman's configure script hunts around for alternatively
named python binary files, who could say. The original point still
stands that mod_python, unless told otherwise, picks up the system-wide
default version of python - i.e the binary that's pathed as "python".

> > install mod_perl with a new version of perl. Unfortunately, you don't 
> > have the option of setting the link to a new binary because some RH 7.3 
> > components will break.
> 
> v1.5 is really only necessary for yum, but if you know multi-server
> (linux) administration you know you need yum.

You mean a multi-server rpm-based linux system. If you look at the yum
project page you'll see:
yum 2.3.X - DEVELOPMENT RELEASE, requires repomd repositories: 2.3.4
latest
yum 2.2.X - for python 2.2+ and rpm 4.1.1+ systems, requires repomd
repositories: 2.2.2 latest
yum 2.0.X - for python 2.1+ and rpm 4.1.1-4.3.1 systems: 2.0.8 latest
yum 1.0.X - for python 1.5.2+ and rpm 4.0.4 systems: 1.0.3 latest -
considered obsolete

Looks like yum 1.0.X for python 1.5.2+ is considered by the authors as
obselete. Later versions of yum seem to use (and probably require)
python 2.x

> > But for how long? RH 7.3 has been unsupported for quite a while. 
> 
> Unsupported by who, Redhat?  Sure.  There are other support avenues
> however.

That still doesn't negate the original point that Redhat themselves have
denoted 7.3 as having reached its end of life and is out of support.

> remain in operation for years at the same version level.  Patching is
> important of course, but major system overhaul is rarely necessary
> unless upgrading the hardware.  Did you know that Redhat 7.3 and Redhat
> Enterprise Linix 2.1 are very similar in kernel and package versions.
> Redhat EL 2.1 is still supported by Redhat.  Redhat EL 3.0 is not that
> much more different from RHEL 2.1.

"Not that much more different". The mk-1 miata is very similar to the
mk-2.5 miata - same name, 4 wheels, fuel injected engine, gear stick -
under the hood tho' they're very different. In the computer world where
precision is key small differences can have big impacts, likewise in a
number of other fields.

Given that mod_python is free software produced by volunteers and that
this list has people voluntary giving up their time to try help then
your attitude, Jim, comes across as overly and unnecessarily
abrasive/confrontational and unappreciative. I'm actually amazed at how
helpful some of the list members are when faced with unnecessarily
thorny complaints made to the list.

If you were to use a more recent linux OS you'd probably find that
mod_python comes pre-packaged for it. It sounds like mod_python will
work on the old version of RH that you're running, it just needs a
little more care and fiddling in the installation. The mod_python
authors don't (and shouldn't be expected to) have every OS and OS
version stretching back to the dawn of time, along with package
combination and insallation customizations out there - hence the
installation may occasionally not be seamless on some of the rarer
system combinations.

Anyhow kudos to those on the list that are helpful, particularly Graham.
I'm not disappointed with mod_python - it works very well, and I've
deployed applications successfully which make use of mod_python on
various win32, linux and solaris systems with minimal fuss.

Matt Hoskins


From pd at traxon.com  Fri Jul 29 12:34:24 2005
From: pd at traxon.com (Paul Dale)
Date: Fri Jul 29 03:34:59 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122579867.14628.7.camel@localhost>
References: <1122576967.14334.15.camel@localhost>	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost>
Message-ID: <42EA5A90.9030705@traxon.com>


>In order to make mod_python work partway, I had to install
>python2-devel-2.2.2 on a production server (you should never 
>have to install -devel packages on a production system)
>  
>
>Finally, in order to even get mod_python to work, I had to
>edit src/Makefile (added -DEAPI)
>
>It just seems plain messy to me, especially in a production
>environment.  It's ok to have to do this in a development
>only environment.
>  
>
Jim,
 I am also new to mod_python and have similar been stymied in my 
attempts to find thorough documentation.

However, wearing my system administrator's hat, I have to make a comment 
here. The things you are expressing frustration about  sound like they  
are repercussions of your attempts to compile a module on a production 
system. To really fit with the system administration methodology  you've 
been expressing here you should be compiling and testing on a 
development system, with the proper libraries installed. Once you've got 
it where you want it then you can move only the module over without ever 
needing to install -devel packages on a production system.

Paul
From list at joreybump.com  Fri Jul 29 08:33:01 2005
From: list at joreybump.com (Jorey Bump)
Date: Fri Jul 29 08:33:10 2005
Subject: Fix SpamAssassin (was Re: [SPAM] Re: [mod_python]
	Point	offrustration/disappointment)
In-Reply-To: <200507290020.02537.jgentil@sebistar.net>
References: <1122613853.30136@dscpl.user.openhosting.com>
	<200507290020.02537.jgentil@sebistar.net>
Message-ID: <42EA21FD.2000609@joreybump.com>

Jon-Pierre Gentil wrote:
> On Friday 29 July 2005 12:10 am, Graham Dumpleton wrote:
> 
>>>Does anyone on this list manage the modpython.org mail server? These
>>>[SPAM] tags and X-Spam-Status: headers are starting to get annoying.
>>>I'll volunteer my services, if necessary.
>>
>>Are you sure that is the source?
>>
>>I assumed that one of the very early respondants own spam system
>>classified it as spam, that they detected this and moved it back to
>>their inbox then simply replied to that message which their system
>>had classified as spam. In doing this they didn't fix the subject line
>>and the spam headers would probably still have been present and
>>reflected back.
> 
> I noticed that my emails are marked as spam.  I run my own mail server and 
> I do not mark outbound mail as spam.  :)
> 
> Hmm.

Your residential IP is causing a problem somewhere. But modpython.org's 
spam threshold is set pretty low. Unfortunately, my own version of 
spamassassin rewrote the headers, but I noted that it was 
modpython.org's version that marked it as spam before I released it from 
quarantine. This list has been pretty clean, so only a minor tweak is 
probably needed (discard instead of tag & forward?).
From jimpop at yahoo.com  Fri Jul 29 09:47:58 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Fri Jul 29 09:49:33 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <42EA5A90.9030705@traxon.com>
References: <1122576967.14334.15.camel@localhost>
	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost>  <42EA5A90.9030705@traxon.com>
Message-ID: <1122644878.17430.3.camel@localhost>

On Fri, 2005-07-29 at 09:34 -0700, Paul Dale wrote:
> >In order to make mod_python work partway, I had to install
> >python2-devel-2.2.2 on a production server (you should never 
> >have to install -devel packages on a production system)
> >  
> >
> >Finally, in order to even get mod_python to work, I had to
> >edit src/Makefile (added -DEAPI)
> >
> >It just seems plain messy to me, especially in a production
> >environment.  It's ok to have to do this in a development
> >only environment.
> >  
> >
> Jim,
>  I am also new to mod_python and have similar been stymied in my 
> attempts to find thorough documentation.
> 
> However, wearing my system administrator's hat, I have to make a comment 
> here. The things you are expressing frustration about  sound like they  
> are repercussions of your attempts to compile a module on a production 
> system. To really fit with the system administration methodology  you've 
> been expressing here you should be compiling and testing on a 
> development system, with the proper libraries installed. Once you've got 
> it where you want it then you can move only the module over without ever 
> needing to install -devel packages on a production system.

Hi Paul,

No, I am only experiencing the problems on a development system (which
closely mirrors the production system, but has more flexibility).  The
issue isn't related to what host, as you've should have seen from the
URLs I've posted, multiple people have had similar issues on various
hosts.  The production system runs fine using cgi, attempts to migrate
it to mod_python have just failed miserably.

-Jim P.




From jimpop at yahoo.com  Fri Jul 29 10:15:12 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Fri Jul 29 10:16:51 2005
Subject: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122611939.8499@dscpl.user.openhosting.com>
References: <1122611939.8499@dscpl.user.openhosting.com>
Message-ID: <1122646512.17430.7.camel@localhost>

On Fri, 2005-07-29 at 00:38 -0400, Graham Dumpleton wrote:
> Jim Gallacher wrote ..
> > Python. See http://www.python.org/doc/2.3/lib/module-rexec.html
> 
> The sort of error related to "restricted execution mode" is in all
> likelihood has got nothing to do with the "rexec" module. The checks for
> whether Python thinks it is running in restricted execution mode are
> much more low level than that. One can get these sort of problems in
> code totally unrelated to the "rexec" module.
> 
> I can't remember exactly, but what it all boils down to is that if a
> module replaces the "__builtins__" within its own global namespace with
> something that is different to "__builtin__.__dict__" then Python will
> set an internal flag associated with the execution context for that
> thread which says it is running in "restricted execution mode".
> 
> When in this mode any code which is executed which can't run in
> restricted execution mode will raise some sort of error like above. This
> specific error above isn't the only error that can occur.
> 
>  I once managed to create a half dozen line program which would
> illustrate this in action, but can't find it now and can't remember what
> I did to trigger it. :-(
> 
> Thus, one possibility is whether the package the problem occurs in
> fiddles with __builtins__ at all.
> 
> Anyway, if I find the test program which shows the problem or if I can
> work it out again, I'll post it.

Thanks Graham, it's a very interesting take on the issue.  I'll dig
around a bit in the app and see what it is trying to do.

-Jim P.



From gustavo.cordova at q-voz.com  Fri Jul 29 10:51:13 2005
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jul 29 10:40:25 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122579867.14628.7.camel@localhost>
References: <1122576967.14334.15.camel@localhost>	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost>
Message-ID: <42EA4261.5070105@q-voz.com>

Jim Popovitch wrote:

>On Thu, 2005-07-28 at 14:16 -0500, Jon-Pierre Gentil wrote:
>
>
>I am using...
>
>   Apache 1.3
>   mod_python 2.7.11 (manual compile)
>   python2-2.2.2
>   
>In order to make mod_python work partway, I had to install
>python2-devel-2.2.2 on a production server (you should never 
>have to install -devel packages on a production system)
>
Then take that up with redhat people, not with us, why are you whining 
about redhat policies to us?  Making you install a "-devel" package, 
which contains link libraries and include files for any software you 
want to compile/link against is just plain stupid.

Debian nor Slackware, both of which I've used, don't have this 
limitation: you install "python", and it contains all you need for 
runtime, and all you need to compile against.

And "you should never have to install -devel packages on a production 
server" is absolutely no reason at all.  There's absolutely nothing in a 
-devel package which will make a production server unstable.  And if 
you're worried about someone getting inside the server and then "having 
the tools to build something", well, that's just dumb, by the time the 
cracker's inside the machine it's already way too late.

>This system also has python-1.5.2 installed on it, which is
>/usr/bin/python, due to rpm-python and yum requirements. So,
>replacing /usr/bin/python breaks other things, including
>production server policies.
>
So don't replace it.

"mod_python" doesn't load "/usr/bin/python", so you don't need that file 
while running.  Rename it to something else, symlink your "python2" to 
"/usr/bin/python", build mod_python, restore /usr/bin/python.  Seems 
simple enough.

>Finally, in order to even get mod_python to work, I had to
>edit src/Makefile (added -DEAPI)
>
Modifying a Makefile wasn't categorized as "cruel and unusual" in 
development circles, last time I checked...

>It just seems plain messy to me, especially in a production
>environment.  It's ok to have to do this in a development
>only environment.
>
There you have it, do it in a development environment and copy to your 
production environment.

>-Jim P.
>
Good luck.

-gca
From jimpop at yahoo.com  Fri Jul 29 11:19:06 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Fri Jul 29 11:20:51 2005
Subject: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <42EA4261.5070105@q-voz.com>
References: <1122576967.14334.15.camel@localhost>
	<200507281416.17382.jgentil@sebistar.net>
	<1122579867.14628.7.camel@localhost>  <42EA4261.5070105@q-voz.com>
Message-ID: <1122650346.17430.23.camel@localhost>

On Fri, 2005-07-29 at 09:51 -0500, Gustavo C?rdova Avila wrote:
> Jim Popovitch wrote:
> >In order to make mod_python work partway, I had to install
> >python2-devel-2.2.2 on a production server (you should never 
> >have to install -devel packages on a production system)
> >
> Then take that up with redhat people, not with us, why are you whining 
> about redhat policies to us?  Making you install a "-devel" package, 
> which contains link libraries and include files for any software you 
> want to compile/link against is just plain stupid.

-devel/-dev packages aren't unique to Redhat, my Debian systems have
them too.  So does Solaris, HP-UX and AS400 systems, iirc.

> Debian nor Slackware, both of which I've used, don't have this 
> limitation: you install "python", and it contains all you need for 
> runtime, and all you need to compile against.

That is not true.  In order to compile and install mod_python you need
Apache's axps which is in a -devel on Redhat and -dev on Debian. 

> And "you should never have to install -devel packages on a production 
> server" is absolutely no reason at all.  

Agreed, although some would differ (see your next comment).

> There's absolutely nothing in a -devel package which will make a 
> production server unstable.  

..opps, I can't agree with you here.  -dev/-devel packages contain a LOT
of un-vetted scripts and code that could potentially be exploited.  Look
no further than Microsoft to see tons of examples of this.

> And if 
> you're worried about someone getting inside the server and then "having 
> the tools to build something", well, that's just dumb, by the time the 
> cracker's inside the machine it's already way too late.

You are out in left field a bit on this.  The additional un-tested
(rarely tested?) components present alternative avenues to gain info.
Remember printenv?  Root'ing a box is not the only way to compromise
data.

> >This system also has python-1.5.2 installed on it, which is
> >/usr/bin/python, due to rpm-python and yum requirements. So,
> >replacing /usr/bin/python breaks other things, including
> >production server policies.
> >
> So don't replace it.
> 
> "mod_python" doesn't load "/usr/bin/python", so you don't need that file 
> while running.  Rename it to something else, symlink your "python2" to 
> "/usr/bin/python", build mod_python, restore /usr/bin/python.  Seems 
> simple enough.
> 
> >Finally, in order to even get mod_python to work, I had to
> >edit src/Makefile (added -DEAPI)
> >
> Modifying a Makefile wasn't categorized as "cruel and unusual" in 
> development circles, last time I checked...
> 
> >It just seems plain messy to me, especially in a production
> >environment.  It's ok to have to do this in a development
> >only environment.
> >
> There you have it, do it in a development environment and copy to your 
> production environment.

You are missing my points.  If it is a messy development effort it
become messy to maintain over time, which leads to messy production
systems.  Editing a Makefile, tweaking a script, installing a -devel pkg
are not problems, they are just *more* things to track and carry over
for the next mod_python (in this case) release 6mos, 12mos, 2yrs, etc.

-Jim P.




From jgentil at sebistar.net  Fri Jul 29 14:20:21 2005
From: jgentil at sebistar.net (Jon-Pierre Gentil)
Date: Fri Jul 29 14:21:02 2005
Subject: [SPAM] Re: [SPAM] Re: [mod_python] Point of frustration/disappointment
In-Reply-To: <1122592879.15618.7.camel@localhost>
References: <1122576967.14334.15.camel@localhost>
	<200507281657.44358.jgentil@sebistar.net>
	<1122592879.15618.7.camel@localhost>
Message-ID: <200507291320.35196.jgentil@sebistar.net>

On Thursday 28 July 2005 06:21 pm, Jim Popovitch wrote:

> > They seem to be limitations of Redhat to me:  My debian machines do
> > not need any sort of development libraries at all to run Python 2.3
> > with mod_python 3.1 or 2.7.
>
> Debian, while quite large, does not encompass all other distros besides
> Redhat.  ;-)  Besides, until last month running Debian stable in a
> production environment was a PIA without a lot of foo similar to what I
> am going through here now.  I guess my line of thinking differs
> considerably from most on this list.  I don't want to replace all
> (most?) applications just to make one work.  Apache 1.3 and Python 2.2
> work just fine together.  Sadly the problem child is mod_python. :-(

I was merely citing that Debian does not require any -dev packages to be 
installed in order to use any version of Python with mod_python or 
apache.  You can have any combination of Python 1.5, Python 2.2, Python 
2.3, Python 2.4 with mod_python2.7+apache or mod_python3.1+apache2.  If 
you are building your own system, then of COURSE you are going to have 
development packages.  If you are trying to install it from redhat's 
package system, and it requires you to install -devel packages just for 
it to work, then it is a shortcoming in Redhat, not mod_python.

-- 
_________________________________________________________

  Jon-Pierre Gentil               PGP: 0x7E1CBA17
  jabber: jgentil@sebistar.net    web: www.sebistar.net
  "If you think education is expensive, try ignorance."
_________________________________________________________ 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 827 bytes
Desc: not available
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050729/3a8a3aa4/attachment.bin
From jimpop at yahoo.com  Fri Jul 29 14:57:37 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Fri Jul 29 14:59:12 2005
Subject: [SPAM] Re: [SPAM] Re: [mod_python] Point of
	frustration/disappointment
In-Reply-To: <200507291320.35196.jgentil@sebistar.net>
References: <1122576967.14334.15.camel@localhost>
	<200507281657.44358.jgentil@sebistar.net>
	<1122592879.15618.7.camel@localhost>
	<200507291320.35196.jgentil@sebistar.net>
Message-ID: <1122663457.4530.10.camel@localhost>

On Fri, 2005-07-29 at 13:20 -0500, Jon-Pierre Gentil wrote:
> If you are trying to install it from redhat's 
> package system, and it requires you to install -devel packages just for 
> it to work, then it is a shortcoming in Redhat, not mod_python.

Just to be clear on this point, but not try to further this aspect of
the thread, I do wholeheartedly agree with your above point.  The reason
for needing the python2-devel package is that it is where (presumably)
Redhat put all the non-english and non-unicode encodings.  I can see why
they might have put this in a separate package, but I can't agree that
it belongs in -devel.

-Jim P.

From grisha at modpython.org  Fri Jul 29 15:32:23 2005
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jul 29 15:32:42 2005
Subject: Fix SpamAssassin (was Re: [SPAM] Re: [mod_python] Point
	offrustration/disappointment)
In-Reply-To: <42EA21FD.2000609@joreybump.com>
References: <1122613853.30136@dscpl.user.openhosting.com>
	<200507290020.02537.jgentil@sebistar.net>
	<42EA21FD.2000609@joreybump.com>
Message-ID: <20050729152855.O91258@grisha.dyndns.org>



On Fri, 29 Jul 2005, Jorey Bump wrote:

> Your residential IP is causing a problem somewhere. But modpython.org's spam 
> threshold is set pretty low.

I've got it at 2.4 right now, otherwise I seem to be getting an aweful lot 
of "check your paypal account" sent to grisha@modpython.org and cc-ing the 
list, which appears to be some kind of a (perhaps not so) new spamming 
technique.

I'm not a spamassassin expert - is 2.4 too low?

Grisha
From jimpop at yahoo.com  Fri Jul 29 15:55:58 2005
From: jimpop at yahoo.com (Jim Popovitch)
Date: Fri Jul 29 15:57:29 2005
Subject: [mod_python] Re: Fix SpamAssassin
In-Reply-To: <20050729152855.O91258@grisha.dyndns.org>
References: <1122613853.30136@dscpl.user.openhosting.com>
	<200507290020.02537.jgentil@sebistar.net>
	<42EA21FD.2000609@joreybump.com>
	<20050729152855.O91258@grisha.dyndns.org>
Message-ID: <1122666958.4530.22.camel@localhost>

On Fri, 2005-07-29 at 15:32 -0400, Gregory (Grisha) Trubetskoy wrote:
> 
> On Fri, 29 Jul 2005, Jorey Bump wrote:
> 
> > Your residential IP is causing a problem somewhere. But modpython.org's spam 
> > threshold is set pretty low.
> 
> I've got it at 2.4 right now, otherwise I seem to be getting an aweful lot 
> of "check your paypal account" sent to grisha@modpython.org and cc-ing the 
> list, which appears to be some kind of a (perhaps not so) new spamming 
> technique.
> 
> I'm not a spamassassin expert - is 2.4 too low?

I run public systems (mostly mailing lists) with SA set at 4 or 5
(depends on the day of the week and other events).  I haven't seen any
paypal (or other) slip through yet.  One way to tell is to look at the
X-Spam-* headers and see what the value is set to.  The one that started
this fork in the thread was a 2.6 primarily because the user's IP
address is listed in Sorbs (he's sending email from a dynamic IP rather
than his ISP's mailserver)

See:
http://www.completewhois.com/cgi-bin/rbl_lookup.cgi?query=66.69.92.16

-Jim P.

From list at joreybump.com  Fri Jul 29 16:34:27 2005
From: list at joreybump.com (Jorey Bump)
Date: Fri Jul 29 16:34:34 2005
Subject: Fix SpamAssassin (was Re: [SPAM] Re: [mod_python] Point
	offrustration/disappointment)
In-Reply-To: <20050729152855.O91258@grisha.dyndns.org>
References: <1122613853.30136@dscpl.user.openhosting.com>
	<200507290020.02537.jgentil@sebistar.net>
	<42EA21FD.2000609@joreybump.com>
	<20050729152855.O91258@grisha.dyndns.org>
Message-ID: <42EA92D3.8000001@joreybump.com>

Gregory (Grisha) Trubetskoy wrote:

> I've got it at 2.4 right now, otherwise I seem to be getting an aweful 
> lot of "check your paypal account" sent to grisha@modpython.org and 
> cc-ing the list, which appears to be some kind of a (perhaps not so) new 
> spamming technique.
> 
> I'm not a spamassassin expert - is 2.4 too low?

If you can, run the latest version, which defaults to 5. Then you can 
make minor adjustments to the standard scores in spamassassin's 
local.cf, as needed (I've only needed to make a few).

I quarantine messages marked as spam by SA in the postfix hold queue. 
The few that I release don't have an altered Subject: line, so it's 
transparent to the recipient. I just comment that out in local.cf:

# rewrite_header Subject *****SPAM*****

Reinjection by SA varies by setup. You may be able to do a header check 
to perform a desired action on spam messages.
From list at joreybump.com  Fri Jul 29 16:49:37 2005
From: list at joreybump.com (Jorey Bump)
Date: Fri Jul 29 16:49:45 2005
Subject: Fix SpamAssassin (was Re: [SPAM] Re: [mod_python]
	Point	offrustration/disappointment)
In-Reply-To: <42EA92D3.8000001@joreybump.com>
References: <1122613853.30136@dscpl.user.openhosting.com>	<200507290020.02537.jgentil@sebistar.net>	<42EA21FD.2000609@joreybump.com>	<20050729152855.O91258@grisha.dyndns.org>
	<42EA92D3.8000001@joreybump.com>
Message-ID: <42EA9661.1080800@joreybump.com>

Jorey Bump wrote:
> Gregory (Grisha) Trubetskoy wrote:
> 
>> I'm not a spamassassin expert - is 2.4 too low?
> 
> If you can, run the latest version, which defaults to 5. Then you can 
> make minor adjustments to the standard scores in spamassassin's 
> local.cf, as needed (I've only needed to make a few).

I should add that a single RBL is putting the message over the limit, so 
you might as well use the RBL directly and reject such messages (sorry, 
Jon-Pierre, but running a mail server on a dynamic IP is a losing 
battle, these days).
From grahamd at dscpl.com.au  Sat Jul 30 03:23:08 2005
From: grahamd at dscpl.com.au (Graham Dumpleton)
Date: Sat Jul 30 03:23:31 2005
Subject: [SPAM] Re: [SPAM] Re: [mod_python] Point of
	frustration/disappointment
In-Reply-To: <1122663457.4530.10.camel@localhost>
References: <1122576967.14334.15.camel@localhost>
	<200507281657.44358.jgentil@sebistar.net>
	<1122592879.15618.7.camel@localhost>
	<200507291320.35196.jgentil@sebistar.net>
	<1122663457.4530.10.camel@localhost>
Message-ID: <EBEF395A-9BE5-4834-A759-EDF078A74F9A@dscpl.com.au>


On 30/07/2005, at 4:57 AM, Jim Popovitch wrote:

> On Fri, 2005-07-29 at 13:20 -0500, Jon-Pierre Gentil wrote:
>
>> If you are trying to install it from redhat's
>> package system, and it requires you to install -devel packages  
>> just for
>> it to work, then it is a shortcoming in Redhat, not mod_python.
>>
>
> Just to be clear on this point, but not try to further this aspect of
> the thread, I do wholeheartedly agree with your above point.  The  
> reason
> for needing the python2-devel package is that it is where (presumably)
> Redhat put all the non-english and non-unicode encodings.  I can  
> see why
> they might have put this in a separate package, but I can't agree that
> it belongs in -devel.

If I recollect properly, the separate python-devel package only  
contains the
"config" directory and "include" files. This "config" directory  
contains a
makefile and other bits that could be used to create your own static  
Python
binary with your own extensions statically linked in. The makefile in  
that
directory is also consulted by the "distutils" modules which  
practically all
Python related packages use to perform installation of a Python package.

Can't remember if the absence of the "config" directory will prevent  
a pure
Python package being installed using "distutils", but if the "config"  
directory
or "include" directory are missing, you most definitely can't build  
or install a
Python package which has C/C++ code based extensions that have to be
compiled against Python, ie., like mod_python.

I somewhat doubt that the non-english and non-unicode encoders were
in the python-devel package as they have nothing to do with development
and would very much need to be a part of the main runtime package.

I haven't touched a Linux system in years, but it was an annoyance that
some Linux distributions had this separate python-devel package as it
meant you had to go find the extras CD to install even the most  
trivial of
Python packages. :-(

Graham
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050730/6a9e7640/attachment.html
From dharana at dharana.net  Sat Jul 30 14:07:22 2005
From: dharana at dharana.net (dharana)
Date: Sat Jul 30 14:09:10 2005
Subject: [mod_python] Is right to ignore errors while pickling session data?
Message-ID: <42EBC1DA.3050008@dharana.net>

I've learnt after a few minutes of debugging that modpython is silently 
generating a new session if I try to store a dynamically generated class 
(new.classobj).

I checked into python cli and I saw pickle can't dump this kind of classes but 
it raises an exception which could have come handy.

Any reasons why they aren't raised in mod_python?

-- 
dharana

From nicolas.lehuen at gmail.com  Sun Jul 31 03:40:19 2005
From: nicolas.lehuen at gmail.com (Nicolas Lehuen)
Date: Sun Jul 31 03:40:23 2005
Subject: [mod_python] Is right to ignore errors while pickling session
	data?
In-Reply-To: <42EBC1DA.3050008@dharana.net>
References: <42EBC1DA.3050008@dharana.net>
Message-ID: <c298f2d7050731004015b5143b@mail.gmail.com>

Hi dharana,

If you're using 3.2.0-dev and FileSession, then you should see that the 
pickling / unpickling exceptions are logged into the error log. DbmSession 
does not catch the exception so it should be raised up to the user. That's 
something we should fix, so that every session class behaves the same way.

What version of mod_python and what session class are you using ?

Regards,
Nicolas

2005/7/30, dharana <dharana@dharana.net>:
> 
> I've learnt after a few minutes of debugging that modpython is silently
> generating a new session if I try to store a dynamically generated class
> (new.classobj).
> 
> I checked into python cli and I saw pickle can't dump this kind of classes 
> but
> it raises an exception which could have come handy.
> 
> Any reasons why they aren't raised in mod_python?
> 
> --
> dharana
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20050731/63accf77/attachment.html
From dharana at dharana.net  Sun Jul 31 04:51:29 2005
From: dharana at dharana.net (dharana)
Date: Sun Jul 31 04:53:25 2005
Subject: [mod_python] Is right to ignore errors while pickling session
	data?
In-Reply-To: <c298f2d7050731004015b5143b@mail.gmail.com>
References: <42EBC1DA.3050008@dharana.net>
	<c298f2d7050731004015b5143b@mail.gmail.com>
Message-ID: <42EC9111.2080303@dharana.net>

Hi nick,

Nicolas Lehuen wrote:
> Hi dharana,
> 
> If you're using 3.2.0-dev and FileSession, then you should see that the 
> pickling / unpickling exceptions are logged into the error log. 
> DbmSession does not catch the exception so it should be raised up to the 
> user. That's something we should fix, so that every session class 
> behaves the same way.

It's better than not logging them at all, but no other part in mod_python logs 
silently to the error log (apart from segfaults). Is there any reason for that? 
Maybe it's something that can happen when sessions are expired or maybe the 
session creation/deletion happens in parts where it can't write to req? I have 
my development server setup to throw errors on screen so if I don't see 
tracebacks I generally don't expect them to have happened. That's what has 
bugged me.

> 
> What version of mod_python and what session class are you using ?

I'm using -dev version: mod_python_2005071222430.

> 
> Regards,
> Nicolas
> 

-- 
dharana

