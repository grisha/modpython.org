From clodoaldo.pinto.neto at gmail.com  Thu Jan  1 11:23:00 2009
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo Pinto Neto)
Date: Thu Jan  1 11:23:06 2009
Subject: [mod_python] mod_rewrite and publisher
In-Reply-To: <88e286470812301848k178ff552u75fa917a584eeb55@mail.gmail.com>
References: <a595de7a0812301745u2f3c414dhf6a7958a3f038383@mail.gmail.com>
	<88e286470812301848k178ff552u75fa917a584eeb55@mail.gmail.com>
Message-ID: <a595de7a0901010823x43a0524br4ab64058ebc8a66e@mail.gmail.com>

2008/12/31 Graham Dumpleton <graham.dumpleton@gmail.com>:
> Log values of:
>
>  req.filename
>  req.uri
>  req.path_info
>  req.args
>
> In the handler and post so can see better what you are saying is
> getting passed to it.
>
> Unless you are saying publisher isn't getting the request at all.
>
> Graham

It was my own python code redirecting. I thought it was something with
Apache because the uri passed to the handler is the original one in
instead of the rewrote one and even if i change the req.uri in the
_publisher.py handler, the publisher still gets the original.

Regards, Clodoaldo

> 2008/12/31 Clodoaldo Pinto Neto <clodoaldo.pinto.neto@gmail.com>:
>> I'm working on an old mod_python-publisher site. I'm changing the
>> current query string parameters to dynamic urls using mod_rewrite
>> inside a virtual host.
>>
>>    <Directory /var/www/html/example.com>
>>       SetHandler mod_python
>>       PythonHandler /home/example/mod/_publisher.py
>>       PythonOption mod_python.importer.path "['/home/example/mod']"
>>       PythonFixupHandler /home/example/mod/_upload_limit.py
>>    </Directory>
>>
>>    RewriteLog /var/log/httpd/example.com-rewrite.log
>>    RewriteLogLevel 9
>>    RewriteEngine on
>>    RewriteRule ^/pub/.* - [L]
>>    RewriteRule ^/$ /index.py [L]
>>    RewriteRule ^/(.*?)/?$ /$1/
>>    RewriteRule ^(/(a|b|c))?([/\w]+?)(/(\d+))?/$ $3/?tv=$2&pagina=$5 [NC]
>>    RewriteRule ^([/\w]*?)(/(x|y|z))?(/(\w+?))?(/(\w+?))?/$ \
>> $1/?uf=$3&localidade=$5&bairro=$7 [QSA,NC]
>>    RewriteRule ^(/(\w+))?(/(\w+))?/$ /?marca=$2&modelo=$4 [QSA]
>>    RewriteRule ^/$ /index.py [QSA,L]
>>
>>
>> The rewrite is working as expected. The problem i have is the
>> publisher doing its own rewrite (is it?) after the one above using the
>> original uri not the rewrote one.
>>
>> rewrite log:
>>
>> 10.1.1.101 - - [30/Dec/2008:23:28:45 --0200]
>> [example.dkt/sid#b94e66e0][rid#bedec338/initial] (3) split
>> uri=/?marca=&modelo= -> uri=/,
>> args=marca=&modelo=&uf=DF&localidade=Sao_Paulo&bairro=&tv=a&pagina=2
>> 10.1.1.101 - - [30/Dec/2008:23:28:45 --0200]
>> [example.dkt/sid#b94e66e0][rid#bedec338/initial] (3) applying pattern
>> '^/$' to uri '/'
>> 10.1.1.101 - - [30/Dec/2008:23:28:45 --0200]
>> [example.dkt/sid#b94e66e0][rid#bedec338/initial] (2) rewrite '/' ->
>> '/index.py'
>> 10.1.1.101 - - [30/Dec/2008:23:28:45 --0200]
>> [example.dkt/sid#b94e66e0][rid#bedec338/initial] (2) local path
>> result: /index.py
>> 10.1.1.101 - - [30/Dec/2008:23:28:45 --0200]
>> [example.dkt/sid#b94e66e0][rid#bedec338/initial] (2) prefixed with
>> document_root to /var/www/html/example.com/index.py
>> 10.1.1.101 - - [30/Dec/2008:23:28:45 --0200]
>> [example.dkt/sid#b94e66e0][rid#bedec338/initial] (1) go-ahead with
>> /var/www/html/example.com/index.py [OK]
>>
>> Then the publisher gets from there with the original uri:
>>
>> 10.1.1.101 - - [30/Dec/2008:23:28:45 --0200]
>> [example.dkt/sid#b94e66e0][rid#beac0170/initial] (2) init rewrite
>> engine with requested uri /a/DF/Sao_Paulo/
>>
>> How to make the publisher use the rewrote uri? Or what am i missing
>> and should be doing?
>>
>> _publisher.py:
>>
>> from mod_python import publisher
>> from os.path import basename
>>
>> def handler(req):
>>   req.add_output_filter('DEFLATE')
>>   if basename(req.filename) == 'index.py':
>>      req.uri = '/'
>>   return publisher.handler(req)
>>
>> Regards, Clodoaldo
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>
From graham.dumpleton at gmail.com  Thu Jan  1 18:07:31 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Thu Jan  1 18:07:35 2009
Subject: [mod_python] when to use PSP handler,
	when to use Publisher handler
In-Reply-To: <491b0d8f0812300815j45dc0180r5d2937d12330568c@mail.gmail.com>
References: <491b0d8f0812261028p44f15815q68e04e686d3adbf5@mail.gmail.com>
	<88e286470812270146u7dd1c56bhf2e7901a6b5cc02@mail.gmail.com>
	<491b0d8f0812300815j45dc0180r5d2937d12330568c@mail.gmail.com>
Message-ID: <88e286470901011507g7672091aufd71358be9ef0687@mail.gmail.com>

2008/12/31 David Jackson <davidj411@gmail.com>:
> 2) Question was: "Warning bells ringing. Why are you picking
> mod_python/publisher/psp in the first place when
> there are arguably much better alternatives available today for doing
> Python web application? "
> I'd like to hear about some of the options that are better than mod_python.
> performance and security are important.
> The abilty to manage code is also important.
> what else is considered important when picking the "framework" (for lack of
> better word) for python web apps?

These days everything is moving towards being based off of WSGI at
lowest layer. This still means you can host on mod_python, but you
have lots of other options as well as WSGI ensures portability between
hosting mechanisms.

More high profile ones worth looking at, from lowest level anti
frameworks, up through to large frameworks, are:

  http://pythonpaste.org/
  http://werkzeug.pocoo.org/
  http://pylonshq.com/
  http://www.turbogears.org/
  http://www.djangoproject.com/

Graham
From graham.dumpleton at gmail.com  Thu Jan  1 18:08:28 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Thu Jan  1 18:08:35 2009
Subject: [mod_python] mod_rewrite and publisher
In-Reply-To: <a595de7a0901010823x43a0524br4ab64058ebc8a66e@mail.gmail.com>
References: <a595de7a0812301745u2f3c414dhf6a7958a3f038383@mail.gmail.com>
	<88e286470812301848k178ff552u75fa917a584eeb55@mail.gmail.com>
	<a595de7a0901010823x43a0524br4ab64058ebc8a66e@mail.gmail.com>
Message-ID: <88e286470901011508qdc7babdqf53702948a238ed7@mail.gmail.com>

2009/1/2 Clodoaldo Pinto Neto <clodoaldo.pinto.neto@gmail.com>:
> 2008/12/31 Graham Dumpleton <graham.dumpleton@gmail.com>:
>> Log values of:
>>
>>  req.filename
>>  req.uri
>>  req.path_info
>>  req.args
>>
>> In the handler and post so can see better what you are saying is
>> getting passed to it.
>>
>> Unless you are saying publisher isn't getting the request at all.
>>
>> Graham
>
> It was my own python code redirecting. I thought it was something with
> Apache because the uri passed to the handler is the original one in
> instead of the rewrote one and even if i change the req.uri in the
> _publisher.py handler, the publisher still gets the original.

That means problem is solved then?

Graham
From clodoaldo.pinto.neto at gmail.com  Thu Jan  1 18:53:41 2009
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo Pinto Neto)
Date: Thu Jan  1 18:53:47 2009
Subject: [mod_python] mod_rewrite and publisher
In-Reply-To: <88e286470901011508qdc7babdqf53702948a238ed7@mail.gmail.com>
References: <a595de7a0812301745u2f3c414dhf6a7958a3f038383@mail.gmail.com>
	<88e286470812301848k178ff552u75fa917a584eeb55@mail.gmail.com>
	<a595de7a0901010823x43a0524br4ab64058ebc8a66e@mail.gmail.com>
	<88e286470901011508qdc7babdqf53702948a238ed7@mail.gmail.com>
Message-ID: <a595de7a0901011553xc5a8e38m391930112b571563@mail.gmail.com>

2009/1/1 Graham Dumpleton <graham.dumpleton@gmail.com>:
> 2009/1/2 Clodoaldo Pinto Neto <clodoaldo.pinto.neto@gmail.com>:
>> 2008/12/31 Graham Dumpleton <graham.dumpleton@gmail.com>:
>>> Log values of:
>>>
>>>  req.filename
>>>  req.uri
>>>  req.path_info
>>>  req.args
>>>
>>> In the handler and post so can see better what you are saying is
>>> getting passed to it.
>>>
>>> Unless you are saying publisher isn't getting the request at all.
>>>
>>> Graham
>>
>> It was my own python code redirecting. I thought it was something with
>> Apache because the uri passed to the handler is the original one in
>> instead of the rewrote one and even if i change the req.uri in the
>> _publisher.py handler, the publisher still gets the original.
>
> That means problem is solved then?

Yes, it is.

Clodoaldo

>
> Graham
>
From behnam at zwnj.org  Sat Jan  3 10:41:12 2009
From: behnam at zwnj.org (Behnam Esfahbod ZWNJ)
Date: Sat Jan  3 10:41:16 2009
Subject: [mod_python] Decoding HTML escape characters in HTTP Requests
Message-ID: <5d0394600901030741h1d72b33bq8aae07b15ded049a@mail.gmail.com>

Hi list,

When browsers need to send Unicode characters (i.e. U+06FA, EXTENDED
ARABIC-INDIC DIGIT ONE)  in a non-Unicode (i.e. Western ISO-8859-1)
encoded HTTP request, they escape Unicode characters in HTML escape
formats.  For example above, the string "&#1777;" will be sent to the
server.

I'm using mod_pythons's Publisher handler, and in these cases, i get
the escaped string, not the original Unicode text.  Is it a bug in
mod_python, or a non-standard feature of common browsers/app-servers,
or both?

Best,
-Behnam

Hint: U+06FA, EXTENDED ARABIC-INDIC DIGIT ONE = &#1777;


-- 
    '     ????? ??????
    '     Behnam Esfahbod
   '
  *  ..   http://behnam.esfahbod.info
 *  `  *
  * o *   http://zwnj.org

From clodoaldo.pinto.neto at gmail.com  Sat Jan  3 17:17:33 2009
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo Pinto Neto)
Date: Sat Jan  3 17:17:41 2009
Subject: [mod_python] Decoding HTML escape characters in HTTP Requests
In-Reply-To: <5d0394600901030741h1d72b33bq8aae07b15ded049a@mail.gmail.com>
References: <5d0394600901030741h1d72b33bq8aae07b15ded049a@mail.gmail.com>
Message-ID: <a595de7a0901031417l2e7a15c1qd3b5bb285238c606@mail.gmail.com>

2009/1/3 Behnam Esfahbod ZWNJ <behnam@zwnj.org>:
> Hi list,
>
> When browsers need to send Unicode characters (i.e. U+06FA, EXTENDED
> ARABIC-INDIC DIGIT ONE)  in a non-Unicode (i.e. Western ISO-8859-1)
> encoded HTTP request, they escape Unicode characters in HTML escape
> formats.  For example above, the string "&#1777;" will be sent to the
> server.

iso-8859-1 is 256 bytes long only. If you want all the unicode code
points represented you should use utf-8. utf-32 also can represent all
unicode code points but consumes more bandwidth and i don't know if it
is as well supported as utf-8, which is universal.

>
> I'm using mod_pythons's Publisher handler, and in these cases, i get
> the escaped string, not the original Unicode text.  Is it a bug in
> mod_python, or a non-standard feature of common browsers/app-servers,
> or both?

Try to use utf-8 and see what you get.

Regards, Clodoaldo

>
> Best,
> -Behnam
>
> Hint: U+06FA, EXTENDED ARABIC-INDIC DIGIT ONE = &#1777;
>
>
> --
>    '     ????? ??????
>    '     Behnam Esfahbod
>   '
>  *  ..   http://behnam.esfahbod.info
>  *  `  *
>  * o *   http://zwnj.org
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From behnam at zwnj.org  Sat Jan  3 17:49:07 2009
From: behnam at zwnj.org (Behnam Esfahbod ZWNJ)
Date: Sat Jan  3 17:49:11 2009
Subject: [mod_python] Decoding HTML escape characters in HTTP Requests
In-Reply-To: <a595de7a0901031417l2e7a15c1qd3b5bb285238c606@mail.gmail.com>
References: <5d0394600901030741h1d72b33bq8aae07b15ded049a@mail.gmail.com>
	<a595de7a0901031417l2e7a15c1qd3b5bb285238c606@mail.gmail.com>
Message-ID: <5d0394600901031449t169ccefam86986b035a311ec4@mail.gmail.com>

Thanks Clodoaldo.  UTF-8 works fine.  What I was reporting is that
non-UTF charsets are not supported in Publisher (and probably some
other handlers as well).

As a result of this problem, you'll get python errors or wrong results
when dealing with non-ASCII characters in a browser/site with non-UTF
*default* charset.

Example:
- You have IE6 and you haven't changed the charset. (it must beMS or
ISO Western)
- Open this page: http://asiwg.org/~behnam/tr31_zwnj/
- Copy ? (U+00C1 LATIN CAPITAL LETTER A WITH ACUTE) to the field and
press submit
- You'll get this python error: """
  File "/usr/lib/python2.5/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)

UnicodeDecodeError: 'utf8' codec can't decode byte 0xc1 in position 0:
unexpected end of data
"""

What I say is that it's not so hard to detect the content encoding
from the HTTP request header and pass that encoding to the decoder.
And I say it's important, because not all the time you get the
exception error; but sometimes you just get the wrong answer.  For
example, try a non-Latin (Cyrillic, Arabic, etc) in the example above.

-Behnam


On Sun, Jan 4, 2009 at 1:47 AM, Clodoaldo Pinto Neto
<clodoaldo.pinto.neto@gmail.com> wrote:
> 2009/1/3 Behnam Esfahbod ZWNJ <behnam@zwnj.org>:
>> Hi list,
>>
>> When browsers need to send Unicode characters (i.e. U+06FA, EXTENDED
>> ARABIC-INDIC DIGIT ONE)  in a non-Unicode (i.e. Western ISO-8859-1)
>> encoded HTTP request, they escape Unicode characters in HTML escape
>> formats.  For example above, the string "&#1777;" will be sent to the
>> server.
>
> iso-8859-1 is 256 bytes long only. If you want all the unicode code
> points represented you should use utf-8. utf-32 also can represent all
> unicode code points but consumes more bandwidth and i don't know if it
> is as well supported as utf-8, which is universal.
>
>>
>> I'm using mod_pythons's Publisher handler, and in these cases, i get
>> the escaped string, not the original Unicode text.  Is it a bug in
>> mod_python, or a non-standard feature of common browsers/app-servers,
>> or both?
>
> Try to use utf-8 and see what you get.
>
> Regards, Clodoaldo
>
>>
>> Best,
>> -Behnam
>>
>> Hint: U+06FA, EXTENDED ARABIC-INDIC DIGIT ONE = &#1777;
>>
>>
>> --
>>    '     ????? ??????
>>    '     Behnam Esfahbod
>>   '
>>  *  ..   http://behnam.esfahbod.info
>>  *  `  *
>>  * o *   http://zwnj.org
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>



-- 
    '     ????? ??????
    '     Behnam Esfahbod
   '
  *  ..   http://behnam.esfahbod.info
 *  `  *
  * o *   http://zwnj.org

From dfnsonfsduifb at gmx.de  Mon Jan  5 09:52:40 2009
From: dfnsonfsduifb at gmx.de (Johannes Bauer)
Date: Mon Jan  5 09:52:51 2009
Subject: [mod_python] Debugging active classes
Message-ID: <49621EB8.9010205@gmx.de>

Hello list,

I'm doing some webapplications using mod_python and Cheetah. Recently I
experienced some trouble with database access: using the Postgres pgdb
module I instanciate classes which connect to the db in the constuctor
and should release all references to th econnection in the destructor
(hence, closing the connection).

However, this is not happening. The destructor does not seem to be
called. This is why I suspect that some other code holds a reference to
my class, causing it not to be destroyed. Is there a way to debug what
classes are loaded within mod_python and possibly what memory regions
hold references there? How does one go about debugging such a problem? I
first would have to find out whether the problem lies within pgdb,
Cheetah or (most likely) my code...

Regards,
Johannes
From tiagobecker at gmail.com  Mon Jan  5 10:52:07 2009
From: tiagobecker at gmail.com (Tiago Becker)
Date: Mon Jan  5 10:52:13 2009
Subject: [mod_python] Debugging active classes
In-Reply-To: <9bad843d0901050751q3ddb43dal5e6b07acd075e3a2@mail.gmail.com>
References: <49621EB8.9010205@gmx.de>
	<9bad843d0901050751q3ddb43dal5e6b07acd075e3a2@mail.gmail.com>
Message-ID: <9bad843d0901050752j31b4214cj6e74b1cbd6bc01b4@mail.gmail.com>

damn reply button :-)

On Mon, Jan 5, 2009 at 1:51 PM, Tiago Becker <tiagobecker@gmail.com> wrote:

> We had the same problem here.
> Try making the connection outside the function mod_python calls...
> something todo with the reloadable modules, idk for sure, someone else
> should be able to explain in details....
>
> something like
>
> .....
> from mod_python import apache
>
> cfg = apache.import_module('cfg')
>
> def indef(req):
>   #dont connect here... if you need to pass the connection obj around, you
> can do something like
>   req.myConnection = cfg.Connection
>   #and then pass the req
> ....
>
>
> The database connection should be put in the cfg (or another file,
> whatever)...
> I hope that helps
>
>
>
>
>
>
>
> On Mon, Jan 5, 2009 at 12:52 PM, Johannes Bauer <dfnsonfsduifb@gmx.de>wrote:
>
>> Hello list,
>>
>> I'm doing some webapplications using mod_python and Cheetah. Recently I
>> experienced some trouble with database access: using the Postgres pgdb
>> module I instanciate classes which connect to the db in the constuctor
>> and should release all references to th econnection in the destructor
>> (hence, closing the connection).
>>
>> However, this is not happening. The destructor does not seem to be
>> called. This is why I suspect that some other code holds a reference to
>> my class, causing it not to be destroyed. Is there a way to debug what
>> classes are loaded within mod_python and possibly what memory regions
>> hold references there? How does one go about debugging such a problem? I
>> first would have to find out whether the problem lies within pgdb,
>> Cheetah or (most likely) my code...
>>
>> Regards,
>> Johannes
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090105/04dc14cb/attachment.html
From koumes21 at gmail.com  Thu Jan  8 16:28:18 2009
From: koumes21 at gmail.com (Koumes21)
Date: Thu Jan  8 16:28:32 2009
Subject: [mod_python] Problem with multiple runs of single script
Message-ID: <49666FF2.3070807@gmail.com>

Hello,

I am using Apache 2.2.11, mod_python 3.3.1 and Python 2.5.4, which are,
as far as I know, the latest versions. Everything is configured, to
publish pages I use mod_python.publisher. There is only one thing that
does not work - if there is some page, which takes up longer time to
load, and I want to view it twice at the same time, the first page has
to be sent to client before the execution of the second one will start.
This is quite problematic if I have to make page from which users will
download files (these will besent throught the Python script) - in this
case it is possible to download only one file in one moment. It is quite
strange that it isn't problem of unavailable resources or something like
that - if I open the second page in another browser, they could both
download simultaneously. I tried on Windows (Vista) and on Linux (Ubuntu
8.10) and both computers have the same problem. I was already searching
archive of this mail-list. For example this is quite similiar to my problem:
http://www.modpython.org/pipermail/mod_python/2008-September/025634.html

However, there are few differences:
	I use standard mod_python.publisher handler
	I do NOT use Sessions (module isn't even imported and the pysid
		cookie won't appear in my browser)
	I don't use prefork
	Solution in that thread didn't work for me

I hope someone will be able to help me.
Here is included the shortest code which causes this problem

def index(req):
    import time
    req.content_type="text/plain"
    req.write("working...")
    time.sleep(10) # simulate some function that takes
                   # long time to complete
    req.write("\ndone")

Thank you in advance for every answer that would help me.

Koumes21

P.S. English is not my native language, so it isn't perfect.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 250 bytes
Desc: OpenPGP digital signature
Url : http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090108/81cf33ae/signature.bin
From tonightslastsong at gmail.com  Sun Jan 11 00:04:01 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Sun Jan 11 00:04:04 2009
Subject: [mod_python] Caching issues
Message-ID: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>

Hello all-- I've been experiencing a caching issue from the
very beginning of my use of mod_python...  It's been at least 2 months now,
and I keep running into actual issues that prevent me from coding.
I have a knack for over-explaining, so I'll try to keep this concise yet
descriptive.

I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
point the finger at the language, *but* (you knew that was coming, eh?) I
know my code isn't to blame for the issue:

I write some basic code for an 'index.py' file, using the
mod_python.publisher handler.  'index.py' includes other modules which I've
coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
in the 'index.py' file will be reflected immediately on my local web server.
 On the other hand, any changes I make to the modules included via import
from within 'index.py' are completely ignored by the web server.  It took me
a while to realize that my pages didn't reflect my code.  I also discovered
that the .pyc files had nothing to do with it.  I finally just restarted the
apache web service (which in fact runs as a service on my machine), and then
my code finally gets pushed through to the web server.

I've been looking around practically every other day for documentation on
how to make apache/mod_python simply cut it out and stop caching my python
code, but I've found nothing.  You can imagine the annoyance this presents,
since I have to restart my web server every single time I make even the
slightest change to a 'utility.py' file, etc.

I've been coping with the problem for a while now, but then I've found far
more annoying issues recently.  To abbreviate the problem into short terms,
I've got a main module 'MAIN' which imports another module for a class
'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
interfacing with various databases, etc.  We'll call the 'backend' module
"BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
an apache restart in order to take effect.

I have a function in CLASS which calls a function from it's imported BACKEND
module.  I tried adding a parameter to the BACKEND function in question, and
properly passed said parameter while in CLASS, yet the mod_python debugger
spits out an error about me having passed 3 arguments, when the BACKEND
function takes exactly 2.  This is outright false, since my function in
BACKEND looks like:

def getUsers(self, req, terms):

and I'm calling it with

self.backend.getUsers(self.req, search)

In reality, my code dictates that I'm passing 3 (including the implicit
'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
arguments.  Yet, the debugger is telling me that it takes only 2.

I was trying to pass it 'req' because I wanted to investigate a little error
in the code by printing something to the output HTML.  So, my attempt is
foiled, since somewhere something isn't being updated to what my most
current code actually says.

Just to test, I made the 'getUsers' function return immediately with a
string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
other code spin wildly out of control and encounter errors, yet when I
restart apache and test it... lo and behold, it's completely ignoring my
goofy 'return' statement.  The 'getUsers' function is still somehow
returning valid data, as if the 'return' wasn't there at all!

So then I tried causing actual syntax errors.  The debugger caught this,
much to my inner joy.  So I tried causing a semantic error instead:
referencing a non-existent attribute of a non-existent variable:

madeUpVar.moo = 42

Syntactically, nothing wrong, but at run time it should most definitely
encounter a NameError or something equally as realistic.  But I restart
apache, and... nothing.  The line is completely ignored.

Which leads me to believe that it's not actually being 'ignored' per se, but
rather the code being compiled is not the same as the code in play within
the web server.  When I delete my .pyc files and restart apache and visit
the URL that triggers my python code, my .py files are in fact being
recompiled down to their byte code .pyc files.  And clearly the interpreter
is processing my code, since it flags me on improper syntax.  Yet, no matter
what kind of syntactically-sound nonsense I put into my code, the changes
aren't being reflected in my web server.

These problems come and go, and I've go better explanation than over zealous
caching.  I imagine that by tomorrow sometime when I start my computer up,
the problem will have disappeared for the time being.

I've cursed this computer up and down as I've tried to figure out ANYTHING
that I can do to alleviate the issue, by to no avail.

Anybody with counsel to spare my tired brain is welcome to share...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090110/61a706bc/attachment.html
From graham.dumpleton at gmail.com  Sun Jan 11 00:23:07 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sun Jan 11 00:23:12 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
Message-ID: <88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>

2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
> Hello all-- I've been experiencing a caching issue from the
> very beginning of my use of mod_python...  It's been at least 2 months now,
> and I keep running into actual issues that prevent me from coding.
> I have a knack for over-explaining, so I'll try to keep this concise yet
> descriptive.

Still not short enough, so much so I stopped part way through.

The simple matter of it is that mod_python does not do deep checking
of code for changes, nor does it automatically restart the process
when code is changed. Thus the need to restart Apache when you make
code changes to anything imported from sys.path is expected and normal
behaviour.

The only time any code is automatically reloaded is the direct code
files imported by mod_python using its own special module importer.
This is documented under 'import_module()' function in:

  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html

Graham

> I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
> and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
> point the finger at the language, *but* (you knew that was coming, eh?) I
> know my code isn't to blame for the issue:
> I write some basic code for an 'index.py' file, using the
> mod_python.publisher handler.  'index.py' includes other modules which I've
> coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
> in the 'index.py' file will be reflected immediately on my local web server.
>  On the other hand, any changes I make to the modules included via import
> from within 'index.py' are completely ignored by the web server.  It took me
> a while to realize that my pages didn't reflect my code.  I also discovered
> that the .pyc files had nothing to do with it.  I finally just restarted the
> apache web service (which in fact runs as a service on my machine), and then
> my code finally gets pushed through to the web server.
> I've been looking around practically every other day for documentation on
> how to make apache/mod_python simply cut it out and stop caching my python
> code, but I've found nothing.  You can imagine the annoyance this presents,
> since I have to restart my web server every single time I make even the
> slightest change to a 'utility.py' file, etc.
> I've been coping with the problem for a while now, but then I've found far
> more annoying issues recently.  To abbreviate the problem into short terms,
> I've got a main module 'MAIN' which imports another module for a class
> 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
> interfacing with various databases, etc.  We'll call the 'backend' module
> "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
> an apache restart in order to take effect.
> I have a function in CLASS which calls a function from it's imported BACKEND
> module.  I tried adding a parameter to the BACKEND function in question, and
> properly passed said parameter while in CLASS, yet the mod_python debugger
> spits out an error about me having passed 3 arguments, when the BACKEND
> function takes exactly 2.  This is outright false, since my function in
> BACKEND looks like:
> def getUsers(self, req, terms):
>
> and I'm calling it with
> self.backend.getUsers(self.req, search)
>
> In reality, my code dictates that I'm passing 3 (including the implicit
> 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
> arguments.  Yet, the debugger is telling me that it takes only 2.
> I was trying to pass it 'req' because I wanted to investigate a little error
> in the code by printing something to the output HTML.  So, my attempt is
> foiled, since somewhere something isn't being updated to what my most
> current code actually says.
> Just to test, I made the 'getUsers' function return immediately with a
> string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
> other code spin wildly out of control and encounter errors, yet when I
> restart apache and test it... lo and behold, it's completely ignoring my
> goofy 'return' statement.  The 'getUsers' function is still somehow
> returning valid data, as if the 'return' wasn't there at all!
> So then I tried causing actual syntax errors.  The debugger caught this,
> much to my inner joy.  So I tried causing a semantic error instead:
> referencing a non-existent attribute of a non-existent variable:
> madeUpVar.moo = 42
> Syntactically, nothing wrong, but at run time it should most definitely
> encounter a NameError or something equally as realistic.  But I restart
> apache, and... nothing.  The line is completely ignored.
> Which leads me to believe that it's not actually being 'ignored' per se, but
> rather the code being compiled is not the same as the code in play within
> the web server.  When I delete my .pyc files and restart apache and visit
> the URL that triggers my python code, my .py files are in fact being
> recompiled down to their byte code .pyc files.  And clearly the interpreter
> is processing my code, since it flags me on improper syntax.  Yet, no matter
> what kind of syntactically-sound nonsense I put into my code, the changes
> aren't being reflected in my web server.
> These problems come and go, and I've go better explanation than over zealous
> caching.  I imagine that by tomorrow sometime when I start my computer up,
> the problem will have disappeared for the time being.
> I've cursed this computer up and down as I've tried to figure out ANYTHING
> that I can do to alleviate the issue, by to no avail.
> Anybody with counsel to spare my tired brain is welcome to share...
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From tonightslastsong at gmail.com  Sun Jan 11 16:16:58 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Sun Jan 11 16:17:00 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
Message-ID: <d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>

> Still not short enough, so much so I stopped part way through.

And for that I apologize.  I do appreciate the straight answer given,
though I would appreciate much more the addition of that fact in some
point-blank documentation that was easy to find.  I have scoured the
mod_python archives by search engine and came out utterly empty
handed.  I knew what the problem was, but I could find nothing to
remedy the issue.  I haven't encountered anything quite like this in
my adventures with PHP, perl, or other similar scripting languages
piloted by Apache.  It raises a valid concern to which I ideally
should have found answers very quickly.

I hope this cures the subsequent issue given in the latter half of my message.

Tim

On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
>
> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
> > Hello all-- I've been experiencing a caching issue from the
> > very beginning of my use of mod_python...  It's been at least 2 months now,
> > and I keep running into actual issues that prevent me from coding.
> > I have a knack for over-explaining, so I'll try to keep this concise yet
> > descriptive.
>
> Still not short enough, so much so I stopped part way through.
>
> The simple matter of it is that mod_python does not do deep checking
> of code for changes, nor does it automatically restart the process
> when code is changed. Thus the need to restart Apache when you make
> code changes to anything imported from sys.path is expected and normal
> behaviour.
>
> The only time any code is automatically reloaded is the direct code
> files imported by mod_python using its own special module importer.
> This is documented under 'import_module()' function in:
>
>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>
> Graham
>
> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
> > point the finger at the language, *but* (you knew that was coming, eh?) I
> > know my code isn't to blame for the issue:
> > I write some basic code for an 'index.py' file, using the
> > mod_python.publisher handler.  'index.py' includes other modules which I've
> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
> > in the 'index.py' file will be reflected immediately on my local web server.
> >  On the other hand, any changes I make to the modules included via import
> > from within 'index.py' are completely ignored by the web server.  It took me
> > a while to realize that my pages didn't reflect my code.  I also discovered
> > that the .pyc files had nothing to do with it.  I finally just restarted the
> > apache web service (which in fact runs as a service on my machine), and then
> > my code finally gets pushed through to the web server.
> > I've been looking around practically every other day for documentation on
> > how to make apache/mod_python simply cut it out and stop caching my python
> > code, but I've found nothing.  You can imagine the annoyance this presents,
> > since I have to restart my web server every single time I make even the
> > slightest change to a 'utility.py' file, etc.
> > I've been coping with the problem for a while now, but then I've found far
> > more annoying issues recently.  To abbreviate the problem into short terms,
> > I've got a main module 'MAIN' which imports another module for a class
> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
> > interfacing with various databases, etc.  We'll call the 'backend' module
> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
> > an apache restart in order to take effect.
> > I have a function in CLASS which calls a function from it's imported BACKEND
> > module.  I tried adding a parameter to the BACKEND function in question, and
> > properly passed said parameter while in CLASS, yet the mod_python debugger
> > spits out an error about me having passed 3 arguments, when the BACKEND
> > function takes exactly 2.  This is outright false, since my function in
> > BACKEND looks like:
> > def getUsers(self, req, terms):
> >
> > and I'm calling it with
> > self.backend.getUsers(self.req, search)
> >
> > In reality, my code dictates that I'm passing 3 (including the implicit
> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
> > arguments.  Yet, the debugger is telling me that it takes only 2.
> > I was trying to pass it 'req' because I wanted to investigate a little error
> > in the code by printing something to the output HTML.  So, my attempt is
> > foiled, since somewhere something isn't being updated to what my most
> > current code actually says.
> > Just to test, I made the 'getUsers' function return immediately with a
> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
> > other code spin wildly out of control and encounter errors, yet when I
> > restart apache and test it... lo and behold, it's completely ignoring my
> > goofy 'return' statement.  The 'getUsers' function is still somehow
> > returning valid data, as if the 'return' wasn't there at all!
> > So then I tried causing actual syntax errors.  The debugger caught this,
> > much to my inner joy.  So I tried causing a semantic error instead:
> > referencing a non-existent attribute of a non-existent variable:
> > madeUpVar.moo = 42
> > Syntactically, nothing wrong, but at run time it should most definitely
> > encounter a NameError or something equally as realistic.  But I restart
> > apache, and... nothing.  The line is completely ignored.
> > Which leads me to believe that it's not actually being 'ignored' per se, but
> > rather the code being compiled is not the same as the code in play within
> > the web server.  When I delete my .pyc files and restart apache and visit
> > the URL that triggers my python code, my .py files are in fact being
> > recompiled down to their byte code .pyc files.  And clearly the interpreter
> > is processing my code, since it flags me on improper syntax.  Yet, no matter
> > what kind of syntactically-sound nonsense I put into my code, the changes
> > aren't being reflected in my web server.
> > These problems come and go, and I've go better explanation than over zealous
> > caching.  I imagine that by tomorrow sometime when I start my computer up,
> > the problem will have disappeared for the time being.
> > I've cursed this computer up and down as I've tried to figure out ANYTHING
> > that I can do to alleviate the issue, by to no avail.
> > Anybody with counsel to spare my tired brain is welcome to share...
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
From graham.dumpleton at gmail.com  Sun Jan 11 16:23:21 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sun Jan 11 16:23:23 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
Message-ID: <88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>

2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> Still not short enough, so much so I stopped part way through.
>
> And for that I apologize.  I do appreciate the straight answer given,
> though I would appreciate much more the addition of that fact in some
> point-blank documentation that was easy to find.  I have scoured the
> mod_python archives by search engine and came out utterly empty
> handed.  I knew what the problem was, but I could find nothing to
> remedy the issue.  I haven't encountered anything quite like this in
> my adventures with PHP, perl, or other similar scripting languages
> piloted by Apache.  It raises a valid concern to which I ideally
> should have found answers very quickly.
>
> I hope this cures the subsequent issue given in the latter half of my message.

PHP is specifically designed for web applications and it purposely
throws away all code at the end of each request and thus is reloading
it all on every request. Have a read of:

  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/

I would be very surprised if mod_perl auto reloaded code as it is
similar to Python in that you are applying a non web language to the
web. Only way perl code would be reload is if you were running them as
CGI scripts. If you run Python as CGI scripts you will get reloading
as well, but as with anything CGI, much slower.

BTW, maybe read:

  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html

For WSGI hosted Python web application, this provides auto reloading
on code changes. You do need to use a real operating system though,
and not Windows.

Graham

> Tim
>
> On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>>
>> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>> > Hello all-- I've been experiencing a caching issue from the
>> > very beginning of my use of mod_python...  It's been at least 2 months now,
>> > and I keep running into actual issues that prevent me from coding.
>> > I have a knack for over-explaining, so I'll try to keep this concise yet
>> > descriptive.
>>
>> Still not short enough, so much so I stopped part way through.
>>
>> The simple matter of it is that mod_python does not do deep checking
>> of code for changes, nor does it automatically restart the process
>> when code is changed. Thus the need to restart Apache when you make
>> code changes to anything imported from sys.path is expected and normal
>> behaviour.
>>
>> The only time any code is automatically reloaded is the direct code
>> files imported by mod_python using its own special module importer.
>> This is documented under 'import_module()' function in:
>>
>>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>
>> Graham
>>
>> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>> > point the finger at the language, *but* (you knew that was coming, eh?) I
>> > know my code isn't to blame for the issue:
>> > I write some basic code for an 'index.py' file, using the
>> > mod_python.publisher handler.  'index.py' includes other modules which I've
>> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>> > in the 'index.py' file will be reflected immediately on my local web server.
>> >  On the other hand, any changes I make to the modules included via import
>> > from within 'index.py' are completely ignored by the web server.  It took me
>> > a while to realize that my pages didn't reflect my code.  I also discovered
>> > that the .pyc files had nothing to do with it.  I finally just restarted the
>> > apache web service (which in fact runs as a service on my machine), and then
>> > my code finally gets pushed through to the web server.
>> > I've been looking around practically every other day for documentation on
>> > how to make apache/mod_python simply cut it out and stop caching my python
>> > code, but I've found nothing.  You can imagine the annoyance this presents,
>> > since I have to restart my web server every single time I make even the
>> > slightest change to a 'utility.py' file, etc.
>> > I've been coping with the problem for a while now, but then I've found far
>> > more annoying issues recently.  To abbreviate the problem into short terms,
>> > I've got a main module 'MAIN' which imports another module for a class
>> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>> > interfacing with various databases, etc.  We'll call the 'backend' module
>> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>> > an apache restart in order to take effect.
>> > I have a function in CLASS which calls a function from it's imported BACKEND
>> > module.  I tried adding a parameter to the BACKEND function in question, and
>> > properly passed said parameter while in CLASS, yet the mod_python debugger
>> > spits out an error about me having passed 3 arguments, when the BACKEND
>> > function takes exactly 2.  This is outright false, since my function in
>> > BACKEND looks like:
>> > def getUsers(self, req, terms):
>> >
>> > and I'm calling it with
>> > self.backend.getUsers(self.req, search)
>> >
>> > In reality, my code dictates that I'm passing 3 (including the implicit
>> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>> > arguments.  Yet, the debugger is telling me that it takes only 2.
>> > I was trying to pass it 'req' because I wanted to investigate a little error
>> > in the code by printing something to the output HTML.  So, my attempt is
>> > foiled, since somewhere something isn't being updated to what my most
>> > current code actually says.
>> > Just to test, I made the 'getUsers' function return immediately with a
>> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>> > other code spin wildly out of control and encounter errors, yet when I
>> > restart apache and test it... lo and behold, it's completely ignoring my
>> > goofy 'return' statement.  The 'getUsers' function is still somehow
>> > returning valid data, as if the 'return' wasn't there at all!
>> > So then I tried causing actual syntax errors.  The debugger caught this,
>> > much to my inner joy.  So I tried causing a semantic error instead:
>> > referencing a non-existent attribute of a non-existent variable:
>> > madeUpVar.moo = 42
>> > Syntactically, nothing wrong, but at run time it should most definitely
>> > encounter a NameError or something equally as realistic.  But I restart
>> > apache, and... nothing.  The line is completely ignored.
>> > Which leads me to believe that it's not actually being 'ignored' per se, but
>> > rather the code being compiled is not the same as the code in play within
>> > the web server.  When I delete my .pyc files and restart apache and visit
>> > the URL that triggers my python code, my .py files are in fact being
>> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>> > what kind of syntactically-sound nonsense I put into my code, the changes
>> > aren't being reflected in my web server.
>> > These problems come and go, and I've go better explanation than over zealous
>> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>> > the problem will have disappeared for the time being.
>> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>> > that I can do to alleviate the issue, by to no avail.
>> > Anybody with counsel to spare my tired brain is welcome to share...
>> > _______________________________________________
>> > Mod_python mailing list
>> > Mod_python@modpython.org
>> > http://mailman.modpython.org/mailman/listinfo/mod_python
>> >
>> >
>
From tonightslastsong at gmail.com  Sun Jan 11 16:32:12 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Sun Jan 11 16:32:15 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
Message-ID: <d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>

Despite the jab at Windows, the site will be deployed on a Unix
machine.  I just prefer Windows for ease of use, especially since my
wife has zero experience on a unix terminal or in the dearth of truly
professional software found on the Unix/Linux platform.  So yes, in
the end it will be on a "real" operating system,  But for now I'm
willingly sticking to a more user-friendly environment for the simple
folk.

Given the characteristics of PHP that allow it to circumvent this
caching stuff, I still think a nice little friendly red-flag reminder
on the main mod_python tutorial should point out this limitation of an
Apache module like this, for those of us like me, who would have gone
many months more before having every accidentally found this manual
import method.

On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
>
> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> >> Still not short enough, so much so I stopped part way through.
> >
> > And for that I apologize.  I do appreciate the straight answer given,
> > though I would appreciate much more the addition of that fact in some
> > point-blank documentation that was easy to find.  I have scoured the
> > mod_python archives by search engine and came out utterly empty
> > handed.  I knew what the problem was, but I could find nothing to
> > remedy the issue.  I haven't encountered anything quite like this in
> > my adventures with PHP, perl, or other similar scripting languages
> > piloted by Apache.  It raises a valid concern to which I ideally
> > should have found answers very quickly.
> >
> > I hope this cures the subsequent issue given in the latter half of my message.
>
> PHP is specifically designed for web applications and it purposely
> throws away all code at the end of each request and thus is reloading
> it all on every request. Have a read of:
>
>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>
> I would be very surprised if mod_perl auto reloaded code as it is
> similar to Python in that you are applying a non web language to the
> web. Only way perl code would be reload is if you were running them as
> CGI scripts. If you run Python as CGI scripts you will get reloading
> as well, but as with anything CGI, much slower.
>
> BTW, maybe read:
>
>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>
> For WSGI hosted Python web application, this provides auto reloading
> on code changes. You do need to use a real operating system though,
> and not Windows.
>
> Graham
>
> > Tim
> >
> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
> > <graham.dumpleton@gmail.com> wrote:
> >>
> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
> >> > Hello all-- I've been experiencing a caching issue from the
> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
> >> > and I keep running into actual issues that prevent me from coding.
> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
> >> > descriptive.
> >>
> >> Still not short enough, so much so I stopped part way through.
> >>
> >> The simple matter of it is that mod_python does not do deep checking
> >> of code for changes, nor does it automatically restart the process
> >> when code is changed. Thus the need to restart Apache when you make
> >> code changes to anything imported from sys.path is expected and normal
> >> behaviour.
> >>
> >> The only time any code is automatically reloaded is the direct code
> >> files imported by mod_python using its own special module importer.
> >> This is documented under 'import_module()' function in:
> >>
> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
> >>
> >> Graham
> >>
> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
> >> > know my code isn't to blame for the issue:
> >> > I write some basic code for an 'index.py' file, using the
> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
> >> > in the 'index.py' file will be reflected immediately on my local web server.
> >> >  On the other hand, any changes I make to the modules included via import
> >> > from within 'index.py' are completely ignored by the web server.  It took me
> >> > a while to realize that my pages didn't reflect my code.  I also discovered
> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
> >> > apache web service (which in fact runs as a service on my machine), and then
> >> > my code finally gets pushed through to the web server.
> >> > I've been looking around practically every other day for documentation on
> >> > how to make apache/mod_python simply cut it out and stop caching my python
> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
> >> > since I have to restart my web server every single time I make even the
> >> > slightest change to a 'utility.py' file, etc.
> >> > I've been coping with the problem for a while now, but then I've found far
> >> > more annoying issues recently.  To abbreviate the problem into short terms,
> >> > I've got a main module 'MAIN' which imports another module for a class
> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
> >> > interfacing with various databases, etc.  We'll call the 'backend' module
> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
> >> > an apache restart in order to take effect.
> >> > I have a function in CLASS which calls a function from it's imported BACKEND
> >> > module.  I tried adding a parameter to the BACKEND function in question, and
> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
> >> > spits out an error about me having passed 3 arguments, when the BACKEND
> >> > function takes exactly 2.  This is outright false, since my function in
> >> > BACKEND looks like:
> >> > def getUsers(self, req, terms):
> >> >
> >> > and I'm calling it with
> >> > self.backend.getUsers(self.req, search)
> >> >
> >> > In reality, my code dictates that I'm passing 3 (including the implicit
> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
> >> > I was trying to pass it 'req' because I wanted to investigate a little error
> >> > in the code by printing something to the output HTML.  So, my attempt is
> >> > foiled, since somewhere something isn't being updated to what my most
> >> > current code actually says.
> >> > Just to test, I made the 'getUsers' function return immediately with a
> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
> >> > other code spin wildly out of control and encounter errors, yet when I
> >> > restart apache and test it... lo and behold, it's completely ignoring my
> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
> >> > returning valid data, as if the 'return' wasn't there at all!
> >> > So then I tried causing actual syntax errors.  The debugger caught this,
> >> > much to my inner joy.  So I tried causing a semantic error instead:
> >> > referencing a non-existent attribute of a non-existent variable:
> >> > madeUpVar.moo = 42
> >> > Syntactically, nothing wrong, but at run time it should most definitely
> >> > encounter a NameError or something equally as realistic.  But I restart
> >> > apache, and... nothing.  The line is completely ignored.
> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
> >> > rather the code being compiled is not the same as the code in play within
> >> > the web server.  When I delete my .pyc files and restart apache and visit
> >> > the URL that triggers my python code, my .py files are in fact being
> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
> >> > what kind of syntactically-sound nonsense I put into my code, the changes
> >> > aren't being reflected in my web server.
> >> > These problems come and go, and I've go better explanation than over zealous
> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
> >> > the problem will have disappeared for the time being.
> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
> >> > that I can do to alleviate the issue, by to no avail.
> >> > Anybody with counsel to spare my tired brain is welcome to share...
> >> > _______________________________________________
> >> > Mod_python mailing list
> >> > Mod_python@modpython.org
> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >> >
> >> >
> >



--
"Thanksgiving Dinner sent you a message."
"If you are not a member, you need to join us."
"i was not declared before this scope."
From tonightslastsong at gmail.com  Sun Jan 11 19:01:35 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Sun Jan 11 19:01:41 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
Message-ID: <d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>

Apologies for more trouble on the caching issue-- I've been adapting
some of my scripts over to this apache.load_module function, but I
don't think I'm seeing resolution to the issue.  If I've read the
documentation properly, it seems that the PythonOption for
auto-reloading is set to On by default, so to be clear, I haven't put
a line for that in my httpd.conf file.  Are there any other tricks, or
have I simply misread the documentation?  I still have to restart the
Apache service in order to push the changes.

Tim

On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
> Despite the jab at Windows, the site will be deployed on a Unix
> machine.  I just prefer Windows for ease of use, especially since my
> wife has zero experience on a unix terminal or in the dearth of truly
> professional software found on the Unix/Linux platform.  So yes, in
> the end it will be on a "real" operating system,  But for now I'm
> willingly sticking to a more user-friendly environment for the simple
> folk.
>
> Given the characteristics of PHP that allow it to circumvent this
> caching stuff, I still think a nice little friendly red-flag reminder
> on the main mod_python tutorial should point out this limitation of an
> Apache module like this, for those of us like me, who would have gone
> many months more before having every accidentally found this manual
> import method.
>
> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>>
>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> >> Still not short enough, so much so I stopped part way through.
>> >
>> > And for that I apologize.  I do appreciate the straight answer given,
>> > though I would appreciate much more the addition of that fact in some
>> > point-blank documentation that was easy to find.  I have scoured the
>> > mod_python archives by search engine and came out utterly empty
>> > handed.  I knew what the problem was, but I could find nothing to
>> > remedy the issue.  I haven't encountered anything quite like this in
>> > my adventures with PHP, perl, or other similar scripting languages
>> > piloted by Apache.  It raises a valid concern to which I ideally
>> > should have found answers very quickly.
>> >
>> > I hope this cures the subsequent issue given in the latter half of my message.
>>
>> PHP is specifically designed for web applications and it purposely
>> throws away all code at the end of each request and thus is reloading
>> it all on every request. Have a read of:
>>
>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>
>> I would be very surprised if mod_perl auto reloaded code as it is
>> similar to Python in that you are applying a non web language to the
>> web. Only way perl code would be reload is if you were running them as
>> CGI scripts. If you run Python as CGI scripts you will get reloading
>> as well, but as with anything CGI, much slower.
>>
>> BTW, maybe read:
>>
>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>
>> For WSGI hosted Python web application, this provides auto reloading
>> on code changes. You do need to use a real operating system though,
>> and not Windows.
>>
>> Graham
>>
>> > Tim
>> >
>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>> > <graham.dumpleton@gmail.com> wrote:
>> >>
>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>> >> > Hello all-- I've been experiencing a caching issue from the
>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>> >> > and I keep running into actual issues that prevent me from coding.
>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>> >> > descriptive.
>> >>
>> >> Still not short enough, so much so I stopped part way through.
>> >>
>> >> The simple matter of it is that mod_python does not do deep checking
>> >> of code for changes, nor does it automatically restart the process
>> >> when code is changed. Thus the need to restart Apache when you make
>> >> code changes to anything imported from sys.path is expected and normal
>> >> behaviour.
>> >>
>> >> The only time any code is automatically reloaded is the direct code
>> >> files imported by mod_python using its own special module importer.
>> >> This is documented under 'import_module()' function in:
>> >>
>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>> >>
>> >> Graham
>> >>
>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>> >> > know my code isn't to blame for the issue:
>> >> > I write some basic code for an 'index.py' file, using the
>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>> >> >  On the other hand, any changes I make to the modules included via import
>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>> >> > apache web service (which in fact runs as a service on my machine), and then
>> >> > my code finally gets pushed through to the web server.
>> >> > I've been looking around practically every other day for documentation on
>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>> >> > since I have to restart my web server every single time I make even the
>> >> > slightest change to a 'utility.py' file, etc.
>> >> > I've been coping with the problem for a while now, but then I've found far
>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>> >> > I've got a main module 'MAIN' which imports another module for a class
>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>> >> > an apache restart in order to take effect.
>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>> >> > function takes exactly 2.  This is outright false, since my function in
>> >> > BACKEND looks like:
>> >> > def getUsers(self, req, terms):
>> >> >
>> >> > and I'm calling it with
>> >> > self.backend.getUsers(self.req, search)
>> >> >
>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>> >> > in the code by printing something to the output HTML.  So, my attempt is
>> >> > foiled, since somewhere something isn't being updated to what my most
>> >> > current code actually says.
>> >> > Just to test, I made the 'getUsers' function return immediately with a
>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>> >> > other code spin wildly out of control and encounter errors, yet when I
>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>> >> > returning valid data, as if the 'return' wasn't there at all!
>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>> >> > referencing a non-existent attribute of a non-existent variable:
>> >> > madeUpVar.moo = 42
>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>> >> > encounter a NameError or something equally as realistic.  But I restart
>> >> > apache, and... nothing.  The line is completely ignored.
>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>> >> > rather the code being compiled is not the same as the code in play within
>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>> >> > the URL that triggers my python code, my .py files are in fact being
>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>> >> > aren't being reflected in my web server.
>> >> > These problems come and go, and I've go better explanation than over zealous
>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>> >> > the problem will have disappeared for the time being.
>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>> >> > that I can do to alleviate the issue, by to no avail.
>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>> >> > _______________________________________________
>> >> > Mod_python mailing list
>> >> > Mod_python@modpython.org
>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>> >> >
>> >> >
>> >
>
>
>
From graham.dumpleton at gmail.com  Sun Jan 11 22:25:43 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sun Jan 11 22:25:45 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
Message-ID: <88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>

2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> Apologies for more trouble on the caching issue-- I've been adapting
> some of my scripts over to this apache.load_module function, but I
> don't think I'm seeing resolution to the issue.  If I've read the
> documentation properly, it seems that the PythonOption for
> auto-reloading is set to On by default, so to be clear, I haven't put
> a line for that in my httpd.conf file.  Are there any other tricks, or
> have I simply misread the documentation?  I still have to restart the
> Apache service in order to push the changes.

Reloading does not work for any Python modules/packages installed in
standard Python module search path. Thus, if you have set PythonPath
to some directory where you store your modules, or if they are in
system site-packages directory, they are not candidates for reloading.

Where are the modules you are modifying and expecting to be reloading
located? Is that location on sys.path, or have you explicitly setup
mod_python module importer path to tell it where they are?

>From within running application, print out __name__ from the module
you have loaded and are expecting to be reloadable, What is it? Does
it look like a normal module name or something magic?

How was that module imported? There needs to be a chain from
mod_python handler for imports right down through to all modules you
want reloadable. If there aren't, for example, you are using
import_module() from a normal Python module which isn't a candidate
for reloading, you will not see the depth checking for reloading
occurring as you might expect.

Graham

> Tim
>
> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>> Despite the jab at Windows, the site will be deployed on a Unix
>> machine.  I just prefer Windows for ease of use, especially since my
>> wife has zero experience on a unix terminal or in the dearth of truly
>> professional software found on the Unix/Linux platform.  So yes, in
>> the end it will be on a "real" operating system,  But for now I'm
>> willingly sticking to a more user-friendly environment for the simple
>> folk.
>>
>> Given the characteristics of PHP that allow it to circumvent this
>> caching stuff, I still think a nice little friendly red-flag reminder
>> on the main mod_python tutorial should point out this limitation of an
>> Apache module like this, for those of us like me, who would have gone
>> many months more before having every accidentally found this manual
>> import method.
>>
>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>> <graham.dumpleton@gmail.com> wrote:
>>>
>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>> >> Still not short enough, so much so I stopped part way through.
>>> >
>>> > And for that I apologize.  I do appreciate the straight answer given,
>>> > though I would appreciate much more the addition of that fact in some
>>> > point-blank documentation that was easy to find.  I have scoured the
>>> > mod_python archives by search engine and came out utterly empty
>>> > handed.  I knew what the problem was, but I could find nothing to
>>> > remedy the issue.  I haven't encountered anything quite like this in
>>> > my adventures with PHP, perl, or other similar scripting languages
>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>> > should have found answers very quickly.
>>> >
>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>
>>> PHP is specifically designed for web applications and it purposely
>>> throws away all code at the end of each request and thus is reloading
>>> it all on every request. Have a read of:
>>>
>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>
>>> I would be very surprised if mod_perl auto reloaded code as it is
>>> similar to Python in that you are applying a non web language to the
>>> web. Only way perl code would be reload is if you were running them as
>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>> as well, but as with anything CGI, much slower.
>>>
>>> BTW, maybe read:
>>>
>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>
>>> For WSGI hosted Python web application, this provides auto reloading
>>> on code changes. You do need to use a real operating system though,
>>> and not Windows.
>>>
>>> Graham
>>>
>>> > Tim
>>> >
>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>> > <graham.dumpleton@gmail.com> wrote:
>>> >>
>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>> >> > Hello all-- I've been experiencing a caching issue from the
>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>> >> > and I keep running into actual issues that prevent me from coding.
>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>> >> > descriptive.
>>> >>
>>> >> Still not short enough, so much so I stopped part way through.
>>> >>
>>> >> The simple matter of it is that mod_python does not do deep checking
>>> >> of code for changes, nor does it automatically restart the process
>>> >> when code is changed. Thus the need to restart Apache when you make
>>> >> code changes to anything imported from sys.path is expected and normal
>>> >> behaviour.
>>> >>
>>> >> The only time any code is automatically reloaded is the direct code
>>> >> files imported by mod_python using its own special module importer.
>>> >> This is documented under 'import_module()' function in:
>>> >>
>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>> >>
>>> >> Graham
>>> >>
>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>> >> > know my code isn't to blame for the issue:
>>> >> > I write some basic code for an 'index.py' file, using the
>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>> >> >  On the other hand, any changes I make to the modules included via import
>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>> >> > my code finally gets pushed through to the web server.
>>> >> > I've been looking around practically every other day for documentation on
>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>> >> > since I have to restart my web server every single time I make even the
>>> >> > slightest change to a 'utility.py' file, etc.
>>> >> > I've been coping with the problem for a while now, but then I've found far
>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>> >> > an apache restart in order to take effect.
>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>> >> > function takes exactly 2.  This is outright false, since my function in
>>> >> > BACKEND looks like:
>>> >> > def getUsers(self, req, terms):
>>> >> >
>>> >> > and I'm calling it with
>>> >> > self.backend.getUsers(self.req, search)
>>> >> >
>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>> >> > foiled, since somewhere something isn't being updated to what my most
>>> >> > current code actually says.
>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>> >> > referencing a non-existent attribute of a non-existent variable:
>>> >> > madeUpVar.moo = 42
>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>> >> > apache, and... nothing.  The line is completely ignored.
>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>> >> > rather the code being compiled is not the same as the code in play within
>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>> >> > the URL that triggers my python code, my .py files are in fact being
>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>> >> > aren't being reflected in my web server.
>>> >> > These problems come and go, and I've go better explanation than over zealous
>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>> >> > the problem will have disappeared for the time being.
>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>> >> > that I can do to alleviate the issue, by to no avail.
>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>> >> > _______________________________________________
>>> >> > Mod_python mailing list
>>> >> > Mod_python@modpython.org
>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>> >> >
>>> >> >
>>> >
>>
>>
>>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From tonightslastsong at gmail.com  Sun Jan 11 23:35:08 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Sun Jan 11 23:35:11 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
Message-ID: <d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>

Okay, that makes sense.  My PythonPath system var definitely includes
my www directory.  I had been using a forced path in my apache conf
file to point to '~', for simple reference for the time being.

I think my problem is simply that the modules I'm trying to import
aren't 'candidates' for reloading.  Other than that, all other modules
should already have been chained together with these
apache.load_module calls.  My test case was pretty simple-- just two
scripts, the first loading the second.

Tim

On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> Apologies for more trouble on the caching issue-- I've been adapting
>> some of my scripts over to this apache.load_module function, but I
>> don't think I'm seeing resolution to the issue.  If I've read the
>> documentation properly, it seems that the PythonOption for
>> auto-reloading is set to On by default, so to be clear, I haven't put
>> a line for that in my httpd.conf file.  Are there any other tricks, or
>> have I simply misread the documentation?  I still have to restart the
>> Apache service in order to push the changes.
>
> Reloading does not work for any Python modules/packages installed in
> standard Python module search path. Thus, if you have set PythonPath
> to some directory where you store your modules, or if they are in
> system site-packages directory, they are not candidates for reloading.
>
> Where are the modules you are modifying and expecting to be reloading
> located? Is that location on sys.path, or have you explicitly setup
> mod_python module importer path to tell it where they are?
>
> From within running application, print out __name__ from the module
> you have loaded and are expecting to be reloadable, What is it? Does
> it look like a normal module name or something magic?
>
> How was that module imported? There needs to be a chain from
> mod_python handler for imports right down through to all modules you
> want reloadable. If there aren't, for example, you are using
> import_module() from a normal Python module which isn't a candidate
> for reloading, you will not see the depth checking for reloading
> occurring as you might expect.
>
> Graham
>
>> Tim
>>
>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>> Despite the jab at Windows, the site will be deployed on a Unix
>>> machine.  I just prefer Windows for ease of use, especially since my
>>> wife has zero experience on a unix terminal or in the dearth of truly
>>> professional software found on the Unix/Linux platform.  So yes, in
>>> the end it will be on a "real" operating system,  But for now I'm
>>> willingly sticking to a more user-friendly environment for the simple
>>> folk.
>>>
>>> Given the characteristics of PHP that allow it to circumvent this
>>> caching stuff, I still think a nice little friendly red-flag reminder
>>> on the main mod_python tutorial should point out this limitation of an
>>> Apache module like this, for those of us like me, who would have gone
>>> many months more before having every accidentally found this manual
>>> import method.
>>>
>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>> <graham.dumpleton@gmail.com> wrote:
>>>>
>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>> >> Still not short enough, so much so I stopped part way through.
>>>> >
>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>> > though I would appreciate much more the addition of that fact in some
>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>> > mod_python archives by search engine and came out utterly empty
>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>> > should have found answers very quickly.
>>>> >
>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>
>>>> PHP is specifically designed for web applications and it purposely
>>>> throws away all code at the end of each request and thus is reloading
>>>> it all on every request. Have a read of:
>>>>
>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>
>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>> similar to Python in that you are applying a non web language to the
>>>> web. Only way perl code would be reload is if you were running them as
>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>> as well, but as with anything CGI, much slower.
>>>>
>>>> BTW, maybe read:
>>>>
>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>
>>>> For WSGI hosted Python web application, this provides auto reloading
>>>> on code changes. You do need to use a real operating system though,
>>>> and not Windows.
>>>>
>>>> Graham
>>>>
>>>> > Tim
>>>> >
>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>> > <graham.dumpleton@gmail.com> wrote:
>>>> >>
>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>> >> > descriptive.
>>>> >>
>>>> >> Still not short enough, so much so I stopped part way through.
>>>> >>
>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>> >> of code for changes, nor does it automatically restart the process
>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>> >> code changes to anything imported from sys.path is expected and normal
>>>> >> behaviour.
>>>> >>
>>>> >> The only time any code is automatically reloaded is the direct code
>>>> >> files imported by mod_python using its own special module importer.
>>>> >> This is documented under 'import_module()' function in:
>>>> >>
>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>> >>
>>>> >> Graham
>>>> >>
>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>> >> > know my code isn't to blame for the issue:
>>>> >> > I write some basic code for an 'index.py' file, using the
>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>> >> > my code finally gets pushed through to the web server.
>>>> >> > I've been looking around practically every other day for documentation on
>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>> >> > since I have to restart my web server every single time I make even the
>>>> >> > slightest change to a 'utility.py' file, etc.
>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>> >> > an apache restart in order to take effect.
>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>> >> > BACKEND looks like:
>>>> >> > def getUsers(self, req, terms):
>>>> >> >
>>>> >> > and I'm calling it with
>>>> >> > self.backend.getUsers(self.req, search)
>>>> >> >
>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>> >> > current code actually says.
>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>> >> > madeUpVar.moo = 42
>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>> >> > rather the code being compiled is not the same as the code in play within
>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>> >> > aren't being reflected in my web server.
>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>> >> > the problem will have disappeared for the time being.
>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>> >> > _______________________________________________
>>>> >> > Mod_python mailing list
>>>> >> > Mod_python@modpython.org
>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>> >> >
>>>> >> >
>>>> >
>>>
>>>
>>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>
From graham.dumpleton at gmail.com  Sun Jan 11 23:39:08 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sun Jan 11 23:39:13 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
Message-ID: <88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>

2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> Okay, that makes sense.  My PythonPath system var definitely includes
> my www directory.

That in itself may not be enough to cause problem. You should actually
see a warning in Apache error log complaining you have done this. That
is, overlapped sys.path with directories that mod_python module
importer uses.

The real problem with doing this overlapping is that a module which
wasn't one managed by mod_python, ie., standard Python module, imports
something from the www directory, which also happens to be a handler
module, there will actually be too copies in memory and so can give
unexpected results.

Graham

> I had been using a forced path in my apache conf
> file to point to '~', for simple reference for the time being.
>
> I think my problem is simply that the modules I'm trying to import
> aren't 'candidates' for reloading.  Other than that, all other modules
> should already have been chained together with these
> apache.load_module calls.  My test case was pretty simple-- just two
> scripts, the first loading the second.
>
> Tim
>
> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>> Apologies for more trouble on the caching issue-- I've been adapting
>>> some of my scripts over to this apache.load_module function, but I
>>> don't think I'm seeing resolution to the issue.  If I've read the
>>> documentation properly, it seems that the PythonOption for
>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>> have I simply misread the documentation?  I still have to restart the
>>> Apache service in order to push the changes.
>>
>> Reloading does not work for any Python modules/packages installed in
>> standard Python module search path. Thus, if you have set PythonPath
>> to some directory where you store your modules, or if they are in
>> system site-packages directory, they are not candidates for reloading.
>>
>> Where are the modules you are modifying and expecting to be reloading
>> located? Is that location on sys.path, or have you explicitly setup
>> mod_python module importer path to tell it where they are?
>>
>> From within running application, print out __name__ from the module
>> you have loaded and are expecting to be reloadable, What is it? Does
>> it look like a normal module name or something magic?
>>
>> How was that module imported? There needs to be a chain from
>> mod_python handler for imports right down through to all modules you
>> want reloadable. If there aren't, for example, you are using
>> import_module() from a normal Python module which isn't a candidate
>> for reloading, you will not see the depth checking for reloading
>> occurring as you might expect.
>>
>> Graham
>>
>>> Tim
>>>
>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>> the end it will be on a "real" operating system,  But for now I'm
>>>> willingly sticking to a more user-friendly environment for the simple
>>>> folk.
>>>>
>>>> Given the characteristics of PHP that allow it to circumvent this
>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>> on the main mod_python tutorial should point out this limitation of an
>>>> Apache module like this, for those of us like me, who would have gone
>>>> many months more before having every accidentally found this manual
>>>> import method.
>>>>
>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>> <graham.dumpleton@gmail.com> wrote:
>>>>>
>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>> >
>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>>> > though I would appreciate much more the addition of that fact in some
>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>>> > mod_python archives by search engine and came out utterly empty
>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>>> > should have found answers very quickly.
>>>>> >
>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>>
>>>>> PHP is specifically designed for web applications and it purposely
>>>>> throws away all code at the end of each request and thus is reloading
>>>>> it all on every request. Have a read of:
>>>>>
>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>>
>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>>> similar to Python in that you are applying a non web language to the
>>>>> web. Only way perl code would be reload is if you were running them as
>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>>> as well, but as with anything CGI, much slower.
>>>>>
>>>>> BTW, maybe read:
>>>>>
>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>>
>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>>> on code changes. You do need to use a real operating system though,
>>>>> and not Windows.
>>>>>
>>>>> Graham
>>>>>
>>>>> > Tim
>>>>> >
>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>> >>
>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>>> >> > descriptive.
>>>>> >>
>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>> >>
>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>>> >> of code for changes, nor does it automatically restart the process
>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>>> >> behaviour.
>>>>> >>
>>>>> >> The only time any code is automatically reloaded is the direct code
>>>>> >> files imported by mod_python using its own special module importer.
>>>>> >> This is documented under 'import_module()' function in:
>>>>> >>
>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>>> >>
>>>>> >> Graham
>>>>> >>
>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>>> >> > know my code isn't to blame for the issue:
>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>>> >> > my code finally gets pushed through to the web server.
>>>>> >> > I've been looking around practically every other day for documentation on
>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>>> >> > since I have to restart my web server every single time I make even the
>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>>> >> > an apache restart in order to take effect.
>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>>> >> > BACKEND looks like:
>>>>> >> > def getUsers(self, req, terms):
>>>>> >> >
>>>>> >> > and I'm calling it with
>>>>> >> > self.backend.getUsers(self.req, search)
>>>>> >> >
>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>>> >> > current code actually says.
>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>>> >> > madeUpVar.moo = 42
>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>>> >> > aren't being reflected in my web server.
>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>>> >> > the problem will have disappeared for the time being.
>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>>> >> > _______________________________________________
>>>>> >> > Mod_python mailing list
>>>>> >> > Mod_python@modpython.org
>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>> >> >
>>>>> >> >
>>>>> >
>>>>
>>>>
>>>>
>>> _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>
>>
>
From tonightslastsong at gmail.com  Mon Jan 12 00:15:45 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Mon Jan 12 00:15:50 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
Message-ID: <d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>

Okay, I think I'm on the same page as you now-- I've been playing
around with it and it seems that when I leave my PythonPath to find my
import modules, I definitely get no auto reloading goodness, while
when I specify the root path to find them as files, rather than as
modules (as explained in that documentation you linked to), things
seem to work as expected.

I wasn't getting any warnings in my apache log, and after putting
together the details, I shouldn't be expecting any of that behavior
with two of the same module in memory.  My issue seems to be simply in
avoiding letting my PythonPath find my code.

Thank you much,
Tim

On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> Okay, that makes sense.  My PythonPath system var definitely includes
>> my www directory.
>
> That in itself may not be enough to cause problem. You should actually
> see a warning in Apache error log complaining you have done this. That
> is, overlapped sys.path with directories that mod_python module
> importer uses.
>
> The real problem with doing this overlapping is that a module which
> wasn't one managed by mod_python, ie., standard Python module, imports
> something from the www directory, which also happens to be a handler
> module, there will actually be too copies in memory and so can give
> unexpected results.
>
> Graham
>
>> I had been using a forced path in my apache conf
>> file to point to '~', for simple reference for the time being.
>>
>> I think my problem is simply that the modules I'm trying to import
>> aren't 'candidates' for reloading.  Other than that, all other modules
>> should already have been chained together with these
>> apache.load_module calls.  My test case was pretty simple-- just two
>> scripts, the first loading the second.
>>
>> Tim
>>
>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>> <graham.dumpleton@gmail.com> wrote:
>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>>> some of my scripts over to this apache.load_module function, but I
>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>>> documentation properly, it seems that the PythonOption for
>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>>> have I simply misread the documentation?  I still have to restart the
>>>> Apache service in order to push the changes.
>>>
>>> Reloading does not work for any Python modules/packages installed in
>>> standard Python module search path. Thus, if you have set PythonPath
>>> to some directory where you store your modules, or if they are in
>>> system site-packages directory, they are not candidates for reloading.
>>>
>>> Where are the modules you are modifying and expecting to be reloading
>>> located? Is that location on sys.path, or have you explicitly setup
>>> mod_python module importer path to tell it where they are?
>>>
>>> From within running application, print out __name__ from the module
>>> you have loaded and are expecting to be reloadable, What is it? Does
>>> it look like a normal module name or something magic?
>>>
>>> How was that module imported? There needs to be a chain from
>>> mod_python handler for imports right down through to all modules you
>>> want reloadable. If there aren't, for example, you are using
>>> import_module() from a normal Python module which isn't a candidate
>>> for reloading, you will not see the depth checking for reloading
>>> occurring as you might expect.
>>>
>>> Graham
>>>
>>>> Tim
>>>>
>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>>> the end it will be on a "real" operating system,  But for now I'm
>>>>> willingly sticking to a more user-friendly environment for the simple
>>>>> folk.
>>>>>
>>>>> Given the characteristics of PHP that allow it to circumvent this
>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>>> on the main mod_python tutorial should point out this limitation of an
>>>>> Apache module like this, for those of us like me, who would have gone
>>>>> many months more before having every accidentally found this manual
>>>>> import method.
>>>>>
>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>>> <graham.dumpleton@gmail.com> wrote:
>>>>>>
>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>> >
>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>>>> > though I would appreciate much more the addition of that fact in some
>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>>>> > mod_python archives by search engine and came out utterly empty
>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>>>> > should have found answers very quickly.
>>>>>> >
>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>>>
>>>>>> PHP is specifically designed for web applications and it purposely
>>>>>> throws away all code at the end of each request and thus is reloading
>>>>>> it all on every request. Have a read of:
>>>>>>
>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>>>
>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>>>> similar to Python in that you are applying a non web language to the
>>>>>> web. Only way perl code would be reload is if you were running them as
>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>>>> as well, but as with anything CGI, much slower.
>>>>>>
>>>>>> BTW, maybe read:
>>>>>>
>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>>>
>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>>>> on code changes. You do need to use a real operating system though,
>>>>>> and not Windows.
>>>>>>
>>>>>> Graham
>>>>>>
>>>>>> > Tim
>>>>>> >
>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>> >>
>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>>>> >> > descriptive.
>>>>>> >>
>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>> >>
>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>>>> >> of code for changes, nor does it automatically restart the process
>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>>>> >> behaviour.
>>>>>> >>
>>>>>> >> The only time any code is automatically reloaded is the direct code
>>>>>> >> files imported by mod_python using its own special module importer.
>>>>>> >> This is documented under 'import_module()' function in:
>>>>>> >>
>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>>>> >>
>>>>>> >> Graham
>>>>>> >>
>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>>>> >> > know my code isn't to blame for the issue:
>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>>>> >> > my code finally gets pushed through to the web server.
>>>>>> >> > I've been looking around practically every other day for documentation on
>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>>>> >> > since I have to restart my web server every single time I make even the
>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>>>> >> > an apache restart in order to take effect.
>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>>>> >> > BACKEND looks like:
>>>>>> >> > def getUsers(self, req, terms):
>>>>>> >> >
>>>>>> >> > and I'm calling it with
>>>>>> >> > self.backend.getUsers(self.req, search)
>>>>>> >> >
>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>>>> >> > current code actually says.
>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>>>> >> > madeUpVar.moo = 42
>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>>>> >> > aren't being reflected in my web server.
>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>>>> >> > the problem will have disappeared for the time being.
>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>>>> >> > _______________________________________________
>>>>>> >> > Mod_python mailing list
>>>>>> >> > Mod_python@modpython.org
>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>> >> >
>>>>>> >> >
>>>>>> >
>>>>>
>>>>>
>>>>>
>>>> _______________________________________________
>>>> Mod_python mailing list
>>>> Mod_python@modpython.org
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>
>>>
>>
>
From graham.dumpleton at gmail.com  Mon Jan 12 00:19:52 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Mon Jan 12 00:19:57 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901102123y310bf9fsdedcf0f08c145215@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
Message-ID: <88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>

Now you do realise you don't need to convert 'import' to
import_module() everywhere?

The 'import' directive when used inside a file which was already
managed by mod_python calls import_module() internally anyway.

You just need to ensure you set mod_python's own module search path,
ie. mod_python.importer.path

Graham

2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> Okay, I think I'm on the same page as you now-- I've been playing
> around with it and it seems that when I leave my PythonPath to find my
> import modules, I definitely get no auto reloading goodness, while
> when I specify the root path to find them as files, rather than as
> modules (as explained in that documentation you linked to), things
> seem to work as expected.
>
> I wasn't getting any warnings in my apache log, and after putting
> together the details, I shouldn't be expecting any of that behavior
> with two of the same module in memory.  My issue seems to be simply in
> avoiding letting my PythonPath find my code.
>
> Thank you much,
> Tim
>
> On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>> Okay, that makes sense.  My PythonPath system var definitely includes
>>> my www directory.
>>
>> That in itself may not be enough to cause problem. You should actually
>> see a warning in Apache error log complaining you have done this. That
>> is, overlapped sys.path with directories that mod_python module
>> importer uses.
>>
>> The real problem with doing this overlapping is that a module which
>> wasn't one managed by mod_python, ie., standard Python module, imports
>> something from the www directory, which also happens to be a handler
>> module, there will actually be too copies in memory and so can give
>> unexpected results.
>>
>> Graham
>>
>>> I had been using a forced path in my apache conf
>>> file to point to '~', for simple reference for the time being.
>>>
>>> I think my problem is simply that the modules I'm trying to import
>>> aren't 'candidates' for reloading.  Other than that, all other modules
>>> should already have been chained together with these
>>> apache.load_module calls.  My test case was pretty simple-- just two
>>> scripts, the first loading the second.
>>>
>>> Tim
>>>
>>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>>> <graham.dumpleton@gmail.com> wrote:
>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>>>> some of my scripts over to this apache.load_module function, but I
>>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>>>> documentation properly, it seems that the PythonOption for
>>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>>>> have I simply misread the documentation?  I still have to restart the
>>>>> Apache service in order to push the changes.
>>>>
>>>> Reloading does not work for any Python modules/packages installed in
>>>> standard Python module search path. Thus, if you have set PythonPath
>>>> to some directory where you store your modules, or if they are in
>>>> system site-packages directory, they are not candidates for reloading.
>>>>
>>>> Where are the modules you are modifying and expecting to be reloading
>>>> located? Is that location on sys.path, or have you explicitly setup
>>>> mod_python module importer path to tell it where they are?
>>>>
>>>> From within running application, print out __name__ from the module
>>>> you have loaded and are expecting to be reloadable, What is it? Does
>>>> it look like a normal module name or something magic?
>>>>
>>>> How was that module imported? There needs to be a chain from
>>>> mod_python handler for imports right down through to all modules you
>>>> want reloadable. If there aren't, for example, you are using
>>>> import_module() from a normal Python module which isn't a candidate
>>>> for reloading, you will not see the depth checking for reloading
>>>> occurring as you might expect.
>>>>
>>>> Graham
>>>>
>>>>> Tim
>>>>>
>>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>>>> the end it will be on a "real" operating system,  But for now I'm
>>>>>> willingly sticking to a more user-friendly environment for the simple
>>>>>> folk.
>>>>>>
>>>>>> Given the characteristics of PHP that allow it to circumvent this
>>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>>>> on the main mod_python tutorial should point out this limitation of an
>>>>>> Apache module like this, for those of us like me, who would have gone
>>>>>> many months more before having every accidentally found this manual
>>>>>> import method.
>>>>>>
>>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>>>> <graham.dumpleton@gmail.com> wrote:
>>>>>>>
>>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>>> >
>>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>>>>> > though I would appreciate much more the addition of that fact in some
>>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>>>>> > mod_python archives by search engine and came out utterly empty
>>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>>>>> > should have found answers very quickly.
>>>>>>> >
>>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>>>>
>>>>>>> PHP is specifically designed for web applications and it purposely
>>>>>>> throws away all code at the end of each request and thus is reloading
>>>>>>> it all on every request. Have a read of:
>>>>>>>
>>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>>>>
>>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>>>>> similar to Python in that you are applying a non web language to the
>>>>>>> web. Only way perl code would be reload is if you were running them as
>>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>>>>> as well, but as with anything CGI, much slower.
>>>>>>>
>>>>>>> BTW, maybe read:
>>>>>>>
>>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>>>>
>>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>>>>> on code changes. You do need to use a real operating system though,
>>>>>>> and not Windows.
>>>>>>>
>>>>>>> Graham
>>>>>>>
>>>>>>> > Tim
>>>>>>> >
>>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>>> >>
>>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>>>>> >> > descriptive.
>>>>>>> >>
>>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>>> >>
>>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>>>>> >> of code for changes, nor does it automatically restart the process
>>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>>>>> >> behaviour.
>>>>>>> >>
>>>>>>> >> The only time any code is automatically reloaded is the direct code
>>>>>>> >> files imported by mod_python using its own special module importer.
>>>>>>> >> This is documented under 'import_module()' function in:
>>>>>>> >>
>>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>>>>> >>
>>>>>>> >> Graham
>>>>>>> >>
>>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>>>>> >> > know my code isn't to blame for the issue:
>>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>>>>> >> > my code finally gets pushed through to the web server.
>>>>>>> >> > I've been looking around practically every other day for documentation on
>>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>>>>> >> > since I have to restart my web server every single time I make even the
>>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>>>>> >> > an apache restart in order to take effect.
>>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>>>>> >> > BACKEND looks like:
>>>>>>> >> > def getUsers(self, req, terms):
>>>>>>> >> >
>>>>>>> >> > and I'm calling it with
>>>>>>> >> > self.backend.getUsers(self.req, search)
>>>>>>> >> >
>>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>>>>> >> > current code actually says.
>>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>>>>> >> > madeUpVar.moo = 42
>>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>>>>> >> > aren't being reflected in my web server.
>>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>>>>> >> > the problem will have disappeared for the time being.
>>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>>>>> >> > _______________________________________________
>>>>>>> >> > Mod_python mailing list
>>>>>>> >> > Mod_python@modpython.org
>>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>>> >> >
>>>>>>> >> >
>>>>>>> >
>>>>>>
>>>>>>
>>>>>>
>>>>> _______________________________________________
>>>>> Mod_python mailing list
>>>>> Mod_python@modpython.org
>>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>
>>>>
>>>
>>
>
From tonightslastsong at gmail.com  Tue Jan 13 00:17:46 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Tue Jan 13 00:17:52 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<d01b8cf20901111316g7394079dqb61b650a4c08f90f@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
Message-ID: <d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>

> You just need to ensure you set mod_python's own module search path,
> ie. mod_python.importer.path

And yet, as I've now removed my www directory from my PythonPath, I
actually get limited functionality out of the mod_python imports.
I've got my apache conf file globally applying the option:

	PythonOption mod_python.importer.path "['~']"
Also have tried using an absolute path, which is producing the same
functionality:
	PythonOption mod_python.importer.path "['V:/www/']"

My main module ('A') is requested by Apache in my browser, which uses
import_module to find and import file B.  File B is in the same
directory as A, and they only way it was found was through my apache
conf noted above.  This part works just fine, but two cases develop
from here:

1) If I use module B to import a third module 'C', I can't seem to
make it find module C if it's in a subdirectory.  For instance, doing
either 'import subDirectory.moduleC' or doing
'apache.import_module("subDirectory/moduleC")' results in a failure to
find the module.  Note that in this case of subdirectories, I'm
intentionally avoiding absolute paths to reach my modules.  I only
want to get absolute in my Apache conf.  On the flip side, if module C
is in the same local directory as A and B, then mod_python finds
module C just fine.

2 ) If I place C in the same directory as A and B, so that mod_python
finds it, I tried using the natural Python 'import' keyword in B to
import C.  According to what I understand, this should be fine for
auto-reloading, since A imports B via import_module, and so then B can
use either importing strategy to get C in the picture because
mod_python uses import_module behind the scenes anyway.  In this
setup, my caching issue remains, and changes to C are definitely not
reflected in apache until a server restart.  Again note that it
doesn't matter if I make B use the 'import' keyword or the
apache.import_module() method.  Both result in failure to reload.

I can't seem to diagnose what's even wrong, since the only reason
module A, B, or C is being found in the first place is because of my
importer.path variable is set in httpd.conf.  I've been using
practically empty files to test this.  Each file contains no more than
5 lines to get the modules imported and then to write out a
confirmation to the screen that it worked.

Wisdom to offer?

> Now you do realise you don't need to convert 'import' to
> import_module() everywhere?
>
> The 'import' directive when used inside a file which was already
> managed by mod_python calls import_module() internally anyway.
>
> You just need to ensure you set mod_python's own module search path,
> ie. mod_python.importer.path
>
> Graham
>
> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> > Okay, I think I'm on the same page as you now-- I've been playing
> > around with it and it seems that when I leave my PythonPath to find my
> > import modules, I definitely get no auto reloading goodness, while
> > when I specify the root path to find them as files, rather than as
> > modules (as explained in that documentation you linked to), things
> > seem to work as expected.
> >
> > I wasn't getting any warnings in my apache log, and after putting
> > together the details, I shouldn't be expecting any of that behavior
> > with two of the same module in memory.  My issue seems to be simply in
> > avoiding letting my PythonPath find my code.
> >
> > Thank you much,
> > Tim
> >
> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
> > <graham.dumpleton@gmail.com> wrote:
> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> >>> Okay, that makes sense.  My PythonPath system var definitely includes
> >>> my www directory.
> >>
> >> That in itself may not be enough to cause problem. You should actually
> >> see a warning in Apache error log complaining you have done this. That
> >> is, overlapped sys.path with directories that mod_python module
> >> importer uses.
> >>
> >> The real problem with doing this overlapping is that a module which
> >> wasn't one managed by mod_python, ie., standard Python module, imports
> >> something from the www directory, which also happens to be a handler
> >> module, there will actually be too copies in memory and so can give
> >> unexpected results.
> >>
> >> Graham
> >>
> >>> I had been using a forced path in my apache conf
> >>> file to point to '~', for simple reference for the time being.
> >>>
> >>> I think my problem is simply that the modules I'm trying to import
> >>> aren't 'candidates' for reloading.  Other than that, all other modules
> >>> should already have been chained together with these
> >>> apache.load_module calls.  My test case was pretty simple-- just two
> >>> scripts, the first loading the second.
> >>>
> >>> Tim
> >>>
> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
> >>> <graham.dumpleton@gmail.com> wrote:
> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
> >>>>> some of my scripts over to this apache.load_module function, but I
> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
> >>>>> documentation properly, it seems that the PythonOption for
> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
> >>>>> have I simply misread the documentation?  I still have to restart the
> >>>>> Apache service in order to push the changes.
> >>>>
> >>>> Reloading does not work for any Python modules/packages installed in
> >>>> standard Python module search path. Thus, if you have set PythonPath
> >>>> to some directory where you store your modules, or if they are in
> >>>> system site-packages directory, they are not candidates for reloading.
> >>>>
> >>>> Where are the modules you are modifying and expecting to be reloading
> >>>> located? Is that location on sys.path, or have you explicitly setup
> >>>> mod_python module importer path to tell it where they are?
> >>>>
> >>>> From within running application, print out __name__ from the module
> >>>> you have loaded and are expecting to be reloadable, What is it? Does
> >>>> it look like a normal module name or something magic?
> >>>>
> >>>> How was that module imported? There needs to be a chain from
> >>>> mod_python handler for imports right down through to all modules you
> >>>> want reloadable. If there aren't, for example, you are using
> >>>> import_module() from a normal Python module which isn't a candidate
> >>>> for reloading, you will not see the depth checking for reloading
> >>>> occurring as you might expect.
> >>>>
> >>>> Graham
> >>>>
> >>>>> Tim
> >>>>>
> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
> >>>>>> the end it will be on a "real" operating system,  But for now I'm
> >>>>>> willingly sticking to a more user-friendly environment for the simple
> >>>>>> folk.
> >>>>>>
> >>>>>> Given the characteristics of PHP that allow it to circumvent this
> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
> >>>>>> on the main mod_python tutorial should point out this limitation of an
> >>>>>> Apache module like this, for those of us like me, who would have gone
> >>>>>> many months more before having every accidentally found this manual
> >>>>>> import method.
> >>>>>>
> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
> >>>>>> <graham.dumpleton@gmail.com> wrote:
> >>>>>>>
> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
> >>>>>>> >> Still not short enough, so much so I stopped part way through.
> >>>>>>> >
> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
> >>>>>>> > though I would appreciate much more the addition of that fact in some
> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
> >>>>>>> > mod_python archives by search engine and came out utterly empty
> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
> >>>>>>> > should have found answers very quickly.
> >>>>>>> >
> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
> >>>>>>>
> >>>>>>> PHP is specifically designed for web applications and it purposely
> >>>>>>> throws away all code at the end of each request and thus is reloading
> >>>>>>> it all on every request. Have a read of:
> >>>>>>>
> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
> >>>>>>>
> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
> >>>>>>> similar to Python in that you are applying a non web language to the
> >>>>>>> web. Only way perl code would be reload is if you were running them as
> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
> >>>>>>> as well, but as with anything CGI, much slower.
> >>>>>>>
> >>>>>>> BTW, maybe read:
> >>>>>>>
> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
> >>>>>>>
> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
> >>>>>>> on code changes. You do need to use a real operating system though,
> >>>>>>> and not Windows.
> >>>>>>>
> >>>>>>> Graham
> >>>>>>>
> >>>>>>> > Tim
> >>>>>>> >
> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
> >>>>>>> >>
> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
> >>>>>>> >> > descriptive.
> >>>>>>> >>
> >>>>>>> >> Still not short enough, so much so I stopped part way through.
> >>>>>>> >>
> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
> >>>>>>> >> of code for changes, nor does it automatically restart the process
> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
> >>>>>>> >> behaviour.
> >>>>>>> >>
> >>>>>>> >> The only time any code is automatically reloaded is the direct code
> >>>>>>> >> files imported by mod_python using its own special module importer.
> >>>>>>> >> This is documented under 'import_module()' function in:
> >>>>>>> >>
> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
> >>>>>>> >>
> >>>>>>> >> Graham
> >>>>>>> >>
> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
> >>>>>>> >> > know my code isn't to blame for the issue:
> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
> >>>>>>> >> > my code finally gets pushed through to the web server.
> >>>>>>> >> > I've been looking around practically every other day for documentation on
> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
> >>>>>>> >> > since I have to restart my web server every single time I make even the
> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
> >>>>>>> >> > an apache restart in order to take effect.
> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
> >>>>>>> >> > BACKEND looks like:
> >>>>>>> >> > def getUsers(self, req, terms):
> >>>>>>> >> >
> >>>>>>> >> > and I'm calling it with
> >>>>>>> >> > self.backend.getUsers(self.req, search)
> >>>>>>> >> >
> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
> >>>>>>> >> > current code actually says.
> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
> >>>>>>> >> > madeUpVar.moo = 42
> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
> >>>>>>> >> > aren't being reflected in my web server.
> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
> >>>>>>> >> > the problem will have disappeared for the time being.
> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
> >>>>>>> >> > _______________________________________________
> >>>>>>> >> > Mod_python mailing list
> >>>>>>> >> > Mod_python@modpython.org
> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >>>>>>> >> >
> >>>>>>> >> >
> >>>>>>> >
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>> _______________________________________________
> >>>>> Mod_python mailing list
> >>>>> Mod_python@modpython.org
> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
From tonightslastsong at gmail.com  Tue Jan 13 00:25:46 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Tue Jan 13 00:25:51 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
Message-ID: <d01b8cf20901122125j5502baf4j9ad7ab529ff40ef9@mail.gmail.com>

Ah, I've seemed to produce the most lethal of the side effects:  Upon
making B use 'import_module()', while C is in a subdirectory, C is
completely immune to changes.  It claims it finds C now, but C is
completely overlooked in execution.  C is supposed to write out text
to my browser, yet nothing shows up at all.  I imagine an empty
version of C is cached somewhere, and restarting Apache does nothing
to solve the issue.  C is still empty as far as Apache knows.

On Mon, Jan 12, 2009 at 10:17 PM, Tim Valenta
<tonightslastsong@gmail.com> wrote:
>> You just need to ensure you set mod_python's own module search path,
>> ie. mod_python.importer.path
>
> And yet, as I've now removed my www directory from my PythonPath, I
> actually get limited functionality out of the mod_python imports.
> I've got my apache conf file globally applying the option:
>
>        PythonOption mod_python.importer.path "['~']"
> Also have tried using an absolute path, which is producing the same
> functionality:
>        PythonOption mod_python.importer.path "['V:/www/']"
>
> My main module ('A') is requested by Apache in my browser, which uses
> import_module to find and import file B.  File B is in the same
> directory as A, and they only way it was found was through my apache
> conf noted above.  This part works just fine, but two cases develop
> from here:
>
> 1) If I use module B to import a third module 'C', I can't seem to
> make it find module C if it's in a subdirectory.  For instance, doing
> either 'import subDirectory.moduleC' or doing
> 'apache.import_module("subDirectory/moduleC")' results in a failure to
> find the module.  Note that in this case of subdirectories, I'm
> intentionally avoiding absolute paths to reach my modules.  I only
> want to get absolute in my Apache conf.  On the flip side, if module C
> is in the same local directory as A and B, then mod_python finds
> module C just fine.
>
> 2 ) If I place C in the same directory as A and B, so that mod_python
> finds it, I tried using the natural Python 'import' keyword in B to
> import C.  According to what I understand, this should be fine for
> auto-reloading, since A imports B via import_module, and so then B can
> use either importing strategy to get C in the picture because
> mod_python uses import_module behind the scenes anyway.  In this
> setup, my caching issue remains, and changes to C are definitely not
> reflected in apache until a server restart.  Again note that it
> doesn't matter if I make B use the 'import' keyword or the
> apache.import_module() method.  Both result in failure to reload.
>
> I can't seem to diagnose what's even wrong, since the only reason
> module A, B, or C is being found in the first place is because of my
> importer.path variable is set in httpd.conf.  I've been using
> practically empty files to test this.  Each file contains no more than
> 5 lines to get the modules imported and then to write out a
> confirmation to the screen that it worked.
>
> Wisdom to offer?
>
>> Now you do realise you don't need to convert 'import' to
>> import_module() everywhere?
>>
>> The 'import' directive when used inside a file which was already
>> managed by mod_python calls import_module() internally anyway.
>>
>> You just need to ensure you set mod_python's own module search path,
>> ie. mod_python.importer.path
>>
>> Graham
>>
>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> > Okay, I think I'm on the same page as you now-- I've been playing
>> > around with it and it seems that when I leave my PythonPath to find my
>> > import modules, I definitely get no auto reloading goodness, while
>> > when I specify the root path to find them as files, rather than as
>> > modules (as explained in that documentation you linked to), things
>> > seem to work as expected.
>> >
>> > I wasn't getting any warnings in my apache log, and after putting
>> > together the details, I shouldn't be expecting any of that behavior
>> > with two of the same module in memory.  My issue seems to be simply in
>> > avoiding letting my PythonPath find my code.
>> >
>> > Thank you much,
>> > Tim
>> >
>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>> > <graham.dumpleton@gmail.com> wrote:
>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>> >>> my www directory.
>> >>
>> >> That in itself may not be enough to cause problem. You should actually
>> >> see a warning in Apache error log complaining you have done this. That
>> >> is, overlapped sys.path with directories that mod_python module
>> >> importer uses.
>> >>
>> >> The real problem with doing this overlapping is that a module which
>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>> >> something from the www directory, which also happens to be a handler
>> >> module, there will actually be too copies in memory and so can give
>> >> unexpected results.
>> >>
>> >> Graham
>> >>
>> >>> I had been using a forced path in my apache conf
>> >>> file to point to '~', for simple reference for the time being.
>> >>>
>> >>> I think my problem is simply that the modules I'm trying to import
>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>> >>> should already have been chained together with these
>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>> >>> scripts, the first loading the second.
>> >>>
>> >>> Tim
>> >>>
>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>> >>> <graham.dumpleton@gmail.com> wrote:
>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>> >>>>> some of my scripts over to this apache.load_module function, but I
>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>> >>>>> documentation properly, it seems that the PythonOption for
>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>> >>>>> have I simply misread the documentation?  I still have to restart the
>> >>>>> Apache service in order to push the changes.
>> >>>>
>> >>>> Reloading does not work for any Python modules/packages installed in
>> >>>> standard Python module search path. Thus, if you have set PythonPath
>> >>>> to some directory where you store your modules, or if they are in
>> >>>> system site-packages directory, they are not candidates for reloading.
>> >>>>
>> >>>> Where are the modules you are modifying and expecting to be reloading
>> >>>> located? Is that location on sys.path, or have you explicitly setup
>> >>>> mod_python module importer path to tell it where they are?
>> >>>>
>> >>>> From within running application, print out __name__ from the module
>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>> >>>> it look like a normal module name or something magic?
>> >>>>
>> >>>> How was that module imported? There needs to be a chain from
>> >>>> mod_python handler for imports right down through to all modules you
>> >>>> want reloadable. If there aren't, for example, you are using
>> >>>> import_module() from a normal Python module which isn't a candidate
>> >>>> for reloading, you will not see the depth checking for reloading
>> >>>> occurring as you might expect.
>> >>>>
>> >>>> Graham
>> >>>>
>> >>>>> Tim
>> >>>>>
>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>> >>>>>> folk.
>> >>>>>>
>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>> >>>>>> Apache module like this, for those of us like me, who would have gone
>> >>>>>> many months more before having every accidentally found this manual
>> >>>>>> import method.
>> >>>>>>
>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>> >>>>>>>
>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>> >>>>>>> >
>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>> >>>>>>> > should have found answers very quickly.
>> >>>>>>> >
>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>> >>>>>>>
>> >>>>>>> PHP is specifically designed for web applications and it purposely
>> >>>>>>> throws away all code at the end of each request and thus is reloading
>> >>>>>>> it all on every request. Have a read of:
>> >>>>>>>
>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>> >>>>>>>
>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>> >>>>>>> similar to Python in that you are applying a non web language to the
>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>> >>>>>>> as well, but as with anything CGI, much slower.
>> >>>>>>>
>> >>>>>>> BTW, maybe read:
>> >>>>>>>
>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>> >>>>>>>
>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>> >>>>>>> on code changes. You do need to use a real operating system though,
>> >>>>>>> and not Windows.
>> >>>>>>>
>> >>>>>>> Graham
>> >>>>>>>
>> >>>>>>> > Tim
>> >>>>>>> >
>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>> >>>>>>> >>
>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>> >>>>>>> >> > descriptive.
>> >>>>>>> >>
>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>> >>>>>>> >>
>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>> >>>>>>> >> behaviour.
>> >>>>>>> >>
>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>> >>>>>>> >> files imported by mod_python using its own special module importer.
>> >>>>>>> >> This is documented under 'import_module()' function in:
>> >>>>>>> >>
>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>> >>>>>>> >>
>> >>>>>>> >> Graham
>> >>>>>>> >>
>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>> >>>>>>> >> > know my code isn't to blame for the issue:
>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>> >>>>>>> >> > my code finally gets pushed through to the web server.
>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>> >>>>>>> >> > an apache restart in order to take effect.
>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>> >>>>>>> >> > BACKEND looks like:
>> >>>>>>> >> > def getUsers(self, req, terms):
>> >>>>>>> >> >
>> >>>>>>> >> > and I'm calling it with
>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>> >>>>>>> >> >
>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>> >>>>>>> >> > current code actually says.
>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>> >>>>>>> >> > madeUpVar.moo = 42
>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>> >>>>>>> >> > aren't being reflected in my web server.
>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>> >>>>>>> >> > the problem will have disappeared for the time being.
>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>> >>>>>>> >> > _______________________________________________
>> >>>>>>> >> > Mod_python mailing list
>> >>>>>>> >> > Mod_python@modpython.org
>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>> >>>>>>> >> >
>> >>>>>>> >> >
>> >>>>>>> >
>> >>>>>>
>> >>>>>>
>> >>>>>>
>> >>>>> _______________________________________________
>> >>>>> Mod_python mailing list
>> >>>>> Mod_python@modpython.org
>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>



-- 
"Thanksgiving Dinner sent you a message."
"If you are not a member, you need to join us."
"i was not declared before this scope."
From graham.dumpleton at gmail.com  Tue Jan 13 00:40:49 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Tue Jan 13 00:40:57 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901111323m549916aet1dc02eec890cef46@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
Message-ID: <88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>

2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>> You just need to ensure you set mod_python's own module search path,
>> ie. mod_python.importer.path
>
> And yet, as I've now removed my www directory from my PythonPath, I
> actually get limited functionality out of the mod_python imports.
> I've got my apache conf file globally applying the option:
>
>        PythonOption mod_python.importer.path "['~']"
> Also have tried using an absolute path, which is producing the same
> functionality:
>        PythonOption mod_python.importer.path "['V:/www/']"
>
> My main module ('A') is requested by Apache in my browser, which uses
> import_module to find and import file B.  File B is in the same
> directory as A, and they only way it was found was through my apache
> conf noted above.  This part works just fine, but two cases develop
> from here:
>
> 1) If I use module B to import a third module 'C', I can't seem to
> make it find module C if it's in a subdirectory.  For instance, doing
> either 'import subDirectory.moduleC' or doing
> 'apache.import_module("subDirectory/moduleC")' results in a failure to
> find the module.  Note that in this case of subdirectories, I'm
> intentionally avoiding absolute paths to reach my modules.  I only
> want to get absolute in my Apache conf.  On the flip side, if module C
> is in the same local directory as A and B, then mod_python finds
> module C just fine.

Try:

  apache.import_module("./subDirectory/moduleC.py")

> 2 ) If I place C in the same directory as A and B, so that mod_python
> finds it, I tried using the natural Python 'import' keyword in B to
> import C.  According to what I understand, this should be fine for
> auto-reloading, since A imports B via import_module, and so then B can
> use either importing strategy to get C in the picture because
> mod_python uses import_module behind the scenes anyway.  In this
> setup, my caching issue remains, and changes to C are definitely not
> reflected in apache until a server restart.  Again note that it
> doesn't matter if I make B use the 'import' keyword or the
> apache.import_module() method.  Both result in failure to reload.
>
> I can't seem to diagnose what's even wrong, since the only reason
> module A, B, or C is being found in the first place is because of my
> importer.path variable is set in httpd.conf.  I've been using
> practically empty files to test this.  Each file contains no more than
> 5 lines to get the modules imported and then to write out a
> confirmation to the screen that it worked.
>
> Wisdom to offer?

Yes, from memory the module importer isn't properly case insensitive
on Windows or MacOS X where file systems is case insensitive. Thus,
make sure your imports match exactly the case of the directories/files
in the file system.

Also, use:

  from mod_python import apache
  apache.log_error('__name__ = %s' % repr(__name__))
  apache.log_error('__file__ = %s' % repr(__file__))

in modules so that information about imported files is logged as
imported. This will tell you which files are being imported.

With PythonDebug On you should also see messages in Apache error logs
describing when they are being imported, initially and when changed.

You can also write some code which extracts out of the mod_python
importer cache the details of everything that has been loaded and the
relationships. The function to call is:

  from mod_python import apache
  data = apache.request_modules_graph()

write that to a file and run:

  http://www.graphviz.org/
  http://www.graphviz.org/Download_windows.php

on it.

Graham

>> Now you do realise you don't need to convert 'import' to
>> import_module() everywhere?
>>
>> The 'import' directive when used inside a file which was already
>> managed by mod_python calls import_module() internally anyway.
>>
>> You just need to ensure you set mod_python's own module search path,
>> ie. mod_python.importer.path
>>
>> Graham
>>
>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> > Okay, I think I'm on the same page as you now-- I've been playing
>> > around with it and it seems that when I leave my PythonPath to find my
>> > import modules, I definitely get no auto reloading goodness, while
>> > when I specify the root path to find them as files, rather than as
>> > modules (as explained in that documentation you linked to), things
>> > seem to work as expected.
>> >
>> > I wasn't getting any warnings in my apache log, and after putting
>> > together the details, I shouldn't be expecting any of that behavior
>> > with two of the same module in memory.  My issue seems to be simply in
>> > avoiding letting my PythonPath find my code.
>> >
>> > Thank you much,
>> > Tim
>> >
>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>> > <graham.dumpleton@gmail.com> wrote:
>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>> >>> my www directory.
>> >>
>> >> That in itself may not be enough to cause problem. You should actually
>> >> see a warning in Apache error log complaining you have done this. That
>> >> is, overlapped sys.path with directories that mod_python module
>> >> importer uses.
>> >>
>> >> The real problem with doing this overlapping is that a module which
>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>> >> something from the www directory, which also happens to be a handler
>> >> module, there will actually be too copies in memory and so can give
>> >> unexpected results.
>> >>
>> >> Graham
>> >>
>> >>> I had been using a forced path in my apache conf
>> >>> file to point to '~', for simple reference for the time being.
>> >>>
>> >>> I think my problem is simply that the modules I'm trying to import
>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>> >>> should already have been chained together with these
>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>> >>> scripts, the first loading the second.
>> >>>
>> >>> Tim
>> >>>
>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>> >>> <graham.dumpleton@gmail.com> wrote:
>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>> >>>>> some of my scripts over to this apache.load_module function, but I
>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>> >>>>> documentation properly, it seems that the PythonOption for
>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>> >>>>> have I simply misread the documentation?  I still have to restart the
>> >>>>> Apache service in order to push the changes.
>> >>>>
>> >>>> Reloading does not work for any Python modules/packages installed in
>> >>>> standard Python module search path. Thus, if you have set PythonPath
>> >>>> to some directory where you store your modules, or if they are in
>> >>>> system site-packages directory, they are not candidates for reloading.
>> >>>>
>> >>>> Where are the modules you are modifying and expecting to be reloading
>> >>>> located? Is that location on sys.path, or have you explicitly setup
>> >>>> mod_python module importer path to tell it where they are?
>> >>>>
>> >>>> From within running application, print out __name__ from the module
>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>> >>>> it look like a normal module name or something magic?
>> >>>>
>> >>>> How was that module imported? There needs to be a chain from
>> >>>> mod_python handler for imports right down through to all modules you
>> >>>> want reloadable. If there aren't, for example, you are using
>> >>>> import_module() from a normal Python module which isn't a candidate
>> >>>> for reloading, you will not see the depth checking for reloading
>> >>>> occurring as you might expect.
>> >>>>
>> >>>> Graham
>> >>>>
>> >>>>> Tim
>> >>>>>
>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>> >>>>>> folk.
>> >>>>>>
>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>> >>>>>> Apache module like this, for those of us like me, who would have gone
>> >>>>>> many months more before having every accidentally found this manual
>> >>>>>> import method.
>> >>>>>>
>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>> >>>>>>>
>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>> >>>>>>> >
>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>> >>>>>>> > should have found answers very quickly.
>> >>>>>>> >
>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>> >>>>>>>
>> >>>>>>> PHP is specifically designed for web applications and it purposely
>> >>>>>>> throws away all code at the end of each request and thus is reloading
>> >>>>>>> it all on every request. Have a read of:
>> >>>>>>>
>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>> >>>>>>>
>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>> >>>>>>> similar to Python in that you are applying a non web language to the
>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>> >>>>>>> as well, but as with anything CGI, much slower.
>> >>>>>>>
>> >>>>>>> BTW, maybe read:
>> >>>>>>>
>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>> >>>>>>>
>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>> >>>>>>> on code changes. You do need to use a real operating system though,
>> >>>>>>> and not Windows.
>> >>>>>>>
>> >>>>>>> Graham
>> >>>>>>>
>> >>>>>>> > Tim
>> >>>>>>> >
>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>> >>>>>>> >>
>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>> >>>>>>> >> > descriptive.
>> >>>>>>> >>
>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>> >>>>>>> >>
>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>> >>>>>>> >> behaviour.
>> >>>>>>> >>
>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>> >>>>>>> >> files imported by mod_python using its own special module importer.
>> >>>>>>> >> This is documented under 'import_module()' function in:
>> >>>>>>> >>
>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>> >>>>>>> >>
>> >>>>>>> >> Graham
>> >>>>>>> >>
>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>> >>>>>>> >> > know my code isn't to blame for the issue:
>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>> >>>>>>> >> > my code finally gets pushed through to the web server.
>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>> >>>>>>> >> > an apache restart in order to take effect.
>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>> >>>>>>> >> > BACKEND looks like:
>> >>>>>>> >> > def getUsers(self, req, terms):
>> >>>>>>> >> >
>> >>>>>>> >> > and I'm calling it with
>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>> >>>>>>> >> >
>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>> >>>>>>> >> > current code actually says.
>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>> >>>>>>> >> > madeUpVar.moo = 42
>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>> >>>>>>> >> > aren't being reflected in my web server.
>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>> >>>>>>> >> > the problem will have disappeared for the time being.
>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>> >>>>>>> >> > _______________________________________________
>> >>>>>>> >> > Mod_python mailing list
>> >>>>>>> >> > Mod_python@modpython.org
>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>> >>>>>>> >> >
>> >>>>>>> >> >
>> >>>>>>> >
>> >>>>>>
>> >>>>>>
>> >>>>>>
>> >>>>> _______________________________________________
>> >>>>> Mod_python mailing list
>> >>>>> Mod_python@modpython.org
>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From tonightslastsong at gmail.com  Tue Jan 13 01:10:30 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Tue Jan 13 01:10:32 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<d01b8cf20901111332o1abbf30dl8040d1521efe2b1@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
	<88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>
Message-ID: <d01b8cf20901122210m2f66d6ffk9b9e046a3214ed89@mail.gmail.com>

Thank you for the links-- they prove useful.

Capitalization shouldn't be an issue here... When I began learning
Unix a good while back, I quickly cast off relying on the OS to
'figure it out'.  I've been keeping everything case sensitive.

Backing up to something foundational: I seem to be able to use the
import_module() method without problems now, but practically any use
of standard python 'import'/'from' keywords fails.  The only success I
get is when the desired module is in the same directory as the one
trying to use the 'import' keyword.  Does this stem from the fact that
import_module isn't look for packages, but rather specific files?  Is
it for that reason that I can't use
    from subDir import C
or, the equally broken,
    import subDir.C
?

Jiggering around with adding more entries in importer.path to my
subdirectories doesn't seem to have any effect.  If the 'import'
keyword really is bound to it's working directory only, I will likely
in fact have to use import_module() is several places, rather than
just at the head of the request (./A.py)

Despite my general lack of success, I appreciate the comments you've
made along the way.

Tim

On Mon, Jan 12, 2009 at 10:40 PM, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>> You just need to ensure you set mod_python's own module search path,
>>> ie. mod_python.importer.path
>>
>> And yet, as I've now removed my www directory from my PythonPath, I
>> actually get limited functionality out of the mod_python imports.
>> I've got my apache conf file globally applying the option:
>>
>>        PythonOption mod_python.importer.path "['~']"
>> Also have tried using an absolute path, which is producing the same
>> functionality:
>>        PythonOption mod_python.importer.path "['V:/www/']"
>>
>> My main module ('A') is requested by Apache in my browser, which uses
>> import_module to find and import file B.  File B is in the same
>> directory as A, and they only way it was found was through my apache
>> conf noted above.  This part works just fine, but two cases develop
>> from here:
>>
>> 1) If I use module B to import a third module 'C', I can't seem to
>> make it find module C if it's in a subdirectory.  For instance, doing
>> either 'import subDirectory.moduleC' or doing
>> 'apache.import_module("subDirectory/moduleC")' results in a failure to
>> find the module.  Note that in this case of subdirectories, I'm
>> intentionally avoiding absolute paths to reach my modules.  I only
>> want to get absolute in my Apache conf.  On the flip side, if module C
>> is in the same local directory as A and B, then mod_python finds
>> module C just fine.
>
> Try:
>
>  apache.import_module("./subDirectory/moduleC.py")
>
>> 2 ) If I place C in the same directory as A and B, so that mod_python
>> finds it, I tried using the natural Python 'import' keyword in B to
>> import C.  According to what I understand, this should be fine for
>> auto-reloading, since A imports B via import_module, and so then B can
>> use either importing strategy to get C in the picture because
>> mod_python uses import_module behind the scenes anyway.  In this
>> setup, my caching issue remains, and changes to C are definitely not
>> reflected in apache until a server restart.  Again note that it
>> doesn't matter if I make B use the 'import' keyword or the
>> apache.import_module() method.  Both result in failure to reload.
>>
>> I can't seem to diagnose what's even wrong, since the only reason
>> module A, B, or C is being found in the first place is because of my
>> importer.path variable is set in httpd.conf.  I've been using
>> practically empty files to test this.  Each file contains no more than
>> 5 lines to get the modules imported and then to write out a
>> confirmation to the screen that it worked.
>>
>> Wisdom to offer?
>
> Yes, from memory the module importer isn't properly case insensitive
> on Windows or MacOS X where file systems is case insensitive. Thus,
> make sure your imports match exactly the case of the directories/files
> in the file system.
>
> Also, use:
>
>  from mod_python import apache
>  apache.log_error('__name__ = %s' % repr(__name__))
>  apache.log_error('__file__ = %s' % repr(__file__))
>
> in modules so that information about imported files is logged as
> imported. This will tell you which files are being imported.
>
> With PythonDebug On you should also see messages in Apache error logs
> describing when they are being imported, initially and when changed.
>
> You can also write some code which extracts out of the mod_python
> importer cache the details of everything that has been loaded and the
> relationships. The function to call is:
>
>  from mod_python import apache
>  data = apache.request_modules_graph()
>
> write that to a file and run:
>
>  http://www.graphviz.org/
>  http://www.graphviz.org/Download_windows.php
>
> on it.
>
> Graham
>
>>> Now you do realise you don't need to convert 'import' to
>>> import_module() everywhere?
>>>
>>> The 'import' directive when used inside a file which was already
>>> managed by mod_python calls import_module() internally anyway.
>>>
>>> You just need to ensure you set mod_python's own module search path,
>>> ie. mod_python.importer.path
>>>
>>> Graham
>>>
>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>> > Okay, I think I'm on the same page as you now-- I've been playing
>>> > around with it and it seems that when I leave my PythonPath to find my
>>> > import modules, I definitely get no auto reloading goodness, while
>>> > when I specify the root path to find them as files, rather than as
>>> > modules (as explained in that documentation you linked to), things
>>> > seem to work as expected.
>>> >
>>> > I wasn't getting any warnings in my apache log, and after putting
>>> > together the details, I shouldn't be expecting any of that behavior
>>> > with two of the same module in memory.  My issue seems to be simply in
>>> > avoiding letting my PythonPath find my code.
>>> >
>>> > Thank you much,
>>> > Tim
>>> >
>>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>>> > <graham.dumpleton@gmail.com> wrote:
>>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>>> >>> my www directory.
>>> >>
>>> >> That in itself may not be enough to cause problem. You should actually
>>> >> see a warning in Apache error log complaining you have done this. That
>>> >> is, overlapped sys.path with directories that mod_python module
>>> >> importer uses.
>>> >>
>>> >> The real problem with doing this overlapping is that a module which
>>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>>> >> something from the www directory, which also happens to be a handler
>>> >> module, there will actually be too copies in memory and so can give
>>> >> unexpected results.
>>> >>
>>> >> Graham
>>> >>
>>> >>> I had been using a forced path in my apache conf
>>> >>> file to point to '~', for simple reference for the time being.
>>> >>>
>>> >>> I think my problem is simply that the modules I'm trying to import
>>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>>> >>> should already have been chained together with these
>>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>>> >>> scripts, the first loading the second.
>>> >>>
>>> >>> Tim
>>> >>>
>>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>>> >>> <graham.dumpleton@gmail.com> wrote:
>>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>> >>>>> some of my scripts over to this apache.load_module function, but I
>>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>> >>>>> documentation properly, it seems that the PythonOption for
>>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>> >>>>> have I simply misread the documentation?  I still have to restart the
>>> >>>>> Apache service in order to push the changes.
>>> >>>>
>>> >>>> Reloading does not work for any Python modules/packages installed in
>>> >>>> standard Python module search path. Thus, if you have set PythonPath
>>> >>>> to some directory where you store your modules, or if they are in
>>> >>>> system site-packages directory, they are not candidates for reloading.
>>> >>>>
>>> >>>> Where are the modules you are modifying and expecting to be reloading
>>> >>>> located? Is that location on sys.path, or have you explicitly setup
>>> >>>> mod_python module importer path to tell it where they are?
>>> >>>>
>>> >>>> From within running application, print out __name__ from the module
>>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>>> >>>> it look like a normal module name or something magic?
>>> >>>>
>>> >>>> How was that module imported? There needs to be a chain from
>>> >>>> mod_python handler for imports right down through to all modules you
>>> >>>> want reloadable. If there aren't, for example, you are using
>>> >>>> import_module() from a normal Python module which isn't a candidate
>>> >>>> for reloading, you will not see the depth checking for reloading
>>> >>>> occurring as you might expect.
>>> >>>>
>>> >>>> Graham
>>> >>>>
>>> >>>>> Tim
>>> >>>>>
>>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>>> >>>>>> folk.
>>> >>>>>>
>>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>>> >>>>>> Apache module like this, for those of us like me, who would have gone
>>> >>>>>> many months more before having every accidentally found this manual
>>> >>>>>> import method.
>>> >>>>>>
>>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>>> >>>>>>>
>>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>> >>>>>>> >
>>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>> >>>>>>> > should have found answers very quickly.
>>> >>>>>>> >
>>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>> >>>>>>>
>>> >>>>>>> PHP is specifically designed for web applications and it purposely
>>> >>>>>>> throws away all code at the end of each request and thus is reloading
>>> >>>>>>> it all on every request. Have a read of:
>>> >>>>>>>
>>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>> >>>>>>>
>>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>> >>>>>>> similar to Python in that you are applying a non web language to the
>>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>> >>>>>>> as well, but as with anything CGI, much slower.
>>> >>>>>>>
>>> >>>>>>> BTW, maybe read:
>>> >>>>>>>
>>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>> >>>>>>>
>>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>> >>>>>>> on code changes. You do need to use a real operating system though,
>>> >>>>>>> and not Windows.
>>> >>>>>>>
>>> >>>>>>> Graham
>>> >>>>>>>
>>> >>>>>>> > Tim
>>> >>>>>>> >
>>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>> >>>>>>> >>
>>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>> >>>>>>> >> > descriptive.
>>> >>>>>>> >>
>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>> >>>>>>> >>
>>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>> >>>>>>> >> behaviour.
>>> >>>>>>> >>
>>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>>> >>>>>>> >> files imported by mod_python using its own special module importer.
>>> >>>>>>> >> This is documented under 'import_module()' function in:
>>> >>>>>>> >>
>>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>> >>>>>>> >>
>>> >>>>>>> >> Graham
>>> >>>>>>> >>
>>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>> >>>>>>> >> > know my code isn't to blame for the issue:
>>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>> >>>>>>> >> > my code finally gets pushed through to the web server.
>>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>> >>>>>>> >> > an apache restart in order to take effect.
>>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>> >>>>>>> >> > BACKEND looks like:
>>> >>>>>>> >> > def getUsers(self, req, terms):
>>> >>>>>>> >> >
>>> >>>>>>> >> > and I'm calling it with
>>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>>> >>>>>>> >> >
>>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>> >>>>>>> >> > current code actually says.
>>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>> >>>>>>> >> > madeUpVar.moo = 42
>>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>> >>>>>>> >> > aren't being reflected in my web server.
>>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>> >>>>>>> >> > the problem will have disappeared for the time being.
>>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>> >>>>>>> >> > _______________________________________________
>>> >>>>>>> >> > Mod_python mailing list
>>> >>>>>>> >> > Mod_python@modpython.org
>>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>> >>>>>>> >> >
>>> >>>>>>> >> >
>>> >>>>>>> >
>>> >>>>>>
>>> >>>>>>
>>> >>>>>>
>>> >>>>> _______________________________________________
>>> >>>>> Mod_python mailing list
>>> >>>>> Mod_python@modpython.org
>>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
From graham.dumpleton at gmail.com  Tue Jan 13 01:21:59 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Tue Jan 13 01:22:06 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901122210m2f66d6ffk9b9e046a3214ed89@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<d01b8cf20901111601h6b7168e7g95fcb5b5e9a6a98f@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
	<88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>
	<d01b8cf20901122210m2f66d6ffk9b9e046a3214ed89@mail.gmail.com>
Message-ID: <88e286470901122221if00bd4ase2ab10aa8081d754@mail.gmail.com>

2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
> Thank you for the links-- they prove useful.
>
> Capitalization shouldn't be an issue here... When I began learning
> Unix a good while back, I quickly cast off relying on the OS to
> 'figure it out'.  I've been keeping everything case sensitive.
>
> Backing up to something foundational: I seem to be able to use the
> import_module() method without problems now, but practically any use
> of standard python 'import'/'from' keywords fails.  The only success I
> get is when the desired module is in the same directory as the one
> trying to use the 'import' keyword.  Does this stem from the fact that
> import_module isn't look for packages, but rather specific files?  Is
> it for that reason that I can't use
>    from subDir import C
> or, the equally broken,
>    import subDir.C

Packages not supported with mod_python module importer, so these fall
through import_module and uses standard Python import mechanism.

> Jiggering around with adding more entries in importer.path to my
> subdirectories doesn't seem to have any effect.

You should be able to add multiple directories and so long as a single
Python module code file, should be found even when using 'import'.

Graham

> If the 'import'
> keyword really is bound to it's working directory only, I will likely
> in fact have to use import_module() is several places, rather than
> just at the head of the request (./A.py)
>
> Despite my general lack of success, I appreciate the comments you've
> made along the way.
>
> Tim
>
> On Mon, Jan 12, 2009 at 10:40 PM, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>> You just need to ensure you set mod_python's own module search path,
>>>> ie. mod_python.importer.path
>>>
>>> And yet, as I've now removed my www directory from my PythonPath, I
>>> actually get limited functionality out of the mod_python imports.
>>> I've got my apache conf file globally applying the option:
>>>
>>>        PythonOption mod_python.importer.path "['~']"
>>> Also have tried using an absolute path, which is producing the same
>>> functionality:
>>>        PythonOption mod_python.importer.path "['V:/www/']"
>>>
>>> My main module ('A') is requested by Apache in my browser, which uses
>>> import_module to find and import file B.  File B is in the same
>>> directory as A, and they only way it was found was through my apache
>>> conf noted above.  This part works just fine, but two cases develop
>>> from here:
>>>
>>> 1) If I use module B to import a third module 'C', I can't seem to
>>> make it find module C if it's in a subdirectory.  For instance, doing
>>> either 'import subDirectory.moduleC' or doing
>>> 'apache.import_module("subDirectory/moduleC")' results in a failure to
>>> find the module.  Note that in this case of subdirectories, I'm
>>> intentionally avoiding absolute paths to reach my modules.  I only
>>> want to get absolute in my Apache conf.  On the flip side, if module C
>>> is in the same local directory as A and B, then mod_python finds
>>> module C just fine.
>>
>> Try:
>>
>>  apache.import_module("./subDirectory/moduleC.py")
>>
>>> 2 ) If I place C in the same directory as A and B, so that mod_python
>>> finds it, I tried using the natural Python 'import' keyword in B to
>>> import C.  According to what I understand, this should be fine for
>>> auto-reloading, since A imports B via import_module, and so then B can
>>> use either importing strategy to get C in the picture because
>>> mod_python uses import_module behind the scenes anyway.  In this
>>> setup, my caching issue remains, and changes to C are definitely not
>>> reflected in apache until a server restart.  Again note that it
>>> doesn't matter if I make B use the 'import' keyword or the
>>> apache.import_module() method.  Both result in failure to reload.
>>>
>>> I can't seem to diagnose what's even wrong, since the only reason
>>> module A, B, or C is being found in the first place is because of my
>>> importer.path variable is set in httpd.conf.  I've been using
>>> practically empty files to test this.  Each file contains no more than
>>> 5 lines to get the modules imported and then to write out a
>>> confirmation to the screen that it worked.
>>>
>>> Wisdom to offer?
>>
>> Yes, from memory the module importer isn't properly case insensitive
>> on Windows or MacOS X where file systems is case insensitive. Thus,
>> make sure your imports match exactly the case of the directories/files
>> in the file system.
>>
>> Also, use:
>>
>>  from mod_python import apache
>>  apache.log_error('__name__ = %s' % repr(__name__))
>>  apache.log_error('__file__ = %s' % repr(__file__))
>>
>> in modules so that information about imported files is logged as
>> imported. This will tell you which files are being imported.
>>
>> With PythonDebug On you should also see messages in Apache error logs
>> describing when they are being imported, initially and when changed.
>>
>> You can also write some code which extracts out of the mod_python
>> importer cache the details of everything that has been loaded and the
>> relationships. The function to call is:
>>
>>  from mod_python import apache
>>  data = apache.request_modules_graph()
>>
>> write that to a file and run:
>>
>>  http://www.graphviz.org/
>>  http://www.graphviz.org/Download_windows.php
>>
>> on it.
>>
>> Graham
>>
>>>> Now you do realise you don't need to convert 'import' to
>>>> import_module() everywhere?
>>>>
>>>> The 'import' directive when used inside a file which was already
>>>> managed by mod_python calls import_module() internally anyway.
>>>>
>>>> You just need to ensure you set mod_python's own module search path,
>>>> ie. mod_python.importer.path
>>>>
>>>> Graham
>>>>
>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>> > Okay, I think I'm on the same page as you now-- I've been playing
>>>> > around with it and it seems that when I leave my PythonPath to find my
>>>> > import modules, I definitely get no auto reloading goodness, while
>>>> > when I specify the root path to find them as files, rather than as
>>>> > modules (as explained in that documentation you linked to), things
>>>> > seem to work as expected.
>>>> >
>>>> > I wasn't getting any warnings in my apache log, and after putting
>>>> > together the details, I shouldn't be expecting any of that behavior
>>>> > with two of the same module in memory.  My issue seems to be simply in
>>>> > avoiding letting my PythonPath find my code.
>>>> >
>>>> > Thank you much,
>>>> > Tim
>>>> >
>>>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>>>> > <graham.dumpleton@gmail.com> wrote:
>>>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>>>> >>> my www directory.
>>>> >>
>>>> >> That in itself may not be enough to cause problem. You should actually
>>>> >> see a warning in Apache error log complaining you have done this. That
>>>> >> is, overlapped sys.path with directories that mod_python module
>>>> >> importer uses.
>>>> >>
>>>> >> The real problem with doing this overlapping is that a module which
>>>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>>>> >> something from the www directory, which also happens to be a handler
>>>> >> module, there will actually be too copies in memory and so can give
>>>> >> unexpected results.
>>>> >>
>>>> >> Graham
>>>> >>
>>>> >>> I had been using a forced path in my apache conf
>>>> >>> file to point to '~', for simple reference for the time being.
>>>> >>>
>>>> >>> I think my problem is simply that the modules I'm trying to import
>>>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>>>> >>> should already have been chained together with these
>>>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>>>> >>> scripts, the first loading the second.
>>>> >>>
>>>> >>> Tim
>>>> >>>
>>>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>>>> >>> <graham.dumpleton@gmail.com> wrote:
>>>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>>> >>>>> some of my scripts over to this apache.load_module function, but I
>>>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>>> >>>>> documentation properly, it seems that the PythonOption for
>>>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>>> >>>>> have I simply misread the documentation?  I still have to restart the
>>>> >>>>> Apache service in order to push the changes.
>>>> >>>>
>>>> >>>> Reloading does not work for any Python modules/packages installed in
>>>> >>>> standard Python module search path. Thus, if you have set PythonPath
>>>> >>>> to some directory where you store your modules, or if they are in
>>>> >>>> system site-packages directory, they are not candidates for reloading.
>>>> >>>>
>>>> >>>> Where are the modules you are modifying and expecting to be reloading
>>>> >>>> located? Is that location on sys.path, or have you explicitly setup
>>>> >>>> mod_python module importer path to tell it where they are?
>>>> >>>>
>>>> >>>> From within running application, print out __name__ from the module
>>>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>>>> >>>> it look like a normal module name or something magic?
>>>> >>>>
>>>> >>>> How was that module imported? There needs to be a chain from
>>>> >>>> mod_python handler for imports right down through to all modules you
>>>> >>>> want reloadable. If there aren't, for example, you are using
>>>> >>>> import_module() from a normal Python module which isn't a candidate
>>>> >>>> for reloading, you will not see the depth checking for reloading
>>>> >>>> occurring as you might expect.
>>>> >>>>
>>>> >>>> Graham
>>>> >>>>
>>>> >>>>> Tim
>>>> >>>>>
>>>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>>>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>>>> >>>>>> folk.
>>>> >>>>>>
>>>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>>>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>>>> >>>>>> Apache module like this, for those of us like me, who would have gone
>>>> >>>>>> many months more before having every accidentally found this manual
>>>> >>>>>> import method.
>>>> >>>>>>
>>>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>>>> >>>>>>>
>>>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>> >>>>>>> >
>>>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>>>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>>>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>> >>>>>>> > should have found answers very quickly.
>>>> >>>>>>> >
>>>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>> >>>>>>>
>>>> >>>>>>> PHP is specifically designed for web applications and it purposely
>>>> >>>>>>> throws away all code at the end of each request and thus is reloading
>>>> >>>>>>> it all on every request. Have a read of:
>>>> >>>>>>>
>>>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>> >>>>>>>
>>>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>> >>>>>>> similar to Python in that you are applying a non web language to the
>>>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>>>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>> >>>>>>> as well, but as with anything CGI, much slower.
>>>> >>>>>>>
>>>> >>>>>>> BTW, maybe read:
>>>> >>>>>>>
>>>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>> >>>>>>>
>>>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>> >>>>>>> on code changes. You do need to use a real operating system though,
>>>> >>>>>>> and not Windows.
>>>> >>>>>>>
>>>> >>>>>>> Graham
>>>> >>>>>>>
>>>> >>>>>>> > Tim
>>>> >>>>>>> >
>>>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>> >>>>>>> >>
>>>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>> >>>>>>> >> > descriptive.
>>>> >>>>>>> >>
>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>> >>>>>>> >>
>>>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>>>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>> >>>>>>> >> behaviour.
>>>> >>>>>>> >>
>>>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>>>> >>>>>>> >> files imported by mod_python using its own special module importer.
>>>> >>>>>>> >> This is documented under 'import_module()' function in:
>>>> >>>>>>> >>
>>>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>> >>>>>>> >>
>>>> >>>>>>> >> Graham
>>>> >>>>>>> >>
>>>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>> >>>>>>> >> > know my code isn't to blame for the issue:
>>>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>> >>>>>>> >> > my code finally gets pushed through to the web server.
>>>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>>>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>>>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>> >>>>>>> >> > an apache restart in order to take effect.
>>>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>> >>>>>>> >> > BACKEND looks like:
>>>> >>>>>>> >> > def getUsers(self, req, terms):
>>>> >>>>>>> >> >
>>>> >>>>>>> >> > and I'm calling it with
>>>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>>>> >>>>>>> >> >
>>>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>> >>>>>>> >> > current code actually says.
>>>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>> >>>>>>> >> > madeUpVar.moo = 42
>>>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>> >>>>>>> >> > aren't being reflected in my web server.
>>>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>> >>>>>>> >> > the problem will have disappeared for the time being.
>>>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>> >>>>>>> >> > _______________________________________________
>>>> >>>>>>> >> > Mod_python mailing list
>>>> >>>>>>> >> > Mod_python@modpython.org
>>>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>> >>>>>>> >> >
>>>> >>>>>>> >> >
>>>> >>>>>>> >
>>>> >>>>>>
>>>> >>>>>>
>>>> >>>>>>
>>>> >>>>> _______________________________________________
>>>> >>>>> Mod_python mailing list
>>>> >>>>> Mod_python@modpython.org
>>>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From tonightslastsong at gmail.com  Tue Jan 13 01:27:59 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Tue Jan 13 01:28:05 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901122221if00bd4ase2ab10aa8081d754@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901111925s5e06879ew43cae7ce4eec45d8@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
	<88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>
	<d01b8cf20901122210m2f66d6ffk9b9e046a3214ed89@mail.gmail.com>
	<88e286470901122221if00bd4ase2ab10aa8081d754@mail.gmail.com>
Message-ID: <d01b8cf20901122227q317e0b4eh2ba49826d6208186@mail.gmail.com>

> You should be able to add multiple directories and so long as a single
> Python module code file, should be found even when using 'import'.

I tried adding my 'subDir'' to the path, so that it looks like this:
    PythonOption mod_python.importer.path "['~' , '~/include/']"
My 'import' keyword attempts still failed when trying to import across
this 'include' folder into a specific module file residing there.

I simplified the experiment down to the above importer.path, and just
./A.py which uses a keyword 'import' to try to grab C.py from this
'include' folder.  This had surprisingly still lead to failure to find
the module.

> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>> Thank you for the links-- they prove useful.
>>
>> Capitalization shouldn't be an issue here... When I began learning
>> Unix a good while back, I quickly cast off relying on the OS to
>> 'figure it out'.  I've been keeping everything case sensitive.
>>
>> Backing up to something foundational: I seem to be able to use the
>> import_module() method without problems now, but practically any use
>> of standard python 'import'/'from' keywords fails.  The only success I
>> get is when the desired module is in the same directory as the one
>> trying to use the 'import' keyword.  Does this stem from the fact that
>> import_module isn't look for packages, but rather specific files?  Is
>> it for that reason that I can't use
>>    from subDir import C
>> or, the equally broken,
>>    import subDir.C
>
> Packages not supported with mod_python module importer, so these fall
> through import_module and uses standard Python import mechanism.
>
>> Jiggering around with adding more entries in importer.path to my
>> subdirectories doesn't seem to have any effect.
>
> You should be able to add multiple directories and so long as a single
> Python module code file, should be found even when using 'import'.
>
> Graham
>
>> If the 'import'
>> keyword really is bound to it's working directory only, I will likely
>> in fact have to use import_module() is several places, rather than
>> just at the head of the request (./A.py)
>>
>> Despite my general lack of success, I appreciate the comments you've
>> made along the way.
>>
>> Tim
>>
>> On Mon, Jan 12, 2009 at 10:40 PM, Graham Dumpleton
>> <graham.dumpleton@gmail.com> wrote:
>>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> You just need to ensure you set mod_python's own module search path,
>>>>> ie. mod_python.importer.path
>>>>
>>>> And yet, as I've now removed my www directory from my PythonPath, I
>>>> actually get limited functionality out of the mod_python imports.
>>>> I've got my apache conf file globally applying the option:
>>>>
>>>>        PythonOption mod_python.importer.path "['~']"
>>>> Also have tried using an absolute path, which is producing the same
>>>> functionality:
>>>>        PythonOption mod_python.importer.path "['V:/www/']"
>>>>
>>>> My main module ('A') is requested by Apache in my browser, which uses
>>>> import_module to find and import file B.  File B is in the same
>>>> directory as A, and they only way it was found was through my apache
>>>> conf noted above.  This part works just fine, but two cases develop
>>>> from here:
>>>>
>>>> 1) If I use module B to import a third module 'C', I can't seem to
>>>> make it find module C if it's in a subdirectory.  For instance, doing
>>>> either 'import subDirectory.moduleC' or doing
>>>> 'apache.import_module("subDirectory/moduleC")' results in a failure to
>>>> find the module.  Note that in this case of subdirectories, I'm
>>>> intentionally avoiding absolute paths to reach my modules.  I only
>>>> want to get absolute in my Apache conf.  On the flip side, if module C
>>>> is in the same local directory as A and B, then mod_python finds
>>>> module C just fine.
>>>
>>> Try:
>>>
>>>  apache.import_module("./subDirectory/moduleC.py")
>>>
>>>> 2 ) If I place C in the same directory as A and B, so that mod_python
>>>> finds it, I tried using the natural Python 'import' keyword in B to
>>>> import C.  According to what I understand, this should be fine for
>>>> auto-reloading, since A imports B via import_module, and so then B can
>>>> use either importing strategy to get C in the picture because
>>>> mod_python uses import_module behind the scenes anyway.  In this
>>>> setup, my caching issue remains, and changes to C are definitely not
>>>> reflected in apache until a server restart.  Again note that it
>>>> doesn't matter if I make B use the 'import' keyword or the
>>>> apache.import_module() method.  Both result in failure to reload.
>>>>
>>>> I can't seem to diagnose what's even wrong, since the only reason
>>>> module A, B, or C is being found in the first place is because of my
>>>> importer.path variable is set in httpd.conf.  I've been using
>>>> practically empty files to test this.  Each file contains no more than
>>>> 5 lines to get the modules imported and then to write out a
>>>> confirmation to the screen that it worked.
>>>>
>>>> Wisdom to offer?
>>>
>>> Yes, from memory the module importer isn't properly case insensitive
>>> on Windows or MacOS X where file systems is case insensitive. Thus,
>>> make sure your imports match exactly the case of the directories/files
>>> in the file system.
>>>
>>> Also, use:
>>>
>>>  from mod_python import apache
>>>  apache.log_error('__name__ = %s' % repr(__name__))
>>>  apache.log_error('__file__ = %s' % repr(__file__))
>>>
>>> in modules so that information about imported files is logged as
>>> imported. This will tell you which files are being imported.
>>>
>>> With PythonDebug On you should also see messages in Apache error logs
>>> describing when they are being imported, initially and when changed.
>>>
>>> You can also write some code which extracts out of the mod_python
>>> importer cache the details of everything that has been loaded and the
>>> relationships. The function to call is:
>>>
>>>  from mod_python import apache
>>>  data = apache.request_modules_graph()
>>>
>>> write that to a file and run:
>>>
>>>  http://www.graphviz.org/
>>>  http://www.graphviz.org/Download_windows.php
>>>
>>> on it.
>>>
>>> Graham
>>>
>>>>> Now you do realise you don't need to convert 'import' to
>>>>> import_module() everywhere?
>>>>>
>>>>> The 'import' directive when used inside a file which was already
>>>>> managed by mod_python calls import_module() internally anyway.
>>>>>
>>>>> You just need to ensure you set mod_python's own module search path,
>>>>> ie. mod_python.importer.path
>>>>>
>>>>> Graham
>>>>>
>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> > Okay, I think I'm on the same page as you now-- I've been playing
>>>>> > around with it and it seems that when I leave my PythonPath to find my
>>>>> > import modules, I definitely get no auto reloading goodness, while
>>>>> > when I specify the root path to find them as files, rather than as
>>>>> > modules (as explained in that documentation you linked to), things
>>>>> > seem to work as expected.
>>>>> >
>>>>> > I wasn't getting any warnings in my apache log, and after putting
>>>>> > together the details, I shouldn't be expecting any of that behavior
>>>>> > with two of the same module in memory.  My issue seems to be simply in
>>>>> > avoiding letting my PythonPath find my code.
>>>>> >
>>>>> > Thank you much,
>>>>> > Tim
>>>>> >
>>>>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>>>>> >>> my www directory.
>>>>> >>
>>>>> >> That in itself may not be enough to cause problem. You should actually
>>>>> >> see a warning in Apache error log complaining you have done this. That
>>>>> >> is, overlapped sys.path with directories that mod_python module
>>>>> >> importer uses.
>>>>> >>
>>>>> >> The real problem with doing this overlapping is that a module which
>>>>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>>>>> >> something from the www directory, which also happens to be a handler
>>>>> >> module, there will actually be too copies in memory and so can give
>>>>> >> unexpected results.
>>>>> >>
>>>>> >> Graham
>>>>> >>
>>>>> >>> I had been using a forced path in my apache conf
>>>>> >>> file to point to '~', for simple reference for the time being.
>>>>> >>>
>>>>> >>> I think my problem is simply that the modules I'm trying to import
>>>>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>>>>> >>> should already have been chained together with these
>>>>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>>>>> >>> scripts, the first loading the second.
>>>>> >>>
>>>>> >>> Tim
>>>>> >>>
>>>>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>>>>> >>> <graham.dumpleton@gmail.com> wrote:
>>>>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>>>> >>>>> some of my scripts over to this apache.load_module function, but I
>>>>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>>>> >>>>> documentation properly, it seems that the PythonOption for
>>>>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>>>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>>>> >>>>> have I simply misread the documentation?  I still have to restart the
>>>>> >>>>> Apache service in order to push the changes.
>>>>> >>>>
>>>>> >>>> Reloading does not work for any Python modules/packages installed in
>>>>> >>>> standard Python module search path. Thus, if you have set PythonPath
>>>>> >>>> to some directory where you store your modules, or if they are in
>>>>> >>>> system site-packages directory, they are not candidates for reloading.
>>>>> >>>>
>>>>> >>>> Where are the modules you are modifying and expecting to be reloading
>>>>> >>>> located? Is that location on sys.path, or have you explicitly setup
>>>>> >>>> mod_python module importer path to tell it where they are?
>>>>> >>>>
>>>>> >>>> From within running application, print out __name__ from the module
>>>>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>>>>> >>>> it look like a normal module name or something magic?
>>>>> >>>>
>>>>> >>>> How was that module imported? There needs to be a chain from
>>>>> >>>> mod_python handler for imports right down through to all modules you
>>>>> >>>> want reloadable. If there aren't, for example, you are using
>>>>> >>>> import_module() from a normal Python module which isn't a candidate
>>>>> >>>> for reloading, you will not see the depth checking for reloading
>>>>> >>>> occurring as you might expect.
>>>>> >>>>
>>>>> >>>> Graham
>>>>> >>>>
>>>>> >>>>> Tim
>>>>> >>>>>
>>>>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>>>>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>>>>> >>>>>> folk.
>>>>> >>>>>>
>>>>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>>>>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>>>>> >>>>>> Apache module like this, for those of us like me, who would have gone
>>>>> >>>>>> many months more before having every accidentally found this manual
>>>>> >>>>>> import method.
>>>>> >>>>>>
>>>>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>>>>> >>>>>>>
>>>>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>> >>>>>>> >
>>>>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>>>>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>>>>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>>> >>>>>>> > should have found answers very quickly.
>>>>> >>>>>>> >
>>>>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>> >>>>>>>
>>>>> >>>>>>> PHP is specifically designed for web applications and it purposely
>>>>> >>>>>>> throws away all code at the end of each request and thus is reloading
>>>>> >>>>>>> it all on every request. Have a read of:
>>>>> >>>>>>>
>>>>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>> >>>>>>>
>>>>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>>> >>>>>>> similar to Python in that you are applying a non web language to the
>>>>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>>>>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>>> >>>>>>> as well, but as with anything CGI, much slower.
>>>>> >>>>>>>
>>>>> >>>>>>> BTW, maybe read:
>>>>> >>>>>>>
>>>>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>> >>>>>>>
>>>>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>>> >>>>>>> on code changes. You do need to use a real operating system though,
>>>>> >>>>>>> and not Windows.
>>>>> >>>>>>>
>>>>> >>>>>>> Graham
>>>>> >>>>>>>
>>>>> >>>>>>> > Tim
>>>>> >>>>>>> >
>>>>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>> >>>>>>> >>
>>>>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>>> >>>>>>> >> > descriptive.
>>>>> >>>>>>> >>
>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>> >>>>>>> >>
>>>>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>>>>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>>> >>>>>>> >> behaviour.
>>>>> >>>>>>> >>
>>>>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>>>>> >>>>>>> >> files imported by mod_python using its own special module importer.
>>>>> >>>>>>> >> This is documented under 'import_module()' function in:
>>>>> >>>>>>> >>
>>>>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>>> >>>>>>> >>
>>>>> >>>>>>> >> Graham
>>>>> >>>>>>> >>
>>>>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>>> >>>>>>> >> > know my code isn't to blame for the issue:
>>>>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>>> >>>>>>> >> > my code finally gets pushed through to the web server.
>>>>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>>>>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>>>>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>>> >>>>>>> >> > an apache restart in order to take effect.
>>>>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>>> >>>>>>> >> > BACKEND looks like:
>>>>> >>>>>>> >> > def getUsers(self, req, terms):
>>>>> >>>>>>> >> >
>>>>> >>>>>>> >> > and I'm calling it with
>>>>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>>>>> >>>>>>> >> >
>>>>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>>> >>>>>>> >> > current code actually says.
>>>>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>>> >>>>>>> >> > madeUpVar.moo = 42
>>>>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>>> >>>>>>> >> > aren't being reflected in my web server.
>>>>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>>> >>>>>>> >> > the problem will have disappeared for the time being.
>>>>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>>> >>>>>>> >> > _______________________________________________
>>>>> >>>>>>> >> > Mod_python mailing list
>>>>> >>>>>>> >> > Mod_python@modpython.org
>>>>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>> >>>>>>> >> >
>>>>> >>>>>>> >> >
>>>>> >>>>>>> >
>>>>> >>>>>>
>>>>> >>>>>>
>>>>> >>>>>>
>>>>> >>>>> _______________________________________________
>>>>> >>>>> Mod_python mailing list
>>>>> >>>>> Mod_python@modpython.org
>>>>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
From graham.dumpleton at gmail.com  Tue Jan 13 01:36:28 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Tue Jan 13 01:36:31 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901122227q317e0b4eh2ba49826d6208186@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<d01b8cf20901112035ydd8e514s915100de80852909@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
	<88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>
	<d01b8cf20901122210m2f66d6ffk9b9e046a3214ed89@mail.gmail.com>
	<88e286470901122221if00bd4ase2ab10aa8081d754@mail.gmail.com>
	<d01b8cf20901122227q317e0b4eh2ba49826d6208186@mail.gmail.com>
Message-ID: <88e286470901122236i187b3b9bn62cfb886b122a878@mail.gmail.com>

What version of Python are you using? It is possible that if using
version of Python newer than what that stuff was originally written
against, that it is misbehaving. Have seen one other report of odd
stuff happening. I don't use mod_python any more and don't really have
time to go digging in to why. Really don't understand why people even
want to keep writing stuff to mod_python specific APIs when better
options exist these days for Python web applications.

Graham

2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>> You should be able to add multiple directories and so long as a single
>> Python module code file, should be found even when using 'import'.
>
> I tried adding my 'subDir'' to the path, so that it looks like this:
>    PythonOption mod_python.importer.path "['~' , '~/include/']"
> My 'import' keyword attempts still failed when trying to import across
> this 'include' folder into a specific module file residing there.
>
> I simplified the experiment down to the above importer.path, and just
> ./A.py which uses a keyword 'import' to try to grab C.py from this
> 'include' folder.  This had surprisingly still lead to failure to find
> the module.
>
>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>> Thank you for the links-- they prove useful.
>>>
>>> Capitalization shouldn't be an issue here... When I began learning
>>> Unix a good while back, I quickly cast off relying on the OS to
>>> 'figure it out'.  I've been keeping everything case sensitive.
>>>
>>> Backing up to something foundational: I seem to be able to use the
>>> import_module() method without problems now, but practically any use
>>> of standard python 'import'/'from' keywords fails.  The only success I
>>> get is when the desired module is in the same directory as the one
>>> trying to use the 'import' keyword.  Does this stem from the fact that
>>> import_module isn't look for packages, but rather specific files?  Is
>>> it for that reason that I can't use
>>>    from subDir import C
>>> or, the equally broken,
>>>    import subDir.C
>>
>> Packages not supported with mod_python module importer, so these fall
>> through import_module and uses standard Python import mechanism.
>>
>>> Jiggering around with adding more entries in importer.path to my
>>> subdirectories doesn't seem to have any effect.
>>
>> You should be able to add multiple directories and so long as a single
>> Python module code file, should be found even when using 'import'.
>>
>> Graham
>>
>>> If the 'import'
>>> keyword really is bound to it's working directory only, I will likely
>>> in fact have to use import_module() is several places, rather than
>>> just at the head of the request (./A.py)
>>>
>>> Despite my general lack of success, I appreciate the comments you've
>>> made along the way.
>>>
>>> Tim
>>>
>>> On Mon, Jan 12, 2009 at 10:40 PM, Graham Dumpleton
>>> <graham.dumpleton@gmail.com> wrote:
>>>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> You just need to ensure you set mod_python's own module search path,
>>>>>> ie. mod_python.importer.path
>>>>>
>>>>> And yet, as I've now removed my www directory from my PythonPath, I
>>>>> actually get limited functionality out of the mod_python imports.
>>>>> I've got my apache conf file globally applying the option:
>>>>>
>>>>>        PythonOption mod_python.importer.path "['~']"
>>>>> Also have tried using an absolute path, which is producing the same
>>>>> functionality:
>>>>>        PythonOption mod_python.importer.path "['V:/www/']"
>>>>>
>>>>> My main module ('A') is requested by Apache in my browser, which uses
>>>>> import_module to find and import file B.  File B is in the same
>>>>> directory as A, and they only way it was found was through my apache
>>>>> conf noted above.  This part works just fine, but two cases develop
>>>>> from here:
>>>>>
>>>>> 1) If I use module B to import a third module 'C', I can't seem to
>>>>> make it find module C if it's in a subdirectory.  For instance, doing
>>>>> either 'import subDirectory.moduleC' or doing
>>>>> 'apache.import_module("subDirectory/moduleC")' results in a failure to
>>>>> find the module.  Note that in this case of subdirectories, I'm
>>>>> intentionally avoiding absolute paths to reach my modules.  I only
>>>>> want to get absolute in my Apache conf.  On the flip side, if module C
>>>>> is in the same local directory as A and B, then mod_python finds
>>>>> module C just fine.
>>>>
>>>> Try:
>>>>
>>>>  apache.import_module("./subDirectory/moduleC.py")
>>>>
>>>>> 2 ) If I place C in the same directory as A and B, so that mod_python
>>>>> finds it, I tried using the natural Python 'import' keyword in B to
>>>>> import C.  According to what I understand, this should be fine for
>>>>> auto-reloading, since A imports B via import_module, and so then B can
>>>>> use either importing strategy to get C in the picture because
>>>>> mod_python uses import_module behind the scenes anyway.  In this
>>>>> setup, my caching issue remains, and changes to C are definitely not
>>>>> reflected in apache until a server restart.  Again note that it
>>>>> doesn't matter if I make B use the 'import' keyword or the
>>>>> apache.import_module() method.  Both result in failure to reload.
>>>>>
>>>>> I can't seem to diagnose what's even wrong, since the only reason
>>>>> module A, B, or C is being found in the first place is because of my
>>>>> importer.path variable is set in httpd.conf.  I've been using
>>>>> practically empty files to test this.  Each file contains no more than
>>>>> 5 lines to get the modules imported and then to write out a
>>>>> confirmation to the screen that it worked.
>>>>>
>>>>> Wisdom to offer?
>>>>
>>>> Yes, from memory the module importer isn't properly case insensitive
>>>> on Windows or MacOS X where file systems is case insensitive. Thus,
>>>> make sure your imports match exactly the case of the directories/files
>>>> in the file system.
>>>>
>>>> Also, use:
>>>>
>>>>  from mod_python import apache
>>>>  apache.log_error('__name__ = %s' % repr(__name__))
>>>>  apache.log_error('__file__ = %s' % repr(__file__))
>>>>
>>>> in modules so that information about imported files is logged as
>>>> imported. This will tell you which files are being imported.
>>>>
>>>> With PythonDebug On you should also see messages in Apache error logs
>>>> describing when they are being imported, initially and when changed.
>>>>
>>>> You can also write some code which extracts out of the mod_python
>>>> importer cache the details of everything that has been loaded and the
>>>> relationships. The function to call is:
>>>>
>>>>  from mod_python import apache
>>>>  data = apache.request_modules_graph()
>>>>
>>>> write that to a file and run:
>>>>
>>>>  http://www.graphviz.org/
>>>>  http://www.graphviz.org/Download_windows.php
>>>>
>>>> on it.
>>>>
>>>> Graham
>>>>
>>>>>> Now you do realise you don't need to convert 'import' to
>>>>>> import_module() everywhere?
>>>>>>
>>>>>> The 'import' directive when used inside a file which was already
>>>>>> managed by mod_python calls import_module() internally anyway.
>>>>>>
>>>>>> You just need to ensure you set mod_python's own module search path,
>>>>>> ie. mod_python.importer.path
>>>>>>
>>>>>> Graham
>>>>>>
>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> > Okay, I think I'm on the same page as you now-- I've been playing
>>>>>> > around with it and it seems that when I leave my PythonPath to find my
>>>>>> > import modules, I definitely get no auto reloading goodness, while
>>>>>> > when I specify the root path to find them as files, rather than as
>>>>>> > modules (as explained in that documentation you linked to), things
>>>>>> > seem to work as expected.
>>>>>> >
>>>>>> > I wasn't getting any warnings in my apache log, and after putting
>>>>>> > together the details, I shouldn't be expecting any of that behavior
>>>>>> > with two of the same module in memory.  My issue seems to be simply in
>>>>>> > avoiding letting my PythonPath find my code.
>>>>>> >
>>>>>> > Thank you much,
>>>>>> > Tim
>>>>>> >
>>>>>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>>>>>> >>> my www directory.
>>>>>> >>
>>>>>> >> That in itself may not be enough to cause problem. You should actually
>>>>>> >> see a warning in Apache error log complaining you have done this. That
>>>>>> >> is, overlapped sys.path with directories that mod_python module
>>>>>> >> importer uses.
>>>>>> >>
>>>>>> >> The real problem with doing this overlapping is that a module which
>>>>>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>>>>>> >> something from the www directory, which also happens to be a handler
>>>>>> >> module, there will actually be too copies in memory and so can give
>>>>>> >> unexpected results.
>>>>>> >>
>>>>>> >> Graham
>>>>>> >>
>>>>>> >>> I had been using a forced path in my apache conf
>>>>>> >>> file to point to '~', for simple reference for the time being.
>>>>>> >>>
>>>>>> >>> I think my problem is simply that the modules I'm trying to import
>>>>>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>>>>>> >>> should already have been chained together with these
>>>>>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>>>>>> >>> scripts, the first loading the second.
>>>>>> >>>
>>>>>> >>> Tim
>>>>>> >>>
>>>>>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>>>>>> >>> <graham.dumpleton@gmail.com> wrote:
>>>>>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>>>>> >>>>> some of my scripts over to this apache.load_module function, but I
>>>>>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>>>>> >>>>> documentation properly, it seems that the PythonOption for
>>>>>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>>>>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>>>>> >>>>> have I simply misread the documentation?  I still have to restart the
>>>>>> >>>>> Apache service in order to push the changes.
>>>>>> >>>>
>>>>>> >>>> Reloading does not work for any Python modules/packages installed in
>>>>>> >>>> standard Python module search path. Thus, if you have set PythonPath
>>>>>> >>>> to some directory where you store your modules, or if they are in
>>>>>> >>>> system site-packages directory, they are not candidates for reloading.
>>>>>> >>>>
>>>>>> >>>> Where are the modules you are modifying and expecting to be reloading
>>>>>> >>>> located? Is that location on sys.path, or have you explicitly setup
>>>>>> >>>> mod_python module importer path to tell it where they are?
>>>>>> >>>>
>>>>>> >>>> From within running application, print out __name__ from the module
>>>>>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>>>>>> >>>> it look like a normal module name or something magic?
>>>>>> >>>>
>>>>>> >>>> How was that module imported? There needs to be a chain from
>>>>>> >>>> mod_python handler for imports right down through to all modules you
>>>>>> >>>> want reloadable. If there aren't, for example, you are using
>>>>>> >>>> import_module() from a normal Python module which isn't a candidate
>>>>>> >>>> for reloading, you will not see the depth checking for reloading
>>>>>> >>>> occurring as you might expect.
>>>>>> >>>>
>>>>>> >>>> Graham
>>>>>> >>>>
>>>>>> >>>>> Tim
>>>>>> >>>>>
>>>>>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>>>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>>>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>>>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>>>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>>>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>>>>>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>>>>>> >>>>>> folk.
>>>>>> >>>>>>
>>>>>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>>>>>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>>>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>>>>>> >>>>>> Apache module like this, for those of us like me, who would have gone
>>>>>> >>>>>> many months more before having every accidentally found this manual
>>>>>> >>>>>> import method.
>>>>>> >>>>>>
>>>>>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>>>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>>>>>> >>>>>>>
>>>>>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>> >>>>>>> >
>>>>>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>>>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>>>>>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>>>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>>>>>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>>>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>>>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>>>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>>>> >>>>>>> > should have found answers very quickly.
>>>>>> >>>>>>> >
>>>>>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>>> >>>>>>>
>>>>>> >>>>>>> PHP is specifically designed for web applications and it purposely
>>>>>> >>>>>>> throws away all code at the end of each request and thus is reloading
>>>>>> >>>>>>> it all on every request. Have a read of:
>>>>>> >>>>>>>
>>>>>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>>> >>>>>>>
>>>>>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>>>> >>>>>>> similar to Python in that you are applying a non web language to the
>>>>>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>>>>>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>>>> >>>>>>> as well, but as with anything CGI, much slower.
>>>>>> >>>>>>>
>>>>>> >>>>>>> BTW, maybe read:
>>>>>> >>>>>>>
>>>>>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>>> >>>>>>>
>>>>>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>>>> >>>>>>> on code changes. You do need to use a real operating system though,
>>>>>> >>>>>>> and not Windows.
>>>>>> >>>>>>>
>>>>>> >>>>>>> Graham
>>>>>> >>>>>>>
>>>>>> >>>>>>> > Tim
>>>>>> >>>>>>> >
>>>>>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>>>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>> >>>>>>> >>
>>>>>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>>>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>>>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>>>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>>>> >>>>>>> >> > descriptive.
>>>>>> >>>>>>> >>
>>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>> >>>>>>> >>
>>>>>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>>>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>>>>>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>>>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>>>> >>>>>>> >> behaviour.
>>>>>> >>>>>>> >>
>>>>>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>>>>>> >>>>>>> >> files imported by mod_python using its own special module importer.
>>>>>> >>>>>>> >> This is documented under 'import_module()' function in:
>>>>>> >>>>>>> >>
>>>>>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>>>> >>>>>>> >>
>>>>>> >>>>>>> >> Graham
>>>>>> >>>>>>> >>
>>>>>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>>>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>>>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>>>> >>>>>>> >> > know my code isn't to blame for the issue:
>>>>>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>>>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>>>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>>>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>>>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>>>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>>>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>>>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>>>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>>>> >>>>>>> >> > my code finally gets pushed through to the web server.
>>>>>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>>>>>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>>>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>>>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>>>>>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>>>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>>>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>>>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>>>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>>>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>>>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>>>> >>>>>>> >> > an apache restart in order to take effect.
>>>>>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>>>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>>>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>>>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>>>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>>>> >>>>>>> >> > BACKEND looks like:
>>>>>> >>>>>>> >> > def getUsers(self, req, terms):
>>>>>> >>>>>>> >> >
>>>>>> >>>>>>> >> > and I'm calling it with
>>>>>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>>>>>> >>>>>>> >> >
>>>>>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>>>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>>>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>>>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>>>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>>>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>>>> >>>>>>> >> > current code actually says.
>>>>>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>>>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>>>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>>>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>>>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>>>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>>>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>>>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>>>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>>>> >>>>>>> >> > madeUpVar.moo = 42
>>>>>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>>>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>>>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>>>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>>>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>>>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>>>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>>>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>>>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>>>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>>>> >>>>>>> >> > aren't being reflected in my web server.
>>>>>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>>>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>>>> >>>>>>> >> > the problem will have disappeared for the time being.
>>>>>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>>>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>>>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>>>> >>>>>>> >> > _______________________________________________
>>>>>> >>>>>>> >> > Mod_python mailing list
>>>>>> >>>>>>> >> > Mod_python@modpython.org
>>>>>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>> >>>>>>> >> >
>>>>>> >>>>>>> >> >
>>>>>> >>>>>>> >
>>>>>> >>>>>>
>>>>>> >>>>>>
>>>>>> >>>>>>
>>>>>> >>>>> _______________________________________________
>>>>>> >>>>> Mod_python mailing list
>>>>>> >>>>> Mod_python@modpython.org
>>>>>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From tonightslastsong at gmail.com  Tue Jan 13 01:44:32 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Tue Jan 13 01:44:39 2009
Subject: [mod_python] Caching issues
In-Reply-To: <88e286470901122236i187b3b9bn62cfb886b122a878@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<88e286470901112039j29b76f9eocf36eb98f71afcee@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
	<88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>
	<d01b8cf20901122210m2f66d6ffk9b9e046a3214ed89@mail.gmail.com>
	<88e286470901122221if00bd4ase2ab10aa8081d754@mail.gmail.com>
	<d01b8cf20901122227q317e0b4eh2ba49826d6208186@mail.gmail.com>
	<88e286470901122236i187b3b9bn62cfb886b122a878@mail.gmail.com>
Message-ID: <d01b8cf20901122244n972be24s70a1ebdbf6af3040@mail.gmail.com>

I'm using 2.5.2, and so I suppose there could be a slight difference
in operation compared to plain old 2.5.

I may just end up trying to use a different solution.  My goal in
using mod_python initially was to keep things simple and not bloated.
All I needed was a basic template of my own, and then I would be done,
putting it into the hands of my project website's community.  I'll
certainly investigate some more options though.  They may in fact be
simpler, especially as Python is moving into its 3.0 days.

Thanks again-- I'll see what I can figure out.

Tim

On Mon, Jan 12, 2009 at 11:36 PM, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
> What version of Python are you using? It is possible that if using
> version of Python newer than what that stuff was originally written
> against, that it is misbehaving. Have seen one other report of odd
> stuff happening. I don't use mod_python any more and don't really have
> time to go digging in to why. Really don't understand why people even
> want to keep writing stuff to mod_python specific APIs when better
> options exist these days for Python web applications.
>
> Graham
>
> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>> You should be able to add multiple directories and so long as a single
>>> Python module code file, should be found even when using 'import'.
>>
>> I tried adding my 'subDir'' to the path, so that it looks like this:
>>    PythonOption mod_python.importer.path "['~' , '~/include/']"
>> My 'import' keyword attempts still failed when trying to import across
>> this 'include' folder into a specific module file residing there.
>>
>> I simplified the experiment down to the above importer.path, and just
>> ./A.py which uses a keyword 'import' to try to grab C.py from this
>> 'include' folder.  This had surprisingly still lead to failure to find
>> the module.
>>
>>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>> Thank you for the links-- they prove useful.
>>>>
>>>> Capitalization shouldn't be an issue here... When I began learning
>>>> Unix a good while back, I quickly cast off relying on the OS to
>>>> 'figure it out'.  I've been keeping everything case sensitive.
>>>>
>>>> Backing up to something foundational: I seem to be able to use the
>>>> import_module() method without problems now, but practically any use
>>>> of standard python 'import'/'from' keywords fails.  The only success I
>>>> get is when the desired module is in the same directory as the one
>>>> trying to use the 'import' keyword.  Does this stem from the fact that
>>>> import_module isn't look for packages, but rather specific files?  Is
>>>> it for that reason that I can't use
>>>>    from subDir import C
>>>> or, the equally broken,
>>>>    import subDir.C
>>>
>>> Packages not supported with mod_python module importer, so these fall
>>> through import_module and uses standard Python import mechanism.
>>>
>>>> Jiggering around with adding more entries in importer.path to my
>>>> subdirectories doesn't seem to have any effect.
>>>
>>> You should be able to add multiple directories and so long as a single
>>> Python module code file, should be found even when using 'import'.
>>>
>>> Graham
>>>
>>>> If the 'import'
>>>> keyword really is bound to it's working directory only, I will likely
>>>> in fact have to use import_module() is several places, rather than
>>>> just at the head of the request (./A.py)
>>>>
>>>> Despite my general lack of success, I appreciate the comments you've
>>>> made along the way.
>>>>
>>>> Tim
>>>>
>>>> On Mon, Jan 12, 2009 at 10:40 PM, Graham Dumpleton
>>>> <graham.dumpleton@gmail.com> wrote:
>>>>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> You just need to ensure you set mod_python's own module search path,
>>>>>>> ie. mod_python.importer.path
>>>>>>
>>>>>> And yet, as I've now removed my www directory from my PythonPath, I
>>>>>> actually get limited functionality out of the mod_python imports.
>>>>>> I've got my apache conf file globally applying the option:
>>>>>>
>>>>>>        PythonOption mod_python.importer.path "['~']"
>>>>>> Also have tried using an absolute path, which is producing the same
>>>>>> functionality:
>>>>>>        PythonOption mod_python.importer.path "['V:/www/']"
>>>>>>
>>>>>> My main module ('A') is requested by Apache in my browser, which uses
>>>>>> import_module to find and import file B.  File B is in the same
>>>>>> directory as A, and they only way it was found was through my apache
>>>>>> conf noted above.  This part works just fine, but two cases develop
>>>>>> from here:
>>>>>>
>>>>>> 1) If I use module B to import a third module 'C', I can't seem to
>>>>>> make it find module C if it's in a subdirectory.  For instance, doing
>>>>>> either 'import subDirectory.moduleC' or doing
>>>>>> 'apache.import_module("subDirectory/moduleC")' results in a failure to
>>>>>> find the module.  Note that in this case of subdirectories, I'm
>>>>>> intentionally avoiding absolute paths to reach my modules.  I only
>>>>>> want to get absolute in my Apache conf.  On the flip side, if module C
>>>>>> is in the same local directory as A and B, then mod_python finds
>>>>>> module C just fine.
>>>>>
>>>>> Try:
>>>>>
>>>>>  apache.import_module("./subDirectory/moduleC.py")
>>>>>
>>>>>> 2 ) If I place C in the same directory as A and B, so that mod_python
>>>>>> finds it, I tried using the natural Python 'import' keyword in B to
>>>>>> import C.  According to what I understand, this should be fine for
>>>>>> auto-reloading, since A imports B via import_module, and so then B can
>>>>>> use either importing strategy to get C in the picture because
>>>>>> mod_python uses import_module behind the scenes anyway.  In this
>>>>>> setup, my caching issue remains, and changes to C are definitely not
>>>>>> reflected in apache until a server restart.  Again note that it
>>>>>> doesn't matter if I make B use the 'import' keyword or the
>>>>>> apache.import_module() method.  Both result in failure to reload.
>>>>>>
>>>>>> I can't seem to diagnose what's even wrong, since the only reason
>>>>>> module A, B, or C is being found in the first place is because of my
>>>>>> importer.path variable is set in httpd.conf.  I've been using
>>>>>> practically empty files to test this.  Each file contains no more than
>>>>>> 5 lines to get the modules imported and then to write out a
>>>>>> confirmation to the screen that it worked.
>>>>>>
>>>>>> Wisdom to offer?
>>>>>
>>>>> Yes, from memory the module importer isn't properly case insensitive
>>>>> on Windows or MacOS X where file systems is case insensitive. Thus,
>>>>> make sure your imports match exactly the case of the directories/files
>>>>> in the file system.
>>>>>
>>>>> Also, use:
>>>>>
>>>>>  from mod_python import apache
>>>>>  apache.log_error('__name__ = %s' % repr(__name__))
>>>>>  apache.log_error('__file__ = %s' % repr(__file__))
>>>>>
>>>>> in modules so that information about imported files is logged as
>>>>> imported. This will tell you which files are being imported.
>>>>>
>>>>> With PythonDebug On you should also see messages in Apache error logs
>>>>> describing when they are being imported, initially and when changed.
>>>>>
>>>>> You can also write some code which extracts out of the mod_python
>>>>> importer cache the details of everything that has been loaded and the
>>>>> relationships. The function to call is:
>>>>>
>>>>>  from mod_python import apache
>>>>>  data = apache.request_modules_graph()
>>>>>
>>>>> write that to a file and run:
>>>>>
>>>>>  http://www.graphviz.org/
>>>>>  http://www.graphviz.org/Download_windows.php
>>>>>
>>>>> on it.
>>>>>
>>>>> Graham
>>>>>
>>>>>>> Now you do realise you don't need to convert 'import' to
>>>>>>> import_module() everywhere?
>>>>>>>
>>>>>>> The 'import' directive when used inside a file which was already
>>>>>>> managed by mod_python calls import_module() internally anyway.
>>>>>>>
>>>>>>> You just need to ensure you set mod_python's own module search path,
>>>>>>> ie. mod_python.importer.path
>>>>>>>
>>>>>>> Graham
>>>>>>>
>>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> > Okay, I think I'm on the same page as you now-- I've been playing
>>>>>>> > around with it and it seems that when I leave my PythonPath to find my
>>>>>>> > import modules, I definitely get no auto reloading goodness, while
>>>>>>> > when I specify the root path to find them as files, rather than as
>>>>>>> > modules (as explained in that documentation you linked to), things
>>>>>>> > seem to work as expected.
>>>>>>> >
>>>>>>> > I wasn't getting any warnings in my apache log, and after putting
>>>>>>> > together the details, I shouldn't be expecting any of that behavior
>>>>>>> > with two of the same module in memory.  My issue seems to be simply in
>>>>>>> > avoiding letting my PythonPath find my code.
>>>>>>> >
>>>>>>> > Thank you much,
>>>>>>> > Tim
>>>>>>> >
>>>>>>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>>>>>>> >>> my www directory.
>>>>>>> >>
>>>>>>> >> That in itself may not be enough to cause problem. You should actually
>>>>>>> >> see a warning in Apache error log complaining you have done this. That
>>>>>>> >> is, overlapped sys.path with directories that mod_python module
>>>>>>> >> importer uses.
>>>>>>> >>
>>>>>>> >> The real problem with doing this overlapping is that a module which
>>>>>>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>>>>>>> >> something from the www directory, which also happens to be a handler
>>>>>>> >> module, there will actually be too copies in memory and so can give
>>>>>>> >> unexpected results.
>>>>>>> >>
>>>>>>> >> Graham
>>>>>>> >>
>>>>>>> >>> I had been using a forced path in my apache conf
>>>>>>> >>> file to point to '~', for simple reference for the time being.
>>>>>>> >>>
>>>>>>> >>> I think my problem is simply that the modules I'm trying to import
>>>>>>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>>>>>>> >>> should already have been chained together with these
>>>>>>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>>>>>>> >>> scripts, the first loading the second.
>>>>>>> >>>
>>>>>>> >>> Tim
>>>>>>> >>>
>>>>>>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>>>>>>> >>> <graham.dumpleton@gmail.com> wrote:
>>>>>>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>>>>>> >>>>> some of my scripts over to this apache.load_module function, but I
>>>>>>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>>>>>> >>>>> documentation properly, it seems that the PythonOption for
>>>>>>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>>>>>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>>>>>> >>>>> have I simply misread the documentation?  I still have to restart the
>>>>>>> >>>>> Apache service in order to push the changes.
>>>>>>> >>>>
>>>>>>> >>>> Reloading does not work for any Python modules/packages installed in
>>>>>>> >>>> standard Python module search path. Thus, if you have set PythonPath
>>>>>>> >>>> to some directory where you store your modules, or if they are in
>>>>>>> >>>> system site-packages directory, they are not candidates for reloading.
>>>>>>> >>>>
>>>>>>> >>>> Where are the modules you are modifying and expecting to be reloading
>>>>>>> >>>> located? Is that location on sys.path, or have you explicitly setup
>>>>>>> >>>> mod_python module importer path to tell it where they are?
>>>>>>> >>>>
>>>>>>> >>>> From within running application, print out __name__ from the module
>>>>>>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>>>>>>> >>>> it look like a normal module name or something magic?
>>>>>>> >>>>
>>>>>>> >>>> How was that module imported? There needs to be a chain from
>>>>>>> >>>> mod_python handler for imports right down through to all modules you
>>>>>>> >>>> want reloadable. If there aren't, for example, you are using
>>>>>>> >>>> import_module() from a normal Python module which isn't a candidate
>>>>>>> >>>> for reloading, you will not see the depth checking for reloading
>>>>>>> >>>> occurring as you might expect.
>>>>>>> >>>>
>>>>>>> >>>> Graham
>>>>>>> >>>>
>>>>>>> >>>>> Tim
>>>>>>> >>>>>
>>>>>>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>>>>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>>>>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>>>>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>>>>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>>>>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>>>>>>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>>>>>>> >>>>>> folk.
>>>>>>> >>>>>>
>>>>>>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>>>>>>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>>>>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>>>>>>> >>>>>> Apache module like this, for those of us like me, who would have gone
>>>>>>> >>>>>> many months more before having every accidentally found this manual
>>>>>>> >>>>>> import method.
>>>>>>> >>>>>>
>>>>>>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>>>>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>>>>>>> >>>>>>>
>>>>>>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>>> >>>>>>> >
>>>>>>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>>>>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>>>>>>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>>>>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>>>>>>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>>>>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>>>>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>>>>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>>>>> >>>>>>> > should have found answers very quickly.
>>>>>>> >>>>>>> >
>>>>>>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>>>> >>>>>>>
>>>>>>> >>>>>>> PHP is specifically designed for web applications and it purposely
>>>>>>> >>>>>>> throws away all code at the end of each request and thus is reloading
>>>>>>> >>>>>>> it all on every request. Have a read of:
>>>>>>> >>>>>>>
>>>>>>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>>>> >>>>>>>
>>>>>>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>>>>> >>>>>>> similar to Python in that you are applying a non web language to the
>>>>>>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>>>>>>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>>>>> >>>>>>> as well, but as with anything CGI, much slower.
>>>>>>> >>>>>>>
>>>>>>> >>>>>>> BTW, maybe read:
>>>>>>> >>>>>>>
>>>>>>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>>>> >>>>>>>
>>>>>>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>>>>> >>>>>>> on code changes. You do need to use a real operating system though,
>>>>>>> >>>>>>> and not Windows.
>>>>>>> >>>>>>>
>>>>>>> >>>>>>> Graham
>>>>>>> >>>>>>>
>>>>>>> >>>>>>> > Tim
>>>>>>> >>>>>>> >
>>>>>>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>>>>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>>> >>>>>>> >>
>>>>>>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>>>>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>>>>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>>>>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>>>>> >>>>>>> >> > descriptive.
>>>>>>> >>>>>>> >>
>>>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>>> >>>>>>> >>
>>>>>>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>>>>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>>>>>>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>>>>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>>>>> >>>>>>> >> behaviour.
>>>>>>> >>>>>>> >>
>>>>>>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>>>>>>> >>>>>>> >> files imported by mod_python using its own special module importer.
>>>>>>> >>>>>>> >> This is documented under 'import_module()' function in:
>>>>>>> >>>>>>> >>
>>>>>>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>>>>> >>>>>>> >>
>>>>>>> >>>>>>> >> Graham
>>>>>>> >>>>>>> >>
>>>>>>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>>>>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>>>>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>>>>> >>>>>>> >> > know my code isn't to blame for the issue:
>>>>>>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>>>>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>>>>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>>>>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>>>>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>>>>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>>>>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>>>>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>>>>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>>>>> >>>>>>> >> > my code finally gets pushed through to the web server.
>>>>>>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>>>>>>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>>>>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>>>>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>>>>>>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>>>>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>>>>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>>>>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>>>>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>>>>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>>>>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>>>>> >>>>>>> >> > an apache restart in order to take effect.
>>>>>>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>>>>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>>>>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>>>>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>>>>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>>>>> >>>>>>> >> > BACKEND looks like:
>>>>>>> >>>>>>> >> > def getUsers(self, req, terms):
>>>>>>> >>>>>>> >> >
>>>>>>> >>>>>>> >> > and I'm calling it with
>>>>>>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>>>>>>> >>>>>>> >> >
>>>>>>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>>>>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>>>>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>>>>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>>>>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>>>>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>>>>> >>>>>>> >> > current code actually says.
>>>>>>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>>>>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>>>>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>>>>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>>>>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>>>>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>>>>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>>>>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>>>>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>>>>> >>>>>>> >> > madeUpVar.moo = 42
>>>>>>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>>>>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>>>>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>>>>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>>>>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>>>>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>>>>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>>>>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>>>>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>>>>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>>>>> >>>>>>> >> > aren't being reflected in my web server.
>>>>>>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>>>>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>>>>> >>>>>>> >> > the problem will have disappeared for the time being.
>>>>>>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>>>>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>>>>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>>>>> >>>>>>> >> > _______________________________________________
>>>>>>> >>>>>>> >> > Mod_python mailing list
>>>>>>> >>>>>>> >> > Mod_python@modpython.org
>>>>>>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>>> >>>>>>> >> >
>>>>>>> >>>>>>> >> >
>>>>>>> >>>>>>> >
>>>>>>> >>>>>>
>>>>>>> >>>>>>
>>>>>>> >>>>>>
>>>>>>> >>>>> _______________________________________________
>>>>>>> >>>>> Mod_python mailing list
>>>>>>> >>>>> Mod_python@modpython.org
>>>>>>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>



-- 
"Thanksgiving Dinner sent you a message."
"If you are not a member, you need to join us."
"i was not declared before this scope."
From graham.dumpleton at gmail.com  Tue Jan 13 01:56:27 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Tue Jan 13 01:56:33 2009
Subject: [mod_python] Caching issues
In-Reply-To: <d01b8cf20901122244n972be24s70a1ebdbf6af3040@mail.gmail.com>
References: <d01b8cf20901102104q48ef203av865aacf68d2e47f5@mail.gmail.com>
	<d01b8cf20901112115r587aa43cuba09ea1addb152b1@mail.gmail.com>
	<88e286470901112119k7e86cdbbpacc30aee397c9de8@mail.gmail.com>
	<d01b8cf20901122117p525f5788vd7e767e326329598@mail.gmail.com>
	<88e286470901122140p72374359l9ea208c880d4119b@mail.gmail.com>
	<d01b8cf20901122210m2f66d6ffk9b9e046a3214ed89@mail.gmail.com>
	<88e286470901122221if00bd4ase2ab10aa8081d754@mail.gmail.com>
	<d01b8cf20901122227q317e0b4eh2ba49826d6208186@mail.gmail.com>
	<88e286470901122236i187b3b9bn62cfb886b122a878@mail.gmail.com>
	<d01b8cf20901122244n972be24s70a1ebdbf6af3040@mail.gmail.com>
Message-ID: <88e286470901122256m5bfd1f9ch7b608ebafa748dda@mail.gmail.com>

2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
> I'm using 2.5.2, and so I suppose there could be a slight difference
> in operation compared to plain old 2.5.
>
> I may just end up trying to use a different solution.  My goal in
> using mod_python initially was to keep things simple and not bloated.

Hmmm, mod_python actually has a bit of a reputation for being bloated. :-)

> All I needed was a basic template of my own, and then I would be done,
> putting it into the hands of my project website's community.  I'll
> certainly investigate some more options though.  They may in fact be
> simpler, especially as Python is moving into its 3.0 days.

And that is one of the problems with mod_python. At this stage it
looks highly unlikely that it will be ported to Python 3.0.

For a lightweight solution, suggest you look at:

  http://werkzeug.pocoo.org/

Can run on pure Python WSGI server, mod_wsgi, or fastcgi/scgi/ajp using flup.

Graham

> Thanks again-- I'll see what I can figure out.
>
> Tim
>
> On Mon, Jan 12, 2009 at 11:36 PM, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>> What version of Python are you using? It is possible that if using
>> version of Python newer than what that stuff was originally written
>> against, that it is misbehaving. Have seen one other report of odd
>> stuff happening. I don't use mod_python any more and don't really have
>> time to go digging in to why. Really don't understand why people even
>> want to keep writing stuff to mod_python specific APIs when better
>> options exist these days for Python web applications.
>>
>> Graham
>>
>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>> You should be able to add multiple directories and so long as a single
>>>> Python module code file, should be found even when using 'import'.
>>>
>>> I tried adding my 'subDir'' to the path, so that it looks like this:
>>>    PythonOption mod_python.importer.path "['~' , '~/include/']"
>>> My 'import' keyword attempts still failed when trying to import across
>>> this 'include' folder into a specific module file residing there.
>>>
>>> I simplified the experiment down to the above importer.path, and just
>>> ./A.py which uses a keyword 'import' to try to grab C.py from this
>>> 'include' folder.  This had surprisingly still lead to failure to find
>>> the module.
>>>
>>>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>>> Thank you for the links-- they prove useful.
>>>>>
>>>>> Capitalization shouldn't be an issue here... When I began learning
>>>>> Unix a good while back, I quickly cast off relying on the OS to
>>>>> 'figure it out'.  I've been keeping everything case sensitive.
>>>>>
>>>>> Backing up to something foundational: I seem to be able to use the
>>>>> import_module() method without problems now, but practically any use
>>>>> of standard python 'import'/'from' keywords fails.  The only success I
>>>>> get is when the desired module is in the same directory as the one
>>>>> trying to use the 'import' keyword.  Does this stem from the fact that
>>>>> import_module isn't look for packages, but rather specific files?  Is
>>>>> it for that reason that I can't use
>>>>>    from subDir import C
>>>>> or, the equally broken,
>>>>>    import subDir.C
>>>>
>>>> Packages not supported with mod_python module importer, so these fall
>>>> through import_module and uses standard Python import mechanism.
>>>>
>>>>> Jiggering around with adding more entries in importer.path to my
>>>>> subdirectories doesn't seem to have any effect.
>>>>
>>>> You should be able to add multiple directories and so long as a single
>>>> Python module code file, should be found even when using 'import'.
>>>>
>>>> Graham
>>>>
>>>>> If the 'import'
>>>>> keyword really is bound to it's working directory only, I will likely
>>>>> in fact have to use import_module() is several places, rather than
>>>>> just at the head of the request (./A.py)
>>>>>
>>>>> Despite my general lack of success, I appreciate the comments you've
>>>>> made along the way.
>>>>>
>>>>> Tim
>>>>>
>>>>> On Mon, Jan 12, 2009 at 10:40 PM, Graham Dumpleton
>>>>> <graham.dumpleton@gmail.com> wrote:
>>>>>> 2009/1/13 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>>> You just need to ensure you set mod_python's own module search path,
>>>>>>>> ie. mod_python.importer.path
>>>>>>>
>>>>>>> And yet, as I've now removed my www directory from my PythonPath, I
>>>>>>> actually get limited functionality out of the mod_python imports.
>>>>>>> I've got my apache conf file globally applying the option:
>>>>>>>
>>>>>>>        PythonOption mod_python.importer.path "['~']"
>>>>>>> Also have tried using an absolute path, which is producing the same
>>>>>>> functionality:
>>>>>>>        PythonOption mod_python.importer.path "['V:/www/']"
>>>>>>>
>>>>>>> My main module ('A') is requested by Apache in my browser, which uses
>>>>>>> import_module to find and import file B.  File B is in the same
>>>>>>> directory as A, and they only way it was found was through my apache
>>>>>>> conf noted above.  This part works just fine, but two cases develop
>>>>>>> from here:
>>>>>>>
>>>>>>> 1) If I use module B to import a third module 'C', I can't seem to
>>>>>>> make it find module C if it's in a subdirectory.  For instance, doing
>>>>>>> either 'import subDirectory.moduleC' or doing
>>>>>>> 'apache.import_module("subDirectory/moduleC")' results in a failure to
>>>>>>> find the module.  Note that in this case of subdirectories, I'm
>>>>>>> intentionally avoiding absolute paths to reach my modules.  I only
>>>>>>> want to get absolute in my Apache conf.  On the flip side, if module C
>>>>>>> is in the same local directory as A and B, then mod_python finds
>>>>>>> module C just fine.
>>>>>>
>>>>>> Try:
>>>>>>
>>>>>>  apache.import_module("./subDirectory/moduleC.py")
>>>>>>
>>>>>>> 2 ) If I place C in the same directory as A and B, so that mod_python
>>>>>>> finds it, I tried using the natural Python 'import' keyword in B to
>>>>>>> import C.  According to what I understand, this should be fine for
>>>>>>> auto-reloading, since A imports B via import_module, and so then B can
>>>>>>> use either importing strategy to get C in the picture because
>>>>>>> mod_python uses import_module behind the scenes anyway.  In this
>>>>>>> setup, my caching issue remains, and changes to C are definitely not
>>>>>>> reflected in apache until a server restart.  Again note that it
>>>>>>> doesn't matter if I make B use the 'import' keyword or the
>>>>>>> apache.import_module() method.  Both result in failure to reload.
>>>>>>>
>>>>>>> I can't seem to diagnose what's even wrong, since the only reason
>>>>>>> module A, B, or C is being found in the first place is because of my
>>>>>>> importer.path variable is set in httpd.conf.  I've been using
>>>>>>> practically empty files to test this.  Each file contains no more than
>>>>>>> 5 lines to get the modules imported and then to write out a
>>>>>>> confirmation to the screen that it worked.
>>>>>>>
>>>>>>> Wisdom to offer?
>>>>>>
>>>>>> Yes, from memory the module importer isn't properly case insensitive
>>>>>> on Windows or MacOS X where file systems is case insensitive. Thus,
>>>>>> make sure your imports match exactly the case of the directories/files
>>>>>> in the file system.
>>>>>>
>>>>>> Also, use:
>>>>>>
>>>>>>  from mod_python import apache
>>>>>>  apache.log_error('__name__ = %s' % repr(__name__))
>>>>>>  apache.log_error('__file__ = %s' % repr(__file__))
>>>>>>
>>>>>> in modules so that information about imported files is logged as
>>>>>> imported. This will tell you which files are being imported.
>>>>>>
>>>>>> With PythonDebug On you should also see messages in Apache error logs
>>>>>> describing when they are being imported, initially and when changed.
>>>>>>
>>>>>> You can also write some code which extracts out of the mod_python
>>>>>> importer cache the details of everything that has been loaded and the
>>>>>> relationships. The function to call is:
>>>>>>
>>>>>>  from mod_python import apache
>>>>>>  data = apache.request_modules_graph()
>>>>>>
>>>>>> write that to a file and run:
>>>>>>
>>>>>>  http://www.graphviz.org/
>>>>>>  http://www.graphviz.org/Download_windows.php
>>>>>>
>>>>>> on it.
>>>>>>
>>>>>> Graham
>>>>>>
>>>>>>>> Now you do realise you don't need to convert 'import' to
>>>>>>>> import_module() everywhere?
>>>>>>>>
>>>>>>>> The 'import' directive when used inside a file which was already
>>>>>>>> managed by mod_python calls import_module() internally anyway.
>>>>>>>>
>>>>>>>> You just need to ensure you set mod_python's own module search path,
>>>>>>>> ie. mod_python.importer.path
>>>>>>>>
>>>>>>>> Graham
>>>>>>>>
>>>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>>> > Okay, I think I'm on the same page as you now-- I've been playing
>>>>>>>> > around with it and it seems that when I leave my PythonPath to find my
>>>>>>>> > import modules, I definitely get no auto reloading goodness, while
>>>>>>>> > when I specify the root path to find them as files, rather than as
>>>>>>>> > modules (as explained in that documentation you linked to), things
>>>>>>>> > seem to work as expected.
>>>>>>>> >
>>>>>>>> > I wasn't getting any warnings in my apache log, and after putting
>>>>>>>> > together the details, I shouldn't be expecting any of that behavior
>>>>>>>> > with two of the same module in memory.  My issue seems to be simply in
>>>>>>>> > avoiding letting my PythonPath find my code.
>>>>>>>> >
>>>>>>>> > Thank you much,
>>>>>>>> > Tim
>>>>>>>> >
>>>>>>>> > On Sun, Jan 11, 2009 at 9:39 PM, Graham Dumpleton
>>>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>>>> >> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>>> >>> Okay, that makes sense.  My PythonPath system var definitely includes
>>>>>>>> >>> my www directory.
>>>>>>>> >>
>>>>>>>> >> That in itself may not be enough to cause problem. You should actually
>>>>>>>> >> see a warning in Apache error log complaining you have done this. That
>>>>>>>> >> is, overlapped sys.path with directories that mod_python module
>>>>>>>> >> importer uses.
>>>>>>>> >>
>>>>>>>> >> The real problem with doing this overlapping is that a module which
>>>>>>>> >> wasn't one managed by mod_python, ie., standard Python module, imports
>>>>>>>> >> something from the www directory, which also happens to be a handler
>>>>>>>> >> module, there will actually be too copies in memory and so can give
>>>>>>>> >> unexpected results.
>>>>>>>> >>
>>>>>>>> >> Graham
>>>>>>>> >>
>>>>>>>> >>> I had been using a forced path in my apache conf
>>>>>>>> >>> file to point to '~', for simple reference for the time being.
>>>>>>>> >>>
>>>>>>>> >>> I think my problem is simply that the modules I'm trying to import
>>>>>>>> >>> aren't 'candidates' for reloading.  Other than that, all other modules
>>>>>>>> >>> should already have been chained together with these
>>>>>>>> >>> apache.load_module calls.  My test case was pretty simple-- just two
>>>>>>>> >>> scripts, the first loading the second.
>>>>>>>> >>>
>>>>>>>> >>> Tim
>>>>>>>> >>>
>>>>>>>> >>> On Sun, Jan 11, 2009 at 8:25 PM, Graham Dumpleton
>>>>>>>> >>> <graham.dumpleton@gmail.com> wrote:
>>>>>>>> >>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>>> >>>>> Apologies for more trouble on the caching issue-- I've been adapting
>>>>>>>> >>>>> some of my scripts over to this apache.load_module function, but I
>>>>>>>> >>>>> don't think I'm seeing resolution to the issue.  If I've read the
>>>>>>>> >>>>> documentation properly, it seems that the PythonOption for
>>>>>>>> >>>>> auto-reloading is set to On by default, so to be clear, I haven't put
>>>>>>>> >>>>> a line for that in my httpd.conf file.  Are there any other tricks, or
>>>>>>>> >>>>> have I simply misread the documentation?  I still have to restart the
>>>>>>>> >>>>> Apache service in order to push the changes.
>>>>>>>> >>>>
>>>>>>>> >>>> Reloading does not work for any Python modules/packages installed in
>>>>>>>> >>>> standard Python module search path. Thus, if you have set PythonPath
>>>>>>>> >>>> to some directory where you store your modules, or if they are in
>>>>>>>> >>>> system site-packages directory, they are not candidates for reloading.
>>>>>>>> >>>>
>>>>>>>> >>>> Where are the modules you are modifying and expecting to be reloading
>>>>>>>> >>>> located? Is that location on sys.path, or have you explicitly setup
>>>>>>>> >>>> mod_python module importer path to tell it where they are?
>>>>>>>> >>>>
>>>>>>>> >>>> From within running application, print out __name__ from the module
>>>>>>>> >>>> you have loaded and are expecting to be reloadable, What is it? Does
>>>>>>>> >>>> it look like a normal module name or something magic?
>>>>>>>> >>>>
>>>>>>>> >>>> How was that module imported? There needs to be a chain from
>>>>>>>> >>>> mod_python handler for imports right down through to all modules you
>>>>>>>> >>>> want reloadable. If there aren't, for example, you are using
>>>>>>>> >>>> import_module() from a normal Python module which isn't a candidate
>>>>>>>> >>>> for reloading, you will not see the depth checking for reloading
>>>>>>>> >>>> occurring as you might expect.
>>>>>>>> >>>>
>>>>>>>> >>>> Graham
>>>>>>>> >>>>
>>>>>>>> >>>>> Tim
>>>>>>>> >>>>>
>>>>>>>> >>>>> On Sun, Jan 11, 2009 at 2:32 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
>>>>>>>> >>>>>> Despite the jab at Windows, the site will be deployed on a Unix
>>>>>>>> >>>>>> machine.  I just prefer Windows for ease of use, especially since my
>>>>>>>> >>>>>> wife has zero experience on a unix terminal or in the dearth of truly
>>>>>>>> >>>>>> professional software found on the Unix/Linux platform.  So yes, in
>>>>>>>> >>>>>> the end it will be on a "real" operating system,  But for now I'm
>>>>>>>> >>>>>> willingly sticking to a more user-friendly environment for the simple
>>>>>>>> >>>>>> folk.
>>>>>>>> >>>>>>
>>>>>>>> >>>>>> Given the characteristics of PHP that allow it to circumvent this
>>>>>>>> >>>>>> caching stuff, I still think a nice little friendly red-flag reminder
>>>>>>>> >>>>>> on the main mod_python tutorial should point out this limitation of an
>>>>>>>> >>>>>> Apache module like this, for those of us like me, who would have gone
>>>>>>>> >>>>>> many months more before having every accidentally found this manual
>>>>>>>> >>>>>> import method.
>>>>>>>> >>>>>>
>>>>>>>> >>>>>> On Sun, Jan 11, 2009 at 2:23 PM, Graham Dumpleton
>>>>>>>> >>>>>> <graham.dumpleton@gmail.com> wrote:
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>> 2009/1/12 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>>>> >>>>>>> >
>>>>>>>> >>>>>>> > And for that I apologize.  I do appreciate the straight answer given,
>>>>>>>> >>>>>>> > though I would appreciate much more the addition of that fact in some
>>>>>>>> >>>>>>> > point-blank documentation that was easy to find.  I have scoured the
>>>>>>>> >>>>>>> > mod_python archives by search engine and came out utterly empty
>>>>>>>> >>>>>>> > handed.  I knew what the problem was, but I could find nothing to
>>>>>>>> >>>>>>> > remedy the issue.  I haven't encountered anything quite like this in
>>>>>>>> >>>>>>> > my adventures with PHP, perl, or other similar scripting languages
>>>>>>>> >>>>>>> > piloted by Apache.  It raises a valid concern to which I ideally
>>>>>>>> >>>>>>> > should have found answers very quickly.
>>>>>>>> >>>>>>> >
>>>>>>>> >>>>>>> > I hope this cures the subsequent issue given in the latter half of my message.
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>> PHP is specifically designed for web applications and it purposely
>>>>>>>> >>>>>>> throws away all code at the end of each request and thus is reloading
>>>>>>>> >>>>>>> it all on every request. Have a read of:
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>>  http://blog.ianbicking.org/2008/01/12/what-php-deployment-gets-right/
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>> I would be very surprised if mod_perl auto reloaded code as it is
>>>>>>>> >>>>>>> similar to Python in that you are applying a non web language to the
>>>>>>>> >>>>>>> web. Only way perl code would be reload is if you were running them as
>>>>>>>> >>>>>>> CGI scripts. If you run Python as CGI scripts you will get reloading
>>>>>>>> >>>>>>> as well, but as with anything CGI, much slower.
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>> BTW, maybe read:
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>>  http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>> For WSGI hosted Python web application, this provides auto reloading
>>>>>>>> >>>>>>> on code changes. You do need to use a real operating system though,
>>>>>>>> >>>>>>> and not Windows.
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>> Graham
>>>>>>>> >>>>>>>
>>>>>>>> >>>>>>> > Tim
>>>>>>>> >>>>>>> >
>>>>>>>> >>>>>>> > On Sat, Jan 10, 2009 at 10:23 PM, Graham Dumpleton
>>>>>>>> >>>>>>> > <graham.dumpleton@gmail.com> wrote:
>>>>>>>> >>>>>>> >>
>>>>>>>> >>>>>>> >> 2009/1/11 Tim Valenta <tonightslastsong@gmail.com>:
>>>>>>>> >>>>>>> >> > Hello all-- I've been experiencing a caching issue from the
>>>>>>>> >>>>>>> >> > very beginning of my use of mod_python...  It's been at least 2 months now,
>>>>>>>> >>>>>>> >> > and I keep running into actual issues that prevent me from coding.
>>>>>>>> >>>>>>> >> > I have a knack for over-explaining, so I'll try to keep this concise yet
>>>>>>>> >>>>>>> >> > descriptive.
>>>>>>>> >>>>>>> >>
>>>>>>>> >>>>>>> >> Still not short enough, so much so I stopped part way through.
>>>>>>>> >>>>>>> >>
>>>>>>>> >>>>>>> >> The simple matter of it is that mod_python does not do deep checking
>>>>>>>> >>>>>>> >> of code for changes, nor does it automatically restart the process
>>>>>>>> >>>>>>> >> when code is changed. Thus the need to restart Apache when you make
>>>>>>>> >>>>>>> >> code changes to anything imported from sys.path is expected and normal
>>>>>>>> >>>>>>> >> behaviour.
>>>>>>>> >>>>>>> >>
>>>>>>>> >>>>>>> >> The only time any code is automatically reloaded is the direct code
>>>>>>>> >>>>>>> >> files imported by mod_python using its own special module importer.
>>>>>>>> >>>>>>> >> This is documented under 'import_module()' function in:
>>>>>>>> >>>>>>> >>
>>>>>>>> >>>>>>> >>  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html
>>>>>>>> >>>>>>> >>
>>>>>>>> >>>>>>> >> Graham
>>>>>>>> >>>>>>> >>
>>>>>>>> >>>>>>> >> > I'm developing a site on my local machine, Windows Vista, using Apache 2.2.x
>>>>>>>> >>>>>>> >> > and mod_python 3.3.1 .  I'm a programmer for a living, and I'm not quick to
>>>>>>>> >>>>>>> >> > point the finger at the language, *but* (you knew that was coming, eh?) I
>>>>>>>> >>>>>>> >> > know my code isn't to blame for the issue:
>>>>>>>> >>>>>>> >> > I write some basic code for an 'index.py' file, using the
>>>>>>>> >>>>>>> >> > mod_python.publisher handler.  'index.py' includes other modules which I've
>>>>>>>> >>>>>>> >> > coded from that same location, etc, etc.  Nothing fancy.  Any changes I make
>>>>>>>> >>>>>>> >> > in the 'index.py' file will be reflected immediately on my local web server.
>>>>>>>> >>>>>>> >> >  On the other hand, any changes I make to the modules included via import
>>>>>>>> >>>>>>> >> > from within 'index.py' are completely ignored by the web server.  It took me
>>>>>>>> >>>>>>> >> > a while to realize that my pages didn't reflect my code.  I also discovered
>>>>>>>> >>>>>>> >> > that the .pyc files had nothing to do with it.  I finally just restarted the
>>>>>>>> >>>>>>> >> > apache web service (which in fact runs as a service on my machine), and then
>>>>>>>> >>>>>>> >> > my code finally gets pushed through to the web server.
>>>>>>>> >>>>>>> >> > I've been looking around practically every other day for documentation on
>>>>>>>> >>>>>>> >> > how to make apache/mod_python simply cut it out and stop caching my python
>>>>>>>> >>>>>>> >> > code, but I've found nothing.  You can imagine the annoyance this presents,
>>>>>>>> >>>>>>> >> > since I have to restart my web server every single time I make even the
>>>>>>>> >>>>>>> >> > slightest change to a 'utility.py' file, etc.
>>>>>>>> >>>>>>> >> > I've been coping with the problem for a while now, but then I've found far
>>>>>>>> >>>>>>> >> > more annoying issues recently.  To abbreviate the problem into short terms,
>>>>>>>> >>>>>>> >> > I've got a main module 'MAIN' which imports another module for a class
>>>>>>>> >>>>>>> >> > 'CLASS'.  CLASS also has a few imports, such as 'backend' stuff for
>>>>>>>> >>>>>>> >> > interfacing with various databases, etc.  We'll call the 'backend' module
>>>>>>>> >>>>>>> >> > "BACKEND".  Given the setup, any changes I make to CLASS or BACKEND require
>>>>>>>> >>>>>>> >> > an apache restart in order to take effect.
>>>>>>>> >>>>>>> >> > I have a function in CLASS which calls a function from it's imported BACKEND
>>>>>>>> >>>>>>> >> > module.  I tried adding a parameter to the BACKEND function in question, and
>>>>>>>> >>>>>>> >> > properly passed said parameter while in CLASS, yet the mod_python debugger
>>>>>>>> >>>>>>> >> > spits out an error about me having passed 3 arguments, when the BACKEND
>>>>>>>> >>>>>>> >> > function takes exactly 2.  This is outright false, since my function in
>>>>>>>> >>>>>>> >> > BACKEND looks like:
>>>>>>>> >>>>>>> >> > def getUsers(self, req, terms):
>>>>>>>> >>>>>>> >> >
>>>>>>>> >>>>>>> >> > and I'm calling it with
>>>>>>>> >>>>>>> >> > self.backend.getUsers(self.req, search)
>>>>>>>> >>>>>>> >> >
>>>>>>>> >>>>>>> >> > In reality, my code dictates that I'm passing 3 (including the implicit
>>>>>>>> >>>>>>> >> > 'self' argument), and BACKEND's 'getUsers' does in fact take exactly 3
>>>>>>>> >>>>>>> >> > arguments.  Yet, the debugger is telling me that it takes only 2.
>>>>>>>> >>>>>>> >> > I was trying to pass it 'req' because I wanted to investigate a little error
>>>>>>>> >>>>>>> >> > in the code by printing something to the output HTML.  So, my attempt is
>>>>>>>> >>>>>>> >> > foiled, since somewhere something isn't being updated to what my most
>>>>>>>> >>>>>>> >> > current code actually says.
>>>>>>>> >>>>>>> >> > Just to test, I made the 'getUsers' function return immediately with a
>>>>>>>> >>>>>>> >> > string of gibberish, like 'return "adsfasdfadsfa"'.  this should make my
>>>>>>>> >>>>>>> >> > other code spin wildly out of control and encounter errors, yet when I
>>>>>>>> >>>>>>> >> > restart apache and test it... lo and behold, it's completely ignoring my
>>>>>>>> >>>>>>> >> > goofy 'return' statement.  The 'getUsers' function is still somehow
>>>>>>>> >>>>>>> >> > returning valid data, as if the 'return' wasn't there at all!
>>>>>>>> >>>>>>> >> > So then I tried causing actual syntax errors.  The debugger caught this,
>>>>>>>> >>>>>>> >> > much to my inner joy.  So I tried causing a semantic error instead:
>>>>>>>> >>>>>>> >> > referencing a non-existent attribute of a non-existent variable:
>>>>>>>> >>>>>>> >> > madeUpVar.moo = 42
>>>>>>>> >>>>>>> >> > Syntactically, nothing wrong, but at run time it should most definitely
>>>>>>>> >>>>>>> >> > encounter a NameError or something equally as realistic.  But I restart
>>>>>>>> >>>>>>> >> > apache, and... nothing.  The line is completely ignored.
>>>>>>>> >>>>>>> >> > Which leads me to believe that it's not actually being 'ignored' per se, but
>>>>>>>> >>>>>>> >> > rather the code being compiled is not the same as the code in play within
>>>>>>>> >>>>>>> >> > the web server.  When I delete my .pyc files and restart apache and visit
>>>>>>>> >>>>>>> >> > the URL that triggers my python code, my .py files are in fact being
>>>>>>>> >>>>>>> >> > recompiled down to their byte code .pyc files.  And clearly the interpreter
>>>>>>>> >>>>>>> >> > is processing my code, since it flags me on improper syntax.  Yet, no matter
>>>>>>>> >>>>>>> >> > what kind of syntactically-sound nonsense I put into my code, the changes
>>>>>>>> >>>>>>> >> > aren't being reflected in my web server.
>>>>>>>> >>>>>>> >> > These problems come and go, and I've go better explanation than over zealous
>>>>>>>> >>>>>>> >> > caching.  I imagine that by tomorrow sometime when I start my computer up,
>>>>>>>> >>>>>>> >> > the problem will have disappeared for the time being.
>>>>>>>> >>>>>>> >> > I've cursed this computer up and down as I've tried to figure out ANYTHING
>>>>>>>> >>>>>>> >> > that I can do to alleviate the issue, by to no avail.
>>>>>>>> >>>>>>> >> > Anybody with counsel to spare my tired brain is welcome to share...
>>>>>>>> >>>>>>> >> > _______________________________________________
>>>>>>>> >>>>>>> >> > Mod_python mailing list
>>>>>>>> >>>>>>> >> > Mod_python@modpython.org
>>>>>>>> >>>>>>> >> > http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>>>> >>>>>>> >> >
>>>>>>>> >>>>>>> >> >
>>>>>>>> >>>>>>> >
>>>>>>>> >>>>>>
>>>>>>>> >>>>>>
>>>>>>>> >>>>>>
>>>>>>>> >>>>> _______________________________________________
>>>>>>>> >>>>> Mod_python mailing list
>>>>>>>> >>>>> Mod_python@modpython.org
>>>>>>>> >>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>
>>
>
>
>
> --
> "Thanksgiving Dinner sent you a message."
> "If you are not a member, you need to join us."
> "i was not declared before this scope."
>
From rahul.warhekar at edisphere.com  Thu Jan 15 22:42:48 2009
From: rahul.warhekar at edisphere.com (rahul)
Date: Thu Jan 15 22:45:03 2009
Subject: [mod_python] query regarding pyodbc
Message-ID: <20090116034457.D39636A4553@server1.edisphere.com>

Hello all,

 

I am using RedHat Enterprise 4 linux on which I have python 2.5.4 and
mod_python 3.3.1 .

Now when I install pyodbc package and I try to import it it is giving me an
error as 

ImportError : dynamic module does not define init function (initpyodbc)

 

My pyodbc version is 2.1.14

Any help regarding this will be greatly appreciated.

 

Thanks,

Rahul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090116/380d7254/attachment.html
From graham.dumpleton at gmail.com  Fri Jan 16 04:25:14 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Jan 16 04:25:18 2009
Subject: [mod_python] query regarding pyodbc
In-Reply-To: <20090116034457.D39636A4553@server1.edisphere.com>
References: <20090116034457.D39636A4553@server1.edisphere.com>
Message-ID: <88e286470901160125j1ef60566q24c06f8c983b201f@mail.gmail.com>

2009/1/16 rahul <rahul.warhekar@edisphere.com>:
> Hello all,
>
>
>
> I am using RedHat Enterprise 4 linux on which I have python 2.5.4 and
> mod_python 3.3.1 .
>
> Now when I install pyodbc package and I try to import it it is giving me an
> error as
>
> ImportError : dynamic module does not define init function (initpyodbc)
>
>
>
> My pyodbc version is 2.1.14
>
> Any help regarding this will be greatly appreciated.

Does it work when you try and import it from command line Python?

Have you run 'nm' command on the .so file for the Python C extension
module to see whether that function (initpyodbc) exists in the file?

Graham
From rahul.warhekar at edisphere.com  Fri Jan 16 05:18:42 2009
From: rahul.warhekar at edisphere.com (rahul)
Date: Fri Jan 16 05:20:57 2009
Subject: [mod_python] query regarding pyodbc
In-Reply-To: <88e286470901160125j1ef60566q24c06f8c983b201f@mail.gmail.com>
Message-ID: <20090116102051.C74FA6A4599@server1.edisphere.com>

I have run it from python console and it is giving same error.

Now, I used nm command for pyodbc.so file and got the following output.

[root@dbserver site-packages]# nm pyodbc.so
00001600 A __bss_start
000003ec t call_gmon_start
00001600 b completed.1
000014fc d __CTOR_END__
000014f8 d __CTOR_LIST__
         w __cxa_finalize@@GLIBC_2.1.3
000004a8 t __do_global_ctors_aux
00000410 t __do_global_dtors_aux
000015f8 d __dso_handle
00001504 d __DTOR_END__
00001500 d __DTOR_LIST__
0000150c A _DYNAMIC
00001600 A _edata
00001604 A _end
000004d8 T _fini
0000046c t frame_dummy
000004f4 r __FRAME_END__
000015e8 A _GLOBAL_OFFSET_TABLE_
         w __gmon_start__
000003b4 T _init
00001508 d __JCR_END__
00001508 d __JCR_LIST__
         w _Jv_RegisterClasses
000015fc d p.0


Still I am not understanding what is the problem, please help.

Thanks,
Rahul

-----Original Message-----
From: Graham Dumpleton [mailto:graham.dumpleton@gmail.com] 
Sent: Friday, January 16, 2009 2:55 PM
To: rahul
Cc: mod_python@modpython.org
Subject: Re: [mod_python] query regarding pyodbc

2009/1/16 rahul <rahul.warhekar@edisphere.com>:
> Hello all,
>
>
>
> I am using RedHat Enterprise 4 linux on which I have python 2.5.4 and
> mod_python 3.3.1 .
>
> Now when I install pyodbc package and I try to import it it is giving me
an
> error as
>
> ImportError : dynamic module does not define init function (initpyodbc)
>
>
>
> My pyodbc version is 2.1.14
>
> Any help regarding this will be greatly appreciated.

Does it work when you try and import it from command line Python?

Have you run 'nm' command on the .so file for the Python C extension
module to see whether that function (initpyodbc) exists in the file?

Graham

From graham.dumpleton at gmail.com  Fri Jan 16 05:53:40 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Jan 16 05:54:16 2009
Subject: [mod_python] query regarding pyodbc
In-Reply-To: <20090116102051.C74FA6A4599@server1.edisphere.com>
References: <88e286470901160125j1ef60566q24c06f8c983b201f@mail.gmail.com>
	<20090116102051.C74FA6A4599@server1.edisphere.com>
Message-ID: <88e286470901160253h9f2f52et62498b7489fa2eb0@mail.gmail.com>

2009/1/16 rahul <rahul.warhekar@edisphere.com>:
> I have run it from python console and it is giving same error.

Then it is not a mod_python issue and you perhaps should ask on:

  http://groups.google.com/group/comp.lang.python/topics?lnk

> Now, I used nm command for pyodbc.so file and got the following output.
>
> [root@dbserver site-packages]# nm pyodbc.so
> 00001600 A __bss_start
> 000003ec t call_gmon_start
> 00001600 b completed.1
> 000014fc d __CTOR_END__
> 000014f8 d __CTOR_LIST__
>         w __cxa_finalize@@GLIBC_2.1.3
> 000004a8 t __do_global_ctors_aux
> 00000410 t __do_global_dtors_aux
> 000015f8 d __dso_handle
> 00001504 d __DTOR_END__
> 00001500 d __DTOR_LIST__
> 0000150c A _DYNAMIC
> 00001600 A _edata
> 00001604 A _end
> 000004d8 T _fini
> 0000046c t frame_dummy
> 000004f4 r __FRAME_END__
> 000015e8 A _GLOBAL_OFFSET_TABLE_
>         w __gmon_start__
> 000003b4 T _init
> 00001508 d __JCR_END__
> 00001508 d __JCR_LIST__
>         w _Jv_RegisterClasses
> 000015fc d p.0
>
> Still I am not understanding what is the problem, please help.

Like the message says, it cannot find in the C extension module the
symbol 'initpyodbc', which is the entry point function for
initialising the module.

Thus the module has not been built properly or is broken in some way.

Graham

> Thanks,
> Rahul
>
> -----Original Message-----
> From: Graham Dumpleton [mailto:graham.dumpleton@gmail.com]
> Sent: Friday, January 16, 2009 2:55 PM
> To: rahul
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] query regarding pyodbc
>
> 2009/1/16 rahul <rahul.warhekar@edisphere.com>:
>> Hello all,
>>
>>
>>
>> I am using RedHat Enterprise 4 linux on which I have python 2.5.4 and
>> mod_python 3.3.1 .
>>
>> Now when I install pyodbc package and I try to import it it is giving me
> an
>> error as
>>
>> ImportError : dynamic module does not define init function (initpyodbc)
>>
>>
>>
>> My pyodbc version is 2.1.14
>>
>> Any help regarding this will be greatly appreciated.
>
> Does it work when you try and import it from command line Python?
>
> Have you run 'nm' command on the .so file for the Python C extension
> module to see whether that function (initpyodbc) exists in the file?
>
> Graham
>
>
From graham.dumpleton at gmail.com  Fri Jan 16 05:53:40 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Jan 16 06:10:50 2009
Subject: [mod_python] query regarding pyodbc
In-Reply-To: <20090116102051.C74FA6A4599@server1.edisphere.com>
References: <88e286470901160125j1ef60566q24c06f8c983b201f@mail.gmail.com>
	<20090116102051.C74FA6A4599@server1.edisphere.com>
Message-ID: <88e286470901160253h9f2f52et62498b7489fa2eb0@mail.gmail.com>

2009/1/16 rahul <rahul.warhekar@edisphere.com>:
> I have run it from python console and it is giving same error.

Then it is not a mod_python issue and you perhaps should ask on:

  http://groups.google.com/group/comp.lang.python/topics?lnk

> Now, I used nm command for pyodbc.so file and got the following output.
>
> [root@dbserver site-packages]# nm pyodbc.so
> 00001600 A __bss_start
> 000003ec t call_gmon_start
> 00001600 b completed.1
> 000014fc d __CTOR_END__
> 000014f8 d __CTOR_LIST__
>         w __cxa_finalize@@GLIBC_2.1.3
> 000004a8 t __do_global_ctors_aux
> 00000410 t __do_global_dtors_aux
> 000015f8 d __dso_handle
> 00001504 d __DTOR_END__
> 00001500 d __DTOR_LIST__
> 0000150c A _DYNAMIC
> 00001600 A _edata
> 00001604 A _end
> 000004d8 T _fini
> 0000046c t frame_dummy
> 000004f4 r __FRAME_END__
> 000015e8 A _GLOBAL_OFFSET_TABLE_
>         w __gmon_start__
> 000003b4 T _init
> 00001508 d __JCR_END__
> 00001508 d __JCR_LIST__
>         w _Jv_RegisterClasses
> 000015fc d p.0
>
> Still I am not understanding what is the problem, please help.

Like the message says, it cannot find in the C extension module the
symbol 'initpyodbc', which is the entry point function for
initialising the module.

Thus the module has not been built properly or is broken in some way.

Graham

> Thanks,
> Rahul
>
> -----Original Message-----
> From: Graham Dumpleton [mailto:graham.dumpleton@gmail.com]
> Sent: Friday, January 16, 2009 2:55 PM
> To: rahul
> Cc: mod_python@modpython.org
> Subject: Re: [mod_python] query regarding pyodbc
>
> 2009/1/16 rahul <rahul.warhekar@edisphere.com>:
>> Hello all,
>>
>>
>>
>> I am using RedHat Enterprise 4 linux on which I have python 2.5.4 and
>> mod_python 3.3.1 .
>>
>> Now when I install pyodbc package and I try to import it it is giving me
> an
>> error as
>>
>> ImportError : dynamic module does not define init function (initpyodbc)
>>
>>
>>
>> My pyodbc version is 2.1.14
>>
>> Any help regarding this will be greatly appreciated.
>
> Does it work when you try and import it from command line Python?
>
> Have you run 'nm' command on the .so file for the Python C extension
> module to see whether that function (initpyodbc) exists in the file?
>
> Graham
>
>
From donothurry at gmail.com  Fri Jan 16 13:38:58 2009
From: donothurry at gmail.com (Michael Johnson)
Date: Fri Jan 16 13:39:04 2009
Subject: [mod_python] Windows Server 2008
Message-ID: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>

On Windows Server 2008, the installation program for mod_python fails.
 Does anyone have a fix?  Thanks!

mod_python-3.3.1.win32-py2.5-Apache2.2.exe
From tonightslastsong at gmail.com  Fri Jan 16 13:50:19 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Fri Jan 16 13:50:24 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
Message-ID: <d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>

What message does it fail with?

On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson <donothurry@gmail.com> wrote:
>
> On Windows Server 2008, the installation program for mod_python fails.
>  Does anyone have a fix?  Thanks!
>
> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
From donothurry at gmail.com  Fri Jan 16 14:19:58 2009
From: donothurry at gmail.com (Michael Johnson)
Date: Fri Jan 16 14:20:03 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
Message-ID: <c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>

The installation program appears to successfully complete the Python
portion but fails after the Apache location is selected.

The message is the standard Windows message for programs that stop
running.  The text is approximately:

"mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
some reason.  Windows will now end the program."

Thanks!






On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
> What message does it fail with?
>
> On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson <donothurry@gmail.com> wrote:
>>
>> On Windows Server 2008, the installation program for mod_python fails.
>>  Does anyone have a fix?  Thanks!
>>
>> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>



-- 
Michael L Johnson
w: 978-281-9300 x 6521
c: 978-290-9005
From tonightslastsong at gmail.com  Fri Jan 16 14:36:00 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Fri Jan 16 14:36:02 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
Message-ID: <d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>

Windows Server 2008 is still really new... It wouldn't surprise me at all if
there are things in it that break the installer.  I use Windows Vista
without problems (of this nature).  I did install the trial WS Hyper-V 2008
a few months back, perhaps I could boot into it and see If i have any luck
during installation, but I couldn't guarantee anything.  I'll have to check
it out tonight when I go home.
For reference's sake, I use the same versions of mon_python and Apache as
you've described.

Tim

On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson <donothurry@gmail.com>wrote:

> The installation program appears to successfully complete the Python
> portion but fails after the Apache location is selected.
>
> The message is the standard Windows message for programs that stop
> running.  The text is approximately:
>
> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
> some reason.  Windows will now end the program."
>
> Thanks!
>
>
>
>
>
>
> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta <tonightslastsong@gmail.com>
> wrote:
> > What message does it fail with?
> >
> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson <donothurry@gmail.com>
> wrote:
> >>
> >> On Windows Server 2008, the installation program for mod_python fails.
> >>  Does anyone have a fix?  Thanks!
> >>
> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
> >> _______________________________________________
> >> Mod_python mailing list
> >> Mod_python@modpython.org
> >> http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
>
>
> --
> Michael L Johnson
> w: 978-281-9300 x 6521
> c: 978-290-9005
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090116/6651887e/attachment.html
From tonightslastsong at gmail.com  Fri Jan 16 20:12:23 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Fri Jan 16 20:12:25 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
	<d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
Message-ID: <d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>

Actually, I'm realizing an issue on my end-- I don't think mod_python has a
64-bit flavor, and my installation of WS 2008 is 64-bit.  Even if I got an
x64 Python and Apache setup running, I'd be lacking the mod_python to power
the test.
Sorry!  mod_python's apparently been lagging behind the modern 64-bit
option, and doesn't have versions for the newest Python versions (Python 2.6
and Python 3, both of which are still pretty new).

Sorry I couldn't be of any help.  I'd only recommend trying some program
compatibility options with Windows.  We may not see a direct fix very
promptly.

Tim

On Fri, Jan 16, 2009 at 12:36 PM, Tim Valenta <tonightslastsong@gmail.com>wrote:

> Windows Server 2008 is still really new... It wouldn't surprise me at all
> if there are things in it that break the installer.  I use Windows Vista
> without problems (of this nature).  I did install the trial WS Hyper-V 2008
> a few months back, perhaps I could boot into it and see If i have any luck
> during installation, but I couldn't guarantee anything.  I'll have to check
> it out tonight when I go home.
> For reference's sake, I use the same versions of mon_python and Apache as
> you've described.
>
> Tim
>
>
> On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson <donothurry@gmail.com>wrote:
>
>> The installation program appears to successfully complete the Python
>> portion but fails after the Apache location is selected.
>>
>> The message is the standard Windows message for programs that stop
>> running.  The text is approximately:
>>
>> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
>> some reason.  Windows will now end the program."
>>
>> Thanks!
>>
>>
>>
>>
>>
>>
>> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta <tonightslastsong@gmail.com>
>> wrote:
>> > What message does it fail with?
>> >
>> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson <donothurry@gmail.com>
>> wrote:
>> >>
>> >> On Windows Server 2008, the installation program for mod_python fails.
>> >>  Does anyone have a fix?  Thanks!
>> >>
>> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
>> >> _______________________________________________
>> >> Mod_python mailing list
>> >> Mod_python@modpython.org
>> >> http://mailman.modpython.org/mailman/listinfo/mod_python
>> >
>>
>>
>>
>> --
>> Michael L Johnson
>> w: 978-281-9300 x 6521
>> c: 978-290-9005
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090116/25b451da/attachment.html
From graham.dumpleton at gmail.com  Fri Jan 16 21:22:35 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Jan 16 21:22:38 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
	<d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
	<d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>
Message-ID: <88e286470901161822m57be0057xb55676668aa55cfa@mail.gmail.com>

2009/1/17 Tim Valenta <tonightslastsong@gmail.com>:
> Actually, I'm realizing an issue on my end-- I don't think mod_python has a
> 64-bit flavor, and my installation of WS 2008 is 64-bit.  Even if I got an
> x64 Python and Apache setup running, I'd be lacking the mod_python to power
> the test.
> Sorry!  mod_python's apparently been lagging behind the modern 64-bit
> option, and doesn't have versions for the newest Python versions (Python 2.6
> and Python 3, both of which are still pretty new).

Don't expect a Python 3.0 version, the C APIs aren't compatible and a
lot of work would need to be done to port mod_python to Python 3.0.
Even if was made to work, any applications on top would like need to
change. Those which which integrate quite closely with mod_python
specific handlers probably more so than those which use a minimal API
such as a WSGI bridge.

Graham

> Sorry I couldn't be of any help.  I'd only recommend trying some program
> compatibility options with Windows.  We may not see a direct fix very
> promptly.
> Tim
>
> On Fri, Jan 16, 2009 at 12:36 PM, Tim Valenta <tonightslastsong@gmail.com>
> wrote:
>>
>> Windows Server 2008 is still really new... It wouldn't surprise me at all
>> if there are things in it that break the installer.  I use Windows Vista
>> without problems (of this nature).  I did install the trial WS Hyper-V 2008
>> a few months back, perhaps I could boot into it and see If i have any luck
>> during installation, but I couldn't guarantee anything.  I'll have to check
>> it out tonight when I go home.
>> For reference's sake, I use the same versions of mon_python and Apache as
>> you've described.
>> Tim
>>
>> On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson <donothurry@gmail.com>
>> wrote:
>>>
>>> The installation program appears to successfully complete the Python
>>> portion but fails after the Apache location is selected.
>>>
>>> The message is the standard Windows message for programs that stop
>>> running.  The text is approximately:
>>>
>>> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
>>> some reason.  Windows will now end the program."
>>>
>>> Thanks!
>>>
>>>
>>>
>>>
>>>
>>>
>>> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta <tonightslastsong@gmail.com>
>>> wrote:
>>> > What message does it fail with?
>>> >
>>> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson
>>> > <donothurry@gmail.com> wrote:
>>> >>
>>> >> On Windows Server 2008, the installation program for mod_python fails.
>>> >>  Does anyone have a fix?  Thanks!
>>> >>
>>> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
>>> >> _______________________________________________
>>> >> Mod_python mailing list
>>> >> Mod_python@modpython.org
>>> >> http://mailman.modpython.org/mailman/listinfo/mod_python
>>> >
>>>
>>>
>>>
>>> --
>>> Michael L Johnson
>>> w: 978-281-9300 x 6521
>>> c: 978-290-9005
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From tonightslastsong at gmail.com  Fri Jan 16 23:53:32 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Fri Jan 16 23:53:36 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <88e286470901161822m57be0057xb55676668aa55cfa@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
	<d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
	<d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>
	<88e286470901161822m57be0057xb55676668aa55cfa@mail.gmail.com>
Message-ID: <d01b8cf20901162053o410282c1r106e0b4a21e6228e@mail.gmail.com>

> Those which which integrate quite closely with mod_python
> specific handlers probably more so than those which use a minimal API
> such as a WSGI bridge.

Hence your suggestions to me before, to choose a platform which
abstracts itself a bit more, like whole WSGI thing. <offtopic>  You've
got some good blog entries, by the way </offtopic>.  For the record, I
kind of like Django.  I originally wrote it off as 'too big' for my
interests, but I've given it another chance and it's quite nice.  And
since it's open source, contributions will keep it alive well into
Python's future versions, in my opinion.  But, the mod_python mailing
list isn't necessarily the place for Django talk.

Tim

On Fri, Jan 16, 2009 at 7:22 PM, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
> 2009/1/17 Tim Valenta <tonightslastsong@gmail.com>:
>> Actually, I'm realizing an issue on my end-- I don't think mod_python has a
>> 64-bit flavor, and my installation of WS 2008 is 64-bit.  Even if I got an
>> x64 Python and Apache setup running, I'd be lacking the mod_python to power
>> the test.
>> Sorry!  mod_python's apparently been lagging behind the modern 64-bit
>> option, and doesn't have versions for the newest Python versions (Python 2.6
>> and Python 3, both of which are still pretty new).
>
> Don't expect a Python 3.0 version, the C APIs aren't compatible and a
> lot of work would need to be done to port mod_python to Python 3.0.
> Even if was made to work, any applications on top would like need to
> change. Those which which integrate quite closely with mod_python
> specific handlers probably more so than those which use a minimal API
> such as a WSGI bridge.
>
> Graham
>
>> Sorry I couldn't be of any help.  I'd only recommend trying some program
>> compatibility options with Windows.  We may not see a direct fix very
>> promptly.
>> Tim
>>
>> On Fri, Jan 16, 2009 at 12:36 PM, Tim Valenta <tonightslastsong@gmail.com>
>> wrote:
>>>
>>> Windows Server 2008 is still really new... It wouldn't surprise me at all
>>> if there are things in it that break the installer.  I use Windows Vista
>>> without problems (of this nature).  I did install the trial WS Hyper-V 2008
>>> a few months back, perhaps I could boot into it and see If i have any luck
>>> during installation, but I couldn't guarantee anything.  I'll have to check
>>> it out tonight when I go home.
>>> For reference's sake, I use the same versions of mon_python and Apache as
>>> you've described.
>>> Tim
>>>
>>> On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson <donothurry@gmail.com>
>>> wrote:
>>>>
>>>> The installation program appears to successfully complete the Python
>>>> portion but fails after the Apache location is selected.
>>>>
>>>> The message is the standard Windows message for programs that stop
>>>> running.  The text is approximately:
>>>>
>>>> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
>>>> some reason.  Windows will now end the program."
>>>>
>>>> Thanks!
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta <tonightslastsong@gmail.com>
>>>> wrote:
>>>> > What message does it fail with?
>>>> >
>>>> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson
>>>> > <donothurry@gmail.com> wrote:
>>>> >>
>>>> >> On Windows Server 2008, the installation program for mod_python fails.
>>>> >>  Does anyone have a fix?  Thanks!
>>>> >>
>>>> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
>>>> >> _______________________________________________
>>>> >> Mod_python mailing list
>>>> >> Mod_python@modpython.org
>>>> >> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>> >
>>>>
>>>>
>>>>
>>>> --
>>>> Michael L Johnson
>>>> w: 978-281-9300 x 6521
>>>> c: 978-290-9005
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
From dave6502 at googlemail.com  Sat Jan 17 15:30:56 2009
From: dave6502 at googlemail.com (dave selby)
Date: Sat Jan 17 15:31:02 2009
Subject: [mod_python] accessing a 'POST'ed string ?
Message-ID: <f52017b60901171230u5dc6ac46lb7e715d788cd095e@mail.gmail.com>

Hi all,

I have been using mod python for a while with 'GET', no problem,
accessing values with
func = req.form['val'] since I only need to pass one value.

However I now need to use 'POST' since I have a lot bigger data
'blob'. I post it from the browsers javascript but I cant find out how
to access the  posted string from mod python.

I have googled and routed around but have not had any luck

Can anyone help ?

Cheers

Dave

-- 

Please avoid sending me Word or PowerPoint attachments.
See http://www.gnu.org/philosophy/no-word-attachments.html
From graham.dumpleton at gmail.com  Sat Jan 17 15:54:05 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sat Jan 17 15:54:10 2009
Subject: [mod_python] accessing a 'POST'ed string ?
In-Reply-To: <f52017b60901171230u5dc6ac46lb7e715d788cd095e@mail.gmail.com>
References: <f52017b60901171230u5dc6ac46lb7e715d788cd095e@mail.gmail.com>
Message-ID: <88e286470901171254n2ca5192ap13426adef463be89@mail.gmail.com>

The mod_python documentation covers it:

  http://www.modpython.org/live/current/doc-html/pyapi-util.html

Also read:

  http://webpython.codepoint.net/mod_python_tutorial

Graham

2009/1/18 dave selby <dave6502@googlemail.com>:
> Hi all,
>
> I have been using mod python for a while with 'GET', no problem,
> accessing values with
> func = req.form['val'] since I only need to pass one value.
>
> However I now need to use 'POST' since I have a lot bigger data
> 'blob'. I post it from the browsers javascript but I cant find out how
> to access the  posted string from mod python.
>
> I have googled and routed around but have not had any luck
>
> Can anyone help ?
>
> Cheers
>
> Dave
>
> --
>
> Please avoid sending me Word or PowerPoint attachments.
> See http://www.gnu.org/philosophy/no-word-attachments.html
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From dylanshortt at gmail.com  Sat Jan 17 18:38:05 2009
From: dylanshortt at gmail.com (Dylan Shortt)
Date: Sat Jan 17 18:38:12 2009
Subject: [mod_python] mod_python compiling an empty .so file?
Message-ID: <f7e74c4d0901171538k734c889bv93c811fa51f71d33@mail.gmail.com>

Hi. Does anybody have any ideas as to why the .so file in my apache modules
directory is not compiling correctly?

I have mod_python.so in my apache2/modules dir, but everytime that I try to
start apache (with all the directives, LoadModule and such) this shows up:

httpd: Syntax error on line 55 of /usr/local/apache2/conf/httpd.conf: Cannot
load /usr/local/apache2/modules/mod_python.so into server:
/usr/local/apache2/modules/mod_python.so: file too short

Checking the file, it appears to be a blank file, no characters or anything.
But if I delete it and recompile from source, it gets recreated, again, with
nothing in it.

This is using Debian, mod_python 3.3.1 and Python 2.6. I've recompiled
Python with --enable-shared a few times now but to no avail.

Any ideas?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090117/d654e49c/attachment.html
From graham.dumpleton at gmail.com  Sat Jan 17 18:47:59 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sat Jan 17 18:48:01 2009
Subject: [mod_python] mod_python compiling an empty .so file?
In-Reply-To: <f7e74c4d0901171538k734c889bv93c811fa51f71d33@mail.gmail.com>
References: <f7e74c4d0901171538k734c889bv93c811fa51f71d33@mail.gmail.com>
Message-ID: <88e286470901171547n735d2798se964be270e08a803@mail.gmail.com>

If only hosting WSGI capable application such as Trac or Django, try
mod_wsgi instead.

No time right now to help with mod_python problem. Later today, maybe.

Graham

2009/1/18 Dylan Shortt <dylanshortt@gmail.com>:
> Hi. Does anybody have any ideas as to why the .so file in my apache modules
> directory is not compiling correctly?
>
> I have mod_python.so in my apache2/modules dir, but everytime that I try to
> start apache (with all the directives, LoadModule and such) this shows up:
>
> httpd: Syntax error on line 55 of /usr/local/apache2/conf/httpd.conf: Cannot
> load /usr/local/apache2/modules/mod_python.so into server:
> /usr/local/apache2/modules/mod_python.so: file too short
>
> Checking the file, it appears to be a blank file, no characters or anything.
> But if I delete it and recompile from source, it gets recreated, again, with
> nothing in it.
>
> This is using Debian, mod_python 3.3.1 and Python 2.6. I've recompiled
> Python with --enable-shared a few times now but to no avail.
>
> Any ideas?
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From dave at davebritton.com  Sun Jan 18 08:34:15 2009
From: dave at davebritton.com (Dave Britton)
Date: Sun Jan 18 08:32:55 2009
Subject: [SPAM] Re: [mod_python] accessing a 'POST'ed string ?
References: <f52017b60901171230u5dc6ac46lb7e715d788cd095e@mail.gmail.com>
Message-ID: <02aa01c97971$74e5c390$0500a8c0@yoda>

"I cant find out how
> to access the  posted string from mod python.


Dave,
I need to do that a lot. The Request object has the form object which has a
list (named "list") of Fields that are filled with the cgi posted name-value
pairs as Field.name and Field.value. So req.form.list gives you this list to
use. I use this code:
def index(req):
  cgi={fieldname1:initialvalue1, fieldname2:initialvalue2...}
  for i in req.form.list: cgi[i.name]=i.value

Now I can access all my passed in posted data as cgi[fieldname]. Don't leave
out the initialization in case the user doesn't fill out a field or a
checkbox isn't checked, as req.form.list does not receive empty name-value
pairs at all, causing a key error if you reference cgi[missingfield].

-Dave
----- Original Message -----
From: "dave selby" <dave6502@googlemail.com>
To: <mod_python@modpython.org>
Sent: Saturday, January 17, 2009 3:30 PM
Subject: [mod_python] accessing a 'POST'ed string ?


> Hi all,
>
> I have been using mod python for a while with 'GET', no problem,
> accessing values with
> func = req.form['val'] since I only need to pass one value.
>
> However I now need to use 'POST' since I have a lot bigger data
> 'blob'. I post it from the browsers javascript but I cant find out how
> to access the  posted string from mod python.
>
> I have googled and routed around but have not had any luck
>
> Can anyone help ?
>
> Cheers
>
> Dave
>
> --
>
> Please avoid sending me Word or PowerPoint attachments.
> See http://www.gnu.org/philosophy/no-word-attachments.html
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From taylankaraman at gmail.com  Wed Jan 21 09:26:02 2009
From: taylankaraman at gmail.com (Taylan Karaman)
Date: Wed Jan 21 09:26:07 2009
Subject: [mod_python] mod_python and Python 2.6.1 on windows
Message-ID: <9b8e52190901210626i17b4ef69x153fb885d1cce6ae@mail.gmail.com>

Hello,

I receive a "Python version 2.5 required, which was not found in the
registry" error on windows when I try to install
"mod_python-3.3.1.win32-py2.5-Apache2.2.exe".
I have "python-2.6.1.msi" already installed. Should I try with
"python-2.5.4.msi" ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090121/726c9282/attachment.html
From konference at brabenec.net  Wed Jan 21 09:30:12 2009
From: konference at brabenec.net (Tomas Brabenec)
Date: Wed Jan 21 09:30:24 2009
Subject: [mod_python] mod_python and Python 2.6.1 on windows
In-Reply-To: <9b8e52190901210626i17b4ef69x153fb885d1cce6ae@mail.gmail.com>
References: <9b8e52190901210626i17b4ef69x153fb885d1cce6ae@mail.gmail.com>
Message-ID: <49773174.5000901@brabenec.net>

Hello,

if You have Python 2.6 installed, you must install mod_python for Python 
2.6.
This: "mod_python-3.3.1.win32-py2.5-Apache2.2.exe" is mod_python 
installer for Python 2.5

Tomas


Dne 21.1.2009 15:26, Taylan Karaman napsal(a):
> Hello,
>
> I receive a "Python version 2.5 required, which was not found in the 
> registry" error on windows when I try to install 
> "mod_python-3.3.1.win32-py2.5-Apache2.2.exe".
> I have "python-2.6.1.msi" already installed. Should I try with 
> "python-2.5.4.msi" ?
>
>
>    
From tonightslastsong at gmail.com  Wed Jan 21 12:51:29 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Wed Jan 21 12:51:35 2009
Subject: [mod_python] mod_python and Python 2.6.1 on windows
In-Reply-To: <49773174.5000901@brabenec.net>
References: <9b8e52190901210626i17b4ef69x153fb885d1cce6ae@mail.gmail.com>
	<49773174.5000901@brabenec.net>
Message-ID: <d01b8cf20901210951n20a1eaedp6b4f31b83c266b05@mail.gmail.com>

Be aware though, that I was in the same situation and got stuck with Python
2.5.4 because MySQLdb only supports Python 2.5.x, and no higher yet.  (If
that's changed now, I'll gladly admit defeat, but as of a short while ago,
that was the situation.)
Tim

On Wed, Jan 21, 2009 at 7:30 AM, Tomas Brabenec <konference@brabenec.net>wrote:

> Hello,
>
> if You have Python 2.6 installed, you must install mod_python for Python
> 2.6.
> This: "mod_python-3.3.1.win32-py2.5-Apache2.2.exe" is mod_python installer
> for Python 2.5
>
> Tomas
>
>
> Dne 21.1.2009 15:26, Taylan Karaman napsal(a):
>
>> Hello,
>>
>> I receive a "Python version 2.5 required, which was not found in the
>> registry" error on windows when I try to install
>> "mod_python-3.3.1.win32-py2.5-Apache2.2.exe".
>> I have "python-2.6.1.msi" already installed. Should I try with
>> "python-2.5.4.msi" ?
>>
>>
>>
>>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090121/4212617f/attachment.html
From konference at brabenec.net  Thu Jan 22 08:12:16 2009
From: konference at brabenec.net (Tomas Brabenec)
Date: Thu Jan 22 08:12:29 2009
Subject: [mod_python] mod_python and Python 2.6.1 on windows
In-Reply-To: <d01b8cf20901210951n20a1eaedp6b4f31b83c266b05@mail.gmail.com>
References: <9b8e52190901210626i17b4ef69x153fb885d1cce6ae@mail.gmail.com>	
	<49773174.5000901@brabenec.net>
	<d01b8cf20901210951n20a1eaedp6b4f31b83c266b05@mail.gmail.com>
Message-ID: <497870B0.5050304@brabenec.net>

Hi,

there is Windows installer MySQLdb for Python 2.6:
http://www.technicalbard.com/files/MySQL-python-1.2.2.win32-py2.6.exe

For Linux, you must downlod source from MySQLdb project page:
http://sourceforge.net/project/showfiles.php?group_id=22307&package_id=15775&release_id=491012

Tomas


Dne 21.1.2009 18:51, Tim Valenta napsal(a):
> Be aware though, that I was in the same situation and got stuck with 
> Python 2.5.4 because MySQLdb only supports Python 2.5.x, and no higher 
> yet.  (If that's changed now, I'll gladly admit defeat, but as of a 
> short while ago, that was the situation.)
>
> Tim
>
> On Wed, Jan 21, 2009 at 7:30 AM, Tomas Brabenec 
> <konference@brabenec.net <mailto:konference@brabenec.net>> wrote:
>
>     Hello,
>
>     if You have Python 2.6 installed, you must install mod_python for
>     Python 2.6.
>     This: "mod_python-3.3.1.win32-py2.5-Apache2.2.exe" is mod_python
>     installer for Python 2.5
>
>     Tomas
>
>
>     Dne 21.1.2009 15:26, Taylan Karaman napsal(a):
>
>         Hello,
>
>         I receive a "Python version 2.5 required, which was not found
>         in the registry" error on windows when I try to install
>         "mod_python-3.3.1.win32-py2.5-Apache2.2.exe".
>         I have "python-2.6.1.msi" already installed. Should I try with
>         "python-2.5.4.msi" ?
>
>
>
>     _______________________________________________
>     Mod_python mailing list
>     Mod_python@modpython.org <mailto:Mod_python@modpython.org>
>     http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From tonightslastsong at gmail.com  Thu Jan 22 11:21:38 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Thu Jan 22 11:21:43 2009
Subject: [mod_python] mod_python and Python 2.6.1 on windows
In-Reply-To: <497870B0.5050304@brabenec.net>
References: <9b8e52190901210626i17b4ef69x153fb885d1cce6ae@mail.gmail.com>
	<49773174.5000901@brabenec.net>
	<d01b8cf20901210951n20a1eaedp6b4f31b83c266b05@mail.gmail.com>
	<497870B0.5050304@brabenec.net>
Message-ID: <d01b8cf20901220821o2be8f738rd1335c21a6a694e2@mail.gmail.com>

Glad you found that-- someone must of done that themselves, as it's not
listed on the main sourceforge MySQLdb page.
I shall promptly update :)

Tim

On Thu, Jan 22, 2009 at 6:12 AM, Tomas Brabenec <konference@brabenec.net>wrote:

> Hi,
>
> there is Windows installer MySQLdb for Python 2.6:
> http://www.technicalbard.com/files/MySQL-python-1.2.2.win32-py2.6.exe
>
> For Linux, you must downlod source from MySQLdb project page:
>
> http://sourceforge.net/project/showfiles.php?group_id=22307&package_id=15775&release_id=491012
>
> Tomas
>
>
> Dne 21.1.2009 18:51, Tim Valenta napsal(a):
>
>> Be aware though, that I was in the same situation and got stuck with
>> Python 2.5.4 because MySQLdb only supports Python 2.5.x, and no higher yet.
>>  (If that's changed now, I'll gladly admit defeat, but as of a short while
>> ago, that was the situation.)
>>
>> Tim
>>
>> On Wed, Jan 21, 2009 at 7:30 AM, Tomas Brabenec <konference@brabenec.net<mailto:
>> konference@brabenec.net>> wrote:
>>
>>    Hello,
>>
>>    if You have Python 2.6 installed, you must install mod_python for
>>    Python 2.6.
>>    This: "mod_python-3.3.1.win32-py2.5-Apache2.2.exe" is mod_python
>>    installer for Python 2.5
>>
>>    Tomas
>>
>>
>>    Dne 21.1.2009 15:26, Taylan Karaman napsal(a):
>>
>>        Hello,
>>
>>        I receive a "Python version 2.5 required, which was not found
>>        in the registry" error on windows when I try to install
>>        "mod_python-3.3.1.win32-py2.5-Apache2.2.exe".
>>        I have "python-2.6.1.msi" already installed. Should I try with
>>        "python-2.5.4.msi" ?
>>
>>
>>
>>    _______________________________________________
>>    Mod_python mailing list
>>    Mod_python@modpython.org <mailto:Mod_python@modpython.org>
>>    http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>
>>  _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>



-- 
i was not declared before this scope.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090122/b30d8bdc/attachment.html
From donothurry at gmail.com  Thu Jan 22 15:01:55 2009
From: donothurry at gmail.com (Michael Johnson)
Date: Thu Jan 22 15:02:01 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <d01b8cf20901162053o410282c1r106e0b4a21e6228e@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
	<d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
	<d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>
	<88e286470901161822m57be0057xb55676668aa55cfa@mail.gmail.com>
	<d01b8cf20901162053o410282c1r106e0b4a21e6228e@mail.gmail.com>
Message-ID: <c6cb19950901221201m5213f7bsacb813ac33727435@mail.gmail.com>

Mod_python works for me now on Windows Server 2008 Standard Edition
for 32-bit systems.

The Windows .msi installer for mod_python stops working near the end
of the installation when the clean-up script begins.  But enough of
the code is loaded apparently and I am running a Python Django site
successfully on Windows 2008 Server Release 2.

Mike



On Fri, Jan 16, 2009 at 11:53 PM, Tim Valenta
<tonightslastsong@gmail.com> wrote:
>> Those which which integrate quite closely with mod_python
>> specific handlers probably more so than those which use a minimal API
>> such as a WSGI bridge.
>
> Hence your suggestions to me before, to choose a platform which
> abstracts itself a bit more, like whole WSGI thing. <offtopic>  You've
> got some good blog entries, by the way </offtopic>.  For the record, I
> kind of like Django.  I originally wrote it off as 'too big' for my
> interests, but I've given it another chance and it's quite nice.  And
> since it's open source, contributions will keep it alive well into
> Python's future versions, in my opinion.  But, the mod_python mailing
> list isn't necessarily the place for Django talk.
>
> Tim
>
> On Fri, Jan 16, 2009 at 7:22 PM, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>> 2009/1/17 Tim Valenta <tonightslastsong@gmail.com>:
>>> Actually, I'm realizing an issue on my end-- I don't think mod_python has a
>>> 64-bit flavor, and my installation of WS 2008 is 64-bit.  Even if I got an
>>> x64 Python and Apache setup running, I'd be lacking the mod_python to power
>>> the test.
>>> Sorry!  mod_python's apparently been lagging behind the modern 64-bit
>>> option, and doesn't have versions for the newest Python versions (Python 2.6
>>> and Python 3, both of which are still pretty new).
>>
>> Don't expect a Python 3.0 version, the C APIs aren't compatible and a
>> lot of work would need to be done to port mod_python to Python 3.0.
>> Even if was made to work, any applications on top would like need to
>> change. Those which which integrate quite closely with mod_python
>> specific handlers probably more so than those which use a minimal API
>> such as a WSGI bridge.
>>
>> Graham
>>
>>> Sorry I couldn't be of any help.  I'd only recommend trying some program
>>> compatibility options with Windows.  We may not see a direct fix very
>>> promptly.
>>> Tim
>>>
>>> On Fri, Jan 16, 2009 at 12:36 PM, Tim Valenta <tonightslastsong@gmail.com>
>>> wrote:
>>>>
>>>> Windows Server 2008 is still really new... It wouldn't surprise me at all
>>>> if there are things in it that break the installer.  I use Windows Vista
>>>> without problems (of this nature).  I did install the trial WS Hyper-V 2008
>>>> a few months back, perhaps I could boot into it and see If i have any luck
>>>> during installation, but I couldn't guarantee anything.  I'll have to check
>>>> it out tonight when I go home.
>>>> For reference's sake, I use the same versions of mon_python and Apache as
>>>> you've described.
>>>> Tim
>>>>
>>>> On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson <donothurry@gmail.com>
>>>> wrote:
>>>>>
>>>>> The installation program appears to successfully complete the Python
>>>>> portion but fails after the Apache location is selected.
>>>>>
>>>>> The message is the standard Windows message for programs that stop
>>>>> running.  The text is approximately:
>>>>>
>>>>> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
>>>>> some reason.  Windows will now end the program."
>>>>>
>>>>> Thanks!
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta <tonightslastsong@gmail.com>
>>>>> wrote:
>>>>> > What message does it fail with?
>>>>> >
>>>>> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson
>>>>> > <donothurry@gmail.com> wrote:
>>>>> >>
>>>>> >> On Windows Server 2008, the installation program for mod_python fails.
>>>>> >>  Does anyone have a fix?  Thanks!
>>>>> >>
>>>>> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
>>>>> >> _______________________________________________
>>>>> >> Mod_python mailing list
>>>>> >> Mod_python@modpython.org
>>>>> >> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>> >
>>>>>
>>>>>
>>>>>
>>>>> --
>>>>> Michael L Johnson
>>>>> w: 978-281-9300 x 6521
>>>>> c: 978-290-9005
>>>
>>> _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>



-- 
Michael L Johnson
w: 978-281-9300 x 6521
c: 978-290-9005
From tonightslastsong at gmail.com  Thu Jan 22 15:29:04 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Thu Jan 22 15:29:08 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <c6cb19950901221201m5213f7bsacb813ac33727435@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
	<d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
	<d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>
	<88e286470901161822m57be0057xb55676668aa55cfa@mail.gmail.com>
	<d01b8cf20901162053o410282c1r106e0b4a21e6228e@mail.gmail.com>
	<c6cb19950901221201m5213f7bsacb813ac33727435@mail.gmail.com>
Message-ID: <d01b8cf20901221229j1ca82109u8998f936e0635707@mail.gmail.com>

I don't think Django makes use of mod_python until you move into
'production' mode, though... it's development server is internally run by
just django code (I think).  If you've got apache set up already, and you
think you've got mod_python in place (including the Apache directive to your
web root, with something like the standard mod_python.publisher handler),
the true test would be to write up a small .py file with a "def index(req):"
and something like "req.write('hello world')" in the body.  Then if it runs,
you'll know mod_python is working :)

On Thu, Jan 22, 2009 at 1:01 PM, Michael Johnson <donothurry@gmail.com>wrote:

> Mod_python works for me now on Windows Server 2008 Standard Edition
> for 32-bit systems.
>
> The Windows .msi installer for mod_python stops working near the end
> of the installation when the clean-up script begins.  But enough of
> the code is loaded apparently and I am running a Python Django site
> successfully on Windows 2008 Server Release 2.
>
> Mike
>
>
>
> On Fri, Jan 16, 2009 at 11:53 PM, Tim Valenta
> <tonightslastsong@gmail.com> wrote:
> >> Those which which integrate quite closely with mod_python
> >> specific handlers probably more so than those which use a minimal API
> >> such as a WSGI bridge.
> >
> > Hence your suggestions to me before, to choose a platform which
> > abstracts itself a bit more, like whole WSGI thing. <offtopic>  You've
> > got some good blog entries, by the way </offtopic>.  For the record, I
> > kind of like Django.  I originally wrote it off as 'too big' for my
> > interests, but I've given it another chance and it's quite nice.  And
> > since it's open source, contributions will keep it alive well into
> > Python's future versions, in my opinion.  But, the mod_python mailing
> > list isn't necessarily the place for Django talk.
> >
> > Tim
> >
> > On Fri, Jan 16, 2009 at 7:22 PM, Graham Dumpleton
> > <graham.dumpleton@gmail.com> wrote:
> >> 2009/1/17 Tim Valenta <tonightslastsong@gmail.com>:
> >>> Actually, I'm realizing an issue on my end-- I don't think mod_python
> has a
> >>> 64-bit flavor, and my installation of WS 2008 is 64-bit.  Even if I got
> an
> >>> x64 Python and Apache setup running, I'd be lacking the mod_python to
> power
> >>> the test.
> >>> Sorry!  mod_python's apparently been lagging behind the modern 64-bit
> >>> option, and doesn't have versions for the newest Python versions
> (Python 2.6
> >>> and Python 3, both of which are still pretty new).
> >>
> >> Don't expect a Python 3.0 version, the C APIs aren't compatible and a
> >> lot of work would need to be done to port mod_python to Python 3.0.
> >> Even if was made to work, any applications on top would like need to
> >> change. Those which which integrate quite closely with mod_python
> >> specific handlers probably more so than those which use a minimal API
> >> such as a WSGI bridge.
> >>
> >> Graham
> >>
> >>> Sorry I couldn't be of any help.  I'd only recommend trying some
> program
> >>> compatibility options with Windows.  We may not see a direct fix very
> >>> promptly.
> >>> Tim
> >>>
> >>> On Fri, Jan 16, 2009 at 12:36 PM, Tim Valenta <
> tonightslastsong@gmail.com>
> >>> wrote:
> >>>>
> >>>> Windows Server 2008 is still really new... It wouldn't surprise me at
> all
> >>>> if there are things in it that break the installer.  I use Windows
> Vista
> >>>> without problems (of this nature).  I did install the trial WS Hyper-V
> 2008
> >>>> a few months back, perhaps I could boot into it and see If i have any
> luck
> >>>> during installation, but I couldn't guarantee anything.  I'll have to
> check
> >>>> it out tonight when I go home.
> >>>> For reference's sake, I use the same versions of mon_python and Apache
> as
> >>>> you've described.
> >>>> Tim
> >>>>
> >>>> On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson <
> donothurry@gmail.com>
> >>>> wrote:
> >>>>>
> >>>>> The installation program appears to successfully complete the Python
> >>>>> portion but fails after the Apache location is selected.
> >>>>>
> >>>>> The message is the standard Windows message for programs that stop
> >>>>> running.  The text is approximately:
> >>>>>
> >>>>> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
> >>>>> some reason.  Windows will now end the program."
> >>>>>
> >>>>> Thanks!
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta <
> tonightslastsong@gmail.com>
> >>>>> wrote:
> >>>>> > What message does it fail with?
> >>>>> >
> >>>>> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson
> >>>>> > <donothurry@gmail.com> wrote:
> >>>>> >>
> >>>>> >> On Windows Server 2008, the installation program for mod_python
> fails.
> >>>>> >>  Does anyone have a fix?  Thanks!
> >>>>> >>
> >>>>> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
> >>>>> >> _______________________________________________
> >>>>> >> Mod_python mailing list
> >>>>> >> Mod_python@modpython.org
> >>>>> >> http://mailman.modpython.org/mailman/listinfo/mod_python
> >>>>> >
> >>>>>
> >>>>>
> >>>>>
> >>>>> --
> >>>>> Michael L Johnson
> >>>>> w: 978-281-9300 x 6521
> >>>>> c: 978-290-9005
> >>>
> >>> _______________________________________________
> >>> Mod_python mailing list
> >>> Mod_python@modpython.org
> >>> http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
>
>
> --
> Michael L Johnson
> w: 978-281-9300 x 6521
> c: 978-290-9005
>



-- 
i was not declared before this scope.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090122/908b4ef9/attachment.html
From donothurry at gmail.com  Thu Jan 22 15:45:19 2009
From: donothurry at gmail.com (Michael Johnson)
Date: Thu Jan 22 15:45:26 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <d01b8cf20901221229j1ca82109u8998f936e0635707@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
	<d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
	<d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>
	<88e286470901161822m57be0057xb55676668aa55cfa@mail.gmail.com>
	<d01b8cf20901162053o410282c1r106e0b4a21e6228e@mail.gmail.com>
	<c6cb19950901221201m5213f7bsacb813ac33727435@mail.gmail.com>
	<d01b8cf20901221229j1ca82109u8998f936e0635707@mail.gmail.com>
Message-ID: <c6cb19950901221245r618a180dqee669058ecb44d1a@mail.gmail.com>

Hi Tim,

Yes, I ran the .py Hello World application like you suggested.  So
mod_python is definitely working on W 2008.

You are correct that Django offers a development-only server that by
default runs on port 8000.  Now I can use either the Django Web server
or Apache.

Thanks,
Mike

On Thu, Jan 22, 2009 at 3:29 PM, Tim Valenta <tonightslastsong@gmail.com> wrote:
> I don't think Django makes use of mod_python until you move into
> 'production' mode, though... it's development server is internally run by
> just django code (I think).  If you've got apache set up already, and you
> think you've got mod_python in place (including the Apache directive to your
> web root, with something like the standard mod_python.publisher handler),
> the true test would be to write up a small .py file with a "def index(req):"
> and something like "req.write('hello world')" in the body.  Then if it runs,
> you'll know mod_python is working :)
>
> On Thu, Jan 22, 2009 at 1:01 PM, Michael Johnson <donothurry@gmail.com>
> wrote:
>>
>> Mod_python works for me now on Windows Server 2008 Standard Edition
>> for 32-bit systems.
>>
>> The Windows .msi installer for mod_python stops working near the end
>> of the installation when the clean-up script begins.  But enough of
>> the code is loaded apparently and I am running a Python Django site
>> successfully on Windows 2008 Server Release 2.
>>
>> Mike
>>
>>
>>
>> On Fri, Jan 16, 2009 at 11:53 PM, Tim Valenta
>> <tonightslastsong@gmail.com> wrote:
>> >> Those which which integrate quite closely with mod_python
>> >> specific handlers probably more so than those which use a minimal API
>> >> such as a WSGI bridge.
>> >
>> > Hence your suggestions to me before, to choose a platform which
>> > abstracts itself a bit more, like whole WSGI thing. <offtopic>  You've
>> > got some good blog entries, by the way </offtopic>.  For the record, I
>> > kind of like Django.  I originally wrote it off as 'too big' for my
>> > interests, but I've given it another chance and it's quite nice.  And
>> > since it's open source, contributions will keep it alive well into
>> > Python's future versions, in my opinion.  But, the mod_python mailing
>> > list isn't necessarily the place for Django talk.
>> >
>> > Tim
>> >
>> > On Fri, Jan 16, 2009 at 7:22 PM, Graham Dumpleton
>> > <graham.dumpleton@gmail.com> wrote:
>> >> 2009/1/17 Tim Valenta <tonightslastsong@gmail.com>:
>> >>> Actually, I'm realizing an issue on my end-- I don't think mod_python
>> >>> has a
>> >>> 64-bit flavor, and my installation of WS 2008 is 64-bit.  Even if I
>> >>> got an
>> >>> x64 Python and Apache setup running, I'd be lacking the mod_python to
>> >>> power
>> >>> the test.
>> >>> Sorry!  mod_python's apparently been lagging behind the modern 64-bit
>> >>> option, and doesn't have versions for the newest Python versions
>> >>> (Python 2.6
>> >>> and Python 3, both of which are still pretty new).
>> >>
>> >> Don't expect a Python 3.0 version, the C APIs aren't compatible and a
>> >> lot of work would need to be done to port mod_python to Python 3.0.
>> >> Even if was made to work, any applications on top would like need to
>> >> change. Those which which integrate quite closely with mod_python
>> >> specific handlers probably more so than those which use a minimal API
>> >> such as a WSGI bridge.
>> >>
>> >> Graham
>> >>
>> >>> Sorry I couldn't be of any help.  I'd only recommend trying some
>> >>> program
>> >>> compatibility options with Windows.  We may not see a direct fix very
>> >>> promptly.
>> >>> Tim
>> >>>
>> >>> On Fri, Jan 16, 2009 at 12:36 PM, Tim Valenta
>> >>> <tonightslastsong@gmail.com>
>> >>> wrote:
>> >>>>
>> >>>> Windows Server 2008 is still really new... It wouldn't surprise me at
>> >>>> all
>> >>>> if there are things in it that break the installer.  I use Windows
>> >>>> Vista
>> >>>> without problems (of this nature).  I did install the trial WS
>> >>>> Hyper-V 2008
>> >>>> a few months back, perhaps I could boot into it and see If i have any
>> >>>> luck
>> >>>> during installation, but I couldn't guarantee anything.  I'll have to
>> >>>> check
>> >>>> it out tonight when I go home.
>> >>>> For reference's sake, I use the same versions of mon_python and
>> >>>> Apache as
>> >>>> you've described.
>> >>>> Tim
>> >>>>
>> >>>> On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson
>> >>>> <donothurry@gmail.com>
>> >>>> wrote:
>> >>>>>
>> >>>>> The installation program appears to successfully complete the Python
>> >>>>> portion but fails after the Apache location is selected.
>> >>>>>
>> >>>>> The message is the standard Windows message for programs that stop
>> >>>>> running.  The text is approximately:
>> >>>>>
>> >>>>> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working for
>> >>>>> some reason.  Windows will now end the program."
>> >>>>>
>> >>>>> Thanks!
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta
>> >>>>> <tonightslastsong@gmail.com>
>> >>>>> wrote:
>> >>>>> > What message does it fail with?
>> >>>>> >
>> >>>>> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson
>> >>>>> > <donothurry@gmail.com> wrote:
>> >>>>> >>
>> >>>>> >> On Windows Server 2008, the installation program for mod_python
>> >>>>> >> fails.
>> >>>>> >>  Does anyone have a fix?  Thanks!
>> >>>>> >>
>> >>>>> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
>> >>>>> >> _______________________________________________
>> >>>>> >> Mod_python mailing list
>> >>>>> >> Mod_python@modpython.org
>> >>>>> >> http://mailman.modpython.org/mailman/listinfo/mod_python
>> >>>>> >
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>> --
>> >>>>> Michael L Johnson
>> >>>>> w: 978-281-9300 x 6521
>> >>>>> c: 978-290-9005
>> >>>
>> >>> _______________________________________________
>> >>> Mod_python mailing list
>> >>> Mod_python@modpython.org
>> >>> http://mailman.modpython.org/mailman/listinfo/mod_python
>> >
>>
>>
>>
>> --
>> Michael L Johnson
>> w: 978-281-9300 x 6521
>> c: 978-290-9005
>
>
>
> --
> i was not declared before this scope.
>



-- 
Michael L Johnson
w: 978-281-9300 x 6521
c: 978-290-9005
From tonightslastsong at gmail.com  Thu Jan 22 15:46:36 2009
From: tonightslastsong at gmail.com (Tim Valenta)
Date: Thu Jan 22 15:46:40 2009
Subject: [mod_python] Windows Server 2008
In-Reply-To: <c6cb19950901221245r618a180dqee669058ecb44d1a@mail.gmail.com>
References: <c6cb19950901161038q7aa27996r89b0d338cdd6b8f7@mail.gmail.com>
	<d01b8cf20901161050g5654ee3bka5f344f207f3ec20@mail.gmail.com>
	<c6cb19950901161119h41e3772eue7636ec404c5afef@mail.gmail.com>
	<d01b8cf20901161136l7ace8800iad5c9a25f21a64fb@mail.gmail.com>
	<d01b8cf20901161712t3091c4ejb739a67f00bd4826@mail.gmail.com>
	<88e286470901161822m57be0057xb55676668aa55cfa@mail.gmail.com>
	<d01b8cf20901162053o410282c1r106e0b4a21e6228e@mail.gmail.com>
	<c6cb19950901221201m5213f7bsacb813ac33727435@mail.gmail.com>
	<d01b8cf20901221229j1ca82109u8998f936e0635707@mail.gmail.com>
	<c6cb19950901221245r618a180dqee669058ecb44d1a@mail.gmail.com>
Message-ID: <d01b8cf20901221246x5c373f07t933e68df9e61b8a5@mail.gmail.com>

Sounds great!  I'm glad to hear that it's working.  Gives me hope for WS
2008, and possibly Windows 7...

On Thu, Jan 22, 2009 at 1:45 PM, Michael Johnson <donothurry@gmail.com>wrote:

> Hi Tim,
>
> Yes, I ran the .py Hello World application like you suggested.  So
> mod_python is definitely working on W 2008.
>
> You are correct that Django offers a development-only server that by
> default runs on port 8000.  Now I can use either the Django Web server
> or Apache.
>
> Thanks,
> Mike
>
> On Thu, Jan 22, 2009 at 3:29 PM, Tim Valenta <tonightslastsong@gmail.com>
> wrote:
> > I don't think Django makes use of mod_python until you move into
> > 'production' mode, though... it's development server is internally run by
> > just django code (I think).  If you've got apache set up already, and you
> > think you've got mod_python in place (including the Apache directive to
> your
> > web root, with something like the standard mod_python.publisher handler),
> > the true test would be to write up a small .py file with a "def
> index(req):"
> > and something like "req.write('hello world')" in the body.  Then if it
> runs,
> > you'll know mod_python is working :)
> >
> > On Thu, Jan 22, 2009 at 1:01 PM, Michael Johnson <donothurry@gmail.com>
> > wrote:
> >>
> >> Mod_python works for me now on Windows Server 2008 Standard Edition
> >> for 32-bit systems.
> >>
> >> The Windows .msi installer for mod_python stops working near the end
> >> of the installation when the clean-up script begins.  But enough of
> >> the code is loaded apparently and I am running a Python Django site
> >> successfully on Windows 2008 Server Release 2.
> >>
> >> Mike
> >>
> >>
> >>
> >> On Fri, Jan 16, 2009 at 11:53 PM, Tim Valenta
> >> <tonightslastsong@gmail.com> wrote:
> >> >> Those which which integrate quite closely with mod_python
> >> >> specific handlers probably more so than those which use a minimal API
> >> >> such as a WSGI bridge.
> >> >
> >> > Hence your suggestions to me before, to choose a platform which
> >> > abstracts itself a bit more, like whole WSGI thing. <offtopic>  You've
> >> > got some good blog entries, by the way </offtopic>.  For the record, I
> >> > kind of like Django.  I originally wrote it off as 'too big' for my
> >> > interests, but I've given it another chance and it's quite nice.  And
> >> > since it's open source, contributions will keep it alive well into
> >> > Python's future versions, in my opinion.  But, the mod_python mailing
> >> > list isn't necessarily the place for Django talk.
> >> >
> >> > Tim
> >> >
> >> > On Fri, Jan 16, 2009 at 7:22 PM, Graham Dumpleton
> >> > <graham.dumpleton@gmail.com> wrote:
> >> >> 2009/1/17 Tim Valenta <tonightslastsong@gmail.com>:
> >> >>> Actually, I'm realizing an issue on my end-- I don't think
> mod_python
> >> >>> has a
> >> >>> 64-bit flavor, and my installation of WS 2008 is 64-bit.  Even if I
> >> >>> got an
> >> >>> x64 Python and Apache setup running, I'd be lacking the mod_python
> to
> >> >>> power
> >> >>> the test.
> >> >>> Sorry!  mod_python's apparently been lagging behind the modern
> 64-bit
> >> >>> option, and doesn't have versions for the newest Python versions
> >> >>> (Python 2.6
> >> >>> and Python 3, both of which are still pretty new).
> >> >>
> >> >> Don't expect a Python 3.0 version, the C APIs aren't compatible and a
> >> >> lot of work would need to be done to port mod_python to Python 3.0.
> >> >> Even if was made to work, any applications on top would like need to
> >> >> change. Those which which integrate quite closely with mod_python
> >> >> specific handlers probably more so than those which use a minimal API
> >> >> such as a WSGI bridge.
> >> >>
> >> >> Graham
> >> >>
> >> >>> Sorry I couldn't be of any help.  I'd only recommend trying some
> >> >>> program
> >> >>> compatibility options with Windows.  We may not see a direct fix
> very
> >> >>> promptly.
> >> >>> Tim
> >> >>>
> >> >>> On Fri, Jan 16, 2009 at 12:36 PM, Tim Valenta
> >> >>> <tonightslastsong@gmail.com>
> >> >>> wrote:
> >> >>>>
> >> >>>> Windows Server 2008 is still really new... It wouldn't surprise me
> at
> >> >>>> all
> >> >>>> if there are things in it that break the installer.  I use Windows
> >> >>>> Vista
> >> >>>> without problems (of this nature).  I did install the trial WS
> >> >>>> Hyper-V 2008
> >> >>>> a few months back, perhaps I could boot into it and see If i have
> any
> >> >>>> luck
> >> >>>> during installation, but I couldn't guarantee anything.  I'll have
> to
> >> >>>> check
> >> >>>> it out tonight when I go home.
> >> >>>> For reference's sake, I use the same versions of mon_python and
> >> >>>> Apache as
> >> >>>> you've described.
> >> >>>> Tim
> >> >>>>
> >> >>>> On Fri, Jan 16, 2009 at 12:19 PM, Michael Johnson
> >> >>>> <donothurry@gmail.com>
> >> >>>> wrote:
> >> >>>>>
> >> >>>>> The installation program appears to successfully complete the
> Python
> >> >>>>> portion but fails after the Apache location is selected.
> >> >>>>>
> >> >>>>> The message is the standard Windows message for programs that stop
> >> >>>>> running.  The text is approximately:
> >> >>>>>
> >> >>>>> "mod_python-3.1.1.win32-py2.5-Apahce2.2.exe has stopped working
> for
> >> >>>>> some reason.  Windows will now end the program."
> >> >>>>>
> >> >>>>> Thanks!
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>> On Fri, Jan 16, 2009 at 1:50 PM, Tim Valenta
> >> >>>>> <tonightslastsong@gmail.com>
> >> >>>>> wrote:
> >> >>>>> > What message does it fail with?
> >> >>>>> >
> >> >>>>> > On Fri, Jan 16, 2009 at 11:38 AM, Michael Johnson
> >> >>>>> > <donothurry@gmail.com> wrote:
> >> >>>>> >>
> >> >>>>> >> On Windows Server 2008, the installation program for mod_python
> >> >>>>> >> fails.
> >> >>>>> >>  Does anyone have a fix?  Thanks!
> >> >>>>> >>
> >> >>>>> >> mod_python-3.3.1.win32-py2.5-Apache2.2.exe
> >> >>>>> >> _______________________________________________
> >> >>>>> >> Mod_python mailing list
> >> >>>>> >> Mod_python@modpython.org
> >> >>>>> >> http://mailman.modpython.org/mailman/listinfo/mod_python
> >> >>>>> >
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>> --
> >> >>>>> Michael L Johnson
> >> >>>>> w: 978-281-9300 x 6521
> >> >>>>> c: 978-290-9005
> >> >>>
> >> >>> _______________________________________________
> >> >>> Mod_python mailing list
> >> >>> Mod_python@modpython.org
> >> >>> http://mailman.modpython.org/mailman/listinfo/mod_python
> >> >
> >>
> >>
> >>
> >> --
> >> Michael L Johnson
> >> w: 978-281-9300 x 6521
> >> c: 978-290-9005
> >
> >
> >
> > --
> > i was not declared before this scope.
> >
>
>
>
> --
> Michael L Johnson
> w: 978-281-9300 x 6521
> c: 978-290-9005
>



-- 
i was not declared before this scope.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090122/7c855e86/attachment.html
From james_dean at comcast.net  Fri Jan 23 07:10:56 2009
From: james_dean at comcast.net (James Dean)
Date: Fri Jan 23 07:11:02 2009
Subject: [mod_python] "Can't locate API module structure" on OS/X Leopard
Message-ID: <07C8020E-9E22-4FF3-B6B8-5ADEB51F5D3F@comcast.net>

Hello,
I have looked through many emails on this subject, and tried the  
suggestions, but I still can't get mod_python loaded into Apache2 in  
OS/X Leopard.

I am trying to start up apache2, with mod_python, and I am getting  
this error:

======================= Here is the error: =======================

c-24-61-41-158:apache2 root# httpd -t
httpd: Syntax error on line 124 of /private/etc/apache2/httpd.conf:  
Can't locate API module structure `python_module' in file /usr/libexec/ 
apache2/mod_python.so: dlsym(0x1002091e0, python_module): symbol not  
found

===================== Hardware, OS ============================

I have:
	- powerPC Mac G5
	- OS/X 10.5.6

====================== So Far ================================

I was able to get past the "no suitable image found" errors, by adding  
additional compile
and link flags, as shown below.

======================= LoadModule ========================

Here is my LoadModule statement:

LoadModule python_module /usr/libexec/apache2/mod_python.so

======================= Flags ===============================

I took advice from other emails and set some flags in src/makefile.   
Here is what I am using:
INCLUDES=-I/Software/mod_python_3_3_1/mod_python-3.3.1/src/include -I/ 
usr/include/\
apache2 -I/Library/Frameworks/Python.framework/Versions/2.5/include/ 
python2.5

LIBS=-lm  -framework  Python    -ldl

CPPFLAGS = -I/System/Library/Frameworks/Python.framework/Versions/2.5/ 
include/pyth\
on2.5 -DNDEBUG -DMACOSX -DENABLE_DTRACE

LDFLAGS= -Wl,-framework,Python  -u _PyMac_Error $(PYTHONFRAMEWORKDIR)/ 
Versions/$(V\
ERSION)/$(PYTHONFRAMEWORK)  -isysroot /Developer/SDKs/MacOSX10.4u.sdk - 
g -arch ppc\
7400 -arch ppc64

OPT= -Wc,'-arch ppc64' -Wc,'arch ppc7400' -Wl,'-arch ppc7400' -Wl,'- 
arch ppc64'

CFLAGS=$(OPT) $(INCLUDES)

LDLIBS= -ldl

======================= Also Tried ======================
I just tried this, at someone's suggestion, but it did not help:

c-24-61-41-158:apache2 root# export DYLD_FORCE_FLAT_NAMESPACE

======================== Mysql, Apache, mod_python   
=====================

mod_python 3.3.1

50 / > file /usr/libexec/apache2/mod_python.so
/usr/libexec/apache2/mod_python.so: Mach-O universal binary with 2  
architectures
/usr/libexec/apache2/mod_python.so (for architecture ppc7400):	Mach-O  
bundle ppc
/usr/libexec/apache2/mod_python.so (for architecture ppc64):	Mach-O 64- 
bit bundle ppc64

mysql 5.0.51b

52 / > file /usr/local/mysql/bin/mysqld
/usr/local/mysql/bin/mysqld: Mach-O executable ppc

apache 2.2.9

c-24-61-41-158:apache2 root# file /usr/sbin/httpd
/usr/sbin/httpd: Mach-O universal binary with 4 architectures
/usr/sbin/httpd (for architecture ppc7400):	Mach-O executable ppc
/usr/sbin/httpd (for architecture ppc64):	Mach-O 64-bit executable ppc64
/usr/sbin/httpd (for architecture i386):	Mach-O executable i386
/usr/sbin/httpd (for architecture x86_64):	Mach-O 64-bit executable  
x86_64


Any help would be greatly appreciated!

Thank you,
- Jim





From graham.dumpleton at gmail.com  Fri Jan 23 08:05:19 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Jan 23 08:05:27 2009
Subject: [mod_python] "Can't locate API module structure" on OS/X Leopard
In-Reply-To: <07C8020E-9E22-4FF3-B6B8-5ADEB51F5D3F@comcast.net>
References: <07C8020E-9E22-4FF3-B6B8-5ADEB51F5D3F@comcast.net>
Message-ID: <88e286470901230505o38688f14s3640ca49265ed8d3@mail.gmail.com>

If you are trying to run a Python web application or framework which
supports WSGI, such as Django or Trac, use mod_wsgi instead and you
may find things simpler.

If not, then try mod_python from subversion repository instead as that
definitely has correct flags.

  svn co https://svn.apache.org/repos/asf/quetzalcoatl/mod_python/trunk
mod_python-trunk

Graham

2009/1/23 James Dean <james_dean@comcast.net>:
> Hello,
> I have looked through many emails on this subject, and tried the
> suggestions, but I still can't get mod_python loaded into Apache2 in OS/X
> Leopard.
>
> I am trying to start up apache2, with mod_python, and I am getting this
> error:
>
> ======================= Here is the error: =======================
>
> c-24-61-41-158:apache2 root# httpd -t
> httpd: Syntax error on line 124 of /private/etc/apache2/httpd.conf: Can't
> locate API module structure `python_module' in file
> /usr/libexec/apache2/mod_python.so: dlsym(0x1002091e0, python_module):
> symbol not found
>
> ===================== Hardware, OS ============================
>
> I have:
>        - powerPC Mac G5
>        - OS/X 10.5.6
>
> ====================== So Far ================================
>
> I was able to get past the "no suitable image found" errors, by adding
> additional compile
> and link flags, as shown below.
>
> ======================= LoadModule ========================
>
> Here is my LoadModule statement:
>
> LoadModule python_module /usr/libexec/apache2/mod_python.so
>
> ======================= Flags ===============================
>
> I took advice from other emails and set some flags in src/makefile.  Here is
> what I am using:
> INCLUDES=-I/Software/mod_python_3_3_1/mod_python-3.3.1/src/include
> -I/usr/include/\
> apache2
> -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5
>
> LIBS=-lm  -framework  Python    -ldl
>
> CPPFLAGS =
> -I/System/Library/Frameworks/Python.framework/Versions/2.5/include/pyth\
> on2.5 -DNDEBUG -DMACOSX -DENABLE_DTRACE
>
> LDFLAGS= -Wl,-framework,Python  -u _PyMac_Error
> $(PYTHONFRAMEWORKDIR)/Versions/$(V\
> ERSION)/$(PYTHONFRAMEWORK)  -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g
> -arch ppc\
> 7400 -arch ppc64
>
> OPT= -Wc,'-arch ppc64' -Wc,'arch ppc7400' -Wl,'-arch ppc7400' -Wl,'-arch
> ppc64'
>
> CFLAGS=$(OPT) $(INCLUDES)
>
> LDLIBS= -ldl
>
> ======================= Also Tried ======================
> I just tried this, at someone's suggestion, but it did not help:
>
> c-24-61-41-158:apache2 root# export DYLD_FORCE_FLAT_NAMESPACE
>
> ======================== Mysql, Apache, mod_python  =====================
>
> mod_python 3.3.1
>
> 50 / > file /usr/libexec/apache2/mod_python.so
> /usr/libexec/apache2/mod_python.so: Mach-O universal binary with 2
> architectures
> /usr/libexec/apache2/mod_python.so (for architecture ppc7400):  Mach-O
> bundle ppc
> /usr/libexec/apache2/mod_python.so (for architecture ppc64):    Mach-O
> 64-bit bundle ppc64
>
> mysql 5.0.51b
>
> 52 / > file /usr/local/mysql/bin/mysqld
> /usr/local/mysql/bin/mysqld: Mach-O executable ppc
>
> apache 2.2.9
>
> c-24-61-41-158:apache2 root# file /usr/sbin/httpd
> /usr/sbin/httpd: Mach-O universal binary with 4 architectures
> /usr/sbin/httpd (for architecture ppc7400):     Mach-O executable ppc
> /usr/sbin/httpd (for architecture ppc64):       Mach-O 64-bit executable
> ppc64
> /usr/sbin/httpd (for architecture i386):        Mach-O executable i386
> /usr/sbin/httpd (for architecture x86_64):      Mach-O 64-bit executable
> x86_64
>
>
> Any help would be greatly appreciated!
>
> Thank you,
> - Jim
>
>
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From james_dean at comcast.net  Fri Jan 23 14:23:42 2009
From: james_dean at comcast.net (James Dean)
Date: Fri Jan 23 14:23:46 2009
Subject: [mod_python] "Can't locate API module structure" on OS/X Leopard
In-Reply-To: <88e286470901230505o38688f14s3640ca49265ed8d3@mail.gmail.com>
References: <07C8020E-9E22-4FF3-B6B8-5ADEB51F5D3F@comcast.net>
	<88e286470901230505o38688f14s3640ca49265ed8d3@mail.gmail.com>
Message-ID: <56482A2E-EB09-4005-A2C5-5DFB729A8A37@comcast.net>

Thanks for your reply, Graham.  Mostly it encouraged me to keep  
trying!  :-)

Briefly: I got mod_python working by running apache2 in 32-bit mode -  
details below.


I didn't mention that I had also struggled a lot with mod_wsgi.  I  
tried it again after your suggestion,
and I tried many combinations, but I could not get past having one of  
the two problems:
	- LONG_BIT definition appears wrong [at compile time]
	- no suitable image found [at runtime]


Anyway, I finally found some advice here (thx mjtnix)
	http://code.google.com/p/modwsgi/wiki/InstallationOnMacOSX

The suggestion being that there was a way to run apache in 32 bit  
mode, and thus avoid these 64-bit issues.
	- Since I already built mysql for 32 bit, and due to my situation,  
this is acceptable for me

mjtnix's suggestion was:


I was able to force apache on leopard to run in 32-bit mode as follows.

in /System/Library/LaunchDaemons?/org.apache.httpd.plist add these  
three arguments the start of the <ProgramArguments> array:

<string>/usr/bin/arch</string> <string>-arch</string> <string>i386</ 
string>

the resulting apache command line looks like this:

/usr/bin/arch -arch i386 /usr/sbin/httpd -D FOREGROUND
----------------------- end mjtnix suggestion ----------------

After doing that.
	- I first made sure apache would run without mod_python.
		- At first it would not.
	- I adjusted the suggestion to my platform, ie change i386 to ppc (duh)
	- That worked.
	- Then added in mod_python, and it worked!!

:-)

- jcd




On Jan 23, 2009, at 8:05 AM, Graham Dumpleton wrote:

> If you are trying to run a Python web application or framework which
> supports WSGI, such as Django or Trac, use mod_wsgi instead and you
> may find things simpler.
>
> If not, then try mod_python from subversion repository instead as that
> definitely has correct flags.
>
>  svn co https://svn.apache.org/repos/asf/quetzalcoatl/mod_python/trunk
> mod_python-trunk
>
> Graham
>
> 2009/1/23 James Dean <james_dean@comcast.net>:
>> Hello,
>> I have looked through many emails on this subject, and tried the
>> suggestions, but I still can't get mod_python loaded into Apache2  
>> in OS/X
>> Leopard.
>>
>> I am trying to start up apache2, with mod_python, and I am getting  
>> this
>> error:
>>
>> ======================= Here is the error: =======================
>>
>> c-24-61-41-158:apache2 root# httpd -t
>> httpd: Syntax error on line 124 of /private/etc/apache2/httpd.conf:  
>> Can't
>> locate API module structure `python_module' in file
>> /usr/libexec/apache2/mod_python.so: dlsym(0x1002091e0,  
>> python_module):
>> symbol not found
>>
>> ===================== Hardware, OS ============================
>>
>> I have:
>>       - powerPC Mac G5
>>       - OS/X 10.5.6
>>
>> ====================== So Far ================================
>>
>> I was able to get past the "no suitable image found" errors, by  
>> adding
>> additional compile
>> and link flags, as shown below.
>>
>> ======================= LoadModule ========================
>>
>> Here is my LoadModule statement:
>>
>> LoadModule python_module /usr/libexec/apache2/mod_python.so
>>
>> ======================= Flags ===============================
>>
>> I took advice from other emails and set some flags in src/ 
>> makefile.  Here is
>> what I am using:
>> INCLUDES=-I/Software/mod_python_3_3_1/mod_python-3.3.1/src/include
>> -I/usr/include/\
>> apache2
>> -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5
>>
>> LIBS=-lm  -framework  Python    -ldl
>>
>> CPPFLAGS =
>> -I/System/Library/Frameworks/Python.framework/Versions/2.5/include/ 
>> pyth\
>> on2.5 -DNDEBUG -DMACOSX -DENABLE_DTRACE
>>
>> LDFLAGS= -Wl,-framework,Python  -u _PyMac_Error
>> $(PYTHONFRAMEWORKDIR)/Versions/$(V\
>> ERSION)/$(PYTHONFRAMEWORK)  -isysroot /Developer/SDKs/ 
>> MacOSX10.4u.sdk -g
>> -arch ppc\
>> 7400 -arch ppc64
>>
>> OPT= -Wc,'-arch ppc64' -Wc,'arch ppc7400' -Wl,'-arch ppc7400' -Wl,'- 
>> arch
>> ppc64'
>>
>> CFLAGS=$(OPT) $(INCLUDES)
>>
>> LDLIBS= -ldl
>>
>> ======================= Also Tried ======================
>> I just tried this, at someone's suggestion, but it did not help:
>>
>> c-24-61-41-158:apache2 root# export DYLD_FORCE_FLAT_NAMESPACE
>>
>> ======================== Mysql, Apache, mod_python   
>> =====================
>>
>> mod_python 3.3.1
>>
>> 50 / > file /usr/libexec/apache2/mod_python.so
>> /usr/libexec/apache2/mod_python.so: Mach-O universal binary with 2
>> architectures
>> /usr/libexec/apache2/mod_python.so (for architecture ppc7400):   
>> Mach-O
>> bundle ppc
>> /usr/libexec/apache2/mod_python.so (for architecture ppc64):     
>> Mach-O
>> 64-bit bundle ppc64
>>
>> mysql 5.0.51b
>>
>> 52 / > file /usr/local/mysql/bin/mysqld
>> /usr/local/mysql/bin/mysqld: Mach-O executable ppc
>>
>> apache 2.2.9
>>
>> c-24-61-41-158:apache2 root# file /usr/sbin/httpd
>> /usr/sbin/httpd: Mach-O universal binary with 4 architectures
>> /usr/sbin/httpd (for architecture ppc7400):     Mach-O executable ppc
>> /usr/sbin/httpd (for architecture ppc64):       Mach-O 64-bit  
>> executable
>> ppc64
>> /usr/sbin/httpd (for architecture i386):        Mach-O executable  
>> i386
>> /usr/sbin/httpd (for architecture x86_64):      Mach-O 64-bit  
>> executable
>> x86_64
>>
>>
>> Any help would be greatly appreciated!
>>
>> Thank you,
>> - Jim
>>
>>
>>
>>
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090123/406508b8/attachment.html
From graham.dumpleton at gmail.com  Fri Jan 23 20:28:50 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Jan 23 20:28:51 2009
Subject: [mod_python] "Can't locate API module structure" on OS/X Leopard
In-Reply-To: <56482A2E-EB09-4005-A2C5-5DFB729A8A37@comcast.net>
References: <07C8020E-9E22-4FF3-B6B8-5ADEB51F5D3F@comcast.net>
	<88e286470901230505o38688f14s3640ca49265ed8d3@mail.gmail.com>
	<56482A2E-EB09-4005-A2C5-5DFB729A8A37@comcast.net>
Message-ID: <88e286470901231728g196bad0fw3e8a26a513a4d0e7@mail.gmail.com>

2009/1/24 James Dean <james_dean@comcast.net>:
> Thanks for your reply, Graham.  Mostly it encouraged me to keep trying!  :-)
> Briefly: I got mod_python working by running apache2 in 32-bit mode -
> details below.
>
> I didn't mention that I had also struggled a lot with mod_wsgi.  I tried it
> again after your suggestion,
> and I tried many combinations, but I could not get past having one of the
> two problems:
> - LONG_BIT definition appears wrong [at compile time]

Then you are using broken MacPorts Python or gcc installation which
isn't fully fat compatible.

> - no suitable image found [at runtime]
>
>
> Anyway, I finally found some advice here (thx mjtnix)
> http://code.google.com/p/modwsgi/wiki/InstallationOnMacOSX
> The suggestion being that there was a way to run apache in 32 bit mode, and
> thus avoid these 64-bit issues.
> - Since I already built mysql for 32 bit, and due to my situation, this is
> acceptable for me
>
> mjtnix's suggestion was:
>
> I was able to force apache on leopard to run in 32-bit mode as follows.
>
> in /System/Library/LaunchDaemons?/org.apache.httpd.plist add these three
> arguments the start of the <ProgramArguments> array:
>
> <string>/usr/bin/arch</string> <string>-arch</string> <string>i386</string>

Also see:

  http://gidden.net/tom/2008/06/30/mysql-and-pdo-on-os-x-leopard-intel/

Rather than modify original plist file, you can apparently copy it to
different location and modify it there.

Was looking at updating mod_wsgi documentation about doing it this was
as modifying original will mean it gets overwritten if Apache updated
by OS updates.

Graham

> the resulting apache command line looks like this:
>
> /usr/bin/arch -arch i386 /usr/sbin/httpd -D FOREGROUND
>
> ----------------------- end mjtnix suggestion ----------------
> After doing that.
> - I first made sure apache would run without mod_python.
> - At first it would not.
> - I adjusted the suggestion to my platform, ie change i386 to ppc (duh)
> - That worked.
> - Then added in mod_python, and it worked!!
> :-)
> - jcd
>
>
>
> On Jan 23, 2009, at 8:05 AM, Graham Dumpleton wrote:
>
> If you are trying to run a Python web application or framework which
> supports WSGI, such as Django or Trac, use mod_wsgi instead and you
> may find things simpler.
>
> If not, then try mod_python from subversion repository instead as that
> definitely has correct flags.
>
>  svn co https://svn.apache.org/repos/asf/quetzalcoatl/mod_python/trunk
> mod_python-trunk
>
> Graham
>
> 2009/1/23 James Dean <james_dean@comcast.net>:
>
> Hello,
>
> I have looked through many emails on this subject, and tried the
>
> suggestions, but I still can't get mod_python loaded into Apache2 in OS/X
>
> Leopard.
>
> I am trying to start up apache2, with mod_python, and I am getting this
>
> error:
>
> ======================= Here is the error: =======================
>
> c-24-61-41-158:apache2 root# httpd -t
>
> httpd: Syntax error on line 124 of /private/etc/apache2/httpd.conf: Can't
>
> locate API module structure `python_module' in file
>
> /usr/libexec/apache2/mod_python.so: dlsym(0x1002091e0, python_module):
>
> symbol not found
>
> ===================== Hardware, OS ============================
>
> I have:
>
>       - powerPC Mac G5
>
>       - OS/X 10.5.6
>
> ====================== So Far ================================
>
> I was able to get past the "no suitable image found" errors, by adding
>
> additional compile
>
> and link flags, as shown below.
>
> ======================= LoadModule ========================
>
> Here is my LoadModule statement:
>
> LoadModule python_module /usr/libexec/apache2/mod_python.so
>
> ======================= Flags ===============================
>
> I took advice from other emails and set some flags in src/makefile.  Here is
>
> what I am using:
>
> INCLUDES=-I/Software/mod_python_3_3_1/mod_python-3.3.1/src/include
>
> -I/usr/include/\
>
> apache2
>
> -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5
>
> LIBS=-lm  -framework  Python    -ldl
>
> CPPFLAGS =
>
> -I/System/Library/Frameworks/Python.framework/Versions/2.5/include/pyth\
>
> on2.5 -DNDEBUG -DMACOSX -DENABLE_DTRACE
>
> LDFLAGS= -Wl,-framework,Python  -u _PyMac_Error
>
> $(PYTHONFRAMEWORKDIR)/Versions/$(V\
>
> ERSION)/$(PYTHONFRAMEWORK)  -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g
>
> -arch ppc\
>
> 7400 -arch ppc64
>
> OPT= -Wc,'-arch ppc64' -Wc,'arch ppc7400' -Wl,'-arch ppc7400' -Wl,'-arch
>
> ppc64'
>
> CFLAGS=$(OPT) $(INCLUDES)
>
> LDLIBS= -ldl
>
> ======================= Also Tried ======================
>
> I just tried this, at someone's suggestion, but it did not help:
>
> c-24-61-41-158:apache2 root# export DYLD_FORCE_FLAT_NAMESPACE
>
> ======================== Mysql, Apache, mod_python  =====================
>
> mod_python 3.3.1
>
> 50 / > file /usr/libexec/apache2/mod_python.so
>
> /usr/libexec/apache2/mod_python.so: Mach-O universal binary with 2
>
> architectures
>
> /usr/libexec/apache2/mod_python.so (for architecture ppc7400):  Mach-O
>
> bundle ppc
>
> /usr/libexec/apache2/mod_python.so (for architecture ppc64):    Mach-O
>
> 64-bit bundle ppc64
>
> mysql 5.0.51b
>
> 52 / > file /usr/local/mysql/bin/mysqld
>
> /usr/local/mysql/bin/mysqld: Mach-O executable ppc
>
> apache 2.2.9
>
> c-24-61-41-158:apache2 root# file /usr/sbin/httpd
>
> /usr/sbin/httpd: Mach-O universal binary with 4 architectures
>
> /usr/sbin/httpd (for architecture ppc7400):     Mach-O executable ppc
>
> /usr/sbin/httpd (for architecture ppc64):       Mach-O 64-bit executable
>
> ppc64
>
> /usr/sbin/httpd (for architecture i386):        Mach-O executable i386
>
> /usr/sbin/httpd (for architecture x86_64):      Mach-O 64-bit executable
>
> x86_64
>
>
> Any help would be greatly appreciated!
>
> Thank you,
>
> - Jim
>
>
>
>
>
> _______________________________________________
>
> Mod_python mailing list
>
> Mod_python@modpython.org
>
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From joshua at joshuakugler.com  Fri Jan 23 22:24:48 2009
From: joshua at joshuakugler.com (Joshua Kugler)
Date: Fri Jan 23 22:30:07 2009
Subject: [mod_python] mod_python not very smart about EGG_CACHE path
Message-ID: <gle1m1$d55$1@ger.gmane.org>

So, today I discovered a little quirk in mod_python.  We had been explicitly
setting the PYTHON_EGG_CACHE path during app startup, but I discovered that
if it was not defined, it would use ~/.python-eggs.  GREAT!  One less
config setting to maintain, so I took the code out.  After restarting
Apache, I discovered (via error messages) that the cache path was set
to /root/.python_eggs, even though the web server is running as 'apache'

So, from what I can tell, the first Apache instance starts up, it's running
as root, and sets PYTHON_EGG_CACHE to /root/.python-eggs.  The children
start up, inherit this setting, but are now running as apache, so can't
write to this directory.  Is there a way to get the children
to "reinitialize" this setting so they write to the correct egg cache
directory?

Thanks!

j

From joshua at joshuakugler.com  Fri Jan 23 22:40:15 2009
From: joshua at joshuakugler.com (Joshua Kugler)
Date: Fri Jan 23 22:40:30 2009
Subject: [mod_python] Re: mod_python not very smart about EGG_CACHE path
References: <gle1m1$d55$1@ger.gmane.org>
Message-ID: <gle2iv$ejv$1@ger.gmane.org>

Joshua Kugler wrote:
> Is there a way to get the children
> to "reinitialize" this setting so they write to the correct egg cache
> directory?

I tried a SetEnv directive in the server configuration, but mod_python
doesn't seem to honor it.  Still being told that the egg cache path
is /root/.python-eggs

j

From graham.dumpleton at gmail.com  Sat Jan 24 09:18:17 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sat Jan 24 09:18:22 2009
Subject: [mod_python] mod_python not very smart about EGG_CACHE path
In-Reply-To: <gle1m1$d55$1@ger.gmane.org>
References: <gle1m1$d55$1@ger.gmane.org>
Message-ID: <88e286470901240618p40ff4ebch74ce2668e1748340@mail.gmail.com>

2009/1/24 Joshua Kugler <joshua@joshuakugler.com>:
> So, today I discovered a little quirk in mod_python.  We had been explicitly
> setting the PYTHON_EGG_CACHE path during app startup, but I discovered that
> if it was not defined, it would use ~/.python-eggs.  GREAT!  One less
> config setting to maintain, so I took the code out.  After restarting
> Apache, I discovered (via error messages) that the cache path was set
> to /root/.python_eggs, even though the web server is running as 'apache'
>
> So, from what I can tell, the first Apache instance starts up, it's running
> as root, and sets PYTHON_EGG_CACHE to /root/.python-eggs.  The children
> start up, inherit this setting, but are now running as apache, so can't
> write to this directory.  Is there a way to get the children
> to "reinitialize" this setting so they write to the correct egg cache
> directory?

You are wrong. The mod_python package does not set PYTHON_EGG_CACHE to
anything. The value of it is being calculated by the Python module
which handles unpacking eggs, the first time it is required. The way
that it calculates it is to use value of $HOME. That environment
variable will be set to the value for root as that is what Apache was
started as.

Graham
From graham.dumpleton at gmail.com  Sat Jan 24 09:25:26 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sat Jan 24 09:25:27 2009
Subject: [mod_python] Re: mod_python not very smart about EGG_CACHE path
In-Reply-To: <gle2iv$ejv$1@ger.gmane.org>
References: <gle1m1$d55$1@ger.gmane.org> <gle2iv$ejv$1@ger.gmane.org>
Message-ID: <88e286470901240625v56f59b6cnbfeb0545960a23af@mail.gmail.com>

2009/1/24 Joshua Kugler <joshua@joshuakugler.com>:
> Joshua Kugler wrote:
>> Is there a way to get the children
>> to "reinitialize" this setting so they write to the correct egg cache
>> directory?
>
> I tried a SetEnv directive in the server configuration, but mod_python
> doesn't seem to honor it.  Still being told that the egg cache path
> is /root/.python-eggs

That will not work as the Apache SetEnv directive only sets
environment variables for CGI script processes which are execed from
Apache child worker processes.

The only way that SetEnv set values are available to mod_python is by
querying req.subprocess_env.

If you are not bound to mod_python specific APIs and are instead using
a Python web application/framework that supports WSGI, such as Django,
Trac etc., then don't use mod_python. Instead use mod_wsgi.

The mod_wsgi package has a proper understanding of Python egg cache
and has a directive for overriding its location in embedded mode
(equivalent to mod_python), or its daemon mode (similar to fastcgi).

When using mod_wsgi daemon mode, the value of HOME will also be set
correctly for the user that daemon process runs as, meaning that
overriding location of Python egg cache wouldn't even normally be
needed. This is not done for embedded mode as doing so could break
other stuff running in embedded mode as it would change the existing
behaviour of how Apache works.

So, use mod_wsgi unless you have a very good reason for still using mod_python.

Graham
From jonathan.prater at gmail.com  Sat Jan 24 23:12:02 2009
From: jonathan.prater at gmail.com (Jonathan Prater)
Date: Sat Jan 24 23:12:14 2009
Subject: [mod_python] make_obcallback: could not import mod_python.apache.\n
Message-ID: <497BE692.5000902@gmail.com>

Up until yesterday I was running Python 2.5 on Windows, and I was using 
mod_python to power a Django site.  Mostly to see if it was possible, I 
grabbed the SVN trunk of mod_python and compiled it against Python 2.6 
and Apache 2.2.  mod_python.so is now installed in 
<apachepath>\modules.  mod_python's Python files are in 
<pythonpath>\Lib\site_packages\mod_python.
I now have my Apache server running and have gone to my Django site.  I 
get a 500 Internal Server error, and the following shows up on my Apache 
error log:

[Sat Jan 24 22:55:35 2009] [error] make_obcallback: could not import 
mod_python.apache.\n
[Sat Jan 24 22:55:35 2009] [error] make_obcallback: Python path being 
used 
"['C:\\\\Python26\\\\lib\\\\site-packages\\\\setuptools-0.6c9-py2.6.egg', 
'C:\\\\Python26\\\\lib\\\\site-packages\\\\django-1.0.2_final-py2.6.egg', 
'C:\\\\WINDOWS\\\\system32\\\\python26.zip', 'C:\\\\Python26\\\\Lib', 
'C:\\\\Python26\\\\DLLs', 'C:\\\\Python26\\\\Lib\\\\lib-tk', 
'C:\\\\Python26\\\\Lib\\\\site-packages', 'C:\\\\Program Files\\\\Apache 
Software Foundation\\\\Apache2.2', 'C:\\\\Program Files\\\\Apache 
Software Foundation\\\\Apache2.2\\\\bin', 'C:\\\\Python26']".
[Sat Jan 24 22:55:35 2009] [error] get_interpreter: no interpreter 
callback found.
[Sat Jan 24 22:55:35 2009] [error] [client 127.0.0.1] python_handler: 
Can't get/create interpreter.

According to 
http://www.modpython.org/pipermail/mod_python/2007-March/023330.html, 
the fix for this is to add c:\python26\lib\site-packages to the 
PythonPath registry key, but I've done this and it hasn't fixed anything.
Any thoughts?  I really want to get mod_python working with Python 2.6...

Jon P.
From mdragon at rackspace.com  Wed Jan 28 20:59:12 2009
From: mdragon at rackspace.com (Monsyne Dragon)
Date: Wed Jan 28 20:54:24 2009
Subject: [mod_python] Bizarre error wiping globals()  under mod_python ...
Message-ID: <9553_1233194062_n0T1sLdn016544_49810D70.6000701@rackspace.com>

Ok, this is an odd one, any clues we can get would help.

Environment mod_python 3.1.4 w/  python 2.4 on Ubuntu dapper

We have a web app running under mod_python (it uses an obscure 
templating language/framework called PSE http://nick.borko.org/pse/)

We are having an intermittent glitch which is truely bizarre.   
Periodically, one module deep in this large webapp is losing it's global 
namespace. 
On our production servers, this happens on random occasional basis, but 
we have replicated it on another machine. On that machine it was 
happening every other pagehit,
and is now happening every pagehit except the first one after restarting 
apache (we don't know why this changed). 

This manifests in mindbenders like: we will import a module, (like 
'sys') like so:

import sys

class SomeClass()
    def __init__(self, args, go, here):
          sys.stderr.write('Some message')

This will run fine on the first hit, then subsequently will produce an 
exception saying that "'NoneType' object has no attribute 'stderr'" !!
And it's not just 'sys' that that happens to. if we catch the exception 
and print the contents of globals() at that point, ALL of the modules 
imported, and any global variables  have their values  set to None!

As far as we can tell, it is only happening to this one module in our 
(large,  hundreds of modules) codebase.  The module itself  is actually 
generated code, generated by the ZSI-2.0 SOAP library, and we've 
exercised this code from the command line hundreds of times without 
fail, running it in a loop.  It only fails like this in the mod_python 
environment, and then, not every time.

Does anyone have an idea of where to even begin to figure this out?



-- 
--M. Dragon



Confidentiality Notice: This e-mail message (including any attached or
embedded documents) is intended for the exclusive and confidential use of the
individual or entity to which this message is addressed, and unless otherwise
expressly indicated, is confidential and privileged information of Rackspace.
Any dissemination, distribution or copying of the enclosed material is prohibited.
If you receive this transmission in error, please notify us immediately by e-mail
at abuse@rackspace.com, and delete the original message.
Your cooperation is appreciated.

From graham.dumpleton at gmail.com  Wed Jan 28 21:04:18 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Wed Jan 28 21:04:31 2009
Subject: [mod_python] Bizarre error wiping globals() under mod_python ...
In-Reply-To: <9553_1233194062_n0T1sLdn016544_49810D70.6000701@rackspace.com>
References: <9553_1233194062_n0T1sLdn016544_49810D70.6000701@rackspace.com>
Message-ID: <88e286470901281804wb1e7955h7fd0ca30894fd289@mail.gmail.com>

2009/1/29 Monsyne Dragon <mdragon@rackspace.com>:
> Ok, this is an odd one, any clues we can get would help.
>
> Environment mod_python 3.1.4 w/  python 2.4 on Ubuntu dapper

Upgrade to mod_python 3.3.1. That version is old and buggy. See:

  http://www.dscpl.com.au/wiki/ModPython/Articles/ModuleImportingIsBroken

for one possible source of your problems.

Secondly, remember that Apache is a multi process web server. Don't
expect globals you set in one process to be visible in another. See:

  http://www.dscpl.com.au/wiki/ModPython/Articles/TheProcessInterpreterModel

Graham

> We have a web app running under mod_python (it uses an obscure templating
> language/framework called PSE http://nick.borko.org/pse/)
>
> We are having an intermittent glitch which is truely bizarre.
> Periodically, one module deep in this large webapp is losing it's global
> namespace. On our production servers, this happens on random occasional
> basis, but we have replicated it on another machine. On that machine it was
> happening every other pagehit,
> and is now happening every pagehit except the first one after restarting
> apache (we don't know why this changed).
> This manifests in mindbenders like: we will import a module, (like 'sys')
> like so:
>
> import sys
>
> class SomeClass()
>   def __init__(self, args, go, here):
>         sys.stderr.write('Some message')
>
> This will run fine on the first hit, then subsequently will produce an
> exception saying that "'NoneType' object has no attribute 'stderr'" !!
> And it's not just 'sys' that that happens to. if we catch the exception and
> print the contents of globals() at that point, ALL of the modules imported,
> and any global variables  have their values  set to None!
>
> As far as we can tell, it is only happening to this one module in our
> (large,  hundreds of modules) codebase.  The module itself  is actually
> generated code, generated by the ZSI-2.0 SOAP library, and we've exercised
> this code from the command line hundreds of times without fail, running it
> in a loop.  It only fails like this in the mod_python environment, and then,
> not every time.
>
> Does anyone have an idea of where to even begin to figure this out?
>
>
>
> --
> --M. Dragon
>
>
>
> Confidentiality Notice: This e-mail message (including any attached or
> embedded documents) is intended for the exclusive and confidential use of
> the
> individual or entity to which this message is addressed, and unless
> otherwise
> expressly indicated, is confidential and privileged information of
> Rackspace.
> Any dissemination, distribution or copying of the enclosed material is
> prohibited.
> If you receive this transmission in error, please notify us immediately by
> e-mail
> at abuse@rackspace.com, and delete the original message.
> Your cooperation is appreciated.
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From mdragon at rackspace.com  Thu Jan 29 02:14:02 2009
From: mdragon at rackspace.com (Monsyne Dragon)
Date: Thu Jan 29 02:09:17 2009
Subject: [mod_python] Bizarre error wiping globals() under mod_python ...
In-Reply-To: <88e286470901281804wb1e7955h7fd0ca30894fd289@mail.gmail.com>
References: <9553_1233194062_n0T1sLdn016544_49810D70.6000701@rackspace.com>
	<88e286470901281804wb1e7955h7fd0ca30894fd289@mail.gmail.com>
Message-ID: <21308_1233212954_n0T79EEw028277_4981573A.1000307@rackspace.com>

Graham Dumpleton wrote:
> 2009/1/29 Monsyne Dragon <mdragon@rackspace.com>:
>   
>> Ok, this is an odd one, any clues we can get would help.
>>
>> Environment mod_python 3.1.4 w/  python 2.4 on Ubuntu dapper
>>     
>
> Upgrade to mod_python 3.3.1. That version is old and buggy. See:
>
>   http://www.dscpl.com.au/wiki/ModPython/Articles/ModuleImportingIsBroken
>
> for one possible source of your problems.
>
>   
Ah.  Well, we'll check that out.  Would you happen to know of a 3.3.1 
backported package for Ubuntu Dapper (6.06) ?  It would be rather helpful.
If not we'll have to roll one ourselves.

(This is probably Yet Another reason we should be moving to Hardy (which 
has 3.3.1),  but this is a mission-critical app that basically runs a 
half-billion dollar a year company, and arranging  an OS upgrade on a 
system with two dozen servers between production, cert and dev 
environments in that kind of corporate environment is kindof like 
conducting a herd of wild African elephants in a tap-dance routine. It's 
pretty impressive when you pull it off, but there's alot of time and 
broken furniture involved in getting there. )

> Secondly, remember that Apache is a multi process web server. Don't
> expect globals you set in one process to be visible in another. See:
>
>   http://www.dscpl.com.au/wiki/ModPython/Articles/TheProcessInterpreterModel
>
>   
Yah, I'm aware of that.  This isn't doing anything funky with global 
variables, it's just doing an import at the top of a module and then 
trying to access the module it imported in a classes __init__  method a 
few lines down, and getting None instead of the module object (some of 
the time).

I'll see if upgrading mod_python helps here.
> Graham
>
>   
>> We have a web app running under mod_python (it uses an obscure templating
>> language/framework called PSE http://nick.borko.org/pse/)
>>
>> We are having an intermittent glitch which is truely bizarre.
>> Periodically, one module deep in this large webapp is losing it's global
>> namespace. On our production servers, this happens on random occasional
>> basis, but we have replicated it on another machine. On that machine it was
>> happening every other pagehit,
>> and is now happening every pagehit except the first one after restarting
>> apache (we don't know why this changed).
>> This manifests in mindbenders like: we will import a module, (like 'sys')
>> like so:
>>
>> import sys
>>
>> class SomeClass()
>>   def __init__(self, args, go, here):
>>         sys.stderr.write('Some message')
>>
>> This will run fine on the first hit, then subsequently will produce an
>> exception saying that "'NoneType' object has no attribute 'stderr'" !!
>> And it's not just 'sys' that that happens to. if we catch the exception and
>> print the contents of globals() at that point, ALL of the modules imported,
>> and any global variables  have their values  set to None!
>>
>> As far as we can tell, it is only happening to this one module in our
>> (large,  hundreds of modules) codebase.  The module itself  is actually
>> generated code, generated by the ZSI-2.0 SOAP library, and we've exercised
>> this code from the command line hundreds of times without fail, running it
>> in a loop.  It only fails like this in the mod_python environment, and then,
>> not every time.
>>
>> Does anyone have an idea of where to even begin to figure this out?
>>
>>
>>
>> --
>> --M. Dragon
>>
>>
>>
>> Confidentiality Notice: This e-mail message (including any attached or
>> embedded documents) is intended for the exclusive and confidential use of
>> the
>> individual or entity to which this message is addressed, and unless
>> otherwise
>> expressly indicated, is confidential and privileged information of
>> Rackspace.
>> Any dissemination, distribution or copying of the enclosed material is
>> prohibited.
>> If you receive this transmission in error, please notify us immediately by
>> e-mail
>> at abuse@rackspace.com, and delete the original message.
>> Your cooperation is appreciated.
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>     


-- 
--M. Dragon



Confidentiality Notice: This e-mail message (including any attached or
embedded documents) is intended for the exclusive and confidential use of the
individual or entity to which this message is addressed, and unless otherwise
expressly indicated, is confidential and privileged information of Rackspace.
Any dissemination, distribution or copying of the enclosed material is prohibited.
If you receive this transmission in error, please notify us immediately by e-mail
at abuse@rackspace.com, and delete the original message.
Your cooperation is appreciated.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20090129/27cc3a0f/attachment.html
