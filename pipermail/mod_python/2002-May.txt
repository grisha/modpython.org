From Nik.Barron at pennantplc.co.uk  Wed May  1 12:16:53 2002
From: Nik.Barron at pennantplc.co.uk (Nik Barron)
Date: Fri Jan  9 21:46:44 2004
Subject: [mod_python] mod_python.publisher problems: 404s on second an
	d subsequent hits
Message-ID: <F17550784FF9D111B7F100E02921B24741E8DD@NT-SOTON-001>

Hi,

Still having problems with this, even with the 2.7.8 apache.py installed;
anyone have any suggestions?

Nik

From jquinte at fadu.uba.ar  Thu May  2 18:31:05 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 21:46:44 2004
Subject: [mod_python] I need advice, please...
Message-ID: <200205021536.SAA11506@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi !!!
I have seen an example in the FAQ to share the connection to the Database 
between many modules using a global variable. I was trying to do the same but 
I realize that a new connection is established every time I click a link. All 
works fine until all the job is done and I return apache.OK. After that, the 
variable holding my DB Connection seems to get lost and I have to connect 
again. Someone told me that I should use any module that let me share memory. 
That's ok and I've done that too, but everyone uses pickle to convert the 
object to a string. The matter is that Connection Objects cannot be converted 
by pickle. Does any of you have any idea, please?

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE80bAadBzRnlFl4cgRAvdkAKC3jI734xIwvVPOR0Fh5Jd5nIT6xgCgqLay
ry5lDNqh+XaV01ee7WSSO0k=
=x9WS
-----END PGP SIGNATURE-----

From johannes at erdfelt.com  Thu May  2 20:16:08 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:46:44 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <200205021536.SAA11506@www.fadu.uba.ar>; from jquinte@fadu.uba.ar on Thu, May 02, 2002 at 06:31:05PM -0300
References: <200205021536.SAA11506@www.fadu.uba.ar>
Message-ID: <20020502201608.S21887@sventech.com>

On Thu, May 02, 2002, Javier Quinteros <jquinte@fadu.uba.ar> wrote:
> I have seen an example in the FAQ to share the connection to the Database 
> between many modules using a global variable. I was trying to do the same but 
> I realize that a new connection is established every time I click a link. All 
> works fine until all the job is done and I return apache.OK. After that, the 
> variable holding my DB Connection seems to get lost and I have to connect 
> again. Someone told me that I should use any module that let me share memory. 
> That's ok and I've done that too, but everyone uses pickle to convert the 
> object to a string. The matter is that Connection Objects cannot be converted 
> by pickle. Does any of you have any idea, please?

The problem is that Apache forks off a number of children to handle all
of the requests.

It's probably not forgetting the value, it's just that you're hitting a
new Apache child.

Using the code in the FAQ, you'll have one database connection per child
maximum, which is usually reasonable.

JE


From modpython at smartology.nl  Fri May  3 11:21:09 2002
From: modpython at smartology.nl (Remy C. Cool)
Date: Fri Jan  9 21:46:44 2004
Subject: [mod_python] problem with mod_python authentication via postgresql
Message-ID: <E173ZFY-0003vE-00@osiris>

I'm experimenting with python/mod_python and run into a problem with 
autentication...  

I use the following code:

# authenticate user
import psycopg
import string
import time
from mod_python import apache


def authenhandler(req):

   pw = req.get_basic_auth_pw()
   user = req.connection.user

   # create database connection
   connectstring = "dbname=testbase user=tester password=test 
port=5432"
   dbconn = psycopg.connect(connectstring)
   dbhandle = dbconn.cursor()
   # define query
   dbhandle.execute("SELECT user_id,password FROM users WHERE 		   
username = %s", (user,))
   # retrieve results
   results = dbhandle.fetchall()
   total = len(results)

   if total < 1:
      # user not known on this system
      return apache.HTTP_UNAUTHORIZED
   else:
      if total > 2:
         # database corrupted
         return apache.HTTP_UNAUTHORIZED
      else:
         # extract user_id from list
         user_id = results[0][0]
         # get host info
         curhost = req.get_remote_host(apache.REMOTE_NAME)
         # register login try
         dbhandle.execute("""INSERT INTO login (user_id,host) VALUES 
( %d,%s )""", (user_id,curhost))
         dbconn.commit()
         # extract password from list
         passwd = string.strip(results[0][1])
         # compare password with given
         if pw == passwd:
            # user authenticated
            return apache.OK
         else:
            # incorrect password
            return apache.HTTP_UNAUTHORIZED

Authentication works. The username is looked up in the database and 
if the password is OK, access is granted. The problem is that for 
every login attempt (or page refresh) I get 4 entry's in my login 
table ond not one. What am I doing wrong here ?

Regards,
Remy Cool

From dustin at ywlcs.org  Sat May  4 14:28:21 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:44 2004
Subject: [mod_python] Powered by mod_python logo?
Message-ID: <20020504192821.GA2017@eleanor.internal.ywlcs.org>

Anyone have a logo or icon appropriate for sticking in the corner of
mod_python-generated pages?  Similar to "powered by PHP" or "powered by
Apache" or whatever?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May  4 15:35:41 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Unrelated: add_handler()'s 3rd argument
Message-ID: <20020504203540.GB2017@eleanor.internal.ywlcs.org>

From jquinte at fadu.uba.ar  Mon May  6 15:45:16 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <20020502201608.S21887@sventech.com>
References: <200205021536.SAA11506@www.fadu.uba.ar> <20020502201608.S21887@sventech.com>
Message-ID: <200205061250.PAA24036@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks, Johannes !!!
You are right !!!

On Thursday 02 May 2002 21:16, Johannes Erdfelt wrote:
> The problem is that Apache forks off a number of children to handle all
> of the requests.
>
> It's probably not forgetting the value, it's just that you're hitting a
> new Apache child.
>
> Using the code in the FAQ, you'll have one database connection per child
> maximum, which is usually reasonable.
>
> JE
>

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE81s9CdBzRnlFl4cgRAi6OAJ9cF/MsGGwPrrLc8Ndb5vjOfrkaAQCeKu2q
hyhynnJHZE/2wIvUo6wp1XA=
=4MNL
-----END PGP SIGNATURE-----

From s_lott at yahoo.com  Thu May  9 04:58:04 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Subclassing Request
Message-ID: <20020509115804.16929.qmail@web9607.mail.yahoo.com>

I'd like to use a subclass of Request that includes creating a
FieldStorage instance automatically when the Request is created.

Can this be done by subclassing Request, subclassing CallBack to
use the new subclass of Request and then providing a new init()
function in my file?

If not, how do you suggest I create my own subclass of Request?

Also, unrelated, is it possible to add an items() method to tableobject.c?

=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
Yahoo! Shopping - Mother's Day is May 12th!
http://shopping.yahoo.com

From stas at mail.ru  Fri May 10 09:11:25 2002
From: stas at mail.ru (Stas)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Привет!
Message-ID: <200205101611.g4AGBPc04412@asteroid.powweb.com>

Ваш компьютер не справляется с работой? 
Долго загружаются программы, новая игра не радует?

Ваши проблемы - не в устаревшем железе, а в ненастроенном компьютере! 
Хотите вдвое увеличить производительность вашего процессора? 
Забыть о разорвавшемся коннекте и зависшем Windows? 

Тогда эта программа для вас!
Она поможет правильно настроить ваш комьютер и периферийное оборудование, 
что вдвое повысит производительность, устранит неполадки и решит проблемы, 
из-за которых Windows часто зависает. Вы сможете так настроить модем, 
что практически при любой скорости и любом провайдере он будет держать соединение.

Совершенно бесплатно загрузить программу можно здесь

http://xtremetechs.by.ru

http://www.az.ru/xtremetech

С уважением, команда разработчиков X-Treme Technologies ®



*** Программа не содержит вирусов.

-------------------------------------------------------------------------
To be removed from this mailing list
click on the link below 
http://muziki-na-ohotecom.powweb.com/cgi-bin/mail.cgi?mod_python@modpython.org



From support at obantec.net  Fri May 10 20:03:51 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Apache warning on start
Message-ID: <03af01c1f855$6f782d20$0a01a8c0@gamma>

Hi

New to python.
I just added mod_python to my apache 1.3.24 on redhat 7.2 and although it
runs ok i see this error on start

[warn] Loaded DSO libexec/mod_python.so uses plain Apache 1.3 API, this
module might crash under EAPI! (please recompile it with -DEAPI)

Mark


From s13361562 at bach.sun.ac.za  Sat May 11 17:44:27 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] getting username when using publisher auth
Message-ID: <20020511154427.GA12177@vervet.localnet>

Is it possible to get at the username from "normal code" when
authentication is done using __auth__ methods? req.connection.user is
None...

def test(req):
    def __auth__(req, user, passwd):
        if user == "eggs" and passwd == "spam":
            return 1
        else:
            return 0

    return "Hello "+str(req.connection.user)

returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
not help.

Thanks,
Hugo van der Merwe

From suselist at blackball.biz  Sun May 12 01:22:39 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python 2.7.8
Message-ID: <595450206.20020512012239@blackball.biz>

Hello,

i have a big (?) problem.
I've just installed mod_python 2.7.8
On SuSE Linux 7.2 with apache.

So i've added the required lines in Apache.
Apache tells me, that this modul might crash under EAPI.

And when I start a python-script via Brwoser i get the source code.
What might i have done false?

THX

Stephan

Sorry for my bad english!




From jwm-mod_python at sentinelchicken.net  Sat May 11 16:56:02 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <595450206.20020512012239@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 01:22:39AM +0200
References: <595450206.20020512012239@blackball.biz>
Message-ID: <20020511165602.A7089@samson.sentinelchicken.net>

On Sun, May 12, 2002 at 01:22:39AM +0200, Stephan Pienitz wrote:
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.

What does your httpd.conf look like? Did you specify a handler in you script?

> 
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
> 
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
> 
> THX
> 
> Stephan
> 
> Sorry for my bad english!
> 
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From rien at yeepa.org  Sun May 12 10:29:27 2002
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] getting username when using publisher auth
References: <20020511154427.GA12177@vervet.localnet>
Message-ID: <000d01c1f98f$21eca140$2cee4cd4@RANDOM>

From: "Hugo van der Merwe" <s13361562@bach.sun.ac.za>
> def test(req):
>     def __auth__(req, user, passwd):
>         if user == "eggs" and passwd == "spam":
>             return 1
>         else:
>             return 0
> 
>     return "Hello "+str(req.connection.user)
> 
> returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
> not help.

try calling "req.get_basic_auth_pw()" BEFORE calling "req.connection.user"

-- 
rien




From mateusz at ant.gliwice.pl  Sun May 12 20:05:12 2002
From: mateusz at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
Message-ID: <200205121805.g4CI5Ks00385@eden.ispol.com>

I tried all afternoon without success :(
First I compiled python 2.2.1 

Python-2.2.1]$ ./configure --without-threads
$make
It went Ok (with two warnings)

then  I did:
mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr 
--bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share 
--includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec 
--localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man 
--infodir=/usr/share/info --with-apxs=/usr/sbin/apxs 
--with-python=/home/matkor/src/Python-2.2.1

It complained about:
checking what libraries Python was linked with... grep: 
/home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or 
directory

make again went OK, but make install failed:

$ make install
make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'

Performing DSO installation.

/usr/bin/install -c src/mod_python.so /usr/lib/apache
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
/usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
python /usr/local/lib/python2.2/compileall.py 
/usr/local/lib/python2.2/site-packages/mod_python
python: can't open file '/usr/local/lib/python2.2/compileall.py'
make[2]: *** [install_py_lib] B??d 2

Having copying mod_pytho.so manually to /usr/lib/apache/
results an error:

$ /etc/rc.d/init.d/httpd configtest
Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
Cannot load /etc/httpd/modules/mod_python.so into server: 
/etc/httpd/modules/mod_python.so: undefined symbol: openpty

Any ideas ?
TIA

-- 
Mateusz Korniak

From grisha at modpython.org  Sun May 12 15:10:52 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Does anybody succeded in running mod_python with
 python 2.x under RH 7.x ?
In-Reply-To: <200205121805.g4CI5Ks00385@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205121509520.842-100000@localhost>

Try configuring it with just one argument:

./configure --with-apxs=/usr/sbin/apxs

Grisha

On Sun, 12 May 2002, Mateusz Korniak wrote:

> I tried all afternoon without success :(
> First I compiled python 2.2.1
>
> Python-2.2.1]$ ./configure --without-threads
> $make
> It went Ok (with two warnings)
>
> then  I did:
> mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr
> --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share
> --includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec
> --localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man
> --infodir=/usr/share/info --with-apxs=/usr/sbin/apxs
> --with-python=/home/matkor/src/Python-2.2.1
>
> It complained about:
> checking what libraries Python was linked with... grep:
> /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
> grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or
> directory
>
> make again went OK, but make install failed:
>
> $ make install
> make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
> make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'
>
> Performing DSO installation.
>
> /usr/bin/install -c src/mod_python.so /usr/lib/apache
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> /usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
> python /usr/local/lib/python2.2/compileall.py
> /usr/local/lib/python2.2/site-packages/mod_python
> python: can't open file '/usr/local/lib/python2.2/compileall.py'
> make[2]: *** [install_py_lib] B??d 2
>
> Having copying mod_pytho.so manually to /usr/lib/apache/
> results an error:
>
> $ /etc/rc.d/init.d/httpd configtest
> Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
> Cannot load /etc/httpd/modules/mod_python.so into server:
> /etc/httpd/modules/mod_python.so: undefined symbol: openpty
>
> Any ideas ?
> TIA
>
> --
> Mateusz Korniak
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From Mateusz.Korniak at ant.gliwice.pl  Sun May 12 21:48:52 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
In-Reply-To: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
References: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
Message-ID: <200205121948.g4CJmts01196@eden.ispol.com>

On Sunday 12 May 2002 21:10, you wrote:
> Try configuring it with just one argument:
>
> ./configure --with-apxs=/usr/sbin/apxs

If I did so it found old python (under RH there are two separate executables 
python is 1.5.x and python2 is 2.x )
checking Python version... 1.5

So I fooled ./configure by
$ cp /usr/bin/python2.2 /usr/bin/python 
then it worked OK but got big warning about python threadness

checking Python version... 2.2
checking whether Python is compiled with thread support... yes

  ****** WARNING ******
  Python is compiled with thread support. Apache 1.3 does not use threads.
  On some systems this will cause problems during compilation, on others
  it may result in unpredictable behaviour of your Apache server. Yet on
  others it will work just fine. The recommended approach is to compile
  Python without thread support in a separate location and specify it with
  --with-python option to this ./configure script.

also I got warning during startup:

# /etc/rc.d/init.d/httpd configtest
[Sun May 12 21:23:44 2002] [warn] Loaded DSO modules/mod_python.so uses plain 
Apache 1.3 API, this module might crash under EAPI! (please recompile it with 
-DEAPI)
Syntax OK
[root@beauty /root]# /etc/rc.d/init.d/httpd graceful
/usr/sbin/apachectl graceful: httpd gracefully restarted

but apache seems to work. :)))
I don't know how dangerous are those warnings .. but thanks a lot for help ;)


-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From fuf at mobil.cz  Mon May 13 17:00:00 2002
From: fuf at mobil.cz (Michal Vitecek)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] questions/ideas
Message-ID: <20020513170000.A18394@diana.mobil.cz>

 hello everyone,

 i'm taking a decision whether to use python or php in my next project.
 i'm leaning towards python and mod_python, but i found some
 problems/questions/ideas that i'd like to know answers to first.

    a) as i did my previous projects in php i now find it quite strange
       that i need to call a certain function of a script. this makes it a
       bit more difficult to use the few global variables that i plan to
       use and from time to time makes the whole program into a single
       function (one tab is taken)

    b) the publisher submodule needs to know the name of the function to
       run - would it be possible to change it so that it doesn't need it
       ie. run the whole script instead?

    c) the publisher submodule reads the whole output of a function to a
       variable - for a sites with large html pages this could be 100s of
       KBs. this could mean a noticeable performance slowdown - also
       because the output must be prepared first. how about if the
       function output the resulting html code to a stream?

    d) i noticed that the python interpreter is not the same even for a
       single virtualhost (even when i explicitly define its name with
       PythonInterpreter) => the persistence is kept only withing every
       apache child. with increase of the number of children a new
       interpreter is created that doesn't inherit from the main one (i'm
       using python 2.2.1 and apache 1.3.20).

    e) in php it's possible to have the php code mixed with the html one -
       ie. there are special marks, that mark the start and end of php
       code. i think it would be a nice option to have in mod_python
       because it helps imho to create scripts the allow for easy to
       review code.

	thank you for your time
--
		fuf		(fuf@mobil.cz)

From johannes at erdfelt.com  Mon May 13 14:12:24 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513170000.A18394@diana.mobil.cz>; from fuf@mobil.cz on Mon, May 13, 2002 at 05:00:00PM +0200
References: <20020513170000.A18394@diana.mobil.cz>
Message-ID: <20020513141224.E23170@sventech.com>

On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>  i'm taking a decision whether to use python or php in my next project.
>  i'm leaning towards python and mod_python, but i found some
>  problems/questions/ideas that i'd like to know answers to first.

I've made the switch from PHP to mod_python successfully.

>     a) as i did my previous projects in php i now find it quite strange
>        that i need to call a certain function of a script. this makes it a
>        bit more difficult to use the few global variables that i plan to
>        use and from time to time makes the whole program into a single
>        function (one tab is taken)

That's just how python works. It's a different style of programming, but
I think it's better.

I got into too many problems with global variables in PHP that caused me
headaches.

>     b) the publisher submodule needs to know the name of the function to
>        run - would it be possible to change it so that it doesn't need it
>        ie. run the whole script instead?

Use the attached patch to mod_python. It'll call the function named
"handler" if there is no name passed. The patch is relative to 2.7.6.

>     c) the publisher submodule reads the whole output of a function to a
>        variable - for a sites with large html pages this could be 100s of
>        KBs. this could mean a noticeable performance slowdown - also
>        because the output must be prepared first. how about if the
>        function output the resulting html code to a stream?

Have you measured a decrease in performance?

>     d) i noticed that the python interpreter is not the same even for a
>        single virtualhost (even when i explicitly define its name with
>        PythonInterpreter) => the persistence is kept only withing every
>        apache child. with increase of the number of children a new
>        interpreter is created that doesn't inherit from the main one (i'm
>        using python 2.2.1 and apache 1.3.20).

That's because of the multiple process approach to apache. Since each
child is a different process, they don't share memory.

You can play tricks with shared memory if you really need that
functionality.

>     e) in php it's possible to have the php code mixed with the html one -
>        ie. there are special marks, that mark the start and end of php
>        code. i think it would be a nice option to have in mod_python
>        because it helps imho to create scripts the allow for easy to
>        review code.

There are add on packages like that. I've been using a package called
Cheetah that provides something similar.

Do some searching.

JE

-------------- next part --------------
--- mod_python/publisher.py.orig	Tue Apr 16 20:31:06 2002
+++ mod_python/publisher.py	Tue Apr 16 20:34:45 2002
@@ -80,17 +80,17 @@
     args = {}
 
     # get the path PATH_INFO (everthing after script)
-    if not _req.subprocess_env.has_key("PATH_INFO"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
-    
-    func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
-    func_path = string.replace(func_path, "/", ".")
-    if func_path[-1] == ".":
-        func_path = func_path[:-1] 
+    if _req.subprocess_env.has_key("PATH_INFO"):
+        func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
+        func_path = string.replace(func_path, "/", ".")
+        if func_path[-1] == ".":
+            func_path = func_path[:-1] 
 
-    # if any part of the path begins with "_", abort
-    if func_path[0] == '_' or string.count(func_path, "._"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+        # if any part of the path begins with "_", abort
+        if func_path[0] == '_' or string.count(func_path, "._"):
+            raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+    else:
+        func_path = "handler"
 
     # process input, if any
     fs = util.FieldStorage(req, keep_blank_values=1)
From grisha at modpython.org  Mon May 13 14:59:34 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513141224.E23170@sventech.com>
Message-ID: <Pine.BSF.4.32.0205131455160.12699-100000@localhost>


On Mon, 13 May 2002, Johannes Erdfelt wrote:

> On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>
> >     c) the publisher submodule reads the whole output of a function to a
> >        variable - for a sites with large html pages this could be 100s of
> >        KBs. this could mean a noticeable performance slowdown - also
> >        because the output must be prepared first. how about if the
> >        function output the resulting html code to a stream?
>
> Have you measured a decrease in performance?

You can, btw write to a stream if you need to, even from publisher scripts
- you just have to call req.send_http_header() manually first, and after
that you can write to the socket using req.write(). This technique is
useful for doing things like a traceroute script in which you want lines
to appear as soon as data is available.

Grisha


From support at obantec.net  Mon May 13 21:37:12 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python 2.7.8
References: <595450206.20020512012239@blackball.biz>
Message-ID: <157701c1fabd$fb9a7050$0a01a8c0@gamma>

Hi

I fixed the apache DEAPI warning by doing the following.

./configure --with-apxs=/usr/local/apache/bin/apxs --with-python=/usr/local/
lib/python2.2

then edit the Makefile in mod_python-2.7.8/src/

add -DEAPI to the line CFLAGS=$(OPT) $(INCLUDES)
so it becomes
CFLAGS=$(OPT) $(INCLUDES) -DEAPI

then follow make instruction for dso

Re. python as source check doc-html/inst-testing.html

HTH

Mark
--
Obantec Support
www.obantec.net
WebHosting and Domains
Nominet UK Tag Holder
----- Original Message -----
From: "Stephan Pienitz" <suselist@blackball.biz>
To: <mod_python@modpython.org>
Sent: Sunday, May 12, 2002 12:22 AM
Subject: [mod_python] mod_python 2.7.8


> Hello,
>
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.
>
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
>
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
>
> THX
>
> Stephan
>
> Sorry for my bad english!
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From jwm-mod_python at sentinelchicken.net  Mon May 13 15:13:15 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <556963282.20020512035022@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 03:50:22AM +0200
References: <595450206.20020512012239@blackball.biz> <20020511165602.A7089@samson.sentinelchicken.net> <1873819371.20020512025758@blackball.biz> <20020511174750.A7171@samson.sentinelchicken.net> <556963282.20020512035022@blackball.biz>
Message-ID: <20020513151314.D10655@samson.sentinelchicken.net>

Hast Du immernoch Probleme?


On Sun, May 12, 2002 at 03:50:22AM +0200, Stephan Pienitz wrote:
> Guten Tag Jason Morgan,
> 
> Am Sonntag, 12. Mai 2002 um 02:47 schrieben Sie:
> 
> 
> JM> Gruess Dich Stephan,
> 
> >> I've added in my httpd.conf following lines:
> >> 
> >> LoadModule python_module libexec/mod_python.so
> 
> JM> Do you also have:
> 
> JM> AddModule mod_python.c
> 
> JM> in the ClearModuleList-section?
> 
> >> <Directory /home/www/pythontestt>
> >>   AddHandler python-program .py
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> JM> Wenn das nicht functioniert, vielleicht sollst Du der modpython_email_liste wieder schreiben. Ich habe mod_python nur gestern
> JM> installiert und habe noch nicht viel damit gearbeitet. Vergiss(?) nicht Apache wiederzustarten!
> 
> JM> Viel Glueck,
> 
> JM> Jason
> 
> Hi,
> 
> ich schreibe dann mal deutsch :)
> 
> Also, wenn ich das .c-Modul hinzuf?ge, dann gibt der Apache zwar beim
> neustart keine Fehlermelung aus, aber st?rtzt trotzdem ab.
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> Dann w?re das doch aber nur f?r ein File g?ltig, oder?
> 
> THX
> 
> Stephan
> 
> 
> 

From suselist at blackball.biz  Tue May 14 21:06:18 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] It doesn't work
Message-ID: <1803493863.20020514210618@blackball.biz>

Hi,

i've set up mod_python in DSO-Mode.
Then I've written the 2 Lines into the
Apache-Conf.

The I'ved restartet Apache an it says to me, thats allright. But then
i can't open any webpage on my server.

What have i done wrong?

THX

Stephan

Sorry for my bad english




From jwm-mod_python at sentinelchicken.net  Tue May 14 22:13:13 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020514221313.A14746@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From roger.baklund at mobiliant.com  Wed May 15 17:49:38 2002
From: roger.baklund at mobiliant.com (Roger Baklund)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] cgihandler, w2k
Message-ID: <BGEHIEMNFIOKLADGCOJIMEBCDBAA.roger.baklund@mobiliant.com>

Hi,

we have installed mod_python on a w2k server, and the mptest.py "Hello
world" is working.

However, when running a cgi application through the cgihandler, we have some
problems.

First, we thought it was working, but it was not, as we saw many python
processes coming and going in the task manager, as if it was running like a
normal cgi.

We reinstalled, and we patched some lines in apache.py, function
setup_cgi(), according to notes found on this mailinglist ("old_env =
os.environ.copy()" and "return old_env, si, so").

This time the cgihandler was running, and we found some problems in the cgi
that we fixed ("if __name__ == '__main__':" and some redirects that went
wrong because of missing status header.)

Then we got some strange errors... it started to complain about modules not
existing, when it was trying to delete from sys.modules. This is in the
beginning of the cgihandler.py handler() function.

We had to move the "_lock.acquire()" to before the sys.modules loop to get
rid of the error messages.

We tried to remove the sys.modules loop (as indicated in a comment in the
source), but we could not make that work. We always get Internal Server
Error when we try to run without this module reload mechanism. See log
entries below.

The application is frames based. When the user log in, a frameset is
returned, and new requests are made for a stylesheet, a couple of external
javascripts, and a couple of cgi-based html pages/frames.

From jwm at sentinelchicken.net  Wed May 15 09:51:52 2002
From: jwm at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020515095152.A16190@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From diedrich at myriad.com  Fri May 17 10:27:13 2002
From: diedrich at myriad.com (Karl Diedrich)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Apache 2.0 CVS?
Message-ID: <3CE52F61.29762B72@myriad.com>

Hello,

Is the mod_python for Apache2.0.x being worked on in CVS?

I have done some Python extension programming so I would be willing to
look over the necessary
files to help if I know which files are important.

--
Karl Diedrich
Programmer II
Myriad Genetics Inc.
http://www.myriad.com/
(801) 883-3246


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020517/975cd5f7/attachment.htm
From grisha at modpython.org  Fri May 17 13:46:55 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Apache 2.0 CVS?
In-Reply-To: <3CE52F61.29762B72@myriad.com>
Message-ID: <Pine.BSF.4.32.0205171346250.65141-100000@localhost>

Yes, just follow the CVS link off the website. The latest version is the
one for apache 2.0.

Grisha

On Fri, 17 May 2002, Karl Diedrich wrote:

> Hello,
>
> Is the mod_python for Apache2.0.x being worked on in CVS?
>
> I have done some Python extension programming so I would be willing to
> look over the necessary
> files to help if I know which files are important.
>
> --
> Karl Diedrich
> Programmer II
> Myriad Genetics Inc.
> http://www.myriad.com/
> (801) 883-3246
>
>
>


From ian at veryfresh.com  Fri May 17 20:27:54 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020514221313.A14746@samson.sentinelchicken.net>
References: <20020514221313.A14746@samson.sentinelchicken.net>
Message-ID: <20020518032754.GF90@fullfactor.com>

On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> Hello:
> 
> Ok, please excuse my ignorance, but I'm trying to move three sites 
> over to mod_python from php and I'm having some trouble figuring what 
> is the 'proper' way to proceed. I have mod_python installed and 
> working, however, I'm not familiar with the handler concept (yes, I 
> RTFM) and am trying to decide what to do with it. Should I have 
> handler dealing with everything in my dirs, while passing off content 
> generation to methods within personal modules? What is the role of 
> mod_python.publisher. I would appreciate any help I can get - URLs 
> are welcome. I've done the google searches, though, and haven't come 
> across anytrhing about how people actually structure their sites. I 
> dont' just want to hack something together - as I plan to leave most 
> site maintenance to a new employee
> :-).

Well, I'm not sure how closely my experiences mirror those of other 
mod_python developers, but I can try to give you some insight. (I spent 
about two years writing almost exclusively in PHP, and am now adjusting 
to mod_python)

The handler concept is by far the biggest difference between the two 
environments. A PHP script typically resides 'at' a specific URL, and 
only services requests for that URL. A mod_python handler, in contrast, 
becomes part of the web server, and handles requests whenever Apache 
gives them to it.

To be a little clearer, the way I will usually install a handler is to 
include it within an Apache <Location> directive. For example, I am 
writing a user-management module, and I want it to be mounted at 
http://mysite.com/users, so I set up Apache like this:

  <Location /users>
    SetHandler python-program
    PythonPath "sys.path+['/usr/local/lib/site_apps']"
    PythonHandler userinfo
  </Location>

This means that now my python module (at 
/usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
request to a URL which begins with "/users". 

The first thing that userinfo.py does is analyse the URL of the request 
to see exactly what was requested. If it is just "/users/", it displays 
a list of users. If it is "/users/showuser/ian", then it looks up the 
user record for 'ian' and displays that record. If it is 
"/users/no-such-page" then it returns apache.DECLINED, and Apache 
handles the 404 error.

I can also distinguish between GET and POST requests by examining the 
req.method variable. If the request is a GET to 
"/users/deleteuser/ian", then userinfo.py will display a confirmation 
page. If it is a POST to that same URL, it will read the POST data, 
look for a confirmation, and delete the user.

Most of my handlers are designed in this fashion, as one main python 
module installed under a base URL, which defines a "URL-space". The 
main module uses import statements to access all of the libraries it 
needs (database access, user record class, string, cgi, etc.) to do its
work.


If you want to look for other resources on application design with 
mod_python, try searching for information on mod_perl. It's the closest 
thing I have found to mod_python, as they both act as scripting-
language interfaces to the Apache C API. O'Reilly's book "Writing 
Apache Modules with Perl and C" has been an invaluable resource for me. 
Also, once you understand how the Apache API works, the mod_python 
documentation becomes a much more useful tool.


If your goal is just to convert your applications from PHP to the 
Python language, then you may want to look at the Publisher handler 
which Grisha has supplied with mod_python. It allows you to use Python 
scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
people on this list seem to be using it exclusively. In that case, the 
publisher handler becomes the default handler for your entire site. It 
deals with every request that comes in by looking for a Python module 
with the appropriate name in the right directory, and passing it 
parameters based on the request. (This is actually completely backwards 
to the way PHP works, but the effect is the same -- you believe that 
you are calling the Python script directly from the URL.)


I hope this answers at least some of your questions; feel free to ask 
more if I've just made things more confusing :)


Ian
<ian@veryfresh.com>


From s13361562 at bach.sun.ac.za  Sat May 18 11:54:17 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] Getting 404's ...
Message-ID: <20020518095417.GA27377@vervet.localnet>

Often, after loading a number of pages, including one with __auth__
method, from two different directories:

<Directory /var/www>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

<Directory /var/www/newwebsite>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

I sometimes get 404's. Alternating. I.e. I hit refresh, continually on
the same page, then it is sometimes 404's, sometimes it works.
Restarting the apache server usually results in it working great for a
while at least. How can I debug this, throw a bunch of prints in
publisher.py? Do prints show up in error.log though?

I have reason to believe that this only starts going haywire after I've
viewed some things in the newwebsite directory. This is in fact a "newer
version" of the things in the other. Might it be confusing the two? How
exactly does mod_python work, does loaded modules remain loaded, i.e.
they only get loaded once? (Can one have global variables that will then
maintain their value between page requests?)

Thanks,
Hugo van der Merwe

From Mateusz.Korniak at ant.gliwice.pl  Sat May 18 12:30:14 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] How te send many cookies using one request ?
Message-ID: <200205181030.g4IAUJs76544@eden.ispol.com>

I tried:
1) # multiple value cookie
	req.headers_out["Set-Cookie"] = user.out_cookie().output("") 
	
2) #many single value cookies		
	for cookie in user.out_cookies():
		req.headers_out["Set-Cookie"] = cookie.output("")

both sends only one Set-Cookie header with one value :(

TIA 
-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From stony8 at gmx.de  Sat May 18 15:46:33 2002
From: stony8 at gmx.de (Alexander Steinert)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518154633.B1282@tyche.svt.tu-harburg.de>

> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
[Very nice description of an request handling example snipped ...]

I do it in a similar fashion:

Tail of /etc/apache/access.conf:

    # ddd is our BASE directory.
    <Directory /var/www/ddd>
	RewriteEngine On
	# Redirect requests for BASE/ externally to the german start page.
	RewriteRule "^$" /ddd/de [L,R]
    </Directory>
    # Identify requests for dynamic wdps content by URL pattern. Examples:
    # http://host/ddd/de
    # http://host/ddd/en
    # http://host/ddd/de/ACTION
    # http://host/ddd/de-SESSIONID/ACTION
    <LocationMatch ^/ddd/[a-z]{2}($|(-[0-9a-f]{40})?/)>
	PythonPath "sys.path + ['/usr/local/lib/wdps/python']"
	SetHandler python-program
	PythonHandler wdps.ui.web.handlers
	PythonDebug On
    </LocationMatch>

ACTION can be:

    cancel_order
    change_constants
    change_document_types
    change_groups
    change_languages
    change_person
    change_study_programs
    delete_person
    enter_payment
    enter_pickup
    help
    quit_session
    register_person
    search_person
    show_changes
    show_document_types
    show_languages
    show_order_items
    show_orders
    show_overview
    show_person
    show_postings
    show_startpage
    show_study_programs
    start_session
    ...

For each ACTION I have a class, e.g. Start_session, which is a subclass
of Action, where common behaviour (session_id checking, argument type
checking) is defined.

Originally I started with the Publisher handler, but now am very
satisfied with my OO approach.

I might publish my code (it's not ready) if you want more information.

HTH

Stony


From grisha at modpython.org  Sat May 18 11:17:12 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:45 2004
Subject: [mod_python] How te send many cookies using one request ?
In-Reply-To: <200205181030.g4IAUJs76544@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205181115550.78680-100000@localhost>

headers_out (as any mod_python table object) has an add() method which
will let you set multiple values with the same key

grisha

On Sat, 18 May 2002, Mateusz Korniak wrote:

> I tried:
> 1) # multiple value cookie
> 	req.headers_out["Set-Cookie"] = user.out_cookie().output("")
>
> 2) #many single value cookies
> 	for cookie in user.out_cookies():
> 		req.headers_out["Set-Cookie"] = cookie.output("")
>
> both sends only one Set-Cookie header with one value :(
>
> TIA
> --
> Mateusz Korniak
> ANT sp z o.o. http://www.ant.gliwice.pl/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From jwm-mod_python at sentinelchicken.net  Sat May 18 14:45:22 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] THANKS FOR THE HELP
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518144522.A26028@samson.sentinelchicken.net>

Thanks everyone for the help. It has been very useful.

Thanks again

Jason












On Fri, May 17, 2002 at 08:27:54PM -0700, Ian Clelland wrote:
> On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> > Hello:
> > 
> > Ok, please excuse my ignorance, but I'm trying to move three sites 
> > over to mod_python from php and I'm having some trouble figuring what 
> > is the 'proper' way to proceed. I have mod_python installed and 
> > working, however, I'm not familiar with the handler concept (yes, I 
> > RTFM) and am trying to decide what to do with it. Should I have 
> > handler dealing with everything in my dirs, while passing off content 
> > generation to methods within personal modules? What is the role of 
> > mod_python.publisher. I would appreciate any help I can get - URLs 
> > are welcome. I've done the google searches, though, and haven't come 
> > across anytrhing about how people actually structure their sites. I 
> > dont' just want to hack something together - as I plan to leave most 
> > site maintenance to a new employee
> > :-).
> 
> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
> 
> The handler concept is by far the biggest difference between the two 
> environments. A PHP script typically resides 'at' a specific URL, and 
> only services requests for that URL. A mod_python handler, in contrast, 
> becomes part of the web server, and handles requests whenever Apache 
> gives them to it.
> 
> To be a little clearer, the way I will usually install a handler is to 
> include it within an Apache <Location> directive. For example, I am 
> writing a user-management module, and I want it to be mounted at 
> http://mysite.com/users, so I set up Apache like this:
> 
>   <Location /users>
>     SetHandler python-program
>     PythonPath "sys.path+['/usr/local/lib/site_apps']"
>     PythonHandler userinfo
>   </Location>
> 
> This means that now my python module (at 
> /usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
> request to a URL which begins with "/users". 
> 
> The first thing that userinfo.py does is analyse the URL of the request 
> to see exactly what was requested. If it is just "/users/", it displays 
> a list of users. If it is "/users/showuser/ian", then it looks up the 
> user record for 'ian' and displays that record. If it is 
> "/users/no-such-page" then it returns apache.DECLINED, and Apache 
> handles the 404 error.
> 
> I can also distinguish between GET and POST requests by examining the 
> req.method variable. If the request is a GET to 
> "/users/deleteuser/ian", then userinfo.py will display a confirmation 
> page. If it is a POST to that same URL, it will read the POST data, 
> look for a confirmation, and delete the user.
> 
> Most of my handlers are designed in this fashion, as one main python 
> module installed under a base URL, which defines a "URL-space". The 
> main module uses import statements to access all of the libraries it 
> needs (database access, user record class, string, cgi, etc.) to do its
> work.
> 
> 
> If you want to look for other resources on application design with 
> mod_python, try searching for information on mod_perl. It's the closest 
> thing I have found to mod_python, as they both act as scripting-
> language interfaces to the Apache C API. O'Reilly's book "Writing 
> Apache Modules with Perl and C" has been an invaluable resource for me. 
> Also, once you understand how the Apache API works, the mod_python 
> documentation becomes a much more useful tool.
> 
> 
> If your goal is just to convert your applications from PHP to the 
> Python language, then you may want to look at the Publisher handler 
> which Grisha has supplied with mod_python. It allows you to use Python 
> scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
> people on this list seem to be using it exclusively. In that case, the 
> publisher handler becomes the default handler for your entire site. It 
> deals with every request that comes in by looking for a Python module 
> with the appropriate name in the right directory, and passing it 
> parameters based on the request. (This is actually completely backwards 
> to the way PHP works, but the effect is the same -- you believe that 
> you are calling the Python script directly from the URL.)
> 
> 
> I hope this answers at least some of your questions; feel free to ask 
> more if I've just made things more confusing :)
> 
> 
> Ian
> <ian@veryfresh.com>
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From infomailsys at mail.ru  Mon May 20 12:16:32 2002
From: infomailsys at mail.ru (New Banner Systems)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Re: Your Logo
Message-ID: <200205200810.g4K8AZs98506@eden.ispol.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment.htm
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 23464 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment.gif
From gbeasley at tsa.ac.za  Mon May 20 11:53:41 2002
From: gbeasley at tsa.ac.za (Grant Beasley)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
Message-ID: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>

Hi

I have a function that tries to check whether its input is a dictionary (It
behaves differently depending on the input type). To do this, it firstly
checks for objects whose type is equal to type({}) and secondly for objects
which are instances of UserDict. The FieldStorage class matches neither of
these, despite the fact that it behaves like a dictionary (mappable object).
Am I using the wrong test, or this this a problem with the FieldStorage
class that it should conform to the above?

Of course, I could use a try block to attempt to access the object as a
dictionary, but this seems inefficient (I'd rather check explicitly).

Thanks
Grant Beasley


From s_lott at yahoo.com  Mon May 20 04:23:22 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
In-Reply-To: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>
Message-ID: <20020520112322.34986.qmail@web9608.mail.yahoo.com>

Yes, the FieldStorage class is a unique class, not derived from
UserDict.  It has dictionary-like methods.  

You want to check your argument, arg, with something like this

if isclass(arg,FieldStorage)

--- Grant Beasley <gbeasley@tsa.ac.za> wrote:
> Hi
> 
> I have a function that tries to check whether its input is a
> dictionary (It
> behaves differently depending on the input type). To do this,
> it firstly
> checks for objects whose type is equal to type({}) and
> secondly for objects
> which are instances of UserDict. The FieldStorage class
> matches neither of
> these, despite the fact that it behaves like a dictionary
> (mappable object).
> Am I using the wrong test, or this this a problem with the
> FieldStorage
> class that it should conform to the above?
> 
> Of course, I could use a try block to attempt to access the
> object as a
> dictionary, but this seems inefficient (I'd rather check
> explicitly).
> 
> Thanks
> Grant Beasley
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
LAUNCH - Your Yahoo! Music Experience
http://launch.yahoo.com

From colet at code-energy.com  Mon May 20 09:08:45 2002
From: colet at code-energy.com (Cole Tuininga)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] __doc__ entries
Message-ID: <1021900129.1025.37.camel@bobthesnake>

I'm very new to mod_python, so I hope you'll have patience with me.  8)

I have mod_python set up to use index.py as its PythonHandler.  The idea
is that I'm going to have the handler routine scan through all other .py
files in the directory, pull the description of the class in each file,
and use that as a link.

For instance, I might have a changePassword.py with the docstring:

"""Change Password: Click here to change your password"""

If this were in a class called changePassword, I would expect to be able
to do the following:

import changePassword

def handler( req ):
	req.write( changePassword.changePassword.__doc__ )


However, this gives me an error calling the value to req.write a
"None".  However, if I essentially do the same thing within the python
interpreter fired up from the shell, it seems to work.  

Help?  Thanks in advance.

-- 
"The net treats censorship as a malfunction and reroutes around it."
 -John Gilmore

Cole Tuininga
Lead Developer
Code Energy, Inc
colet@code-energy.com
PGP Key ID: 0x43E5755D



From s13361562 at bach.sun.ac.za  Mon May 20 21:05:31 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Serving files via mod_python
Message-ID: <20020520190531.GA20265@vervet.localnet>

Hello,

I want to use mod_python to control what files can be downloaded by
whom, and to log such file transfers (with my own code). One possibility
is also to convert some files' contents on the fly.

I am currently using:

f = open(filename, "r")
while 1:
  data = f.read(1048576)
  if data = "": break
  req.write(data)

It seems to work fine. I just wonder if this is bad (performance wise, I
wonder what the best "size" would be, instead of 1M). These are
potentially *large* files I'm dealing with, things like cd images. At a
later date I guess I'll have to figure out how to do download resuming,
etc. I'm sure Apache does a better job of this, maybe I should rather
let Apache handle it, how can I do this while controlling it all from
modPython? I guess I could just define a PythonAuthenHandler, and let
Apache do the actual serving? Does the PythonAuthenHandler have full
access to just about everything a normal handler would? (URL, etc.)

If there was some way to give Apache a file handle or something like
that, from which it should serve the data...

Thanks,
Hugo van der Merwe

From Hans.Yandle at cingular.com  Tue May 21 10:42:11 2002
From: Hans.Yandle at cingular.com (Yandle, Hans)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] CGI Environment Specs
Message-ID: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>

I am looking into the possibility of using mod_python to accelerate and/or
replace some of my cgi scripts. However, I lack one last detail before I can
attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
variable. After reading the docs, I made the following script using the
mod_python.publisher handler:

from mod_python import apache

def commonenv(req):
    req.content_type = "text/html"
    req.send_http_header()
    req.add_common_vars()
    s = """<html><head><title>Mod_Python Common Environment
Variables</title></head>
           <body><p
align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
    for parameter in req.subprocess_env.keys():
        s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
req.subprocess_env[parameter])
    s = s + "</table></p></body></html>"
    return s

When it is executed, the HTTP_REFERER variable is missing. If anyone knows
how to accomplish this, I would be grateful.

Hans


From sam at webslingerZ.com  Tue May 21 13:25:17 2002
From: sam at webslingerZ.com (Sam Brauer)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <Pine.LNX.4.44.0205211322510.2120-100000@localhost.localdomain>

Did you hit the script directly (by typing the location into your 
browser)?  If so, that variable won't be set.
Try creating a test html page with a link to your script, then hit the 
script by following the link.  In that case, the variable should contain 
the url of your test html page.

- Sam

-- 
Sam Brauer
Systems Programmer
sam@webslingerZ.com

On Tue, 21 May 2002, Yandle, Hans wrote:

> I am looking into the possibility of using mod_python to accelerate and/or
> replace some of my cgi scripts. However, I lack one last detail before I can
> attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
> variable. After reading the docs, I made the following script using the
> mod_python.publisher handler:
> 
> from mod_python import apache
> 
> def commonenv(req):
>     req.content_type = "text/html"
>     req.send_http_header()
>     req.add_common_vars()
>     s = """<html><head><title>Mod_Python Common Environment
> Variables</title></head>
>            <body><p
> align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
>     for parameter in req.subprocess_env.keys():
>         s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
> req.subprocess_env[parameter])
>     s = s + "</table></p></body></html>"
>     return s
> 
> When it is executed, the HTTP_REFERER variable is missing. If anyone knows
> how to accomplish this, I would be grateful.
> 
> Hans
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From ian at veryfresh.com  Tue May 21 16:01:49 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020520190531.GA20265@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet>
Message-ID: <20020521230149.GG90@fullfactor.com>

On Mon, May 20, 2002 at 09:05:31PM +0200, Hugo van der Merwe wrote:
> Hello,
> 
> I want to use mod_python to control what files can be downloaded by
> whom, and to log such file transfers (with my own code). One possibility
> is also to convert some files' contents on the fly.
> 
> I am currently using:
> 
> f = open(filename, "r")
> while 1:
>   data = f.read(1048576)
>   if data = "": break
>   req.write(data)
> 
> It seems to work fine. I just wonder if this is bad (performance wise, I
> wonder what the best "size" would be, instead of 1M). These are
> potentially *large* files I'm dealing with, things like cd images.

Transferring 1MB at a time is probably about as efficient as you can 
get; of course, you'd need to do some proper benchmarking to be sure. I 
believe that Apache defaults to Chunked transfer-encoding, so every 
time you call req.write(), the data goes out immediately, with about 10 
bytes of overhead (actually ln(n)/4+4 bytes).

Actually, most of your overhead will be in TCP and IP encoding, as each 
call to write() will probably result in about 600 IP packets being sent 
(and acknowledged), and there's not much you can do about that.

> At a
> later date I guess I'll have to figure out how to do download resuming,
> etc. I'm sure Apache does a better job of this, maybe I should rather
> let Apache handle it,

Apache will only handle Range requests (which are what you need for 
download resuming) for static files. If you are using mod_python to 
serve the content, then you will have to handle the Range headers 
yourself.

> how can I do this while controlling it all from
> modPython? I guess I could just define a PythonAuthenHandler, and let
> Apache do the actual serving? Does the PythonAuthenHandler have full
> access to just about everything a normal handler would? (URL, etc.)

That's a good way to do it, assuming that the files are already on the 
filesystem, and not being stored in a database or ripped in realtime. 
What you are looking for, though, is a PythonAuthzHandler 
(authorization handler). This is the handler which gets called *after* 
the user's name and password have been verified, (by a .htpasswd file 
or some other method,) and decides whether that user is allowed to 
download that file.

> 
> If there was some way to give Apache a file handle or something like
> that, from which it should serve the data...

You don't even need to do that; all you have to do is install the 
PythonAuthzHandler, and let Apache handle serving the actual content. 
The AuthzHandler will act like a 'filter' on an otherwise normal 
request/response.

Hope that helps,

Ian
<ian@veryfresh.com>

From johannes at erdfelt.com  Tue May 21 19:12:44 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>; from ian@veryfresh.com on Tue, May 21, 2002 at 04:01:49PM -0700
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020521191243.I2645@sventech.com>

On Tue, May 21, 2002, Ian Clelland <ian@veryfresh.com> wrote:
> > how can I do this while controlling it all from
> > modPython? I guess I could just define a PythonAuthenHandler, and let
> > Apache do the actual serving? Does the PythonAuthenHandler have full
> > access to just about everything a normal handler would? (URL, etc.)
> 
> That's a good way to do it, assuming that the files are already on the 
> filesystem, and not being stored in a database or ripped in realtime. 
> What you are looking for, though, is a PythonAuthzHandler 
> (authorization handler). This is the handler which gets called *after* 
> the user's name and password have been verified, (by a .htpasswd file 
> or some other method,) and decides whether that user is allowed to 
> download that file.
> 
> > If there was some way to give Apache a file handle or something like
> > that, from which it should serve the data...
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.

Is this new? It's not in the documentation:

http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

JE


From ian at veryfresh.com  Tue May 21 16:54:18 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521191243.I2645@sventech.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com> <20020521191243.I2645@sventech.com>
Message-ID: <20020521235418.GH90@fullfactor.com>

On Tue, May 21, 2002 at 07:12:44PM -0400, Johannes Erdfelt wrote:
> > You don't even need to do that; all you have to do is install the 
> > PythonAuthzHandler, and let Apache handle serving the actual content. 
> > The AuthzHandler will act like a 'filter' on an otherwise normal 
> > request/response.
> 
> Is this new? It's not in the documentation:
> 
> http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

It does seem conspicuously absent from the online documentation; I 
don't think that's deliberate, though. It appears to be fully supported 
by the code (it's in mod_python.c and requestobject.c) and I've been 
using it with no problems for a while now.

It is mentioned in an example on this page: 
http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers-syn.html

(Grisha? I think this was brought up about 6 weeks ago as well -- any 
 updates? :)

Ian
<ian@veryfresh.com>

From matt at proweb.co.uk  Thu May 23 16:30:43 2002
From: matt at proweb.co.uk (Matt H)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
References: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <20020523163043.744528d8.matt@proweb.co.uk>

this works ->

def authenhandler(req):
        try :
                referer = req.headers_in['referer']
        except :
                referer = ""
        req.subprocess_env['HTTP_REFERER'] = referer.lower()

        pwd = req.get_basic_auth_pw()
        usr = req.connection.user

        if pwd=="bar" and usr=="f00" :
                return apache.OK
        return apache.HTTP_UNAUTHORIZED

From pfrazao at ualg.pt  Thu May 23 17:41:30 2002
From: pfrazao at ualg.pt (Pedro Miguel Frazao Fernandes Ferreira)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] mod_python and python2.2
Message-ID: <3CED1BBA.4060804@ualg.pt>

Hi All,

First:
Is there any mod_python version known to work with python2.2 ?

Second:
mod_python 2.7.6 compiled ok with python2.2 on a debian (woody) distribution.
Problem is that it fails on the application when handling a form with submited 
files:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

   File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 193, in 
Dispatch
     result = object(req)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 104, 
in handler
     val = File(field)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 308, 
in __init__
     for m in field.file.__methods__:

AttributeError: 'file' object has no attribute '__methods__'

Anyone knows a solution ? If yes will it be safe to use 2.7.6 compiled with 
python2.2 ?

Thanks for any help.
-- 
----------------------------------------------------------------------
Pedro Miguel Frazao Fernandes Ferreira
Universidade do Algarve
Faculdade de Ciencias e Tecnologia
Campus de Gambelas
8000-117 Faro
Portugal
Tel./Fax:  (+351) 289 800950 / 289 819403
http://w3.ualg.pt/~pfrazao


From bob at redivi.com  Thu May 23 15:17:12 2002
From: bob at redivi.com (Bob Ippolito)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] mod_python and python2.2
In-Reply-To: <3CED1BBA.4060804@ualg.pt>
Message-ID: <AF2FCE2C-6E81-11D6-A4E2-0003938210D6@redivi.com>

try dir(field.file) instead of field.file.__methods__

On Thursday, May 23, 2002, at 12:41 PM, Pedro Miguel Frazao Fernandes 
Ferreira wrote:

> AttributeError: 'file' object has no attribute '__methods__'


From s13361562 at bach.sun.ac.za  Thu May 23 22:34:33 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020523201546.GA29705@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet> <20020520200902.GB1048@eleanor.internal.ywlcs.org> <20020523201546.GA29705@vervet.localnet>
Message-ID: <20020523203433.GA30515@vervet.localnet>

> > Build a TransHandler which checks permissions and whatnot, then either (a)
> > calls add_handler with a pythonhandler which will display an error message,
> > menu, etc. or (b) produces the filename of the file that Apache should send
> > along.
> 
> Sorry about asking about this here again, I had a good and wide search
> to find info, but I'm too pressed for time now, and so far searches
> haven't helped me on this last issue:
> 
> I've got TransHandler working nicely, at least, until I don't want it to
> do it's thing: how do I get the "default behaviour", once TransHandler
> determines that it's not a URL that it should handle? I want it to then
> go via the "usual, standard" routes... simply not touching req.filename
> leaves it as "/", I guess I could just prepend /var/www to the
> unparsed_uri, will apache then do it's alias thing, etc? It still
> doesn't seem like the neatest solution though.

Replying to myself ... but I found a little more info, and I want to
send this to the list as well.

I found the following:

"""
apache.DECLINED, meaning this handler refused to handle this phase of
the requestand Apache needs to look for another handler. 
"""

Returning this seems to "work" in some sense, I get the following 404
now:

Not Found The requested URL /show.py/norm was not found on this server.

If I do not have the PythonTransHandler, my "normal" PythonHandler takes
care of this...

Thanks,
Hugo van der Merwe

From dustin at ywlcs.org  Sat May 25 21:32:27 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020526023227.GB25701@eleanor.internal.ywlcs.org>

On Tue, May 21, 2002 at 04:01:49PM -0700, Ian Clelland wrote:
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.
> 

I know this is an old thread, but I might point out that the new 'filters' in
Apache 2.0 will allow this sort of filtering and much, much more.  I'm
eagerly awaiting a stable release of mod_python for httpd-2.0 (well, that and
I need a working PHP).

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May 25 21:40:04 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Apache Handler docs
Message-ID: <20020526024004.GC25701@eleanor.internal.ywlcs.org>

I'm interested in gaining a full understanding of how Apache handlers work.
While I've been working (quite successfully) with mod_python for a while now,
there are still some behaviors that surprise me, because I don't really
understand what Apache's doing under the hood.  The Shambala API notes are
somewhat helpful, but really nothing more than notes -- they see out of date
and leave many of the details unspecified.

So short of reading all of the Apache main and core source (I've read a bit
of it already), does anyone have any pointers to good docs for these sorts of
things?

Thanks!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From grisha at modpython.org  Sat May 25 23:35:53 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Apache Handler docs
In-Reply-To: <20020526024004.GC25701@eleanor.internal.ywlcs.org>
Message-ID: <Pine.BSF.4.32.0205252332440.72278-100000@localhost>

The "Writing Apache modules with mod_perl and C" O'Reilly book is probably
the best reference of Apache internals, but it doesn't cover everything,
especially Apache 2.0 wich is a different beast altogether when it comes
to handlers (or just about anything else really). I've had to read quite a
bit of code when writing mod_python.

Grisha

On Sat, 25 May 2002, Dustin Mitchell wrote:

> I'm interested in gaining a full understanding of how Apache handlers work.
> While I've been working (quite successfully) with mod_python for a while now,
> there are still some behaviors that surprise me, because I don't really
> understand what Apache's doing under the hood.  The Shambala API notes are
> somewhat helpful, but really nothing more than notes -- they see out of date
> and leave many of the details unspecified.
>
> So short of reading all of the Apache main and core source (I've read a bit
> of it already), does anyone have any pointers to good docs for these sorts of
> things?
>
> Thanks!
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From john.garberson at nexos.com  Mon May 27 16:57:52 2002
From: john.garberson at nexos.com (John D. Garberson)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] Sub-request/Internal redirect questions
Message-ID: <200205271457.QAA03404@ws2.nexos.com>

Hi,

I'm new to mod_python and am trying to get a feel for it and the 
Apache API by duplicating the modules that Stein and MacEachern
show in their very nice Apache modules book, but of course using
mod_python instead of mod_perl or C.

A technique that seems to come up fairly often after the first easy
examples is to use sub-requests and redirects. These seem to be generated
by the request object's lookup_file, lookup_uri or internal_redirect
methods.  I don't find any mention of these methods in the mod_python
documentation, and it sort of looks like they haven't been implemented.
But then I've found some other stuff that isn't documented just poking
around in the module's C and python source code, and maybe I'm missing
something obvious.  Also, looking back through the list archives for the
last year or so, I've found some references to work-arounds for the re-
direct stuff.  Maybe people with more experience know other such tricks?

Can anyone give me a tip on how a sub-request (or for that matter, an
internal redirect without using work-arounds) is generated using
mod_python, or what methods can be used to replace this functionality?

Thanks for any ideas.


     John Garberson                             nexos ag 
     john.garberson@nexos.com                   Frobenstrasse 66 
                                                CH-4053 Basel, Switzerland
                                                Tel. 41 61 283 55 03
                                                Fax  41 61 283 55 01

From gbenson at redhat.com  Mon May 27 19:02:56 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] [PATCH] httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205271900230.27285-400000@slippy.rat>


Hi all,

The attached patches to HEAD will allow you to compile and run mod_python
with httpd-2.0.36. There are still a bunch of compiler warnings which I
haven't fixed (but intend to), but it seems to run quite nicely (although
my minimal mod_python knowledge probably isn't stressing it much).

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
An allocator-passing mechanism was added throughout the bucket brigades API

Index: src/filterobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/filterobject.c,v
retrieving revision 1.4
diff -u -r1.4 filterobject.c
--- src/filterobject.c	4 Mar 2002 21:19:17 -0000	1.4
+++ src/filterobject.c	27 May 2002 11:18:30 -0000
@@ -115,6 +115,7 @@
 static PyObject *_filter_read(filterobject *self, PyObject *args, int readline)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     apr_bucket *b;
     long bytes_read;
     PyObject *result;
@@ -135,7 +136,8 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_in) {
-	    self->bb_in = apr_brigade_create(self->f->r->pool);
+	    self->bb_in = apr_brigade_create(self->f->r->pool,
+					     c->bucket_alloc);
 	}
 
 	Py_BEGIN_ALLOW_THREADS;
@@ -290,6 +292,7 @@
 static PyObject *filter_write(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     char *buff;
     int len;
     apr_bucket *b;
@@ -315,10 +318,12 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_out) {
-	    self->bb_out = apr_brigade_create(self->f->r->pool);
+	    self->bb_out = apr_brigade_create(self->f->r->pool,
+					      c->bucket_alloc);
 	}
 	
-	b = apr_bucket_pool_create(buff, len, self->f->r->pool);
+	b = apr_bucket_pool_create(buff, len, self->f->r->pool,
+				   c->bucket_alloc);
 	APR_BRIGADE_INSERT_TAIL(self->bb_out, b);
 	
 	self->bytes_written += len;
@@ -337,12 +342,15 @@
 static PyObject *filter_flush(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     /* does the output brigade exist? */
     if (!self->bb_out) {
-	self->bb_out = apr_brigade_create(self->f->r->pool);
+	self->bb_out = apr_brigade_create(self->f->r->pool, c->bucket_alloc);
     }
 
-    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_flush_create());
+    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+			    apr_bucket_flush_create(c->bucket_alloc));
 
     if (ap_pass_brigade(self->f->next, self->bb_out) != APR_SUCCESS) {
 	PyErr_SetString(PyExc_IOError, "Flush failed.");
@@ -363,16 +371,20 @@
 static PyObject *filter_close(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     if (! self->closed) {
 
 	if (self->bytes_written) {
 
 	    /* does the output brigade exist? */
 	    if (!self->bb_out) {
-		self->bb_out = apr_brigade_create(self->f->r->pool);
+		self->bb_out = apr_brigade_create(self->f->r->pool,
+						  c->bucket_alloc);
 	    }
 
-	    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_eos_create());
+	    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+				    apr_bucket_eos_create(c->bucket_alloc));
 	
 	    if (! self->is_input) {
 		ap_pass_brigade(self->f->next, self->bb_out);
-------------- next part --------------
Various AP_FTYPE_* constants were changed in 2.0.34

Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	27 May 2002 10:50:15 -0000
@@ -1467,7 +1467,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_input_filter(name, python_input_filter, AP_FTYPE_CONTENT);
+    ap_register_input_filter(name, python_input_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
@@ -1491,7 +1491,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_output_filter(name, python_output_filter, AP_FTYPE_CONTENT);
+    ap_register_output_filter(name, python_output_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
-------------- next part --------------
ap_restart_time was moved into the scoreboard global area.

Index: src/serverobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/serverobject.c,v
retrieving revision 1.8
diff -u -r1.8 serverobject.c
--- src/serverobject.c	9 Sep 2001 00:25:37 -0000	1.8
+++ src/serverobject.c	27 May 2002 10:59:54 -0000
@@ -241,7 +241,7 @@
 	return PyInt_FromLong((long)ap_my_generation);
     }
     else if (strcmp(name, "restart_time") == 0) {
-	return PyInt_FromLong((long)ap_restart_time);
+	return PyInt_FromLong((long)ap_scoreboard_image->global->restart_time);
     }
     else
 	return PyMember_Get((char *)self->server, server_memberlist, name);
From gbenson at redhat.com  Tue May 28 12:31:05 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>


Hi,

The attached patches fix most of the compiler warnings when building
against httpd-2.0.36: some const correctness stuff, and a problem with
conn.remote_addr. The rest of the problems stem from the fact that the
input filter API changed in 2.0.31, but I currently have no idea how to
fix that.

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
apr_table_elts() returns const apr_array_header_t *

Index: src/tableobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/tableobject.c,v
retrieving revision 1.8
diff -u -r1.8 tableobject.c
--- src/tableobject.c	28 Nov 2001 05:31:48 -0000	1.8
+++ src/tableobject.c	28 May 2002 11:12:59 -0000
@@ -196,7 +196,7 @@
 {
 
     PyObject *v;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i, j;
 
@@ -303,7 +303,7 @@
 static PyObject * table_repr(tableobject *self)
 {
     PyObject *s;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i;
 
Index: src/requestobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/requestobject.c,v
retrieving revision 1.15
diff -u -r1.15 requestobject.c
--- src/requestobject.c	28 Nov 2001 05:31:48 -0000	1.15
+++ src/requestobject.c	28 May 2002 11:13:04 -0000
@@ -268,7 +268,7 @@
 
     if (apr_table_get(self->request_rec->notes, "py_more_directives")) {
 
-	apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
+	const apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
 	apr_table_entry_t *elts = (apr_table_entry_t *)ah->elts;
 	int i = ah->nelts;
 
Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	28 May 2002 11:13:13 -0000
@@ -1545,7 +1545,7 @@
 static void PythonChildInitHandler(apr_pool_t *p, server_rec *s)
 {
 
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     PyObject *sys, *path, *dirstr;
     interpreterdata *idata;
-------------- next part --------------
Make conn.remote_addr work properly

Index: src/connobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/connobject.c,v
retrieving revision 1.7
diff -u -r1.7 connobject.c
--- src/connobject.c	18 Aug 2001 22:43:45 -0000	1.7
+++ src/connobject.c	28 May 2002 11:11:58 -0000
@@ -194,8 +194,7 @@
 	return PyInt_FromLong(self->conn->double_reverse);
     }
     else if (strcmp(name, "remote_addr") == 0) {
-	/* XXX this needs to be compatible with apr_sockaddr_t */
-	return makesockaddr(&(self->conn->remote_addr));
+	return makesockaddr(&self->conn->remote_addr->sa.sin);
     }
     else if (strcmp(name, "notes") == 0) {
 	Py_INCREF(self->notes);
From grisha at modpython.org  Tue May 28 09:03:46 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
In-Reply-To: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>
Message-ID: <Pine.BSF.4.32.0205280901430.98266-100000@localhost>

Thanks Gary - I'll review and add the patches into HEAD, but it proboably
won't happen a day or two - I'll be very busy today and tomorrow.

Grisha

On Tue, 28 May 2002, Gary Benson wrote:

>
> Hi,
>
> The attached patches fix most of the compiler warnings when building
> against httpd-2.0.36: some const correctness stuff, and a problem with
> conn.remote_addr. The rest of the problems stem from the fact that the
> input filter API changed in 2.0.31, but I currently have no idea how to
> fix that.
>
> Cheers,
> Gary
>
> [ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
>


From mbp at samba.org  Wed May 29 18:24:40 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] [patch] make autoreload more useful
Message-ID: <20020529082436.GK25763@samba.org>

Here is a patch intended to make automatic reload work "properly" in
mod_python: if you change *any* Python source file, then all of them
will be reloaded.  

I think this basically gives the behaviour developers would
intuitively expect: you can just go ahead and edit and the server will
reload as necessary without you needing to remember to kill/restart
Apache.  So the development experience is as immediate as CGI or PHP.

You might ask why it's necessary to reload everything, and not just
the changed module.  The reason is that some other module might still
hold a reference to an object or function inside the changed module,
and that object will still refer to the old code.  

Indeed this will still be a problem if you put a reference to your
code into sys, or one of the other modules that is not reloaded.  I
can't see a clean way to handle that without restarting the whole
interpreter, but I suspect it's a not a very common case.

Of course stat()ing every loaded python file on every mod_python
request has a small performance hit, but I don't think it will be a
problem during development, and the whole thing should be turned off
in production.

I owe a debt to the PyUnit developers for documenting their solution
and therefore saving me a couple of false starts.

The patch is rough as anything and badly needs to be cleaned up and
tested more thoroughly before it being merged or used in production.
(The reload stuff really belongs in a separate module.)  I thought I'd
send it out and see if anyone had any comments, and in particular if
Grisha would take it in principle.  

I've tested this a bit on python2.1 and it seems to work well.  I
might inadvertently have bugs on 1.5, but they can easily be cleaned
up.

-- 
Martin 
tab tab ding!





--- /home/mbp/work/mod_python-2.7.8/lib/python/mod_python/apache.py	Sat Apr 20 04:20:40 2002
+++ /usr/lib/python2.1/site-packages/mod_python/apache.py	Wed May 29 18:03:08 2002
@@ -53,6 +53,7 @@
 import imp
 import types
 import _apache
+import __builtin__
 
 # a small hack to improve PythonPath performance. This
 # variable stores the last PythonPath in raw (unevaled) form.
@@ -62,6 +63,92 @@
 def _cleanup_request(_req):
     _req._Request = None
 
+
+# The idea of rolling back imports comes from Steve Purcell's
+# PyUnit GUI <pyunit.sf.net>, but the implementation is new by Martin Pool.
+
+# The basic idea is that we want to delete everything from sys.modules
+# when the user's code changes, except for system modules.  This is
+# necessary because otherwise one module that has not changed may
+# still be holding references to code objects from a module that has
+# changed.  We have to actually delete them and start again rather
+# than using reload(), because otherwise the first one reloaded may
+# grab references from something that will be reloaded later on.
+
+# Of course this will be a little slow, but it's only used in
+# development so it doesn't really matter.
+_orig_sys_modules = None
+
+def _notice(s, *args):
+    _apache.log_error(s % args, APLOG_NOERRNO|APLOG_NOTICE)
+
+
+def save_orig_modules():
+    global _orig_sys_modules
+    _orig_sys_modules = sys.modules.copy()
+
+
+def check_for_reload(path=None):
+    """Check all non-system modules; if any have changed, reload all"""
+    for module_name, module in sys.modules.items():
+        if _orig_sys_modules.has_key(module_name):
+            continue
+
+        if not module:
+            continue                    # some are None (??)
+
+        file = module.__dict__.get('__file__')
+        oldmtime = module.__dict__.get("__mtime__", 0)
+        if not oldmtime:
+            # If the oldmtime is 0, then it wasn't loaded
+            # through _apache_importer, and so we can't work out if it's
+            # older or not.
+            continue
+
+        mtime = module_mtime(module)
+        # If the file no longer exists, mtime will be 0 and we'll
+        # reload it.
+        if mtime > oldmtime or mtime == 0:
+            _apache.log_error("mod_python: %s has been changed; mtime=%d oldmtime=%d" %
+                              (file, mtime, oldmtime),
+                              APLOG_NOERRNO|APLOG_NOTICE)
+            return reload_user_modules()
+        
+
+def reload_user_modules():
+    """Reload all modules except system modules"""
+    _apache.log_error("mod_python: discard user modules",
+                      APLOG_NOERRNO|APLOG_NOTICE)
+    for module_name in sys.modules.keys():
+        if not _orig_sys_modules.has_key(module_name):
+            del sys.modules[module_name]
+
+
+def _get_sub_module(top_module, module_name):
+    module = top_module
+    for part in string.split(module_name, '.')[1:]:
+        module = getattr(module, part)
+    return module
+
+def _apache_importer(module_name, globals=None, locals=None, fromlist=None):
+    # Just defer to the built-in importer, but annotate the returned module with
+    # its modification time
+    parent_module = _original_import(module_name, globals, locals, fromlist)
+    
+    if '.' in module_name:
+        submodule = _get_sub_module(parent_module, module_name)
+    else:
+        submodule = parent_module
+        
+    if _debug:
+        s = 'mod_python: importing %s got parent %s, sub %s' % (module_name, `parent_module`,
+                                                                `submodule`)
+        _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
+    submodule.__mtime__ = module_mtime(submodule)
+    _notice("submodule mtime is %d" % submodule.__mtime__)
+    return parent_module
+
+
 class Request:
     """ This is a normal Python Class that can be subclassed.
         However, most of its functionality comes from a built-in
@@ -285,6 +372,8 @@
             etb = None
             # we do not return anything
 
+
+
 def import_module(module_name, req=None, path=None):
     """
     Get the module to handle the request. If
@@ -299,52 +388,27 @@
         debug = config.has_key("PythonDebug")
         if config.has_key("PythonAutoReload"):
             autoreload = int(config["PythonAutoReload"])
- 
-    # (Re)import
-    if sys.modules.has_key(module_name):
-        
-        # The module has been imported already
-        module = sys.modules[module_name]
-
-        # but is it in the path?
-        file = module.__dict__.get("__file__")
-        if not file or (path and not os.path.dirname(file) in path):
-                raise SERVER_RETURN, HTTP_NOT_FOUND
-
-        if autoreload:
-            oldmtime = module.__dict__.get("__mtime__", 0)
-            mtime = module_mtime(module)
-        else:
-            mtime, oldmtime = 0, 0
-
-    else:
-        mtime, oldmtime = 0, -1
- 
-    if mtime > oldmtime:
-
-        # Import the module
-        if debug:
-            s = 'mod_python: (Re)importing %s from %s' % (module_name, path)
-            _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
-
-        parts = string.split(module_name, '.')
-        for i in range(len(parts)):
-            f, p, d = imp.find_module(parts[i], path)
-            try:
-                mname = string.join(parts[:i+1], ".")
-                module = imp.load_module(mname, f, p, d)
-            finally:
-                if f: f.close()
-            if hasattr(module, "__path__"):
-                path = module.__path__
 
-        if mtime == 0:
-            mtime = module_mtime(module)
-
-        module.__mtime__ = mtime
- 
+    # mbp -- for debugging
+    ##    _apache.log_error("sys.modules is: %s" % sys.modules,
+    ##                      APLOG_NOERRNO|APLOG_NOTICE)
+
+    if autoreload:
+        # just check *all* modules, and discard non-system modules if
+        # any have changed
+        check_for_reload(path)
+
+    # the __import__ function returns the *top-level module*, not the one
+    # we actually asked for.  after importing, we need to walk down to
+    # get the real thing.
+    _notice("import_module %s" % module_name)
+    top_module = __import__(module_name)
+    _notice("import_module %s got top %s" % (module_name, top_module))
+    module = _get_sub_module(top_module, module_name)
+    _notice("import_module for %s returned %s" % (module_name, module))
     return module
 
+
 def module_mtime(module):
     """Get modification time of module"""
     mtime = 0
@@ -377,6 +441,8 @@
        class passing the request as single argument
     """
 
+    _notice("resolve obj %s in %s" % (object_str, module))
+
     obj = module
 
     for obj_str in  string.split(object_str, '.'):
@@ -609,6 +675,14 @@
     """ 
         This function is called by the server at startup time
     """
+    global _original_import, _debug
+    
+    # keep this in case we want it
+    _original_import = __builtin__.__import__
+    _notice("about to hook importer")
+    __builtin__.__import__ = _apache_importer
+    _notice("importer hooked")
+    _debug = 1
 
     return CallBack()
 
@@ -618,6 +692,14 @@
 parse_qs = _apache.parse_qs
 parse_qsl = _apache.parse_qsl
 
+## Keep track of modules already loaded; anything after this is fair game
+## to be reloaded
+save_orig_modules()
+
+# XXX: We perhaps ought to hook reload() as well to make sure it's
+# consistent, but at the moment I think it does no harm to let it
+# default.
+
 ## Some constants
 
 HTTP_CONTINUE                     = 100
@@ -708,28 +790,4 @@
 REQ_EXIT = "REQ_EXIT"         
 SERVER_RETURN = _apache.SERVER_RETURN
 PROG_TRACEBACK = "PROG_TRACEBACK"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 

From dustin at ywlcs.org  Wed May 29 07:45:05 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529082436.GK25763@samba.org>
References: <20020529082436.GK25763@samba.org>
Message-ID: <20020529124504.GG1280@eleanor.internal.ywlcs.org>

On Wed, May 29, 2002 at 06:24:40PM +1000, Martin Pool wrote:

> +# The basic idea is that we want to delete everything from sys.modules
> +# when the user's code changes, except for system modules.  This is
> +# necessary because otherwise one module that has not changed may
> +# still be holding references to code objects from a module that has
> +# changed.  We have to actually delete them and start again rather
> +# than using reload(), because otherwise the first one reloaded may
> +# grab references from something that will be reloaded later on.

Two things:

1. I'm not sure how gc interacts with this, but there was a time when you
just couldn't get rid of a loaded module object.  All of the modules you
delete will still reference each other in some sort of cycle. If they're not
deleted you could very quickly end up with an enormous httpd process.

Even with gc, if there are any dangling references into one of the old
modules (an atexit function? somewhere the Python standard libraries cache a
reference?) then you're going to have a bloated httpd.

I wrote a reloader similar to this one, and my solution to this was to watch
the number of reloads, and call req.child_terminate() after a certain number
(I picked 10) or reloads.


2. One other difficulty: some modules actually *do* want to have global
state.  For example, a MySQL interface should be able to establish its
connection once and maintain that through many requests.  Perhaps there
should be a mechanism for a module to say "don't remove me!", or at least
"preserve the value of this variable".


Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From ian at veryfresh.com  Wed May 29 15:57:38 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020529225738.GB553@fullfactor.com>

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.

But in general, you can't guarantee this in *any* situation. All of the 
modules have to work properly when none of their resources are 
installed (say, on server startup,) and they have to be prepared to die 
at any point.

Usually, persistent connections are used for performance reasons only; 
the modules would otherwise be perfectly happy re-opening every 
database connection on every hit.

This auto-reload feature should only be used during development anyway, 
so performance issues like this shouldn't be a problem (turn it off 
during heavy load testing, of course), and it would be much easier than 
completely restarting the web server after every source file change, 
which is what I'm currently doing.


> Perhaps there should be a mechanism for a module to say "don't remove 
> me!", or at least "preserve the value of this variable".

I don't think this is possible in the general case (and I'm pretty sure 
Python doesn't support it). What would happen if a new version of the 
source file uses a different name for the variable? Or worse, uses the 
same variable (name) for a completely different purpose?


Ian
<ian@veryfresh.com>

From mbp at samba.org  Thu May 30 10:38:51 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:46:46 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020530003850.GC29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> 1. I'm not sure how gc interacts with this, but there was a time when you
> just couldn't get rid of a loaded module object.  All of the modules you
> delete will still reference each other in some sort of cycle. If they're not
> deleted you could very quickly end up with an enormous httpd process.

Here's a nickel; get a bigger computer :-)

> Even with gc, if there are any dangling references into one of the old
> modules (an atexit function? somewhere the Python standard libraries cache a
> reference?) then you're going to have a bloated httpd.

Using atexit functions within mod_python is pretty pointless, but your
general point about references held by system modules is correct.

If my code bloated that easily because of reloading modules then I
would be somewhat worried that something would cause it to happen
during production, and I'd feel I ought to investigate what was going
wrong.

You can always turn down MaxRequestsPerChild, or indeed turn off
autoreload.

I guess in general I believe that in development mode (as opposed to
release), correctness and developer productivity is more important
than performance.

In deployment mode, there shouldn't be any bloat because the .py files
won't change.  The cost is just stat'ing them each time, which is a
slight cost but not terrible.

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.  Perhaps there
> should be a mechanism for a module to say "don't remove me!", or at least
> "preserve the value of this variable".

As far as I can see, the only non-bogus use of persistence is
opportunistic caching.  Modules have to cope with losing their
persistent state because (a) requests are unpredictably spread across
Apache instances; (b) Apache can kill and restart children; (c)
relying on it is overly fragile; and (d) without a working reload
mechanism, the programmer will be completely restarting Apache at
intervals anyhow.

-- 
Martin 

From dustin at ywlcs.org  Wed May 29 19:45:44 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:46 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
Message-ID: <20020530004544.GF2519@eleanor.internal.ywlcs.org>

Sorry, meant to send this to the list..

-----

On Wed, May 29, 2002 at 03:57:38PM -0700, Ian Clelland wrote:
> > 2. One other difficulty: some modules actually *do* want to have global
> > state.  For example, a MySQL interface should be able to establish its
> > connection once and maintain that through many requests.
> 
> But in general, you can't guarantee this in *any* situation. All of the 
> modules have to work properly when none of their resources are 
> installed (say, on server startup,) and they have to be prepared to die 
> at any point.
> 
> Usually, persistent connections are used for performance reasons only; 
> the modules would otherwise be perfectly happy re-opening every 
> database connection on every hit.

Right, and in a development environment (the only place one would use a
reloader) I suppose that would be acceptable.  However, if you're testing
against the production database server (a not-unreasonable proposition for a
small to midsize shop with a complex database schema), all those extra
connections might prove to be a burden.  And you can't guarantee that Python
will close them when the module is "unloaded", as the module may continue to
exist for some time.

I'm sorry to be pedantic.  I'm not arguing that such a feature is *required*,
or necessary for any purpose (gee, don't test against your production
database server!), but that it would have *some* benefits, at *minimal* cost
(see below regarding cost), and is thus a win overall.

> This auto-reload feature should only be used during development anyway, 
> so performance issues like this shouldn't be a problem (turn it off 
> during heavy load testing, of course), and it would be much easier than 
> completely restarting the web server after every source file change, 
> which is what I'm currently doing.
> 
> 
> > Perhaps there should be a mechanism for a module to say "don't remove 
> > me!", or at least "preserve the value of this variable".
> 
> I don't think this is possible in the general case (and I'm pretty sure 
> Python doesn't support it). What would happen if a new version of the 
> source file uses a different name for the variable? Or worse, uses the 
> same variable (name) for a completely different purpose?

As to the first suggestion (a mechanism for a module to say "don't remove
me!"), that is already supported in that you do not reload Python standard
modules.  Perhaps you could add a check for a __no_reload__ symbol or the
like?

Regarding permanent variables, under ordinary Python reload semantics, you
can do something like:

try:
  x = my_retained_variable
  del x
except:
  my_retained_variable = initial_value

but that's just for the record.  I can't see why you could possibly want to
do that, *particularly* in mod_python.   :-)

Dustin

--

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

----- End forwarded message -----

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Wed May 29 19:53:12 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:47 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530003850.GC29848@samba.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org>
Message-ID: <20020530005312.GG2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 10:38:51AM +1000, Martin Pool wrote:
>
> > Even with gc, if there are any dangling references into one of the old
> > modules (an atexit function? somewhere the Python standard libraries cache a
> > reference?) then you're going to have a bloated httpd.
> 
> Using atexit functions within mod_python is pretty pointless, but your
> general point about references held by system modules is correct.
> 
> If my code bloated that easily because of reloading modules then I
> would be somewhat worried that something would cause it to happen
> during production, and I'd feel I ought to investigate what was going
> wrong.
> 
> You can always turn down MaxRequestsPerChild, or indeed turn off
> autoreload.

Ah!  I had forgotten MaxRequestsPerChild, which lets Apache take care of
counting reloads, so a Python reloader need not worry about it.

> I guess in general I believe that in development mode (as opposed to
> release), correctness and developer productivity is more important
> than performance.

I don't disagree.  You'll note that I'm arguing for features on the basis of
developer convenience at minimal (but not zer) performance cost, which
translates into developer productivity.

> In deployment mode, there shouldn't be any bloat because the .py files
> won't change.  The cost is just stat'ing them each time, which is a
> slight cost but not terrible.

And the cost will be zero, if AutoReload is turned off :-)

> As far as I can see, the only non-bogus use of persistence is
> opportunistic caching.  Modules have to cope with losing their
> persistent state because (a) requests are unpredictably spread across
> Apache instances; (b) Apache can kill and restart children; (c)
> relying on it is overly fragile; and (d) without a working reload
> mechanism, the programmer will be completely restarting Apache at
> intervals anyhow.

True, but there are valid reasons to want to test and develop such
opportunistic caching mechanisms (since anything opportunistic is by at least
a little bit nondeterministic, it probably needs the most testing).  There
are also performance implications, as I detailed in my other reply in this
thread (<20020530004544.GF2519@eleanor.internal.ywlcs.org>).  As I said a few
paragraphs earlier, developer convenience with minimal impact on
performance.

BTW: I assume you're not implying that opportunistic caching is overly
fragile!  It's a great technique!  Relying on not being reloaded, however, is
obviously stupid, since the Apache API *will* reload you :-)

I don't actually care too much about this whole thing; just putting in my
$0.02.  If y'all are really opposed to it, don't put it in.  I'll still love
you, and you can keep the pennies. :-)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From mbp at samba.org  Thu May 30 11:02:10 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:46:47 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010206.GD29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> Right, and in a development environment (the only place one would use a
> reloader) I suppose that would be acceptable.  However, if you're testing
> against the production database server (a not-unreasonable proposition for a
> small to midsize shop with a complex database schema), all those extra
> connections might prove to be a burden.  And you can't guarantee that Python
> will close them when the module is "unloaded", as the module may continue to
> exist for some time.

(I realize it's only an example.)

How often are developers changing and testing their code -- every few
minutes at most?  Suppose every ten seconds on average if you have a
few developers.  If your database can't cope with merely opening and
closing connections at that frequency I think you have big problems
that need to be addressed in some other way.  (More hardware, local
cache, ...)

It's equally or more likely that holding idle connections open
indefinitely would cause resource problems.

Anyhow, such a shop could always forbid use of the reloader.  There's
no need to penalize all users for the sake of this rare and
hypothetical case.

> Regarding permanent variables, under ordinary Python reload semantics, you
> can do something like:

I guess you could just stick the reference into somewhere in sys, but
of course that might result in other modules that you *do* want to
have reloaded actually not being so.

I think the real problem is that without reloading, if you ever forget
to restart Apache, different apache children can have different
versions of the code, which is very confusing.

-- 
Martin 

From mbp at samba.org  Thu May 30 11:08:15 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:46:47 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530005312.GG2519@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org> <20020530005312.GG2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010814.GE29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> And the cost will be zero, if AutoReload is turned off :-)

Yes, that's the nice thing.

> True, but there are valid reasons to want to test and develop such
> opportunistic caching mechanisms (since anything opportunistic is by at least
> a little bit nondeterministic, it probably needs the most testing).

Yes.  You can test them (without changing the code) perfectly well
with this patch.  If you're changing the caching code then by
definition you need to restart one way or another.

Indeed, having objects in memory where the same datastructure is
modified by different versions of the code (with different bugs)
sounds like a recipe for confusion.  Suppose an earlier version of the
cache code actually broke one of the data structure invariants on the
cache -- you *want* to dump and reinitialize the thing.

> BTW: I assume you're not implying that opportunistic caching is overly
> fragile!  It's a great technique!  Relying on not being reloaded, however, is
> obviously stupid, since the Apache API *will* reload you :-)

Yes, that's what I meant: it's only dumb if you *rely* on persistence,
rather than just taking advantage of it when it happens.

Indeed an important part of testing that kind of code would be to set
MaxRequestsPerChild to a low number and make sure that it still works
when it is always being flushed.

-- 
Martin 

Every Python user scoffed at it once, saying significant whitespace is
the past.
	-- Moshe Zadka (?)

From dustin at ywlcs.org  Wed May 29 20:24:02 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:47 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530010206.GD29848@samba.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org> <20020530010206.GD29848@samba.org>
Message-ID: <20020530012402.GH2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 11:02:10AM +1000, Martin Pool wrote:
> 
> Anyhow, such a shop could always forbid use of the reloader.  There's
> no need to penalize all users for the sake of this rare and
> hypothetical case.

I guess I don't see the penalty.  I'm talking about adding a mechanism to
prevent *only certain modules* from being reloaded, e.g. add

..
__no_reload__ = 1  # don't reload this module, please
..

to your module and the reloader will leave it alone.

I think that there are a few -- admittedly border, obscure -- cases where
such a feature would be useful / convenient during development, and that the
implementation cost is nearly nothing.

To demonstrate unequivocally what I mean, here's a patch that can be applied
after the original patch at the root of this thread:

*** apache-orig Wed May 29 20:16:58 2002
--- apache.py   Wed May 29 20:18:08 2002
***************
*** 121,127 ****
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):
--- 121,128 ----
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             if not hasattr(sys.modules[module_name], '__no_reload__'):
!                 del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):

From vmanera at manord.com  Thu May 30 16:59:46 2002
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:46:47 2004
Subject: [mod_python] problem in file download
Message-ID: <801EB84B006ED411898D00B0D03E524712CCA7@PROXYMAIL>

Hello,

I'm trying to download a file:

client side:
<FORM METHOD="POST"
ACTION="http://sviluppo.manord.com/cgi-mpy/prova.py/printfile "
ENCTYPE="multipart/form-data" NAME="FormDati">
<center>
<INPUT TYPE="file" NAME="file1"></center>
<center>
<INPUT TYPE="submit" NAME="invia" VALUE="Invia Dati"></center>

</FORM>

when I sumitted a file mod_python give me this:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "C:\Program Files\Python22\Lib\mod_python\apache.py", line 193, in
Dispatch
    result = object(req)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 104, in
handler
    val = File(field)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 308, in
__init__
    for m in field.file.__methods__:

  File "C:\programmi\Python22\Lib\tempfile.py", line 178, in __getattr__
    a = getattr(file, name)

AttributeError: 'file' object has no attribute '__methods__'


does anyone have any idea to solve this?

Villiam


From conrad at hep.caltech.edu  Thu May 30 18:20:56 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:46:47 2004
Subject: [mod_python] Serving files efficiently
Message-ID: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>

Hi

Looking at the previous thread on serving files got me thinking:

I'm also trying to serve a file (or part of a file) in response to an
xmlrpc query. Since URL filtering etc. is not an option in this case, is
there a way to tell apache to do a sendfile() or similar from
mod_python? I'm sure this would be more efficient that my current method
of (roughly) reading to a buffer and then sending the buffer with
req.write() and constructing my own headers.

Any ideas?

Cheers!

Conrad
-- 
*-----------------------------------------*
| Conrad Steenberg                        |
| Caltech, Mail Code 356-48               |
| Pasadena, CA, 91125                     |
| e-mail: conrad@hep.caltech.edu          |
| Tel: (626) 395-8758                     |
*-----------------------------------------*


From dustin at ywlcs.org  Thu May 30 21:07:34 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:46:47 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
Message-ID: <20020531020733.GB11734@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> Hi
> 
> Looking at the previous thread on serving files got me thinking:
> 
> I'm also trying to serve a file (or part of a file) in response to an
> xmlrpc query. Since URL filtering etc. is not an option in this case, is
> there a way to tell apache to do a sendfile() or similar from
> mod_python? I'm sure this would be more efficient that my current method
> of (roughly) reading to a buffer and then sending the buffer with
> req.write() and constructing my own headers.

Since sendfile() is pretty much what Apache will do anyway, you can just call
sendfile() from Python.  There's a Python implementation of sendfile in
Medusa (I haven't tested it, but it's in the source).  You could also SWIG
it.

http://www.nightmare.com/medusa/
http://www.swig.org/

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From conrad at hep.caltech.edu  Thu May 30 22:57:05 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:46:47 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <20020531020733.GB11734@eleanor.internal.ywlcs.org>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu> 
	<20020531020733.GB11734@eleanor.internal.ywlcs.org>
Message-ID: <1022824630.3487.0.camel@charter-187-163.caltech.edu>

Hi Dustin

Thanks! I'll try it tomorrow :-)

Conrad

On Thu, 2002-05-30 at 19:07, Dustin Mitchell wrote:
> On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> > Hi
> > 
> > Looking at the previous thread on serving files got me thinking:
> > 
> > I'm also trying to serve a file (or part of a file) in response to an
> > xmlrpc query. Since URL filtering etc. is not an option in this case, is
> > there a way to tell apache to do a sendfile() or similar from
> > mod_python? I'm sure this would be more efficient that my current method
> > of (roughly) reading to a buffer and then sending the buffer with
> > req.write() and constructing my own headers.
> 
> Since sendfile() is pretty much what Apache will do anyway, you can just call
> sendfile() from Python.  There's a Python implementation of sendfile in
> Medusa (I haven't tested it, but it's in the source).  You could also SWIG
> it.
> 
> http://www.nightmare.com/medusa/
> http://www.swig.org/
> 
> Dustin
> 
> -- 
> 
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
-- 


From Nik.Barron at pennantplc.co.uk  Wed May  1 12:16:53 2002
From: Nik.Barron at pennantplc.co.uk (Nik Barron)
Date: Fri Jan  9 21:52:49 2004
Subject: [mod_python] mod_python.publisher problems: 404s on second an
	d subsequent hits
Message-ID: <F17550784FF9D111B7F100E02921B24741E8DD@NT-SOTON-001>

Hi,

Still having problems with this, even with the 2.7.8 apache.py installed;
anyone have any suggestions?

Nik

From jquinte at fadu.uba.ar  Thu May  2 18:31:05 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 21:52:49 2004
Subject: [mod_python] I need advice, please...
Message-ID: <200205021536.SAA11506@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi !!!
I have seen an example in the FAQ to share the connection to the Database 
between many modules using a global variable. I was trying to do the same but 
I realize that a new connection is established every time I click a link. All 
works fine until all the job is done and I return apache.OK. After that, the 
variable holding my DB Connection seems to get lost and I have to connect 
again. Someone told me that I should use any module that let me share memory. 
That's ok and I've done that too, but everyone uses pickle to convert the 
object to a string. The matter is that Connection Objects cannot be converted 
by pickle. Does any of you have any idea, please?

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE80bAadBzRnlFl4cgRAvdkAKC3jI734xIwvVPOR0Fh5Jd5nIT6xgCgqLay
ry5lDNqh+XaV01ee7WSSO0k=
=x9WS
-----END PGP SIGNATURE-----

From johannes at erdfelt.com  Thu May  2 20:16:08 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:52:49 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <200205021536.SAA11506@www.fadu.uba.ar>; from jquinte@fadu.uba.ar on Thu, May 02, 2002 at 06:31:05PM -0300
References: <200205021536.SAA11506@www.fadu.uba.ar>
Message-ID: <20020502201608.S21887@sventech.com>

On Thu, May 02, 2002, Javier Quinteros <jquinte@fadu.uba.ar> wrote:
> I have seen an example in the FAQ to share the connection to the Database 
> between many modules using a global variable. I was trying to do the same but 
> I realize that a new connection is established every time I click a link. All 
> works fine until all the job is done and I return apache.OK. After that, the 
> variable holding my DB Connection seems to get lost and I have to connect 
> again. Someone told me that I should use any module that let me share memory. 
> That's ok and I've done that too, but everyone uses pickle to convert the 
> object to a string. The matter is that Connection Objects cannot be converted 
> by pickle. Does any of you have any idea, please?

The problem is that Apache forks off a number of children to handle all
of the requests.

It's probably not forgetting the value, it's just that you're hitting a
new Apache child.

Using the code in the FAQ, you'll have one database connection per child
maximum, which is usually reasonable.

JE


From modpython at smartology.nl  Fri May  3 11:21:09 2002
From: modpython at smartology.nl (Remy C. Cool)
Date: Fri Jan  9 21:52:49 2004
Subject: [mod_python] problem with mod_python authentication via postgresql
Message-ID: <E173ZFY-0003vE-00@osiris>

I'm experimenting with python/mod_python and run into a problem with 
autentication...  

I use the following code:

# authenticate user
import psycopg
import string
import time
from mod_python import apache


def authenhandler(req):

   pw = req.get_basic_auth_pw()
   user = req.connection.user

   # create database connection
   connectstring = "dbname=testbase user=tester password=test 
port=5432"
   dbconn = psycopg.connect(connectstring)
   dbhandle = dbconn.cursor()
   # define query
   dbhandle.execute("SELECT user_id,password FROM users WHERE 		   
username = %s", (user,))
   # retrieve results
   results = dbhandle.fetchall()
   total = len(results)

   if total < 1:
      # user not known on this system
      return apache.HTTP_UNAUTHORIZED
   else:
      if total > 2:
         # database corrupted
         return apache.HTTP_UNAUTHORIZED
      else:
         # extract user_id from list
         user_id = results[0][0]
         # get host info
         curhost = req.get_remote_host(apache.REMOTE_NAME)
         # register login try
         dbhandle.execute("""INSERT INTO login (user_id,host) VALUES 
( %d,%s )""", (user_id,curhost))
         dbconn.commit()
         # extract password from list
         passwd = string.strip(results[0][1])
         # compare password with given
         if pw == passwd:
            # user authenticated
            return apache.OK
         else:
            # incorrect password
            return apache.HTTP_UNAUTHORIZED

Authentication works. The username is looked up in the database and 
if the password is OK, access is granted. The problem is that for 
every login attempt (or page refresh) I get 4 entry's in my login 
table ond not one. What am I doing wrong here ?

Regards,
Remy Cool

From dustin at ywlcs.org  Sat May  4 14:28:21 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:49 2004
Subject: [mod_python] Powered by mod_python logo?
Message-ID: <20020504192821.GA2017@eleanor.internal.ywlcs.org>

Anyone have a logo or icon appropriate for sticking in the corner of
mod_python-generated pages?  Similar to "powered by PHP" or "powered by
Apache" or whatever?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May  4 15:35:41 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:49 2004
Subject: [mod_python] Unrelated: add_handler()'s 3rd argument
Message-ID: <20020504203540.GB2017@eleanor.internal.ywlcs.org>

From jquinte at fadu.uba.ar  Mon May  6 15:45:16 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 21:52:49 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <20020502201608.S21887@sventech.com>
References: <200205021536.SAA11506@www.fadu.uba.ar> <20020502201608.S21887@sventech.com>
Message-ID: <200205061250.PAA24036@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks, Johannes !!!
You are right !!!

On Thursday 02 May 2002 21:16, Johannes Erdfelt wrote:
> The problem is that Apache forks off a number of children to handle all
> of the requests.
>
> It's probably not forgetting the value, it's just that you're hitting a
> new Apache child.
>
> Using the code in the FAQ, you'll have one database connection per child
> maximum, which is usually reasonable.
>
> JE
>

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE81s9CdBzRnlFl4cgRAi6OAJ9cF/MsGGwPrrLc8Ndb5vjOfrkaAQCeKu2q
hyhynnJHZE/2wIvUo6wp1XA=
=4MNL
-----END PGP SIGNATURE-----

From s_lott at yahoo.com  Thu May  9 04:58:04 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Subclassing Request
Message-ID: <20020509115804.16929.qmail@web9607.mail.yahoo.com>

I'd like to use a subclass of Request that includes creating a
FieldStorage instance automatically when the Request is created.

Can this be done by subclassing Request, subclassing CallBack to
use the new subclass of Request and then providing a new init()
function in my file?

If not, how do you suggest I create my own subclass of Request?

Also, unrelated, is it possible to add an items() method to tableobject.c?

=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
Yahoo! Shopping - Mother's Day is May 12th!
http://shopping.yahoo.com

From stas at mail.ru  Fri May 10 09:11:25 2002
From: stas at mail.ru (Stas)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Привет!
Message-ID: <200205101611.g4AGBPc04412@asteroid.powweb.com>

Ваш компьютер не справляется с работой? 
Долго загружаются программы, новая игра не радует?

Ваши проблемы - не в устаревшем железе, а в ненастроенном компьютере! 
Хотите вдвое увеличить производительность вашего процессора? 
Забыть о разорвавшемся коннекте и зависшем Windows? 

Тогда эта программа для вас!
Она поможет правильно настроить ваш комьютер и периферийное оборудование, 
что вдвое повысит производительность, устранит неполадки и решит проблемы, 
из-за которых Windows часто зависает. Вы сможете так настроить модем, 
что практически при любой скорости и любом провайдере он будет держать соединение.

Совершенно бесплатно загрузить программу можно здесь

http://xtremetechs.by.ru

http://www.az.ru/xtremetech

С уважением, команда разработчиков X-Treme Technologies ®



*** Программа не содержит вирусов.

-------------------------------------------------------------------------
To be removed from this mailing list
click on the link below 
http://muziki-na-ohotecom.powweb.com/cgi-bin/mail.cgi?mod_python@modpython.org



From support at obantec.net  Fri May 10 20:03:51 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Apache warning on start
Message-ID: <03af01c1f855$6f782d20$0a01a8c0@gamma>

Hi

New to python.
I just added mod_python to my apache 1.3.24 on redhat 7.2 and although it
runs ok i see this error on start

[warn] Loaded DSO libexec/mod_python.so uses plain Apache 1.3 API, this
module might crash under EAPI! (please recompile it with -DEAPI)

Mark


From s13361562 at bach.sun.ac.za  Sat May 11 17:44:27 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] getting username when using publisher auth
Message-ID: <20020511154427.GA12177@vervet.localnet>

Is it possible to get at the username from "normal code" when
authentication is done using __auth__ methods? req.connection.user is
None...

def test(req):
    def __auth__(req, user, passwd):
        if user == "eggs" and passwd == "spam":
            return 1
        else:
            return 0

    return "Hello "+str(req.connection.user)

returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
not help.

Thanks,
Hugo van der Merwe

From suselist at blackball.biz  Sun May 12 01:22:39 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python 2.7.8
Message-ID: <595450206.20020512012239@blackball.biz>

Hello,

i have a big (?) problem.
I've just installed mod_python 2.7.8
On SuSE Linux 7.2 with apache.

So i've added the required lines in Apache.
Apache tells me, that this modul might crash under EAPI.

And when I start a python-script via Brwoser i get the source code.
What might i have done false?

THX

Stephan

Sorry for my bad english!




From jwm-mod_python at sentinelchicken.net  Sat May 11 16:56:02 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <595450206.20020512012239@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 01:22:39AM +0200
References: <595450206.20020512012239@blackball.biz>
Message-ID: <20020511165602.A7089@samson.sentinelchicken.net>

On Sun, May 12, 2002 at 01:22:39AM +0200, Stephan Pienitz wrote:
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.

What does your httpd.conf look like? Did you specify a handler in you script?

> 
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
> 
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
> 
> THX
> 
> Stephan
> 
> Sorry for my bad english!
> 
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From rien at yeepa.org  Sun May 12 10:29:27 2002
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] getting username when using publisher auth
References: <20020511154427.GA12177@vervet.localnet>
Message-ID: <000d01c1f98f$21eca140$2cee4cd4@RANDOM>

From: "Hugo van der Merwe" <s13361562@bach.sun.ac.za>
> def test(req):
>     def __auth__(req, user, passwd):
>         if user == "eggs" and passwd == "spam":
>             return 1
>         else:
>             return 0
> 
>     return "Hello "+str(req.connection.user)
> 
> returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
> not help.

try calling "req.get_basic_auth_pw()" BEFORE calling "req.connection.user"

-- 
rien




From mateusz at ant.gliwice.pl  Sun May 12 20:05:12 2002
From: mateusz at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
Message-ID: <200205121805.g4CI5Ks00385@eden.ispol.com>

I tried all afternoon without success :(
First I compiled python 2.2.1 

Python-2.2.1]$ ./configure --without-threads
$make
It went Ok (with two warnings)

then  I did:
mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr 
--bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share 
--includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec 
--localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man 
--infodir=/usr/share/info --with-apxs=/usr/sbin/apxs 
--with-python=/home/matkor/src/Python-2.2.1

It complained about:
checking what libraries Python was linked with... grep: 
/home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or 
directory

make again went OK, but make install failed:

$ make install
make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'

Performing DSO installation.

/usr/bin/install -c src/mod_python.so /usr/lib/apache
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
/usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
python /usr/local/lib/python2.2/compileall.py 
/usr/local/lib/python2.2/site-packages/mod_python
python: can't open file '/usr/local/lib/python2.2/compileall.py'
make[2]: *** [install_py_lib] B??d 2

Having copying mod_pytho.so manually to /usr/lib/apache/
results an error:

$ /etc/rc.d/init.d/httpd configtest
Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
Cannot load /etc/httpd/modules/mod_python.so into server: 
/etc/httpd/modules/mod_python.so: undefined symbol: openpty

Any ideas ?
TIA

-- 
Mateusz Korniak

From grisha at modpython.org  Sun May 12 15:10:52 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Does anybody succeded in running mod_python with
 python 2.x under RH 7.x ?
In-Reply-To: <200205121805.g4CI5Ks00385@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205121509520.842-100000@localhost>

Try configuring it with just one argument:

./configure --with-apxs=/usr/sbin/apxs

Grisha

On Sun, 12 May 2002, Mateusz Korniak wrote:

> I tried all afternoon without success :(
> First I compiled python 2.2.1
>
> Python-2.2.1]$ ./configure --without-threads
> $make
> It went Ok (with two warnings)
>
> then  I did:
> mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr
> --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share
> --includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec
> --localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man
> --infodir=/usr/share/info --with-apxs=/usr/sbin/apxs
> --with-python=/home/matkor/src/Python-2.2.1
>
> It complained about:
> checking what libraries Python was linked with... grep:
> /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
> grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or
> directory
>
> make again went OK, but make install failed:
>
> $ make install
> make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
> make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'
>
> Performing DSO installation.
>
> /usr/bin/install -c src/mod_python.so /usr/lib/apache
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> /usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
> python /usr/local/lib/python2.2/compileall.py
> /usr/local/lib/python2.2/site-packages/mod_python
> python: can't open file '/usr/local/lib/python2.2/compileall.py'
> make[2]: *** [install_py_lib] B??d 2
>
> Having copying mod_pytho.so manually to /usr/lib/apache/
> results an error:
>
> $ /etc/rc.d/init.d/httpd configtest
> Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
> Cannot load /etc/httpd/modules/mod_python.so into server:
> /etc/httpd/modules/mod_python.so: undefined symbol: openpty
>
> Any ideas ?
> TIA
>
> --
> Mateusz Korniak
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From Mateusz.Korniak at ant.gliwice.pl  Sun May 12 21:48:52 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
In-Reply-To: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
References: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
Message-ID: <200205121948.g4CJmts01196@eden.ispol.com>

On Sunday 12 May 2002 21:10, you wrote:
> Try configuring it with just one argument:
>
> ./configure --with-apxs=/usr/sbin/apxs

If I did so it found old python (under RH there are two separate executables 
python is 1.5.x and python2 is 2.x )
checking Python version... 1.5

So I fooled ./configure by
$ cp /usr/bin/python2.2 /usr/bin/python 
then it worked OK but got big warning about python threadness

checking Python version... 2.2
checking whether Python is compiled with thread support... yes

  ****** WARNING ******
  Python is compiled with thread support. Apache 1.3 does not use threads.
  On some systems this will cause problems during compilation, on others
  it may result in unpredictable behaviour of your Apache server. Yet on
  others it will work just fine. The recommended approach is to compile
  Python without thread support in a separate location and specify it with
  --with-python option to this ./configure script.

also I got warning during startup:

# /etc/rc.d/init.d/httpd configtest
[Sun May 12 21:23:44 2002] [warn] Loaded DSO modules/mod_python.so uses plain 
Apache 1.3 API, this module might crash under EAPI! (please recompile it with 
-DEAPI)
Syntax OK
[root@beauty /root]# /etc/rc.d/init.d/httpd graceful
/usr/sbin/apachectl graceful: httpd gracefully restarted

but apache seems to work. :)))
I don't know how dangerous are those warnings .. but thanks a lot for help ;)


-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From fuf at mobil.cz  Mon May 13 17:00:00 2002
From: fuf at mobil.cz (Michal Vitecek)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] questions/ideas
Message-ID: <20020513170000.A18394@diana.mobil.cz>

 hello everyone,

 i'm taking a decision whether to use python or php in my next project.
 i'm leaning towards python and mod_python, but i found some
 problems/questions/ideas that i'd like to know answers to first.

    a) as i did my previous projects in php i now find it quite strange
       that i need to call a certain function of a script. this makes it a
       bit more difficult to use the few global variables that i plan to
       use and from time to time makes the whole program into a single
       function (one tab is taken)

    b) the publisher submodule needs to know the name of the function to
       run - would it be possible to change it so that it doesn't need it
       ie. run the whole script instead?

    c) the publisher submodule reads the whole output of a function to a
       variable - for a sites with large html pages this could be 100s of
       KBs. this could mean a noticeable performance slowdown - also
       because the output must be prepared first. how about if the
       function output the resulting html code to a stream?

    d) i noticed that the python interpreter is not the same even for a
       single virtualhost (even when i explicitly define its name with
       PythonInterpreter) => the persistence is kept only withing every
       apache child. with increase of the number of children a new
       interpreter is created that doesn't inherit from the main one (i'm
       using python 2.2.1 and apache 1.3.20).

    e) in php it's possible to have the php code mixed with the html one -
       ie. there are special marks, that mark the start and end of php
       code. i think it would be a nice option to have in mod_python
       because it helps imho to create scripts the allow for easy to
       review code.

	thank you for your time
--
		fuf		(fuf@mobil.cz)

From johannes at erdfelt.com  Mon May 13 14:12:24 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513170000.A18394@diana.mobil.cz>; from fuf@mobil.cz on Mon, May 13, 2002 at 05:00:00PM +0200
References: <20020513170000.A18394@diana.mobil.cz>
Message-ID: <20020513141224.E23170@sventech.com>

On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>  i'm taking a decision whether to use python or php in my next project.
>  i'm leaning towards python and mod_python, but i found some
>  problems/questions/ideas that i'd like to know answers to first.

I've made the switch from PHP to mod_python successfully.

>     a) as i did my previous projects in php i now find it quite strange
>        that i need to call a certain function of a script. this makes it a
>        bit more difficult to use the few global variables that i plan to
>        use and from time to time makes the whole program into a single
>        function (one tab is taken)

That's just how python works. It's a different style of programming, but
I think it's better.

I got into too many problems with global variables in PHP that caused me
headaches.

>     b) the publisher submodule needs to know the name of the function to
>        run - would it be possible to change it so that it doesn't need it
>        ie. run the whole script instead?

Use the attached patch to mod_python. It'll call the function named
"handler" if there is no name passed. The patch is relative to 2.7.6.

>     c) the publisher submodule reads the whole output of a function to a
>        variable - for a sites with large html pages this could be 100s of
>        KBs. this could mean a noticeable performance slowdown - also
>        because the output must be prepared first. how about if the
>        function output the resulting html code to a stream?

Have you measured a decrease in performance?

>     d) i noticed that the python interpreter is not the same even for a
>        single virtualhost (even when i explicitly define its name with
>        PythonInterpreter) => the persistence is kept only withing every
>        apache child. with increase of the number of children a new
>        interpreter is created that doesn't inherit from the main one (i'm
>        using python 2.2.1 and apache 1.3.20).

That's because of the multiple process approach to apache. Since each
child is a different process, they don't share memory.

You can play tricks with shared memory if you really need that
functionality.

>     e) in php it's possible to have the php code mixed with the html one -
>        ie. there are special marks, that mark the start and end of php
>        code. i think it would be a nice option to have in mod_python
>        because it helps imho to create scripts the allow for easy to
>        review code.

There are add on packages like that. I've been using a package called
Cheetah that provides something similar.

Do some searching.

JE

-------------- next part --------------
--- mod_python/publisher.py.orig	Tue Apr 16 20:31:06 2002
+++ mod_python/publisher.py	Tue Apr 16 20:34:45 2002
@@ -80,17 +80,17 @@
     args = {}
 
     # get the path PATH_INFO (everthing after script)
-    if not _req.subprocess_env.has_key("PATH_INFO"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
-    
-    func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
-    func_path = string.replace(func_path, "/", ".")
-    if func_path[-1] == ".":
-        func_path = func_path[:-1] 
+    if _req.subprocess_env.has_key("PATH_INFO"):
+        func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
+        func_path = string.replace(func_path, "/", ".")
+        if func_path[-1] == ".":
+            func_path = func_path[:-1] 
 
-    # if any part of the path begins with "_", abort
-    if func_path[0] == '_' or string.count(func_path, "._"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+        # if any part of the path begins with "_", abort
+        if func_path[0] == '_' or string.count(func_path, "._"):
+            raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+    else:
+        func_path = "handler"
 
     # process input, if any
     fs = util.FieldStorage(req, keep_blank_values=1)
From grisha at modpython.org  Mon May 13 14:59:34 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513141224.E23170@sventech.com>
Message-ID: <Pine.BSF.4.32.0205131455160.12699-100000@localhost>


On Mon, 13 May 2002, Johannes Erdfelt wrote:

> On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>
> >     c) the publisher submodule reads the whole output of a function to a
> >        variable - for a sites with large html pages this could be 100s of
> >        KBs. this could mean a noticeable performance slowdown - also
> >        because the output must be prepared first. how about if the
> >        function output the resulting html code to a stream?
>
> Have you measured a decrease in performance?

You can, btw write to a stream if you need to, even from publisher scripts
- you just have to call req.send_http_header() manually first, and after
that you can write to the socket using req.write(). This technique is
useful for doing things like a traceroute script in which you want lines
to appear as soon as data is available.

Grisha


From support at obantec.net  Mon May 13 21:37:12 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python 2.7.8
References: <595450206.20020512012239@blackball.biz>
Message-ID: <157701c1fabd$fb9a7050$0a01a8c0@gamma>

Hi

I fixed the apache DEAPI warning by doing the following.

./configure --with-apxs=/usr/local/apache/bin/apxs --with-python=/usr/local/
lib/python2.2

then edit the Makefile in mod_python-2.7.8/src/

add -DEAPI to the line CFLAGS=$(OPT) $(INCLUDES)
so it becomes
CFLAGS=$(OPT) $(INCLUDES) -DEAPI

then follow make instruction for dso

Re. python as source check doc-html/inst-testing.html

HTH

Mark
--
Obantec Support
www.obantec.net
WebHosting and Domains
Nominet UK Tag Holder
----- Original Message -----
From: "Stephan Pienitz" <suselist@blackball.biz>
To: <mod_python@modpython.org>
Sent: Sunday, May 12, 2002 12:22 AM
Subject: [mod_python] mod_python 2.7.8


> Hello,
>
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.
>
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
>
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
>
> THX
>
> Stephan
>
> Sorry for my bad english!
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From jwm-mod_python at sentinelchicken.net  Mon May 13 15:13:15 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <556963282.20020512035022@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 03:50:22AM +0200
References: <595450206.20020512012239@blackball.biz> <20020511165602.A7089@samson.sentinelchicken.net> <1873819371.20020512025758@blackball.biz> <20020511174750.A7171@samson.sentinelchicken.net> <556963282.20020512035022@blackball.biz>
Message-ID: <20020513151314.D10655@samson.sentinelchicken.net>

Hast Du immernoch Probleme?


On Sun, May 12, 2002 at 03:50:22AM +0200, Stephan Pienitz wrote:
> Guten Tag Jason Morgan,
> 
> Am Sonntag, 12. Mai 2002 um 02:47 schrieben Sie:
> 
> 
> JM> Gruess Dich Stephan,
> 
> >> I've added in my httpd.conf following lines:
> >> 
> >> LoadModule python_module libexec/mod_python.so
> 
> JM> Do you also have:
> 
> JM> AddModule mod_python.c
> 
> JM> in the ClearModuleList-section?
> 
> >> <Directory /home/www/pythontestt>
> >>   AddHandler python-program .py
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> JM> Wenn das nicht functioniert, vielleicht sollst Du der modpython_email_liste wieder schreiben. Ich habe mod_python nur gestern
> JM> installiert und habe noch nicht viel damit gearbeitet. Vergiss(?) nicht Apache wiederzustarten!
> 
> JM> Viel Glueck,
> 
> JM> Jason
> 
> Hi,
> 
> ich schreibe dann mal deutsch :)
> 
> Also, wenn ich das .c-Modul hinzuf?ge, dann gibt der Apache zwar beim
> neustart keine Fehlermelung aus, aber st?rtzt trotzdem ab.
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> Dann w?re das doch aber nur f?r ein File g?ltig, oder?
> 
> THX
> 
> Stephan
> 
> 
> 

From suselist at blackball.biz  Tue May 14 21:06:18 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] It doesn't work
Message-ID: <1803493863.20020514210618@blackball.biz>

Hi,

i've set up mod_python in DSO-Mode.
Then I've written the 2 Lines into the
Apache-Conf.

The I'ved restartet Apache an it says to me, thats allright. But then
i can't open any webpage on my server.

What have i done wrong?

THX

Stephan

Sorry for my bad english




From jwm-mod_python at sentinelchicken.net  Tue May 14 22:13:13 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020514221313.A14746@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From roger.baklund at mobiliant.com  Wed May 15 17:49:38 2002
From: roger.baklund at mobiliant.com (Roger Baklund)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] cgihandler, w2k
Message-ID: <BGEHIEMNFIOKLADGCOJIMEBCDBAA.roger.baklund@mobiliant.com>

Hi,

we have installed mod_python on a w2k server, and the mptest.py "Hello
world" is working.

However, when running a cgi application through the cgihandler, we have some
problems.

First, we thought it was working, but it was not, as we saw many python
processes coming and going in the task manager, as if it was running like a
normal cgi.

We reinstalled, and we patched some lines in apache.py, function
setup_cgi(), according to notes found on this mailinglist ("old_env =
os.environ.copy()" and "return old_env, si, so").

This time the cgihandler was running, and we found some problems in the cgi
that we fixed ("if __name__ == '__main__':" and some redirects that went
wrong because of missing status header.)

Then we got some strange errors... it started to complain about modules not
existing, when it was trying to delete from sys.modules. This is in the
beginning of the cgihandler.py handler() function.

We had to move the "_lock.acquire()" to before the sys.modules loop to get
rid of the error messages.

We tried to remove the sys.modules loop (as indicated in a comment in the
source), but we could not make that work. We always get Internal Server
Error when we try to run without this module reload mechanism. See log
entries below.

The application is frames based. When the user log in, a frameset is
returned, and new requests are made for a stylesheet, a couple of external
javascripts, and a couple of cgi-based html pages/frames.

From jwm at sentinelchicken.net  Wed May 15 09:51:52 2002
From: jwm at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020515095152.A16190@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From diedrich at myriad.com  Fri May 17 10:27:13 2002
From: diedrich at myriad.com (Karl Diedrich)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Apache 2.0 CVS?
Message-ID: <3CE52F61.29762B72@myriad.com>

Hello,

Is the mod_python for Apache2.0.x being worked on in CVS?

I have done some Python extension programming so I would be willing to
look over the necessary
files to help if I know which files are important.

--
Karl Diedrich
Programmer II
Myriad Genetics Inc.
http://www.myriad.com/
(801) 883-3246


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020517/975cd5f7/attachment-0001.htm
From grisha at modpython.org  Fri May 17 13:46:55 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Apache 2.0 CVS?
In-Reply-To: <3CE52F61.29762B72@myriad.com>
Message-ID: <Pine.BSF.4.32.0205171346250.65141-100000@localhost>

Yes, just follow the CVS link off the website. The latest version is the
one for apache 2.0.

Grisha

On Fri, 17 May 2002, Karl Diedrich wrote:

> Hello,
>
> Is the mod_python for Apache2.0.x being worked on in CVS?
>
> I have done some Python extension programming so I would be willing to
> look over the necessary
> files to help if I know which files are important.
>
> --
> Karl Diedrich
> Programmer II
> Myriad Genetics Inc.
> http://www.myriad.com/
> (801) 883-3246
>
>
>


From ian at veryfresh.com  Fri May 17 20:27:54 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020514221313.A14746@samson.sentinelchicken.net>
References: <20020514221313.A14746@samson.sentinelchicken.net>
Message-ID: <20020518032754.GF90@fullfactor.com>

On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> Hello:
> 
> Ok, please excuse my ignorance, but I'm trying to move three sites 
> over to mod_python from php and I'm having some trouble figuring what 
> is the 'proper' way to proceed. I have mod_python installed and 
> working, however, I'm not familiar with the handler concept (yes, I 
> RTFM) and am trying to decide what to do with it. Should I have 
> handler dealing with everything in my dirs, while passing off content 
> generation to methods within personal modules? What is the role of 
> mod_python.publisher. I would appreciate any help I can get - URLs 
> are welcome. I've done the google searches, though, and haven't come 
> across anytrhing about how people actually structure their sites. I 
> dont' just want to hack something together - as I plan to leave most 
> site maintenance to a new employee
> :-).

Well, I'm not sure how closely my experiences mirror those of other 
mod_python developers, but I can try to give you some insight. (I spent 
about two years writing almost exclusively in PHP, and am now adjusting 
to mod_python)

The handler concept is by far the biggest difference between the two 
environments. A PHP script typically resides 'at' a specific URL, and 
only services requests for that URL. A mod_python handler, in contrast, 
becomes part of the web server, and handles requests whenever Apache 
gives them to it.

To be a little clearer, the way I will usually install a handler is to 
include it within an Apache <Location> directive. For example, I am 
writing a user-management module, and I want it to be mounted at 
http://mysite.com/users, so I set up Apache like this:

  <Location /users>
    SetHandler python-program
    PythonPath "sys.path+['/usr/local/lib/site_apps']"
    PythonHandler userinfo
  </Location>

This means that now my python module (at 
/usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
request to a URL which begins with "/users". 

The first thing that userinfo.py does is analyse the URL of the request 
to see exactly what was requested. If it is just "/users/", it displays 
a list of users. If it is "/users/showuser/ian", then it looks up the 
user record for 'ian' and displays that record. If it is 
"/users/no-such-page" then it returns apache.DECLINED, and Apache 
handles the 404 error.

I can also distinguish between GET and POST requests by examining the 
req.method variable. If the request is a GET to 
"/users/deleteuser/ian", then userinfo.py will display a confirmation 
page. If it is a POST to that same URL, it will read the POST data, 
look for a confirmation, and delete the user.

Most of my handlers are designed in this fashion, as one main python 
module installed under a base URL, which defines a "URL-space". The 
main module uses import statements to access all of the libraries it 
needs (database access, user record class, string, cgi, etc.) to do its
work.


If you want to look for other resources on application design with 
mod_python, try searching for information on mod_perl. It's the closest 
thing I have found to mod_python, as they both act as scripting-
language interfaces to the Apache C API. O'Reilly's book "Writing 
Apache Modules with Perl and C" has been an invaluable resource for me. 
Also, once you understand how the Apache API works, the mod_python 
documentation becomes a much more useful tool.


If your goal is just to convert your applications from PHP to the 
Python language, then you may want to look at the Publisher handler 
which Grisha has supplied with mod_python. It allows you to use Python 
scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
people on this list seem to be using it exclusively. In that case, the 
publisher handler becomes the default handler for your entire site. It 
deals with every request that comes in by looking for a Python module 
with the appropriate name in the right directory, and passing it 
parameters based on the request. (This is actually completely backwards 
to the way PHP works, but the effect is the same -- you believe that 
you are calling the Python script directly from the URL.)


I hope this answers at least some of your questions; feel free to ask 
more if I've just made things more confusing :)


Ian
<ian@veryfresh.com>


From s13361562 at bach.sun.ac.za  Sat May 18 11:54:17 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] Getting 404's ...
Message-ID: <20020518095417.GA27377@vervet.localnet>

Often, after loading a number of pages, including one with __auth__
method, from two different directories:

<Directory /var/www>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

<Directory /var/www/newwebsite>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

I sometimes get 404's. Alternating. I.e. I hit refresh, continually on
the same page, then it is sometimes 404's, sometimes it works.
Restarting the apache server usually results in it working great for a
while at least. How can I debug this, throw a bunch of prints in
publisher.py? Do prints show up in error.log though?

I have reason to believe that this only starts going haywire after I've
viewed some things in the newwebsite directory. This is in fact a "newer
version" of the things in the other. Might it be confusing the two? How
exactly does mod_python work, does loaded modules remain loaded, i.e.
they only get loaded once? (Can one have global variables that will then
maintain their value between page requests?)

Thanks,
Hugo van der Merwe

From Mateusz.Korniak at ant.gliwice.pl  Sat May 18 12:30:14 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] How te send many cookies using one request ?
Message-ID: <200205181030.g4IAUJs76544@eden.ispol.com>

I tried:
1) # multiple value cookie
	req.headers_out["Set-Cookie"] = user.out_cookie().output("") 
	
2) #many single value cookies		
	for cookie in user.out_cookies():
		req.headers_out["Set-Cookie"] = cookie.output("")

both sends only one Set-Cookie header with one value :(

TIA 
-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From stony8 at gmx.de  Sat May 18 15:46:33 2002
From: stony8 at gmx.de (Alexander Steinert)
Date: Fri Jan  9 21:52:50 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518154633.B1282@tyche.svt.tu-harburg.de>

> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
[Very nice description of an request handling example snipped ...]

I do it in a similar fashion:

Tail of /etc/apache/access.conf:

    # ddd is our BASE directory.
    <Directory /var/www/ddd>
	RewriteEngine On
	# Redirect requests for BASE/ externally to the german start page.
	RewriteRule "^$" /ddd/de [L,R]
    </Directory>
    # Identify requests for dynamic wdps content by URL pattern. Examples:
    # http://host/ddd/de
    # http://host/ddd/en
    # http://host/ddd/de/ACTION
    # http://host/ddd/de-SESSIONID/ACTION
    <LocationMatch ^/ddd/[a-z]{2}($|(-[0-9a-f]{40})?/)>
	PythonPath "sys.path + ['/usr/local/lib/wdps/python']"
	SetHandler python-program
	PythonHandler wdps.ui.web.handlers
	PythonDebug On
    </LocationMatch>

ACTION can be:

    cancel_order
    change_constants
    change_document_types
    change_groups
    change_languages
    change_person
    change_study_programs
    delete_person
    enter_payment
    enter_pickup
    help
    quit_session
    register_person
    search_person
    show_changes
    show_document_types
    show_languages
    show_order_items
    show_orders
    show_overview
    show_person
    show_postings
    show_startpage
    show_study_programs
    start_session
    ...

For each ACTION I have a class, e.g. Start_session, which is a subclass
of Action, where common behaviour (session_id checking, argument type
checking) is defined.

Originally I started with the Publisher handler, but now am very
satisfied with my OO approach.

I might publish my code (it's not ready) if you want more information.

HTH

Stony


From grisha at modpython.org  Sat May 18 11:17:12 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] How te send many cookies using one request ?
In-Reply-To: <200205181030.g4IAUJs76544@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205181115550.78680-100000@localhost>

headers_out (as any mod_python table object) has an add() method which
will let you set multiple values with the same key

grisha

On Sat, 18 May 2002, Mateusz Korniak wrote:

> I tried:
> 1) # multiple value cookie
> 	req.headers_out["Set-Cookie"] = user.out_cookie().output("")
>
> 2) #many single value cookies
> 	for cookie in user.out_cookies():
> 		req.headers_out["Set-Cookie"] = cookie.output("")
>
> both sends only one Set-Cookie header with one value :(
>
> TIA
> --
> Mateusz Korniak
> ANT sp z o.o. http://www.ant.gliwice.pl/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From jwm-mod_python at sentinelchicken.net  Sat May 18 14:45:22 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] THANKS FOR THE HELP
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518144522.A26028@samson.sentinelchicken.net>

Thanks everyone for the help. It has been very useful.

Thanks again

Jason












On Fri, May 17, 2002 at 08:27:54PM -0700, Ian Clelland wrote:
> On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> > Hello:
> > 
> > Ok, please excuse my ignorance, but I'm trying to move three sites 
> > over to mod_python from php and I'm having some trouble figuring what 
> > is the 'proper' way to proceed. I have mod_python installed and 
> > working, however, I'm not familiar with the handler concept (yes, I 
> > RTFM) and am trying to decide what to do with it. Should I have 
> > handler dealing with everything in my dirs, while passing off content 
> > generation to methods within personal modules? What is the role of 
> > mod_python.publisher. I would appreciate any help I can get - URLs 
> > are welcome. I've done the google searches, though, and haven't come 
> > across anytrhing about how people actually structure their sites. I 
> > dont' just want to hack something together - as I plan to leave most 
> > site maintenance to a new employee
> > :-).
> 
> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
> 
> The handler concept is by far the biggest difference between the two 
> environments. A PHP script typically resides 'at' a specific URL, and 
> only services requests for that URL. A mod_python handler, in contrast, 
> becomes part of the web server, and handles requests whenever Apache 
> gives them to it.
> 
> To be a little clearer, the way I will usually install a handler is to 
> include it within an Apache <Location> directive. For example, I am 
> writing a user-management module, and I want it to be mounted at 
> http://mysite.com/users, so I set up Apache like this:
> 
>   <Location /users>
>     SetHandler python-program
>     PythonPath "sys.path+['/usr/local/lib/site_apps']"
>     PythonHandler userinfo
>   </Location>
> 
> This means that now my python module (at 
> /usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
> request to a URL which begins with "/users". 
> 
> The first thing that userinfo.py does is analyse the URL of the request 
> to see exactly what was requested. If it is just "/users/", it displays 
> a list of users. If it is "/users/showuser/ian", then it looks up the 
> user record for 'ian' and displays that record. If it is 
> "/users/no-such-page" then it returns apache.DECLINED, and Apache 
> handles the 404 error.
> 
> I can also distinguish between GET and POST requests by examining the 
> req.method variable. If the request is a GET to 
> "/users/deleteuser/ian", then userinfo.py will display a confirmation 
> page. If it is a POST to that same URL, it will read the POST data, 
> look for a confirmation, and delete the user.
> 
> Most of my handlers are designed in this fashion, as one main python 
> module installed under a base URL, which defines a "URL-space". The 
> main module uses import statements to access all of the libraries it 
> needs (database access, user record class, string, cgi, etc.) to do its
> work.
> 
> 
> If you want to look for other resources on application design with 
> mod_python, try searching for information on mod_perl. It's the closest 
> thing I have found to mod_python, as they both act as scripting-
> language interfaces to the Apache C API. O'Reilly's book "Writing 
> Apache Modules with Perl and C" has been an invaluable resource for me. 
> Also, once you understand how the Apache API works, the mod_python 
> documentation becomes a much more useful tool.
> 
> 
> If your goal is just to convert your applications from PHP to the 
> Python language, then you may want to look at the Publisher handler 
> which Grisha has supplied with mod_python. It allows you to use Python 
> scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
> people on this list seem to be using it exclusively. In that case, the 
> publisher handler becomes the default handler for your entire site. It 
> deals with every request that comes in by looking for a Python module 
> with the appropriate name in the right directory, and passing it 
> parameters based on the request. (This is actually completely backwards 
> to the way PHP works, but the effect is the same -- you believe that 
> you are calling the Python script directly from the URL.)
> 
> 
> I hope this answers at least some of your questions; feel free to ask 
> more if I've just made things more confusing :)
> 
> 
> Ian
> <ian@veryfresh.com>
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From infomailsys at mail.ru  Mon May 20 12:16:32 2002
From: infomailsys at mail.ru (New Banner Systems)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Re: Your Logo
Message-ID: <200205200810.g4K8AZs98506@eden.ispol.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment-0001.htm
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 23464 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment-0001.gif
From gbeasley at tsa.ac.za  Mon May 20 11:53:41 2002
From: gbeasley at tsa.ac.za (Grant Beasley)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
Message-ID: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>

Hi

I have a function that tries to check whether its input is a dictionary (It
behaves differently depending on the input type). To do this, it firstly
checks for objects whose type is equal to type({}) and secondly for objects
which are instances of UserDict. The FieldStorage class matches neither of
these, despite the fact that it behaves like a dictionary (mappable object).
Am I using the wrong test, or this this a problem with the FieldStorage
class that it should conform to the above?

Of course, I could use a try block to attempt to access the object as a
dictionary, but this seems inefficient (I'd rather check explicitly).

Thanks
Grant Beasley


From s_lott at yahoo.com  Mon May 20 04:23:22 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
In-Reply-To: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>
Message-ID: <20020520112322.34986.qmail@web9608.mail.yahoo.com>

Yes, the FieldStorage class is a unique class, not derived from
UserDict.  It has dictionary-like methods.  

You want to check your argument, arg, with something like this

if isclass(arg,FieldStorage)

--- Grant Beasley <gbeasley@tsa.ac.za> wrote:
> Hi
> 
> I have a function that tries to check whether its input is a
> dictionary (It
> behaves differently depending on the input type). To do this,
> it firstly
> checks for objects whose type is equal to type({}) and
> secondly for objects
> which are instances of UserDict. The FieldStorage class
> matches neither of
> these, despite the fact that it behaves like a dictionary
> (mappable object).
> Am I using the wrong test, or this this a problem with the
> FieldStorage
> class that it should conform to the above?
> 
> Of course, I could use a try block to attempt to access the
> object as a
> dictionary, but this seems inefficient (I'd rather check
> explicitly).
> 
> Thanks
> Grant Beasley
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
LAUNCH - Your Yahoo! Music Experience
http://launch.yahoo.com

From colet at code-energy.com  Mon May 20 09:08:45 2002
From: colet at code-energy.com (Cole Tuininga)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] __doc__ entries
Message-ID: <1021900129.1025.37.camel@bobthesnake>

I'm very new to mod_python, so I hope you'll have patience with me.  8)

I have mod_python set up to use index.py as its PythonHandler.  The idea
is that I'm going to have the handler routine scan through all other .py
files in the directory, pull the description of the class in each file,
and use that as a link.

For instance, I might have a changePassword.py with the docstring:

"""Change Password: Click here to change your password"""

If this were in a class called changePassword, I would expect to be able
to do the following:

import changePassword

def handler( req ):
	req.write( changePassword.changePassword.__doc__ )


However, this gives me an error calling the value to req.write a
"None".  However, if I essentially do the same thing within the python
interpreter fired up from the shell, it seems to work.  

Help?  Thanks in advance.

-- 
"The net treats censorship as a malfunction and reroutes around it."
 -John Gilmore

Cole Tuininga
Lead Developer
Code Energy, Inc
colet@code-energy.com
PGP Key ID: 0x43E5755D



From s13361562 at bach.sun.ac.za  Mon May 20 21:05:31 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Serving files via mod_python
Message-ID: <20020520190531.GA20265@vervet.localnet>

Hello,

I want to use mod_python to control what files can be downloaded by
whom, and to log such file transfers (with my own code). One possibility
is also to convert some files' contents on the fly.

I am currently using:

f = open(filename, "r")
while 1:
  data = f.read(1048576)
  if data = "": break
  req.write(data)

It seems to work fine. I just wonder if this is bad (performance wise, I
wonder what the best "size" would be, instead of 1M). These are
potentially *large* files I'm dealing with, things like cd images. At a
later date I guess I'll have to figure out how to do download resuming,
etc. I'm sure Apache does a better job of this, maybe I should rather
let Apache handle it, how can I do this while controlling it all from
modPython? I guess I could just define a PythonAuthenHandler, and let
Apache do the actual serving? Does the PythonAuthenHandler have full
access to just about everything a normal handler would? (URL, etc.)

If there was some way to give Apache a file handle or something like
that, from which it should serve the data...

Thanks,
Hugo van der Merwe

From Hans.Yandle at cingular.com  Tue May 21 10:42:11 2002
From: Hans.Yandle at cingular.com (Yandle, Hans)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] CGI Environment Specs
Message-ID: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>

I am looking into the possibility of using mod_python to accelerate and/or
replace some of my cgi scripts. However, I lack one last detail before I can
attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
variable. After reading the docs, I made the following script using the
mod_python.publisher handler:

from mod_python import apache

def commonenv(req):
    req.content_type = "text/html"
    req.send_http_header()
    req.add_common_vars()
    s = """<html><head><title>Mod_Python Common Environment
Variables</title></head>
           <body><p
align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
    for parameter in req.subprocess_env.keys():
        s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
req.subprocess_env[parameter])
    s = s + "</table></p></body></html>"
    return s

When it is executed, the HTTP_REFERER variable is missing. If anyone knows
how to accomplish this, I would be grateful.

Hans


From sam at webslingerZ.com  Tue May 21 13:25:17 2002
From: sam at webslingerZ.com (Sam Brauer)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <Pine.LNX.4.44.0205211322510.2120-100000@localhost.localdomain>

Did you hit the script directly (by typing the location into your 
browser)?  If so, that variable won't be set.
Try creating a test html page with a link to your script, then hit the 
script by following the link.  In that case, the variable should contain 
the url of your test html page.

- Sam

-- 
Sam Brauer
Systems Programmer
sam@webslingerZ.com

On Tue, 21 May 2002, Yandle, Hans wrote:

> I am looking into the possibility of using mod_python to accelerate and/or
> replace some of my cgi scripts. However, I lack one last detail before I can
> attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
> variable. After reading the docs, I made the following script using the
> mod_python.publisher handler:
> 
> from mod_python import apache
> 
> def commonenv(req):
>     req.content_type = "text/html"
>     req.send_http_header()
>     req.add_common_vars()
>     s = """<html><head><title>Mod_Python Common Environment
> Variables</title></head>
>            <body><p
> align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
>     for parameter in req.subprocess_env.keys():
>         s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
> req.subprocess_env[parameter])
>     s = s + "</table></p></body></html>"
>     return s
> 
> When it is executed, the HTTP_REFERER variable is missing. If anyone knows
> how to accomplish this, I would be grateful.
> 
> Hans
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From ian at veryfresh.com  Tue May 21 16:01:49 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020520190531.GA20265@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet>
Message-ID: <20020521230149.GG90@fullfactor.com>

On Mon, May 20, 2002 at 09:05:31PM +0200, Hugo van der Merwe wrote:
> Hello,
> 
> I want to use mod_python to control what files can be downloaded by
> whom, and to log such file transfers (with my own code). One possibility
> is also to convert some files' contents on the fly.
> 
> I am currently using:
> 
> f = open(filename, "r")
> while 1:
>   data = f.read(1048576)
>   if data = "": break
>   req.write(data)
> 
> It seems to work fine. I just wonder if this is bad (performance wise, I
> wonder what the best "size" would be, instead of 1M). These are
> potentially *large* files I'm dealing with, things like cd images.

Transferring 1MB at a time is probably about as efficient as you can 
get; of course, you'd need to do some proper benchmarking to be sure. I 
believe that Apache defaults to Chunked transfer-encoding, so every 
time you call req.write(), the data goes out immediately, with about 10 
bytes of overhead (actually ln(n)/4+4 bytes).

Actually, most of your overhead will be in TCP and IP encoding, as each 
call to write() will probably result in about 600 IP packets being sent 
(and acknowledged), and there's not much you can do about that.

> At a
> later date I guess I'll have to figure out how to do download resuming,
> etc. I'm sure Apache does a better job of this, maybe I should rather
> let Apache handle it,

Apache will only handle Range requests (which are what you need for 
download resuming) for static files. If you are using mod_python to 
serve the content, then you will have to handle the Range headers 
yourself.

> how can I do this while controlling it all from
> modPython? I guess I could just define a PythonAuthenHandler, and let
> Apache do the actual serving? Does the PythonAuthenHandler have full
> access to just about everything a normal handler would? (URL, etc.)

That's a good way to do it, assuming that the files are already on the 
filesystem, and not being stored in a database or ripped in realtime. 
What you are looking for, though, is a PythonAuthzHandler 
(authorization handler). This is the handler which gets called *after* 
the user's name and password have been verified, (by a .htpasswd file 
or some other method,) and decides whether that user is allowed to 
download that file.

> 
> If there was some way to give Apache a file handle or something like
> that, from which it should serve the data...

You don't even need to do that; all you have to do is install the 
PythonAuthzHandler, and let Apache handle serving the actual content. 
The AuthzHandler will act like a 'filter' on an otherwise normal 
request/response.

Hope that helps,

Ian
<ian@veryfresh.com>

From johannes at erdfelt.com  Tue May 21 19:12:44 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>; from ian@veryfresh.com on Tue, May 21, 2002 at 04:01:49PM -0700
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020521191243.I2645@sventech.com>

On Tue, May 21, 2002, Ian Clelland <ian@veryfresh.com> wrote:
> > how can I do this while controlling it all from
> > modPython? I guess I could just define a PythonAuthenHandler, and let
> > Apache do the actual serving? Does the PythonAuthenHandler have full
> > access to just about everything a normal handler would? (URL, etc.)
> 
> That's a good way to do it, assuming that the files are already on the 
> filesystem, and not being stored in a database or ripped in realtime. 
> What you are looking for, though, is a PythonAuthzHandler 
> (authorization handler). This is the handler which gets called *after* 
> the user's name and password have been verified, (by a .htpasswd file 
> or some other method,) and decides whether that user is allowed to 
> download that file.
> 
> > If there was some way to give Apache a file handle or something like
> > that, from which it should serve the data...
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.

Is this new? It's not in the documentation:

http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

JE


From ian at veryfresh.com  Tue May 21 16:54:18 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521191243.I2645@sventech.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com> <20020521191243.I2645@sventech.com>
Message-ID: <20020521235418.GH90@fullfactor.com>

On Tue, May 21, 2002 at 07:12:44PM -0400, Johannes Erdfelt wrote:
> > You don't even need to do that; all you have to do is install the 
> > PythonAuthzHandler, and let Apache handle serving the actual content. 
> > The AuthzHandler will act like a 'filter' on an otherwise normal 
> > request/response.
> 
> Is this new? It's not in the documentation:
> 
> http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

It does seem conspicuously absent from the online documentation; I 
don't think that's deliberate, though. It appears to be fully supported 
by the code (it's in mod_python.c and requestobject.c) and I've been 
using it with no problems for a while now.

It is mentioned in an example on this page: 
http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers-syn.html

(Grisha? I think this was brought up about 6 weeks ago as well -- any 
 updates? :)

Ian
<ian@veryfresh.com>

From matt at proweb.co.uk  Thu May 23 16:30:43 2002
From: matt at proweb.co.uk (Matt H)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
References: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <20020523163043.744528d8.matt@proweb.co.uk>

this works ->

def authenhandler(req):
        try :
                referer = req.headers_in['referer']
        except :
                referer = ""
        req.subprocess_env['HTTP_REFERER'] = referer.lower()

        pwd = req.get_basic_auth_pw()
        usr = req.connection.user

        if pwd=="bar" and usr=="f00" :
                return apache.OK
        return apache.HTTP_UNAUTHORIZED

From pfrazao at ualg.pt  Thu May 23 17:41:30 2002
From: pfrazao at ualg.pt (Pedro Miguel Frazao Fernandes Ferreira)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] mod_python and python2.2
Message-ID: <3CED1BBA.4060804@ualg.pt>

Hi All,

First:
Is there any mod_python version known to work with python2.2 ?

Second:
mod_python 2.7.6 compiled ok with python2.2 on a debian (woody) distribution.
Problem is that it fails on the application when handling a form with submited 
files:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

   File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 193, in 
Dispatch
     result = object(req)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 104, 
in handler
     val = File(field)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 308, 
in __init__
     for m in field.file.__methods__:

AttributeError: 'file' object has no attribute '__methods__'

Anyone knows a solution ? If yes will it be safe to use 2.7.6 compiled with 
python2.2 ?

Thanks for any help.
-- 
----------------------------------------------------------------------
Pedro Miguel Frazao Fernandes Ferreira
Universidade do Algarve
Faculdade de Ciencias e Tecnologia
Campus de Gambelas
8000-117 Faro
Portugal
Tel./Fax:  (+351) 289 800950 / 289 819403
http://w3.ualg.pt/~pfrazao


From bob at redivi.com  Thu May 23 15:17:12 2002
From: bob at redivi.com (Bob Ippolito)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] mod_python and python2.2
In-Reply-To: <3CED1BBA.4060804@ualg.pt>
Message-ID: <AF2FCE2C-6E81-11D6-A4E2-0003938210D6@redivi.com>

try dir(field.file) instead of field.file.__methods__

On Thursday, May 23, 2002, at 12:41 PM, Pedro Miguel Frazao Fernandes 
Ferreira wrote:

> AttributeError: 'file' object has no attribute '__methods__'


From s13361562 at bach.sun.ac.za  Thu May 23 22:34:33 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020523201546.GA29705@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet> <20020520200902.GB1048@eleanor.internal.ywlcs.org> <20020523201546.GA29705@vervet.localnet>
Message-ID: <20020523203433.GA30515@vervet.localnet>

> > Build a TransHandler which checks permissions and whatnot, then either (a)
> > calls add_handler with a pythonhandler which will display an error message,
> > menu, etc. or (b) produces the filename of the file that Apache should send
> > along.
> 
> Sorry about asking about this here again, I had a good and wide search
> to find info, but I'm too pressed for time now, and so far searches
> haven't helped me on this last issue:
> 
> I've got TransHandler working nicely, at least, until I don't want it to
> do it's thing: how do I get the "default behaviour", once TransHandler
> determines that it's not a URL that it should handle? I want it to then
> go via the "usual, standard" routes... simply not touching req.filename
> leaves it as "/", I guess I could just prepend /var/www to the
> unparsed_uri, will apache then do it's alias thing, etc? It still
> doesn't seem like the neatest solution though.

Replying to myself ... but I found a little more info, and I want to
send this to the list as well.

I found the following:

"""
apache.DECLINED, meaning this handler refused to handle this phase of
the requestand Apache needs to look for another handler. 
"""

Returning this seems to "work" in some sense, I get the following 404
now:

Not Found The requested URL /show.py/norm was not found on this server.

If I do not have the PythonTransHandler, my "normal" PythonHandler takes
care of this...

Thanks,
Hugo van der Merwe

From dustin at ywlcs.org  Sat May 25 21:32:27 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020526023227.GB25701@eleanor.internal.ywlcs.org>

On Tue, May 21, 2002 at 04:01:49PM -0700, Ian Clelland wrote:
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.
> 

I know this is an old thread, but I might point out that the new 'filters' in
Apache 2.0 will allow this sort of filtering and much, much more.  I'm
eagerly awaiting a stable release of mod_python for httpd-2.0 (well, that and
I need a working PHP).

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May 25 21:40:04 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Apache Handler docs
Message-ID: <20020526024004.GC25701@eleanor.internal.ywlcs.org>

I'm interested in gaining a full understanding of how Apache handlers work.
While I've been working (quite successfully) with mod_python for a while now,
there are still some behaviors that surprise me, because I don't really
understand what Apache's doing under the hood.  The Shambala API notes are
somewhat helpful, but really nothing more than notes -- they see out of date
and leave many of the details unspecified.

So short of reading all of the Apache main and core source (I've read a bit
of it already), does anyone have any pointers to good docs for these sorts of
things?

Thanks!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From grisha at modpython.org  Sat May 25 23:35:53 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Apache Handler docs
In-Reply-To: <20020526024004.GC25701@eleanor.internal.ywlcs.org>
Message-ID: <Pine.BSF.4.32.0205252332440.72278-100000@localhost>

The "Writing Apache modules with mod_perl and C" O'Reilly book is probably
the best reference of Apache internals, but it doesn't cover everything,
especially Apache 2.0 wich is a different beast altogether when it comes
to handlers (or just about anything else really). I've had to read quite a
bit of code when writing mod_python.

Grisha

On Sat, 25 May 2002, Dustin Mitchell wrote:

> I'm interested in gaining a full understanding of how Apache handlers work.
> While I've been working (quite successfully) with mod_python for a while now,
> there are still some behaviors that surprise me, because I don't really
> understand what Apache's doing under the hood.  The Shambala API notes are
> somewhat helpful, but really nothing more than notes -- they see out of date
> and leave many of the details unspecified.
>
> So short of reading all of the Apache main and core source (I've read a bit
> of it already), does anyone have any pointers to good docs for these sorts of
> things?
>
> Thanks!
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From john.garberson at nexos.com  Mon May 27 16:57:52 2002
From: john.garberson at nexos.com (John D. Garberson)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] Sub-request/Internal redirect questions
Message-ID: <200205271457.QAA03404@ws2.nexos.com>

Hi,

I'm new to mod_python and am trying to get a feel for it and the 
Apache API by duplicating the modules that Stein and MacEachern
show in their very nice Apache modules book, but of course using
mod_python instead of mod_perl or C.

A technique that seems to come up fairly often after the first easy
examples is to use sub-requests and redirects. These seem to be generated
by the request object's lookup_file, lookup_uri or internal_redirect
methods.  I don't find any mention of these methods in the mod_python
documentation, and it sort of looks like they haven't been implemented.
But then I've found some other stuff that isn't documented just poking
around in the module's C and python source code, and maybe I'm missing
something obvious.  Also, looking back through the list archives for the
last year or so, I've found some references to work-arounds for the re-
direct stuff.  Maybe people with more experience know other such tricks?

Can anyone give me a tip on how a sub-request (or for that matter, an
internal redirect without using work-arounds) is generated using
mod_python, or what methods can be used to replace this functionality?

Thanks for any ideas.


     John Garberson                             nexos ag 
     john.garberson@nexos.com                   Frobenstrasse 66 
                                                CH-4053 Basel, Switzerland
                                                Tel. 41 61 283 55 03
                                                Fax  41 61 283 55 01

From gbenson at redhat.com  Mon May 27 19:02:56 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] [PATCH] httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205271900230.27285-400000@slippy.rat>


Hi all,

The attached patches to HEAD will allow you to compile and run mod_python
with httpd-2.0.36. There are still a bunch of compiler warnings which I
haven't fixed (but intend to), but it seems to run quite nicely (although
my minimal mod_python knowledge probably isn't stressing it much).

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
An allocator-passing mechanism was added throughout the bucket brigades API

Index: src/filterobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/filterobject.c,v
retrieving revision 1.4
diff -u -r1.4 filterobject.c
--- src/filterobject.c	4 Mar 2002 21:19:17 -0000	1.4
+++ src/filterobject.c	27 May 2002 11:18:30 -0000
@@ -115,6 +115,7 @@
 static PyObject *_filter_read(filterobject *self, PyObject *args, int readline)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     apr_bucket *b;
     long bytes_read;
     PyObject *result;
@@ -135,7 +136,8 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_in) {
-	    self->bb_in = apr_brigade_create(self->f->r->pool);
+	    self->bb_in = apr_brigade_create(self->f->r->pool,
+					     c->bucket_alloc);
 	}
 
 	Py_BEGIN_ALLOW_THREADS;
@@ -290,6 +292,7 @@
 static PyObject *filter_write(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     char *buff;
     int len;
     apr_bucket *b;
@@ -315,10 +318,12 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_out) {
-	    self->bb_out = apr_brigade_create(self->f->r->pool);
+	    self->bb_out = apr_brigade_create(self->f->r->pool,
+					      c->bucket_alloc);
 	}
 	
-	b = apr_bucket_pool_create(buff, len, self->f->r->pool);
+	b = apr_bucket_pool_create(buff, len, self->f->r->pool,
+				   c->bucket_alloc);
 	APR_BRIGADE_INSERT_TAIL(self->bb_out, b);
 	
 	self->bytes_written += len;
@@ -337,12 +342,15 @@
 static PyObject *filter_flush(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     /* does the output brigade exist? */
     if (!self->bb_out) {
-	self->bb_out = apr_brigade_create(self->f->r->pool);
+	self->bb_out = apr_brigade_create(self->f->r->pool, c->bucket_alloc);
     }
 
-    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_flush_create());
+    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+			    apr_bucket_flush_create(c->bucket_alloc));
 
     if (ap_pass_brigade(self->f->next, self->bb_out) != APR_SUCCESS) {
 	PyErr_SetString(PyExc_IOError, "Flush failed.");
@@ -363,16 +371,20 @@
 static PyObject *filter_close(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     if (! self->closed) {
 
 	if (self->bytes_written) {
 
 	    /* does the output brigade exist? */
 	    if (!self->bb_out) {
-		self->bb_out = apr_brigade_create(self->f->r->pool);
+		self->bb_out = apr_brigade_create(self->f->r->pool,
+						  c->bucket_alloc);
 	    }
 
-	    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_eos_create());
+	    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+				    apr_bucket_eos_create(c->bucket_alloc));
 	
 	    if (! self->is_input) {
 		ap_pass_brigade(self->f->next, self->bb_out);
-------------- next part --------------
Various AP_FTYPE_* constants were changed in 2.0.34

Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	27 May 2002 10:50:15 -0000
@@ -1467,7 +1467,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_input_filter(name, python_input_filter, AP_FTYPE_CONTENT);
+    ap_register_input_filter(name, python_input_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
@@ -1491,7 +1491,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_output_filter(name, python_output_filter, AP_FTYPE_CONTENT);
+    ap_register_output_filter(name, python_output_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
-------------- next part --------------
ap_restart_time was moved into the scoreboard global area.

Index: src/serverobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/serverobject.c,v
retrieving revision 1.8
diff -u -r1.8 serverobject.c
--- src/serverobject.c	9 Sep 2001 00:25:37 -0000	1.8
+++ src/serverobject.c	27 May 2002 10:59:54 -0000
@@ -241,7 +241,7 @@
 	return PyInt_FromLong((long)ap_my_generation);
     }
     else if (strcmp(name, "restart_time") == 0) {
-	return PyInt_FromLong((long)ap_restart_time);
+	return PyInt_FromLong((long)ap_scoreboard_image->global->restart_time);
     }
     else
 	return PyMember_Get((char *)self->server, server_memberlist, name);
From gbenson at redhat.com  Tue May 28 12:31:05 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>


Hi,

The attached patches fix most of the compiler warnings when building
against httpd-2.0.36: some const correctness stuff, and a problem with
conn.remote_addr. The rest of the problems stem from the fact that the
input filter API changed in 2.0.31, but I currently have no idea how to
fix that.

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
apr_table_elts() returns const apr_array_header_t *

Index: src/tableobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/tableobject.c,v
retrieving revision 1.8
diff -u -r1.8 tableobject.c
--- src/tableobject.c	28 Nov 2001 05:31:48 -0000	1.8
+++ src/tableobject.c	28 May 2002 11:12:59 -0000
@@ -196,7 +196,7 @@
 {
 
     PyObject *v;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i, j;
 
@@ -303,7 +303,7 @@
 static PyObject * table_repr(tableobject *self)
 {
     PyObject *s;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i;
 
Index: src/requestobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/requestobject.c,v
retrieving revision 1.15
diff -u -r1.15 requestobject.c
--- src/requestobject.c	28 Nov 2001 05:31:48 -0000	1.15
+++ src/requestobject.c	28 May 2002 11:13:04 -0000
@@ -268,7 +268,7 @@
 
     if (apr_table_get(self->request_rec->notes, "py_more_directives")) {
 
-	apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
+	const apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
 	apr_table_entry_t *elts = (apr_table_entry_t *)ah->elts;
 	int i = ah->nelts;
 
Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	28 May 2002 11:13:13 -0000
@@ -1545,7 +1545,7 @@
 static void PythonChildInitHandler(apr_pool_t *p, server_rec *s)
 {
 
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     PyObject *sys, *path, *dirstr;
     interpreterdata *idata;
-------------- next part --------------
Make conn.remote_addr work properly

Index: src/connobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/connobject.c,v
retrieving revision 1.7
diff -u -r1.7 connobject.c
--- src/connobject.c	18 Aug 2001 22:43:45 -0000	1.7
+++ src/connobject.c	28 May 2002 11:11:58 -0000
@@ -194,8 +194,7 @@
 	return PyInt_FromLong(self->conn->double_reverse);
     }
     else if (strcmp(name, "remote_addr") == 0) {
-	/* XXX this needs to be compatible with apr_sockaddr_t */
-	return makesockaddr(&(self->conn->remote_addr));
+	return makesockaddr(&self->conn->remote_addr->sa.sin);
     }
     else if (strcmp(name, "notes") == 0) {
 	Py_INCREF(self->notes);
From grisha at modpython.org  Tue May 28 09:03:46 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
In-Reply-To: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>
Message-ID: <Pine.BSF.4.32.0205280901430.98266-100000@localhost>

Thanks Gary - I'll review and add the patches into HEAD, but it proboably
won't happen a day or two - I'll be very busy today and tomorrow.

Grisha

On Tue, 28 May 2002, Gary Benson wrote:

>
> Hi,
>
> The attached patches fix most of the compiler warnings when building
> against httpd-2.0.36: some const correctness stuff, and a problem with
> conn.remote_addr. The rest of the problems stem from the fact that the
> input filter API changed in 2.0.31, but I currently have no idea how to
> fix that.
>
> Cheers,
> Gary
>
> [ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
>


From mbp at samba.org  Wed May 29 18:24:40 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] [patch] make autoreload more useful
Message-ID: <20020529082436.GK25763@samba.org>

Here is a patch intended to make automatic reload work "properly" in
mod_python: if you change *any* Python source file, then all of them
will be reloaded.  

I think this basically gives the behaviour developers would
intuitively expect: you can just go ahead and edit and the server will
reload as necessary without you needing to remember to kill/restart
Apache.  So the development experience is as immediate as CGI or PHP.

You might ask why it's necessary to reload everything, and not just
the changed module.  The reason is that some other module might still
hold a reference to an object or function inside the changed module,
and that object will still refer to the old code.  

Indeed this will still be a problem if you put a reference to your
code into sys, or one of the other modules that is not reloaded.  I
can't see a clean way to handle that without restarting the whole
interpreter, but I suspect it's a not a very common case.

Of course stat()ing every loaded python file on every mod_python
request has a small performance hit, but I don't think it will be a
problem during development, and the whole thing should be turned off
in production.

I owe a debt to the PyUnit developers for documenting their solution
and therefore saving me a couple of false starts.

The patch is rough as anything and badly needs to be cleaned up and
tested more thoroughly before it being merged or used in production.
(The reload stuff really belongs in a separate module.)  I thought I'd
send it out and see if anyone had any comments, and in particular if
Grisha would take it in principle.  

I've tested this a bit on python2.1 and it seems to work well.  I
might inadvertently have bugs on 1.5, but they can easily be cleaned
up.

-- 
Martin 
tab tab ding!





--- /home/mbp/work/mod_python-2.7.8/lib/python/mod_python/apache.py	Sat Apr 20 04:20:40 2002
+++ /usr/lib/python2.1/site-packages/mod_python/apache.py	Wed May 29 18:03:08 2002
@@ -53,6 +53,7 @@
 import imp
 import types
 import _apache
+import __builtin__
 
 # a small hack to improve PythonPath performance. This
 # variable stores the last PythonPath in raw (unevaled) form.
@@ -62,6 +63,92 @@
 def _cleanup_request(_req):
     _req._Request = None
 
+
+# The idea of rolling back imports comes from Steve Purcell's
+# PyUnit GUI <pyunit.sf.net>, but the implementation is new by Martin Pool.
+
+# The basic idea is that we want to delete everything from sys.modules
+# when the user's code changes, except for system modules.  This is
+# necessary because otherwise one module that has not changed may
+# still be holding references to code objects from a module that has
+# changed.  We have to actually delete them and start again rather
+# than using reload(), because otherwise the first one reloaded may
+# grab references from something that will be reloaded later on.
+
+# Of course this will be a little slow, but it's only used in
+# development so it doesn't really matter.
+_orig_sys_modules = None
+
+def _notice(s, *args):
+    _apache.log_error(s % args, APLOG_NOERRNO|APLOG_NOTICE)
+
+
+def save_orig_modules():
+    global _orig_sys_modules
+    _orig_sys_modules = sys.modules.copy()
+
+
+def check_for_reload(path=None):
+    """Check all non-system modules; if any have changed, reload all"""
+    for module_name, module in sys.modules.items():
+        if _orig_sys_modules.has_key(module_name):
+            continue
+
+        if not module:
+            continue                    # some are None (??)
+
+        file = module.__dict__.get('__file__')
+        oldmtime = module.__dict__.get("__mtime__", 0)
+        if not oldmtime:
+            # If the oldmtime is 0, then it wasn't loaded
+            # through _apache_importer, and so we can't work out if it's
+            # older or not.
+            continue
+
+        mtime = module_mtime(module)
+        # If the file no longer exists, mtime will be 0 and we'll
+        # reload it.
+        if mtime > oldmtime or mtime == 0:
+            _apache.log_error("mod_python: %s has been changed; mtime=%d oldmtime=%d" %
+                              (file, mtime, oldmtime),
+                              APLOG_NOERRNO|APLOG_NOTICE)
+            return reload_user_modules()
+        
+
+def reload_user_modules():
+    """Reload all modules except system modules"""
+    _apache.log_error("mod_python: discard user modules",
+                      APLOG_NOERRNO|APLOG_NOTICE)
+    for module_name in sys.modules.keys():
+        if not _orig_sys_modules.has_key(module_name):
+            del sys.modules[module_name]
+
+
+def _get_sub_module(top_module, module_name):
+    module = top_module
+    for part in string.split(module_name, '.')[1:]:
+        module = getattr(module, part)
+    return module
+
+def _apache_importer(module_name, globals=None, locals=None, fromlist=None):
+    # Just defer to the built-in importer, but annotate the returned module with
+    # its modification time
+    parent_module = _original_import(module_name, globals, locals, fromlist)
+    
+    if '.' in module_name:
+        submodule = _get_sub_module(parent_module, module_name)
+    else:
+        submodule = parent_module
+        
+    if _debug:
+        s = 'mod_python: importing %s got parent %s, sub %s' % (module_name, `parent_module`,
+                                                                `submodule`)
+        _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
+    submodule.__mtime__ = module_mtime(submodule)
+    _notice("submodule mtime is %d" % submodule.__mtime__)
+    return parent_module
+
+
 class Request:
     """ This is a normal Python Class that can be subclassed.
         However, most of its functionality comes from a built-in
@@ -285,6 +372,8 @@
             etb = None
             # we do not return anything
 
+
+
 def import_module(module_name, req=None, path=None):
     """
     Get the module to handle the request. If
@@ -299,52 +388,27 @@
         debug = config.has_key("PythonDebug")
         if config.has_key("PythonAutoReload"):
             autoreload = int(config["PythonAutoReload"])
- 
-    # (Re)import
-    if sys.modules.has_key(module_name):
-        
-        # The module has been imported already
-        module = sys.modules[module_name]
-
-        # but is it in the path?
-        file = module.__dict__.get("__file__")
-        if not file or (path and not os.path.dirname(file) in path):
-                raise SERVER_RETURN, HTTP_NOT_FOUND
-
-        if autoreload:
-            oldmtime = module.__dict__.get("__mtime__", 0)
-            mtime = module_mtime(module)
-        else:
-            mtime, oldmtime = 0, 0
-
-    else:
-        mtime, oldmtime = 0, -1
- 
-    if mtime > oldmtime:
-
-        # Import the module
-        if debug:
-            s = 'mod_python: (Re)importing %s from %s' % (module_name, path)
-            _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
-
-        parts = string.split(module_name, '.')
-        for i in range(len(parts)):
-            f, p, d = imp.find_module(parts[i], path)
-            try:
-                mname = string.join(parts[:i+1], ".")
-                module = imp.load_module(mname, f, p, d)
-            finally:
-                if f: f.close()
-            if hasattr(module, "__path__"):
-                path = module.__path__
 
-        if mtime == 0:
-            mtime = module_mtime(module)
-
-        module.__mtime__ = mtime
- 
+    # mbp -- for debugging
+    ##    _apache.log_error("sys.modules is: %s" % sys.modules,
+    ##                      APLOG_NOERRNO|APLOG_NOTICE)
+
+    if autoreload:
+        # just check *all* modules, and discard non-system modules if
+        # any have changed
+        check_for_reload(path)
+
+    # the __import__ function returns the *top-level module*, not the one
+    # we actually asked for.  after importing, we need to walk down to
+    # get the real thing.
+    _notice("import_module %s" % module_name)
+    top_module = __import__(module_name)
+    _notice("import_module %s got top %s" % (module_name, top_module))
+    module = _get_sub_module(top_module, module_name)
+    _notice("import_module for %s returned %s" % (module_name, module))
     return module
 
+
 def module_mtime(module):
     """Get modification time of module"""
     mtime = 0
@@ -377,6 +441,8 @@
        class passing the request as single argument
     """
 
+    _notice("resolve obj %s in %s" % (object_str, module))
+
     obj = module
 
     for obj_str in  string.split(object_str, '.'):
@@ -609,6 +675,14 @@
     """ 
         This function is called by the server at startup time
     """
+    global _original_import, _debug
+    
+    # keep this in case we want it
+    _original_import = __builtin__.__import__
+    _notice("about to hook importer")
+    __builtin__.__import__ = _apache_importer
+    _notice("importer hooked")
+    _debug = 1
 
     return CallBack()
 
@@ -618,6 +692,14 @@
 parse_qs = _apache.parse_qs
 parse_qsl = _apache.parse_qsl
 
+## Keep track of modules already loaded; anything after this is fair game
+## to be reloaded
+save_orig_modules()
+
+# XXX: We perhaps ought to hook reload() as well to make sure it's
+# consistent, but at the moment I think it does no harm to let it
+# default.
+
 ## Some constants
 
 HTTP_CONTINUE                     = 100
@@ -708,28 +790,4 @@
 REQ_EXIT = "REQ_EXIT"         
 SERVER_RETURN = _apache.SERVER_RETURN
 PROG_TRACEBACK = "PROG_TRACEBACK"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 

From dustin at ywlcs.org  Wed May 29 07:45:05 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529082436.GK25763@samba.org>
References: <20020529082436.GK25763@samba.org>
Message-ID: <20020529124504.GG1280@eleanor.internal.ywlcs.org>

On Wed, May 29, 2002 at 06:24:40PM +1000, Martin Pool wrote:

> +# The basic idea is that we want to delete everything from sys.modules
> +# when the user's code changes, except for system modules.  This is
> +# necessary because otherwise one module that has not changed may
> +# still be holding references to code objects from a module that has
> +# changed.  We have to actually delete them and start again rather
> +# than using reload(), because otherwise the first one reloaded may
> +# grab references from something that will be reloaded later on.

Two things:

1. I'm not sure how gc interacts with this, but there was a time when you
just couldn't get rid of a loaded module object.  All of the modules you
delete will still reference each other in some sort of cycle. If they're not
deleted you could very quickly end up with an enormous httpd process.

Even with gc, if there are any dangling references into one of the old
modules (an atexit function? somewhere the Python standard libraries cache a
reference?) then you're going to have a bloated httpd.

I wrote a reloader similar to this one, and my solution to this was to watch
the number of reloads, and call req.child_terminate() after a certain number
(I picked 10) or reloads.


2. One other difficulty: some modules actually *do* want to have global
state.  For example, a MySQL interface should be able to establish its
connection once and maintain that through many requests.  Perhaps there
should be a mechanism for a module to say "don't remove me!", or at least
"preserve the value of this variable".


Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From ian at veryfresh.com  Wed May 29 15:57:38 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020529225738.GB553@fullfactor.com>

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.

But in general, you can't guarantee this in *any* situation. All of the 
modules have to work properly when none of their resources are 
installed (say, on server startup,) and they have to be prepared to die 
at any point.

Usually, persistent connections are used for performance reasons only; 
the modules would otherwise be perfectly happy re-opening every 
database connection on every hit.

This auto-reload feature should only be used during development anyway, 
so performance issues like this shouldn't be a problem (turn it off 
during heavy load testing, of course), and it would be much easier than 
completely restarting the web server after every source file change, 
which is what I'm currently doing.


> Perhaps there should be a mechanism for a module to say "don't remove 
> me!", or at least "preserve the value of this variable".

I don't think this is possible in the general case (and I'm pretty sure 
Python doesn't support it). What would happen if a new version of the 
source file uses a different name for the variable? Or worse, uses the 
same variable (name) for a completely different purpose?


Ian
<ian@veryfresh.com>

From mbp at samba.org  Thu May 30 10:38:51 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:52:51 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020530003850.GC29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> 1. I'm not sure how gc interacts with this, but there was a time when you
> just couldn't get rid of a loaded module object.  All of the modules you
> delete will still reference each other in some sort of cycle. If they're not
> deleted you could very quickly end up with an enormous httpd process.

Here's a nickel; get a bigger computer :-)

> Even with gc, if there are any dangling references into one of the old
> modules (an atexit function? somewhere the Python standard libraries cache a
> reference?) then you're going to have a bloated httpd.

Using atexit functions within mod_python is pretty pointless, but your
general point about references held by system modules is correct.

If my code bloated that easily because of reloading modules then I
would be somewhat worried that something would cause it to happen
during production, and I'd feel I ought to investigate what was going
wrong.

You can always turn down MaxRequestsPerChild, or indeed turn off
autoreload.

I guess in general I believe that in development mode (as opposed to
release), correctness and developer productivity is more important
than performance.

In deployment mode, there shouldn't be any bloat because the .py files
won't change.  The cost is just stat'ing them each time, which is a
slight cost but not terrible.

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.  Perhaps there
> should be a mechanism for a module to say "don't remove me!", or at least
> "preserve the value of this variable".

As far as I can see, the only non-bogus use of persistence is
opportunistic caching.  Modules have to cope with losing their
persistent state because (a) requests are unpredictably spread across
Apache instances; (b) Apache can kill and restart children; (c)
relying on it is overly fragile; and (d) without a working reload
mechanism, the programmer will be completely restarting Apache at
intervals anyhow.

-- 
Martin 

From dustin at ywlcs.org  Wed May 29 19:45:44 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:52 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
Message-ID: <20020530004544.GF2519@eleanor.internal.ywlcs.org>

Sorry, meant to send this to the list..

-----

On Wed, May 29, 2002 at 03:57:38PM -0700, Ian Clelland wrote:
> > 2. One other difficulty: some modules actually *do* want to have global
> > state.  For example, a MySQL interface should be able to establish its
> > connection once and maintain that through many requests.
> 
> But in general, you can't guarantee this in *any* situation. All of the 
> modules have to work properly when none of their resources are 
> installed (say, on server startup,) and they have to be prepared to die 
> at any point.
> 
> Usually, persistent connections are used for performance reasons only; 
> the modules would otherwise be perfectly happy re-opening every 
> database connection on every hit.

Right, and in a development environment (the only place one would use a
reloader) I suppose that would be acceptable.  However, if you're testing
against the production database server (a not-unreasonable proposition for a
small to midsize shop with a complex database schema), all those extra
connections might prove to be a burden.  And you can't guarantee that Python
will close them when the module is "unloaded", as the module may continue to
exist for some time.

I'm sorry to be pedantic.  I'm not arguing that such a feature is *required*,
or necessary for any purpose (gee, don't test against your production
database server!), but that it would have *some* benefits, at *minimal* cost
(see below regarding cost), and is thus a win overall.

> This auto-reload feature should only be used during development anyway, 
> so performance issues like this shouldn't be a problem (turn it off 
> during heavy load testing, of course), and it would be much easier than 
> completely restarting the web server after every source file change, 
> which is what I'm currently doing.
> 
> 
> > Perhaps there should be a mechanism for a module to say "don't remove 
> > me!", or at least "preserve the value of this variable".
> 
> I don't think this is possible in the general case (and I'm pretty sure 
> Python doesn't support it). What would happen if a new version of the 
> source file uses a different name for the variable? Or worse, uses the 
> same variable (name) for a completely different purpose?

As to the first suggestion (a mechanism for a module to say "don't remove
me!"), that is already supported in that you do not reload Python standard
modules.  Perhaps you could add a check for a __no_reload__ symbol or the
like?

Regarding permanent variables, under ordinary Python reload semantics, you
can do something like:

try:
  x = my_retained_variable
  del x
except:
  my_retained_variable = initial_value

but that's just for the record.  I can't see why you could possibly want to
do that, *particularly* in mod_python.   :-)

Dustin

--

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

----- End forwarded message -----

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Wed May 29 19:53:12 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:52 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530003850.GC29848@samba.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org>
Message-ID: <20020530005312.GG2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 10:38:51AM +1000, Martin Pool wrote:
>
> > Even with gc, if there are any dangling references into one of the old
> > modules (an atexit function? somewhere the Python standard libraries cache a
> > reference?) then you're going to have a bloated httpd.
> 
> Using atexit functions within mod_python is pretty pointless, but your
> general point about references held by system modules is correct.
> 
> If my code bloated that easily because of reloading modules then I
> would be somewhat worried that something would cause it to happen
> during production, and I'd feel I ought to investigate what was going
> wrong.
> 
> You can always turn down MaxRequestsPerChild, or indeed turn off
> autoreload.

Ah!  I had forgotten MaxRequestsPerChild, which lets Apache take care of
counting reloads, so a Python reloader need not worry about it.

> I guess in general I believe that in development mode (as opposed to
> release), correctness and developer productivity is more important
> than performance.

I don't disagree.  You'll note that I'm arguing for features on the basis of
developer convenience at minimal (but not zer) performance cost, which
translates into developer productivity.

> In deployment mode, there shouldn't be any bloat because the .py files
> won't change.  The cost is just stat'ing them each time, which is a
> slight cost but not terrible.

And the cost will be zero, if AutoReload is turned off :-)

> As far as I can see, the only non-bogus use of persistence is
> opportunistic caching.  Modules have to cope with losing their
> persistent state because (a) requests are unpredictably spread across
> Apache instances; (b) Apache can kill and restart children; (c)
> relying on it is overly fragile; and (d) without a working reload
> mechanism, the programmer will be completely restarting Apache at
> intervals anyhow.

True, but there are valid reasons to want to test and develop such
opportunistic caching mechanisms (since anything opportunistic is by at least
a little bit nondeterministic, it probably needs the most testing).  There
are also performance implications, as I detailed in my other reply in this
thread (<20020530004544.GF2519@eleanor.internal.ywlcs.org>).  As I said a few
paragraphs earlier, developer convenience with minimal impact on
performance.

BTW: I assume you're not implying that opportunistic caching is overly
fragile!  It's a great technique!  Relying on not being reloaded, however, is
obviously stupid, since the Apache API *will* reload you :-)

I don't actually care too much about this whole thing; just putting in my
$0.02.  If y'all are really opposed to it, don't put it in.  I'll still love
you, and you can keep the pennies. :-)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From mbp at samba.org  Thu May 30 11:02:10 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:52:52 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010206.GD29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> Right, and in a development environment (the only place one would use a
> reloader) I suppose that would be acceptable.  However, if you're testing
> against the production database server (a not-unreasonable proposition for a
> small to midsize shop with a complex database schema), all those extra
> connections might prove to be a burden.  And you can't guarantee that Python
> will close them when the module is "unloaded", as the module may continue to
> exist for some time.

(I realize it's only an example.)

How often are developers changing and testing their code -- every few
minutes at most?  Suppose every ten seconds on average if you have a
few developers.  If your database can't cope with merely opening and
closing connections at that frequency I think you have big problems
that need to be addressed in some other way.  (More hardware, local
cache, ...)

It's equally or more likely that holding idle connections open
indefinitely would cause resource problems.

Anyhow, such a shop could always forbid use of the reloader.  There's
no need to penalize all users for the sake of this rare and
hypothetical case.

> Regarding permanent variables, under ordinary Python reload semantics, you
> can do something like:

I guess you could just stick the reference into somewhere in sys, but
of course that might result in other modules that you *do* want to
have reloaded actually not being so.

I think the real problem is that without reloading, if you ever forget
to restart Apache, different apache children can have different
versions of the code, which is very confusing.

-- 
Martin 

From mbp at samba.org  Thu May 30 11:08:15 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:52:52 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530005312.GG2519@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org> <20020530005312.GG2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010814.GE29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> And the cost will be zero, if AutoReload is turned off :-)

Yes, that's the nice thing.

> True, but there are valid reasons to want to test and develop such
> opportunistic caching mechanisms (since anything opportunistic is by at least
> a little bit nondeterministic, it probably needs the most testing).

Yes.  You can test them (without changing the code) perfectly well
with this patch.  If you're changing the caching code then by
definition you need to restart one way or another.

Indeed, having objects in memory where the same datastructure is
modified by different versions of the code (with different bugs)
sounds like a recipe for confusion.  Suppose an earlier version of the
cache code actually broke one of the data structure invariants on the
cache -- you *want* to dump and reinitialize the thing.

> BTW: I assume you're not implying that opportunistic caching is overly
> fragile!  It's a great technique!  Relying on not being reloaded, however, is
> obviously stupid, since the Apache API *will* reload you :-)

Yes, that's what I meant: it's only dumb if you *rely* on persistence,
rather than just taking advantage of it when it happens.

Indeed an important part of testing that kind of code would be to set
MaxRequestsPerChild to a low number and make sure that it still works
when it is always being flushed.

-- 
Martin 

Every Python user scoffed at it once, saying significant whitespace is
the past.
	-- Moshe Zadka (?)

From dustin at ywlcs.org  Wed May 29 20:24:02 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:52 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530010206.GD29848@samba.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org> <20020530010206.GD29848@samba.org>
Message-ID: <20020530012402.GH2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 11:02:10AM +1000, Martin Pool wrote:
> 
> Anyhow, such a shop could always forbid use of the reloader.  There's
> no need to penalize all users for the sake of this rare and
> hypothetical case.

I guess I don't see the penalty.  I'm talking about adding a mechanism to
prevent *only certain modules* from being reloaded, e.g. add

..
__no_reload__ = 1  # don't reload this module, please
..

to your module and the reloader will leave it alone.

I think that there are a few -- admittedly border, obscure -- cases where
such a feature would be useful / convenient during development, and that the
implementation cost is nearly nothing.

To demonstrate unequivocally what I mean, here's a patch that can be applied
after the original patch at the root of this thread:

*** apache-orig Wed May 29 20:16:58 2002
--- apache.py   Wed May 29 20:18:08 2002
***************
*** 121,127 ****
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):
--- 121,128 ----
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             if not hasattr(sys.modules[module_name], '__no_reload__'):
!                 del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):

From vmanera at manord.com  Thu May 30 16:59:46 2002
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:52:52 2004
Subject: [mod_python] problem in file download
Message-ID: <801EB84B006ED411898D00B0D03E524712CCA7@PROXYMAIL>

Hello,

I'm trying to download a file:

client side:
<FORM METHOD="POST"
ACTION="http://sviluppo.manord.com/cgi-mpy/prova.py/printfile "
ENCTYPE="multipart/form-data" NAME="FormDati">
<center>
<INPUT TYPE="file" NAME="file1"></center>
<center>
<INPUT TYPE="submit" NAME="invia" VALUE="Invia Dati"></center>

</FORM>

when I sumitted a file mod_python give me this:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "C:\Program Files\Python22\Lib\mod_python\apache.py", line 193, in
Dispatch
    result = object(req)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 104, in
handler
    val = File(field)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 308, in
__init__
    for m in field.file.__methods__:

  File "C:\programmi\Python22\Lib\tempfile.py", line 178, in __getattr__
    a = getattr(file, name)

AttributeError: 'file' object has no attribute '__methods__'


does anyone have any idea to solve this?

Villiam


From conrad at hep.caltech.edu  Thu May 30 18:20:56 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:52:52 2004
Subject: [mod_python] Serving files efficiently
Message-ID: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>

Hi

Looking at the previous thread on serving files got me thinking:

I'm also trying to serve a file (or part of a file) in response to an
xmlrpc query. Since URL filtering etc. is not an option in this case, is
there a way to tell apache to do a sendfile() or similar from
mod_python? I'm sure this would be more efficient that my current method
of (roughly) reading to a buffer and then sending the buffer with
req.write() and constructing my own headers.

Any ideas?

Cheers!

Conrad
-- 
*-----------------------------------------*
| Conrad Steenberg                        |
| Caltech, Mail Code 356-48               |
| Pasadena, CA, 91125                     |
| e-mail: conrad@hep.caltech.edu          |
| Tel: (626) 395-8758                     |
*-----------------------------------------*


From dustin at ywlcs.org  Thu May 30 21:07:34 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:52:52 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
Message-ID: <20020531020733.GB11734@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> Hi
> 
> Looking at the previous thread on serving files got me thinking:
> 
> I'm also trying to serve a file (or part of a file) in response to an
> xmlrpc query. Since URL filtering etc. is not an option in this case, is
> there a way to tell apache to do a sendfile() or similar from
> mod_python? I'm sure this would be more efficient that my current method
> of (roughly) reading to a buffer and then sending the buffer with
> req.write() and constructing my own headers.

Since sendfile() is pretty much what Apache will do anyway, you can just call
sendfile() from Python.  There's a Python implementation of sendfile in
Medusa (I haven't tested it, but it's in the source).  You could also SWIG
it.

http://www.nightmare.com/medusa/
http://www.swig.org/

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From conrad at hep.caltech.edu  Thu May 30 22:57:05 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:52:52 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <20020531020733.GB11734@eleanor.internal.ywlcs.org>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu> 
	<20020531020733.GB11734@eleanor.internal.ywlcs.org>
Message-ID: <1022824630.3487.0.camel@charter-187-163.caltech.edu>

Hi Dustin

Thanks! I'll try it tomorrow :-)

Conrad

On Thu, 2002-05-30 at 19:07, Dustin Mitchell wrote:
> On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> > Hi
> > 
> > Looking at the previous thread on serving files got me thinking:
> > 
> > I'm also trying to serve a file (or part of a file) in response to an
> > xmlrpc query. Since URL filtering etc. is not an option in this case, is
> > there a way to tell apache to do a sendfile() or similar from
> > mod_python? I'm sure this would be more efficient that my current method
> > of (roughly) reading to a buffer and then sending the buffer with
> > req.write() and constructing my own headers.
> 
> Since sendfile() is pretty much what Apache will do anyway, you can just call
> sendfile() from Python.  There's a Python implementation of sendfile in
> Medusa (I haven't tested it, but it's in the source).  You could also SWIG
> it.
> 
> http://www.nightmare.com/medusa/
> http://www.swig.org/
> 
> Dustin
> 
> -- 
> 
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
-- 


From Nik.Barron at pennantplc.co.uk  Wed May  1 12:16:53 2002
From: Nik.Barron at pennantplc.co.uk (Nik Barron)
Date: Fri Jan  9 21:59:20 2004
Subject: [mod_python] mod_python.publisher problems: 404s on second an
	d subsequent hits
Message-ID: <F17550784FF9D111B7F100E02921B24741E8DD@NT-SOTON-001>

Hi,

Still having problems with this, even with the 2.7.8 apache.py installed;
anyone have any suggestions?

Nik

From jquinte at fadu.uba.ar  Thu May  2 18:31:05 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 21:59:20 2004
Subject: [mod_python] I need advice, please...
Message-ID: <200205021536.SAA11506@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi !!!
I have seen an example in the FAQ to share the connection to the Database 
between many modules using a global variable. I was trying to do the same but 
I realize that a new connection is established every time I click a link. All 
works fine until all the job is done and I return apache.OK. After that, the 
variable holding my DB Connection seems to get lost and I have to connect 
again. Someone told me that I should use any module that let me share memory. 
That's ok and I've done that too, but everyone uses pickle to convert the 
object to a string. The matter is that Connection Objects cannot be converted 
by pickle. Does any of you have any idea, please?

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE80bAadBzRnlFl4cgRAvdkAKC3jI734xIwvVPOR0Fh5Jd5nIT6xgCgqLay
ry5lDNqh+XaV01ee7WSSO0k=
=x9WS
-----END PGP SIGNATURE-----

From johannes at erdfelt.com  Thu May  2 20:16:08 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:59:20 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <200205021536.SAA11506@www.fadu.uba.ar>; from jquinte@fadu.uba.ar on Thu, May 02, 2002 at 06:31:05PM -0300
References: <200205021536.SAA11506@www.fadu.uba.ar>
Message-ID: <20020502201608.S21887@sventech.com>

On Thu, May 02, 2002, Javier Quinteros <jquinte@fadu.uba.ar> wrote:
> I have seen an example in the FAQ to share the connection to the Database 
> between many modules using a global variable. I was trying to do the same but 
> I realize that a new connection is established every time I click a link. All 
> works fine until all the job is done and I return apache.OK. After that, the 
> variable holding my DB Connection seems to get lost and I have to connect 
> again. Someone told me that I should use any module that let me share memory. 
> That's ok and I've done that too, but everyone uses pickle to convert the 
> object to a string. The matter is that Connection Objects cannot be converted 
> by pickle. Does any of you have any idea, please?

The problem is that Apache forks off a number of children to handle all
of the requests.

It's probably not forgetting the value, it's just that you're hitting a
new Apache child.

Using the code in the FAQ, you'll have one database connection per child
maximum, which is usually reasonable.

JE


From modpython at smartology.nl  Fri May  3 11:21:09 2002
From: modpython at smartology.nl (Remy C. Cool)
Date: Fri Jan  9 21:59:20 2004
Subject: [mod_python] problem with mod_python authentication via postgresql
Message-ID: <E173ZFY-0003vE-00@osiris>

I'm experimenting with python/mod_python and run into a problem with 
autentication...  

I use the following code:

# authenticate user
import psycopg
import string
import time
from mod_python import apache


def authenhandler(req):

   pw = req.get_basic_auth_pw()
   user = req.connection.user

   # create database connection
   connectstring = "dbname=testbase user=tester password=test 
port=5432"
   dbconn = psycopg.connect(connectstring)
   dbhandle = dbconn.cursor()
   # define query
   dbhandle.execute("SELECT user_id,password FROM users WHERE 		   
username = %s", (user,))
   # retrieve results
   results = dbhandle.fetchall()
   total = len(results)

   if total < 1:
      # user not known on this system
      return apache.HTTP_UNAUTHORIZED
   else:
      if total > 2:
         # database corrupted
         return apache.HTTP_UNAUTHORIZED
      else:
         # extract user_id from list
         user_id = results[0][0]
         # get host info
         curhost = req.get_remote_host(apache.REMOTE_NAME)
         # register login try
         dbhandle.execute("""INSERT INTO login (user_id,host) VALUES 
( %d,%s )""", (user_id,curhost))
         dbconn.commit()
         # extract password from list
         passwd = string.strip(results[0][1])
         # compare password with given
         if pw == passwd:
            # user authenticated
            return apache.OK
         else:
            # incorrect password
            return apache.HTTP_UNAUTHORIZED

Authentication works. The username is looked up in the database and 
if the password is OK, access is granted. The problem is that for 
every login attempt (or page refresh) I get 4 entry's in my login 
table ond not one. What am I doing wrong here ?

Regards,
Remy Cool

From dustin at ywlcs.org  Sat May  4 14:28:21 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:20 2004
Subject: [mod_python] Powered by mod_python logo?
Message-ID: <20020504192821.GA2017@eleanor.internal.ywlcs.org>

Anyone have a logo or icon appropriate for sticking in the corner of
mod_python-generated pages?  Similar to "powered by PHP" or "powered by
Apache" or whatever?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May  4 15:35:41 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:20 2004
Subject: [mod_python] Unrelated: add_handler()'s 3rd argument
Message-ID: <20020504203540.GB2017@eleanor.internal.ywlcs.org>

From jquinte at fadu.uba.ar  Mon May  6 15:45:16 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <20020502201608.S21887@sventech.com>
References: <200205021536.SAA11506@www.fadu.uba.ar> <20020502201608.S21887@sventech.com>
Message-ID: <200205061250.PAA24036@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks, Johannes !!!
You are right !!!

On Thursday 02 May 2002 21:16, Johannes Erdfelt wrote:
> The problem is that Apache forks off a number of children to handle all
> of the requests.
>
> It's probably not forgetting the value, it's just that you're hitting a
> new Apache child.
>
> Using the code in the FAQ, you'll have one database connection per child
> maximum, which is usually reasonable.
>
> JE
>

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE81s9CdBzRnlFl4cgRAi6OAJ9cF/MsGGwPrrLc8Ndb5vjOfrkaAQCeKu2q
hyhynnJHZE/2wIvUo6wp1XA=
=4MNL
-----END PGP SIGNATURE-----

From s_lott at yahoo.com  Thu May  9 04:58:04 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] Subclassing Request
Message-ID: <20020509115804.16929.qmail@web9607.mail.yahoo.com>

I'd like to use a subclass of Request that includes creating a
FieldStorage instance automatically when the Request is created.

Can this be done by subclassing Request, subclassing CallBack to
use the new subclass of Request and then providing a new init()
function in my file?

If not, how do you suggest I create my own subclass of Request?

Also, unrelated, is it possible to add an items() method to tableobject.c?

=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
Yahoo! Shopping - Mother's Day is May 12th!
http://shopping.yahoo.com

From stas at mail.ru  Fri May 10 09:11:25 2002
From: stas at mail.ru (Stas)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] Привет!
Message-ID: <200205101611.g4AGBPc04412@asteroid.powweb.com>

Ваш компьютер не справляется с работой? 
Долго загружаются программы, новая игра не радует?

Ваши проблемы - не в устаревшем железе, а в ненастроенном компьютере! 
Хотите вдвое увеличить производительность вашего процессора? 
Забыть о разорвавшемся коннекте и зависшем Windows? 

Тогда эта программа для вас!
Она поможет правильно настроить ваш комьютер и периферийное оборудование, 
что вдвое повысит производительность, устранит неполадки и решит проблемы, 
из-за которых Windows часто зависает. Вы сможете так настроить модем, 
что практически при любой скорости и любом провайдере он будет держать соединение.

Совершенно бесплатно загрузить программу можно здесь

http://xtremetechs.by.ru

http://www.az.ru/xtremetech

С уважением, команда разработчиков X-Treme Technologies ®



*** Программа не содержит вирусов.

-------------------------------------------------------------------------
To be removed from this mailing list
click on the link below 
http://muziki-na-ohotecom.powweb.com/cgi-bin/mail.cgi?mod_python@modpython.org



From support at obantec.net  Fri May 10 20:03:51 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] Apache warning on start
Message-ID: <03af01c1f855$6f782d20$0a01a8c0@gamma>

Hi

New to python.
I just added mod_python to my apache 1.3.24 on redhat 7.2 and although it
runs ok i see this error on start

[warn] Loaded DSO libexec/mod_python.so uses plain Apache 1.3 API, this
module might crash under EAPI! (please recompile it with -DEAPI)

Mark


From s13361562 at bach.sun.ac.za  Sat May 11 17:44:27 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] getting username when using publisher auth
Message-ID: <20020511154427.GA12177@vervet.localnet>

Is it possible to get at the username from "normal code" when
authentication is done using __auth__ methods? req.connection.user is
None...

def test(req):
    def __auth__(req, user, passwd):
        if user == "eggs" and passwd == "spam":
            return 1
        else:
            return 0

    return "Hello "+str(req.connection.user)

returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
not help.

Thanks,
Hugo van der Merwe

From suselist at blackball.biz  Sun May 12 01:22:39 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] mod_python 2.7.8
Message-ID: <595450206.20020512012239@blackball.biz>

Hello,

i have a big (?) problem.
I've just installed mod_python 2.7.8
On SuSE Linux 7.2 with apache.

So i've added the required lines in Apache.
Apache tells me, that this modul might crash under EAPI.

And when I start a python-script via Brwoser i get the source code.
What might i have done false?

THX

Stephan

Sorry for my bad english!




From jwm-mod_python at sentinelchicken.net  Sat May 11 16:56:02 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <595450206.20020512012239@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 01:22:39AM +0200
References: <595450206.20020512012239@blackball.biz>
Message-ID: <20020511165602.A7089@samson.sentinelchicken.net>

On Sun, May 12, 2002 at 01:22:39AM +0200, Stephan Pienitz wrote:
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.

What does your httpd.conf look like? Did you specify a handler in you script?

> 
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
> 
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
> 
> THX
> 
> Stephan
> 
> Sorry for my bad english!
> 
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From rien at yeepa.org  Sun May 12 10:29:27 2002
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] getting username when using publisher auth
References: <20020511154427.GA12177@vervet.localnet>
Message-ID: <000d01c1f98f$21eca140$2cee4cd4@RANDOM>

From: "Hugo van der Merwe" <s13361562@bach.sun.ac.za>
> def test(req):
>     def __auth__(req, user, passwd):
>         if user == "eggs" and passwd == "spam":
>             return 1
>         else:
>             return 0
> 
>     return "Hello "+str(req.connection.user)
> 
> returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
> not help.

try calling "req.get_basic_auth_pw()" BEFORE calling "req.connection.user"

-- 
rien




From mateusz at ant.gliwice.pl  Sun May 12 20:05:12 2002
From: mateusz at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
Message-ID: <200205121805.g4CI5Ks00385@eden.ispol.com>

I tried all afternoon without success :(
First I compiled python 2.2.1 

Python-2.2.1]$ ./configure --without-threads
$make
It went Ok (with two warnings)

then  I did:
mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr 
--bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share 
--includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec 
--localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man 
--infodir=/usr/share/info --with-apxs=/usr/sbin/apxs 
--with-python=/home/matkor/src/Python-2.2.1

It complained about:
checking what libraries Python was linked with... grep: 
/home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or 
directory

make again went OK, but make install failed:

$ make install
make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'

Performing DSO installation.

/usr/bin/install -c src/mod_python.so /usr/lib/apache
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
/usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
python /usr/local/lib/python2.2/compileall.py 
/usr/local/lib/python2.2/site-packages/mod_python
python: can't open file '/usr/local/lib/python2.2/compileall.py'
make[2]: *** [install_py_lib] B??d 2

Having copying mod_pytho.so manually to /usr/lib/apache/
results an error:

$ /etc/rc.d/init.d/httpd configtest
Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
Cannot load /etc/httpd/modules/mod_python.so into server: 
/etc/httpd/modules/mod_python.so: undefined symbol: openpty

Any ideas ?
TIA

-- 
Mateusz Korniak

From grisha at modpython.org  Sun May 12 15:10:52 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] Does anybody succeded in running mod_python with
 python 2.x under RH 7.x ?
In-Reply-To: <200205121805.g4CI5Ks00385@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205121509520.842-100000@localhost>

Try configuring it with just one argument:

./configure --with-apxs=/usr/sbin/apxs

Grisha

On Sun, 12 May 2002, Mateusz Korniak wrote:

> I tried all afternoon without success :(
> First I compiled python 2.2.1
>
> Python-2.2.1]$ ./configure --without-threads
> $make
> It went Ok (with two warnings)
>
> then  I did:
> mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr
> --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share
> --includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec
> --localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man
> --infodir=/usr/share/info --with-apxs=/usr/sbin/apxs
> --with-python=/home/matkor/src/Python-2.2.1
>
> It complained about:
> checking what libraries Python was linked with... grep:
> /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
> grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or
> directory
>
> make again went OK, but make install failed:
>
> $ make install
> make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
> make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'
>
> Performing DSO installation.
>
> /usr/bin/install -c src/mod_python.so /usr/lib/apache
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> /usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
> python /usr/local/lib/python2.2/compileall.py
> /usr/local/lib/python2.2/site-packages/mod_python
> python: can't open file '/usr/local/lib/python2.2/compileall.py'
> make[2]: *** [install_py_lib] B??d 2
>
> Having copying mod_pytho.so manually to /usr/lib/apache/
> results an error:
>
> $ /etc/rc.d/init.d/httpd configtest
> Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
> Cannot load /etc/httpd/modules/mod_python.so into server:
> /etc/httpd/modules/mod_python.so: undefined symbol: openpty
>
> Any ideas ?
> TIA
>
> --
> Mateusz Korniak
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From Mateusz.Korniak at ant.gliwice.pl  Sun May 12 21:48:52 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
In-Reply-To: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
References: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
Message-ID: <200205121948.g4CJmts01196@eden.ispol.com>

On Sunday 12 May 2002 21:10, you wrote:
> Try configuring it with just one argument:
>
> ./configure --with-apxs=/usr/sbin/apxs

If I did so it found old python (under RH there are two separate executables 
python is 1.5.x and python2 is 2.x )
checking Python version... 1.5

So I fooled ./configure by
$ cp /usr/bin/python2.2 /usr/bin/python 
then it worked OK but got big warning about python threadness

checking Python version... 2.2
checking whether Python is compiled with thread support... yes

  ****** WARNING ******
  Python is compiled with thread support. Apache 1.3 does not use threads.
  On some systems this will cause problems during compilation, on others
  it may result in unpredictable behaviour of your Apache server. Yet on
  others it will work just fine. The recommended approach is to compile
  Python without thread support in a separate location and specify it with
  --with-python option to this ./configure script.

also I got warning during startup:

# /etc/rc.d/init.d/httpd configtest
[Sun May 12 21:23:44 2002] [warn] Loaded DSO modules/mod_python.so uses plain 
Apache 1.3 API, this module might crash under EAPI! (please recompile it with 
-DEAPI)
Syntax OK
[root@beauty /root]# /etc/rc.d/init.d/httpd graceful
/usr/sbin/apachectl graceful: httpd gracefully restarted

but apache seems to work. :)))
I don't know how dangerous are those warnings .. but thanks a lot for help ;)


-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From fuf at mobil.cz  Mon May 13 17:00:00 2002
From: fuf at mobil.cz (Michal Vitecek)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] questions/ideas
Message-ID: <20020513170000.A18394@diana.mobil.cz>

 hello everyone,

 i'm taking a decision whether to use python or php in my next project.
 i'm leaning towards python and mod_python, but i found some
 problems/questions/ideas that i'd like to know answers to first.

    a) as i did my previous projects in php i now find it quite strange
       that i need to call a certain function of a script. this makes it a
       bit more difficult to use the few global variables that i plan to
       use and from time to time makes the whole program into a single
       function (one tab is taken)

    b) the publisher submodule needs to know the name of the function to
       run - would it be possible to change it so that it doesn't need it
       ie. run the whole script instead?

    c) the publisher submodule reads the whole output of a function to a
       variable - for a sites with large html pages this could be 100s of
       KBs. this could mean a noticeable performance slowdown - also
       because the output must be prepared first. how about if the
       function output the resulting html code to a stream?

    d) i noticed that the python interpreter is not the same even for a
       single virtualhost (even when i explicitly define its name with
       PythonInterpreter) => the persistence is kept only withing every
       apache child. with increase of the number of children a new
       interpreter is created that doesn't inherit from the main one (i'm
       using python 2.2.1 and apache 1.3.20).

    e) in php it's possible to have the php code mixed with the html one -
       ie. there are special marks, that mark the start and end of php
       code. i think it would be a nice option to have in mod_python
       because it helps imho to create scripts the allow for easy to
       review code.

	thank you for your time
--
		fuf		(fuf@mobil.cz)

From johannes at erdfelt.com  Mon May 13 14:12:24 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513170000.A18394@diana.mobil.cz>; from fuf@mobil.cz on Mon, May 13, 2002 at 05:00:00PM +0200
References: <20020513170000.A18394@diana.mobil.cz>
Message-ID: <20020513141224.E23170@sventech.com>

On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>  i'm taking a decision whether to use python or php in my next project.
>  i'm leaning towards python and mod_python, but i found some
>  problems/questions/ideas that i'd like to know answers to first.

I've made the switch from PHP to mod_python successfully.

>     a) as i did my previous projects in php i now find it quite strange
>        that i need to call a certain function of a script. this makes it a
>        bit more difficult to use the few global variables that i plan to
>        use and from time to time makes the whole program into a single
>        function (one tab is taken)

That's just how python works. It's a different style of programming, but
I think it's better.

I got into too many problems with global variables in PHP that caused me
headaches.

>     b) the publisher submodule needs to know the name of the function to
>        run - would it be possible to change it so that it doesn't need it
>        ie. run the whole script instead?

Use the attached patch to mod_python. It'll call the function named
"handler" if there is no name passed. The patch is relative to 2.7.6.

>     c) the publisher submodule reads the whole output of a function to a
>        variable - for a sites with large html pages this could be 100s of
>        KBs. this could mean a noticeable performance slowdown - also
>        because the output must be prepared first. how about if the
>        function output the resulting html code to a stream?

Have you measured a decrease in performance?

>     d) i noticed that the python interpreter is not the same even for a
>        single virtualhost (even when i explicitly define its name with
>        PythonInterpreter) => the persistence is kept only withing every
>        apache child. with increase of the number of children a new
>        interpreter is created that doesn't inherit from the main one (i'm
>        using python 2.2.1 and apache 1.3.20).

That's because of the multiple process approach to apache. Since each
child is a different process, they don't share memory.

You can play tricks with shared memory if you really need that
functionality.

>     e) in php it's possible to have the php code mixed with the html one -
>        ie. there are special marks, that mark the start and end of php
>        code. i think it would be a nice option to have in mod_python
>        because it helps imho to create scripts the allow for easy to
>        review code.

There are add on packages like that. I've been using a package called
Cheetah that provides something similar.

Do some searching.

JE

-------------- next part --------------
--- mod_python/publisher.py.orig	Tue Apr 16 20:31:06 2002
+++ mod_python/publisher.py	Tue Apr 16 20:34:45 2002
@@ -80,17 +80,17 @@
     args = {}
 
     # get the path PATH_INFO (everthing after script)
-    if not _req.subprocess_env.has_key("PATH_INFO"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
-    
-    func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
-    func_path = string.replace(func_path, "/", ".")
-    if func_path[-1] == ".":
-        func_path = func_path[:-1] 
+    if _req.subprocess_env.has_key("PATH_INFO"):
+        func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
+        func_path = string.replace(func_path, "/", ".")
+        if func_path[-1] == ".":
+            func_path = func_path[:-1] 
 
-    # if any part of the path begins with "_", abort
-    if func_path[0] == '_' or string.count(func_path, "._"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+        # if any part of the path begins with "_", abort
+        if func_path[0] == '_' or string.count(func_path, "._"):
+            raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+    else:
+        func_path = "handler"
 
     # process input, if any
     fs = util.FieldStorage(req, keep_blank_values=1)
From grisha at modpython.org  Mon May 13 14:59:34 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513141224.E23170@sventech.com>
Message-ID: <Pine.BSF.4.32.0205131455160.12699-100000@localhost>


On Mon, 13 May 2002, Johannes Erdfelt wrote:

> On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>
> >     c) the publisher submodule reads the whole output of a function to a
> >        variable - for a sites with large html pages this could be 100s of
> >        KBs. this could mean a noticeable performance slowdown - also
> >        because the output must be prepared first. how about if the
> >        function output the resulting html code to a stream?
>
> Have you measured a decrease in performance?

You can, btw write to a stream if you need to, even from publisher scripts
- you just have to call req.send_http_header() manually first, and after
that you can write to the socket using req.write(). This technique is
useful for doing things like a traceroute script in which you want lines
to appear as soon as data is available.

Grisha


From support at obantec.net  Mon May 13 21:37:12 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] mod_python 2.7.8
References: <595450206.20020512012239@blackball.biz>
Message-ID: <157701c1fabd$fb9a7050$0a01a8c0@gamma>

Hi

I fixed the apache DEAPI warning by doing the following.

./configure --with-apxs=/usr/local/apache/bin/apxs --with-python=/usr/local/
lib/python2.2

then edit the Makefile in mod_python-2.7.8/src/

add -DEAPI to the line CFLAGS=$(OPT) $(INCLUDES)
so it becomes
CFLAGS=$(OPT) $(INCLUDES) -DEAPI

then follow make instruction for dso

Re. python as source check doc-html/inst-testing.html

HTH

Mark
--
Obantec Support
www.obantec.net
WebHosting and Domains
Nominet UK Tag Holder
----- Original Message -----
From: "Stephan Pienitz" <suselist@blackball.biz>
To: <mod_python@modpython.org>
Sent: Sunday, May 12, 2002 12:22 AM
Subject: [mod_python] mod_python 2.7.8


> Hello,
>
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.
>
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
>
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
>
> THX
>
> Stephan
>
> Sorry for my bad english!
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From jwm-mod_python at sentinelchicken.net  Mon May 13 15:13:15 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <556963282.20020512035022@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 03:50:22AM +0200
References: <595450206.20020512012239@blackball.biz> <20020511165602.A7089@samson.sentinelchicken.net> <1873819371.20020512025758@blackball.biz> <20020511174750.A7171@samson.sentinelchicken.net> <556963282.20020512035022@blackball.biz>
Message-ID: <20020513151314.D10655@samson.sentinelchicken.net>

Hast Du immernoch Probleme?


On Sun, May 12, 2002 at 03:50:22AM +0200, Stephan Pienitz wrote:
> Guten Tag Jason Morgan,
> 
> Am Sonntag, 12. Mai 2002 um 02:47 schrieben Sie:
> 
> 
> JM> Gruess Dich Stephan,
> 
> >> I've added in my httpd.conf following lines:
> >> 
> >> LoadModule python_module libexec/mod_python.so
> 
> JM> Do you also have:
> 
> JM> AddModule mod_python.c
> 
> JM> in the ClearModuleList-section?
> 
> >> <Directory /home/www/pythontestt>
> >>   AddHandler python-program .py
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> JM> Wenn das nicht functioniert, vielleicht sollst Du der modpython_email_liste wieder schreiben. Ich habe mod_python nur gestern
> JM> installiert und habe noch nicht viel damit gearbeitet. Vergiss(?) nicht Apache wiederzustarten!
> 
> JM> Viel Glueck,
> 
> JM> Jason
> 
> Hi,
> 
> ich schreibe dann mal deutsch :)
> 
> Also, wenn ich das .c-Modul hinzuf?ge, dann gibt der Apache zwar beim
> neustart keine Fehlermelung aus, aber st?rtzt trotzdem ab.
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> Dann w?re das doch aber nur f?r ein File g?ltig, oder?
> 
> THX
> 
> Stephan
> 
> 
> 

From suselist at blackball.biz  Tue May 14 21:06:18 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] It doesn't work
Message-ID: <1803493863.20020514210618@blackball.biz>

Hi,

i've set up mod_python in DSO-Mode.
Then I've written the 2 Lines into the
Apache-Conf.

The I'ved restartet Apache an it says to me, thats allright. But then
i can't open any webpage on my server.

What have i done wrong?

THX

Stephan

Sorry for my bad english




From jwm-mod_python at sentinelchicken.net  Tue May 14 22:13:13 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020514221313.A14746@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From roger.baklund at mobiliant.com  Wed May 15 17:49:38 2002
From: roger.baklund at mobiliant.com (Roger Baklund)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] cgihandler, w2k
Message-ID: <BGEHIEMNFIOKLADGCOJIMEBCDBAA.roger.baklund@mobiliant.com>

Hi,

we have installed mod_python on a w2k server, and the mptest.py "Hello
world" is working.

However, when running a cgi application through the cgihandler, we have some
problems.

First, we thought it was working, but it was not, as we saw many python
processes coming and going in the task manager, as if it was running like a
normal cgi.

We reinstalled, and we patched some lines in apache.py, function
setup_cgi(), according to notes found on this mailinglist ("old_env =
os.environ.copy()" and "return old_env, si, so").

This time the cgihandler was running, and we found some problems in the cgi
that we fixed ("if __name__ == '__main__':" and some redirects that went
wrong because of missing status header.)

Then we got some strange errors... it started to complain about modules not
existing, when it was trying to delete from sys.modules. This is in the
beginning of the cgihandler.py handler() function.

We had to move the "_lock.acquire()" to before the sys.modules loop to get
rid of the error messages.

We tried to remove the sys.modules loop (as indicated in a comment in the
source), but we could not make that work. We always get Internal Server
Error when we try to run without this module reload mechanism. See log
entries below.

The application is frames based. When the user log in, a frameset is
returned, and new requests are made for a stylesheet, a couple of external
javascripts, and a couple of cgi-based html pages/frames.

From jwm at sentinelchicken.net  Wed May 15 09:51:52 2002
From: jwm at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:59:21 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020515095152.A16190@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From diedrich at myriad.com  Fri May 17 10:27:13 2002
From: diedrich at myriad.com (Karl Diedrich)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Apache 2.0 CVS?
Message-ID: <3CE52F61.29762B72@myriad.com>

Hello,

Is the mod_python for Apache2.0.x being worked on in CVS?

I have done some Python extension programming so I would be willing to
look over the necessary
files to help if I know which files are important.

--
Karl Diedrich
Programmer II
Myriad Genetics Inc.
http://www.myriad.com/
(801) 883-3246


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020517/975cd5f7/attachment-0002.htm
From grisha at modpython.org  Fri May 17 13:46:55 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Apache 2.0 CVS?
In-Reply-To: <3CE52F61.29762B72@myriad.com>
Message-ID: <Pine.BSF.4.32.0205171346250.65141-100000@localhost>

Yes, just follow the CVS link off the website. The latest version is the
one for apache 2.0.

Grisha

On Fri, 17 May 2002, Karl Diedrich wrote:

> Hello,
>
> Is the mod_python for Apache2.0.x being worked on in CVS?
>
> I have done some Python extension programming so I would be willing to
> look over the necessary
> files to help if I know which files are important.
>
> --
> Karl Diedrich
> Programmer II
> Myriad Genetics Inc.
> http://www.myriad.com/
> (801) 883-3246
>
>
>


From ian at veryfresh.com  Fri May 17 20:27:54 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020514221313.A14746@samson.sentinelchicken.net>
References: <20020514221313.A14746@samson.sentinelchicken.net>
Message-ID: <20020518032754.GF90@fullfactor.com>

On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> Hello:
> 
> Ok, please excuse my ignorance, but I'm trying to move three sites 
> over to mod_python from php and I'm having some trouble figuring what 
> is the 'proper' way to proceed. I have mod_python installed and 
> working, however, I'm not familiar with the handler concept (yes, I 
> RTFM) and am trying to decide what to do with it. Should I have 
> handler dealing with everything in my dirs, while passing off content 
> generation to methods within personal modules? What is the role of 
> mod_python.publisher. I would appreciate any help I can get - URLs 
> are welcome. I've done the google searches, though, and haven't come 
> across anytrhing about how people actually structure their sites. I 
> dont' just want to hack something together - as I plan to leave most 
> site maintenance to a new employee
> :-).

Well, I'm not sure how closely my experiences mirror those of other 
mod_python developers, but I can try to give you some insight. (I spent 
about two years writing almost exclusively in PHP, and am now adjusting 
to mod_python)

The handler concept is by far the biggest difference between the two 
environments. A PHP script typically resides 'at' a specific URL, and 
only services requests for that URL. A mod_python handler, in contrast, 
becomes part of the web server, and handles requests whenever Apache 
gives them to it.

To be a little clearer, the way I will usually install a handler is to 
include it within an Apache <Location> directive. For example, I am 
writing a user-management module, and I want it to be mounted at 
http://mysite.com/users, so I set up Apache like this:

  <Location /users>
    SetHandler python-program
    PythonPath "sys.path+['/usr/local/lib/site_apps']"
    PythonHandler userinfo
  </Location>

This means that now my python module (at 
/usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
request to a URL which begins with "/users". 

The first thing that userinfo.py does is analyse the URL of the request 
to see exactly what was requested. If it is just "/users/", it displays 
a list of users. If it is "/users/showuser/ian", then it looks up the 
user record for 'ian' and displays that record. If it is 
"/users/no-such-page" then it returns apache.DECLINED, and Apache 
handles the 404 error.

I can also distinguish between GET and POST requests by examining the 
req.method variable. If the request is a GET to 
"/users/deleteuser/ian", then userinfo.py will display a confirmation 
page. If it is a POST to that same URL, it will read the POST data, 
look for a confirmation, and delete the user.

Most of my handlers are designed in this fashion, as one main python 
module installed under a base URL, which defines a "URL-space". The 
main module uses import statements to access all of the libraries it 
needs (database access, user record class, string, cgi, etc.) to do its
work.


If you want to look for other resources on application design with 
mod_python, try searching for information on mod_perl. It's the closest 
thing I have found to mod_python, as they both act as scripting-
language interfaces to the Apache C API. O'Reilly's book "Writing 
Apache Modules with Perl and C" has been an invaluable resource for me. 
Also, once you understand how the Apache API works, the mod_python 
documentation becomes a much more useful tool.


If your goal is just to convert your applications from PHP to the 
Python language, then you may want to look at the Publisher handler 
which Grisha has supplied with mod_python. It allows you to use Python 
scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
people on this list seem to be using it exclusively. In that case, the 
publisher handler becomes the default handler for your entire site. It 
deals with every request that comes in by looking for a Python module 
with the appropriate name in the right directory, and passing it 
parameters based on the request. (This is actually completely backwards 
to the way PHP works, but the effect is the same -- you believe that 
you are calling the Python script directly from the URL.)


I hope this answers at least some of your questions; feel free to ask 
more if I've just made things more confusing :)


Ian
<ian@veryfresh.com>


From s13361562 at bach.sun.ac.za  Sat May 18 11:54:17 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Getting 404's ...
Message-ID: <20020518095417.GA27377@vervet.localnet>

Often, after loading a number of pages, including one with __auth__
method, from two different directories:

<Directory /var/www>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

<Directory /var/www/newwebsite>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

I sometimes get 404's. Alternating. I.e. I hit refresh, continually on
the same page, then it is sometimes 404's, sometimes it works.
Restarting the apache server usually results in it working great for a
while at least. How can I debug this, throw a bunch of prints in
publisher.py? Do prints show up in error.log though?

I have reason to believe that this only starts going haywire after I've
viewed some things in the newwebsite directory. This is in fact a "newer
version" of the things in the other. Might it be confusing the two? How
exactly does mod_python work, does loaded modules remain loaded, i.e.
they only get loaded once? (Can one have global variables that will then
maintain their value between page requests?)

Thanks,
Hugo van der Merwe

From Mateusz.Korniak at ant.gliwice.pl  Sat May 18 12:30:14 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] How te send many cookies using one request ?
Message-ID: <200205181030.g4IAUJs76544@eden.ispol.com>

I tried:
1) # multiple value cookie
	req.headers_out["Set-Cookie"] = user.out_cookie().output("") 
	
2) #many single value cookies		
	for cookie in user.out_cookies():
		req.headers_out["Set-Cookie"] = cookie.output("")

both sends only one Set-Cookie header with one value :(

TIA 
-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From stony8 at gmx.de  Sat May 18 15:46:33 2002
From: stony8 at gmx.de (Alexander Steinert)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518154633.B1282@tyche.svt.tu-harburg.de>

> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
[Very nice description of an request handling example snipped ...]

I do it in a similar fashion:

Tail of /etc/apache/access.conf:

    # ddd is our BASE directory.
    <Directory /var/www/ddd>
	RewriteEngine On
	# Redirect requests for BASE/ externally to the german start page.
	RewriteRule "^$" /ddd/de [L,R]
    </Directory>
    # Identify requests for dynamic wdps content by URL pattern. Examples:
    # http://host/ddd/de
    # http://host/ddd/en
    # http://host/ddd/de/ACTION
    # http://host/ddd/de-SESSIONID/ACTION
    <LocationMatch ^/ddd/[a-z]{2}($|(-[0-9a-f]{40})?/)>
	PythonPath "sys.path + ['/usr/local/lib/wdps/python']"
	SetHandler python-program
	PythonHandler wdps.ui.web.handlers
	PythonDebug On
    </LocationMatch>

ACTION can be:

    cancel_order
    change_constants
    change_document_types
    change_groups
    change_languages
    change_person
    change_study_programs
    delete_person
    enter_payment
    enter_pickup
    help
    quit_session
    register_person
    search_person
    show_changes
    show_document_types
    show_languages
    show_order_items
    show_orders
    show_overview
    show_person
    show_postings
    show_startpage
    show_study_programs
    start_session
    ...

For each ACTION I have a class, e.g. Start_session, which is a subclass
of Action, where common behaviour (session_id checking, argument type
checking) is defined.

Originally I started with the Publisher handler, but now am very
satisfied with my OO approach.

I might publish my code (it's not ready) if you want more information.

HTH

Stony


From grisha at modpython.org  Sat May 18 11:17:12 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] How te send many cookies using one request ?
In-Reply-To: <200205181030.g4IAUJs76544@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205181115550.78680-100000@localhost>

headers_out (as any mod_python table object) has an add() method which
will let you set multiple values with the same key

grisha

On Sat, 18 May 2002, Mateusz Korniak wrote:

> I tried:
> 1) # multiple value cookie
> 	req.headers_out["Set-Cookie"] = user.out_cookie().output("")
>
> 2) #many single value cookies
> 	for cookie in user.out_cookies():
> 		req.headers_out["Set-Cookie"] = cookie.output("")
>
> both sends only one Set-Cookie header with one value :(
>
> TIA
> --
> Mateusz Korniak
> ANT sp z o.o. http://www.ant.gliwice.pl/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From jwm-mod_python at sentinelchicken.net  Sat May 18 14:45:22 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] THANKS FOR THE HELP
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518144522.A26028@samson.sentinelchicken.net>

Thanks everyone for the help. It has been very useful.

Thanks again

Jason












On Fri, May 17, 2002 at 08:27:54PM -0700, Ian Clelland wrote:
> On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> > Hello:
> > 
> > Ok, please excuse my ignorance, but I'm trying to move three sites 
> > over to mod_python from php and I'm having some trouble figuring what 
> > is the 'proper' way to proceed. I have mod_python installed and 
> > working, however, I'm not familiar with the handler concept (yes, I 
> > RTFM) and am trying to decide what to do with it. Should I have 
> > handler dealing with everything in my dirs, while passing off content 
> > generation to methods within personal modules? What is the role of 
> > mod_python.publisher. I would appreciate any help I can get - URLs 
> > are welcome. I've done the google searches, though, and haven't come 
> > across anytrhing about how people actually structure their sites. I 
> > dont' just want to hack something together - as I plan to leave most 
> > site maintenance to a new employee
> > :-).
> 
> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
> 
> The handler concept is by far the biggest difference between the two 
> environments. A PHP script typically resides 'at' a specific URL, and 
> only services requests for that URL. A mod_python handler, in contrast, 
> becomes part of the web server, and handles requests whenever Apache 
> gives them to it.
> 
> To be a little clearer, the way I will usually install a handler is to 
> include it within an Apache <Location> directive. For example, I am 
> writing a user-management module, and I want it to be mounted at 
> http://mysite.com/users, so I set up Apache like this:
> 
>   <Location /users>
>     SetHandler python-program
>     PythonPath "sys.path+['/usr/local/lib/site_apps']"
>     PythonHandler userinfo
>   </Location>
> 
> This means that now my python module (at 
> /usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
> request to a URL which begins with "/users". 
> 
> The first thing that userinfo.py does is analyse the URL of the request 
> to see exactly what was requested. If it is just "/users/", it displays 
> a list of users. If it is "/users/showuser/ian", then it looks up the 
> user record for 'ian' and displays that record. If it is 
> "/users/no-such-page" then it returns apache.DECLINED, and Apache 
> handles the 404 error.
> 
> I can also distinguish between GET and POST requests by examining the 
> req.method variable. If the request is a GET to 
> "/users/deleteuser/ian", then userinfo.py will display a confirmation 
> page. If it is a POST to that same URL, it will read the POST data, 
> look for a confirmation, and delete the user.
> 
> Most of my handlers are designed in this fashion, as one main python 
> module installed under a base URL, which defines a "URL-space". The 
> main module uses import statements to access all of the libraries it 
> needs (database access, user record class, string, cgi, etc.) to do its
> work.
> 
> 
> If you want to look for other resources on application design with 
> mod_python, try searching for information on mod_perl. It's the closest 
> thing I have found to mod_python, as they both act as scripting-
> language interfaces to the Apache C API. O'Reilly's book "Writing 
> Apache Modules with Perl and C" has been an invaluable resource for me. 
> Also, once you understand how the Apache API works, the mod_python 
> documentation becomes a much more useful tool.
> 
> 
> If your goal is just to convert your applications from PHP to the 
> Python language, then you may want to look at the Publisher handler 
> which Grisha has supplied with mod_python. It allows you to use Python 
> scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
> people on this list seem to be using it exclusively. In that case, the 
> publisher handler becomes the default handler for your entire site. It 
> deals with every request that comes in by looking for a Python module 
> with the appropriate name in the right directory, and passing it 
> parameters based on the request. (This is actually completely backwards 
> to the way PHP works, but the effect is the same -- you believe that 
> you are calling the Python script directly from the URL.)
> 
> 
> I hope this answers at least some of your questions; feel free to ask 
> more if I've just made things more confusing :)
> 
> 
> Ian
> <ian@veryfresh.com>
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From infomailsys at mail.ru  Mon May 20 12:16:32 2002
From: infomailsys at mail.ru (New Banner Systems)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Re: Your Logo
Message-ID: <200205200810.g4K8AZs98506@eden.ispol.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment-0002.htm
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 23464 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment-0002.gif
From gbeasley at tsa.ac.za  Mon May 20 11:53:41 2002
From: gbeasley at tsa.ac.za (Grant Beasley)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
Message-ID: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>

Hi

I have a function that tries to check whether its input is a dictionary (It
behaves differently depending on the input type). To do this, it firstly
checks for objects whose type is equal to type({}) and secondly for objects
which are instances of UserDict. The FieldStorage class matches neither of
these, despite the fact that it behaves like a dictionary (mappable object).
Am I using the wrong test, or this this a problem with the FieldStorage
class that it should conform to the above?

Of course, I could use a try block to attempt to access the object as a
dictionary, but this seems inefficient (I'd rather check explicitly).

Thanks
Grant Beasley


From s_lott at yahoo.com  Mon May 20 04:23:22 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
In-Reply-To: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>
Message-ID: <20020520112322.34986.qmail@web9608.mail.yahoo.com>

Yes, the FieldStorage class is a unique class, not derived from
UserDict.  It has dictionary-like methods.  

You want to check your argument, arg, with something like this

if isclass(arg,FieldStorage)

--- Grant Beasley <gbeasley@tsa.ac.za> wrote:
> Hi
> 
> I have a function that tries to check whether its input is a
> dictionary (It
> behaves differently depending on the input type). To do this,
> it firstly
> checks for objects whose type is equal to type({}) and
> secondly for objects
> which are instances of UserDict. The FieldStorage class
> matches neither of
> these, despite the fact that it behaves like a dictionary
> (mappable object).
> Am I using the wrong test, or this this a problem with the
> FieldStorage
> class that it should conform to the above?
> 
> Of course, I could use a try block to attempt to access the
> object as a
> dictionary, but this seems inefficient (I'd rather check
> explicitly).
> 
> Thanks
> Grant Beasley
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
LAUNCH - Your Yahoo! Music Experience
http://launch.yahoo.com

From colet at code-energy.com  Mon May 20 09:08:45 2002
From: colet at code-energy.com (Cole Tuininga)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] __doc__ entries
Message-ID: <1021900129.1025.37.camel@bobthesnake>

I'm very new to mod_python, so I hope you'll have patience with me.  8)

I have mod_python set up to use index.py as its PythonHandler.  The idea
is that I'm going to have the handler routine scan through all other .py
files in the directory, pull the description of the class in each file,
and use that as a link.

For instance, I might have a changePassword.py with the docstring:

"""Change Password: Click here to change your password"""

If this were in a class called changePassword, I would expect to be able
to do the following:

import changePassword

def handler( req ):
	req.write( changePassword.changePassword.__doc__ )


However, this gives me an error calling the value to req.write a
"None".  However, if I essentially do the same thing within the python
interpreter fired up from the shell, it seems to work.  

Help?  Thanks in advance.

-- 
"The net treats censorship as a malfunction and reroutes around it."
 -John Gilmore

Cole Tuininga
Lead Developer
Code Energy, Inc
colet@code-energy.com
PGP Key ID: 0x43E5755D



From s13361562 at bach.sun.ac.za  Mon May 20 21:05:31 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Serving files via mod_python
Message-ID: <20020520190531.GA20265@vervet.localnet>

Hello,

I want to use mod_python to control what files can be downloaded by
whom, and to log such file transfers (with my own code). One possibility
is also to convert some files' contents on the fly.

I am currently using:

f = open(filename, "r")
while 1:
  data = f.read(1048576)
  if data = "": break
  req.write(data)

It seems to work fine. I just wonder if this is bad (performance wise, I
wonder what the best "size" would be, instead of 1M). These are
potentially *large* files I'm dealing with, things like cd images. At a
later date I guess I'll have to figure out how to do download resuming,
etc. I'm sure Apache does a better job of this, maybe I should rather
let Apache handle it, how can I do this while controlling it all from
modPython? I guess I could just define a PythonAuthenHandler, and let
Apache do the actual serving? Does the PythonAuthenHandler have full
access to just about everything a normal handler would? (URL, etc.)

If there was some way to give Apache a file handle or something like
that, from which it should serve the data...

Thanks,
Hugo van der Merwe

From Hans.Yandle at cingular.com  Tue May 21 10:42:11 2002
From: Hans.Yandle at cingular.com (Yandle, Hans)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] CGI Environment Specs
Message-ID: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>

I am looking into the possibility of using mod_python to accelerate and/or
replace some of my cgi scripts. However, I lack one last detail before I can
attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
variable. After reading the docs, I made the following script using the
mod_python.publisher handler:

from mod_python import apache

def commonenv(req):
    req.content_type = "text/html"
    req.send_http_header()
    req.add_common_vars()
    s = """<html><head><title>Mod_Python Common Environment
Variables</title></head>
           <body><p
align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
    for parameter in req.subprocess_env.keys():
        s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
req.subprocess_env[parameter])
    s = s + "</table></p></body></html>"
    return s

When it is executed, the HTTP_REFERER variable is missing. If anyone knows
how to accomplish this, I would be grateful.

Hans


From sam at webslingerZ.com  Tue May 21 13:25:17 2002
From: sam at webslingerZ.com (Sam Brauer)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <Pine.LNX.4.44.0205211322510.2120-100000@localhost.localdomain>

Did you hit the script directly (by typing the location into your 
browser)?  If so, that variable won't be set.
Try creating a test html page with a link to your script, then hit the 
script by following the link.  In that case, the variable should contain 
the url of your test html page.

- Sam

-- 
Sam Brauer
Systems Programmer
sam@webslingerZ.com

On Tue, 21 May 2002, Yandle, Hans wrote:

> I am looking into the possibility of using mod_python to accelerate and/or
> replace some of my cgi scripts. However, I lack one last detail before I can
> attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
> variable. After reading the docs, I made the following script using the
> mod_python.publisher handler:
> 
> from mod_python import apache
> 
> def commonenv(req):
>     req.content_type = "text/html"
>     req.send_http_header()
>     req.add_common_vars()
>     s = """<html><head><title>Mod_Python Common Environment
> Variables</title></head>
>            <body><p
> align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
>     for parameter in req.subprocess_env.keys():
>         s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
> req.subprocess_env[parameter])
>     s = s + "</table></p></body></html>"
>     return s
> 
> When it is executed, the HTTP_REFERER variable is missing. If anyone knows
> how to accomplish this, I would be grateful.
> 
> Hans
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From ian at veryfresh.com  Tue May 21 16:01:49 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020520190531.GA20265@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet>
Message-ID: <20020521230149.GG90@fullfactor.com>

On Mon, May 20, 2002 at 09:05:31PM +0200, Hugo van der Merwe wrote:
> Hello,
> 
> I want to use mod_python to control what files can be downloaded by
> whom, and to log such file transfers (with my own code). One possibility
> is also to convert some files' contents on the fly.
> 
> I am currently using:
> 
> f = open(filename, "r")
> while 1:
>   data = f.read(1048576)
>   if data = "": break
>   req.write(data)
> 
> It seems to work fine. I just wonder if this is bad (performance wise, I
> wonder what the best "size" would be, instead of 1M). These are
> potentially *large* files I'm dealing with, things like cd images.

Transferring 1MB at a time is probably about as efficient as you can 
get; of course, you'd need to do some proper benchmarking to be sure. I 
believe that Apache defaults to Chunked transfer-encoding, so every 
time you call req.write(), the data goes out immediately, with about 10 
bytes of overhead (actually ln(n)/4+4 bytes).

Actually, most of your overhead will be in TCP and IP encoding, as each 
call to write() will probably result in about 600 IP packets being sent 
(and acknowledged), and there's not much you can do about that.

> At a
> later date I guess I'll have to figure out how to do download resuming,
> etc. I'm sure Apache does a better job of this, maybe I should rather
> let Apache handle it,

Apache will only handle Range requests (which are what you need for 
download resuming) for static files. If you are using mod_python to 
serve the content, then you will have to handle the Range headers 
yourself.

> how can I do this while controlling it all from
> modPython? I guess I could just define a PythonAuthenHandler, and let
> Apache do the actual serving? Does the PythonAuthenHandler have full
> access to just about everything a normal handler would? (URL, etc.)

That's a good way to do it, assuming that the files are already on the 
filesystem, and not being stored in a database or ripped in realtime. 
What you are looking for, though, is a PythonAuthzHandler 
(authorization handler). This is the handler which gets called *after* 
the user's name and password have been verified, (by a .htpasswd file 
or some other method,) and decides whether that user is allowed to 
download that file.

> 
> If there was some way to give Apache a file handle or something like
> that, from which it should serve the data...

You don't even need to do that; all you have to do is install the 
PythonAuthzHandler, and let Apache handle serving the actual content. 
The AuthzHandler will act like a 'filter' on an otherwise normal 
request/response.

Hope that helps,

Ian
<ian@veryfresh.com>

From johannes at erdfelt.com  Tue May 21 19:12:44 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>; from ian@veryfresh.com on Tue, May 21, 2002 at 04:01:49PM -0700
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020521191243.I2645@sventech.com>

On Tue, May 21, 2002, Ian Clelland <ian@veryfresh.com> wrote:
> > how can I do this while controlling it all from
> > modPython? I guess I could just define a PythonAuthenHandler, and let
> > Apache do the actual serving? Does the PythonAuthenHandler have full
> > access to just about everything a normal handler would? (URL, etc.)
> 
> That's a good way to do it, assuming that the files are already on the 
> filesystem, and not being stored in a database or ripped in realtime. 
> What you are looking for, though, is a PythonAuthzHandler 
> (authorization handler). This is the handler which gets called *after* 
> the user's name and password have been verified, (by a .htpasswd file 
> or some other method,) and decides whether that user is allowed to 
> download that file.
> 
> > If there was some way to give Apache a file handle or something like
> > that, from which it should serve the data...
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.

Is this new? It's not in the documentation:

http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

JE


From ian at veryfresh.com  Tue May 21 16:54:18 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521191243.I2645@sventech.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com> <20020521191243.I2645@sventech.com>
Message-ID: <20020521235418.GH90@fullfactor.com>

On Tue, May 21, 2002 at 07:12:44PM -0400, Johannes Erdfelt wrote:
> > You don't even need to do that; all you have to do is install the 
> > PythonAuthzHandler, and let Apache handle serving the actual content. 
> > The AuthzHandler will act like a 'filter' on an otherwise normal 
> > request/response.
> 
> Is this new? It's not in the documentation:
> 
> http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

It does seem conspicuously absent from the online documentation; I 
don't think that's deliberate, though. It appears to be fully supported 
by the code (it's in mod_python.c and requestobject.c) and I've been 
using it with no problems for a while now.

It is mentioned in an example on this page: 
http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers-syn.html

(Grisha? I think this was brought up about 6 weeks ago as well -- any 
 updates? :)

Ian
<ian@veryfresh.com>

From matt at proweb.co.uk  Thu May 23 16:30:43 2002
From: matt at proweb.co.uk (Matt H)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
References: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <20020523163043.744528d8.matt@proweb.co.uk>

this works ->

def authenhandler(req):
        try :
                referer = req.headers_in['referer']
        except :
                referer = ""
        req.subprocess_env['HTTP_REFERER'] = referer.lower()

        pwd = req.get_basic_auth_pw()
        usr = req.connection.user

        if pwd=="bar" and usr=="f00" :
                return apache.OK
        return apache.HTTP_UNAUTHORIZED

From pfrazao at ualg.pt  Thu May 23 17:41:30 2002
From: pfrazao at ualg.pt (Pedro Miguel Frazao Fernandes Ferreira)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] mod_python and python2.2
Message-ID: <3CED1BBA.4060804@ualg.pt>

Hi All,

First:
Is there any mod_python version known to work with python2.2 ?

Second:
mod_python 2.7.6 compiled ok with python2.2 on a debian (woody) distribution.
Problem is that it fails on the application when handling a form with submited 
files:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

   File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 193, in 
Dispatch
     result = object(req)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 104, 
in handler
     val = File(field)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 308, 
in __init__
     for m in field.file.__methods__:

AttributeError: 'file' object has no attribute '__methods__'

Anyone knows a solution ? If yes will it be safe to use 2.7.6 compiled with 
python2.2 ?

Thanks for any help.
-- 
----------------------------------------------------------------------
Pedro Miguel Frazao Fernandes Ferreira
Universidade do Algarve
Faculdade de Ciencias e Tecnologia
Campus de Gambelas
8000-117 Faro
Portugal
Tel./Fax:  (+351) 289 800950 / 289 819403
http://w3.ualg.pt/~pfrazao


From bob at redivi.com  Thu May 23 15:17:12 2002
From: bob at redivi.com (Bob Ippolito)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] mod_python and python2.2
In-Reply-To: <3CED1BBA.4060804@ualg.pt>
Message-ID: <AF2FCE2C-6E81-11D6-A4E2-0003938210D6@redivi.com>

try dir(field.file) instead of field.file.__methods__

On Thursday, May 23, 2002, at 12:41 PM, Pedro Miguel Frazao Fernandes 
Ferreira wrote:

> AttributeError: 'file' object has no attribute '__methods__'


From s13361562 at bach.sun.ac.za  Thu May 23 22:34:33 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020523201546.GA29705@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet> <20020520200902.GB1048@eleanor.internal.ywlcs.org> <20020523201546.GA29705@vervet.localnet>
Message-ID: <20020523203433.GA30515@vervet.localnet>

> > Build a TransHandler which checks permissions and whatnot, then either (a)
> > calls add_handler with a pythonhandler which will display an error message,
> > menu, etc. or (b) produces the filename of the file that Apache should send
> > along.
> 
> Sorry about asking about this here again, I had a good and wide search
> to find info, but I'm too pressed for time now, and so far searches
> haven't helped me on this last issue:
> 
> I've got TransHandler working nicely, at least, until I don't want it to
> do it's thing: how do I get the "default behaviour", once TransHandler
> determines that it's not a URL that it should handle? I want it to then
> go via the "usual, standard" routes... simply not touching req.filename
> leaves it as "/", I guess I could just prepend /var/www to the
> unparsed_uri, will apache then do it's alias thing, etc? It still
> doesn't seem like the neatest solution though.

Replying to myself ... but I found a little more info, and I want to
send this to the list as well.

I found the following:

"""
apache.DECLINED, meaning this handler refused to handle this phase of
the requestand Apache needs to look for another handler. 
"""

Returning this seems to "work" in some sense, I get the following 404
now:

Not Found The requested URL /show.py/norm was not found on this server.

If I do not have the PythonTransHandler, my "normal" PythonHandler takes
care of this...

Thanks,
Hugo van der Merwe

From dustin at ywlcs.org  Sat May 25 21:32:27 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020526023227.GB25701@eleanor.internal.ywlcs.org>

On Tue, May 21, 2002 at 04:01:49PM -0700, Ian Clelland wrote:
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.
> 

I know this is an old thread, but I might point out that the new 'filters' in
Apache 2.0 will allow this sort of filtering and much, much more.  I'm
eagerly awaiting a stable release of mod_python for httpd-2.0 (well, that and
I need a working PHP).

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May 25 21:40:04 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Apache Handler docs
Message-ID: <20020526024004.GC25701@eleanor.internal.ywlcs.org>

I'm interested in gaining a full understanding of how Apache handlers work.
While I've been working (quite successfully) with mod_python for a while now,
there are still some behaviors that surprise me, because I don't really
understand what Apache's doing under the hood.  The Shambala API notes are
somewhat helpful, but really nothing more than notes -- they see out of date
and leave many of the details unspecified.

So short of reading all of the Apache main and core source (I've read a bit
of it already), does anyone have any pointers to good docs for these sorts of
things?

Thanks!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From grisha at modpython.org  Sat May 25 23:35:53 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Apache Handler docs
In-Reply-To: <20020526024004.GC25701@eleanor.internal.ywlcs.org>
Message-ID: <Pine.BSF.4.32.0205252332440.72278-100000@localhost>

The "Writing Apache modules with mod_perl and C" O'Reilly book is probably
the best reference of Apache internals, but it doesn't cover everything,
especially Apache 2.0 wich is a different beast altogether when it comes
to handlers (or just about anything else really). I've had to read quite a
bit of code when writing mod_python.

Grisha

On Sat, 25 May 2002, Dustin Mitchell wrote:

> I'm interested in gaining a full understanding of how Apache handlers work.
> While I've been working (quite successfully) with mod_python for a while now,
> there are still some behaviors that surprise me, because I don't really
> understand what Apache's doing under the hood.  The Shambala API notes are
> somewhat helpful, but really nothing more than notes -- they see out of date
> and leave many of the details unspecified.
>
> So short of reading all of the Apache main and core source (I've read a bit
> of it already), does anyone have any pointers to good docs for these sorts of
> things?
>
> Thanks!
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From john.garberson at nexos.com  Mon May 27 16:57:52 2002
From: john.garberson at nexos.com (John D. Garberson)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] Sub-request/Internal redirect questions
Message-ID: <200205271457.QAA03404@ws2.nexos.com>

Hi,

I'm new to mod_python and am trying to get a feel for it and the 
Apache API by duplicating the modules that Stein and MacEachern
show in their very nice Apache modules book, but of course using
mod_python instead of mod_perl or C.

A technique that seems to come up fairly often after the first easy
examples is to use sub-requests and redirects. These seem to be generated
by the request object's lookup_file, lookup_uri or internal_redirect
methods.  I don't find any mention of these methods in the mod_python
documentation, and it sort of looks like they haven't been implemented.
But then I've found some other stuff that isn't documented just poking
around in the module's C and python source code, and maybe I'm missing
something obvious.  Also, looking back through the list archives for the
last year or so, I've found some references to work-arounds for the re-
direct stuff.  Maybe people with more experience know other such tricks?

Can anyone give me a tip on how a sub-request (or for that matter, an
internal redirect without using work-arounds) is generated using
mod_python, or what methods can be used to replace this functionality?

Thanks for any ideas.


     John Garberson                             nexos ag 
     john.garberson@nexos.com                   Frobenstrasse 66 
                                                CH-4053 Basel, Switzerland
                                                Tel. 41 61 283 55 03
                                                Fax  41 61 283 55 01

From gbenson at redhat.com  Mon May 27 19:02:56 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] [PATCH] httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205271900230.27285-400000@slippy.rat>


Hi all,

The attached patches to HEAD will allow you to compile and run mod_python
with httpd-2.0.36. There are still a bunch of compiler warnings which I
haven't fixed (but intend to), but it seems to run quite nicely (although
my minimal mod_python knowledge probably isn't stressing it much).

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
An allocator-passing mechanism was added throughout the bucket brigades API

Index: src/filterobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/filterobject.c,v
retrieving revision 1.4
diff -u -r1.4 filterobject.c
--- src/filterobject.c	4 Mar 2002 21:19:17 -0000	1.4
+++ src/filterobject.c	27 May 2002 11:18:30 -0000
@@ -115,6 +115,7 @@
 static PyObject *_filter_read(filterobject *self, PyObject *args, int readline)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     apr_bucket *b;
     long bytes_read;
     PyObject *result;
@@ -135,7 +136,8 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_in) {
-	    self->bb_in = apr_brigade_create(self->f->r->pool);
+	    self->bb_in = apr_brigade_create(self->f->r->pool,
+					     c->bucket_alloc);
 	}
 
 	Py_BEGIN_ALLOW_THREADS;
@@ -290,6 +292,7 @@
 static PyObject *filter_write(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     char *buff;
     int len;
     apr_bucket *b;
@@ -315,10 +318,12 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_out) {
-	    self->bb_out = apr_brigade_create(self->f->r->pool);
+	    self->bb_out = apr_brigade_create(self->f->r->pool,
+					      c->bucket_alloc);
 	}
 	
-	b = apr_bucket_pool_create(buff, len, self->f->r->pool);
+	b = apr_bucket_pool_create(buff, len, self->f->r->pool,
+				   c->bucket_alloc);
 	APR_BRIGADE_INSERT_TAIL(self->bb_out, b);
 	
 	self->bytes_written += len;
@@ -337,12 +342,15 @@
 static PyObject *filter_flush(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     /* does the output brigade exist? */
     if (!self->bb_out) {
-	self->bb_out = apr_brigade_create(self->f->r->pool);
+	self->bb_out = apr_brigade_create(self->f->r->pool, c->bucket_alloc);
     }
 
-    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_flush_create());
+    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+			    apr_bucket_flush_create(c->bucket_alloc));
 
     if (ap_pass_brigade(self->f->next, self->bb_out) != APR_SUCCESS) {
 	PyErr_SetString(PyExc_IOError, "Flush failed.");
@@ -363,16 +371,20 @@
 static PyObject *filter_close(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     if (! self->closed) {
 
 	if (self->bytes_written) {
 
 	    /* does the output brigade exist? */
 	    if (!self->bb_out) {
-		self->bb_out = apr_brigade_create(self->f->r->pool);
+		self->bb_out = apr_brigade_create(self->f->r->pool,
+						  c->bucket_alloc);
 	    }
 
-	    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_eos_create());
+	    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+				    apr_bucket_eos_create(c->bucket_alloc));
 	
 	    if (! self->is_input) {
 		ap_pass_brigade(self->f->next, self->bb_out);
-------------- next part --------------
Various AP_FTYPE_* constants were changed in 2.0.34

Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	27 May 2002 10:50:15 -0000
@@ -1467,7 +1467,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_input_filter(name, python_input_filter, AP_FTYPE_CONTENT);
+    ap_register_input_filter(name, python_input_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
@@ -1491,7 +1491,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_output_filter(name, python_output_filter, AP_FTYPE_CONTENT);
+    ap_register_output_filter(name, python_output_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
-------------- next part --------------
ap_restart_time was moved into the scoreboard global area.

Index: src/serverobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/serverobject.c,v
retrieving revision 1.8
diff -u -r1.8 serverobject.c
--- src/serverobject.c	9 Sep 2001 00:25:37 -0000	1.8
+++ src/serverobject.c	27 May 2002 10:59:54 -0000
@@ -241,7 +241,7 @@
 	return PyInt_FromLong((long)ap_my_generation);
     }
     else if (strcmp(name, "restart_time") == 0) {
-	return PyInt_FromLong((long)ap_restart_time);
+	return PyInt_FromLong((long)ap_scoreboard_image->global->restart_time);
     }
     else
 	return PyMember_Get((char *)self->server, server_memberlist, name);
From gbenson at redhat.com  Tue May 28 12:31:05 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>


Hi,

The attached patches fix most of the compiler warnings when building
against httpd-2.0.36: some const correctness stuff, and a problem with
conn.remote_addr. The rest of the problems stem from the fact that the
input filter API changed in 2.0.31, but I currently have no idea how to
fix that.

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
apr_table_elts() returns const apr_array_header_t *

Index: src/tableobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/tableobject.c,v
retrieving revision 1.8
diff -u -r1.8 tableobject.c
--- src/tableobject.c	28 Nov 2001 05:31:48 -0000	1.8
+++ src/tableobject.c	28 May 2002 11:12:59 -0000
@@ -196,7 +196,7 @@
 {
 
     PyObject *v;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i, j;
 
@@ -303,7 +303,7 @@
 static PyObject * table_repr(tableobject *self)
 {
     PyObject *s;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i;
 
Index: src/requestobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/requestobject.c,v
retrieving revision 1.15
diff -u -r1.15 requestobject.c
--- src/requestobject.c	28 Nov 2001 05:31:48 -0000	1.15
+++ src/requestobject.c	28 May 2002 11:13:04 -0000
@@ -268,7 +268,7 @@
 
     if (apr_table_get(self->request_rec->notes, "py_more_directives")) {
 
-	apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
+	const apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
 	apr_table_entry_t *elts = (apr_table_entry_t *)ah->elts;
 	int i = ah->nelts;
 
Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	28 May 2002 11:13:13 -0000
@@ -1545,7 +1545,7 @@
 static void PythonChildInitHandler(apr_pool_t *p, server_rec *s)
 {
 
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     PyObject *sys, *path, *dirstr;
     interpreterdata *idata;
-------------- next part --------------
Make conn.remote_addr work properly

Index: src/connobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/connobject.c,v
retrieving revision 1.7
diff -u -r1.7 connobject.c
--- src/connobject.c	18 Aug 2001 22:43:45 -0000	1.7
+++ src/connobject.c	28 May 2002 11:11:58 -0000
@@ -194,8 +194,7 @@
 	return PyInt_FromLong(self->conn->double_reverse);
     }
     else if (strcmp(name, "remote_addr") == 0) {
-	/* XXX this needs to be compatible with apr_sockaddr_t */
-	return makesockaddr(&(self->conn->remote_addr));
+	return makesockaddr(&self->conn->remote_addr->sa.sin);
     }
     else if (strcmp(name, "notes") == 0) {
 	Py_INCREF(self->notes);
From grisha at modpython.org  Tue May 28 09:03:46 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:59:22 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
In-Reply-To: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>
Message-ID: <Pine.BSF.4.32.0205280901430.98266-100000@localhost>

Thanks Gary - I'll review and add the patches into HEAD, but it proboably
won't happen a day or two - I'll be very busy today and tomorrow.

Grisha

On Tue, 28 May 2002, Gary Benson wrote:

>
> Hi,
>
> The attached patches fix most of the compiler warnings when building
> against httpd-2.0.36: some const correctness stuff, and a problem with
> conn.remote_addr. The rest of the problems stem from the fact that the
> input filter API changed in 2.0.31, but I currently have no idea how to
> fix that.
>
> Cheers,
> Gary
>
> [ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
>


From mbp at samba.org  Wed May 29 18:24:40 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] [patch] make autoreload more useful
Message-ID: <20020529082436.GK25763@samba.org>

Here is a patch intended to make automatic reload work "properly" in
mod_python: if you change *any* Python source file, then all of them
will be reloaded.  

I think this basically gives the behaviour developers would
intuitively expect: you can just go ahead and edit and the server will
reload as necessary without you needing to remember to kill/restart
Apache.  So the development experience is as immediate as CGI or PHP.

You might ask why it's necessary to reload everything, and not just
the changed module.  The reason is that some other module might still
hold a reference to an object or function inside the changed module,
and that object will still refer to the old code.  

Indeed this will still be a problem if you put a reference to your
code into sys, or one of the other modules that is not reloaded.  I
can't see a clean way to handle that without restarting the whole
interpreter, but I suspect it's a not a very common case.

Of course stat()ing every loaded python file on every mod_python
request has a small performance hit, but I don't think it will be a
problem during development, and the whole thing should be turned off
in production.

I owe a debt to the PyUnit developers for documenting their solution
and therefore saving me a couple of false starts.

The patch is rough as anything and badly needs to be cleaned up and
tested more thoroughly before it being merged or used in production.
(The reload stuff really belongs in a separate module.)  I thought I'd
send it out and see if anyone had any comments, and in particular if
Grisha would take it in principle.  

I've tested this a bit on python2.1 and it seems to work well.  I
might inadvertently have bugs on 1.5, but they can easily be cleaned
up.

-- 
Martin 
tab tab ding!





--- /home/mbp/work/mod_python-2.7.8/lib/python/mod_python/apache.py	Sat Apr 20 04:20:40 2002
+++ /usr/lib/python2.1/site-packages/mod_python/apache.py	Wed May 29 18:03:08 2002
@@ -53,6 +53,7 @@
 import imp
 import types
 import _apache
+import __builtin__
 
 # a small hack to improve PythonPath performance. This
 # variable stores the last PythonPath in raw (unevaled) form.
@@ -62,6 +63,92 @@
 def _cleanup_request(_req):
     _req._Request = None
 
+
+# The idea of rolling back imports comes from Steve Purcell's
+# PyUnit GUI <pyunit.sf.net>, but the implementation is new by Martin Pool.
+
+# The basic idea is that we want to delete everything from sys.modules
+# when the user's code changes, except for system modules.  This is
+# necessary because otherwise one module that has not changed may
+# still be holding references to code objects from a module that has
+# changed.  We have to actually delete them and start again rather
+# than using reload(), because otherwise the first one reloaded may
+# grab references from something that will be reloaded later on.
+
+# Of course this will be a little slow, but it's only used in
+# development so it doesn't really matter.
+_orig_sys_modules = None
+
+def _notice(s, *args):
+    _apache.log_error(s % args, APLOG_NOERRNO|APLOG_NOTICE)
+
+
+def save_orig_modules():
+    global _orig_sys_modules
+    _orig_sys_modules = sys.modules.copy()
+
+
+def check_for_reload(path=None):
+    """Check all non-system modules; if any have changed, reload all"""
+    for module_name, module in sys.modules.items():
+        if _orig_sys_modules.has_key(module_name):
+            continue
+
+        if not module:
+            continue                    # some are None (??)
+
+        file = module.__dict__.get('__file__')
+        oldmtime = module.__dict__.get("__mtime__", 0)
+        if not oldmtime:
+            # If the oldmtime is 0, then it wasn't loaded
+            # through _apache_importer, and so we can't work out if it's
+            # older or not.
+            continue
+
+        mtime = module_mtime(module)
+        # If the file no longer exists, mtime will be 0 and we'll
+        # reload it.
+        if mtime > oldmtime or mtime == 0:
+            _apache.log_error("mod_python: %s has been changed; mtime=%d oldmtime=%d" %
+                              (file, mtime, oldmtime),
+                              APLOG_NOERRNO|APLOG_NOTICE)
+            return reload_user_modules()
+        
+
+def reload_user_modules():
+    """Reload all modules except system modules"""
+    _apache.log_error("mod_python: discard user modules",
+                      APLOG_NOERRNO|APLOG_NOTICE)
+    for module_name in sys.modules.keys():
+        if not _orig_sys_modules.has_key(module_name):
+            del sys.modules[module_name]
+
+
+def _get_sub_module(top_module, module_name):
+    module = top_module
+    for part in string.split(module_name, '.')[1:]:
+        module = getattr(module, part)
+    return module
+
+def _apache_importer(module_name, globals=None, locals=None, fromlist=None):
+    # Just defer to the built-in importer, but annotate the returned module with
+    # its modification time
+    parent_module = _original_import(module_name, globals, locals, fromlist)
+    
+    if '.' in module_name:
+        submodule = _get_sub_module(parent_module, module_name)
+    else:
+        submodule = parent_module
+        
+    if _debug:
+        s = 'mod_python: importing %s got parent %s, sub %s' % (module_name, `parent_module`,
+                                                                `submodule`)
+        _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
+    submodule.__mtime__ = module_mtime(submodule)
+    _notice("submodule mtime is %d" % submodule.__mtime__)
+    return parent_module
+
+
 class Request:
     """ This is a normal Python Class that can be subclassed.
         However, most of its functionality comes from a built-in
@@ -285,6 +372,8 @@
             etb = None
             # we do not return anything
 
+
+
 def import_module(module_name, req=None, path=None):
     """
     Get the module to handle the request. If
@@ -299,52 +388,27 @@
         debug = config.has_key("PythonDebug")
         if config.has_key("PythonAutoReload"):
             autoreload = int(config["PythonAutoReload"])
- 
-    # (Re)import
-    if sys.modules.has_key(module_name):
-        
-        # The module has been imported already
-        module = sys.modules[module_name]
-
-        # but is it in the path?
-        file = module.__dict__.get("__file__")
-        if not file or (path and not os.path.dirname(file) in path):
-                raise SERVER_RETURN, HTTP_NOT_FOUND
-
-        if autoreload:
-            oldmtime = module.__dict__.get("__mtime__", 0)
-            mtime = module_mtime(module)
-        else:
-            mtime, oldmtime = 0, 0
-
-    else:
-        mtime, oldmtime = 0, -1
- 
-    if mtime > oldmtime:
-
-        # Import the module
-        if debug:
-            s = 'mod_python: (Re)importing %s from %s' % (module_name, path)
-            _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
-
-        parts = string.split(module_name, '.')
-        for i in range(len(parts)):
-            f, p, d = imp.find_module(parts[i], path)
-            try:
-                mname = string.join(parts[:i+1], ".")
-                module = imp.load_module(mname, f, p, d)
-            finally:
-                if f: f.close()
-            if hasattr(module, "__path__"):
-                path = module.__path__
 
-        if mtime == 0:
-            mtime = module_mtime(module)
-
-        module.__mtime__ = mtime
- 
+    # mbp -- for debugging
+    ##    _apache.log_error("sys.modules is: %s" % sys.modules,
+    ##                      APLOG_NOERRNO|APLOG_NOTICE)
+
+    if autoreload:
+        # just check *all* modules, and discard non-system modules if
+        # any have changed
+        check_for_reload(path)
+
+    # the __import__ function returns the *top-level module*, not the one
+    # we actually asked for.  after importing, we need to walk down to
+    # get the real thing.
+    _notice("import_module %s" % module_name)
+    top_module = __import__(module_name)
+    _notice("import_module %s got top %s" % (module_name, top_module))
+    module = _get_sub_module(top_module, module_name)
+    _notice("import_module for %s returned %s" % (module_name, module))
     return module
 
+
 def module_mtime(module):
     """Get modification time of module"""
     mtime = 0
@@ -377,6 +441,8 @@
        class passing the request as single argument
     """
 
+    _notice("resolve obj %s in %s" % (object_str, module))
+
     obj = module
 
     for obj_str in  string.split(object_str, '.'):
@@ -609,6 +675,14 @@
     """ 
         This function is called by the server at startup time
     """
+    global _original_import, _debug
+    
+    # keep this in case we want it
+    _original_import = __builtin__.__import__
+    _notice("about to hook importer")
+    __builtin__.__import__ = _apache_importer
+    _notice("importer hooked")
+    _debug = 1
 
     return CallBack()
 
@@ -618,6 +692,14 @@
 parse_qs = _apache.parse_qs
 parse_qsl = _apache.parse_qsl
 
+## Keep track of modules already loaded; anything after this is fair game
+## to be reloaded
+save_orig_modules()
+
+# XXX: We perhaps ought to hook reload() as well to make sure it's
+# consistent, but at the moment I think it does no harm to let it
+# default.
+
 ## Some constants
 
 HTTP_CONTINUE                     = 100
@@ -708,28 +790,4 @@
 REQ_EXIT = "REQ_EXIT"         
 SERVER_RETURN = _apache.SERVER_RETURN
 PROG_TRACEBACK = "PROG_TRACEBACK"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 

From dustin at ywlcs.org  Wed May 29 07:45:05 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529082436.GK25763@samba.org>
References: <20020529082436.GK25763@samba.org>
Message-ID: <20020529124504.GG1280@eleanor.internal.ywlcs.org>

On Wed, May 29, 2002 at 06:24:40PM +1000, Martin Pool wrote:

> +# The basic idea is that we want to delete everything from sys.modules
> +# when the user's code changes, except for system modules.  This is
> +# necessary because otherwise one module that has not changed may
> +# still be holding references to code objects from a module that has
> +# changed.  We have to actually delete them and start again rather
> +# than using reload(), because otherwise the first one reloaded may
> +# grab references from something that will be reloaded later on.

Two things:

1. I'm not sure how gc interacts with this, but there was a time when you
just couldn't get rid of a loaded module object.  All of the modules you
delete will still reference each other in some sort of cycle. If they're not
deleted you could very quickly end up with an enormous httpd process.

Even with gc, if there are any dangling references into one of the old
modules (an atexit function? somewhere the Python standard libraries cache a
reference?) then you're going to have a bloated httpd.

I wrote a reloader similar to this one, and my solution to this was to watch
the number of reloads, and call req.child_terminate() after a certain number
(I picked 10) or reloads.


2. One other difficulty: some modules actually *do* want to have global
state.  For example, a MySQL interface should be able to establish its
connection once and maintain that through many requests.  Perhaps there
should be a mechanism for a module to say "don't remove me!", or at least
"preserve the value of this variable".


Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From ian at veryfresh.com  Wed May 29 15:57:38 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020529225738.GB553@fullfactor.com>

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.

But in general, you can't guarantee this in *any* situation. All of the 
modules have to work properly when none of their resources are 
installed (say, on server startup,) and they have to be prepared to die 
at any point.

Usually, persistent connections are used for performance reasons only; 
the modules would otherwise be perfectly happy re-opening every 
database connection on every hit.

This auto-reload feature should only be used during development anyway, 
so performance issues like this shouldn't be a problem (turn it off 
during heavy load testing, of course), and it would be much easier than 
completely restarting the web server after every source file change, 
which is what I'm currently doing.


> Perhaps there should be a mechanism for a module to say "don't remove 
> me!", or at least "preserve the value of this variable".

I don't think this is possible in the general case (and I'm pretty sure 
Python doesn't support it). What would happen if a new version of the 
source file uses a different name for the variable? Or worse, uses the 
same variable (name) for a completely different purpose?


Ian
<ian@veryfresh.com>

From mbp at samba.org  Thu May 30 10:38:51 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020530003850.GC29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> 1. I'm not sure how gc interacts with this, but there was a time when you
> just couldn't get rid of a loaded module object.  All of the modules you
> delete will still reference each other in some sort of cycle. If they're not
> deleted you could very quickly end up with an enormous httpd process.

Here's a nickel; get a bigger computer :-)

> Even with gc, if there are any dangling references into one of the old
> modules (an atexit function? somewhere the Python standard libraries cache a
> reference?) then you're going to have a bloated httpd.

Using atexit functions within mod_python is pretty pointless, but your
general point about references held by system modules is correct.

If my code bloated that easily because of reloading modules then I
would be somewhat worried that something would cause it to happen
during production, and I'd feel I ought to investigate what was going
wrong.

You can always turn down MaxRequestsPerChild, or indeed turn off
autoreload.

I guess in general I believe that in development mode (as opposed to
release), correctness and developer productivity is more important
than performance.

In deployment mode, there shouldn't be any bloat because the .py files
won't change.  The cost is just stat'ing them each time, which is a
slight cost but not terrible.

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.  Perhaps there
> should be a mechanism for a module to say "don't remove me!", or at least
> "preserve the value of this variable".

As far as I can see, the only non-bogus use of persistence is
opportunistic caching.  Modules have to cope with losing their
persistent state because (a) requests are unpredictably spread across
Apache instances; (b) Apache can kill and restart children; (c)
relying on it is overly fragile; and (d) without a working reload
mechanism, the programmer will be completely restarting Apache at
intervals anyhow.

-- 
Martin 

From dustin at ywlcs.org  Wed May 29 19:45:44 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:23 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
Message-ID: <20020530004544.GF2519@eleanor.internal.ywlcs.org>

Sorry, meant to send this to the list..

-----

On Wed, May 29, 2002 at 03:57:38PM -0700, Ian Clelland wrote:
> > 2. One other difficulty: some modules actually *do* want to have global
> > state.  For example, a MySQL interface should be able to establish its
> > connection once and maintain that through many requests.
> 
> But in general, you can't guarantee this in *any* situation. All of the 
> modules have to work properly when none of their resources are 
> installed (say, on server startup,) and they have to be prepared to die 
> at any point.
> 
> Usually, persistent connections are used for performance reasons only; 
> the modules would otherwise be perfectly happy re-opening every 
> database connection on every hit.

Right, and in a development environment (the only place one would use a
reloader) I suppose that would be acceptable.  However, if you're testing
against the production database server (a not-unreasonable proposition for a
small to midsize shop with a complex database schema), all those extra
connections might prove to be a burden.  And you can't guarantee that Python
will close them when the module is "unloaded", as the module may continue to
exist for some time.

I'm sorry to be pedantic.  I'm not arguing that such a feature is *required*,
or necessary for any purpose (gee, don't test against your production
database server!), but that it would have *some* benefits, at *minimal* cost
(see below regarding cost), and is thus a win overall.

> This auto-reload feature should only be used during development anyway, 
> so performance issues like this shouldn't be a problem (turn it off 
> during heavy load testing, of course), and it would be much easier than 
> completely restarting the web server after every source file change, 
> which is what I'm currently doing.
> 
> 
> > Perhaps there should be a mechanism for a module to say "don't remove 
> > me!", or at least "preserve the value of this variable".
> 
> I don't think this is possible in the general case (and I'm pretty sure 
> Python doesn't support it). What would happen if a new version of the 
> source file uses a different name for the variable? Or worse, uses the 
> same variable (name) for a completely different purpose?

As to the first suggestion (a mechanism for a module to say "don't remove
me!"), that is already supported in that you do not reload Python standard
modules.  Perhaps you could add a check for a __no_reload__ symbol or the
like?

Regarding permanent variables, under ordinary Python reload semantics, you
can do something like:

try:
  x = my_retained_variable
  del x
except:
  my_retained_variable = initial_value

but that's just for the record.  I can't see why you could possibly want to
do that, *particularly* in mod_python.   :-)

Dustin

--

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

----- End forwarded message -----

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Wed May 29 19:53:12 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530003850.GC29848@samba.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org>
Message-ID: <20020530005312.GG2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 10:38:51AM +1000, Martin Pool wrote:
>
> > Even with gc, if there are any dangling references into one of the old
> > modules (an atexit function? somewhere the Python standard libraries cache a
> > reference?) then you're going to have a bloated httpd.
> 
> Using atexit functions within mod_python is pretty pointless, but your
> general point about references held by system modules is correct.
> 
> If my code bloated that easily because of reloading modules then I
> would be somewhat worried that something would cause it to happen
> during production, and I'd feel I ought to investigate what was going
> wrong.
> 
> You can always turn down MaxRequestsPerChild, or indeed turn off
> autoreload.

Ah!  I had forgotten MaxRequestsPerChild, which lets Apache take care of
counting reloads, so a Python reloader need not worry about it.

> I guess in general I believe that in development mode (as opposed to
> release), correctness and developer productivity is more important
> than performance.

I don't disagree.  You'll note that I'm arguing for features on the basis of
developer convenience at minimal (but not zer) performance cost, which
translates into developer productivity.

> In deployment mode, there shouldn't be any bloat because the .py files
> won't change.  The cost is just stat'ing them each time, which is a
> slight cost but not terrible.

And the cost will be zero, if AutoReload is turned off :-)

> As far as I can see, the only non-bogus use of persistence is
> opportunistic caching.  Modules have to cope with losing their
> persistent state because (a) requests are unpredictably spread across
> Apache instances; (b) Apache can kill and restart children; (c)
> relying on it is overly fragile; and (d) without a working reload
> mechanism, the programmer will be completely restarting Apache at
> intervals anyhow.

True, but there are valid reasons to want to test and develop such
opportunistic caching mechanisms (since anything opportunistic is by at least
a little bit nondeterministic, it probably needs the most testing).  There
are also performance implications, as I detailed in my other reply in this
thread (<20020530004544.GF2519@eleanor.internal.ywlcs.org>).  As I said a few
paragraphs earlier, developer convenience with minimal impact on
performance.

BTW: I assume you're not implying that opportunistic caching is overly
fragile!  It's a great technique!  Relying on not being reloaded, however, is
obviously stupid, since the Apache API *will* reload you :-)

I don't actually care too much about this whole thing; just putting in my
$0.02.  If y'all are really opposed to it, don't put it in.  I'll still love
you, and you can keep the pennies. :-)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From mbp at samba.org  Thu May 30 11:02:10 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:59:23 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010206.GD29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> Right, and in a development environment (the only place one would use a
> reloader) I suppose that would be acceptable.  However, if you're testing
> against the production database server (a not-unreasonable proposition for a
> small to midsize shop with a complex database schema), all those extra
> connections might prove to be a burden.  And you can't guarantee that Python
> will close them when the module is "unloaded", as the module may continue to
> exist for some time.

(I realize it's only an example.)

How often are developers changing and testing their code -- every few
minutes at most?  Suppose every ten seconds on average if you have a
few developers.  If your database can't cope with merely opening and
closing connections at that frequency I think you have big problems
that need to be addressed in some other way.  (More hardware, local
cache, ...)

It's equally or more likely that holding idle connections open
indefinitely would cause resource problems.

Anyhow, such a shop could always forbid use of the reloader.  There's
no need to penalize all users for the sake of this rare and
hypothetical case.

> Regarding permanent variables, under ordinary Python reload semantics, you
> can do something like:

I guess you could just stick the reference into somewhere in sys, but
of course that might result in other modules that you *do* want to
have reloaded actually not being so.

I think the real problem is that without reloading, if you ever forget
to restart Apache, different apache children can have different
versions of the code, which is very confusing.

-- 
Martin 

From mbp at samba.org  Thu May 30 11:08:15 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530005312.GG2519@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org> <20020530005312.GG2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010814.GE29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> And the cost will be zero, if AutoReload is turned off :-)

Yes, that's the nice thing.

> True, but there are valid reasons to want to test and develop such
> opportunistic caching mechanisms (since anything opportunistic is by at least
> a little bit nondeterministic, it probably needs the most testing).

Yes.  You can test them (without changing the code) perfectly well
with this patch.  If you're changing the caching code then by
definition you need to restart one way or another.

Indeed, having objects in memory where the same datastructure is
modified by different versions of the code (with different bugs)
sounds like a recipe for confusion.  Suppose an earlier version of the
cache code actually broke one of the data structure invariants on the
cache -- you *want* to dump and reinitialize the thing.

> BTW: I assume you're not implying that opportunistic caching is overly
> fragile!  It's a great technique!  Relying on not being reloaded, however, is
> obviously stupid, since the Apache API *will* reload you :-)

Yes, that's what I meant: it's only dumb if you *rely* on persistence,
rather than just taking advantage of it when it happens.

Indeed an important part of testing that kind of code would be to set
MaxRequestsPerChild to a low number and make sure that it still works
when it is always being flushed.

-- 
Martin 

Every Python user scoffed at it once, saying significant whitespace is
the past.
	-- Moshe Zadka (?)

From dustin at ywlcs.org  Wed May 29 20:24:02 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:23 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530010206.GD29848@samba.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org> <20020530010206.GD29848@samba.org>
Message-ID: <20020530012402.GH2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 11:02:10AM +1000, Martin Pool wrote:
> 
> Anyhow, such a shop could always forbid use of the reloader.  There's
> no need to penalize all users for the sake of this rare and
> hypothetical case.

I guess I don't see the penalty.  I'm talking about adding a mechanism to
prevent *only certain modules* from being reloaded, e.g. add

..
__no_reload__ = 1  # don't reload this module, please
..

to your module and the reloader will leave it alone.

I think that there are a few -- admittedly border, obscure -- cases where
such a feature would be useful / convenient during development, and that the
implementation cost is nearly nothing.

To demonstrate unequivocally what I mean, here's a patch that can be applied
after the original patch at the root of this thread:

*** apache-orig Wed May 29 20:16:58 2002
--- apache.py   Wed May 29 20:18:08 2002
***************
*** 121,127 ****
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):
--- 121,128 ----
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             if not hasattr(sys.modules[module_name], '__no_reload__'):
!                 del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):

From vmanera at manord.com  Thu May 30 16:59:46 2002
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] problem in file download
Message-ID: <801EB84B006ED411898D00B0D03E524712CCA7@PROXYMAIL>

Hello,

I'm trying to download a file:

client side:
<FORM METHOD="POST"
ACTION="http://sviluppo.manord.com/cgi-mpy/prova.py/printfile "
ENCTYPE="multipart/form-data" NAME="FormDati">
<center>
<INPUT TYPE="file" NAME="file1"></center>
<center>
<INPUT TYPE="submit" NAME="invia" VALUE="Invia Dati"></center>

</FORM>

when I sumitted a file mod_python give me this:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "C:\Program Files\Python22\Lib\mod_python\apache.py", line 193, in
Dispatch
    result = object(req)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 104, in
handler
    val = File(field)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 308, in
__init__
    for m in field.file.__methods__:

  File "C:\programmi\Python22\Lib\tempfile.py", line 178, in __getattr__
    a = getattr(file, name)

AttributeError: 'file' object has no attribute '__methods__'


does anyone have any idea to solve this?

Villiam


From conrad at hep.caltech.edu  Thu May 30 18:20:56 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] Serving files efficiently
Message-ID: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>

Hi

Looking at the previous thread on serving files got me thinking:

I'm also trying to serve a file (or part of a file) in response to an
xmlrpc query. Since URL filtering etc. is not an option in this case, is
there a way to tell apache to do a sendfile() or similar from
mod_python? I'm sure this would be more efficient that my current method
of (roughly) reading to a buffer and then sending the buffer with
req.write() and constructing my own headers.

Any ideas?

Cheers!

Conrad
-- 
*-----------------------------------------*
| Conrad Steenberg                        |
| Caltech, Mail Code 356-48               |
| Pasadena, CA, 91125                     |
| e-mail: conrad@hep.caltech.edu          |
| Tel: (626) 395-8758                     |
*-----------------------------------------*


From dustin at ywlcs.org  Thu May 30 21:07:34 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
Message-ID: <20020531020733.GB11734@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> Hi
> 
> Looking at the previous thread on serving files got me thinking:
> 
> I'm also trying to serve a file (or part of a file) in response to an
> xmlrpc query. Since URL filtering etc. is not an option in this case, is
> there a way to tell apache to do a sendfile() or similar from
> mod_python? I'm sure this would be more efficient that my current method
> of (roughly) reading to a buffer and then sending the buffer with
> req.write() and constructing my own headers.

Since sendfile() is pretty much what Apache will do anyway, you can just call
sendfile() from Python.  There's a Python implementation of sendfile in
Medusa (I haven't tested it, but it's in the source).  You could also SWIG
it.

http://www.nightmare.com/medusa/
http://www.swig.org/

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From conrad at hep.caltech.edu  Thu May 30 22:57:05 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:59:23 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <20020531020733.GB11734@eleanor.internal.ywlcs.org>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu> 
	<20020531020733.GB11734@eleanor.internal.ywlcs.org>
Message-ID: <1022824630.3487.0.camel@charter-187-163.caltech.edu>

Hi Dustin

Thanks! I'll try it tomorrow :-)

Conrad

On Thu, 2002-05-30 at 19:07, Dustin Mitchell wrote:
> On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> > Hi
> > 
> > Looking at the previous thread on serving files got me thinking:
> > 
> > I'm also trying to serve a file (or part of a file) in response to an
> > xmlrpc query. Since URL filtering etc. is not an option in this case, is
> > there a way to tell apache to do a sendfile() or similar from
> > mod_python? I'm sure this would be more efficient that my current method
> > of (roughly) reading to a buffer and then sending the buffer with
> > req.write() and constructing my own headers.
> 
> Since sendfile() is pretty much what Apache will do anyway, you can just call
> sendfile() from Python.  There's a Python implementation of sendfile in
> Medusa (I haven't tested it, but it's in the source).  You could also SWIG
> it.
> 
> http://www.nightmare.com/medusa/
> http://www.swig.org/
> 
> Dustin
> 
> -- 
> 
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
-- 


From Nik.Barron at pennantplc.co.uk  Wed May  1 12:16:53 2002
From: Nik.Barron at pennantplc.co.uk (Nik Barron)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] mod_python.publisher problems: 404s on second an
	d subsequent hits
Message-ID: <F17550784FF9D111B7F100E02921B24741E8DD@NT-SOTON-001>

Hi,

Still having problems with this, even with the 2.7.8 apache.py installed;
anyone have any suggestions?

Nik

From jquinte at fadu.uba.ar  Thu May  2 18:31:05 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] I need advice, please...
Message-ID: <200205021536.SAA11506@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi !!!
I have seen an example in the FAQ to share the connection to the Database 
between many modules using a global variable. I was trying to do the same but 
I realize that a new connection is established every time I click a link. All 
works fine until all the job is done and I return apache.OK. After that, the 
variable holding my DB Connection seems to get lost and I have to connect 
again. Someone told me that I should use any module that let me share memory. 
That's ok and I've done that too, but everyone uses pickle to convert the 
object to a string. The matter is that Connection Objects cannot be converted 
by pickle. Does any of you have any idea, please?

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE80bAadBzRnlFl4cgRAvdkAKC3jI734xIwvVPOR0Fh5Jd5nIT6xgCgqLay
ry5lDNqh+XaV01ee7WSSO0k=
=x9WS
-----END PGP SIGNATURE-----

From johannes at erdfelt.com  Thu May  2 20:16:08 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <200205021536.SAA11506@www.fadu.uba.ar>; from jquinte@fadu.uba.ar on Thu, May 02, 2002 at 06:31:05PM -0300
References: <200205021536.SAA11506@www.fadu.uba.ar>
Message-ID: <20020502201608.S21887@sventech.com>

On Thu, May 02, 2002, Javier Quinteros <jquinte@fadu.uba.ar> wrote:
> I have seen an example in the FAQ to share the connection to the Database 
> between many modules using a global variable. I was trying to do the same but 
> I realize that a new connection is established every time I click a link. All 
> works fine until all the job is done and I return apache.OK. After that, the 
> variable holding my DB Connection seems to get lost and I have to connect 
> again. Someone told me that I should use any module that let me share memory. 
> That's ok and I've done that too, but everyone uses pickle to convert the 
> object to a string. The matter is that Connection Objects cannot be converted 
> by pickle. Does any of you have any idea, please?

The problem is that Apache forks off a number of children to handle all
of the requests.

It's probably not forgetting the value, it's just that you're hitting a
new Apache child.

Using the code in the FAQ, you'll have one database connection per child
maximum, which is usually reasonable.

JE


From modpython at smartology.nl  Fri May  3 11:21:09 2002
From: modpython at smartology.nl (Remy C. Cool)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] problem with mod_python authentication via postgresql
Message-ID: <E173ZFY-0003vE-00@osiris>

I'm experimenting with python/mod_python and run into a problem with 
autentication...  

I use the following code:

# authenticate user
import psycopg
import string
import time
from mod_python import apache


def authenhandler(req):

   pw = req.get_basic_auth_pw()
   user = req.connection.user

   # create database connection
   connectstring = "dbname=testbase user=tester password=test 
port=5432"
   dbconn = psycopg.connect(connectstring)
   dbhandle = dbconn.cursor()
   # define query
   dbhandle.execute("SELECT user_id,password FROM users WHERE 		   
username = %s", (user,))
   # retrieve results
   results = dbhandle.fetchall()
   total = len(results)

   if total < 1:
      # user not known on this system
      return apache.HTTP_UNAUTHORIZED
   else:
      if total > 2:
         # database corrupted
         return apache.HTTP_UNAUTHORIZED
      else:
         # extract user_id from list
         user_id = results[0][0]
         # get host info
         curhost = req.get_remote_host(apache.REMOTE_NAME)
         # register login try
         dbhandle.execute("""INSERT INTO login (user_id,host) VALUES 
( %d,%s )""", (user_id,curhost))
         dbconn.commit()
         # extract password from list
         passwd = string.strip(results[0][1])
         # compare password with given
         if pw == passwd:
            # user authenticated
            return apache.OK
         else:
            # incorrect password
            return apache.HTTP_UNAUTHORIZED

Authentication works. The username is looked up in the database and 
if the password is OK, access is granted. The problem is that for 
every login attempt (or page refresh) I get 4 entry's in my login 
table ond not one. What am I doing wrong here ?

Regards,
Remy Cool

From dustin at ywlcs.org  Sat May  4 14:28:21 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] Powered by mod_python logo?
Message-ID: <20020504192821.GA2017@eleanor.internal.ywlcs.org>

Anyone have a logo or icon appropriate for sticking in the corner of
mod_python-generated pages?  Similar to "powered by PHP" or "powered by
Apache" or whatever?

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May  4 15:35:41 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] Unrelated: add_handler()'s 3rd argument
Message-ID: <20020504203540.GB2017@eleanor.internal.ywlcs.org>

From jquinte at fadu.uba.ar  Mon May  6 15:45:16 2002
From: jquinte at fadu.uba.ar (Javier Quinteros)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] I need advice, please...
In-Reply-To: <20020502201608.S21887@sventech.com>
References: <200205021536.SAA11506@www.fadu.uba.ar> <20020502201608.S21887@sventech.com>
Message-ID: <200205061250.PAA24036@www.fadu.uba.ar>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks, Johannes !!!
You are right !!!

On Thursday 02 May 2002 21:16, Johannes Erdfelt wrote:
> The problem is that Apache forks off a number of children to handle all
> of the requests.
>
> It's probably not forgetting the value, it's just that you're hitting a
> new Apache child.
>
> Using the code in the FAQ, you'll have one database connection per child
> maximum, which is usually reasonable.
>
> JE
>

- -- 
- ---------------------------------
Javier Quinteros
jquinte@fadu.uba.ar
Secretar?a de Planificaci?n
Universidad de Buenos Aires
- ---------------------------------
Existe un solo lugar donde el Norte y el Sur del mundo se enfrentan en
igualdad de condiciones: es una cancha de f?tbol de Brasil, en la 
desembocadura
del r?o Amazonas. La l?nea del ecuador corta por la mitad el estadio Zerao, en
Amap?, de modo que cada equipo juega un tiempo en el sur y otro tiempo en el
norte.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE81s9CdBzRnlFl4cgRAi6OAJ9cF/MsGGwPrrLc8Ndb5vjOfrkaAQCeKu2q
hyhynnJHZE/2wIvUo6wp1XA=
=4MNL
-----END PGP SIGNATURE-----

From s_lott at yahoo.com  Thu May  9 04:58:04 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] Subclassing Request
Message-ID: <20020509115804.16929.qmail@web9607.mail.yahoo.com>

I'd like to use a subclass of Request that includes creating a
FieldStorage instance automatically when the Request is created.

Can this be done by subclassing Request, subclassing CallBack to
use the new subclass of Request and then providing a new init()
function in my file?

If not, how do you suggest I create my own subclass of Request?

Also, unrelated, is it possible to add an items() method to tableobject.c?

=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
Yahoo! Shopping - Mother's Day is May 12th!
http://shopping.yahoo.com

From stas at mail.ru  Fri May 10 09:11:25 2002
From: stas at mail.ru (Stas)
Date: Fri Jan  9 22:03:10 2004
Subject: [mod_python] Привет!
Message-ID: <200205101611.g4AGBPc04412@asteroid.powweb.com>

Ваш компьютер не справляется с работой? 
Долго загружаются программы, новая игра не радует?

Ваши проблемы - не в устаревшем железе, а в ненастроенном компьютере! 
Хотите вдвое увеличить производительность вашего процессора? 
Забыть о разорвавшемся коннекте и зависшем Windows? 

Тогда эта программа для вас!
Она поможет правильно настроить ваш комьютер и периферийное оборудование, 
что вдвое повысит производительность, устранит неполадки и решит проблемы, 
из-за которых Windows часто зависает. Вы сможете так настроить модем, 
что практически при любой скорости и любом провайдере он будет держать соединение.

Совершенно бесплатно загрузить программу можно здесь

http://xtremetechs.by.ru

http://www.az.ru/xtremetech

С уважением, команда разработчиков X-Treme Technologies ®



*** Программа не содержит вирусов.

-------------------------------------------------------------------------
To be removed from this mailing list
click on the link below 
http://muziki-na-ohotecom.powweb.com/cgi-bin/mail.cgi?mod_python@modpython.org



From support at obantec.net  Fri May 10 20:03:51 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] Apache warning on start
Message-ID: <03af01c1f855$6f782d20$0a01a8c0@gamma>

Hi

New to python.
I just added mod_python to my apache 1.3.24 on redhat 7.2 and although it
runs ok i see this error on start

[warn] Loaded DSO libexec/mod_python.so uses plain Apache 1.3 API, this
module might crash under EAPI! (please recompile it with -DEAPI)

Mark


From s13361562 at bach.sun.ac.za  Sat May 11 17:44:27 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] getting username when using publisher auth
Message-ID: <20020511154427.GA12177@vervet.localnet>

Is it possible to get at the username from "normal code" when
authentication is done using __auth__ methods? req.connection.user is
None...

def test(req):
    def __auth__(req, user, passwd):
        if user == "eggs" and passwd == "spam":
            return 1
        else:
            return 0

    return "Hello "+str(req.connection.user)

returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
not help.

Thanks,
Hugo van der Merwe

From suselist at blackball.biz  Sun May 12 01:22:39 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python 2.7.8
Message-ID: <595450206.20020512012239@blackball.biz>

Hello,

i have a big (?) problem.
I've just installed mod_python 2.7.8
On SuSE Linux 7.2 with apache.

So i've added the required lines in Apache.
Apache tells me, that this modul might crash under EAPI.

And when I start a python-script via Brwoser i get the source code.
What might i have done false?

THX

Stephan

Sorry for my bad english!




From jwm-mod_python at sentinelchicken.net  Sat May 11 16:56:02 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <595450206.20020512012239@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 01:22:39AM +0200
References: <595450206.20020512012239@blackball.biz>
Message-ID: <20020511165602.A7089@samson.sentinelchicken.net>

On Sun, May 12, 2002 at 01:22:39AM +0200, Stephan Pienitz wrote:
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.

What does your httpd.conf look like? Did you specify a handler in you script?

> 
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
> 
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
> 
> THX
> 
> Stephan
> 
> Sorry for my bad english!
> 
> 
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From rien at yeepa.org  Sun May 12 10:29:27 2002
From: rien at yeepa.org (Adrien Plisson)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] getting username when using publisher auth
References: <20020511154427.GA12177@vervet.localnet>
Message-ID: <000d01c1f98f$21eca140$2cee4cd4@RANDOM>

From: "Hugo van der Merwe" <s13361562@bach.sun.ac.za>
> def test(req):
>     def __auth__(req, user, passwd):
>         if user == "eggs" and passwd == "spam":
>             return 1
>         else:
>             return 0
> 
>     return "Hello "+str(req.connection.user)
> 
> returns "Hello None"... adding a call to req.get_basic_auth_pw() does 
> not help.

try calling "req.get_basic_auth_pw()" BEFORE calling "req.connection.user"

-- 
rien




From mateusz at ant.gliwice.pl  Sun May 12 20:05:12 2002
From: mateusz at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
Message-ID: <200205121805.g4CI5Ks00385@eden.ispol.com>

I tried all afternoon without success :(
First I compiled python 2.2.1 

Python-2.2.1]$ ./configure --without-threads
$make
It went Ok (with two warnings)

then  I did:
mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr 
--bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share 
--includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec 
--localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man 
--infodir=/usr/share/info --with-apxs=/usr/sbin/apxs 
--with-python=/home/matkor/src/Python-2.2.1

It complained about:
checking what libraries Python was linked with... grep: 
/home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or 
directory

make again went OK, but make install failed:

$ make install
make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'

Performing DSO installation.

/usr/bin/install -c src/mod_python.so /usr/lib/apache
make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
/usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
python /usr/local/lib/python2.2/compileall.py 
/usr/local/lib/python2.2/site-packages/mod_python
python: can't open file '/usr/local/lib/python2.2/compileall.py'
make[2]: *** [install_py_lib] B??d 2

Having copying mod_pytho.so manually to /usr/lib/apache/
results an error:

$ /etc/rc.d/init.d/httpd configtest
Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
Cannot load /etc/httpd/modules/mod_python.so into server: 
/etc/httpd/modules/mod_python.so: undefined symbol: openpty

Any ideas ?
TIA

-- 
Mateusz Korniak

From grisha at modpython.org  Sun May 12 15:10:52 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] Does anybody succeded in running mod_python with
 python 2.x under RH 7.x ?
In-Reply-To: <200205121805.g4CI5Ks00385@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205121509520.842-100000@localhost>

Try configuring it with just one argument:

./configure --with-apxs=/usr/sbin/apxs

Grisha

On Sun, 12 May 2002, Mateusz Korniak wrote:

> I tried all afternoon without success :(
> First I compiled python 2.2.1
>
> Python-2.2.1]$ ./configure --without-threads
> $make
> It went Ok (with two warnings)
>
> then  I did:
> mod_python-2.7.8]$ ./configure   --prefix=/usr --exec-prefix=/usr
> --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share
> --includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec
> --localstatedir=/var --sharedstatedir=/usr/com --mandir=/usr/share/man
> --infodir=/usr/share/info --with-apxs=/usr/sbin/apxs
> --with-python=/home/matkor/src/Python-2.2.1
>
> It complained about:
> checking what libraries Python was linked with... grep:
> /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or directory
> grep: /home/matkor/src/Python-2.2.1/Modules/Makefile: No such file or
> directory
>
> make again went OK, but make install failed:
>
> $ make install
> make[1]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8/src'
> make[2]: Opuszczam katalog `/home/matkor/src/mod_python-2.7.8/src'
>
> Performing DSO installation.
>
> /usr/bin/install -c src/mod_python.so /usr/lib/apache
> make[2]: Wchodz? katalog `/home/matkor/src/mod_python-2.7.8'
> /usr/bin/install -c -d /usr/local/lib/python2.2/site-packages/mod_python
> python /usr/local/lib/python2.2/compileall.py
> /usr/local/lib/python2.2/site-packages/mod_python
> python: can't open file '/usr/local/lib/python2.2/compileall.py'
> make[2]: *** [install_py_lib] B??d 2
>
> Having copying mod_pytho.so manually to /usr/lib/apache/
> results an error:
>
> $ /etc/rc.d/init.d/httpd configtest
> Syntax error on line 271 of /etc/httpd/conf/httpd.conf:
> Cannot load /etc/httpd/modules/mod_python.so into server:
> /etc/httpd/modules/mod_python.so: undefined symbol: openpty
>
> Any ideas ?
> TIA
>
> --
> Mateusz Korniak
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From Mateusz.Korniak at ant.gliwice.pl  Sun May 12 21:48:52 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] Does anybody succeded in running mod_python with python 2.x under RH 7.x ?
In-Reply-To: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
References: <Pine.BSF.4.32.0205121509520.842-100000@localhost>
Message-ID: <200205121948.g4CJmts01196@eden.ispol.com>

On Sunday 12 May 2002 21:10, you wrote:
> Try configuring it with just one argument:
>
> ./configure --with-apxs=/usr/sbin/apxs

If I did so it found old python (under RH there are two separate executables 
python is 1.5.x and python2 is 2.x )
checking Python version... 1.5

So I fooled ./configure by
$ cp /usr/bin/python2.2 /usr/bin/python 
then it worked OK but got big warning about python threadness

checking Python version... 2.2
checking whether Python is compiled with thread support... yes

  ****** WARNING ******
  Python is compiled with thread support. Apache 1.3 does not use threads.
  On some systems this will cause problems during compilation, on others
  it may result in unpredictable behaviour of your Apache server. Yet on
  others it will work just fine. The recommended approach is to compile
  Python without thread support in a separate location and specify it with
  --with-python option to this ./configure script.

also I got warning during startup:

# /etc/rc.d/init.d/httpd configtest
[Sun May 12 21:23:44 2002] [warn] Loaded DSO modules/mod_python.so uses plain 
Apache 1.3 API, this module might crash under EAPI! (please recompile it with 
-DEAPI)
Syntax OK
[root@beauty /root]# /etc/rc.d/init.d/httpd graceful
/usr/sbin/apachectl graceful: httpd gracefully restarted

but apache seems to work. :)))
I don't know how dangerous are those warnings .. but thanks a lot for help ;)


-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From fuf at mobil.cz  Mon May 13 17:00:00 2002
From: fuf at mobil.cz (Michal Vitecek)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] questions/ideas
Message-ID: <20020513170000.A18394@diana.mobil.cz>

 hello everyone,

 i'm taking a decision whether to use python or php in my next project.
 i'm leaning towards python and mod_python, but i found some
 problems/questions/ideas that i'd like to know answers to first.

    a) as i did my previous projects in php i now find it quite strange
       that i need to call a certain function of a script. this makes it a
       bit more difficult to use the few global variables that i plan to
       use and from time to time makes the whole program into a single
       function (one tab is taken)

    b) the publisher submodule needs to know the name of the function to
       run - would it be possible to change it so that it doesn't need it
       ie. run the whole script instead?

    c) the publisher submodule reads the whole output of a function to a
       variable - for a sites with large html pages this could be 100s of
       KBs. this could mean a noticeable performance slowdown - also
       because the output must be prepared first. how about if the
       function output the resulting html code to a stream?

    d) i noticed that the python interpreter is not the same even for a
       single virtualhost (even when i explicitly define its name with
       PythonInterpreter) => the persistence is kept only withing every
       apache child. with increase of the number of children a new
       interpreter is created that doesn't inherit from the main one (i'm
       using python 2.2.1 and apache 1.3.20).

    e) in php it's possible to have the php code mixed with the html one -
       ie. there are special marks, that mark the start and end of php
       code. i think it would be a nice option to have in mod_python
       because it helps imho to create scripts the allow for easy to
       review code.

	thank you for your time
--
		fuf		(fuf@mobil.cz)

From johannes at erdfelt.com  Mon May 13 14:12:24 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513170000.A18394@diana.mobil.cz>; from fuf@mobil.cz on Mon, May 13, 2002 at 05:00:00PM +0200
References: <20020513170000.A18394@diana.mobil.cz>
Message-ID: <20020513141224.E23170@sventech.com>

On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>  i'm taking a decision whether to use python or php in my next project.
>  i'm leaning towards python and mod_python, but i found some
>  problems/questions/ideas that i'd like to know answers to first.

I've made the switch from PHP to mod_python successfully.

>     a) as i did my previous projects in php i now find it quite strange
>        that i need to call a certain function of a script. this makes it a
>        bit more difficult to use the few global variables that i plan to
>        use and from time to time makes the whole program into a single
>        function (one tab is taken)

That's just how python works. It's a different style of programming, but
I think it's better.

I got into too many problems with global variables in PHP that caused me
headaches.

>     b) the publisher submodule needs to know the name of the function to
>        run - would it be possible to change it so that it doesn't need it
>        ie. run the whole script instead?

Use the attached patch to mod_python. It'll call the function named
"handler" if there is no name passed. The patch is relative to 2.7.6.

>     c) the publisher submodule reads the whole output of a function to a
>        variable - for a sites with large html pages this could be 100s of
>        KBs. this could mean a noticeable performance slowdown - also
>        because the output must be prepared first. how about if the
>        function output the resulting html code to a stream?

Have you measured a decrease in performance?

>     d) i noticed that the python interpreter is not the same even for a
>        single virtualhost (even when i explicitly define its name with
>        PythonInterpreter) => the persistence is kept only withing every
>        apache child. with increase of the number of children a new
>        interpreter is created that doesn't inherit from the main one (i'm
>        using python 2.2.1 and apache 1.3.20).

That's because of the multiple process approach to apache. Since each
child is a different process, they don't share memory.

You can play tricks with shared memory if you really need that
functionality.

>     e) in php it's possible to have the php code mixed with the html one -
>        ie. there are special marks, that mark the start and end of php
>        code. i think it would be a nice option to have in mod_python
>        because it helps imho to create scripts the allow for easy to
>        review code.

There are add on packages like that. I've been using a package called
Cheetah that provides something similar.

Do some searching.

JE

-------------- next part --------------
--- mod_python/publisher.py.orig	Tue Apr 16 20:31:06 2002
+++ mod_python/publisher.py	Tue Apr 16 20:34:45 2002
@@ -80,17 +80,17 @@
     args = {}
 
     # get the path PATH_INFO (everthing after script)
-    if not _req.subprocess_env.has_key("PATH_INFO"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
-    
-    func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
-    func_path = string.replace(func_path, "/", ".")
-    if func_path[-1] == ".":
-        func_path = func_path[:-1] 
+    if _req.subprocess_env.has_key("PATH_INFO"):
+        func_path = _req.subprocess_env["PATH_INFO"][1:] # skip fist /
+        func_path = string.replace(func_path, "/", ".")
+        if func_path[-1] == ".":
+            func_path = func_path[:-1] 
 
-    # if any part of the path begins with "_", abort
-    if func_path[0] == '_' or string.count(func_path, "._"):
-        raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+        # if any part of the path begins with "_", abort
+        if func_path[0] == '_' or string.count(func_path, "._"):
+            raise apache.SERVER_RETURN, apache.HTTP_NOT_FOUND
+    else:
+        func_path = "handler"
 
     # process input, if any
     fs = util.FieldStorage(req, keep_blank_values=1)
From grisha at modpython.org  Mon May 13 14:59:34 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] questions/ideas
In-Reply-To: <20020513141224.E23170@sventech.com>
Message-ID: <Pine.BSF.4.32.0205131455160.12699-100000@localhost>


On Mon, 13 May 2002, Johannes Erdfelt wrote:

> On Mon, May 13, 2002, Michal Vitecek <fuf@mobil.cz> wrote:
>
> >     c) the publisher submodule reads the whole output of a function to a
> >        variable - for a sites with large html pages this could be 100s of
> >        KBs. this could mean a noticeable performance slowdown - also
> >        because the output must be prepared first. how about if the
> >        function output the resulting html code to a stream?
>
> Have you measured a decrease in performance?

You can, btw write to a stream if you need to, even from publisher scripts
- you just have to call req.send_http_header() manually first, and after
that you can write to the socket using req.write(). This technique is
useful for doing things like a traceroute script in which you want lines
to appear as soon as data is available.

Grisha


From support at obantec.net  Mon May 13 21:37:12 2002
From: support at obantec.net (Support)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python 2.7.8
References: <595450206.20020512012239@blackball.biz>
Message-ID: <157701c1fabd$fb9a7050$0a01a8c0@gamma>

Hi

I fixed the apache DEAPI warning by doing the following.

./configure --with-apxs=/usr/local/apache/bin/apxs --with-python=/usr/local/
lib/python2.2

then edit the Makefile in mod_python-2.7.8/src/

add -DEAPI to the line CFLAGS=$(OPT) $(INCLUDES)
so it becomes
CFLAGS=$(OPT) $(INCLUDES) -DEAPI

then follow make instruction for dso

Re. python as source check doc-html/inst-testing.html

HTH

Mark
--
Obantec Support
www.obantec.net
WebHosting and Domains
Nominet UK Tag Holder
----- Original Message -----
From: "Stephan Pienitz" <suselist@blackball.biz>
To: <mod_python@modpython.org>
Sent: Sunday, May 12, 2002 12:22 AM
Subject: [mod_python] mod_python 2.7.8


> Hello,
>
> i have a big (?) problem.
> I've just installed mod_python 2.7.8
> On SuSE Linux 7.2 with apache.
>
> So i've added the required lines in Apache.
> Apache tells me, that this modul might crash under EAPI.
>
> And when I start a python-script via Brwoser i get the source code.
> What might i have done false?
>
> THX
>
> Stephan
>
> Sorry for my bad english!
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


From jwm-mod_python at sentinelchicken.net  Mon May 13 15:13:15 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python 2.7.8
In-Reply-To: <556963282.20020512035022@blackball.biz>; from suselist@blackball.biz on Sun, May 12, 2002 at 03:50:22AM +0200
References: <595450206.20020512012239@blackball.biz> <20020511165602.A7089@samson.sentinelchicken.net> <1873819371.20020512025758@blackball.biz> <20020511174750.A7171@samson.sentinelchicken.net> <556963282.20020512035022@blackball.biz>
Message-ID: <20020513151314.D10655@samson.sentinelchicken.net>

Hast Du immernoch Probleme?


On Sun, May 12, 2002 at 03:50:22AM +0200, Stephan Pienitz wrote:
> Guten Tag Jason Morgan,
> 
> Am Sonntag, 12. Mai 2002 um 02:47 schrieben Sie:
> 
> 
> JM> Gruess Dich Stephan,
> 
> >> I've added in my httpd.conf following lines:
> >> 
> >> LoadModule python_module libexec/mod_python.so
> 
> JM> Do you also have:
> 
> JM> AddModule mod_python.c
> 
> JM> in the ClearModuleList-section?
> 
> >> <Directory /home/www/pythontestt>
> >>   AddHandler python-program .py
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> JM> Wenn das nicht functioniert, vielleicht sollst Du der modpython_email_liste wieder schreiben. Ich habe mod_python nur gestern
> JM> installiert und habe noch nicht viel damit gearbeitet. Vergiss(?) nicht Apache wiederzustarten!
> 
> JM> Viel Glueck,
> 
> JM> Jason
> 
> Hi,
> 
> ich schreibe dann mal deutsch :)
> 
> Also, wenn ich das .c-Modul hinzuf?ge, dann gibt der Apache zwar beim
> neustart keine Fehlermelung aus, aber st?rtzt trotzdem ab.
> 
> JM> Here, you should also have a PythonHandler, from mine, I have:
> 
> JM> PythonHandler index
> 
> JM> But you can call it anything (file) you want.
> 
> >> </Directory>
> 
> Dann w?re das doch aber nur f?r ein File g?ltig, oder?
> 
> THX
> 
> Stephan
> 
> 
> 

From suselist at blackball.biz  Tue May 14 21:06:18 2002
From: suselist at blackball.biz (Stephan Pienitz)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] It doesn't work
Message-ID: <1803493863.20020514210618@blackball.biz>

Hi,

i've set up mod_python in DSO-Mode.
Then I've written the 2 Lines into the
Apache-Conf.

The I'ved restartet Apache an it says to me, thats allright. But then
i can't open any webpage on my server.

What have i done wrong?

THX

Stephan

Sorry for my bad english




From jwm-mod_python at sentinelchicken.net  Tue May 14 22:13:13 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020514221313.A14746@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From roger.baklund at mobiliant.com  Wed May 15 17:49:38 2002
From: roger.baklund at mobiliant.com (Roger Baklund)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] cgihandler, w2k
Message-ID: <BGEHIEMNFIOKLADGCOJIMEBCDBAA.roger.baklund@mobiliant.com>

Hi,

we have installed mod_python on a w2k server, and the mptest.py "Hello
world" is working.

However, when running a cgi application through the cgihandler, we have some
problems.

First, we thought it was working, but it was not, as we saw many python
processes coming and going in the task manager, as if it was running like a
normal cgi.

We reinstalled, and we patched some lines in apache.py, function
setup_cgi(), according to notes found on this mailinglist ("old_env =
os.environ.copy()" and "return old_env, si, so").

This time the cgihandler was running, and we found some problems in the cgi
that we fixed ("if __name__ == '__main__':" and some redirects that went
wrong because of missing status header.)

Then we got some strange errors... it started to complain about modules not
existing, when it was trying to delete from sys.modules. This is in the
beginning of the cgihandler.py handler() function.

We had to move the "_lock.acquire()" to before the sys.modules loop to get
rid of the error messages.

We tried to remove the sys.modules loop (as indicated in a comment in the
source), but we could not make that work. We always get Internal Server
Error when we try to run without this module reload mechanism. See log
entries below.

The application is frames based. When the user log in, a frameset is
returned, and new requests are made for a stylesheet, a couple of external
javascripts, and a couple of cgi-based html pages/frames.

From jwm at sentinelchicken.net  Wed May 15 09:51:52 2002
From: jwm at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
Message-ID: <20020515095152.A16190@samson.sentinelchicken.net>

Hello:

Ok, please excuse my ignorance, but I'm trying to move three sites over to mod_python from php and I'm having some trouble figuring
what is the 'proper' way to proceed. I have mod_python installed and working, however, I'm not familiar with the handler concept
(yes, I RTFM) and am trying to decide what to do with it. Should I have handler dealing with everything in my dirs, while passing
off content generation to methods within personal modules? What is the role of mod_python.publisher. I would appreciate any help I
can get - URLs are welcome. I've done the google searches, though, and haven't come across anytrhing about how people actually
structure their sites. I dont' just want to hack something together - as I plan to leave most site maintenance to a new employee
:-).

Thanks,

JWM

From diedrich at myriad.com  Fri May 17 10:27:13 2002
From: diedrich at myriad.com (Karl Diedrich)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] Apache 2.0 CVS?
Message-ID: <3CE52F61.29762B72@myriad.com>

Hello,

Is the mod_python for Apache2.0.x being worked on in CVS?

I have done some Python extension programming so I would be willing to
look over the necessary
files to help if I know which files are important.

--
Karl Diedrich
Programmer II
Myriad Genetics Inc.
http://www.myriad.com/
(801) 883-3246


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020517/975cd5f7/attachment-0003.htm
From grisha at modpython.org  Fri May 17 13:46:55 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] Apache 2.0 CVS?
In-Reply-To: <3CE52F61.29762B72@myriad.com>
Message-ID: <Pine.BSF.4.32.0205171346250.65141-100000@localhost>

Yes, just follow the CVS link off the website. The latest version is the
one for apache 2.0.

Grisha

On Fri, 17 May 2002, Karl Diedrich wrote:

> Hello,
>
> Is the mod_python for Apache2.0.x being worked on in CVS?
>
> I have done some Python extension programming so I would be willing to
> look over the necessary
> files to help if I know which files are important.
>
> --
> Karl Diedrich
> Programmer II
> Myriad Genetics Inc.
> http://www.myriad.com/
> (801) 883-3246
>
>
>


From ian at veryfresh.com  Fri May 17 20:27:54 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020514221313.A14746@samson.sentinelchicken.net>
References: <20020514221313.A14746@samson.sentinelchicken.net>
Message-ID: <20020518032754.GF90@fullfactor.com>

On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> Hello:
> 
> Ok, please excuse my ignorance, but I'm trying to move three sites 
> over to mod_python from php and I'm having some trouble figuring what 
> is the 'proper' way to proceed. I have mod_python installed and 
> working, however, I'm not familiar with the handler concept (yes, I 
> RTFM) and am trying to decide what to do with it. Should I have 
> handler dealing with everything in my dirs, while passing off content 
> generation to methods within personal modules? What is the role of 
> mod_python.publisher. I would appreciate any help I can get - URLs 
> are welcome. I've done the google searches, though, and haven't come 
> across anytrhing about how people actually structure their sites. I 
> dont' just want to hack something together - as I plan to leave most 
> site maintenance to a new employee
> :-).

Well, I'm not sure how closely my experiences mirror those of other 
mod_python developers, but I can try to give you some insight. (I spent 
about two years writing almost exclusively in PHP, and am now adjusting 
to mod_python)

The handler concept is by far the biggest difference between the two 
environments. A PHP script typically resides 'at' a specific URL, and 
only services requests for that URL. A mod_python handler, in contrast, 
becomes part of the web server, and handles requests whenever Apache 
gives them to it.

To be a little clearer, the way I will usually install a handler is to 
include it within an Apache <Location> directive. For example, I am 
writing a user-management module, and I want it to be mounted at 
http://mysite.com/users, so I set up Apache like this:

  <Location /users>
    SetHandler python-program
    PythonPath "sys.path+['/usr/local/lib/site_apps']"
    PythonHandler userinfo
  </Location>

This means that now my python module (at 
/usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
request to a URL which begins with "/users". 

The first thing that userinfo.py does is analyse the URL of the request 
to see exactly what was requested. If it is just "/users/", it displays 
a list of users. If it is "/users/showuser/ian", then it looks up the 
user record for 'ian' and displays that record. If it is 
"/users/no-such-page" then it returns apache.DECLINED, and Apache 
handles the 404 error.

I can also distinguish between GET and POST requests by examining the 
req.method variable. If the request is a GET to 
"/users/deleteuser/ian", then userinfo.py will display a confirmation 
page. If it is a POST to that same URL, it will read the POST data, 
look for a confirmation, and delete the user.

Most of my handlers are designed in this fashion, as one main python 
module installed under a base URL, which defines a "URL-space". The 
main module uses import statements to access all of the libraries it 
needs (database access, user record class, string, cgi, etc.) to do its
work.


If you want to look for other resources on application design with 
mod_python, try searching for information on mod_perl. It's the closest 
thing I have found to mod_python, as they both act as scripting-
language interfaces to the Apache C API. O'Reilly's book "Writing 
Apache Modules with Perl and C" has been an invaluable resource for me. 
Also, once you understand how the Apache API works, the mod_python 
documentation becomes a much more useful tool.


If your goal is just to convert your applications from PHP to the 
Python language, then you may want to look at the Publisher handler 
which Grisha has supplied with mod_python. It allows you to use Python 
scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
people on this list seem to be using it exclusively. In that case, the 
publisher handler becomes the default handler for your entire site. It 
deals with every request that comes in by looking for a Python module 
with the appropriate name in the right directory, and passing it 
parameters based on the request. (This is actually completely backwards 
to the way PHP works, but the effect is the same -- you believe that 
you are calling the Python script directly from the URL.)


I hope this answers at least some of your questions; feel free to ask 
more if I've just made things more confusing :)


Ian
<ian@veryfresh.com>


From s13361562 at bach.sun.ac.za  Sat May 18 11:54:17 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] Getting 404's ...
Message-ID: <20020518095417.GA27377@vervet.localnet>

Often, after loading a number of pages, including one with __auth__
method, from two different directories:

<Directory /var/www>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

<Directory /var/www/newwebsite>
  AddHandler python-program .py
  PythonHandler mod_python.publisher
</Directory>

I sometimes get 404's. Alternating. I.e. I hit refresh, continually on
the same page, then it is sometimes 404's, sometimes it works.
Restarting the apache server usually results in it working great for a
while at least. How can I debug this, throw a bunch of prints in
publisher.py? Do prints show up in error.log though?

I have reason to believe that this only starts going haywire after I've
viewed some things in the newwebsite directory. This is in fact a "newer
version" of the things in the other. Might it be confusing the two? How
exactly does mod_python work, does loaded modules remain loaded, i.e.
they only get loaded once? (Can one have global variables that will then
maintain their value between page requests?)

Thanks,
Hugo van der Merwe

From Mateusz.Korniak at ant.gliwice.pl  Sat May 18 12:30:14 2002
From: Mateusz.Korniak at ant.gliwice.pl (Mateusz Korniak)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] How te send many cookies using one request ?
Message-ID: <200205181030.g4IAUJs76544@eden.ispol.com>

I tried:
1) # multiple value cookie
	req.headers_out["Set-Cookie"] = user.out_cookie().output("") 
	
2) #many single value cookies		
	for cookie in user.out_cookies():
		req.headers_out["Set-Cookie"] = cookie.output("")

both sends only one Set-Cookie header with one value :(

TIA 
-- 
Mateusz Korniak
ANT sp z o.o. http://www.ant.gliwice.pl/

From stony8 at gmx.de  Sat May 18 15:46:33 2002
From: stony8 at gmx.de (Alexander Steinert)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] mod_python.publisher and PythonHandler
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518154633.B1282@tyche.svt.tu-harburg.de>

> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
[Very nice description of an request handling example snipped ...]

I do it in a similar fashion:

Tail of /etc/apache/access.conf:

    # ddd is our BASE directory.
    <Directory /var/www/ddd>
	RewriteEngine On
	# Redirect requests for BASE/ externally to the german start page.
	RewriteRule "^$" /ddd/de [L,R]
    </Directory>
    # Identify requests for dynamic wdps content by URL pattern. Examples:
    # http://host/ddd/de
    # http://host/ddd/en
    # http://host/ddd/de/ACTION
    # http://host/ddd/de-SESSIONID/ACTION
    <LocationMatch ^/ddd/[a-z]{2}($|(-[0-9a-f]{40})?/)>
	PythonPath "sys.path + ['/usr/local/lib/wdps/python']"
	SetHandler python-program
	PythonHandler wdps.ui.web.handlers
	PythonDebug On
    </LocationMatch>

ACTION can be:

    cancel_order
    change_constants
    change_document_types
    change_groups
    change_languages
    change_person
    change_study_programs
    delete_person
    enter_payment
    enter_pickup
    help
    quit_session
    register_person
    search_person
    show_changes
    show_document_types
    show_languages
    show_order_items
    show_orders
    show_overview
    show_person
    show_postings
    show_startpage
    show_study_programs
    start_session
    ...

For each ACTION I have a class, e.g. Start_session, which is a subclass
of Action, where common behaviour (session_id checking, argument type
checking) is defined.

Originally I started with the Publisher handler, but now am very
satisfied with my OO approach.

I might publish my code (it's not ready) if you want more information.

HTH

Stony


From grisha at modpython.org  Sat May 18 11:17:12 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:11 2004
Subject: [mod_python] How te send many cookies using one request ?
In-Reply-To: <200205181030.g4IAUJs76544@eden.ispol.com>
Message-ID: <Pine.BSF.4.32.0205181115550.78680-100000@localhost>

headers_out (as any mod_python table object) has an add() method which
will let you set multiple values with the same key

grisha

On Sat, 18 May 2002, Mateusz Korniak wrote:

> I tried:
> 1) # multiple value cookie
> 	req.headers_out["Set-Cookie"] = user.out_cookie().output("")
>
> 2) #many single value cookies
> 	for cookie in user.out_cookies():
> 		req.headers_out["Set-Cookie"] = cookie.output("")
>
> both sends only one Set-Cookie header with one value :(
>
> TIA
> --
> Mateusz Korniak
> ANT sp z o.o. http://www.ant.gliwice.pl/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From jwm-mod_python at sentinelchicken.net  Sat May 18 14:45:22 2002
From: jwm-mod_python at sentinelchicken.net (Jason Morgan)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] THANKS FOR THE HELP
In-Reply-To: <20020518032754.GF90@fullfactor.com>; from ian@veryfresh.com on Fri, May 17, 2002 at 08:27:54PM -0700
References: <20020514221313.A14746@samson.sentinelchicken.net> <20020518032754.GF90@fullfactor.com>
Message-ID: <20020518144522.A26028@samson.sentinelchicken.net>

Thanks everyone for the help. It has been very useful.

Thanks again

Jason












On Fri, May 17, 2002 at 08:27:54PM -0700, Ian Clelland wrote:
> On Tue, May 14, 2002 at 10:13:13PM -0700, Jason Morgan wrote:
> > Hello:
> > 
> > Ok, please excuse my ignorance, but I'm trying to move three sites 
> > over to mod_python from php and I'm having some trouble figuring what 
> > is the 'proper' way to proceed. I have mod_python installed and 
> > working, however, I'm not familiar with the handler concept (yes, I 
> > RTFM) and am trying to decide what to do with it. Should I have 
> > handler dealing with everything in my dirs, while passing off content 
> > generation to methods within personal modules? What is the role of 
> > mod_python.publisher. I would appreciate any help I can get - URLs 
> > are welcome. I've done the google searches, though, and haven't come 
> > across anytrhing about how people actually structure their sites. I 
> > dont' just want to hack something together - as I plan to leave most 
> > site maintenance to a new employee
> > :-).
> 
> Well, I'm not sure how closely my experiences mirror those of other 
> mod_python developers, but I can try to give you some insight. (I spent 
> about two years writing almost exclusively in PHP, and am now adjusting 
> to mod_python)
> 
> The handler concept is by far the biggest difference between the two 
> environments. A PHP script typically resides 'at' a specific URL, and 
> only services requests for that URL. A mod_python handler, in contrast, 
> becomes part of the web server, and handles requests whenever Apache 
> gives them to it.
> 
> To be a little clearer, the way I will usually install a handler is to 
> include it within an Apache <Location> directive. For example, I am 
> writing a user-management module, and I want it to be mounted at 
> http://mysite.com/users, so I set up Apache like this:
> 
>   <Location /users>
>     SetHandler python-program
>     PythonPath "sys.path+['/usr/local/lib/site_apps']"
>     PythonHandler userinfo
>   </Location>
> 
> This means that now my python module (at 
> /usr/local/lib/site_apps/userinfo.py) is responsible for *every* 
> request to a URL which begins with "/users". 
> 
> The first thing that userinfo.py does is analyse the URL of the request 
> to see exactly what was requested. If it is just "/users/", it displays 
> a list of users. If it is "/users/showuser/ian", then it looks up the 
> user record for 'ian' and displays that record. If it is 
> "/users/no-such-page" then it returns apache.DECLINED, and Apache 
> handles the 404 error.
> 
> I can also distinguish between GET and POST requests by examining the 
> req.method variable. If the request is a GET to 
> "/users/deleteuser/ian", then userinfo.py will display a confirmation 
> page. If it is a POST to that same URL, it will read the POST data, 
> look for a confirmation, and delete the user.
> 
> Most of my handlers are designed in this fashion, as one main python 
> module installed under a base URL, which defines a "URL-space". The 
> main module uses import statements to access all of the libraries it 
> needs (database access, user record class, string, cgi, etc.) to do its
> work.
> 
> 
> If you want to look for other resources on application design with 
> mod_python, try searching for information on mod_perl. It's the closest 
> thing I have found to mod_python, as they both act as scripting-
> language interfaces to the Apache C API. O'Reilly's book "Writing 
> Apache Modules with Perl and C" has been an invaluable resource for me. 
> Also, once you understand how the Apache API works, the mod_python 
> documentation becomes a much more useful tool.
> 
> 
> If your goal is just to convert your applications from PHP to the 
> Python language, then you may want to look at the Publisher handler 
> which Grisha has supplied with mod_python. It allows you to use Python 
> scripts in a very similar fashion to PHP or CGI scripts, and a lot of 
> people on this list seem to be using it exclusively. In that case, the 
> publisher handler becomes the default handler for your entire site. It 
> deals with every request that comes in by looking for a Python module 
> with the appropriate name in the right directory, and passing it 
> parameters based on the request. (This is actually completely backwards 
> to the way PHP works, but the effect is the same -- you believe that 
> you are calling the Python script directly from the URL.)
> 
> 
> I hope this answers at least some of your questions; feel free to ask 
> more if I've just made things more confusing :)
> 
> 
> Ian
> <ian@veryfresh.com>
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python

From infomailsys at mail.ru  Mon May 20 12:16:32 2002
From: infomailsys at mail.ru (New Banner Systems)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Re: Your Logo
Message-ID: <200205200810.g4K8AZs98506@eden.ispol.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment-0003.htm
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 23464 bytes
Desc: not available
Url : http://mailman.modpython.org/pipermail/mod_python/attachments/20020520/77f32fe8/attachment-0003.gif
From gbeasley at tsa.ac.za  Mon May 20 11:53:41 2002
From: gbeasley at tsa.ac.za (Grant Beasley)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
Message-ID: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>

Hi

I have a function that tries to check whether its input is a dictionary (It
behaves differently depending on the input type). To do this, it firstly
checks for objects whose type is equal to type({}) and secondly for objects
which are instances of UserDict. The FieldStorage class matches neither of
these, despite the fact that it behaves like a dictionary (mappable object).
Am I using the wrong test, or this this a problem with the FieldStorage
class that it should conform to the above?

Of course, I could use a try block to attempt to access the object as a
dictionary, but this seems inefficient (I'd rather check explicitly).

Thanks
Grant Beasley


From s_lott at yahoo.com  Mon May 20 04:23:22 2002
From: s_lott at yahoo.com (Steven Lott)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] FieldStorage class is a "dictionary", but how do I tell?
In-Reply-To: <OOENKCHGJGHILGPAGHGOOENECCAA.gbeasley@tsa.ac.za>
Message-ID: <20020520112322.34986.qmail@web9608.mail.yahoo.com>

Yes, the FieldStorage class is a unique class, not derived from
UserDict.  It has dictionary-like methods.  

You want to check your argument, arg, with something like this

if isclass(arg,FieldStorage)

--- Grant Beasley <gbeasley@tsa.ac.za> wrote:
> Hi
> 
> I have a function that tries to check whether its input is a
> dictionary (It
> behaves differently depending on the input type). To do this,
> it firstly
> checks for objects whose type is equal to type({}) and
> secondly for objects
> which are instances of UserDict. The FieldStorage class
> matches neither of
> these, despite the fact that it behaves like a dictionary
> (mappable object).
> Am I using the wrong test, or this this a problem with the
> FieldStorage
> class that it should conform to the above?
> 
> Of course, I could use a try block to attempt to access the
> object as a
> dictionary, but this seems inefficient (I'd rather check
> explicitly).
> 
> Thanks
> Grant Beasley
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python


=====
--
S. Lott, CCP :-{)
S_LOTT@YAHOO.COM
http://www.mindspring.com/~slott1
Buccaneer #468: KaDiMa

Macintosh user: drinking upstream from the herd.

__________________________________________________
Do You Yahoo!?
LAUNCH - Your Yahoo! Music Experience
http://launch.yahoo.com

From colet at code-energy.com  Mon May 20 09:08:45 2002
From: colet at code-energy.com (Cole Tuininga)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] __doc__ entries
Message-ID: <1021900129.1025.37.camel@bobthesnake>

I'm very new to mod_python, so I hope you'll have patience with me.  8)

I have mod_python set up to use index.py as its PythonHandler.  The idea
is that I'm going to have the handler routine scan through all other .py
files in the directory, pull the description of the class in each file,
and use that as a link.

For instance, I might have a changePassword.py with the docstring:

"""Change Password: Click here to change your password"""

If this were in a class called changePassword, I would expect to be able
to do the following:

import changePassword

def handler( req ):
	req.write( changePassword.changePassword.__doc__ )


However, this gives me an error calling the value to req.write a
"None".  However, if I essentially do the same thing within the python
interpreter fired up from the shell, it seems to work.  

Help?  Thanks in advance.

-- 
"The net treats censorship as a malfunction and reroutes around it."
 -John Gilmore

Cole Tuininga
Lead Developer
Code Energy, Inc
colet@code-energy.com
PGP Key ID: 0x43E5755D



From s13361562 at bach.sun.ac.za  Mon May 20 21:05:31 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Serving files via mod_python
Message-ID: <20020520190531.GA20265@vervet.localnet>

Hello,

I want to use mod_python to control what files can be downloaded by
whom, and to log such file transfers (with my own code). One possibility
is also to convert some files' contents on the fly.

I am currently using:

f = open(filename, "r")
while 1:
  data = f.read(1048576)
  if data = "": break
  req.write(data)

It seems to work fine. I just wonder if this is bad (performance wise, I
wonder what the best "size" would be, instead of 1M). These are
potentially *large* files I'm dealing with, things like cd images. At a
later date I guess I'll have to figure out how to do download resuming,
etc. I'm sure Apache does a better job of this, maybe I should rather
let Apache handle it, how can I do this while controlling it all from
modPython? I guess I could just define a PythonAuthenHandler, and let
Apache do the actual serving? Does the PythonAuthenHandler have full
access to just about everything a normal handler would? (URL, etc.)

If there was some way to give Apache a file handle or something like
that, from which it should serve the data...

Thanks,
Hugo van der Merwe

From Hans.Yandle at cingular.com  Tue May 21 10:42:11 2002
From: Hans.Yandle at cingular.com (Yandle, Hans)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] CGI Environment Specs
Message-ID: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>

I am looking into the possibility of using mod_python to accelerate and/or
replace some of my cgi scripts. However, I lack one last detail before I can
attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
variable. After reading the docs, I made the following script using the
mod_python.publisher handler:

from mod_python import apache

def commonenv(req):
    req.content_type = "text/html"
    req.send_http_header()
    req.add_common_vars()
    s = """<html><head><title>Mod_Python Common Environment
Variables</title></head>
           <body><p
align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
    for parameter in req.subprocess_env.keys():
        s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
req.subprocess_env[parameter])
    s = s + "</table></p></body></html>"
    return s

When it is executed, the HTTP_REFERER variable is missing. If anyone knows
how to accomplish this, I would be grateful.

Hans


From sam at webslingerZ.com  Tue May 21 13:25:17 2002
From: sam at webslingerZ.com (Sam Brauer)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <Pine.LNX.4.44.0205211322510.2120-100000@localhost.localdomain>

Did you hit the script directly (by typing the location into your 
browser)?  If so, that variable won't be set.
Try creating a test html page with a link to your script, then hit the 
script by following the link.  In that case, the variable should contain 
the url of your test html page.

- Sam

-- 
Sam Brauer
Systems Programmer
sam@webslingerZ.com

On Tue, 21 May 2002, Yandle, Hans wrote:

> I am looking into the possibility of using mod_python to accelerate and/or
> replace some of my cgi scripts. However, I lack one last detail before I can
> attempt this task. One of my cgi scripts uses the HTTP_REFERER environment
> variable. After reading the docs, I made the following script using the
> mod_python.publisher handler:
> 
> from mod_python import apache
> 
> def commonenv(req):
>     req.content_type = "text/html"
>     req.send_http_header()
>     req.add_common_vars()
>     s = """<html><head><title>Mod_Python Common Environment
> Variables</title></head>
>            <body><p
> align=center><table><tr><td>Parameter</td><td>Value</td></tr>"""
>     for parameter in req.subprocess_env.keys():
>         s = s + "<tr><td>%s</td><td>%s</td></tr>" % (parameter,
> req.subprocess_env[parameter])
>     s = s + "</table></p></body></html>"
>     return s
> 
> When it is executed, the HTTP_REFERER variable is missing. If anyone knows
> how to accomplish this, I would be grateful.
> 
> Hans
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
> 


From ian at veryfresh.com  Tue May 21 16:01:49 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020520190531.GA20265@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet>
Message-ID: <20020521230149.GG90@fullfactor.com>

On Mon, May 20, 2002 at 09:05:31PM +0200, Hugo van der Merwe wrote:
> Hello,
> 
> I want to use mod_python to control what files can be downloaded by
> whom, and to log such file transfers (with my own code). One possibility
> is also to convert some files' contents on the fly.
> 
> I am currently using:
> 
> f = open(filename, "r")
> while 1:
>   data = f.read(1048576)
>   if data = "": break
>   req.write(data)
> 
> It seems to work fine. I just wonder if this is bad (performance wise, I
> wonder what the best "size" would be, instead of 1M). These are
> potentially *large* files I'm dealing with, things like cd images.

Transferring 1MB at a time is probably about as efficient as you can 
get; of course, you'd need to do some proper benchmarking to be sure. I 
believe that Apache defaults to Chunked transfer-encoding, so every 
time you call req.write(), the data goes out immediately, with about 10 
bytes of overhead (actually ln(n)/4+4 bytes).

Actually, most of your overhead will be in TCP and IP encoding, as each 
call to write() will probably result in about 600 IP packets being sent 
(and acknowledged), and there's not much you can do about that.

> At a
> later date I guess I'll have to figure out how to do download resuming,
> etc. I'm sure Apache does a better job of this, maybe I should rather
> let Apache handle it,

Apache will only handle Range requests (which are what you need for 
download resuming) for static files. If you are using mod_python to 
serve the content, then you will have to handle the Range headers 
yourself.

> how can I do this while controlling it all from
> modPython? I guess I could just define a PythonAuthenHandler, and let
> Apache do the actual serving? Does the PythonAuthenHandler have full
> access to just about everything a normal handler would? (URL, etc.)

That's a good way to do it, assuming that the files are already on the 
filesystem, and not being stored in a database or ripped in realtime. 
What you are looking for, though, is a PythonAuthzHandler 
(authorization handler). This is the handler which gets called *after* 
the user's name and password have been verified, (by a .htpasswd file 
or some other method,) and decides whether that user is allowed to 
download that file.

> 
> If there was some way to give Apache a file handle or something like
> that, from which it should serve the data...

You don't even need to do that; all you have to do is install the 
PythonAuthzHandler, and let Apache handle serving the actual content. 
The AuthzHandler will act like a 'filter' on an otherwise normal 
request/response.

Hope that helps,

Ian
<ian@veryfresh.com>

From johannes at erdfelt.com  Tue May 21 19:12:44 2002
From: johannes at erdfelt.com (Johannes Erdfelt)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>; from ian@veryfresh.com on Tue, May 21, 2002 at 04:01:49PM -0700
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020521191243.I2645@sventech.com>

On Tue, May 21, 2002, Ian Clelland <ian@veryfresh.com> wrote:
> > how can I do this while controlling it all from
> > modPython? I guess I could just define a PythonAuthenHandler, and let
> > Apache do the actual serving? Does the PythonAuthenHandler have full
> > access to just about everything a normal handler would? (URL, etc.)
> 
> That's a good way to do it, assuming that the files are already on the 
> filesystem, and not being stored in a database or ripped in realtime. 
> What you are looking for, though, is a PythonAuthzHandler 
> (authorization handler). This is the handler which gets called *after* 
> the user's name and password have been verified, (by a .htpasswd file 
> or some other method,) and decides whether that user is allowed to 
> download that file.
> 
> > If there was some way to give Apache a file handle or something like
> > that, from which it should serve the data...
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.

Is this new? It's not in the documentation:

http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

JE


From ian at veryfresh.com  Tue May 21 16:54:18 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521191243.I2645@sventech.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com> <20020521191243.I2645@sventech.com>
Message-ID: <20020521235418.GH90@fullfactor.com>

On Tue, May 21, 2002 at 07:12:44PM -0400, Johannes Erdfelt wrote:
> > You don't even need to do that; all you have to do is install the 
> > PythonAuthzHandler, and let Apache handle serving the actual content. 
> > The AuthzHandler will act like a 'filter' on an otherwise normal 
> > request/response.
> 
> Is this new? It's not in the documentation:
> 
> http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers.html

It does seem conspicuously absent from the online documentation; I 
don't think that's deliberate, though. It appears to be fully supported 
by the code (it's in mod_python.c and requestobject.c) and I've been 
using it with no problems for a while now.

It is mentioned in an example on this page: 
http://www.modpython.org/live/mod_python-2.7.8/doc-html/dir-handlers-syn.html

(Grisha? I think this was brought up about 6 weeks ago as well -- any 
 updates? :)

Ian
<ian@veryfresh.com>

From matt at proweb.co.uk  Thu May 23 16:30:43 2002
From: matt at proweb.co.uk (Matt H)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] CGI Environment Specs
In-Reply-To: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
References: <D31B04F24EDE7644BB169BB4F080778A01F4C3B9@s30342g004005>
Message-ID: <20020523163043.744528d8.matt@proweb.co.uk>

this works ->

def authenhandler(req):
        try :
                referer = req.headers_in['referer']
        except :
                referer = ""
        req.subprocess_env['HTTP_REFERER'] = referer.lower()

        pwd = req.get_basic_auth_pw()
        usr = req.connection.user

        if pwd=="bar" and usr=="f00" :
                return apache.OK
        return apache.HTTP_UNAUTHORIZED

From pfrazao at ualg.pt  Thu May 23 17:41:30 2002
From: pfrazao at ualg.pt (Pedro Miguel Frazao Fernandes Ferreira)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] mod_python and python2.2
Message-ID: <3CED1BBA.4060804@ualg.pt>

Hi All,

First:
Is there any mod_python version known to work with python2.2 ?

Second:
mod_python 2.7.6 compiled ok with python2.2 on a debian (woody) distribution.
Problem is that it fails on the application when handling a form with submited 
files:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

   File "/usr/lib/python2.2/site-packages/mod_python/apache.py", line 193, in 
Dispatch
     result = object(req)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 104, 
in handler
     val = File(field)

   File "/usr/lib/python2.2/site-packages/mod_python/publisher.py", line 308, 
in __init__
     for m in field.file.__methods__:

AttributeError: 'file' object has no attribute '__methods__'

Anyone knows a solution ? If yes will it be safe to use 2.7.6 compiled with 
python2.2 ?

Thanks for any help.
-- 
----------------------------------------------------------------------
Pedro Miguel Frazao Fernandes Ferreira
Universidade do Algarve
Faculdade de Ciencias e Tecnologia
Campus de Gambelas
8000-117 Faro
Portugal
Tel./Fax:  (+351) 289 800950 / 289 819403
http://w3.ualg.pt/~pfrazao


From bob at redivi.com  Thu May 23 15:17:12 2002
From: bob at redivi.com (Bob Ippolito)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] mod_python and python2.2
In-Reply-To: <3CED1BBA.4060804@ualg.pt>
Message-ID: <AF2FCE2C-6E81-11D6-A4E2-0003938210D6@redivi.com>

try dir(field.file) instead of field.file.__methods__

On Thursday, May 23, 2002, at 12:41 PM, Pedro Miguel Frazao Fernandes 
Ferreira wrote:

> AttributeError: 'file' object has no attribute '__methods__'


From s13361562 at bach.sun.ac.za  Thu May 23 22:34:33 2002
From: s13361562 at bach.sun.ac.za (Hugo van der Merwe)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020523201546.GA29705@vervet.localnet>
References: <20020520190531.GA20265@vervet.localnet> <20020520200902.GB1048@eleanor.internal.ywlcs.org> <20020523201546.GA29705@vervet.localnet>
Message-ID: <20020523203433.GA30515@vervet.localnet>

> > Build a TransHandler which checks permissions and whatnot, then either (a)
> > calls add_handler with a pythonhandler which will display an error message,
> > menu, etc. or (b) produces the filename of the file that Apache should send
> > along.
> 
> Sorry about asking about this here again, I had a good and wide search
> to find info, but I'm too pressed for time now, and so far searches
> haven't helped me on this last issue:
> 
> I've got TransHandler working nicely, at least, until I don't want it to
> do it's thing: how do I get the "default behaviour", once TransHandler
> determines that it's not a URL that it should handle? I want it to then
> go via the "usual, standard" routes... simply not touching req.filename
> leaves it as "/", I guess I could just prepend /var/www to the
> unparsed_uri, will apache then do it's alias thing, etc? It still
> doesn't seem like the neatest solution though.

Replying to myself ... but I found a little more info, and I want to
send this to the list as well.

I found the following:

"""
apache.DECLINED, meaning this handler refused to handle this phase of
the requestand Apache needs to look for another handler. 
"""

Returning this seems to "work" in some sense, I get the following 404
now:

Not Found The requested URL /show.py/norm was not found on this server.

If I do not have the PythonTransHandler, my "normal" PythonHandler takes
care of this...

Thanks,
Hugo van der Merwe

From dustin at ywlcs.org  Sat May 25 21:32:27 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Serving files via mod_python
In-Reply-To: <20020521230149.GG90@fullfactor.com>
References: <20020520190531.GA20265@vervet.localnet> <20020521230149.GG90@fullfactor.com>
Message-ID: <20020526023227.GB25701@eleanor.internal.ywlcs.org>

On Tue, May 21, 2002 at 04:01:49PM -0700, Ian Clelland wrote:
> 
> You don't even need to do that; all you have to do is install the 
> PythonAuthzHandler, and let Apache handle serving the actual content. 
> The AuthzHandler will act like a 'filter' on an otherwise normal 
> request/response.
> 

I know this is an old thread, but I might point out that the new 'filters' in
Apache 2.0 will allow this sort of filtering and much, much more.  I'm
eagerly awaiting a stable release of mod_python for httpd-2.0 (well, that and
I need a working PHP).

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Sat May 25 21:40:04 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Apache Handler docs
Message-ID: <20020526024004.GC25701@eleanor.internal.ywlcs.org>

I'm interested in gaining a full understanding of how Apache handlers work.
While I've been working (quite successfully) with mod_python for a while now,
there are still some behaviors that surprise me, because I don't really
understand what Apache's doing under the hood.  The Shambala API notes are
somewhat helpful, but really nothing more than notes -- they see out of date
and leave many of the details unspecified.

So short of reading all of the Apache main and core source (I've read a bit
of it already), does anyone have any pointers to good docs for these sorts of
things?

Thanks!

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From grisha at modpython.org  Sat May 25 23:35:53 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Apache Handler docs
In-Reply-To: <20020526024004.GC25701@eleanor.internal.ywlcs.org>
Message-ID: <Pine.BSF.4.32.0205252332440.72278-100000@localhost>

The "Writing Apache modules with mod_perl and C" O'Reilly book is probably
the best reference of Apache internals, but it doesn't cover everything,
especially Apache 2.0 wich is a different beast altogether when it comes
to handlers (or just about anything else really). I've had to read quite a
bit of code when writing mod_python.

Grisha

On Sat, 25 May 2002, Dustin Mitchell wrote:

> I'm interested in gaining a full understanding of how Apache handlers work.
> While I've been working (quite successfully) with mod_python for a while now,
> there are still some behaviors that surprise me, because I don't really
> understand what Apache's doing under the hood.  The Shambala API notes are
> somewhat helpful, but really nothing more than notes -- they see out of date
> and leave many of the details unspecified.
>
> So short of reading all of the Apache main and core source (I've read a bit
> of it already), does anyone have any pointers to good docs for these sorts of
> things?
>
> Thanks!
>
> Dustin
>
> --
>
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
>


From john.garberson at nexos.com  Mon May 27 16:57:52 2002
From: john.garberson at nexos.com (John D. Garberson)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] Sub-request/Internal redirect questions
Message-ID: <200205271457.QAA03404@ws2.nexos.com>

Hi,

I'm new to mod_python and am trying to get a feel for it and the 
Apache API by duplicating the modules that Stein and MacEachern
show in their very nice Apache modules book, but of course using
mod_python instead of mod_perl or C.

A technique that seems to come up fairly often after the first easy
examples is to use sub-requests and redirects. These seem to be generated
by the request object's lookup_file, lookup_uri or internal_redirect
methods.  I don't find any mention of these methods in the mod_python
documentation, and it sort of looks like they haven't been implemented.
But then I've found some other stuff that isn't documented just poking
around in the module's C and python source code, and maybe I'm missing
something obvious.  Also, looking back through the list archives for the
last year or so, I've found some references to work-arounds for the re-
direct stuff.  Maybe people with more experience know other such tricks?

Can anyone give me a tip on how a sub-request (or for that matter, an
internal redirect without using work-arounds) is generated using
mod_python, or what methods can be used to replace this functionality?

Thanks for any ideas.


     John Garberson                             nexos ag 
     john.garberson@nexos.com                   Frobenstrasse 66 
                                                CH-4053 Basel, Switzerland
                                                Tel. 41 61 283 55 03
                                                Fax  41 61 283 55 01

From gbenson at redhat.com  Mon May 27 19:02:56 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [PATCH] httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205271900230.27285-400000@slippy.rat>


Hi all,

The attached patches to HEAD will allow you to compile and run mod_python
with httpd-2.0.36. There are still a bunch of compiler warnings which I
haven't fixed (but intend to), but it seems to run quite nicely (although
my minimal mod_python knowledge probably isn't stressing it much).

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
An allocator-passing mechanism was added throughout the bucket brigades API

Index: src/filterobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/filterobject.c,v
retrieving revision 1.4
diff -u -r1.4 filterobject.c
--- src/filterobject.c	4 Mar 2002 21:19:17 -0000	1.4
+++ src/filterobject.c	27 May 2002 11:18:30 -0000
@@ -115,6 +115,7 @@
 static PyObject *_filter_read(filterobject *self, PyObject *args, int readline)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     apr_bucket *b;
     long bytes_read;
     PyObject *result;
@@ -135,7 +136,8 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_in) {
-	    self->bb_in = apr_brigade_create(self->f->r->pool);
+	    self->bb_in = apr_brigade_create(self->f->r->pool,
+					     c->bucket_alloc);
 	}
 
 	Py_BEGIN_ALLOW_THREADS;
@@ -290,6 +292,7 @@
 static PyObject *filter_write(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
     char *buff;
     int len;
     apr_bucket *b;
@@ -315,10 +318,12 @@
 
 	/* does the output brigade exist? */
 	if (!self->bb_out) {
-	    self->bb_out = apr_brigade_create(self->f->r->pool);
+	    self->bb_out = apr_brigade_create(self->f->r->pool,
+					      c->bucket_alloc);
 	}
 	
-	b = apr_bucket_pool_create(buff, len, self->f->r->pool);
+	b = apr_bucket_pool_create(buff, len, self->f->r->pool,
+				   c->bucket_alloc);
 	APR_BRIGADE_INSERT_TAIL(self->bb_out, b);
 	
 	self->bytes_written += len;
@@ -337,12 +342,15 @@
 static PyObject *filter_flush(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     /* does the output brigade exist? */
     if (!self->bb_out) {
-	self->bb_out = apr_brigade_create(self->f->r->pool);
+	self->bb_out = apr_brigade_create(self->f->r->pool, c->bucket_alloc);
     }
 
-    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_flush_create());
+    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+			    apr_bucket_flush_create(c->bucket_alloc));
 
     if (ap_pass_brigade(self->f->next, self->bb_out) != APR_SUCCESS) {
 	PyErr_SetString(PyExc_IOError, "Flush failed.");
@@ -363,16 +371,20 @@
 static PyObject *filter_close(filterobject *self, PyObject *args)
 {
 
+    conn_rec *c = self->request_obj->request_rec->connection;
+
     if (! self->closed) {
 
 	if (self->bytes_written) {
 
 	    /* does the output brigade exist? */
 	    if (!self->bb_out) {
-		self->bb_out = apr_brigade_create(self->f->r->pool);
+		self->bb_out = apr_brigade_create(self->f->r->pool,
+						  c->bucket_alloc);
 	    }
 
-	    APR_BRIGADE_INSERT_TAIL(self->bb_out, apr_bucket_eos_create());
+	    APR_BRIGADE_INSERT_TAIL(self->bb_out,
+				    apr_bucket_eos_create(c->bucket_alloc));
 	
 	    if (! self->is_input) {
 		ap_pass_brigade(self->f->next, self->bb_out);
-------------- next part --------------
Various AP_FTYPE_* constants were changed in 2.0.34

Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	27 May 2002 10:50:15 -0000
@@ -1467,7 +1467,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_input_filter(name, python_input_filter, AP_FTYPE_CONTENT);
+    ap_register_input_filter(name, python_input_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
@@ -1491,7 +1491,7 @@
     /* register the filter NOTE - this only works so long as the
        directive is only allowed in the main config. For .htaccess we
        would have to make sure not to duplicate this */
-    ap_register_output_filter(name, python_output_filter, AP_FTYPE_CONTENT);
+    ap_register_output_filter(name, python_output_filter, AP_FTYPE_RESOURCE);
  
     return NULL;
 }
-------------- next part --------------
ap_restart_time was moved into the scoreboard global area.

Index: src/serverobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/serverobject.c,v
retrieving revision 1.8
diff -u -r1.8 serverobject.c
--- src/serverobject.c	9 Sep 2001 00:25:37 -0000	1.8
+++ src/serverobject.c	27 May 2002 10:59:54 -0000
@@ -241,7 +241,7 @@
 	return PyInt_FromLong((long)ap_my_generation);
     }
     else if (strcmp(name, "restart_time") == 0) {
-	return PyInt_FromLong((long)ap_restart_time);
+	return PyInt_FromLong((long)ap_scoreboard_image->global->restart_time);
     }
     else
 	return PyMember_Get((char *)self->server, server_memberlist, name);
From gbenson at redhat.com  Tue May 28 12:31:05 2002
From: gbenson at redhat.com (Gary Benson)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
Message-ID: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>


Hi,

The attached patches fix most of the compiler warnings when building
against httpd-2.0.36: some const correctness stuff, and a problem with
conn.remote_addr. The rest of the problems stem from the fact that the
input filter API changed in 2.0.31, but I currently have no idea how to
fix that.

Cheers,
Gary

[ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
-------------- next part --------------
apr_table_elts() returns const apr_array_header_t *

Index: src/tableobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/tableobject.c,v
retrieving revision 1.8
diff -u -r1.8 tableobject.c
--- src/tableobject.c	28 Nov 2001 05:31:48 -0000	1.8
+++ src/tableobject.c	28 May 2002 11:12:59 -0000
@@ -196,7 +196,7 @@
 {
 
     PyObject *v;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i, j;
 
@@ -303,7 +303,7 @@
 static PyObject * table_repr(tableobject *self)
 {
     PyObject *s;
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     int i;
 
Index: src/requestobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/requestobject.c,v
retrieving revision 1.15
diff -u -r1.15 requestobject.c
--- src/requestobject.c	28 Nov 2001 05:31:48 -0000	1.15
+++ src/requestobject.c	28 May 2002 11:13:04 -0000
@@ -268,7 +268,7 @@
 
     if (apr_table_get(self->request_rec->notes, "py_more_directives")) {
 
-	apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
+	const apr_array_header_t *ah = apr_table_elts(self->request_rec->notes);
 	apr_table_entry_t *elts = (apr_table_entry_t *)ah->elts;
 	int i = ah->nelts;
 
Index: src/mod_python.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/mod_python.c,v
retrieving revision 1.59
diff -u -r1.59 mod_python.c
--- src/mod_python.c	5 Mar 2002 01:43:39 -0000	1.59
+++ src/mod_python.c	28 May 2002 11:13:13 -0000
@@ -1545,7 +1545,7 @@
 static void PythonChildInitHandler(apr_pool_t *p, server_rec *s)
 {
 
-    apr_array_header_t *ah;
+    const apr_array_header_t *ah;
     apr_table_entry_t *elts;
     PyObject *sys, *path, *dirstr;
     interpreterdata *idata;
-------------- next part --------------
Make conn.remote_addr work properly

Index: src/connobject.c
===================================================================
RCS file: /cvsroot/modpython/mod_python/src/connobject.c,v
retrieving revision 1.7
diff -u -r1.7 connobject.c
--- src/connobject.c	18 Aug 2001 22:43:45 -0000	1.7
+++ src/connobject.c	28 May 2002 11:11:58 -0000
@@ -194,8 +194,7 @@
 	return PyInt_FromLong(self->conn->double_reverse);
     }
     else if (strcmp(name, "remote_addr") == 0) {
-	/* XXX this needs to be compatible with apr_sockaddr_t */
-	return makesockaddr(&(self->conn->remote_addr));
+	return makesockaddr(&self->conn->remote_addr->sa.sin);
     }
     else if (strcmp(name, "notes") == 0) {
 	Py_INCREF(self->notes);
From grisha at modpython.org  Tue May 28 09:03:46 2002
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [PATCH] more httpd-2.0.36
In-Reply-To: <Pine.LNX.4.44.0205281227460.10779-300000@slippy.rat>
Message-ID: <Pine.BSF.4.32.0205280901430.98266-100000@localhost>

Thanks Gary - I'll review and add the patches into HEAD, but it proboably
won't happen a day or two - I'll be very busy today and tomorrow.

Grisha

On Tue, 28 May 2002, Gary Benson wrote:

>
> Hi,
>
> The attached patches fix most of the compiler warnings when building
> against httpd-2.0.36: some const correctness stuff, and a problem with
> conn.remote_addr. The rest of the problems stem from the fact that the
> input filter API changed in 2.0.31, but I currently have no idea how to
> fix that.
>
> Cheers,
> Gary
>
> [ gbenson@redhat.com ][ GnuPG 85A8F78B ][ http://inauspicious.org/ ]
>


From mbp at samba.org  Wed May 29 18:24:40 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [patch] make autoreload more useful
Message-ID: <20020529082436.GK25763@samba.org>

Here is a patch intended to make automatic reload work "properly" in
mod_python: if you change *any* Python source file, then all of them
will be reloaded.  

I think this basically gives the behaviour developers would
intuitively expect: you can just go ahead and edit and the server will
reload as necessary without you needing to remember to kill/restart
Apache.  So the development experience is as immediate as CGI or PHP.

You might ask why it's necessary to reload everything, and not just
the changed module.  The reason is that some other module might still
hold a reference to an object or function inside the changed module,
and that object will still refer to the old code.  

Indeed this will still be a problem if you put a reference to your
code into sys, or one of the other modules that is not reloaded.  I
can't see a clean way to handle that without restarting the whole
interpreter, but I suspect it's a not a very common case.

Of course stat()ing every loaded python file on every mod_python
request has a small performance hit, but I don't think it will be a
problem during development, and the whole thing should be turned off
in production.

I owe a debt to the PyUnit developers for documenting their solution
and therefore saving me a couple of false starts.

The patch is rough as anything and badly needs to be cleaned up and
tested more thoroughly before it being merged or used in production.
(The reload stuff really belongs in a separate module.)  I thought I'd
send it out and see if anyone had any comments, and in particular if
Grisha would take it in principle.  

I've tested this a bit on python2.1 and it seems to work well.  I
might inadvertently have bugs on 1.5, but they can easily be cleaned
up.

-- 
Martin 
tab tab ding!





--- /home/mbp/work/mod_python-2.7.8/lib/python/mod_python/apache.py	Sat Apr 20 04:20:40 2002
+++ /usr/lib/python2.1/site-packages/mod_python/apache.py	Wed May 29 18:03:08 2002
@@ -53,6 +53,7 @@
 import imp
 import types
 import _apache
+import __builtin__
 
 # a small hack to improve PythonPath performance. This
 # variable stores the last PythonPath in raw (unevaled) form.
@@ -62,6 +63,92 @@
 def _cleanup_request(_req):
     _req._Request = None
 
+
+# The idea of rolling back imports comes from Steve Purcell's
+# PyUnit GUI <pyunit.sf.net>, but the implementation is new by Martin Pool.
+
+# The basic idea is that we want to delete everything from sys.modules
+# when the user's code changes, except for system modules.  This is
+# necessary because otherwise one module that has not changed may
+# still be holding references to code objects from a module that has
+# changed.  We have to actually delete them and start again rather
+# than using reload(), because otherwise the first one reloaded may
+# grab references from something that will be reloaded later on.
+
+# Of course this will be a little slow, but it's only used in
+# development so it doesn't really matter.
+_orig_sys_modules = None
+
+def _notice(s, *args):
+    _apache.log_error(s % args, APLOG_NOERRNO|APLOG_NOTICE)
+
+
+def save_orig_modules():
+    global _orig_sys_modules
+    _orig_sys_modules = sys.modules.copy()
+
+
+def check_for_reload(path=None):
+    """Check all non-system modules; if any have changed, reload all"""
+    for module_name, module in sys.modules.items():
+        if _orig_sys_modules.has_key(module_name):
+            continue
+
+        if not module:
+            continue                    # some are None (??)
+
+        file = module.__dict__.get('__file__')
+        oldmtime = module.__dict__.get("__mtime__", 0)
+        if not oldmtime:
+            # If the oldmtime is 0, then it wasn't loaded
+            # through _apache_importer, and so we can't work out if it's
+            # older or not.
+            continue
+
+        mtime = module_mtime(module)
+        # If the file no longer exists, mtime will be 0 and we'll
+        # reload it.
+        if mtime > oldmtime or mtime == 0:
+            _apache.log_error("mod_python: %s has been changed; mtime=%d oldmtime=%d" %
+                              (file, mtime, oldmtime),
+                              APLOG_NOERRNO|APLOG_NOTICE)
+            return reload_user_modules()
+        
+
+def reload_user_modules():
+    """Reload all modules except system modules"""
+    _apache.log_error("mod_python: discard user modules",
+                      APLOG_NOERRNO|APLOG_NOTICE)
+    for module_name in sys.modules.keys():
+        if not _orig_sys_modules.has_key(module_name):
+            del sys.modules[module_name]
+
+
+def _get_sub_module(top_module, module_name):
+    module = top_module
+    for part in string.split(module_name, '.')[1:]:
+        module = getattr(module, part)
+    return module
+
+def _apache_importer(module_name, globals=None, locals=None, fromlist=None):
+    # Just defer to the built-in importer, but annotate the returned module with
+    # its modification time
+    parent_module = _original_import(module_name, globals, locals, fromlist)
+    
+    if '.' in module_name:
+        submodule = _get_sub_module(parent_module, module_name)
+    else:
+        submodule = parent_module
+        
+    if _debug:
+        s = 'mod_python: importing %s got parent %s, sub %s' % (module_name, `parent_module`,
+                                                                `submodule`)
+        _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
+    submodule.__mtime__ = module_mtime(submodule)
+    _notice("submodule mtime is %d" % submodule.__mtime__)
+    return parent_module
+
+
 class Request:
     """ This is a normal Python Class that can be subclassed.
         However, most of its functionality comes from a built-in
@@ -285,6 +372,8 @@
             etb = None
             # we do not return anything
 
+
+
 def import_module(module_name, req=None, path=None):
     """
     Get the module to handle the request. If
@@ -299,52 +388,27 @@
         debug = config.has_key("PythonDebug")
         if config.has_key("PythonAutoReload"):
             autoreload = int(config["PythonAutoReload"])
- 
-    # (Re)import
-    if sys.modules.has_key(module_name):
-        
-        # The module has been imported already
-        module = sys.modules[module_name]
-
-        # but is it in the path?
-        file = module.__dict__.get("__file__")
-        if not file or (path and not os.path.dirname(file) in path):
-                raise SERVER_RETURN, HTTP_NOT_FOUND
-
-        if autoreload:
-            oldmtime = module.__dict__.get("__mtime__", 0)
-            mtime = module_mtime(module)
-        else:
-            mtime, oldmtime = 0, 0
-
-    else:
-        mtime, oldmtime = 0, -1
- 
-    if mtime > oldmtime:
-
-        # Import the module
-        if debug:
-            s = 'mod_python: (Re)importing %s from %s' % (module_name, path)
-            _apache.log_error(s, APLOG_NOERRNO|APLOG_NOTICE)
-
-        parts = string.split(module_name, '.')
-        for i in range(len(parts)):
-            f, p, d = imp.find_module(parts[i], path)
-            try:
-                mname = string.join(parts[:i+1], ".")
-                module = imp.load_module(mname, f, p, d)
-            finally:
-                if f: f.close()
-            if hasattr(module, "__path__"):
-                path = module.__path__
 
-        if mtime == 0:
-            mtime = module_mtime(module)
-
-        module.__mtime__ = mtime
- 
+    # mbp -- for debugging
+    ##    _apache.log_error("sys.modules is: %s" % sys.modules,
+    ##                      APLOG_NOERRNO|APLOG_NOTICE)
+
+    if autoreload:
+        # just check *all* modules, and discard non-system modules if
+        # any have changed
+        check_for_reload(path)
+
+    # the __import__ function returns the *top-level module*, not the one
+    # we actually asked for.  after importing, we need to walk down to
+    # get the real thing.
+    _notice("import_module %s" % module_name)
+    top_module = __import__(module_name)
+    _notice("import_module %s got top %s" % (module_name, top_module))
+    module = _get_sub_module(top_module, module_name)
+    _notice("import_module for %s returned %s" % (module_name, module))
     return module
 
+
 def module_mtime(module):
     """Get modification time of module"""
     mtime = 0
@@ -377,6 +441,8 @@
        class passing the request as single argument
     """
 
+    _notice("resolve obj %s in %s" % (object_str, module))
+
     obj = module
 
     for obj_str in  string.split(object_str, '.'):
@@ -609,6 +675,14 @@
     """ 
         This function is called by the server at startup time
     """
+    global _original_import, _debug
+    
+    # keep this in case we want it
+    _original_import = __builtin__.__import__
+    _notice("about to hook importer")
+    __builtin__.__import__ = _apache_importer
+    _notice("importer hooked")
+    _debug = 1
 
     return CallBack()
 
@@ -618,6 +692,14 @@
 parse_qs = _apache.parse_qs
 parse_qsl = _apache.parse_qsl
 
+## Keep track of modules already loaded; anything after this is fair game
+## to be reloaded
+save_orig_modules()
+
+# XXX: We perhaps ought to hook reload() as well to make sure it's
+# consistent, but at the moment I think it does no harm to let it
+# default.
+
 ## Some constants
 
 HTTP_CONTINUE                     = 100
@@ -708,28 +790,4 @@
 REQ_EXIT = "REQ_EXIT"         
 SERVER_RETURN = _apache.SERVER_RETURN
 PROG_TRACEBACK = "PROG_TRACEBACK"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 

From dustin at ywlcs.org  Wed May 29 07:45:05 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529082436.GK25763@samba.org>
References: <20020529082436.GK25763@samba.org>
Message-ID: <20020529124504.GG1280@eleanor.internal.ywlcs.org>

On Wed, May 29, 2002 at 06:24:40PM +1000, Martin Pool wrote:

> +# The basic idea is that we want to delete everything from sys.modules
> +# when the user's code changes, except for system modules.  This is
> +# necessary because otherwise one module that has not changed may
> +# still be holding references to code objects from a module that has
> +# changed.  We have to actually delete them and start again rather
> +# than using reload(), because otherwise the first one reloaded may
> +# grab references from something that will be reloaded later on.

Two things:

1. I'm not sure how gc interacts with this, but there was a time when you
just couldn't get rid of a loaded module object.  All of the modules you
delete will still reference each other in some sort of cycle. If they're not
deleted you could very quickly end up with an enormous httpd process.

Even with gc, if there are any dangling references into one of the old
modules (an atexit function? somewhere the Python standard libraries cache a
reference?) then you're going to have a bloated httpd.

I wrote a reloader similar to this one, and my solution to this was to watch
the number of reloads, and call req.child_terminate() after a certain number
(I picked 10) or reloads.


2. One other difficulty: some modules actually *do* want to have global
state.  For example, a MySQL interface should be able to establish its
connection once and maintain that through many requests.  Perhaps there
should be a mechanism for a module to say "don't remove me!", or at least
"preserve the value of this variable".


Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From ian at veryfresh.com  Wed May 29 15:57:38 2002
From: ian at veryfresh.com (Ian Clelland)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020529225738.GB553@fullfactor.com>

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.

But in general, you can't guarantee this in *any* situation. All of the 
modules have to work properly when none of their resources are 
installed (say, on server startup,) and they have to be prepared to die 
at any point.

Usually, persistent connections are used for performance reasons only; 
the modules would otherwise be perfectly happy re-opening every 
database connection on every hit.

This auto-reload feature should only be used during development anyway, 
so performance issues like this shouldn't be a problem (turn it off 
during heavy load testing, of course), and it would be much easier than 
completely restarting the web server after every source file change, 
which is what I'm currently doing.


> Perhaps there should be a mechanism for a module to say "don't remove 
> me!", or at least "preserve the value of this variable".

I don't think this is possible in the general case (and I'm pretty sure 
Python doesn't support it). What would happen if a new version of the 
source file uses a different name for the variable? Or worse, uses the 
same variable (name) for a completely different purpose?


Ian
<ian@veryfresh.com>

From mbp at samba.org  Thu May 30 10:38:51 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020529124504.GG1280@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org>
Message-ID: <20020530003850.GC29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> 1. I'm not sure how gc interacts with this, but there was a time when you
> just couldn't get rid of a loaded module object.  All of the modules you
> delete will still reference each other in some sort of cycle. If they're not
> deleted you could very quickly end up with an enormous httpd process.

Here's a nickel; get a bigger computer :-)

> Even with gc, if there are any dangling references into one of the old
> modules (an atexit function? somewhere the Python standard libraries cache a
> reference?) then you're going to have a bloated httpd.

Using atexit functions within mod_python is pretty pointless, but your
general point about references held by system modules is correct.

If my code bloated that easily because of reloading modules then I
would be somewhat worried that something would cause it to happen
during production, and I'd feel I ought to investigate what was going
wrong.

You can always turn down MaxRequestsPerChild, or indeed turn off
autoreload.

I guess in general I believe that in development mode (as opposed to
release), correctness and developer productivity is more important
than performance.

In deployment mode, there shouldn't be any bloat because the .py files
won't change.  The cost is just stat'ing them each time, which is a
slight cost but not terrible.

> 2. One other difficulty: some modules actually *do* want to have global
> state.  For example, a MySQL interface should be able to establish its
> connection once and maintain that through many requests.  Perhaps there
> should be a mechanism for a module to say "don't remove me!", or at least
> "preserve the value of this variable".

As far as I can see, the only non-bogus use of persistence is
opportunistic caching.  Modules have to cope with losing their
persistent state because (a) requests are unpredictably spread across
Apache instances; (b) Apache can kill and restart children; (c)
relying on it is overly fragile; and (d) without a working reload
mechanism, the programmer will be completely restarting Apache at
intervals anyhow.

-- 
Martin 

From dustin at ywlcs.org  Wed May 29 19:45:44 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:12 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
Message-ID: <20020530004544.GF2519@eleanor.internal.ywlcs.org>

Sorry, meant to send this to the list..

-----

On Wed, May 29, 2002 at 03:57:38PM -0700, Ian Clelland wrote:
> > 2. One other difficulty: some modules actually *do* want to have global
> > state.  For example, a MySQL interface should be able to establish its
> > connection once and maintain that through many requests.
> 
> But in general, you can't guarantee this in *any* situation. All of the 
> modules have to work properly when none of their resources are 
> installed (say, on server startup,) and they have to be prepared to die 
> at any point.
> 
> Usually, persistent connections are used for performance reasons only; 
> the modules would otherwise be perfectly happy re-opening every 
> database connection on every hit.

Right, and in a development environment (the only place one would use a
reloader) I suppose that would be acceptable.  However, if you're testing
against the production database server (a not-unreasonable proposition for a
small to midsize shop with a complex database schema), all those extra
connections might prove to be a burden.  And you can't guarantee that Python
will close them when the module is "unloaded", as the module may continue to
exist for some time.

I'm sorry to be pedantic.  I'm not arguing that such a feature is *required*,
or necessary for any purpose (gee, don't test against your production
database server!), but that it would have *some* benefits, at *minimal* cost
(see below regarding cost), and is thus a win overall.

> This auto-reload feature should only be used during development anyway, 
> so performance issues like this shouldn't be a problem (turn it off 
> during heavy load testing, of course), and it would be much easier than 
> completely restarting the web server after every source file change, 
> which is what I'm currently doing.
> 
> 
> > Perhaps there should be a mechanism for a module to say "don't remove 
> > me!", or at least "preserve the value of this variable".
> 
> I don't think this is possible in the general case (and I'm pretty sure 
> Python doesn't support it). What would happen if a new version of the 
> source file uses a different name for the variable? Or worse, uses the 
> same variable (name) for a completely different purpose?

As to the first suggestion (a mechanism for a module to say "don't remove
me!"), that is already supported in that you do not reload Python standard
modules.  Perhaps you could add a check for a __no_reload__ symbol or the
like?

Regarding permanent variables, under ordinary Python reload semantics, you
can do something like:

try:
  x = my_retained_variable
  del x
except:
  my_retained_variable = initial_value

but that's just for the record.  I can't see why you could possibly want to
do that, *particularly* in mod_python.   :-)

Dustin

--

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

----- End forwarded message -----

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From dustin at ywlcs.org  Wed May 29 19:53:12 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:12 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530003850.GC29848@samba.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org>
Message-ID: <20020530005312.GG2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 10:38:51AM +1000, Martin Pool wrote:
>
> > Even with gc, if there are any dangling references into one of the old
> > modules (an atexit function? somewhere the Python standard libraries cache a
> > reference?) then you're going to have a bloated httpd.
> 
> Using atexit functions within mod_python is pretty pointless, but your
> general point about references held by system modules is correct.
> 
> If my code bloated that easily because of reloading modules then I
> would be somewhat worried that something would cause it to happen
> during production, and I'd feel I ought to investigate what was going
> wrong.
> 
> You can always turn down MaxRequestsPerChild, or indeed turn off
> autoreload.

Ah!  I had forgotten MaxRequestsPerChild, which lets Apache take care of
counting reloads, so a Python reloader need not worry about it.

> I guess in general I believe that in development mode (as opposed to
> release), correctness and developer productivity is more important
> than performance.

I don't disagree.  You'll note that I'm arguing for features on the basis of
developer convenience at minimal (but not zer) performance cost, which
translates into developer productivity.

> In deployment mode, there shouldn't be any bloat because the .py files
> won't change.  The cost is just stat'ing them each time, which is a
> slight cost but not terrible.

And the cost will be zero, if AutoReload is turned off :-)

> As far as I can see, the only non-bogus use of persistence is
> opportunistic caching.  Modules have to cope with losing their
> persistent state because (a) requests are unpredictably spread across
> Apache instances; (b) Apache can kill and restart children; (c)
> relying on it is overly fragile; and (d) without a working reload
> mechanism, the programmer will be completely restarting Apache at
> intervals anyhow.

True, but there are valid reasons to want to test and develop such
opportunistic caching mechanisms (since anything opportunistic is by at least
a little bit nondeterministic, it probably needs the most testing).  There
are also performance implications, as I detailed in my other reply in this
thread (<20020530004544.GF2519@eleanor.internal.ywlcs.org>).  As I said a few
paragraphs earlier, developer convenience with minimal impact on
performance.

BTW: I assume you're not implying that opportunistic caching is overly
fragile!  It's a great technique!  Relying on not being reloaded, however, is
obviously stupid, since the Apache API *will* reload you :-)

I don't actually care too much about this whole thing; just putting in my
$0.02.  If y'all are really opposed to it, don't put it in.  I'll still love
you, and you can keep the pennies. :-)

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From mbp at samba.org  Thu May 30 11:02:10 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 22:03:13 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010206.GD29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> Right, and in a development environment (the only place one would use a
> reloader) I suppose that would be acceptable.  However, if you're testing
> against the production database server (a not-unreasonable proposition for a
> small to midsize shop with a complex database schema), all those extra
> connections might prove to be a burden.  And you can't guarantee that Python
> will close them when the module is "unloaded", as the module may continue to
> exist for some time.

(I realize it's only an example.)

How often are developers changing and testing their code -- every few
minutes at most?  Suppose every ten seconds on average if you have a
few developers.  If your database can't cope with merely opening and
closing connections at that frequency I think you have big problems
that need to be addressed in some other way.  (More hardware, local
cache, ...)

It's equally or more likely that holding idle connections open
indefinitely would cause resource problems.

Anyhow, such a shop could always forbid use of the reloader.  There's
no need to penalize all users for the sake of this rare and
hypothetical case.

> Regarding permanent variables, under ordinary Python reload semantics, you
> can do something like:

I guess you could just stick the reference into somewhere in sys, but
of course that might result in other modules that you *do* want to
have reloaded actually not being so.

I think the real problem is that without reloading, if you ever forget
to restart Apache, different apache children can have different
versions of the code, which is very confusing.

-- 
Martin 

From mbp at samba.org  Thu May 30 11:08:15 2002
From: mbp at samba.org (Martin Pool)
Date: Fri Jan  9 22:03:13 2004
Subject: [mod_python] [patch] make autoreload more useful
In-Reply-To: <20020530005312.GG2519@eleanor.internal.ywlcs.org>
References: <20020529082436.GK25763@samba.org> <20020529124504.GG1280@eleanor.internal.ywlcs.org> <20020530003850.GC29848@samba.org> <20020530005312.GG2519@eleanor.internal.ywlcs.org>
Message-ID: <20020530010814.GE29848@samba.org>

On 29 May 2002, Dustin Mitchell <dustin@ywlcs.org> wrote:

> And the cost will be zero, if AutoReload is turned off :-)

Yes, that's the nice thing.

> True, but there are valid reasons to want to test and develop such
> opportunistic caching mechanisms (since anything opportunistic is by at least
> a little bit nondeterministic, it probably needs the most testing).

Yes.  You can test them (without changing the code) perfectly well
with this patch.  If you're changing the caching code then by
definition you need to restart one way or another.

Indeed, having objects in memory where the same datastructure is
modified by different versions of the code (with different bugs)
sounds like a recipe for confusion.  Suppose an earlier version of the
cache code actually broke one of the data structure invariants on the
cache -- you *want* to dump and reinitialize the thing.

> BTW: I assume you're not implying that opportunistic caching is overly
> fragile!  It's a great technique!  Relying on not being reloaded, however, is
> obviously stupid, since the Apache API *will* reload you :-)

Yes, that's what I meant: it's only dumb if you *rely* on persistence,
rather than just taking advantage of it when it happens.

Indeed an important part of testing that kind of code would be to set
MaxRequestsPerChild to a low number and make sure that it still works
when it is always being flushed.

-- 
Martin 

Every Python user scoffed at it once, saying significant whitespace is
the past.
	-- Moshe Zadka (?)

From dustin at ywlcs.org  Wed May 29 20:24:02 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:13 2004
Subject: [dustin@ywlcs.org: Re: [mod_python] [patch] make autoreload more useful]
In-Reply-To: <20020530010206.GD29848@samba.org>
References: <20020530004544.GF2519@eleanor.internal.ywlcs.org> <20020530010206.GD29848@samba.org>
Message-ID: <20020530012402.GH2519@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 11:02:10AM +1000, Martin Pool wrote:
> 
> Anyhow, such a shop could always forbid use of the reloader.  There's
> no need to penalize all users for the sake of this rare and
> hypothetical case.

I guess I don't see the penalty.  I'm talking about adding a mechanism to
prevent *only certain modules* from being reloaded, e.g. add

..
__no_reload__ = 1  # don't reload this module, please
..

to your module and the reloader will leave it alone.

I think that there are a few -- admittedly border, obscure -- cases where
such a feature would be useful / convenient during development, and that the
implementation cost is nearly nothing.

To demonstrate unequivocally what I mean, here's a patch that can be applied
after the original patch at the root of this thread:

*** apache-orig Wed May 29 20:16:58 2002
--- apache.py   Wed May 29 20:18:08 2002
***************
*** 121,127 ****
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):
--- 121,128 ----
                        APLOG_NOERRNO|APLOG_NOTICE)
      for module_name in sys.modules.keys():
          if not _orig_sys_modules.has_key(module_name):
!             if not hasattr(sys.modules[module_name], '__no_reload__'):
!                 del sys.modules[module_name]
  
  
  def _get_sub_module(top_module, module_name):

From vmanera at manord.com  Thu May 30 16:59:46 2002
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:03:13 2004
Subject: [mod_python] problem in file download
Message-ID: <801EB84B006ED411898D00B0D03E524712CCA7@PROXYMAIL>

Hello,

I'm trying to download a file:

client side:
<FORM METHOD="POST"
ACTION="http://sviluppo.manord.com/cgi-mpy/prova.py/printfile "
ENCTYPE="multipart/form-data" NAME="FormDati">
<center>
<INPUT TYPE="file" NAME="file1"></center>
<center>
<INPUT TYPE="submit" NAME="invia" VALUE="Invia Dati"></center>

</FORM>

when I sumitted a file mod_python give me this:

Mod_python error: "PythonHandler mod_python.publisher"

Traceback (most recent call last):

  File "C:\Program Files\Python22\Lib\mod_python\apache.py", line 193, in
Dispatch
    result = object(req)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 104, in
handler
    val = File(field)

  File "C:\Program Files\Python22\Lib\mod_python\publisher.py", line 308, in
__init__
    for m in field.file.__methods__:

  File "C:\programmi\Python22\Lib\tempfile.py", line 178, in __getattr__
    a = getattr(file, name)

AttributeError: 'file' object has no attribute '__methods__'


does anyone have any idea to solve this?

Villiam


From conrad at hep.caltech.edu  Thu May 30 18:20:56 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:03:13 2004
Subject: [mod_python] Serving files efficiently
Message-ID: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>

Hi

Looking at the previous thread on serving files got me thinking:

I'm also trying to serve a file (or part of a file) in response to an
xmlrpc query. Since URL filtering etc. is not an option in this case, is
there a way to tell apache to do a sendfile() or similar from
mod_python? I'm sure this would be more efficient that my current method
of (roughly) reading to a buffer and then sending the buffer with
req.write() and constructing my own headers.

Any ideas?

Cheers!

Conrad
-- 
*-----------------------------------------*
| Conrad Steenberg                        |
| Caltech, Mail Code 356-48               |
| Pasadena, CA, 91125                     |
| e-mail: conrad@hep.caltech.edu          |
| Tel: (626) 395-8758                     |
*-----------------------------------------*


From dustin at ywlcs.org  Thu May 30 21:07:34 2002
From: dustin at ywlcs.org (Dustin Mitchell)
Date: Fri Jan  9 22:03:13 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu>
Message-ID: <20020531020733.GB11734@eleanor.internal.ywlcs.org>

On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> Hi
> 
> Looking at the previous thread on serving files got me thinking:
> 
> I'm also trying to serve a file (or part of a file) in response to an
> xmlrpc query. Since URL filtering etc. is not an option in this case, is
> there a way to tell apache to do a sendfile() or similar from
> mod_python? I'm sure this would be more efficient that my current method
> of (roughly) reading to a buffer and then sending the buffer with
> req.write() and constructing my own headers.

Since sendfile() is pretty much what Apache will do anyway, you can just call
sendfile() from Python.  There's a Python implementation of sendfile in
Medusa (I haven't tested it, but it's in the source).  You could also SWIG
it.

http://www.nightmare.com/medusa/
http://www.swig.org/

Dustin

-- 

  Dustin Mitchell
  dustin@ywlcs.org
  http://people.cs.uchicago.edu/~dustin/

From conrad at hep.caltech.edu  Thu May 30 22:57:05 2002
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:03:13 2004
Subject: [mod_python] Serving files efficiently
In-Reply-To: <20020531020733.GB11734@eleanor.internal.ywlcs.org>
References: <1022808059.11831.94.camel@heppc22.cithep.caltech.edu> 
	<20020531020733.GB11734@eleanor.internal.ywlcs.org>
Message-ID: <1022824630.3487.0.camel@charter-187-163.caltech.edu>

Hi Dustin

Thanks! I'll try it tomorrow :-)

Conrad

On Thu, 2002-05-30 at 19:07, Dustin Mitchell wrote:
> On Thu, May 30, 2002 at 06:20:56PM -0700, Conrad Steenberg wrote:
> > Hi
> > 
> > Looking at the previous thread on serving files got me thinking:
> > 
> > I'm also trying to serve a file (or part of a file) in response to an
> > xmlrpc query. Since URL filtering etc. is not an option in this case, is
> > there a way to tell apache to do a sendfile() or similar from
> > mod_python? I'm sure this would be more efficient that my current method
> > of (roughly) reading to a buffer and then sending the buffer with
> > req.write() and constructing my own headers.
> 
> Since sendfile() is pretty much what Apache will do anyway, you can just call
> sendfile() from Python.  There's a Python implementation of sendfile in
> Medusa (I haven't tested it, but it's in the source).  You could also SWIG
> it.
> 
> http://www.nightmare.com/medusa/
> http://www.swig.org/
> 
> Dustin
> 
> -- 
> 
>   Dustin Mitchell
>   dustin@ywlcs.org
>   http://people.cs.uchicago.edu/~dustin/
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://www.modpython.org/mailman/listinfo/mod_python
-- 


