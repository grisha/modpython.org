From grisha at modpython.org  Wed May  6 07:42:26 2009
From: grisha at modpython.org (Mary Watkins)
Date: Wed May  6 06:42:32 2009
Subject: [mod_python] [SPAM] You and a Omega watch
Message-ID: <95341tefz526OYOKWgrisha@modpython.org>

Money is tight, times are hard. Christmas is over. Time to get a new Watch!
http://cbpoijow.cn

At Diam0nd Reps we specialize in fine watches imitations, offering our customers the same beauty and craftsmanship that an original carries, matched by a ridiculously low price that is sometimes hard to believe, but very much true!
http://cbpoijow.cn

Most experts couldn't tell our watches from the real thing, and neither will your friends, so impress them today get started with your watch shopping now!





From grisha at modpython.org  Sat May  9 15:17:17 2009
From: grisha at modpython.org (Dorian Mcmanus)
Date: Sat May  9 14:17:24 2009
Subject: [mod_python] [SPAM] Tag Heuer watches wholesale all year long!
Message-ID: <42599nvyu013DAZVQgrisha@modpython.org>

There's no time like the present, and isn't it time you got yourself a beautiful designer watch?  
http://djeoivcwe.cn

Visit Diam0nd Reps today and get a terrific designer watch imitation for a uniquely low price. Our watches are the most sought-after in the market, offering you the best performance and unsurpassed quality while allowing you to choose from hundreds of models within dozens of brands!
http://djeoivcwe.cn

Click here now and enjoy our fast shipping and safe billing method while getting the most realistic look on a fine reproduction timepiece.





From lists at elasticmind.net  Sun May 10 19:02:06 2009
From: lists at elasticmind.net (mog)
Date: Sun May 10 19:02:34 2009
Subject: [mod_python] Redirect does not work for URIs when including GET
	arguments
Message-ID: <4A075CEE.2020709@elasticmind.net>

Greetings,

Hope you are well. I'm working on an application that has a number of 
pages that require users to log in. To make this nice and easy for the 
users, when they hit a page that needs authentication, I'd like the page 
to just call the function that handles all the login code and template 
rendering transparently, and then just redirect them back to the 
original URI they gave - so that from a user's point of view, the URI 
doesn't change.

The program kinda works like this:

# User goes to /mypage
def index(req):
    if not hasattr(req, "websess"):
        req.websess = Session.DbmSession(req, timeout=1200)
    req.websess.save()

    ... sets some variables like title and stuff ...

    if user isn't logged in:
        from myapp.login import index as login_page
        return login_page(req, req.uri, 'template.html', title)
    else user must be loggedin:
        pull some data from the database and render the page using a 
templete
        return ...template...


# login_page() function called by '/mypage'
def index(req, refer_uri=None, refer_tmpl=None, refer_title=None):
    if not hasattr(req, "websess"):
        req.websess = Session.DbmSession(req, timeout=1200)
    req.websess.save()

    ... render a template containing a login form...
    ... user clicks the Login submit button after entering the username 
and password in the form...
    ... The html form action causes the referrer page (/mypage) to be 
reloaded...
    ... User is not logged in so process repeats with /login/index being 
called again having req data passed to it...
    ... /login/index checks the users login details and accepts the 
login request ...

    if user login is accepted:
        req.websess.unlock()
        # redirect back to /mypage since login was successful.
        req.internal_redirect(refer_uri)


I didn't want to post a load of code that wasn't relevant, but I hope 
the pseudo code helps a little bit to explain what I was trying to achieve.

This method works fine when the URI has no GET arguments, for example; 
if the user wants to go to the /mypage URI directly - it's fine. 
However, if the URI does have arguments, like /mypage?id=18, then the 
application keeps displaying the login page all the time and doesn't 
process the login correctly - or at least it seems.

All the login stuff is done using POST, but the URI arguments for the 
/mypage code is done using GET. Since this is what apparently causes it 
to break, I'm assuming there must be something wrong here, but I'm not 
sure. Perhaps there is a better way of doing this, or if I want to use 
GET arguments as well, I need to go about solving this problem a 
different way?

Any help or advice would be greatly appreciated. Thanks you in advance 
for your time and consideration.
From grisha at modpython.org  Mon May 11 00:14:57 2009
From: grisha at modpython.org (Malcolm Quinones)
Date: Sun May 10 23:15:08 2009
Subject: [mod_python] [SPAM] One of a kind IWC reps
Message-ID: <91242xini736KAEZYgrisha@modpython.org>

There's no time like the present, and isn't it time you got yourself a beautiful designer watch?  
http://piovdjov.cn

At Diam0nd Reps you will find exactly the watch you're looking for, at prices that will make you blink twice. That's right! Here you can get a Rolex, a Breitling, a Tag or pretty much every fine brand timepiece for less than ten percent their original price!
http://piovdjov.cn

Most experts couldn't tell our watches from the real thing, and neither will your friends, so impress them today get started with your watch shopping now!





From grisha at modpython.org  Mon May 11 05:29:44 2009
From: grisha at modpython.org (Suzette Warren)
Date: Mon May 11 04:29:53 2009
Subject: [mod_python] [SPAM] Hot rep watches from 2009
Message-ID: <95069ooyt744LKTFGgrisha@modpython.org>

Money is tight, times are hard. Christmas is over. Time to get a new Watch!
http://hicasfa.cn

Diam0nd Reps has it all: Rolex, Cartier, Tag Heuer, Breitling, and many more, for a fraction of the price of an original watch. And don't forget: when you order two watches, you get an extra 15 percent discount over our already low prices!
http://hicasfa.cn

Only Diam0nd Reps offers you unsurpassed quality and award-winning customer service. So, what are you waiting for?






From grisha at modpython.org  Mon May 11 11:14:41 2009
From: grisha at modpython.org (Johnie Benson)
Date: Mon May 11 10:14:51 2009
Subject: [mod_python] [SPAM] Cartier watches wholesale all year long!
Message-ID: <33861oowd732KZIUFgrisha@modpython.org>

It's the perfect time to get that dream watch you've fantasized about. But there's no need to empty your bank account while doing it!
http://safoijo.cn

At Diam0nd Reps we make it easy to get a Rolex, Cartier, Bvlgari or any brand name that you think of. As long as it is considered a high class watch, you will find it in our one of a kind store!
http://safoijo.cn

Don't delay your pleasure: our incredible watch collection awaits you at Diam0nd Reps, so come visit us now!






From grisha at modpython.org  Mon May 11 18:04:50 2009
From: grisha at modpython.org (Jesus Becker)
Date: Mon May 11 17:05:01 2009
Subject: [mod_python] [SPAM] Rep watch is a perfect gift
Message-ID: <58372ddhh807FHKJSgrisha@modpython.org>

Loving yourself is the first step in loving life. And what better way to do it, than by getting yourself a fine designer watch?
http://vopijif.cn

At Diam0nd Reps you will find exactly the watch you're looking for, at prices that will make you blink twice. That's right! Here you can get a Rolex, a Breitling, a Tag or pretty much every fine brand timepiece for less than ten percent their original price!
http://vopijif.cn

So, what are you waiting for? Get that unique timepiece today at Diam0nd Reps!






From vl_sadovnikov at yahoo.com  Wed May 13 19:01:26 2009
From: vl_sadovnikov at yahoo.com (Viktor Sadovnikov)
Date: Wed May 13 19:01:36 2009
Subject: [mod_python] Installing mod_python 3.3.1 on MAC 10.4.11
Message-ID: <579125.92364.qm@web110802.mail.gq1.yahoo.com>


Hello,

Can anyone advise how to fix a problem with installation of mod_python 3.3.1 on MAC 10.4.11?

I've got Apache 2.2 installed in /usr/local/apache2 and I'm following installation instructions on http://www.modpython.org/live/current/doc-html/installation.html

1) running configure with the line below succeeds 
localhost:/temp/mod_python-3.3.1 viktor$ ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/Library/Frameworks/Python.framework/Versions/Current/bin/python2.5 --with-max-locks=32

2) however compilation fails with "connobject.c:142: error: request for member 'next' in something not a structure or union". The complete output is pasted below

Have you met this problem before?

Thank you in advance,
Viktor Sadovnikov

localhost:/temp/mod_python-3.3.1 viktor$ make

Compiling for DSO.

/usr/local/apache2/bin/apxs -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 -c mod_python.c _apachemodule.c requestobject.c tableobject.c util.c serverobject.c connobject.c filterobject.c hlist.c hlistobject.c finfoobject.c -Wl,-framework,Python  -u _PyMac_Error /Versions//   -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g    -lm  -framework  Python    -ldl                     
/usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic   -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include  -I/usr/local/apache2/include   -I/usr/local/apache2/include  -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5  -c -o mod_python.lo mod_python.c && touch mod_python.slo
mod_python.c: In function 'python_init':
mod_python.c:826: warning: initialization from incompatible pointer type
/usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic   -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include  -I/usr/local/apache2/include   -I/usr/local/apache2/include  -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5  -c -o _apachemodule.lo _apachemodule.c && touch _apachemodule.slo
/usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic   -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include  -I/usr/local/apache2/include   -I/usr/local/apache2/include  -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5  -c -o requestobject.lo requestobject.c && touch requestobject.slo
/usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic   -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include  -I/usr/local/apache2/include   -I/usr/local/apache2/include  -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5  -c -o tableobject.lo tableobject.c && touch tableobject.slo
tableobject.c:329: warning: initialization from incompatible pointer type
tableobject.c:1092: warning: initialization from incompatible pointer type
/usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic   -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include  -I/usr/local/apache2/include   -I/usr/local/apache2/include  -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5  -c -o util.lo util.c && touch util.slo
/usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic   -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include  -I/usr/local/apache2/include   -I/usr/local/apache2/include  -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5  -c -o serverobject.lo serverobject.c && touch serverobject.slo
serverobject.c:387: warning: initialization from incompatible pointer type
/usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic   -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include  -I/usr/local/apache2/include   -I/usr/local/apache2/include  -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5  -c -o connobject.lo connobject.c && touch connobject.slo
connobject.c: In function '_conn_read':
connobject.c:142: error: request for member 'next' in something not a structure or union
apxs:Error: Command failed with rc=65536
.
make[1]: *** [mod_python.so] Error 1
make: *** [do_dso] Error 2



      
From graham.dumpleton at gmail.com  Wed May 13 19:07:39 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Wed May 13 19:07:48 2009
Subject: [mod_python] Installing mod_python 3.3.1 on MAC 10.4.11
In-Reply-To: <579125.92364.qm@web110802.mail.gq1.yahoo.com>
References: <579125.92364.qm@web110802.mail.gq1.yahoo.com>
Message-ID: <88e286470905131607w2d492462r4bb68e6db593fcd1@mail.gmail.com>

Use mod_python source code from subversion repository.

  svn co https://svn.apache.org/repos/asf/quetzalcoatl/mod_python/trunk
mod_python-trunk

If you aren't specifically using mod_python APIs/handlers and just
want to host a WSGI capable application such as Django, Trac or any of
the other major web frameworks/applications, then you should arguably
use mod_wsgi instead.

Graham

2009/5/14 Viktor Sadovnikov <vl_sadovnikov@yahoo.com>:
>
> Hello,
>
> Can anyone advise how to fix a problem with installation of mod_python 3.3.1 on MAC 10.4.11?
>
> I've got Apache 2.2 installed in /usr/local/apache2 and I'm following installation instructions on http://www.modpython.org/live/current/doc-html/installation.html
>
> 1) running configure with the line below succeeds
> localhost:/temp/mod_python-3.3.1 viktor$ ./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/Library/Frameworks/Python.framework/Versions/Current/bin/python2.5 --with-max-locks=32
>
> 2) however compilation fails with "connobject.c:142: error: request for member 'next' in something not a structure or union". The complete output is pasted below
>
> Have you met this problem before?
>
> Thank you in advance,
> Viktor Sadovnikov
>
> localhost:/temp/mod_python-3.3.1 viktor$ make
>
> Compiling for DSO.
>
> /usr/local/apache2/bin/apxs -I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 -c mod_python.c _apachemodule.c requestobject.c tableobject.c util.c serverobject.c connobject.c filterobject.c hlist.c hlistobject.c finfoobject.c -Wl,-framework,Python ?-u _PyMac_Error /Versions// ? -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g ? ?-lm ?-framework ?Python ? ?-ldl
> /usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic ? -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include ?-I/usr/local/apache2/include ? -I/usr/local/apache2/include ?-I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 ?-c -o mod_python.lo mod_python.c && touch mod_python.slo
> mod_python.c: In function 'python_init':
> mod_python.c:826: warning: initialization from incompatible pointer type
> /usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic ? -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include ?-I/usr/local/apache2/include ? -I/usr/local/apache2/include ?-I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 ?-c -o _apachemodule.lo _apachemodule.c && touch _apachemodule.slo
> /usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic ? -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include ?-I/usr/local/apache2/include ? -I/usr/local/apache2/include ?-I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 ?-c -o requestobject.lo requestobject.c && touch requestobject.slo
> /usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic ? -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include ?-I/usr/local/apache2/include ? -I/usr/local/apache2/include ?-I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 ?-c -o tableobject.lo tableobject.c && touch tableobject.slo
> tableobject.c:329: warning: initialization from incompatible pointer type
> tableobject.c:1092: warning: initialization from incompatible pointer type
> /usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic ? -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include ?-I/usr/local/apache2/include ? -I/usr/local/apache2/include ?-I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 ?-c -o util.lo util.c && touch util.slo
> /usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic ? -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include ?-I/usr/local/apache2/include ? -I/usr/local/apache2/include ?-I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 ?-c -o serverobject.lo serverobject.c && touch serverobject.slo
> serverobject.c:387: warning: initialization from incompatible pointer type
> /usr/local/apache2/build/libtool --silent --mode=compile gcc -prefer-pic ? -DDARWIN -DSIGPROCMASK_SETS_THREAD_MASK -no-cpp-precomp -g -O2 -I/usr/local/apache2/include ?-I/usr/local/apache2/include ? -I/usr/local/apache2/include ?-I/temp/mod_python-3.3.1/src/include -I/usr/local/apache2/include -I/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 ?-c -o connobject.lo connobject.c && touch connobject.slo
> connobject.c: In function '_conn_read':
> connobject.c:142: error: request for member 'next' in something not a structure or union
> apxs:Error: Command failed with rc=65536
> .
> make[1]: *** [mod_python.so] Error 1
> make: *** [do_dso] Error 2
>
>
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From zsi at skolesys.dk  Fri May 15 06:03:14 2009
From: zsi at skolesys.dk (zsi)
Date: Fri May 15 05:56:46 2009
Subject: [mod_python] Multiple Interpreters mod_python optimization
Message-ID: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>

Hey *

I am creating a SOAP service that is based on ZSI and mod_python. I have
the service running and it works, but it's not performing well, so I made
did some output to the syslog from inside the handler:

reloadchecker.py:
----------------
testvar=1
----------------

My handler:
----------------
import capa0_9.soap.sessionservice as sessionservice
import capa0_9.soap.zsi_handler as zsi_handler
from mod_python import apache
import capa0_9.tools.log as log
import os,reloadchecker

mod = __import__('encodings.utf_8', globals(), locals(), '*')
mod = __import__('encodings.utf_16_be', globals(), locals(), '*')

def handler(req):

        """
        The PythonHandler entry-point. This function must be present in
order to have mod_apache dispatch a python operation.
        """
        zsi_handler.AsHandler(modules=(sessionservice,), request=req)
        log.debug("REQUESTINFO: Interpreter Name = %s" %
str(req.interpreter))
        log.debug("REQUESTINFO: os.getpid()      = %s" % str(os.getpid()))
        log.debug("REQUESTINFO: reloadchecker    = %s" %
str(reloadchecker.testvar))
        reloadchecker.testvar += 1
        return apache.OK
-----------------

I log the interpreter name, which according to section 4.1 should make
mod_python boost performance by keeping the interpreter alive as long as
the apache server processes. And I log the pid of the interpreter. As it is
clear to see in the output below a new pid is spawned each time, it does
not reuse the interpreter and therefore, I guess, it has to reload
everything for each request. Note that i also list the apache2 processes
before and after I bombard the server with requests, it shows that the same
processes are running before and after. I also made a dummy module
"reloadchecker" that contains one variable "testvar". If it is reloaded the
variable is initialized to 1, if it was already loaded it should be
increased by 1 for each request.

Am I missing something, shouldn't mod_python optimize performance by
reusing previously loaded modules from earlier requests?


mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
mikrov    7396  0.0  0.1   3004   764 pts/2    S+   11:11   0:00 grep
apache2
root     22343  0.0  1.0  13728  5336 ?        Ss   May14   0:26
/usr/sbin/apache2 -k start
root     22346  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22347  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22348  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22349  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22350  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22383  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22392  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22407  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22716  0.0  0.6  13728  3136 ?        S    May14   0:03
/usr/sbin/apache2 -k start
root     23356  0.0  0.6  13728  3136 ?        S    May14   0:03
/usr/sbin/apache2 -k start

mikrov@capa-server:/srv/capa/www/0.9/sessionservice$ sudo tail -f
/var/log/syslog | grep REQUESTINFO
May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/ 
May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid()      = 7953     
                        
May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker    = 1        
                        
May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/ 
May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid()      = 7954     
                        
May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker    = 1        
                        
May 15 11:52:04 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/ 
May 15 11:52:04 capa-server capa: REQUESTINFO: os.getpid()      = 7955     
                        
May 15 11:52:04 capa-server capa: REQUESTINFO: reloadchecker    = 1        
                        
May 15 11:52:05 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/ 
May 15 11:52:05 capa-server capa: REQUESTINFO: os.getpid()      = 7959     
                        
May 15 11:52:05 capa-server capa: REQUESTINFO: reloadchecker    = 1        
                        
May 15 11:52:06 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/ 
May 15 11:52:06 capa-server capa: REQUESTINFO: os.getpid()      = 7960     
                        
May 15 11:52:06 capa-server capa: REQUESTINFO: reloadchecker    = 1        
                        
May 15 11:52:07 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/ 
May 15 11:52:07 capa-server capa: REQUESTINFO: os.getpid()      = 7961     
                        
May 15 11:52:07 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid()      = 7963
May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid()      = 7964
May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:09 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:09 capa-server capa: REQUESTINFO: os.getpid()      = 7966
May 15 11:52:09 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:10 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:10 capa-server capa: REQUESTINFO: os.getpid()      = 7968
May 15 11:52:10 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:11 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:11 capa-server capa: REQUESTINFO: os.getpid()      = 7969
May 15 11:52:11 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:12 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:12 capa-server capa: REQUESTINFO: os.getpid()      = 7970
May 15 11:52:12 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid()      = 7972
May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid()      = 7973
May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:14 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:14 capa-server capa: REQUESTINFO: os.getpid()      = 7974
May 15 11:52:14 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:15 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:15 capa-server capa: REQUESTINFO: os.getpid()      = 7976
May 15 11:52:15 capa-server capa: REQUESTINFO: reloadchecker    = 1
May 15 11:52:16 capa-server capa: REQUESTINFO: Interpreter Name =
/srv/capa/www/0.9/sessionservice/
May 15 11:52:16 capa-server capa: REQUESTINFO: os.getpid()      = 7977
May 15 11:52:16 capa-server capa: REQUESTINFO: reloadchecker    = 1

mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
mikrov    7457  0.0  0.1   3004   764 pts/2    S+   11:12   0:00 grep
apache2
root     22343  0.0  1.0  13728  5336 ?        Ss   May14   0:26
/usr/sbin/apache2 -k start
root     22346  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22347  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22348  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22349  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22350  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22383  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22392  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22407  0.0  0.6  13728  3136 ?        S    May14   0:04
/usr/sbin/apache2 -k start
root     22716  0.0  0.6  13728  3136 ?        S    May14   0:03
/usr/sbin/apache2 -k start
root     23356  0.0  0.6  13728  3136 ?        S    May14   0:03
/usr/sbin/apache2 -k start

Best regards
Jakob Simon-Gaarde

From graham.dumpleton at gmail.com  Fri May 15 06:11:38 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri May 15 06:11:48 2009
Subject: [mod_python] Multiple Interpreters mod_python optimization
In-Reply-To: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
References: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
Message-ID: <88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>

2009/5/15 zsi <zsi@skolesys.dk>:
> Hey *
>
> I am creating a SOAP service that is based on ZSI and mod_python. I have
> the service running and it works, but it's not performing well, so I made
> did some output to the syslog from inside the handler:
>
> reloadchecker.py:
> ----------------
> testvar=1
> ----------------
>
> My handler:
> ----------------
> import capa0_9.soap.sessionservice as sessionservice
> import capa0_9.soap.zsi_handler as zsi_handler
> from mod_python import apache
> import capa0_9.tools.log as log
> import os,reloadchecker
>
> mod = __import__('encodings.utf_8', globals(), locals(), '*')
> mod = __import__('encodings.utf_16_be', globals(), locals(), '*')
>
> def handler(req):
>
> ? ? ? ?"""
> ? ? ? ?The PythonHandler entry-point. This function must be present in
> order to have mod_apache dispatch a python operation.
> ? ? ? ?"""
> ? ? ? ?zsi_handler.AsHandler(modules=(sessionservice,), request=req)
> ? ? ? ?log.debug("REQUESTINFO: Interpreter Name = %s" %
> str(req.interpreter))
> ? ? ? ?log.debug("REQUESTINFO: os.getpid() ? ? ?= %s" % str(os.getpid()))
> ? ? ? ?log.debug("REQUESTINFO: reloadchecker ? ?= %s" %
> str(reloadchecker.testvar))
> ? ? ? ?reloadchecker.testvar += 1
> ? ? ? ?return apache.OK
> -----------------
>
> I log the interpreter name, which according to section 4.1 should make
> mod_python boost performance by keeping the interpreter alive as long as
> the apache server processes. And I log the pid of the interpreter. As it is
> clear to see in the output below a new pid is spawned each time, it does
> not reuse the interpreter and therefore, I guess, it has to reload
> everything for each request. Note that i also list the apache2 processes
> before and after I bombard the server with requests, it shows that the same
> processes are running before and after. I also made a dummy module
> "reloadchecker" that contains one variable "testvar". If it is reloaded the
> variable is initialized to 1, if it was already loaded it should be
> increased by 1 for each request.
>
> Am I missing something,

Yes.

> shouldn't mod_python optimize performance by
> reusing previously loaded modules from earlier requests?

Only if the request is actually handled by the same process. Since
Apache is a multiprocess web server, the requests could be handled by
any of the processes. You will obviously incur the load cost of the
interpreter and application for the first request against each
processor. Subsequent requests for a process should use the fact that
stuff is already loaded. You likely didn't do enough requests to have
touched all process and have a request actually go back to a process
which was already used.

Read:

  http://www.dscpl.com.au/wiki/ModPython/Articles/TheProcessInterpreterModel

Since you appear to be using prefork MPM, also read about the dangers
of prefork MPM in:

  http://blog.dscpl.com.au/2009/03/load-spikes-and-excessive-memory-usage.html

If you want better control over how many processes are used for your
application and particularly so you can limit number to small fixed
number and/or use threading as well, then look at mod_wsgi daemon mode
instead.

BTW, the process IDs in your 'ps' output don't even match what your
Python code is producing. Looks like you aren't even talking to the
same Apache instance. Alternatively you have got some really silly
Apache configuration setup, such a MaxRequestsPerchild set to 1. But
even in that case, you would have expected some of those initial
process to have been recycled.

So, try and validate your configuration and whether you might have
multiple Apache installations running. Look for 'httpd' processes as
well.

Graham

> mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
> mikrov ? ?7396 ?0.0 ?0.1 ? 3004 ? 764 pts/2 ? ?S+ ? 11:11 ? 0:00 grep
> apache2
> root ? ? 22343 ?0.0 ?1.0 ?13728 ?5336 ? ? ? ? ?Ss ? May14 ? 0:26
> /usr/sbin/apache2 -k start
> root ? ? 22346 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22347 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22348 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22349 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22350 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22383 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22392 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22407 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22716 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:03
> /usr/sbin/apache2 -k start
> root ? ? 23356 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:03
> /usr/sbin/apache2 -k start
>
> mikrov@capa-server:/srv/capa/www/0.9/sessionservice$ sudo tail -f
> /var/log/syslog | grep REQUESTINFO
> May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7953
>
> May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>
> May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7954
>
> May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>
> May 15 11:52:04 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:04 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7955
>
> May 15 11:52:04 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>
> May 15 11:52:05 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:05 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7959
>
> May 15 11:52:05 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>
> May 15 11:52:06 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:06 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7960
>
> May 15 11:52:06 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>
> May 15 11:52:07 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:07 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7961
>
> May 15 11:52:07 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7963
> May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7964
> May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:09 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:09 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7966
> May 15 11:52:09 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:10 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:10 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7968
> May 15 11:52:10 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:11 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:11 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7969
> May 15 11:52:11 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:12 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:12 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7970
> May 15 11:52:12 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7972
> May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7973
> May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:14 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:14 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7974
> May 15 11:52:14 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:15 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:15 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7976
> May 15 11:52:15 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
> May 15 11:52:16 capa-server capa: REQUESTINFO: Interpreter Name =
> /srv/capa/www/0.9/sessionservice/
> May 15 11:52:16 capa-server capa: REQUESTINFO: os.getpid() ? ? ?= 7977
> May 15 11:52:16 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>
> mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
> mikrov ? ?7457 ?0.0 ?0.1 ? 3004 ? 764 pts/2 ? ?S+ ? 11:12 ? 0:00 grep
> apache2
> root ? ? 22343 ?0.0 ?1.0 ?13728 ?5336 ? ? ? ? ?Ss ? May14 ? 0:26
> /usr/sbin/apache2 -k start
> root ? ? 22346 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22347 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22348 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22349 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22350 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22383 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22392 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22407 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:04
> /usr/sbin/apache2 -k start
> root ? ? 22716 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:03
> /usr/sbin/apache2 -k start
> root ? ? 23356 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ? 0:03
> /usr/sbin/apache2 -k start
>
> Best regards
> Jakob Simon-Gaarde
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From zsi at skolesys.dk  Fri May 15 06:34:07 2009
From: zsi at skolesys.dk (zsi)
Date: Fri May 15 06:27:30 2009
Subject: =?UTF-8?Q?=5Bmod=5Fpython=5D=20Multiple=20Interpreters=20mod=5Fpython?=
	=?UTF-8?Q?=20optimization?=
In-Reply-To: <88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>
References: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
	<88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>
Message-ID: <52aaf865eafe5fd2fa19303337121a16@skolesys.dk>



On Fri, 15 May 2009 20:11:38 +1000, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
> 2009/5/15 zsi <zsi@skolesys.dk>:
>> Hey *
>>
>> I am creating a SOAP service that is based on ZSI and mod_python. I have
>> the service running and it works, but it's not performing well, so I
> made
>> did some output to the syslog from inside the handler:
>>
>> reloadchecker.py:
>> ----------------
>> testvar=1
>> ----------------
>>
>> My handler:
>> ----------------
>> import capa0_9.soap.sessionservice as sessionservice
>> import capa0_9.soap.zsi_handler as zsi_handler
>> from mod_python import apache
>> import capa0_9.tools.log as log
>> import os,reloadchecker
>>
>> mod = __import__('encodings.utf_8', globals(), locals(), '*')
>> mod = __import__('encodings.utf_16_be', globals(), locals(), '*')
>>
>> def handler(req):
>>
>> ? ? ? ?"""
>> ? ? ? ?The PythonHandler entry-point. This function must be present
> in
>> order to have mod_apache dispatch a python operation.
>> ? ? ? ?"""
>> ? ? ? ?zsi_handler.AsHandler(modules=(sessionservice,), request=req)
>> ? ? ? ?log.debug("REQUESTINFO: Interpreter Name = %s" %
>> str(req.interpreter))
>> ? ? ? ?log.debug("REQUESTINFO: os.getpid() ? ? ?= %s" %
> str(os.getpid()))
>> ? ? ? ?log.debug("REQUESTINFO: reloadchecker ? ?= %s" %
>> str(reloadchecker.testvar))
>> ? ? ? ?reloadchecker.testvar += 1
>> ? ? ? ?return apache.OK
>> -----------------
>>
>> I log the interpreter name, which according to section 4.1 should make
>> mod_python boost performance by keeping the interpreter alive as long as
>> the apache server processes. And I log the pid of the interpreter. As it
> is
>> clear to see in the output below a new pid is spawned each time, it does
>> not reuse the interpreter and therefore, I guess, it has to reload
>> everything for each request. Note that i also list the apache2 processes
>> before and after I bombard the server with requests, it shows that the
> same
>> processes are running before and after. I also made a dummy module
>> "reloadchecker" that contains one variable "testvar". If it is reloaded
> the
>> variable is initialized to 1, if it was already loaded it should be
>> increased by 1 for each request.
>>
>> Am I missing something,

Thanks for the quick response.

> 
> Yes.
> 
>> shouldn't mod_python optimize performance by
>> reusing previously loaded modules from earlier requests?
> 
> Only if the request is actually handled by the same process. Since
> Apache is a multiprocess web server, the requests could be handled by
> any of the processes. You will obviously incur the load cost of the
> interpreter and application for the first request against each
> processor. Subsequent requests for a process should use the fact that
> stuff is already loaded. You likely didn't do enough requests to have
> touched all process and have a request actually go back to a process
> which was already used.
> 
> Read:
> 
>  
>
http://www.dscpl.com.au/wiki/ModPython/Articles/TheProcessInterpreterModel
> 
> Since you appear to be using prefork MPM, also read about the dangers
> of prefork MPM in:
> 
>  
>
http://blog.dscpl.com.au/2009/03/load-spikes-and-excessive-memory-usage.html
> 
> If you want better control over how many processes are used for your
> application and particularly so you can limit number to small fixed
> number and/or use threading as well, then look at mod_wsgi daemon mode
> instead.
> 
> BTW, the process IDs in your 'ps' output don't even match what your
> Python code is producing. Looks like you aren't even talking to the
> same Apache instance.
I wasn't expecting them to match. The process id's from the python code
are the interpreter's pid not the apaches. What I wanted to show by
that was that it is stille the same apache processes (8 of them) but
I have 18 different interpreter process ID's. So it is not because I
hit a new apache process every time.

> So, try and validate your configuration and whether you might have
> multiple Apache installations running. Look for 'httpd' processes as
> well.

Here is the server pool configuration (standard ubuntu mpm-prefork
configuration):
    StartServers          5
    MinSpareServers       5
    MaxSpareServers      10
    MaxClients          150
    MaxRequestsPerChild   0

Best regards
Jakob Simon-Gaarde

>> mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
>> mikrov ? ?7396 ?0.0 ?0.1 ? 3004 ? 764 pts/2 ? ?S+ ? 11:11 ?
> 0:00 grep
>> apache2
>> root ? ? 22343 ?0.0 ?1.0 ?13728 ?5336 ? ? ? ? ?Ss ? May14 ?
> 0:26
>> /usr/sbin/apache2 -k start
>> root ? ? 22346 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22347 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22348 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22349 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22350 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22383 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22392 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22407 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22716 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:03
>> /usr/sbin/apache2 -k start
>> root ? ? 23356 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:03
>> /usr/sbin/apache2 -k start
>>
>> mikrov@capa-server:/srv/capa/www/0.9/sessionservice$ sudo tail -f
>> /var/log/syslog | grep REQUESTINFO
>> May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7953
>>
>> May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>
>> May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7954
>>
>> May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>
>> May 15 11:52:04 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:04 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7955
>>
>> May 15 11:52:04 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>
>> May 15 11:52:05 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:05 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7959
>>
>> May 15 11:52:05 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>
>> May 15 11:52:06 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:06 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7960
>>
>> May 15 11:52:06 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>
>> May 15 11:52:07 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:07 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7961
>>
>> May 15 11:52:07 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7963
>> May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7964
>> May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:09 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:09 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7966
>> May 15 11:52:09 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:10 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:10 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7968
>> May 15 11:52:10 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:11 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:11 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7969
>> May 15 11:52:11 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:12 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:12 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7970
>> May 15 11:52:12 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7972
>> May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7973
>> May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:14 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:14 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7974
>> May 15 11:52:14 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:15 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:15 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7976
>> May 15 11:52:15 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>> May 15 11:52:16 capa-server capa: REQUESTINFO: Interpreter Name =
>> /srv/capa/www/0.9/sessionservice/
>> May 15 11:52:16 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
> 7977
>> May 15 11:52:16 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>
>> mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
>> mikrov ? ?7457 ?0.0 ?0.1 ? 3004 ? 764 pts/2 ? ?S+ ? 11:12 ?
> 0:00 grep
>> apache2
>> root ? ? 22343 ?0.0 ?1.0 ?13728 ?5336 ? ? ? ? ?Ss ? May14 ?
> 0:26
>> /usr/sbin/apache2 -k start
>> root ? ? 22346 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22347 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22348 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22349 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22350 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22383 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22392 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22407 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:04
>> /usr/sbin/apache2 -k start
>> root ? ? 22716 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:03
>> /usr/sbin/apache2 -k start
>> root ? ? 23356 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14 ?
> 0:03
>> /usr/sbin/apache2 -k start

From graham.dumpleton at gmail.com  Fri May 15 06:35:59 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri May 15 06:36:09 2009
Subject: [mod_python] Multiple Interpreters mod_python optimization
In-Reply-To: <52aaf865eafe5fd2fa19303337121a16@skolesys.dk>
References: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
	<88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>
	<52aaf865eafe5fd2fa19303337121a16@skolesys.dk>
Message-ID: <88e286470905150335g17fa9125lf4332994ff8ea1@mail.gmail.com>

2009/5/15 zsi <zsi@skolesys.dk>:
>
>
> On Fri, 15 May 2009 20:11:38 +1000, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>> 2009/5/15 zsi <zsi@skolesys.dk>:
>>> Hey *
>>>
>>> I am creating a SOAP service that is based on ZSI and mod_python. I have
>>> the service running and it works, but it's not performing well, so I
>> made
>>> did some output to the syslog from inside the handler:
>>>
>>> reloadchecker.py:
>>> ----------------
>>> testvar=1
>>> ----------------
>>>
>>> My handler:
>>> ----------------
>>> import capa0_9.soap.sessionservice as sessionservice
>>> import capa0_9.soap.zsi_handler as zsi_handler
>>> from mod_python import apache
>>> import capa0_9.tools.log as log
>>> import os,reloadchecker
>>>
>>> mod = __import__('encodings.utf_8', globals(), locals(), '*')
>>> mod = __import__('encodings.utf_16_be', globals(), locals(), '*')
>>>
>>> def handler(req):
>>>
>>> ? ? ? ?"""
>>> ? ? ? ?The PythonHandler entry-point. This function must be present
>> in
>>> order to have mod_apache dispatch a python operation.
>>> ? ? ? ?"""
>>> ? ? ? ?zsi_handler.AsHandler(modules=(sessionservice,), request=req)
>>> ? ? ? ?log.debug("REQUESTINFO: Interpreter Name = %s" %
>>> str(req.interpreter))
>>> ? ? ? ?log.debug("REQUESTINFO: os.getpid() ? ? ?= %s" %
>> str(os.getpid()))
>>> ? ? ? ?log.debug("REQUESTINFO: reloadchecker ? ?= %s" %
>>> str(reloadchecker.testvar))
>>> ? ? ? ?reloadchecker.testvar += 1
>>> ? ? ? ?return apache.OK
>>> -----------------
>>>
>>> I log the interpreter name, which according to section 4.1 should make
>>> mod_python boost performance by keeping the interpreter alive as long as
>>> the apache server processes. And I log the pid of the interpreter. As it
>> is
>>> clear to see in the output below a new pid is spawned each time, it does
>>> not reuse the interpreter and therefore, I guess, it has to reload
>>> everything for each request. Note that i also list the apache2 processes
>>> before and after I bombard the server with requests, it shows that the
>> same
>>> processes are running before and after. I also made a dummy module
>>> "reloadchecker" that contains one variable "testvar". If it is reloaded
>> the
>>> variable is initialized to 1, if it was already loaded it should be
>>> increased by 1 for each request.
>>>
>>> Am I missing something,
>
> Thanks for the quick response.
>
>>
>> Yes.
>>
>>> shouldn't mod_python optimize performance by
>>> reusing previously loaded modules from earlier requests?
>>
>> Only if the request is actually handled by the same process. Since
>> Apache is a multiprocess web server, the requests could be handled by
>> any of the processes. You will obviously incur the load cost of the
>> interpreter and application for the first request against each
>> processor. Subsequent requests for a process should use the fact that
>> stuff is already loaded. You likely didn't do enough requests to have
>> touched all process and have a request actually go back to a process
>> which was already used.
>>
>> Read:
>>
>>
>>
> http://www.dscpl.com.au/wiki/ModPython/Articles/TheProcessInterpreterModel
>>
>> Since you appear to be using prefork MPM, also read about the dangers
>> of prefork MPM in:
>>
>>
>>
> http://blog.dscpl.com.au/2009/03/load-spikes-and-excessive-memory-usage.html
>>
>> If you want better control over how many processes are used for your
>> application and particularly so you can limit number to small fixed
>> number and/or use threading as well, then look at mod_wsgi daemon mode
>> instead.
>>
>> BTW, the process IDs in your 'ps' output don't even match what your
>> Python code is producing. Looks like you aren't even talking to the
>> same Apache instance.
> I wasn't expecting them to match. The process id's from the python code
> are the interpreter's pid not the apaches. What I wanted to show by
> that was that it is stille the same apache processes (8 of them) but
> I have 18 different interpreter process ID's. So it is not because I
> hit a new apache process every time.

Did you read the document I told you to read about process/interpreter
model of Apache/mod_python? As well as the blog entry?

The Python sub interpreters run in the Apache child processes. Thus
the process IDs from your Python code must have some overlap with the
Apache processes you listed.

Apache/mod_python does not create special Python interpreter processes.

Graham

>> So, try and validate your configuration and whether you might have
>> multiple Apache installations running. Look for 'httpd' processes as
>> well.
>
> Here is the server pool configuration (standard ubuntu mpm-prefork
> configuration):
> ? ?StartServers ? ? ? ? ?5
> ? ?MinSpareServers ? ? ? 5
> ? ?MaxSpareServers ? ? ?10
> ? ?MaxClients ? ? ? ? ?150
> ? ?MaxRequestsPerChild ? 0
>
> Best regards
> Jakob Simon-Gaarde
>
>>> mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
>>> mikrov ? ?7396 ?0.0 ?0.1 ? 3004 ? 764 pts/2 ? ?S+ ? 11:11
>> 0:00 grep
>>> apache2
>>> root ? ? 22343 ?0.0 ?1.0 ?13728 ?5336 ? ? ? ? ?Ss ? May14
>> 0:26
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22346 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22347 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22348 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22349 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22350 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22383 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22392 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22407 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22716 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:03
>>> /usr/sbin/apache2 -k start
>>> root ? ? 23356 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:03
>>> /usr/sbin/apache2 -k start
>>>
>>> mikrov@capa-server:/srv/capa/www/0.9/sessionservice$ sudo tail -f
>>> /var/log/syslog | grep REQUESTINFO
>>> May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7953
>>>
>>> May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>>
>>> May 15 11:52:03 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:03 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7954
>>>
>>> May 15 11:52:03 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>>
>>> May 15 11:52:04 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:04 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7955
>>>
>>> May 15 11:52:04 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>>
>>> May 15 11:52:05 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:05 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7959
>>>
>>> May 15 11:52:05 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>>
>>> May 15 11:52:06 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:06 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7960
>>>
>>> May 15 11:52:06 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>>
>>> May 15 11:52:07 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:07 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7961
>>>
>>> May 15 11:52:07 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7963
>>> May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:08 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:08 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7964
>>> May 15 11:52:08 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:09 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:09 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7966
>>> May 15 11:52:09 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:10 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:10 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7968
>>> May 15 11:52:10 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:11 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:11 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7969
>>> May 15 11:52:11 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:12 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:12 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7970
>>> May 15 11:52:12 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7972
>>> May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:13 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:13 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7973
>>> May 15 11:52:13 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:14 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:14 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7974
>>> May 15 11:52:14 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:15 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:15 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7976
>>> May 15 11:52:15 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>> May 15 11:52:16 capa-server capa: REQUESTINFO: Interpreter Name =
>>> /srv/capa/www/0.9/sessionservice/
>>> May 15 11:52:16 capa-server capa: REQUESTINFO: os.getpid() ? ? ?=
>> 7977
>>> May 15 11:52:16 capa-server capa: REQUESTINFO: reloadchecker ? ?= 1
>>>
>>> mikrov@capa-server:/srv/capa/www/0.9$ sudo ps aux | grep apache2
>>> mikrov ? ?7457 ?0.0 ?0.1 ? 3004 ? 764 pts/2 ? ?S+ ? 11:12
>> 0:00 grep
>>> apache2
>>> root ? ? 22343 ?0.0 ?1.0 ?13728 ?5336 ? ? ? ? ?Ss ? May14
>> 0:26
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22346 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22347 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22348 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22349 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22350 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22383 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22392 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22407 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:04
>>> /usr/sbin/apache2 -k start
>>> root ? ? 22716 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:03
>>> /usr/sbin/apache2 -k start
>>> root ? ? 23356 ?0.0 ?0.6 ?13728 ?3136 ? ? ? ? ?S ? ?May14
>> 0:03
>>> /usr/sbin/apache2 -k start
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From zsi at skolesys.dk  Fri May 15 07:41:36 2009
From: zsi at skolesys.dk (zsi)
Date: Fri May 15 07:35:00 2009
Subject: =?UTF-8?Q?=5Bmod=5Fpython=5D=20Multiple=20Interpreters=20mod=5Fpython?=
	=?UTF-8?Q?=20optimization?=
In-Reply-To: <88e286470905150335g17fa9125lf4332994ff8ea1@mail.gmail.com>
References: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
	<88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>
	<52aaf865eafe5fd2fa19303337121a16@skolesys.dk>
	<88e286470905150335g17fa9125lf4332994ff8ea1@mail.gmail.com>
Message-ID: <a48a7a26e17a88dd17e2b1b80bc49a10@skolesys.dk>

On Fri, 15 May 2009 20:35:59 +1000, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
>>> BTW, the process IDs in your 'ps' output don't even match what your
>>> Python code is producing. Looks like you aren't even talking to the
>>> same Apache instance.
>> I wasn't expecting them to match. The process id's from the python code
>> are the interpreter's pid not the apaches. What I wanted to show by
>> that was that it is stille the same apache processes (8 of them) but
>> I have 18 different interpreter process ID's. So it is not because I
>> hit a new apache process every time.
> 
> Did you read the document I told you to read about process/interpreter
> model of Apache/mod_python? As well as the blog entry?
> 
> The Python sub interpreters run in the Apache child processes. Thus
> the process IDs from your Python code must have some overlap with the
> Apache processes you listed.
> 
> Apache/mod_python does not create special Python interpreter processes.

Yes, I read it and it makes it even more odd that I get a new pid everytime
I call os.getpid(), that doesn't match the apache processes.

Best regards
Jakob Simon-Gaarde
From graham.dumpleton at gmail.com  Fri May 15 07:40:46 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri May 15 07:40:58 2009
Subject: [mod_python] Multiple Interpreters mod_python optimization
In-Reply-To: <a48a7a26e17a88dd17e2b1b80bc49a10@skolesys.dk>
References: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
	<88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>
	<52aaf865eafe5fd2fa19303337121a16@skolesys.dk>
	<88e286470905150335g17fa9125lf4332994ff8ea1@mail.gmail.com>
	<a48a7a26e17a88dd17e2b1b80bc49a10@skolesys.dk>
Message-ID: <88e286470905150440t7bb8926dj388535975cd11d80@mail.gmail.com>

2009/5/15 zsi <zsi@skolesys.dk>:
> On Fri, 15 May 2009 20:35:59 +1000, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>>>> BTW, the process IDs in your 'ps' output don't even match what your
>>>> Python code is producing. Looks like you aren't even talking to the
>>>> same Apache instance.
>>> I wasn't expecting them to match. The process id's from the python code
>>> are the interpreter's pid not the apaches. What I wanted to show by
>>> that was that it is stille the same apache processes (8 of them) but
>>> I have 18 different interpreter process ID's. So it is not because I
>>> hit a new apache process every time.
>>
>> Did you read the document I told you to read about process/interpreter
>> model of Apache/mod_python? As well as the blog entry?
>>
>> The Python sub interpreters run in the Apache child processes. Thus
>> the process IDs from your Python code must have some overlap with the
>> Apache processes you listed.
>>
>> Apache/mod_python does not create special Python interpreter processes.
>
> Yes, I read it and it makes it even more odd that I get a new pid everytime
> I call os.getpid(), that doesn't match the apache processes.

Have you run 'ps' to find out what processes are using those pids and
whether they exist after the requests are done.

If need be, put a time.sleep() call after you log the pid to give you
time to do the 'ps', just in case they are transient as a result of
Apache configuration, or because they are crashing at end of request.

Also ensure you have set:

  PythonDebug On

to enabled stuff in Apache error logs about mod_python loading of files.

Graham
From zsi at skolesys.dk  Fri May 15 08:24:40 2009
From: zsi at skolesys.dk (zsi)
Date: Fri May 15 08:18:02 2009
Subject: =?UTF-8?Q?=5Bmod=5Fpython=5D=20Multiple=20Interpreters=20mod=5Fpython?=
	=?UTF-8?Q?=20optimization?=
In-Reply-To: <88e286470905150440t7bb8926dj388535975cd11d80@mail.gmail.com>
References: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
	<88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>
	<52aaf865eafe5fd2fa19303337121a16@skolesys.dk>
	<88e286470905150335g17fa9125lf4332994ff8ea1@mail.gmail.com>
	<a48a7a26e17a88dd17e2b1b80bc49a10@skolesys.dk>
	<88e286470905150440t7bb8926dj388535975cd11d80@mail.gmail.com>
Message-ID: <b11cb9ab7f6cd0b572c4493aa0a7b3bf@skolesys.dk>



On Fri, 15 May 2009 21:40:46 +1000, Graham Dumpleton
<graham.dumpleton@gmail.com> wrote:
> 2009/5/15 zsi <zsi@skolesys.dk>:
>> On Fri, 15 May 2009 20:35:59 +1000, Graham Dumpleton
>> <graham.dumpleton@gmail.com> wrote:
>>>>> BTW, the process IDs in your 'ps' output don't even match what your
>>>>> Python code is producing. Looks like you aren't even talking to the
>>>>> same Apache instance.
>>>> I wasn't expecting them to match. The process id's from the python
code
>>>> are the interpreter's pid not the apaches. What I wanted to show by
>>>> that was that it is stille the same apache processes (8 of them) but
>>>> I have 18 different interpreter process ID's. So it is not because I
>>>> hit a new apache process every time.
>>>
>>> Did you read the document I told you to read about process/interpreter
>>> model of Apache/mod_python? As well as the blog entry?
>>>
>>> The Python sub interpreters run in the Apache child processes. Thus
>>> the process IDs from your Python code must have some overlap with the
>>> Apache processes you listed.
>>>
>>> Apache/mod_python does not create special Python interpreter processes.
>>
>> Yes, I read it and it makes it even more odd that I get a new pid
> everytime
>> I call os.getpid(), that doesn't match the apache processes.
> 
> Have you run 'ps' to find out what processes are using those pids and
> whether they exist after the requests are done.
> 
> If need be, put a time.sleep() call after you log the pid to give you
> time to do the 'ps', just in case they are transient as a result of
> Apache configuration, or because they are crashing at end of request.
> 
> Also ensure you have set:
> 
>   PythonDebug On
> 
> to enabled stuff in Apache error logs about mod_python loading of files.

That was a very good idea, and you are right it is apache processes, just
not the ones started initially by the main apache process. So I guess the
question is what I did wrong in the apache configuration since new apache
servers are spawned each time a request comes in - and terminated right
away. Of course I know this will happen as the load increases (if I don't
change the Min/MaxSpareServers) but why doesn't it use the ones already
there before starting new ones?

May 15 14:08:55 capa-server capa: REQUESTINFO: ps aux|grep pid   = capa
8981  0.0  2.3  20288 11972 ? S 14:08 0:00 /usr/sbin/apache2 -k start 
May 15 14:08:55 capa-server capa: REQUESTINFO: Interpreter Name  =
/srv/capa/www/0.9/sessionservice/
May 15 14:08:55 capa-server capa: REQUESTINFO: os.getpid()       = 8982
May 15 14:08:55 capa-server capa: REQUESTINFO: ps aux|grep pid   = capa
8982 66.0  2.2  20288 11844 ? S 14:08 0:00 /usr/sbin/apache2 -k start 
May 15 14:08:56 capa-server capa: REQUESTINFO: Interpreter Name  =
/srv/capa/www/0.9/sessionservice/
May 15 14:08:56 capa-server capa: REQUESTINFO: os.getpid()       = 8987
May 15 14:08:56 capa-server capa: REQUESTINFO: ps aux|grep pid   = capa
8987 78.0  2.5  20808 13028 ? S 14:08 0:00 /usr/sbin/apache2 -k start 
May 15 14:08:57 capa-server capa: REQUESTINFO: Interpreter Name  =
/srv/capa/www/0.9/sessionservice/
May 15 14:08:57 capa-server capa: REQUESTINFO: os.getpid()       = 8997
May 15 14:08:57 capa-server capa: REQUESTINFO: ps aux|grep pid   = capa
8997 74.0  2.3  20288 11972 ? S 14:08 0:00 /usr/sbin/apache2 -k start

Best regards
Jakob Simon-Gaarde
From graham.dumpleton at gmail.com  Sat May 16 07:11:56 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sat May 16 07:12:05 2009
Subject: [mod_python] Multiple Interpreters mod_python optimization
In-Reply-To: <b11cb9ab7f6cd0b572c4493aa0a7b3bf@skolesys.dk>
References: <9b74ad98b461798da8f638bae44e1105@skolesys.dk>
	<88e286470905150311n6421baa9x35342c06be9f28ec@mail.gmail.com>
	<52aaf865eafe5fd2fa19303337121a16@skolesys.dk>
	<88e286470905150335g17fa9125lf4332994ff8ea1@mail.gmail.com>
	<a48a7a26e17a88dd17e2b1b80bc49a10@skolesys.dk>
	<88e286470905150440t7bb8926dj388535975cd11d80@mail.gmail.com>
	<b11cb9ab7f6cd0b572c4493aa0a7b3bf@skolesys.dk>
Message-ID: <88e286470905160411p3c0fbe6el7bccfd1ce991b82b@mail.gmail.com>

I'd be doing a really thorough check of your Apache configuration
files to double check that you don't have MaxRequestPerChild set in an
unlikely spot somewhere with it set to 1. You may have done this to
force source code reloading on every request and forgotten about it.

Beyond that, I would start dumping out os.getppid() and verify that
the parent process is actually the main Apache parent/monitor process
for the instance you are seeing run by 'ps'.

Also use the 'mod_python.apache.mpm_query()' function to find out
value of AP_MPMQ_MAX_REQUESTS_DAEMON. See:

  http://www.modpython.org/live/current/doc-html/pyapi-apmeth.html

Also diligently check your Apache error log files for instances of
Segmentation Fault messages. Plus also pay close attention to those
messages from mod_python about when source code is being reloaded,
ie., into what process (pid) and what sub interpreter.

Graham

2009/5/15 zsi <zsi@skolesys.dk>:
>
>
> On Fri, 15 May 2009 21:40:46 +1000, Graham Dumpleton
> <graham.dumpleton@gmail.com> wrote:
>> 2009/5/15 zsi <zsi@skolesys.dk>:
>>> On Fri, 15 May 2009 20:35:59 +1000, Graham Dumpleton
>>> <graham.dumpleton@gmail.com> wrote:
>>>>>> BTW, the process IDs in your 'ps' output don't even match what your
>>>>>> Python code is producing. Looks like you aren't even talking to the
>>>>>> same Apache instance.
>>>>> I wasn't expecting them to match. The process id's from the python
> code
>>>>> are the interpreter's pid not the apaches. What I wanted to show by
>>>>> that was that it is stille the same apache processes (8 of them) but
>>>>> I have 18 different interpreter process ID's. So it is not because I
>>>>> hit a new apache process every time.
>>>>
>>>> Did you read the document I told you to read about process/interpreter
>>>> model of Apache/mod_python? As well as the blog entry?
>>>>
>>>> The Python sub interpreters run in the Apache child processes. Thus
>>>> the process IDs from your Python code must have some overlap with the
>>>> Apache processes you listed.
>>>>
>>>> Apache/mod_python does not create special Python interpreter processes.
>>>
>>> Yes, I read it and it makes it even more odd that I get a new pid
>> everytime
>>> I call os.getpid(), that doesn't match the apache processes.
>>
>> Have you run 'ps' to find out what processes are using those pids and
>> whether they exist after the requests are done.
>>
>> If need be, put a time.sleep() call after you log the pid to give you
>> time to do the 'ps', just in case they are transient as a result of
>> Apache configuration, or because they are crashing at end of request.
>>
>> Also ensure you have set:
>>
>> ? PythonDebug On
>>
>> to enabled stuff in Apache error logs about mod_python loading of files.
>
> That was a very good idea, and you are right it is apache processes, just
> not the ones started initially by the main apache process. So I guess the
> question is what I did wrong in the apache configuration since new apache
> servers are spawned each time a request comes in - and terminated right
> away. Of course I know this will happen as the load increases (if I don't
> change the Min/MaxSpareServers) but why doesn't it use the ones already
> there before starting new ones?
>
> May 15 14:08:55 capa-server capa: REQUESTINFO: ps aux|grep pid ? = capa
> 8981 ?0.0 ?2.3 ?20288 11972 ? S 14:08 0:00 /usr/sbin/apache2 -k start
> May 15 14:08:55 capa-server capa: REQUESTINFO: Interpreter Name ?=
> /srv/capa/www/0.9/sessionservice/
> May 15 14:08:55 capa-server capa: REQUESTINFO: os.getpid() ? ? ? = 8982
> May 15 14:08:55 capa-server capa: REQUESTINFO: ps aux|grep pid ? = capa
> 8982 66.0 ?2.2 ?20288 11844 ? S 14:08 0:00 /usr/sbin/apache2 -k start
> May 15 14:08:56 capa-server capa: REQUESTINFO: Interpreter Name ?=
> /srv/capa/www/0.9/sessionservice/
> May 15 14:08:56 capa-server capa: REQUESTINFO: os.getpid() ? ? ? = 8987
> May 15 14:08:56 capa-server capa: REQUESTINFO: ps aux|grep pid ? = capa
> 8987 78.0 ?2.5 ?20808 13028 ? S 14:08 0:00 /usr/sbin/apache2 -k start
> May 15 14:08:57 capa-server capa: REQUESTINFO: Interpreter Name ?=
> /srv/capa/www/0.9/sessionservice/
> May 15 14:08:57 capa-server capa: REQUESTINFO: os.getpid() ? ? ? = 8997
> May 15 14:08:57 capa-server capa: REQUESTINFO: ps aux|grep pid ? = capa
> 8997 74.0 ?2.3 ?20288 11972 ? S 14:08 0:00 /usr/sbin/apache2 -k start
>
> Best regards
> Jakob Simon-Gaarde
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From manikandank at tce.edu  Tue May 26 05:19:00 2009
From: manikandank at tce.edu (K.Manikandan)
Date: Tue May 26 05:19:34 2009
Subject: [mod_python] Dependency Resolving
Message-ID: <4686.10.2.1.1.1243329540.squirrel@mail.tcenet>

Hi everyone,
We are trying to install mod_python in redhat el5.
the general command yum install mod_python is not working.

So, we gave the actual package name as

 yum install mod_python-3.2.8-3.1.i386.rpm

This command reveals that the dependencies are not resolved. How should I
proceed? Or where can I get the whole package where we can find package
with all the dependencies resolved???

Regards,
K.Manikandan


-----------------------------------------
This email was sent using TCEMail Service.
Thiagarajar College of Engineering
Madurai - 625015 (India)

From graham.dumpleton at gmail.com  Tue May 26 05:47:35 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Tue May 26 05:47:43 2009
Subject: [mod_python] Dependency Resolving
In-Reply-To: <4686.10.2.1.1.1243329540.squirrel@mail.tcenet>
References: <4686.10.2.1.1.1243329540.squirrel@mail.tcenet>
Message-ID: <88e286470905260247m34411507vb1b097abdb39e25f@mail.gmail.com>

2009/5/26 K.Manikandan <manikandank@tce.edu>:
> Hi everyone,
> We are trying to install mod_python in redhat el5.
> the general command yum install mod_python is not working.
>
> So, we gave the actual package name as
>
> ?yum install mod_python-3.2.8-3.1.i386.rpm
>
> This command reveals that the dependencies are not resolved. How should I
> proceed? Or where can I get the whole package where we can find package
> with all the dependencies resolved???

FYI. That version of mod_python is quite ancient and has many issues
with it. You should really strive to use mod_python 3.3.1 if you must
use mod_python at all. You might therefore have to consider compiling
from source code yourself.

Graham

From john.lister at kickstone.com  Fri May 29 09:44:09 2009
From: john.lister at kickstone.com (John Lister)
Date: Fri May 29 09:44:40 2009
Subject: [mod_python] Mod_Python, multicore and concurrency
Message-ID: <4A1FE6A9.6080409@kickstone.com>

Hi i'm a newbie with mod_python and a quick search of google threw up no 
results..

I'm trying to run a fairly a python script under apache as an app server 
using mod_python. This is fairly cpu bound so i'd like to run on a multi 
processor/core setup (at least 8). I understand that because of the GIL 
i'd need multiple python processes to do this so i've set up apache with 
the pre-fork option.

However a quick test with a number of simultaneous requests shows 
(generally) only one apache process maxing out the cpu - i'd expect one 
per core. I would expect a python interpreter per apache process or is 
that a bad assumption? Or does mod_python place some other limit on things?

Thanks

JOHN
From svanheulen at gmail.com  Fri May 29 14:25:07 2009
From: svanheulen at gmail.com (Seth VanHeulen)
Date: Fri May 29 14:25:58 2009
Subject: [mod_python] Session deadlocking in Linux but not Windows
Message-ID: <ab891b7e0905291125u1e8ed3e7g520e0b411b56cc2@mail.gmail.com>

I hacked together a way of doing forms authentication with mod_python
and it's been working fine running on our Windows Server 2003 box but
now I'm trying to get it running on an Ubuntu 9.04 box and I'm having
troubles with what I think is the session getting deadlocked. It will
work once sometimes but if I close the browser and try the site again
apache doesn't respond it just sits there trying to load. No errors
show up in the apache logs and I don't know where to go from here to
troubleshoot.

Some info on my setup:

401 errors redirect to /login/auth.py/unauthorized
/login/ does NOT require a valid user
/ does require a valid user
/login/auth is added as a PythonAuthenHandler
/login/index.psp posts username and password to /login/auth.py/login

Here's the code in auth.py:

import sys
import ldap
from mod_python import apache
from mod_python import Session
from mod_python import util

_main_page = '/'
_login_form = '/login/'
_domain = 'something'

def authenhandler(req):
    sess = Session.Session(req)
    if sess.get('authorized') and sess.get('ipaddress') ==
req.connection.remote_addr[0]:
        sess.save()
        req.user = str(sess.get('username'))
        return apache.OK
    else:
        if not sess.is_new():
            sess.invalidate()
        return apache.HTTP_UNAUTHORIZED

def unauthorized(req):
    util.redirect(req, _login_form)

def login(req, username, password):
    sess = Session.Session(req)
    #if not sess.get('username', str(username)) == str(username):
    #    sess.invalidate()
    sess['username'] = str(username)
    sess['ipaddress'] = req.connection.remote_addr[0]
    #l = ldap.open(_domain)
    l = ldap.open(_domain)
    try:
        l.simple_bind_s(_domain + '\\' + str(username), str(password))
        cn = l.search_s('dc=something,dc=example,dc=com',
ldap.SCOPE_SUBTREE, '(sAMAccountName=' + str(username) + ')', ['cn'])
    except ldap.SERVER_DOWN:
        sess['authorized'] = False
        sess.save()
        util.redirect(req, _login_form + '?msg=server')
    except:
        sess['authorized'] = False
        sess.save()
        errorCode = sys.exc_info()[1][0]
        if not errorCode.get('info', '').find(' data 773,') == -1:
            util.redirect(req, _login_form + '?msg=expired')
        else:
            util.redirect(req, _login_form + '?msg=invalid')
    else:
        if cn:
            sess['authorized'] = True
            sess.save()
            util.redirect(req, _main_page)
        else:
            sess['authorized'] = False
            sess.save()
            util.redirect(req, _login_form + '?msg=invalid')

def logout(req):
    sess = Session.Session(req)
    sess.invalidate()
    util.redirect(req, _login_form + '?msg=logout')
From graham.dumpleton at gmail.com  Sat May 30 00:28:28 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sat May 30 00:28:38 2009
Subject: [mod_python] Mod_Python, multicore and concurrency
In-Reply-To: <4A1FE6A9.6080409@kickstone.com>
References: <4A1FE6A9.6080409@kickstone.com>
Message-ID: <88e286470905292128t24230ad4tef8101aba82c62ea@mail.gmail.com>

If you are using mod_python sessions at the same time, they will block
another request using same session at the same time. It can also block
other distinct sessions as well because of the limited number of
shared locks used to mediate global session locking.

Other than that guess, it is impossible to answer without know exactly
what your code does.

Graham

2009/5/29 John Lister <john.lister@kickstone.com>:
> Hi i'm a newbie with mod_python and a quick search of google threw up no
> results..
>
> I'm trying to run a fairly a python script under apache as an app server
> using mod_python. This is fairly cpu bound so i'd like to run on a multi
> processor/core setup (at least 8). I understand that because of the GIL i'd
> need multiple python processes to do this so i've set up apache with the
> pre-fork option.
>
> However a quick test with a number of simultaneous requests shows
> (generally) only one apache process maxing out the cpu - i'd expect one per
> core. I would expect a python interpreter per apache process or is that a
> bad assumption? Or does mod_python place some other limit on things?
>
> Thanks
>
> JOHN
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From john.lister at kickstone.com  Sun May 31 08:19:42 2009
From: john.lister at kickstone.com (John Lister)
Date: Sun May 31 08:20:09 2009
Subject: [mod_python] Mod_Python, multicore and concurrency
In-Reply-To: <88e286470905292128t24230ad4tef8101aba82c62ea@mail.gmail.com>
References: <4A1FE6A9.6080409@kickstone.com>
	<88e286470905292128t24230ad4tef8101aba82c62ea@mail.gmail.com>
Message-ID: <4A2275DE.4050704@kickstone.com>



> If you are using mod_python sessions at the same time, they will block
> another request using same session at the same time. It can also block
> other distinct sessions as well because of the limited number of
> shared locks used to mediate global session locking.
>
> Other than that guess, it is impossible to answer without know exactly
> what your code does.
>   
Also forgot to say i've looked at mod_wsgi which seems to scale more 
like i'd expect as you also hint at in your blog posts

Thanks

JOHN
From graham.dumpleton at gmail.com  Sun May 31 20:58:05 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Sun May 31 20:58:13 2009
Subject: [mod_python] Mod_Python, multicore and concurrency
In-Reply-To: <4A2275B0.2050208@kickstone.com>
References: <4A1FE6A9.6080409@kickstone.com>
	<88e286470905292128t24230ad4tef8101aba82c62ea@mail.gmail.com>
	<4A2275B0.2050208@kickstone.com>
Message-ID: <88e286470905311758h33f40936v88dcad644e724b91@mail.gmail.com>

2009/5/31 John Lister <john.lister@kickstone.com>:
> Graham Dumpleton wrote:
>>
>> If you are using mod_python sessions at the same time, they will block
>> another request using same session at the same time. It can also block
>> other distinct sessions as well because of the limited number of
>> shared locks used to mediate global session locking.
>>
>
> Cheers, just noticed your blog and having a read about apache processes and
> mod_python. I still have a couple of questions - which may in part be due to
> my confusion:
> You blog states that the parent apache process initialises the python
> interpreter, does mod_python therefore run in the main apache process with a
> number of sub-interpreters and the child apache processes farm off requests
> to this one? Or does each child apache process get its own couple of a
> python interpreter - which is what i thought and other parts of your blog
> seem to suggest this.

The main Python interpreter is initialised within the parent. That is
inherited by child processes when Apache forks its child server
processes. Any additional sub interpreters as required, are then only
created within the context of the child server processes. All Python
request handling occurs in the child server processes.

> I'm not sure what you mean by session above.

I specifically mean if you were using the Session class provided with
mod_python directly, or indirectly by using 'session' attribute in a
PSP page.

> For example say i have a quad
> core system with the default apache settings for pre-fork and i make 4
> distinct requests for a python page at the same time, am i wrong to think
> that 4 child processes will run (ideally one per core) . At the moment i see
> a spike on all the cores for the first request, but if i repeat the above,
> only one core seems to be maxed out at 100%.

All I can suggest to try and debug relationships between requests by
printing out to the error log the time of the request, the os.getpid()
of the process handling the request and the Apache req.connection.id
of the inbound connection. The latter to ascertain whether keep alive
connections may be part of the issue.

Graham

>> Other than that guess, it is impossible to answer without know exactly
>> what your code does.
>>
>
> The code is relatively straightforward in that it does a series of cpu bound
> calculations before returning the result. These generally take in the order
> of seconds rather than milliseconds which is why i'd like to spread them
> across multiple cores, the handler is something like this:
>
> def handler(req):
> ? html=generateHtml()
> ? req.write(html)
> ? return apache.OK
>
> Thanks
>
> JOHN
>
>

