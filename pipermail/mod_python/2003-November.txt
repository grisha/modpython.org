From bert at tela.com  Sat Nov  1 09:00:59 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 21:47:51 2004
Subject: [mod_python] ImportError
Message-ID: <000201c3a092$68dbcad0$0301a8c0@janine>

Hello-

I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
run the "hello.py/say"
example and the following message appears in apache's 'error_log':

....

File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
import_module
   f, p, d = imp.find_module(parts[i],path)
[Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
mod_python.publisher: ImportError: No module named index


Currently I'm trying

Apache 2.047
Python 2.3.2
mod_python 3.1.2b

but I've gotten same result with combintaions of mod_python 3.0.3, python
2.2.

"hello.py" runs just fine with out-of-redhat box apache/mod_python, and
there's no apparent module named "index" there.

Bert Hughes


From grisha at modpython.org  Sat Nov  1 14:41:44 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ImportError
In-Reply-To: <000201c3a092$68dbcad0$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
Message-ID: <20031101144111.L33051@onyx.ispol.com>


What is the URL you are accessing, what is the relevant Apache config, and
what's in hello.py?

Grisha

On Sat, 1 Nov 2003, Bert Hughes wrote:

> Hello-
>
> I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
> run the "hello.py/say"
> example and the following message appears in apache's 'error_log':
>
> ....
>
> File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
> import_module
>    f, p, d = imp.find_module(parts[i],path)
> [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> mod_python.publisher: ImportError: No module named index
>
>
> Currently I'm trying
>
> Apache 2.047
> Python 2.3.2
> mod_python 3.1.2b
>
> but I've gotten same result with combintaions of mod_python 3.0.3, python
> 2.2.
>
> "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> there's no apparent module named "index" there.
>
> Bert Hughes
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Sat Nov  1 20:41:55 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
Message-ID: <3FA40C83.5050502@krap.dk>

Hi.

I am toying around with mod_python on a gentoo-linux system. Prior I 
used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the 
beta from source.

This is what I wish :
Every request is handled by the same python-handler for the virtual 
domain. I am currently playing around and creating my own handler in the 
process.
It has worked before, with the following relevant parts of my httpd.conf 
(be aware, internal test server so a lot off things are just made 
simple, not secure/right):

NameVirtualHost *
<Directory "/www/tweetie">
        SetHandler python-program
        PythonHandler site
        PythonAuthenHandler site
        PythonDebug On
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        Allow from all
        AuthType Basic
        AuthName "Restricted Area"
        require valid-user
</Directory>
<VirtualHost *>
        ServerName tweetie
        DocumentRoot /www/tweetie
</VirtualHost>

But now, when I browse to "http://tweetie/" i get a directory listning 
instead of the python script... If I write anything after the trailing 
slash, everything works fine.

Can you tell me, what I did wrong and how to fix it ?

Tia

Svenne Krap

From bert at tela.com  Sat Nov  1 15:24:23 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com>
Message-ID: <003301c3a0be$cad54230$0301a8c0@janine>



Apache2 conf is:

LoadModule python_module modules/mod_python.so

<Directory /usr/local/apache2/htdocs/python>

SetHandler python-program

PythonHandler mod_python.publisher

</Directory>



hello.py is

>>>

def say(what="Nothing"):
    return "I am saying %s" % what

if __name__ == '__main__':
    print say('At the commandline!')

>>>>>



and it is in /usr/local/apache2/htdocs/python.

So the url is"     http:/192.168.1.1/python/hello.py/say

Thanks

Bert

----- Original Message ----- 
From: "Gregory (Grisha) Trubetskoy" <grisha@modpython.org>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Saturday, November 01, 2003 1:41 PM
Subject: Re: [mod_python] ImportError


>
> What is the URL you are accessing, what is the relevant Apache config, and
> what's in hello.py?
>
> Grisha
>
> On Sat, 1 Nov 2003, Bert Hughes wrote:
>
> > Hello-
> >
> > I've been attempting to upgrade my Apache/mod_python setup w/o success.
I
> > run the "hello.py/say"
> > example and the following message appears in apache's 'error_log':
> >
> > ....
> >
> > File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493,
in
> > import_module
> >    f, p, d = imp.find_module(parts[i],path)
> > [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> > mod_python.publisher: ImportError: No module named index
> >
> >
> > Currently I'm trying
> >
> > Apache 2.047
> > Python 2.3.2
> > mod_python 3.1.2b
> >
> > but I've gotten same result with combintaions of mod_python 3.0.3,
python
> > 2.2.
> >
> > "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> > there's no apparent module named "index" there.
> >
> > Bert Hughes
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
>


From stian at soiland.no  Sun Nov  2 17:24:17 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] Re: ImportError
In-Reply-To: <003301c3a0be$cad54230$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
Message-ID: <20031102162417.GB32650@itea.ntnu.no>

On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From bert at tela.com  Sun Nov  2 10:50:54 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] Re: ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
	<20031102162417.GB32650@itea.ntnu.no>
Message-ID: <000701c3a161$7bfe5130$0301a8c0@janine>

This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes


----- Original Message ----- 
From: "Stian S?iland" <stian@soiland.no>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Sunday, November 02, 2003 10:24 AM
Subject: Re: ImportError


On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]



From mike at mikesclutter.com  Sun Nov  2 16:18:44 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <200311021618.45341.mike@mikesclutter.com>

All,

I have been using mod_python for over two years now, and since I first 
started, I've been adding little utility libraries here and there. I now have 
one (more or less) integrated library that supports several different things:

- PHP Style embedded python in HTML, with page caching.
    Documents with embedded python can be parsed, compiled, and cached in 
    memory that is limited by a global administrative setting on how much 
    cache mem to use. Pages are swapped out based on use. Your basic .psp 
    page looks something like this:

    #include some_header.psp
    <html><body>
    <?
    x = 1
    print "There's no language like Python"
    ?>
    <p>Shorthand printing of a variable/expression
    x=<?$x?>
    </body>
    </html>

- Shared database connections. There is a simple class which wraps the DBA API 
  connection objects for MySQL, PostgreSQL, and SAPDB. It just adds enough 
  code to transparently recover from a connection timeout.

- Session management. This includes support for
  - automatically generating session_ids for clients.
  - Authentication from a database (assigning a user_id to a session_id) and 
    maintaining it in a sessions table.
  - storing state to a database (mysql/postgresql) or to browser. State is 
    stored using a modified pickle algorithm (as pickle at the time was 
    insecure). You can basically serialize all python primitives and 
    containers (dicts, lists), and can include custom classes if you derive 
    from a simple base class.
  - Simple access/manipulation of queries, POST headers, and cookies:
    Automatically parse, read, and generate all of the above. Set/unset 
    cookies. Cookies are automatically set using the virtual host domain --- 
    you don't have to worry about which domain or vhost you are working in. 
    Pickle data stuctures into cookies using base64. Query generation from 
    dict and urlencoding.
  - Util functions: Setting page expiry's, getting client info, generating 
    urls.

- Global and per virtual host configuration/resource pools. For each 
  virtual host, the core PSP handler will look for a module by that server 
  name in the Python path and import it into a virtual host namespace (if it 
  has not already been imported). This serves as a common resource pool for 
  that virtual host. When each page is processed, this pool is imported into 
  the global namespace in a dict call resource. The global resource pool is 
  first loaded on startup and vhost resources are added to it.

- HTML library. This includes support for
  - Form/widget generation. Basic HTML widgets can be created using simple 
    functions. Similar to Perl's cgi module. Generate listboxs from SQL.

- Support for OLTP gateways. There are two currently supported: SecurePay and 
  Authorize.net. This works on top of m2crypto.

There are other little bells and whistles here and there that I am sure I 
forgot about. Anyway, it has started to get too big for me to maintain on my 
own and I figure perhaps it can be helpful to others. It would be nice to 
have other good Python/mod_python programmers with more experience than me 
hacking on it.

The project is located at gila.sourceforge.net. Currently, I only have the 
code in CVS and a tarball on the home page (gila.sourceforge.net). I have 
very little documentation, but it's not hard to set up. The INSTALL should do 
it. If you have problems, email me.

Anyway, I hope some of you might find this useful.

Mike

From neel at mediapulse.com  Mon Nov  3 11:31:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>

Wow, this is pretty cool - I see requests for items like these a lot on
this list so it should be helpful to quite a few.  I have one question
though...

> - Shared database connections. There is a simple class which 
> wraps the DBA API 
>   connection objects for MySQL, PostgreSQL, and SAPDB. It 
> just adds enough 
>   code to transparently recover from a connection timeout.
> 

Does this work for 3.x and apache using a threaded mpm like worker?
I've had trouble getting MySQLdb to share connections/cursors from a
pool in the past since the thread level of the API is 1 (no threaded
cursors).  I had planned to work on this in the coming weeks, but no
since re-inventing the wheel =)

Mike

From gdamjan at mail.net.mk  Mon Nov  3 22:33:58 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <20031103213358.GA32187@legolas.on.net.mk>

> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)

well, share the db connection and not the cursors.
IMHO creating a MySQL cursor is not performance heavy...


-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From svenne at krap.dk  Mon Nov  3 22:42:40 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <20031102155855.P47316@onyx.ispol.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
Message-ID: <3FA6CBD0.3020902@krap.dk>

Quite simple right now.
- one handler-function (just printing out varios req-object attributes, 
nothing fancy until I have solved my problem.)
- one authenhandler-function (containing only "return apache.OK")

Btw. another possible sligt change in behavior, earlier, when having the 
require-valid user set and return apache.OK immediately no popup for 
password noticed (as far memory servers). Now it pops up, but anything 
is accepted (which is expected, the popping up of the password-dialog is 
not expeced....)

Svenne

Gregory (Grisha) Trubetskoy wrote:

>what's in the python script?
>
>Grisha
>
>On Sat, 1 Nov 2003, Svenne Krap wrote:
>
>  
>
>>Hi.
>>
>>I am toying around with mod_python on a gentoo-linux system. Prior I
>>used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>beta from source.
>>
>>This is what I wish :
>>Every request is handled by the same python-handler for the virtual
>>domain. I am currently playing around and creating my own handler in the
>>process.
>>It has worked before, with the following relevant parts of my httpd.conf
>>(be aware, internal test server so a lot off things are just made
>>simple, not secure/right):
>>
>>NameVirtualHost *
>><Directory "/www/tweetie">
>>        SetHandler python-program
>>        PythonHandler site
>>        PythonAuthenHandler site
>>        PythonDebug On
>>        Options Indexes FollowSymLinks MultiViews
>>        AllowOverride All
>>        Order allow,deny
>>        Allow from all
>>        AuthType Basic
>>        AuthName "Restricted Area"
>>        require valid-user
>></Directory>
>><VirtualHost *>
>>        ServerName tweetie
>>        DocumentRoot /www/tweetie
>></VirtualHost>
>>
>>But now, when I browse to "http://tweetie/" i get a directory listning
>>instead of the python script... If I write anything after the trailing
>>slash, everything works fine.
>>
>>Can you tell me, what I did wrong and how to fix it ?
>>
>>Tia
>>
>>Svenne Krap
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>    
>>
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031103/26a23c8d/attachment.htm
From neel at mediapulse.com  Mon Nov  3 16:59:13 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B50061764157776B97BD@johnson.mediapulse.net>

> well, share the db connection and not the cursors.
> IMHO creating a MySQL cursor is not performance heavy...
> 
My bad, I typed too quickly: MySQLdb is one connection handle one cursor
at a time.  From the spec level 1 threadsaftey reads "Threads may share
the module, but not connections."

Mike

From mike at mikesclutter.com  Mon Nov  3 18:10:09 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <200311031810.09219.mike@mikesclutter.com>

As long as you protect sessions within threads, there shouldn't be any 
problems. But the thread issues are really just passed on to the underlying 
database extension.

On Monday 03 November 2003 10:31 am, Michael C. Neel wrote:
> Wow, this is pretty cool - I see requests for items like these a lot on
> this list so it should be helpful to quite a few.  I have one question
> though...
>
> > - Shared database connections. There is a simple class which
> > wraps the DBA API
> >   connection objects for MySQL, PostgreSQL, and SAPDB. It
> > just adds enough
> >   code to transparently recover from a connection timeout.
>
> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From jpeterson at ainet.com  Mon Nov  3 20:25:41 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
Message-ID: <3FA72A45.3080602@ainet.com>

...
This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes
...

As a fellow struggling newbie, I can say that you were not blind.

Page 41, section 6.1.1 of the .pdf documentation illustrates a 
SetHandler and a URL that requires the .py extension.

I paste it below.  Sorry for the messed up formatting.

----------------------------------------------------
6.1.1 Introduction
To use the handler, you need the following lines in your configuration

<Directory /some/path}
     SetHandler python-program
     PythonHandler mod_python.publisher
</Directory>

This handler allows access to functions and variables within a module 
via URL?s. For example, if you have the following module, called ?hello.py?:

""" Publisher example """

     def say(req, what="NOTHING"):
     return "I am saying %s" % what

A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.

A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
saying hello?.
---------------------------------------------------

I would have hit exactly the same problem if I hadn't just seen your thread.

Jim


From jpeterson at ainet.com  Mon Nov  3 21:23:00 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] html docs?
Message-ID: <3FA737B4.4020500@ainet.com>

Hi,

A pointer to html docs for mod_python?  I can find only the pdf version. 
  I like to make a local web page with docs.  html works better for me.

I'd be looking for the 3.0.3 production stuff particularly, as well as 
the 3.1.x stuff.

Thanks,

Jim


From grisha at modpython.org  Tue Nov  4 00:41:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] html docs?
In-Reply-To: <3FA737B4.4020500@ainet.com>
References: <3FA737B4.4020500@ainet.com>
Message-ID: <20031104003808.S67824@onyx.ispol.com>



On Mon, 3 Nov 2003, Jim Peterson wrote:

> Hi,
>
> A pointer to html docs for mod_python?  I can find only the pdf version.

The html version of the docs should be included in the tgz file under
doc-html, and are also available online:

http://www.modpython.org/live/current/doc-html/


> I'd be looking for the 3.0.3 production stuff particularly, as well as
> the 3.1.x stuff.

The 3.1.2b html was not available online, but now it is:

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/

(Both of these links are also available off http://www.modpython.org/)

HTH,

Grisha
From elvelind at amandarin.se  Tue Nov  4 12:40:34 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
Message-ID: <3FA79032.9080300@amandarin.se>

What I want is to let every site in my apache server to have a own place 
to place the site specific modules.  how do I tell apache/mod_python to 
add this to the searchpath for each site. note that one site should only 
have access to it's own module directory.

sorry for the bad enlish. tierd and swedish ;)

/elvelind

amandarin.se

From davidf at sjsoft.com  Tue Nov  4 14:11:02 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
In-Reply-To: <3FA79032.9080300@amandarin.se>
References: <3FA79032.9080300@amandarin.se>
Message-ID: <3FA79756.70007@sjsoft.com>

elvelind grandin wrote:

> What I want is to let every site in my apache server to have a own 
> place to place the site specific modules.  how do I tell 
> apache/mod_python to add this to the searchpath for each site. note 
> that one site should only have access to it's own module directory.
>
> sorry for the bad enlish. tierd and swedish ;)
>
> /elvelind
>
> amandarin.se

Hi Elvelind

The path of the directory is added by default to the search path.
Alternatively you can use the PythonPath option in an .htaccess file in 
each directory
(See the documentation about this)

David


From grisha at modpython.org  Tue Nov  4 16:55:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311021618.45341.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
Message-ID: <20031104165310.X74839@onyx.ispol.com>



On Sun, 2 Nov 2003, Michael Owens wrote:

> - Session management. This includes support for

Just curious - does it do anything to make sure that requests for the same
session are processed sequentially (i.e. never at the same time)?

Grisha
From mike at mikesclutter.com  Tue Nov  4 22:34:13 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104165310.X74839@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
Message-ID: <200311042234.13877.mike@mikesclutter.com>

That's a very interesting question, and frankly I've never given it a lot of 
thought. 

If you are asking whether or not the same UA could post multiple initial, 
simultaneous requests and get multiple session ID's, then the answer is yes, 
it could. My assumption, however, is that the initial request from a UA would 
be limited to a single request --- long enough for a SID to be generated and 
set in a cookie, before the it made further requests. Once the cookie is set, 
you are in the clear.

If you are referring to this occurance after the SID, the same still applies: 
if the UA makes two simulaneous request, then there is no attempt to order or 
line them up. They both are processed indepently, without knowlege of each 
other. You could probably do this pretty easily and quickly with sleepycat, 
assuming all your requests are handled by a single server. It might be even 
easier with a RDBMS but it may have a performace impact.

Right now, I get session data from mysql/pgsql and it has no discernable 
impact, but more times that not, its a simple select statement which most 
likely comes out of the db cache. I imagine ordering would require select for 
update (blocking), update, and delete. Now you are blocking and hitting disk 
--- quite a bit slower.

What are the advantages/applications where you would want to have this? I 
haven't run into a need for it yet --- maybe credit card processing?

On Tuesday 04 November 2003 03:55 pm, Gregory (Grisha) Trubetskoy wrote:
> On Sun, 2 Nov 2003, Michael Owens wrote:
> > - Session management. This includes support for
>
> Just curious - does it do anything to make sure that requests for the same
> session are processed sequentially (i.e. never at the same time)?
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grisha at modpython.org  Wed Nov  5 00:05:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311042234.13877.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
	<200311042234.13877.mike@mikesclutter.com>
Message-ID: <20031104235444.W96643@onyx.ispol.com>


On Tue, 4 Nov 2003, Michael Owens wrote:

> That's a very interesting question, and frankly I've never given it a lot of
> thought.

I didn't give it a lot of thought either, until I came across the need for
it. This turned out a bit more complex than orginally anticipated (ok,
this is an understatement - it was a paint to get working), which is one
of the main motivators for providing session support as part of mod_python
(the latest beta has it).

The notion of a session always (or almost always) assumes that no more
than one request for a session is being processed at a time.  This is
default behaviour in JSP, for example, even though the users often don't
even know it.

If you have a session that, say increments a counter, then unless you have
some sort of a session locking mechanism, your numbers will increment, but
not always as expected :-)

Anyway - when I saw "session support" I thought there may be a chance you
knew something I didn't :-)

Grisha
From mike at mikesclutter.com  Wed Nov  5 08:57:27 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104235444.W96643@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<200311042234.13877.mike@mikesclutter.com>
	<20031104235444.W96643@onyx.ispol.com>
Message-ID: <200311050857.27585.mike@mikesclutter.com>

Up till now, I have always passed concurrency on to the database. If the 
session has made two concurrent requests altering the same data, then the 
state/value of the data is however the last request that commits the update 
left it. The data will be consistent, as the DB ensures consistent reads and 
writes as long as all work resides within a transaction. Counters also apply 
--- I just use a postgres sequence, or simulate one with mysql and tables. 
However, I am interested to see how you implemented this concurrancy.

In any case, I have always tried to use what was available, so most likely I 
will end up modifying my stuff to work atop the session support in 
mod_python.

On Tuesday 04 November 2003 11:05 pm, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 4 Nov 2003, Michael Owens wrote:
> > That's a very interesting question, and frankly I've never given it a lot
> > of thought.
>
> I didn't give it a lot of thought either, until I came across the need for
> it. This turned out a bit more complex than orginally anticipated (ok,
> this is an understatement - it was a paint to get working), which is one
> of the main motivators for providing session support as part of mod_python
> (the latest beta has it).

> The notion of a session always (or almost always) assumes that no more
> than one request for a session is being processed at a time.  This is
> default behaviour in JSP, for example, even though the users often don't
> even know it.
>
> If you have a session that, say increments a counter, then unless you have
> some sort of a session locking mechanism, your numbers will increment, but
> not always as expected :-)


> Anyway - when I saw "session support" I thought there may be a chance you
> knew something I didn't :-)
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From vmanera at manord.com  Wed Nov  5 15:56:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:47:52 2004
Subject: [mod_python] Strange behavior in using Session
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>

I'm starting to use new Session module and something strange sometimes
happens:<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

For debug purpose:

 

def test(req):

            sess = Session.DbmSession(req,timeout=7200) 

sys.stdout=req

            ...

            print 'et voila'

            .....

 

But sometime the output goes to another session on another workstation.

 

So, on the brouser of the programmer that called test was show all it does
except the print 'et voil?'

and on the brouser of a colleague that use Session to, magically appear 'et
voil?'

 

Any Idea

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031105/a8db8c76/attachment.htm
From grisha at modpython.org  Wed Nov  5 10:24:37 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Strange behavior in using Session
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
Message-ID: <20031105102248.B2712@onyx.ispol.com>


There is one sys.stdout per Python interpreter. So however many clients
connect to the server, they all share sys.stdout.

You should not modify it, but use req.write() instead, and all will work
fine.

Grisha

On Wed, 5 Nov 2003, Manera, Villiam wrote:

> I'm starting to use new Session module and something strange sometimes
> happens:<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
> For debug purpose:
>
>
>
> def test(req):
>
>             sess = Session.DbmSession(req,timeout=7200)
>
> sys.stdout=req
>
>             ...
>
>             print 'et voila'
>
>             .....
>
>
>
> But sometime the output goes to another session on another workstation.
>
>
>
> So, on the brouser of the programmer that called test was show all it does
> except the print 'et voil?'
>
> and on the brouser of a colleague that use Session to, magically appear 'et
> voil?'
>
>
>
> Any Idea
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From tpc at csua.berkeley.edu  Wed Nov  5 09:58:04 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:47:53 2004
Subject: [Tutor] Re: [mod_python] invalid literal for float int or long
 solved !
In-Reply-To: <20031027144335.Q39378@onyx.ispol.com>
Message-ID: <20031105095630.H73580-100000@localhost.name>


the former is correct, I assumed it was the latter but was proven wrong
when I reverted to my earlier MySQL SELECT statement (i.e., WHERE) and
switched the url and title and it worked just fine.

On Mon, 27 Oct 2003, Gregory (Grisha) Trubetskoy wrote:

>
> The first one is "url, title", the second is "title, url" - was that the
> problem, or was it the WHERE instead of INNER JOIN (which are same thing
> IIRC).
>
> Grisha
>
>
> On Mon, 27 Oct 2003 tpc@csua.berkeley.edu wrote:
>
> >
> > fingers crossed, here's hoping the bug doesn't rear its creepy head again,
> > can't really say wherefore the bug but I found a workaround, I changed the
> > basic MySQL statement below:
> >
> > SELECT url, title FROM URLs, URLs_WITH_MATCHES WHERE URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > to:
> >
> > SELECT title, url from URLs INNER JOIN URLs_WITH_MATCHES ON URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > and voila !  I am a complete idiot.
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Tutor maillist  -  Tutor@python.org
> http://mail.python.org/mailman/listinfo/tutor
>

From stian at soiland.no  Thu Nov  6 07:33:09 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <3FA72A45.3080602@ainet.com>
References: <3FA72A45.3080602@ainet.com>
Message-ID: <20031106063309.GD22316@itea.ntnu.no>

On 2003-11-04 05:25:41, Jim Peterson wrote:

> A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> 
> A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
> saying hello?.
> I would have hit exactly the same problem if I hadn't just seen your thread.

I have been wondering myself, too, what decides if .py is required or
not? I agree that with SetHandler, .py suffix should not be required (to
get nicer URLs), ALTHOUGH it should still work.

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From grisha at modpython.org  Thu Nov  6 12:01:59 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python]
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <20031106063309.GD22316@itea.ntnu.no>
References: <3FA72A45.3080602@ainet.com> <20031106063309.GD22316@itea.ntnu.no>
Message-ID: <20031106115148.R20173@onyx.ispol.com>


The publisher makes this decision. It's not a simple decision to make
because a dot also serves as package.module separator in Python, so the
publisher has to make an intelligent guess on what you meant.

E.g. if you have

AddHandler mod_python .py .blah

Wheh you ask for main.blah, the publisher will drop the blah as the
extension and import module main. If you ask for main.bleh, it will assume
you meant module bleh in package main.

If you have

SetHandler mod_python

Then there is no initial list of suffixes to look at. Actually there *is*
(imp.get_suffixes()), but the publisher wasn't doing it, so in the
particular instance sited earlier in this thread, the documentation was
right and the publisher was wrong, and I think we fixed it correctly this
time for the next release.

Grisha


On Thu, 6 Nov 2003, Stian [iso-8859-1] S?iland wrote:

> On 2003-11-04 05:25:41, Jim Peterson wrote:
>
> > A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> >
> > A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am
> > saying hello?.
> > I would have hit exactly the same problem if I hadn't just seen your thread.
>
> I have been wondering myself, too, what decides if .py is required or
> not? I agree that with SetHandler, .py suffix should not be required (to
> get nicer URLs), ALTHOUGH it should still work.
>
> --
> Stian S?iland               Work toward win-win situation. Win-lose
> Trondheim, Norway           is where you win and the other lose.
> http://www.soiland.no/      Lose-lose and lose-win are left as an
>                             exercise to the reader.  [Limoncelli/Hogan]
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Thu Nov  6 21:28:14 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FA77A98.8060502@sjsoft.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
Message-ID: <3FAAAEDE.3060804@krap.dk>

Ok, now I figured the one part out.

Having set Indexes and DirectoryIndex (for example to index.py), the 
file MUST exists (eventhough it might not be used) so my solution was 
simply to touch the file.

The second problem, having the http-authorization-dialog popping up is 
still not resolved... Any thoughts ?

Svenne

David Fraser wrote:

> Hi Sevenne
> Have you tried turning off the Indexes under Options?
> David
>
> Svenne Krap wrote:
>
>> Quite simple right now.
>> - one handler-function (just printing out varios req-object 
>> attributes, nothing fancy until I have solved my problem.)
>> - one authenhandler-function (containing only "return apache.OK")
>>
>> Btw. another possible sligt change in behavior, earlier, when having 
>> the require-valid user set and return apache.OK immediately no popup 
>> for password noticed (as far memory servers). Now it pops up, but 
>> anything is accepted (which is expected, the popping up of the 
>> password-dialog is not expeced....)
>>
>> Svenne
>>
>> Gregory (Grisha) Trubetskoy wrote:
>>
>>> what's in the python script?
>>>
>>> Grisha
>>>
>>> On Sat, 1 Nov 2003, Svenne Krap wrote:
>>>
>>>  
>>>
>>>> Hi.
>>>>
>>>> I am toying around with mod_python on a gentoo-linux system. Prior I
>>>> used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>>> beta from source.
>>>>
>>>> This is what I wish :
>>>> Every request is handled by the same python-handler for the virtual
>>>> domain. I am currently playing around and creating my own handler 
>>>> in the
>>>> process.
>>>> It has worked before, with the following relevant parts of my 
>>>> httpd.conf
>>>> (be aware, internal test server so a lot off things are just made
>>>> simple, not secure/right):
>>>>
>>>> NameVirtualHost *
>>>> <Directory "/www/tweetie">
>>>>        SetHandler python-program
>>>>        PythonHandler site
>>>>        PythonAuthenHandler site
>>>>        PythonDebug On
>>>>        Options Indexes FollowSymLinks MultiViews
>>>>        AllowOverride All
>>>>        Order allow,deny
>>>>        Allow from all
>>>>        AuthType Basic
>>>>        AuthName "Restricted Area"
>>>>        require valid-user
>>>> </Directory>
>>>> <VirtualHost *>
>>>>        ServerName tweetie
>>>>        DocumentRoot /www/tweetie
>>>> </VirtualHost>
>>>>
>>>> But now, when I browse to "http://tweetie/" i get a directory listning
>>>> instead of the python script... If I write anything after the trailing
>>>> slash, everything works fine.
>>>>
>>>> Can you tell me, what I did wrong and how to fix it ?
>>>>
>>>> Tia
>>>>
>>>> Svenne Krap
>>>>
>>>> _______________________________________________
>>>> Mod_python mailing list
>>>> Mod_python@modpython.org
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>
>>>>   
>>>
>>>
>>>  
>>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>  
>>
>
>
>

From elvelind at amandarin.se  Fri Nov  7 00:49:06 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] open a simple file
Message-ID: <3FAADDF2.1020808@amandarin.se>

New to python and newer to mod_python so sorry if this is a newbie question.
I'm have a where simple handler just for test that should open a html 
file and writing it out.
The problem is that it cant found the file. iv tried with test.html and 
the absolute path and none work. is there something I'm missing?

-- 
elvelind grandin

amandarin.se


From gustavo.cordova at q-voz.com  Thu Nov  6 18:05:58 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <3FAAE1E6.4000501@q-voz.com>

elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie 
> question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html 
> and the absolute path and none work. is there something I'm missing?

Well, if you include the source to your module, maybe we might have a 
bit more information to help you with.

Please add a "PythonDebug On" directive in httpd.conf and include all 
error messages in your next email.

Just a note: I'm not cranky, it's just that we can't help you without 
more info.

-gustavo


From stian at soiland.no  Fri Nov  7 11:00:13 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] 
	Re: Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FAAAEDE.3060804@krap.dk>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
	<3FAAAEDE.3060804@krap.dk>
Message-ID: <20031107100013.GB1233@itea.ntnu.no>

On 2003-11-06 21:28:14, Svenne Krap wrote:

> The second problem, having the http-authorization-dialog popping up is 
> still not resolved... Any thoughts ?

We've found out with 3.1.2b that the AuthenHandler-thingie is not fully
functional.

We tried the simple example from the documentations, and even made it
simpler:

.htaccess
---------
PythonPath "['/our/libs'] + sys.path"
PythonAuthenHandler Cerebrum.web.login
AuthType Basic
AuthName "Cerebrum"
require valid-user


Cerebrum/web/login.py
---------------------
from mod_python import apache

def authenhandler(req):
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED



This failed with a 500 Server Error. Watching the apache log reveals a
hint:

[Fri Nov 07 10:49:42 2003] [error] [client 129.241.56.39]
python_handler: After PythonAuthenHandler req->user is NULL. Assign
req.user to avoid this error.

This seems weird.. modifing the function:


def authenhandler(req):
    req.user = ""
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED


This works perfect, the login dialog appears, and disappears if any
login name is entered.
    
Now - why should req.user need to be set first?

Even the simplest handler:

def authenhandler(req):
    return apache.HTTP_UNAUTHORIZED
    
fails.. but if req.user = "" is set, it works.         
    
-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:36:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Session instances can't be stored in req?
Message-ID: <20031107103633.GC1233@itea.ntnu.no>

Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If I
try to store sezz in req.blupp - everything fails - the apache process hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:37:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Re: open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <20031107103733.GD1233@itea.ntnu.no>

On 2003-11-07 00:49:06, elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html and 
> the absolute path and none work. is there something I'm missing?

Have you made sure the file is readable for the user running the apache
process?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From vmanera at manord.com  Fri Nov  7 12:23:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:47:53 2004
Subject: R: [mod_python] Session instances can't be stored in req?
Message-ID: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>

I had a similar problem, not exactly I now show it but for explain:

def xxx(req):
	sess = Session(req)
	...
	req.sess = sess
	return yyy(req)

def yyy(req):
	sess = check_sess()

def check_sess(req):
	if hasattr(req,'sess'):
		sess = req.sess
	else:
		sess = Session(req)
	return sess

this hang apache

if I delete the attribut from req all work fine:

def check(req):
	if hasattr(req,'sess'):
		sess = req.sess
		delattr(req,'sess')
	else:
		sess = Session(req)
	return

I think in this way:

class BaseSession(dict):
	...
	def __del__(self):
        self.unlock()

the del unlock apache

where have you put the  fixuphandler(req) and who call it? I'm interisting
in it too

Villiam



-----Messaggio originale-----
Da: Stian S?iland [mailto:stian@soiland.no]
Inviato: venerd? 7 novembre 2003 11.37
A: mod_python@modpython.org
Oggetto: [mod_python] Session instances can't be stored in req?


Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If
I
try to store sezz in req.blupp - everything fails - the apache process
hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From stian at soiland.no  Fri Nov  7 14:43:51 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Re: R: Session instances can't be stored in req?
In-Reply-To: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
Message-ID: <20031107134351.GE1233@itea.ntnu.no>

On 2003-11-07 12:23:34, Manera, Villiam wrote:

> this hang apache
> 
> if I delete the attribut from req all work fine:
> 
> def check(req):
> 	if hasattr(req,'sess'):
> 		sess = req.sess
> 		delattr(req,'sess')
> 	else:
> 		sess = Session(req)
> 	return
> class BaseSession(dict):
> 	...
> 	def __del__(self):
>         self.unlock()
> the del unlock apache

Yes, a lock problem seems to be the issue here. 

We tried defining a cleanuphandler to fix things up by both calling
unlock() and removing the reference req.session - but the cleanuphandler
isn't always reached.

We tried moving the code away to a normal handler that first retrieves
the session, stores it in req.session, and then calls
mod_python.publisher.handler(req) - lock problems still occur.

> where have you put the  fixuphandler(req) and who call it? I'm interisting
> in it too

>From our library, by setting in htaccess "PythonFixupHandler
Cerebrum.web.fixup" it will be imported from
/our/lib/Cerebrum/web/fixup.py


-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From michael at dynamine.net  Fri Nov  7 10:10:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] 
 Documentation suggestions for section 4.7.1 in the beta mod_python
 manual
Message-ID: <3FABE006.6010602@dynamine.net>

Hi Grisha,

I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.

First, please explain to us why we need yet another cookie class, 
especially one that has the same name as the package that ships with 
Python ("Cookie").  I have to admit, though, that SignedCookie looks 
like a really nice convenience class.

Second, it's really important that you emphasize the security risks of 
using MarshalCookie; see the Python documentation for SerialCookie to 
see why.  Also, there are efficient-length considerations; constructing 
cookies representing 100kB data structures would not be "best practice."

--Michael

From grisha at modpython.org  Fri Nov  7 13:37:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABE006.6010602@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
Message-ID: <20031107132410.W37230@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Hi Grisha,
>
> I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.
>
> First, please explain to us why we need yet another cookie class,

Because it is more efficient and simpler to use within mod_python
environment.

> especially one that has the same name as the package that ships with
> Python ("Cookie").

Since it resides inside the mod_python package I don't see how it matters.

> Second, it's really important that you emphasize the security risks of
> using MarshalCookie;  see the Python documentation for SerialCookie to
> see why.

There are no known security risks of useing MarshalCookie. At least none
that I am aware of, and I researched the subject pretty thoroughly.

First - MarshalCookie is a subclass of SignedCookie, so all MarshalCookies
are signed, which makes it impossible to alter the cookie value.

Second, there is a distinction between "marshalling" and "pickling", which
is what SerialCookie uses. The process of unmarshalling does not execute
arbitrary code.

> Also, there are efficient-length considerations; constructing
> cookies representing 100kB data structures would not be "best practice."

Apache will limit any header length to about 4k :-)

Grisha
From michael at dynamine.net  Fri Nov  7 11:34:50 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <20031107132410.W37230@onyx.ispol.com>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
Message-ID: <3FABF3DA.1040405@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> Second, there is a distinction between "marshalling" and "pickling", which
> is what SerialCookie uses. The process of unmarshalling does not execute
> arbitrary code.

What's your evaluation of the possibility that the marshaling method 
will change between Python versions?  The docs explicitly offer no 
guarantee that the format will remain stable.

Best,

--Michael

From neel at mediapulse.com  Fri Nov  7 14:42:29 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
	beta mod_python manual
Message-ID: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>

> First, please explain to us why we need yet another cookie class,

more classes do not mean you cannot use a class.  mod_python works quite
well with the python cookie class, I've used them together for a while
now.  I also like having more than one choice, and if someone wants to
write even another cookie class I see no problem with it.  I get to pick
the best one for my needs vs having one solution that I have to keep
tweaking to get it to do what I need.

> > Also, there are efficient-length considerations; constructing
> > cookies representing 100kB data structures would not be 
> "best practice."
> 
> Apache will limit any header length to about 4k :-)

With out looking at the spec, I believe that clients are to reject
cookies of more than 4096 bytes, and only allow one server (domain) to
store 20(?) cookies max.  Then again, the last time a browser was done
that followed the RFCs...  well I can't ever recall that happening =)

A cool addition to the mod_python cookie class would be to raise an
Execption (CookieLength?) if a cookie would result in more than the RFC
limit.

Mike

From michael at dynamine.net  Fri Nov  7 11:47:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
Message-ID: <3FABF6CF.7010202@dynamine.net>

Michael C. Neel wrote:

>>First, please explain to us why we need yet another cookie class,
> 
> more classes do not mean you cannot use a class.  mod_python works quite
> well with the python cookie class, I've used them together for a while
> now.  I also like having more than one choice, and if someone wants to
> write even another cookie class I see no problem with it.  I get to pick
> the best one for my needs vs having one solution that I have to keep
> tweaking to get it to do what I need.

I did not mean to argue that we didn't need another one; rather, I
thought it would be useful if he added a paragraph or two explaining why
this implementation was written in terms of its advantages over the
Cookie package shipping with Python.  It wasn't immediately obvious to me.

Best,

--Michael



From grisha at modpython.org  Fri Nov  7 16:48:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
Message-ID: <20031107164602.R37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael C. Neel wrote:

> A cool addition to the mod_python cookie class would be to raise an
> Execption (CookieLength?) if a cookie would result in more than the RFC
> limit.

That'd be rather difficult because cookies is one of those unfortunate
standards that has no RFC. Well it does, but nobody follows those. The
documentation for mod_python's class has some comments and a link to a
pretty good paper describing this sad situation.

Grisha
From grisha at modpython.org  Fri Nov  7 16:53:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <3FABF6CF.7010202@dynamine.net>
References: <3FABF6CF.7010202@dynamine.net>
Message-ID: <20031107165130.V37852@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> I thought it would be useful if he added a paragraph or two explaining
> why this implementation was written in terms of its advantages over the
> Cookie package shipping with Python.  It wasn't immediately obvious to
> me.

It's a good suggestion, but as a sidenote, this being open source - all
should/would comments are best submitted in a form of a patch ;-)

Grisha
From grisha at modpython.org  Fri Nov  7 16:58:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABF3DA.1040405@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
	<3FABF3DA.1040405@dynamine.net>
Message-ID: <20031107165354.T37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Gregory (Grisha) Trubetskoy wrote:
>
> > Second, there is a distinction between "marshalling" and "pickling", which
> > is what SerialCookie uses. The process of unmarshalling does not execute
> > arbitrary code.
>
> What's your evaluation of the possibility that the marshaling method
> will change between Python versions?  The docs explicitly offer no
> guarantee that the format will remain stable.

Well - marshalling is used to create .pyc files, and the format does
include a version number I believe. It's very unlikely that the format
will change with no backwards compatibility.

In other words I don't see this as a concern when using MarshalCookie.

Grisha
From matt at nipltd.com  Mon Nov 10 11:34:28 2003
From: matt at nipltd.com (Matt Hoskins)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] 
	Empty URL query elements causing mod_python 2.7.x and 3.0.x to seg
	fault
Message-ID: <1068464068.12464.23.camel@rhubarb>

I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
although I haven't tested them) can be made to lead to a segmentation
fault under unix (and the equivilent under win32) if you have an empty
query string element on the url. I don't have a debug build of
python/apache/etc, but it seems to be during a python_finalize that
things actually explode.

So the most simple case is:
http://myserver/?&

It'll explode with any empty query string component I believe. I'm
guessing it's the fact that the length of the whole element is 0 that's
upsetting things, as the following doesn't cause things to go
horribly wrong (and you correctly get an entry with an empty key):

http://myserver/?=&

As I'm not up to speed on python innards I don't know exactly why it's
getting upset. Should be easy to hack a fix to just skip entirely empty
entries, but the correct fix I guess would add a key/value pair of empty
strings to the url argument dictionary (why anyone would care about such
an entry I don't know ;).

I've had this error occur with apache 1.3.28/mod python 2.7.8/python
2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
2.3.2 under linux.

Regards,
Matt


From davidf at sjsoft.com  Mon Nov 10 14:10:51 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python 2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068464068.12464.23.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>
Message-ID: <3FAF804B.9080506@sjsoft.com>

Matt Hoskins wrote:

>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>although I haven't tested them) can be made to lead to a segmentation
>fault under unix (and the equivilent under win32) if you have an empty
>query string element on the url. I don't have a debug build of
>python/apache/etc, but it seems to be during a python_finalize that
>things actually explode.
>
>So the most simple case is:
>http://myserver/?&
>
>It'll explode with any empty query string component I believe. I'm
>guessing it's the fact that the length of the whole element is 0 that's
>upsetting things, as the following doesn't cause things to go
>horribly wrong (and you correctly get an entry with an empty key):
>
>http://myserver/?=&
>
>As I'm not up to speed on python innards I don't know exactly why it's
>getting upset. Should be easy to hack a fix to just skip entirely empty
>entries, but the correct fix I guess would add a key/value pair of empty
>strings to the url argument dictionary (why anyone would care about such
>an entry I don't know ;).
>
>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>2.3.2 under linux.
>
>Regards,
>Matt
>
Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
1.3.27/mod_python 2.7.8/python 2.2.2 under linux
Was this using a normal install, and do you have a simple test case of 
the config/.htaccess files and handler that generates this error?

David


From davidf at sjsoft.com  Mon Nov 10 14:59:15 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python	2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068468338.12464.32.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>	 <3FAF804B.9080506@sjsoft.com>
	<1068468338.12464.32.camel@rhubarb>
Message-ID: <3FAF8BA3.8090209@sjsoft.com>

Matt Hoskins wrote:

>On Mon, 2003-11-10 at 12:10, David Fraser wrote:
>  
>
>>Matt Hoskins wrote:
>>
>>    
>>
>>>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>>>although I haven't tested them) can be made to lead to a segmentation
>>>fault under unix (and the equivilent under win32) if you have an empty
>>>query string element on the url. I don't have a debug build of
>>>python/apache/etc, but it seems to be during a python_finalize that
>>>things actually explode.
>>>
>>>So the most simple case is:
>>>http://myserver/?&
>>>
>>>It'll explode with any empty query string component I believe. I'm
>>>guessing it's the fact that the length of the whole element is 0 that's
>>>upsetting things, as the following doesn't cause things to go
>>>horribly wrong (and you correctly get an entry with an empty key):
>>>
>>>http://myserver/?=&
>>>
>>>As I'm not up to speed on python innards I don't know exactly why it's
>>>getting upset. Should be easy to hack a fix to just skip entirely empty
>>>entries, but the correct fix I guess would add a key/value pair of empty
>>>strings to the url argument dictionary (why anyone would care about such
>>>an entry I don't know ;).
>>>
>>>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>>>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>>>2.3.2 under linux.
>>>
>>>Regards,
>>>Matt
>>>
>>>      
>>>
>>Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
>>1.3.27/mod_python 2.7.8/python 2.2.2 under linux
>>Was this using a normal install, and do you have a simple test case of 
>>the config/.htaccess files and handler that generates this error?
>>    
>>
>
>Are you using the FieldStorage stuff? Tt's actually the util.parse_qsl
>routine which is exploding for me. I'm half asleep this morning, so
>forgot to mention it was parse_qsl which was setting up stuff to cause
>things to blow up.
>
>I've hacked my the mod_python code (parse_qsl in _apachemodule.c) here
>to skip the empty entries in parse_qsl and that fixes the problem.
>
>fieldStorage = util.FieldStorage(modPythonRequest, 1) is the way that
>parse_qsl is ending up getting called here. I haven't had a chance to
>set up a piece of code which just calls this and doesn't do anything
>else, so I don't know if you have to actually use the fieldStorage thing
>or the values within in to trigger the crash, or whether just cleaning
>up after parse_qsl has been called with an empty query entity is enough
>to cause the problem.
>
>If you've tried fieldStorage = util.FieldStorage(modPythonRequest, 1)
>and aren't getting an explosion I could take the time to try create a
>minimal set of circumstations to cause the error, however I'm 99% sure
>it is down to parse_qsl given that "http://myserver/?=&" doesn't cause a
>problem with our app, and that should in theory create the same
>key/value pair through parse_qsl as "http://myserver/?&"
>
>Regards,
>Matt
>
>
>Matt
>
>
>  
>
OK, I wasn't using keep_blank_values=1
So it looks like a bug in parse_qsl, but I don't know enough CPython to 
debug it, maybe somebody else can :-)

David

PS Did you mean to send this to the list too?

From michael at dynamine.net  Mon Nov 10 10:03:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <3FAFD30C.9090200@dynamine.net>

Grisha,

It would be really cool if we could get access to the apache namespace 
in PythonPath, so we could do stuff like:

PythonPath "sys.path + [apache.server_root() + '/py']"

Best,

--Michael

From grisha at modpython.org  Mon Nov 10 14:30:30 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFD30C.9090200@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
Message-ID: <20031110142453.U88746@onyx.ispol.com>


On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Grisha,
>
> It would be really cool if we could get access to the apache namespace
> in PythonPath, so we could do stuff like:
>
> PythonPath "sys.path + [apache.server_root() + '/py']"


That would be neat, but I'm not sure it's theoretically possible, not
without some kind of trickery to simulate a run-time environment at
configuration stage...

I know mod_perl allows for inline perl to be executed at server
configuration time - I haven't looked at that stuff and can't really say I
know how it is done and whether it's something that would work with Python
as well.

Grisha
From gustavo.cordova at q-voz.com  Mon Nov 10 13:57:21 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110142453.U88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
Message-ID: <3FAFEDA1.7030705@q-voz.com>

Gregory (Grisha) Trubetskoy wrote:

>On Mon, 10 Nov 2003, Michael S. Fischer wrote:
>
>  
>
>>Grisha,
>>
>>It would be really cool if we could get access to the apache namespace
>>in PythonPath, so we could do stuff like:
>>
>>PythonPath "sys.path + [apache.server_root() + '/py']"
>>    
>>
>That would be neat, but I'm not sure it's theoretically possible, not
>without some kind of trickery to simulate a run-time environment at
>configuration stage...
>
>I know mod_perl allows for inline perl to be executed at server
>configuration time - I haven't looked at that stuff and can't really say I know how it is done and whether it's something that would work with Python as well.
>
>Grisha
>
>  
>
Without wanting to sound flippy or anything like that, but, I don't see 
much sense in such a configuration-time parameter "automatization", 
because, setting such parameters is part of any deployment, it's better 
to keep things explicit, no?

I'd prefer to use module-level variables-as-constants, with BIG 
UPPERCASE names, so as to not miss them when deploying, or updating, a 
module.

Just my thoughts.

-gustavo


From michael at dynamine.net  Mon Nov 10 12:04:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEDA1.7030705@q-voz.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
Message-ID: <3FAFEF3E.2040503@dynamine.net>

Gustavo C?rdova Avila wrote:

> Without wanting to sound flippy or anything like that, but, I don't see 
> much sense in such a configuration-time parameter "automatization", 
> because, setting such parameters is part of any deployment, it's better 
> to keep things explicit, no?

Not necessarily.  Developing Web applications in a team environment 
often entails having developers running multiple instances of the 
server, each running within the user's context and bound to his own 
port.  In situations like this, doing run-time paramaterization is critical.

But yes, for production applications it might make less sense.

--Michael

From grisha at modpython.org  Mon Nov 10 15:19:11 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEF3E.2040503@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
	<3FAFEDA1.7030705@q-voz.com> <3FAFEF3E.2040503@dynamine.net>
Message-ID: <20031110151346.K88746@onyx.ispol.com>


There is definitely value to machine-generated configuration.

What I am not sure about is the value of the automation residing within
httpd itself.

I.e., why not have the apachectl script call a Python script to generate
the server config from scratch just before starting the server?

BTW, mod_python even includes some code that could be useful in this
respect - it's in the test suite, the httpdconf.py module.

Grisha

On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Gustavo C?rdova Avila wrote:
>
> > Without wanting to sound flippy or anything like that, but, I don't see
> > much sense in such a configuration-time parameter "automatization",
> > because, setting such parameters is part of any deployment, it's better
> > to keep things explicit, no?
>
> Not necessarily.  Developing Web applications in a team environment
> often entails having developers running multiple instances of the
> server, each running within the user's context and bound to his own
> port.  In situations like this, doing run-time paramaterization is critical.
>
> But yes, for production applications it might make less sense.
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From neel at mediapulse.com  Mon Nov 10 15:22:59 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>

> > Without wanting to sound flippy or anything like that, but, 
> I don't see 
> > much sense in such a configuration-time parameter "automatization", 
> > because, setting such parameters is part of any deployment, 
> it's better 
> > to keep things explicit, no?
> 
> Not necessarily.  Developing Web applications in a team environment 
> often entails having developers running multiple instances of the 
> server, each running within the user's context and bound to his own 
> port.  In situations like this, doing run-time 
> paramaterization is critical.
> 
> But yes, for production applications it might make less sense.

Would each be under his own virtual server in apache then, and therefore
have his own config section?  This just seems to be saving some typing
the the httpd.conf file, a few lines above the PythonOption will be
DocumentRoot.  mod_perl goes insane and allows programming logic in the
conf file, and this is a bad thing imho; nothing like restarting a
server that doesn't come back because of a programmin error inside the
conf and quickly trying to debug it while the entire server remains
down.

Mike

From michael at dynamine.net  Mon Nov 10 12:54:42 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
Message-ID: <3FAFFB12.8010409@dynamine.net>

Michael C. Neel wrote:

> Would each be under his own virtual server in apache then, and therefore
> have his own config section?  This just seems to be saving some typing
> the the httpd.conf file, a few lines above the PythonOption will be
> DocumentRoot.  

I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
mod_python code in the static file store.

> mod_perl goes insane and allows programming logic in the
> conf file, and this is a bad thing imho; nothing like restarting a
> server that doesn't come back because of a programmin error inside the
> conf and quickly trying to debug it while the entire server remains
> down.

The mere fact that we can do suboptimal things with technology shouldn't 
preclude its availability.

--Michael


From michael at dynamine.net  Mon Nov 10 12:58:07 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:53 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110151346.K88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
	<3FAFEF3E.2040503@dynamine.net> <20031110151346.K88746@onyx.ispol.com>
Message-ID: <3FAFFBDF.1050606@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> There is definitely value to machine-generated configuration.
> 
> What I am not sure about is the value of the automation residing within
> httpd itself.
> 
> I.e., why not have the apachectl script call a Python script to generate
> the server config from scratch just before starting the server?

I do that now (using bash and sed, not Python).

But, I think that being able to pass variable parameters be used in 
Apache configuration is sexier, and very helpful when working in the 
context of a version-control environment.

--Michael

From bryn at bigtrouble.com  Mon Nov 10 13:07:22 2003
From: bryn at bigtrouble.com (Bryn Dyment)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] 
	static build link errors:  Python 2.3.2,  mod_python 2.7.8,  Apache
	1.3.29
Message-ID: <000d01c3a7ce$a2954920$6401a8c0@t20>

I'm getting link errors when building Apache with mod_python (static).
(I've successfully built mod_perl and PHP statically, so I'm somewhat
familiar with the process.)  Ideas?


Versions:
  Python: 2.3.2
  mod_python: 2.7.8
  Apache: 1.3.29


First, I built Python with:
  ./configure --enable-shared
  make
  make install


Next, mod_python with:
  ./configure --with-apache=../apache_1.3.29
  make static
  make install


Then, Apache with:
  ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a
  make


Here's where things went south:

---
gcc  -funsigned-char -DUSE_EXPAT -I./lib/expat-lite -DNO_DL_NEEDED `./apaci`
-Wl,--export-dynamic    -o httpd buildmark.o modules.o
modules/standard/libstandard.a  modules/python/libpython.a  main/libmain.a
./os/unix/libos.a  ap/libap.a  lib/expat-lite/libexpat.a  -lcrypt -lm
/usr/local/lib/python2.3/config/libpython2.3.a    -lutil   -lm
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tmpnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5785: warning: tmpnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tempnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5738: warning: tempnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`find_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key_value':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
.
.
.
---


Here are the results of ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a:

---
Configuring for Apache, Version 1.3.29
 + using installation path layout: FreeBSD (config.layout)
 + activated python module (modules/python/libpython.a)
Creating Makefile
Creating Configuration.apaci in src
Creating Makefile in src
 + configured for FreeBSD 4.9 platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + using "tr [a-z] [A-Z]" to uppercase
 + checking for system header files
 + adding selected modules
    o python_module uses ConfigStart/End
 + using builtin Expat
 + checking sizeof various data types
 + doing sanity check on compiler and options
Creating Makefile in src/support
Creating Makefile in src/os/unix
Creating Makefile in src/ap
Creating Makefile in src/main
Creating Makefile in src/lib/expat-lite
Creating Makefile in src/modules/standard
Creating Makefile in src/modules/python
---


From cs1spw at bath.ac.uk  Mon Nov 10 15:16:30 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <3FB0002E.7050007@bath.ac.uk>

Hi all,

Is there a way of sending a "message" to all Apache children running a 
mod_python application? Here's the problem: we have a template system 
which compiles template strings in to an in-memory data structure. This 
structure is cached in memory in a global dictionary for each Apache 
child. At the moment templates are stored in the cache with a timestamp 
saying when they were loaded, and expire and are reloaded every 5 
minutes. We want to be able to instantly invalidate a cached template if 
an urgent change needs to be made to the site.

Is there a way of pushing out a message to all of the Apache children 
saying "reload template X NOW", without having to hit the file system or 
database for every template request?

Cheers,

Simon Willison

From seth at picklematrix.net  Mon Nov 10 11:29:07 2003
From: seth at picklematrix.net (Seth Ladd)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>


On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes.  
I can assume that most templates will be static for longer than 5 
minutes.

Seth

From cs1spw at bath.ac.uk  Mon Nov 10 15:46:44 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
References: <3FB0002E.7050007@bath.ac.uk>
	<EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
Message-ID: <3FB00744.8070601@bath.ac.uk>

Seth Ladd wrote:

> Do you check the timestamp on the template from the filesystem?  That 
> might be better than to just throw away the template every 5 minutes.  I 
> can assume that most templates will be static for longer than 5 minutes.

Actually we do - every 5 minutes we check the timestamp to see if an 
update has been made. We're trying to avoid making the call to the 
filesystem to check the timestamp on every request.

-- 
Simon Willison
Web development weblog: http://simon.incutio.com/

From neel at mediapulse.com  Mon Nov 10 16:49:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>

> I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
> mod_python code in the static file store.
> 
Now I am lost, wouldn't ServerRoot always be the same?  Apache only
allows this directive once, so I'm missing the dynamic part.  Do you
have each developer running his own apache on a different port, in a
different directory?

> The mere fact that we can do suboptimal things with 
> technology shouldn't 
> preclude its availability.
> 
I used to think that, and wrote a lot of perl - I'm glad I stopped =p.
If you really want this, look into mod_perl and/or mod_macro, both of
which should be able to do what you are looking for - though I freely
admit I'm not sure what you are needing.  Perl looks something like:

  <Perl>
  
  $Location{"/~dougm/"} = {
    AuthUserFile => '/tmp/htpasswd',
    AuthType => 'Basic',
    AuthName => 'test',
    DirectoryIndex => [qw(index.html index.htm)],
    Limit => {
      METHODS => 'GET POST',
      require => 'user dougm',
    },
  };
  
  </Perl>

	If you want a more detailed example, search for conf file from a
Colbalt system, which configured everything based on a directory
structure including SSL.

Mike

From svenne at krap.dk  Mon Nov 10 22:52:11 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <3FB0088B.8040305@krap.dk>

What about using shared memory/semaphores (shm on linux) ? I have used 
it successfully before (in PHP) for a similar case. It's blazing fast 
and allows you to have an invalidate-script outside). Each process 
simply aquires the semaphore (overkill, but truly safe) and then reads 
the "versionnumber" (or perhaps last change) from a shm-memory segment.

Oh, by the way. Out of bitter experience, don't "loose" the semaphore, 
always keep it accounted for....

By googleling, i found 
http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

Svenne

Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?
>
> Cheers,
>
> Simon Willison
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From michael at dynamine.net  Mon Nov 10 14:00:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
Message-ID: <3FB00A7B.3080407@dynamine.net>

Michael C. Neel wrote:

>>I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
>>mod_python code in the static file store.
>>
> Now I am lost, wouldn't ServerRoot always be the same?  Apache only
> allows this directive once, so I'm missing the dynamic part.  Do you
> have each developer running his own apache on a different port, in a
> different directory?

Yes.  Each user has a subset of the Apache directory structure in his 
workspace, including a log directory, configuration directory, etc. -- 
not the binaries or libraries at this point, but just about everything 
else.  So, in this arrangement, ServerRoot is dynamic.

--Michael

From neel at mediapulse.com  Mon Nov 10 17:21:28 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B3@johnson.mediapulse.net>

> Yes.  Each user has a subset of the Apache directory structure in his 
> workspace, including a log directory, configuration 
> directory, etc. -- 
> not the binaries or libraries at this point, but just about 
> everything 
> else.  So, in this arrangement, ServerRoot is dynamic.
> 

Hmm... we have the same thing, only using virtual servers.  We split out
the conf to each directory and then use includes in the main conf.  Each
mini-conf only has the virtualhost lines that set the dir structure for
that server.  What are you getting from separate servers vs virtual
ones?  I'm not being a jerk, we here have several developers working as
well and just trying to see if there might be another way for us to
configure a web server.

Mike

From gnb at itga.com.au  Tue Nov 11 09:58:45 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Sending a message to Apache children 
In-Reply-To: Your message of Mon, 10 Nov 2003 15:46:44 -0600.
Message-ID: <200311102258.JAA20974@lightning.itga.com.au>


cs1spw@bath.ac.uk said:
> Actually we do - every 5 minutes we check the timestamp to see if an
> update has been made. We're trying to avoid making the call to the
> filesystem to check the timestamp on every request. 

Actually, my gut feeling is that a stat() on a file that is still in the cache 
is not going to be noticeably more expensive than the gettimeofday() call you 
need to do to decide whether five minutes are up.  So give it a whirl with the 
stat() on every call and see what that does to your performance, you might be 
surprised.


From michael at dynamine.net  Mon Nov 10 15:11:46 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <200311102258.JAA20974@lightning.itga.com.au>
References: <200311102258.JAA20974@lightning.itga.com.au>
Message-ID: <3FB01B32.6090605@dynamine.net>

Gregory Bond wrote:

> cs1spw@bath.ac.uk said:
> 
>>Actually we do - every 5 minutes we check the timestamp to see if an
>>update has been made. We're trying to avoid making the call to the
>>filesystem to check the timestamp on every request. 
> 
> 
> Actually, my gut feeling is that a stat() on a file that is still in the cache 
> is not going to be noticeably more expensive than the gettimeofday() call you 
> need to do to decide whether five minutes are up.  So give it a whirl with the 
> stat() on every call and see what that does to your performance, you might be 
> surprised.

Poster is correct; if your machine's inode cache is too small, you can 
adjust it via sysctl kern.maxvnodes (BSD); Linux's inode cache is dynamic.

--Michael

From perry.tew at cibavision.novartis.com  Tue Nov 11 08:27:40 2003
From: perry.tew at cibavision.novartis.com (perry.tew@cibavision.novartis.com)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <OF0364206B.49D2044C-ON85256DDB.004803A7-85256DDB.0049F1C9@EU.novartis.net>

Something I've found useful is to use the CleanupHandler to handle this 
kind of thing.  I have a security realm that caches users, roles, and 
protected urls.  I have a cleanup handler that detects changes in the 
database and updates the cache.  Since this happens after the request has 
ended, there is no impact to the user.  Each child is updated after each 
one handles a request.  The only downside is that a single request must be 
served before the change is placed into effect.  However, given the number 
of requests my handlers serve, that's a very small issue compared to 
adding the overhead of checking for changes during every single request 
while the browser is waiting.

Just some thoughts,
Perry




On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes. 
I can assume that most templates will be static for longer than 5 
minutes.

Seth

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python



From eric.ziegenhorn at ngc.com  Wed Nov 12 15:32:00 2003
From: eric.ziegenhorn at ngc.com (Ziegenhorn, Eric)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] subprocesses
Message-ID: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>

Hello,

I've read about the multitude of problems in running subprocesses under
mod_python using commands such as os.system() or one of the os.popen().
However, I've never been able to find a work around.  I'm particularly
interested in using os.popen3().  Does anyone know if this will work?
Should I just go back to straight cgi?

Thanks,
Eric
From brianh at exelixis.com  Wed Nov 12 16:25:14 2003
From: brianh at exelixis.com (Brian Hawthorne)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] subprocesses
In-Reply-To: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>
Message-ID: <Pine.GSO.4.44.0311121624250.19526-100000@timeless.exelixis.com>

i use popen3 under modpy and it works just fine.

-brian hawthorne

On Wed, 12 Nov 2003, Ziegenhorn, Eric wrote:

> Hello,
>
> I've read about the multitude of problems in running subprocesses under
> mod_python using commands such as os.system() or one of the os.popen().
> However, I've never been able to find a work around.  I'm particularly
> interested in using os.popen3().  Does anyone know if this will work?
> Should I just go back to straight cgi?
>
> Thanks,
> Eric
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From sergey at optimaltec.com  Wed Nov 12 15:53:05 2003
From: sergey at optimaltec.com (Sergey A. Lipnevich)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] 
	[PATCH] APR 1 compatibility: apr_pool_sub_make -> apr_pool_create_ex
Message-ID: <bou6k6$9b4$1@sea.gmane.org>

Hi!

Here's a small patch to insure mod_python 3.1.2b compiles with APR 0.9 
and 1.0. It replaces a call to deprecated apr_pool_sub_make with a call 
to apr_pool_create_ex.
Thank you!

Sergey.
-------------- next part --------------
diff -purN mod_python-3.1.2b/src/hlistobject.c mod_python/src/hlistobject.c
--- mod_python-3.1.2b/src/hlistobject.c	2002-11-07 19:15:11.000000000 -0500
+++ mod_python/src/hlistobject.c	2003-11-12 15:20:02.000000000 -0500
@@ -83,7 +83,7 @@ PyObject *MpHList_FromHLEntry(hl_entry *
         PyErr_NoMemory();
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
 
     result->pool = p;
     result->head = hlist_copy(p, hle);
diff -purN mod_python-3.1.2b/src/tableobject.c mod_python/src/tableobject.c
--- mod_python-3.1.2b/src/tableobject.c	2003-07-14 16:51:32.000000000 -0400
+++ mod_python/src/tableobject.c	2003-11-12 15:19:47.000000000 -0500
@@ -120,7 +120,7 @@ PyObject * MpTable_New()
     apr_pool_t *p;
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
     
     /* two is a wild guess */
     t = (tableobject *)MpTable_FromTable(apr_table_make(p, 2));
@@ -1006,7 +1006,7 @@ static PyObject *table_new(PyTypeObject 
     if (self != NULL) {
         apr_pool_t *p;
         tableobject *t = (tableobject *)self;
-        apr_pool_sub_make(&p, NULL, NULL);
+        apr_pool_create_ex(&p, NULL, NULL, NULL);
         t->pool = p;
         t->table = apr_table_make(p, 2);
     }
From modpython at holovaty.com  Thu Nov 13 14:41:52 2003
From: modpython at holovaty.com (Adrian Holovaty)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] mod_python error with Fedora Core 1
Message-ID: <200311131441.52452.modpython@holovaty.com>

I've installed Fedora Core 1 on my laptop, along with its standard RPMs of 
Apache 2 (httpd-2.0.47-10.rpm) and mod_python (mod_python-3.0.3-3.rpm). The 
mod_python package appears to be buggy.

Here's the httpd.conf code I'm using:

PythonPath "sys.path+['/home/adrian/doc/work/dev/modpython']"
<Location "/modpython">
    PythonDebug On
    SetHandler python-program
    PythonHandler testhandler
</Location>

Here's the handler (/home/adrian/doc/work/dev/modpython/testhandler.py):

from mod_python import apache
def handler(req):
    req.content_type = "text/html"
    req.write("Testing")
    return apache.OK

And here's the error output I see in my browser:

"""
Mod_python error: "PythonHandler testhandler"

Traceback (most recent call last):

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 320, in HandlerDispatch

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 496, in import_module

ImportError: No module named testhandler
"""

There are a few things wrong here. First, it should work -- i.e., the output 
should be "Testing". Second, the directory /usr/src/build doesn't exist on my 
machine, so that error message is quite perplexing.

The above httpd.conf settings and handler code worked perfectly with Red Hat 
9; I assume the bug is in the Fedora packaging. Any idea whether I can get it 
to work somehow? Has anybody had luck running mod_python on Fedora Core 1?

Thanks!

Adrian

From blazek at firma.seznam.cz  Fri Nov 14 12:56:14 2003
From: blazek at firma.seznam.cz (Vaclav Blazek)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] 
	Re: Empty URL query elements causing mod_python 2.7.x and 3.0.x to
	seg fault
Message-ID: <200311141256.14922.blazek@firma.seznam.cz>

> OK, I wasn't using keep_blank_values=1
> So it looks like a bug in parse_qsl, but I don't know enough CPython to 
> debug it, maybe somebody else can :-)

> David

> PS Did you mean to send this to the list too?

Hello all mod_pythoner's,

I'm sorry to reply to the message outside of it's thread, but I've just 
subscribted to this mailing list and cannot get the Message-ID of the 
original message.

Well, the main problem is in functions parse_qs() and parse_qsl() 
(src/_apachemodule.c). In these functions, there's the query-string broken by 
the '&' character and any part is considered as key=value pair which is then 
broken by the '=' character and stored in dict (parse_qs) or in list 
(parse_qsl).

Everything is fine until the size of pair is 0. In this case, there are 
created two python strings with zero length. Then the processing of both 
parst is made and these python strings are resized to the new size, which is 
also 0. But python (to be more precise, the function _PyString_Resize()) 
complains (by an exception) when you try to resize string of size 0 to size 
0. Since this exception is not handled and the _PyString_Resize() function 
changes the pointer to the python string to NULL, next py_DECREF() causes 
SIGSEGV.

I've added code which tests original pair's length in both functions and skips 
processing when string is empty.  I'm usign mod_python 3.0.3, but the code of 
these functions is the same in the latest version. Here comes the diff:

@@ -183,6 +183,11 @@
        cpair = PyString_AS_STRING(pair);

        len = strlen(cpair);
+        if (!len) {
+            /* Skip processing of empty string. */
+            ++n;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, len);
        if (key == NULL)
            return NULL;
@@ -301,6 +306,11 @@

        /* split the "abc=def" pair */
        plen = strlen(cpair);
+        if (!plen) {
+            /* Skip  processing of empty string. */
+            ++i;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, plen);
        if (key == NULL)
            return NULL;

--
Vaclav Blazek, Programer
Seznam.cz a.s., Prague, Czech Republic

From michael at dynamine.net  Mon Nov 17 12:24:59 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] req.write() can't take a tuple
Message-ID: <3FB92E9B.7050609@dynamine.net>

Hi Grish,

Is it possible to change req.write() so that it can take a tuple of 
strings as well as string?  It would be nice to be able to call 
req.write(data, "\n") instead of breaking it into two calls.

--Michael

From michael at dynamine.net  Mon Nov 17 12:31:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:54 2004
Subject: IGNORE Re: [mod_python] req.write() can't take a tuple
In-Reply-To: <3FB92E9B.7050609@dynamine.net>
References: <3FB92E9B.7050609@dynamine.net>
Message-ID: <3FB9303C.60604@dynamine.net>

Please ignore the previous message.  No need to reply.

--Michael

Michael S. Fischer wrote:

> Hi Grish,
> 
> Is it possible to change req.write() so that it can take a tuple of 
> strings as well as string?  It would be nice to be able to call 
> req.write(data, "\n") instead of breaking it into two calls.
> 
> --Michael
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From michael at kleehammer.com  Mon Nov 17 23:23:30 2003
From: michael at kleehammer.com (Michael Kleehammer)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
Message-ID: <16313.44242.563177.63147@home.kleehammer.com>

Whenever I attempt to use sessions, the DbmSession class chooses the
dbhash module and crashes when attempting to create the database.  (The
file is never created.)

* Fedora Core 1 (basically RH9)
* Newly compiled Apache 2.0.48
* Python 2.3
* mod_python 3.1.2b

Here is a small handler that exhibits the problem on my box.  If it runs
on anyone else's box, that would be good to know.

  from mod_python import apache
  import dbhash
  
  def handler(req):
      req.log_error("open", apache.APLOG_NOTICE)
  
      # seg fault in here
      result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
  
      req.log_error("opened")
      return apache.OK

The relevant Apache error log lines are:

  [notice] mod_python: (Re)importing module 'controller'
  [notice] [client 127.0.0.1] open
  [notice] child pid 11211 exit signal Segmentation fault (11)

Naturally, I've tested similar code outside of mod_python and it works
fine.  I'm wondering if dbhash is thread safe.

Obviously I can call DbmSession instead of Session and pass dumbdbm (or
another type -- I haven't tested any others yet), but I'm wondering why
the default setup isn't working.

Any thoughts?

Michael Kleehammer

From conrad at hep.caltech.edu  Wed Nov 19 07:09:32 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
In-Reply-To: <16313.44242.563177.63147@home.kleehammer.com>
References: <16313.44242.563177.63147@home.kleehammer.com>
Message-ID: <1069250970.3161.11.camel@localhost.localdomain>

Hi Michael

Since you compiled Apache yourself, please make sure that the version of
libdb that Apache and mod_python (and Python?) are the same.

I've seen the same behaviour when e.g. Apache was linked against
libdb-4.0 and mod_python against libdb-4.1.

HTH

Conrad

On Mon, 2003-11-17 at 22:23, Michael Kleehammer wrote:
> Whenever I attempt to use sessions, the DbmSession class chooses the
> dbhash module and crashes when attempting to create the database.  (The
> file is never created.)
> 
> * Fedora Core 1 (basically RH9)
> * Newly compiled Apache 2.0.48
> * Python 2.3
> * mod_python 3.1.2b
> 
> Here is a small handler that exhibits the problem on my box.  If it runs
> on anyone else's box, that would be good to know.
> 
>   from mod_python import apache
>   import dbhash
>   
>   def handler(req):
>       req.log_error("open", apache.APLOG_NOTICE)
>   
>       # seg fault in here
>       result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
>   
>       req.log_error("opened")
>       return apache.OK
> 
> The relevant Apache error log lines are:
> 
>   [notice] mod_python: (Re)importing module 'controller'
>   [notice] [client 127.0.0.1] open
>   [notice] child pid 11211 exit signal Segmentation fault (11)
> 
> Naturally, I've tested similar code outside of mod_python and it works
> fine.  I'm wondering if dbhash is thread safe.
> 
> Obviously I can call DbmSession instead of Session and pass dumbdbm (or
> another type -- I haven't tested any others yet), but I'm wondering why
> the default setup isn't working.
> 
> Any thoughts?
> 
> Michael Kleehammer
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From davidf at sjsoft.com  Thu Nov 20 14:19:31 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] 
	Apache child process restarting under Win32 - import errors
Message-ID: <3FBCB153.6020909@sjsoft.com>

Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


From dwmp at opti.cgi.net  Thu Nov 20 19:47:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Multiple handlers
Message-ID: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>


I'm a mod_python newbie using mod_python 3.1.2b and Apache 2.0.48.  I'm 
trying to setup my test directory to run .py files under a request handler 
and any .psp files under the mod_python.psp handler.  Here's my Apache config.

### Test ###
<Directory /usr/local/apache2/htdocs/test>
     AddHandler mod_python .py
     PythonHandler index
     PythonDebug On

     AddHandler mod_python .psp
     PythonHandler mod_python.psp
</Directory>

The problem is that I get both handlers running one after the other.  The 
request handler (index.py) handles the request, sends output, returns 
apache.OK and then the mod_python.psp tries to handle the same request, 
appending output to the index.py output.  Why does this config not set it 
up so that all .py requests go to index.py and all requests for .psp files 
get handled by mod_python.psp?

It would be nice if the documentation had a more detailed explanation of 
how Apache uses handlers and how to setup mod_python in the Apache 
config.  Those of us who are used to just putting a .php file in the 
filesystem and watching it run need a little hand holding.

-Dan

From grisha at modpython.org  Thu Nov 20 22:12:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Multiple handlers
In-Reply-To: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
References: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
Message-ID: <20031120221124.N69786@onyx.ispol.com>



On Thu, 20 Nov 2003, Dan W. wrote:

> ### Test ###
> <Directory /usr/local/apache2/htdocs/test>
>      AddHandler mod_python .py
>      PythonHandler index
>      PythonDebug On
>
>      AddHandler mod_python .psp
>      PythonHandler mod_python.psp
> </Directory>


Try this:

<Directory /usr/local/apache2/htdocs/test>

      AddHandler mod_python .py .psp

      PythonHandler index | .py
      PythonHandler mod_python.psp | .psp

      PythonDebug On

</Directory>


Grisha
From vmanera at manord.com  Fri Nov 21 18:00:18 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:47:54 2004
Subject: R: [mod_python] Apache child process restarting under Win32 - imp
	ort errors
Message-ID: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>

we have had the same behavior with ':&' 

Da: 	Cassiano, Marco  
Inviato:	luned? 16 giugno 2003 11.53
A:	'security@apache.org'
Cc:	'Gregory (Grisha) Trubetskoy'
Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF

I would like to inform you of the behaviour of Apache when a link with a
particular HREF is clicked.

First of all, our configuration is : 

Windows 2000 Server SP3
Apache 2.0.46
Mod-python 3.0.3
Active State Python 2.2.2


We have a python script that runs under mod-python which looks into the
database to find some articles and builds a table with the links to
"explode" each article and look into its details. This HTML table contains a
HREF for each article. Each HREF actually contains a call to another python
script that does the "explode" job. We pass the parameters to this script in
the usual "&" concatenation form.
It happened that one of the articles had a semicolon (";") as the final
character of its description
so the HREF was built in following way : "descriptionwithfinal;&next parm".
In other words the HREF contained the sequence ";&".
When we clicked on this link we got a "Page not found" error on the browser
but what really Apache did is the following (excerpt from error.log) :



[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.


-----Messaggio originale-----
Da: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
Inviato: gioved? 20 novembre 2003 13.20
A: mod_python@modpython.org
Oggetto: [mod_python] Apache child process restarting under Win32 -
import errors


Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From martin.clausen at privat.dk  Sat Nov 22 23:13:53 2003
From: martin.clausen at privat.dk (martin.clausen@privat.dk)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>

How do I do form-based authentication using mod_python / Apache. I would like to use Apaches authentication mechanism(as used in the mod_pyhton manual(release 3.0.3), but would like a form-based login/password solution instead of the pop-up - is that possible ?

The only solution I have been able to find after a lot of googling and mailing list searches is to use javascript to prefix the login and password to the request from a form on a "cover" page, but besides from the inelegance inhenrent in this solution and the security risk in transmitting the password as part of the request, it would not prevent the pop-up from appearing if someone requested the login script directly.

Any help is appreciated, also if the you have a solution for form-based authentication that does not use Apache.

Regards,

Martin

From jciccale at mac.com  Sun Nov 23 02:16:01 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <7001386.1069550161586.JavaMail.jciccale@mac.com>

Hi, 
   I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly I'm unable to use the new Session handling classes, I get "Failled to acquire global mutex lock" and this on apache's error log
  "(13)Permission denied: Failed to acquire global mutex lock at index 9"

 Anyone that is getting the same errors?

Thanks,
Julian
From grisha at modpython.org  Sat Nov 22 21:43:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <20031122214159.N734@onyx.ispol.com>


See if you can get the latest sources from CVS - I believe this has been
fixed soon after 3.1.1b was released.

Grisha

On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi,

>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
> Sadly I'm unable to use the new Session handling classes, I get "Failled
> to acquire global mutex lock" and this on apache's error log
>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
>
> Thanks,
> Julian
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From jciccale at mac.com  Sun Nov 23 13:24:26 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <1252866.1069590266578.JavaMail.jciccale@mac.com>

Hi and thanks,
  I got that problem solved but now it seems it's happening something weird. I compiled the sources from CVS (enabling the debugging lines on the locking calls). On a first request i get these lines:

[Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
[Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429

, which seems to lock mutex at ix 30. (and remains locked even when the request has completed). Then when a second request comes i get this:

[Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425

. Obviously that process remains locked forever, waiting on a lock forever.
How it was meant to work the locking mechanism? It seems the problem is in Session.py and how it handles the locking..

BTW. I'm working on a very cool project take a look (pythonwork.sf.net)
Bye,
Julian

On Sunday, November 23, 2003, at 03:43AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>See if you can get the latest sources from CVS - I believe this has been
>fixed soon after 3.1.1b was released.
>
>Grisha
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi,
>
>>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
>> Sadly I'm unable to use the new Session handling classes, I get "Failled
>> to acquire global mutex lock" and this on apache's error log
>>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>>
>>  Anyone that is getting the same errors?
>>
>> Thanks,
>> Julian
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>
>

From tropezien at croxx.de  Sun Nov 23 15:16:33 2003
From: tropezien at croxx.de (Tropezien)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <200311231516.33716.tropezien@croxx.de>

Am Sonntag, 23. November 2003 02:16 schrieb Julian Ciccale:
> Hi,
>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly
> I'm unable to use the new Session handling classes, I get "Failled to
> acquire global mutex lock" and this on apache's error log "(13)Permission
> denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python 3.1.2b.
Some further investigations cleared up that mod_python tries to get more than 
400 semaphores during launch of httpd. There is an estimated amount of 16 
threads (AP_MPMQ_MAX_THREADS) for all (25) possible daemon-process 
( AP_MPMQ_MAX_DAEMONS).
My quick and dirty solution was to increase the amount of system semaphores 
supported by the Linux-kernel with

    >georg@jeordi:/etc/rc.d$ /sbin/sysctl kernel.sem
    kernel.sem = 256        32000   32      512

I changed my /etc/sysctl.conf to:

    kernel.sem = 500 32000 32 512

and added the line:

    sysctl -p

into the Init-Skript of the Apache (rc.httpd) before the httpd-daemon is 
started.

Ciao, Georg

From tim.stebbing at nunatak.com.au  Mon Nov 24 09:18:32 2003
From: tim.stebbing at nunatak.com.au (Timothy Stebbing)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] mod_dav phases question
Message-ID: <3FC13238.4030208@nunatak.com.au>

The apache module 'mod_dav' provides webdav ability to be added to 
<directory>'s.
this provides the usual web_dav calls, one of which is 'PUT'. Apache 
handles put internally,
however we are using mod_dav as part of our CMS, to allow our users to 
'checkout' a document
to a webdav folder and open the file, and we want to capture the put 
phase, so we can take the
newly modified file from the webdav folder and check it back in to our cms.

How can I capture the mod_dav put phase with mod_python?  I was thinking 
an apache filter,
but how can I have that applied only to the mod_dav put phase, rather 
than every request? Is
there some large list somewhere of all the possible phases provided by 
every module I can apply
filters to?

-TJS


From grisha at modpython.org  Sun Nov 23 20:12:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <200311231516.33716.tropezien@croxx.de>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
 <200311231516.33716.tropezien@croxx.de>
Message-ID: <20031123201050.S16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Tropezien wrote:

> Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> 3.1.2b. Some further investigations cleared up that mod_python tries to
> get more than 400 semaphores during launch of httpd.

Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
semaphores, which is 32. What does your log say when you start httpd?

Grisha


From grisha at modpython.org  Sun Nov 23 20:15:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <1252866.1069590266578.JavaMail.jciccale@mac.com>
References: <1252866.1069590266578.JavaMail.jciccale@mac.com>
Message-ID: <20031123201252.N16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi and thanks,

>   I got that problem solved but now it seems it's happening something
> weird. I compiled the sources from CVS (enabling the debugging lines on
> the locking calls). On a first request i get these lines:
>
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>
> , which seems to lock mutex at ix 30. (and remains locked even when the
> request has completed). Then when a second request comes i get this:
>
> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>
> . Obviously that process remains locked forever, waiting on a lock forever.

How are you using your sessions? Do you by any chance assign it to a
global variable - the session releases the lock when you call it's ulock()
method explicitely, or when it goes out of scope, so assigning it to a
global would make it stay there and locked even after the request is done.

Grisha
From jciccale at mac.com  Mon Nov 24 02:49:40 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6232663.1069638580829.JavaMail.jciccale@mac.com>

Kind of. What I do is the followoing

try:
    from mod_python.Session import Session as DefaultSessionCall
except:
    def DefaultSessionCall( r ):
       return None

, this is a peice of code I use to make configurable the Session class the user wants to use. I also then try to call a setter method on a user's class to pass the session he works on. How should I use the session? The locking mechanism is needed for read/write or just write? I think I may write a session wrapper class to lock unlock on user call to get/set properties..


 
On Monday, November 24, 2003, at 02:15AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi and thanks,
>
>>   I got that problem solved but now it seems it's happening something
>> weird. I compiled the sources from CVS (enabling the debugging lines on
>> the locking calls). On a first request i get these lines:
>>
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>>
>> , which seems to lock mutex at ix 30. (and remains locked even when the
>> request has completed). Then when a second request comes i get this:
>>
>> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>>
>> . Obviously that process remains locked forever, waiting on a lock forever.
>
>How are you using your sessions? Do you by any chance assign it to a
>global variable - the session releases the lock when you call it's ulock()
>method explicitely, or when it goes out of scope, so assigning it to a
>global would make it stay there and locked even after the request is done.
>
>Grisha
>
>
From grisha at modpython.org  Sun Nov 23 23:25:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:54 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <6232663.1069638580829.JavaMail.jciccale@mac.com>
References: <6232663.1069638580829.JavaMail.jciccale@mac.com>
Message-ID: <20031123231631.U16686@onyx.ispol.com>



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Kind of. What I do is the followoing
>
> try:
>     from mod_python.Session import Session as DefaultSessionCall
> except:
>     def DefaultSessionCall( r ):
>        return None
>
> , this is a peice of code I use to make configurable the Session class
> the user wants to use.

This is fine, but make sure that after you do:

   session = DefaultSessionCall(r)

that the session variable is not referenced by anything after the request
is done. Or you can explicitely unlock it:

   session.unlock()

> I also then try to call a setter method on a user's class to pass the
> session he works on. How should I use the session? The locking mechanism
> is needed for read/write or just write?

You don't need to worry about locking for read and write, that locking is
taken care of automtically. You need session locking to make sure that no
two HTTP requests for the same session execute at the same time.

> I think I may write a session wrapper class to lock unlock on user call
> to get/set properties..

Your wrapper can avoid session locking altogether by instantiating it as
such:

session = Session(req, lock=0)

Grisha
From randallk at cpsc.ucalgary.ca  Sun Nov 23 23:02:04 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <Pine.LNX.4.44.0311232250010.8753-100000@csl>


Hi,

I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
the session handling stuff.

When I try to connect to my postgresql database in the following way:

from pyPgSQL import PgSQL
pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')


Apache error_log says:

PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'

and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
When I do the same outside apache/mod_python I can see the connect function.

Any thoughts?


dir(PgSQL)
running within mod_python:

['BooleanType', 'BufferType', 'BuiltinFunctionType',
'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
'LongType', 'MethodType', 'ModuleType', 'NoneType',
'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']

dir(PgSQL)
running outside mod_python:

['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
're_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
'threadsafety', 'version', 'weakref']


httpd.conf:

LoadModule python_module /var/www2/modules/mod_python.so
<Directory /var/www2/htdocs/billing>  
SetHandler python-program
PythonHandler mod_python.publisher
</Directory>


From jciccale at mac.com  Mon Nov 24 09:32:57 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <12600642.1069662777616.JavaMail.jciccale@mac.com>

Which python version are you using?

Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?

Check it with
import sys
print sys.version


On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>Hi,
>
>I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>the session handling stuff.
>
>When I try to connect to my postgresql database in the following way:
>
>from pyPgSQL import PgSQL
>pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>
>
>Apache error_log says:
>
>PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>
>and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
>When I do the same outside apache/mod_python I can see the connect function.
>
>Any thoughts?
>
>
>dir(PgSQL)
>running within mod_python:
>
>['BooleanType', 'BufferType', 'BuiltinFunctionType',
>'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>'LongType', 'MethodType', 'ModuleType', 'NoneType',
>'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>
>dir(PgSQL)
>running outside mod_python:
>
>['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>'threadsafety', 'version', 'weakref']
>
>
>httpd.conf:
>
>LoadModule python_module /var/www2/modules/mod_python.so
><Directory /var/www2/htdocs/billing>  
>SetHandler python-program
>PythonHandler mod_python.publisher
></Directory>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From jciccale at mac.com  Mon Nov 24 10:44:17 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6678826.1069667057374.JavaMail.jciccale@mac.com>

Thanks, BTW the "lock" argument its only available through BaseSession's __init__ and not DbmSession/MemorySession. It would be interesting to have it.. There are cases where you may want to request be processed at the same time for the same session, for example if the users calls a pdf generating page and at the same time he opens another browser win to do soma other stuff.

It seems that my problem would be the scope stuff cause I dont get my data saved even by unlocking the session.
By now I've made a work around by calling unlock & save when the request is done

Thanks,
Julian

I removed the definitions and I'm using directly mod_python's Session object. then action
On Monday, November 24, 2003, at 05:25AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Kind of. What I do is the followoing
>>
>> try:
>>     from mod_python.Session import Session as DefaultSessionCall
>> except:
>>     def DefaultSessionCall( r ):
>>        return None
>>
>> , this is a peice of code I use to make configurable the Session class
>> the user wants to use.
>
>This is fine, but make sure that after you do:
>
>   session = DefaultSessionCall(r)
>
>that the session variable is not referenced by anything after the request
>is done. Or you can explicitely unlock it:
>
>   session.unlock()
>
>> I also then try to call a setter method on a user's class to pass the
>> session he works on. How should I use the session? The locking mechanism
>> is needed for read/write or just write?
>
>You don't need to worry about locking for read and write, that locking is
>taken care of automtically. You need session locking to make sure that no
>two HTTP requests for the same session execute at the same time.
>
>> I think I may write a session wrapper class to lock unlock on user call
>> to get/set properties..
>
>Your wrapper can avoid session locking altogether by instantiating it as
>such:
>
>session = Session(req, lock=0)
>
>Grisha
>
>
From gwidion at mpc.com.br  Mon Nov 24 10:13:31 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
Message-ID: <200311241013.31596.gwidion@mpc.com.br>

Hi there.

I am actually implementing this in the very first mod python app I am 
developing.


You actually have to override the Auth Handler from apache with a 
Python Module. 

If you google for it, you will be offered a lot of ready-made session 
control stuff, as part of existing packages.

It is not, however, that hard to implement form scratch. Here is my 
.htaccess:

  AddHandler python-program .py
 PythonHandler dummy
 PythonAuthenHandler verify


As you can see, the PythonAuthenHandler is "verify.py" which is 
called. (inside it, the authenhandler() function is called)

I them encode some session data (like originating IP + user password) 
to generate a MD5 hashed cookie I send to the browser to further 
authentication. In the server, I save a session ID file with  the 
session data, and regenerate the cookie at each page load (which goes 
thru the "AuthenHandler" again) and compare it with the browser-sent 
cookie.

One thing I am still trying to find out is how to detect when the 
person navigate to another site  - in which case, the session should 
be terminated. I mean: I cannot allow that once in other site one can 
be back in the secure section by hitting "back".

As of the time, I plan to implement this thru a javascript that will 
destroy the cookie in a "unload()" event. But I would appreciate more 
suggestions.


Regards,

	JS
	-><-


On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
> How do I do form-based authentication using mod_python / Apache. I
> would like to use Apaches authentication mechanism(as used in the
> mod_pyhton manual(release 3.0.3), but would like a form-based
> login/password solution instead of the pop-up - is that possible ?
>
> The only solution I have been able to find after a lot of googling
> and mailing list searches is to use javascript to prefix the login
> and password to the request from a form on a "cover" page, but
> besides from the inelegance inhenrent in this solution and the
> security risk in transmitting the password as part of the request,
> it would not prevent the pop-up from appearing if someone requested
> the login script directly.
>
> Any help is appreciated, also if the you have a solution for
> form-based authentication that does not use Apache.
>
> Regards,
>
> Martin
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 

Este e-mail ?, exceto pelas partes citadas
de outros e-mails, copyright(c) de Jo?o Sebasti?o
de Oliveira Bueno. Nenhuma c?pia deste e-mail ou 
parte do mesmo pode existir nas depend?ncias 
de, ou em posse de funcion?rios, de associa??es
protetoras de direitos autorais Brasileiras,
 dos Estados Unidos da Am?rica, ou de outros
pa?ses. Em particular essa exce??o do direito
de leitura e posse deste e-mail se extende ?
ABRA, ABPI, ABES, BSA, RIAA e MPAA. Violadores
est?o infringindo as leis internacionais de 
direitos autorais e sujeitos ?s penalidades cab?veis.
Voc? pode re-utilizar, emendar,  acrescentar
suas palavras e citar e re-enviar qualquer 
parte do mesmo, desde que essa nota seja 
preservada e se n?o pertencer a alguma
das entidades supracitadas.




From davidf at sjsoft.com  Mon Nov 24 14:23:47 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:55 2004
Subject: R: [mod_python] Apache child process restarting under Win32 -
 imp	ort errors
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
Message-ID: <3FC1F853.4020607@sjsoft.com>

Manera, Villiam wrote:

>we have had the same behavior with ':&' 
>  
>
Thanks, this was interesting...

>Da: 	Cassiano, Marco  
>Inviato:	luned? 16 giugno 2003 11.53
>A:	'security@apache.org'
>Cc:	'Gregory (Grisha) Trubetskoy'
>Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF
>
>I would like to inform you of the behaviour of Apache when a link with a
>particular HREF is clicked.
>
>First of all, our configuration is : 
>
>Windows 2000 Server SP3
>Apache 2.0.46
>Mod-python 3.0.3
>Active State Python 2.2.2
>
>
>We have a python script that runs under mod-python which looks into the
>database to find some articles and builds a table with the links to
>"explode" each article and look into its details. This HTML table contains a
>HREF for each article. Each HREF actually contains a call to another python
>script that does the "explode" job. We pass the parameters to this script in
>the usual "&" concatenation form.
>It happened that one of the articles had a semicolon (";") as the final
>character of its description
>so the HREF was built in following way : "descriptionwithfinal;&next parm".
>In other words the HREF contained the sequence ";&".
>When we clicked on this link we got a "Page not found" error on the browser
>but what really Apache did is the following (excerpt from error.log) :
>
>
>
>[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
>3221225477 -- Restarting.
>
>
>-----Messaggio originale-----
>Da: mod_python-bounces@modpython.org
>[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
>Inviato: gioved? 20 novembre 2003 13.20
>A: mod_python@modpython.org
>Oggetto: [mod_python] Apache child process restarting under Win32 -
>import errors
>
>
>Hi
>
>We are having trouble with our application suddenly producing crashes 
>for all browsers connected to the system.
>We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
>It seems that the problem is that a module that was imported correctly 
>somehow is not anymore...
>
>In trying to track this down, I found the following in the Apache error log:
>[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
>status 3221225477 -- Restarting.
>[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.
>
>This happens directly before the first occurence of the problem (I've 
>taken off the date, [error], [client ip-address]:
>PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
>HandlerDispatch
>    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
>&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
>handler
>    server = getserver(modulename, instancename), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
>getserver
>    raise AttributeError(errormessage), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web: AttributeError: module 
>'jLogbook.python.config' has no attribute 'AmerivenIndexPage'
>
>I made it print out the contents of the module at this point in the 
>error log:
>module is <module 'jLogbook.python.config' from 
>'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
>are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
>'os', 'sys']
>This seems to indicate that only half of this module was imported... 
>perhaps because one of the other imports failed (these seem to be some 
>win32 extension modules)
>
>I was wondering if anyone else has experienced problems with Apache 
>restarting, and why this happens...
>
>David
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>  
>


From davidf at sjsoft.com  Mon Nov 24 14:25:20 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <200311241013.31596.gwidion@mpc.com.br>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br>
Message-ID: <3FC1F8B0.1010001@sjsoft.com>

Joao S. O. Bueno wrote:

>Hi there.
>
>I am actually implementing this in the very first mod python app I am 
>developing.
>
>
>You actually have to override the Auth Handler from apache with a 
>Python Module. 
>
>If you google for it, you will be offered a lot of ready-made session 
>control stuff, as part of existing packages.
>
>It is not, however, that hard to implement form scratch. Here is my 
>.htaccess:
>
>  AddHandler python-program .py
> PythonHandler dummy
> PythonAuthenHandler verify
>
>
>As you can see, the PythonAuthenHandler is "verify.py" which is 
>called. (inside it, the authenhandler() function is called)
>
>I them encode some session data (like originating IP + user password) 
>to generate a MD5 hashed cookie I send to the browser to further 
>authentication. In the server, I save a session ID file with  the 
>session data, and regenerate the cookie at each page load (which goes 
>thru the "AuthenHandler" again) and compare it with the browser-sent 
>cookie.
>
>One thing I am still trying to find out is how to detect when the 
>person navigate to another site  - in which case, the session should 
>be terminated. I mean: I cannot allow that once in other site one can 
>be back in the secure section by hitting "back".
>
>As of the time, I plan to implement this thru a javascript that will 
>destroy the cookie in a "unload()" event. But I would appreciate more 
>suggestions.
>  
>
The questions is, what do you mean by being in another site?
Someone can easily be in multiple sites at once.
Maybe what you want is a timeout so if someone hasn't used their session 
for 10 minutes they have to log in again

David

>
>Regards,
>
>	JS
>	-><-
>
>
>On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
>  
>
>>How do I do form-based authentication using mod_python / Apache. I
>>would like to use Apaches authentication mechanism(as used in the
>>mod_pyhton manual(release 3.0.3), but would like a form-based
>>login/password solution instead of the pop-up - is that possible ?
>>
>>The only solution I have been able to find after a lot of googling
>>and mailing list searches is to use javascript to prefix the login
>>and password to the request from a form on a "cover" page, but
>>besides from the inelegance inhenrent in this solution and the
>>security risk in transmitting the password as part of the request,
>>it would not prevent the pop-up from appearing if someone requested
>>the login script directly.
>>
>>Any help is appreciated, also if the you have a solution for
>>form-based authentication that does not use Apache.
>>
>>Regards,
>>
>>Martin
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>    
>>
>
>  
>


From gwidion at mpc.com.br  Mon Nov 24 11:15:14 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC1F8B0.1010001@sjsoft.com>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br> <3FC1F8B0.1010001@sjsoft.com>
Message-ID: <200311241115.14240.gwidion@mpc.com.br>

On Monday 24 November 2003 10:25, David Fraser wrote:
> Joao S. O. Bueno wrote:

> The questions is, what do you mean by being in another site?
> Someone can easily be in multiple sites at once.
> Maybe what you want is a timeout so if someone hasn't used their
> session for 10 minutes they have to log in again
>
> David

What must be avoided is that one does get back to the secure session 
by hitting the "back" button.
I will also put timeout controls, but only them will  be far from the 
ideal situation. 

BTW, I forgot to mention, I have to use apache 2.7.8 in apache 1.3, so 
I have no resource to mod_python session facilities.

Regards,

	JS
	-><-


From randallk at cpsc.ucalgary.ca  Mon Nov 24 09:37:03 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <12600642.1069662777616.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311240909230.8753-100000@csl>




On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Which python version are you using?
> 
> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> 
> Check it with
> import sys
> print sys.version
> 

Yep, they're the same:

apache:
[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured

vs.
python -v

Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2

(and there's only one 2.3.2 installed ).

sys.path is identical for both as well ( except for the script's own directory, which is
chrooted to htdocs by apache as expected.)

Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.

python 2.3.2
pyPgSQL 2.4
mod_python 3.1.2b
apache 2.0.48
postgresql 7.4

Keith

> 
> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >Hi,
> >
> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
> >the session handling stuff.
> >
> >When I try to connect to my postgresql database in the following way:
> >
> >from pyPgSQL import PgSQL
> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
> >
> >
> >Apache error_log says:
> >
> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
> >
> >and indeed when I do a dir(pgSQL), it lists no connect function.
> >When I do the same outside apache/mod_python I can see the connect function.
> >
> >Any thoughts?
> >
> >
> >dir(PgSQL)
> >running within mod_python:
> >
> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
> >
> >dir(PgSQL)
> >running outside mod_python:
> >
> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
> >'threadsafety', 'version', 'weakref']
> >
> >
> >httpd.conf:
> >
> >LoadModule python_module /var/www2/modules/mod_python.so
> ><Directory /var/www2/htdocs/billing>  
> >SetHandler python-program
> >PythonHandler mod_python.publisher
> ></Directory>
> >
> >
> >_______________________________________________
> >Mod_python mailing list
> >Mod_python@modpython.org
> >http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 


From neel at mediapulse.com  Mon Nov 24 13:55:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>

I'm usally surprised by how many web developers do not fully understand
how authencation works over http.

First you have to understand it is truly impossible to create a secure
connection when you have no control over the client.  Worse, the
"connection" is not a connection at all, but a series of connection so
we have to check the auth for each and every one of them.

The best setup you can have is http-auth over an SSL connection.  The
login info is never written to disk on the client side.  The downside is
the browser will remember the login info until it is closed.  Also, if
the connection is not encryped (ssl), then a packet sniffer can get the
login info from the heards sent by the client.

Sadly there is no way to take login fields on a form and pass the to the
client headers as would happen in http-auth.  Because the connection is
statless, you must then store this login info in cookies, hidden fields,
or on the server and pass the client a session key in hidden fields or a
cookie.

Besides watching with a packet sniffer for headers to get the login
info, you can also get the cookie stored on the client system as well.
Browsers may write session cookies to disk, even though there is no
need.  Firebird does this, and even remembers session cookies after it
is closed and re-opened (which I assume is a bug, but none the less it
does do it).

So what can you do if you want the sexy login fields, but still be
secure (as is possible)?  A lot of things, we may not be able to be 100%
secure, but that doesn't mean we have to make it easy.  Here is
something things to do (many thanks to the Albatross developers for
showing me much of this):

1.  Build a string or object with as much detail about the client as
possible, (IP, user-agent, timestamp).
2.  take this string/object gzip it (we have a space limit)
3.  Sign this string with MD5 and a key only the server will ever know.
4.  base64 encode the signed string to make sure all characters are
legit.

...now when we decode the cookie...

1.  base64 decode it, and check our md5 sig
2.  ungzip the string and parse it back to it's object/string form
3.  make sure the IP, user-agent match the current request
4.  make sure the timestamp is within our limit for a login

Now even if someone gets a copy of the cookie, if they don't know the
MD5 key they can't alter it.  Most likely their ip and or user-agent
won't match either, but if it does the odds are the timeout may have
been reached already, esp if it's kept low like 5 or 10 minutes.

Mike

From michael at dynamine.net  Mon Nov 24 11:10:44 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC257B4.4050606@dynamine.net>

Michael C. Neel wrote:

> So what can you do if you want the sexy login fields, but still be
> secure (as is possible)?  A lot of things, we may not be able to be 100%
> secure, but that doesn't mean we have to make it easy.  Here is
> something things to do (many thanks to the Albatross developers for
> showing me much of this):
> 
> 1.  Build a string or object with as much detail about the client as
> possible, (IP, user-agent, timestamp).
> 2.  take this string/object gzip it (we have a space limit)
> 3.  Sign this string with MD5 and a key only the server will ever know.
> 4.  base64 encode the signed string to make sure all characters are
> legit.
> 
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

This is pretty much what the Session handling code in mod_python does 
now, so there's really no need to bother re-inventing the wheel :-)

PS - Grisha, nice job implementing the Session classes.  I couldn't have 
done it better myself, and the code is a nice example of metaclasses and 
subclassing native types that's not well covered in the Python 2.2 
documentation.  (I had to read the PEPs to understand what was going on, 
but it was a rewarding process.)

--Michael

From cs1spw at bath.ac.uk  Mon Nov 24 13:56:15 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC2625F.9090906@bath.ac.uk>

Michael C. Neel wrote:
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

One potential problem with checking the IP is that some people access 
the internet through a rotating proxy, meaning that subsequent requests 
might come from a different IP address (I've heard AOL does this). One 
way around this would be to check that at least the first two parts of 
the IP address stayed the same as only the last two would be likely to 
change if a rotating proxy was in use.

From dpopowich at mtrsd.k12.ma.us  Mon Nov 24 15:10:15 2003
From: dpopowich at mtrsd.k12.ma.us (Daniel J. Popowich)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC2625F.9090906@bath.ac.uk>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
	<3FC2625F.9090906@bath.ac.uk>
Message-ID: <16322.26023.955700.179682@gargle.gargle.HOWL>

Simon Willison writes:
> Michael C. Neel wrote:
> > ...now when we decode the cookie...
> > 
> > 1.  base64 decode it, and check our md5 sig
> > 2.  ungzip the string and parse it back to it's object/string form
> > 3.  make sure the IP, user-agent match the current request
> > 4.  make sure the timestamp is within our limit for a login
> 
> One potential problem with checking the IP is that some people access 
> the internet through a rotating proxy, meaning that subsequent requests 
> might come from a different IP address (I've heard AOL does this). One 
> way around this would be to check that at least the first two parts of 
> the IP address stayed the same as only the last two would be likely to 
> change if a rotating proxy was in use.

But the people most likely to steal your identity through packet
sniffing are the people on your own subnet; the teenage hacker down
the street looking for a thrill.  That hacker, being on the same
subnet, would have the same network address and thus match the first
few octects of the ip addr.

Dan

From jciccale at mac.com  Mon Nov 24 23:38:06 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <11947283.1069713486905.JavaMail.jciccale@mac.com>

Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.

- julcicc -
 
On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Which python version are you using?
>> 
>> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
>> 
>> Check it with
>> import sys
>> print sys.version
>> 
>
>Yep, they're the same:
>
>apache:
>[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
>
>vs.
>python -v
>
>Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
>[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
>
>(and there's only one 2.3.2 installed ).
>
>sys.path is identical for both as well ( except for the script's own directory, which is
>chrooted to htdocs by apache as expected.)
>
>Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
>
>python 2.3.2
>pyPgSQL 2.4
>mod_python 3.1.2b
>apache 2.0.48
>postgresql 7.4
>
>Keith
>
>> 
>> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
>> 
>> >
>> >Hi,
>> >
>> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>> >the session handling stuff.
>> >
>> >When I try to connect to my postgresql database in the following way:
>> >
>> >from pyPgSQL import PgSQL
>> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>> >
>> >
>> >Apache error_log says:
>> >
>> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>> >
>> >and indeed when I do a dir(pgSQL), it lists no connect function.
>> >When I do the same outside apache/mod_python I can see the connect function.
>> >
>> >Any thoughts?
>> >
>> >
>> >dir(PgSQL)
>> >running within mod_python:
>> >
>> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
>> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
>> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>> >
>> >dir(PgSQL)
>> >running outside mod_python:
>> >
>> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>> >'threadsafety', 'version', 'weakref']
>> >
>> >
>> >httpd.conf:
>> >
>> >LoadModule python_module /var/www2/modules/mod_python.so
>> ><Directory /var/www2/htdocs/billing>  
>> >SetHandler python-program
>> >PythonHandler mod_python.publisher
>> ></Directory>
>> >
>> >
>> >_______________________________________________
>> >Mod_python mailing list
>> >Mod_python@modpython.org
>> >http://mailman.modpython.org/mailman/listinfo/mod_python
>> >
>> >
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>> 
>
>
>
>
From randallk at cpsc.ucalgary.ca  Mon Nov 24 16:53:31 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <11947283.1069713486905.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311241651070.30459-100000@csl>


Yep, new apache was running as different user, without linker path with libpq.  ;P
Thanks a lot.
Keith



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.
> 
> - julcicc -
>  
> On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >
> >
> >On Mon, 24 Nov 2003, Julian Ciccale wrote:
> >
> >> Which python version are you using?
> >> 
> >> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> >> 
> >> Check it with
> >> import sys
> >> print sys.version
> >> 
> >
> >Yep, they're the same:
> >
> >apache:
> >[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
> >
> >vs.
> >python -v
> >
> >Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
> >[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
> >
> >(and there's only one 2.3.2 installed ).
> >
> >sys.path is identical for both as well ( except for the script's own directory, which is
> >chrooted to htdocs by apache as expected.)
> >
> >Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
> >
> >python 2.3.2
> >pyPgSQL 2.4
> >mod_python 3.1.2b
> >apache 2.0.48
> >postgresql 7.4
> >

From gwidion at mpc.com.br  Tue Nov 25 00:32:40 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <200311250032.40790.gwidion@mpc.com.br>

On Monday 24 November 2003 16:55, Michael C. Neel wrote:

> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login
>
> Now even if someone gets a copy of the cookie, if they don't know
> the MD5 key they can't alter it.  Most likely their ip and or
> user-agent won't match either, but if it does the odds are the
> timeout may have been reached already, esp if it's kept low like 5
> or 10 minutes.
>
> Mike


Wow...I got it all right without asking.
>From everything you wrote, the only thing I did not do was: encode the 
user agent string - I just used the client IP.
And I did not use GZIP because the MD5 hash has got a fixed length.

Oh..no..let's see...it is a bit different, what I had done:
1) pick up login time, client IP, server side Key, random session ID 
strings and save them server side
2) generate a MD5 hash from the above and use it as a cookie.
3) at each page load, pick the cookie, and compare it with one 
regenerated from strings saved on the server side, (and client IP). 
If there is no time out, and the hashed strings matched, serve the 
page.


Again, I am not  using mod_python's sessions because I am restricted 
to mod_python 2.7.x for this project.

Regards,

	JS
	-><-




From dwmp at opti.cgi.net  Mon Nov 24 22:53:46 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] PSP imports
Message-ID: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>


It appears as though the PSP module doesn't check dependencies for 
modification times.  If I create a module and reference it from a PSP page 
and make a request for the page, then I change the module and make a second 
request the module is not reloaded.  Has this been overlooked or is this a 
'feature'?

Also, it appears as though the PSP module prefers to store its cached 
compiled code in a DBM file instead of memory.  Why bother with a DBM 
file?  So long as each Apache process is setup to handle a sufficiently 
large number of requests before killing itself then wouldn't a memory only 
solution be faster, especially in the worker process model?  It seems a 
little strange that DBM is preferred over memory storage.

-Dan


From grisha at modpython.org  Tue Nov 25 00:22:54 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <20031125001750.R36241@onyx.ispol.com>


On Mon, 24 Nov 2003, Dan W. wrote:

> It appears as though the PSP module doesn't check dependencies for
> modification times.  If I create a module and reference it from a PSP
> page and make a request for the page, then I change the module and make
> a second request the module is not reloaded.  Has this been overlooked
> or is this a 'feature'?

it's a feature of Python (not mod_python) ;-)

if you want the module properly reloaded when it changes, import it like
this:

mymodule = apache.import_module('mymodule')

> Also, it appears as though the PSP module prefers to store its cached
> compiled code in a DBM file instead of memory.

Not unless you tell it so. By default it's memory.

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html

HTH,

Grisha
From dwmp at opti.cgi.net  Mon Nov 24 23:43:01 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>

At 12:22 AM 11/25/2003 -0500, you wrote:

>On Mon, 24 Nov 2003, Dan W. wrote:
>
> > It appears as though the PSP module doesn't check dependencies for
> > modification times.  If I create a module and reference it from a PSP
> > page and make a request for the page, then I change the module and make
> > a second request the module is not reloaded.  Has this been overlooked
> > or is this a 'feature'?
>
>it's a feature of Python (not mod_python) ;-)
>
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

Ahhh, Ok.  I guess that means I can't use the form:

from mypackage.mymodule import *


I have not yet familiarized myself with the source enough to say, but it 
would be nice to have a command which when supplied at the beginning of a 
PSP file would tell it to autoreimport.  Maybe something like:

<%
psp.autoreimport(true)
%>
<html>
...

I've played around with replacing the builtin _import with a home grown 
import function to do just this in a different project.  Perhaps it could 
be done here too.  Perhaps after I become more familiar with the source 
I'll be able to help out to that end.



> > Also, it appears as though the PSP module prefers to store its cached
> > compiled code in a DBM file instead of memory.
>
>Not unless you tell it so. By default it's memory.
>
>http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html


Sorry, I must have read the source wrong.  I'll have to take another look.

-Dan

From dwmp at opti.cgi.net  Tue Nov 25 00:36:03 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2EE6F.8080601@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>

At 09:53 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>Ahhh, Ok.  I guess that means I can't use the form:
>>from mypackage.mymodule import *
>
>It's a good idea to avoid that type of namespace pollution anyway, as it 
>can often lead to conflicts.  It also detracts from code readability 
>(avoiding the dreaded "where did that name come from again?" question when 
>doing code reviews is a good thing, IMHO).
>
>--Michael

That's a good point Michael.  That was probably a bad habit to pick 
up.  However, I think a overloaded import could still be 
useful.  Overloading the builtin import would allow a PSP file to control 
autoreloading for its entire dependency tree (modules which call other 
modules, etc.).  This would allow one to easily turn autoreloading on 
during development and to easily turn it off for production deployment.

I'm still cutting my teeth on the mod_python code base, but figured I'd 
throw that idea out there in the mean time.

-Dan

From michael at dynamine.net  Mon Nov 24 22:43:43 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <3FC2FA1F.20905@dynamine.net>

Dan W. wrote:

> That's a good point Michael.  That was probably a bad habit to pick up.  
> However, I think a overloaded import could still be useful.  Overloading 
> the builtin import would allow a PSP file to control autoreloading for 
> its entire dependency tree (modules which call other modules, etc.).  
> This would allow one to easily turn autoreloading on during development 
> and to easily turn it off for production deployment.

Consider that you might want not to use PSP.  I've actually found that 
it gets in the way of the separation of code and content, which is 
important when the designer and the coder are two different people.

I design my mod_python apps like so:

template = """
<html>
...
<!-- have the designers place %(variable)s where necessary
      in the template for doing performing substitution
      during the processing phase -->
</html>
"""

def handler(req):
   # Reload modules here if necessary
   # Code goes here
   # If you want to override the template, you can fetch it from the file
   # system
   req.write(template % vars())

Of course, if you're already married to the PSP solution, then there you 
have it...

--Michael

From dwmp at opti.cgi.net  Tue Nov 25 01:04:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125005652.010c6008@mail.pyxos.com>

At 10:43 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>That's a good point Michael.  That was probably a bad habit to pick up.
>>However, I think a overloaded import could still be useful.  Overloading 
>>the builtin import would allow a PSP file to control autoreloading for 
>>its entire dependency tree (modules which call other modules, etc.).
>>This would allow one to easily turn autoreloading on during development 
>>and to easily turn it off for production deployment.
>
>Consider that you might want not to use PSP.  I've actually found that it 
>gets in the way of the separation of code and content, which is important 
>when the designer and the coder are two different people.
>
>I design my mod_python apps like so:
>
>template = """
>...
>"""
>
>def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
>Of course, if you're already married to the PSP solution, then there you
>have it...


Thanks for the advice.  I'm not married to anything yet.  I'm moving from 
an in-house Python based application server to mod_python and PSP just 
seemed like the a natural move.  My plan was to build most of the dynamic 
code in python modules and then simply insert html into the templates with 
PSP expression syntax.  I can see where writing my own handler for these 
things would have advantages, but on the other hand I don't want to 
reinvent the wheel.  I'll play with that a bit.

-Dan

From neel at mediapulse.com  Tue Nov 25 10:50:58 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>

> And I did not use GZIP because the MD5 hash has got a fixed length.
> 
Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
a secret string and the data.  Here is the methods from albatross:

    def sign(self, text):
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        text = m.digest() + text
        return text

    def unsign(self, text):
        digest = text[:16]
        text = text[16:]
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        if m.digest() == digest:
            return text
        return ''

You can of course store the text server side and just pass the client
the MD5 hash/key, you just have to have a way to clear out old session
files and also make sure you have enough disk space for the amount of
sessions you expect.

Mike

From tropezien at croxx.de  Tue Nov 25 16:14:01 2003
From: tropezien at croxx.de (tropezien@croxx.de)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <27667116$10697725673fc36f17e5bce0.87890966@config18.schlund.de>


"Gregory (Grisha) Trubetskoy" <grisha@modpython.org> schrieb am
24.11.2003, 02:12:42:
> 
> 
> On Sun, 23 Nov 2003, Tropezien wrote:
> 
> > Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> > 3.1.2b. Some further investigations cleared up that mod_python tries to
> > get more than 400 semaphores during launch of httpd.
> 
> Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
> semaphores, which is 32. What does your log say when you start httpd?
> 
Yes, you are right. The previously installed mod_python-3.1.0a made was
the culprit for my mentioned change in sysctl.conf. I have reset the
maximum amount of semaphores to the original value and mod_python starts
as well as before.

Ciao, Georg
From jciccale at mac.com  Wed Nov 26 01:33:10 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] 
	Request object attribute "content_type" does not support UNICODE
	STRINGS
Message-ID: <12054078.1069806790832.JavaMail.jciccale@mac.com>

When I try to set content_type to a unicode string, it gives a TypeError saying that content_type can only be string. I don't know if this is correct. Although content types will not use any hich codes, in my case the content-type value I read it from an XML file that IS in Unicode, therefore I must convert it using str() which I dont like cause if I get anything there that is not really string (Unicode or Normal) python will anyway convert it.
Is this behaviour expected?
From grisha at modpython.org  Tue Nov 25 21:45:35 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:55 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<3FC2FA1F.20905@dynamine.net>
Message-ID: <20031125213815.V52007@onyx.ispol.com>


One of the ways to use PSP, which probably isn't immediately obvious from
the documentation, is as a templating system, e.g. configuring mod_python
to use the publisher handler, then have something like:

def hello(req):

    vars = {"menu": build_menu(),
            "blah": enormously_complex_function(),
            "body": psp.PSP(req, 'templates/body_tmpl.html')}

    return psp.PSP(req, 'templates/main_frame.html', vars=vars)


In this example 'body_tmpl.html' and 'main_fram.html' are PSP.

I've had pretty good luck with this approach precisely because it seems to
have a clear separation of logic and presentation.

Grisha


On Mon, 24 Nov 2003, Michael S. Fischer wrote:

> Dan W. wrote:
>
> > That's a good point Michael.  That was probably a bad habit to pick up.
> > However, I think a overloaded import could still be useful.  Overloading
> > the builtin import would allow a PSP file to control autoreloading for
> > its entire dependency tree (modules which call other modules, etc.).
> > This would allow one to easily turn autoreloading on during development
> > and to easily turn it off for production deployment.
>
> Consider that you might want not to use PSP.  I've actually found that
> it gets in the way of the separation of code and content, which is
> important when the designer and the coder are two different people.
>
> I design my mod_python apps like so:
>
> template = """
> <html>
> ...
> <!-- have the designers place %(variable)s where necessary
>       in the template for doing performing substitution
>       during the processing phase -->
> </html>
> """
>
> def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
> Of course, if you're already married to the PSP solution, then there you
> have it...
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:53:28 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
Message-ID: <20031125214631.Q52007@onyx.ispol.com>


BTW, the python standard library now includes an hmac module:

http://www.python.org/doc/current/lib/module-hmac.html

Which is functionally similar to using md5 directly, only in a
well-researched and standardized way.

Grisha

On Tue, 25 Nov 2003, Michael C. Neel wrote:

> > And I did not use GZIP because the MD5 hash has got a fixed length.
> >
> Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
> a secret string and the data.  Here is the methods from albatross:
>
>     def sign(self, text):
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         text = m.digest() + text
>         return text
>
>     def unsign(self, text):
>         digest = text[:16]
>         text = text[16:]
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         if m.digest() == digest:
>             return text
>         return ''
>
> You can of course store the text server side and just pass the client
> the MD5 hash/key, you just have to have a way to clear out old session
> files and also make sure you have enough disk space for the amount of
> sessions you expect.
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:56:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <12054078.1069806790832.JavaMail.jciccale@mac.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
Message-ID: <20031125215458.B52007@onyx.ispol.com>


Interesting question. I don't know the answer. Is content-type really
supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
I may be wrong). If anyone knows and has RFC references, etc - please
pitch in.

Grisha

On Wed, 26 Nov 2003, Julian Ciccale wrote:

> When I try to set content_type to a unicode string, it gives a TypeError
> saying that content_type can only be string. I don't know if this is
> correct. Although content types will not use any hich codes, in my case
> the content-type value I read it from an XML file that IS in Unicode,
> therefore I must convert it using str() which I dont like cause if I get
> anything there that is not really string (Unicode or Normal) python will
> anyway convert it. Is this behaviour expected?
> _______________________________________________ Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From martin_ostr at hotmail.com  Wed Nov 26 00:12:27 2003
From: martin_ostr at hotmail.com (martin ostrovsky)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] Maintaining db connections
Message-ID: <BAY7-F43goLMJop8PgM00010b1f@hotmail.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/8054341d/attachment.htm
From manfred.stienstra at dwerg.net  Wed Nov 26 08:30:52 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031125215458.B52007@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <20031125215458.B52007@onyx.ispol.com>
Message-ID: <1069831852.4684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> Interesting question. I don't know the answer. Is content-type really
> supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> I may be wrong). If anyone knows and has RFC references, etc - please
> pitch in.

Rfc 1945 (http 1.0) states:

       	HTTP-header    = field-name ":" [ field-value ] CRLF

       	field-name     = token
       	field-value    = *( field-content | LWS )

       	field-content  = <the OCTETs making up the field-value
                        and consisting of either *TEXT or combinations
                        of token, tspecials, and quoted-string>

       	TEXT           = <any OCTET except CTLs,
                        but including LWS>
	OCTET          = <any 8-bit sequence of data>
       	CHAR           = <any US-ASCII character (octets 0 - 127)>

       	Content-Type   = "Content-Type" ":" media-type
	
	media-type     = type "/" subtype *( ";" parameter )
       	type           = token
       	subtype        = token

       	parameter      = attribute "=" value
       	attribute      = token
       	value          = token | quoted-string
	
	token          = 1*<any CHAR except CTLs or tspecials>

       	tspecials      = "(" | ")" | "<" | ">" | "@"
                      | "," | ";" | ":" | "\" | <">
                      | "/" | "[" | "]" | "?" | "="
                      | "{" | "}" | SP | HT
	
This means only us-ascii in the media-type, but any character in the field-content
in general. For more information:

http://www.faqs.org/rfcs/rfc1945.html
http://www.faqs.org/rfcs/rfc2616.html

Manfred

From vmanera at manord.com  Wed Nov 26 14:58:00 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] 
	Problem with Session module with multiple scriptalias not under t
	he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>

First of all my configuration<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

 

>From httpd.conf:

.....

    DocumentRoot "E:/wwwroot/cartelle_sito_mdn"

....

    ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"

    ScriptAlias /produzione/ "E:/script/cgi/produzione/"

    ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

.........

    <Directory "E:/script/cgi/cgi-mpy">

...

                AddHandler python-program .py

                PythonHandler mod_python.publisher

            PythonPath ....

                PythonDebug on

                  #PythonOption ApplicationPath /cgi-mpy

               PythonOption SessionDbm
'E:/wwwroot/dati_autenticazione/sid/session.dbm'

   </Directory>

 

if I miss PythonOption ApplicationPath ... in any directory:

 

    def make_cookie(self):

            ....

        if config.has_key("ApplicationPath"):

            c.path = config["ApplicationPath"]

        else:

            docroot = self._req.document_root()

            # the path where *Handler directive was specified

            dirpath = self._req.hlist.directory 

            c.path = dirpath[len(docroot):]

 

so the req.headers_out generate this html heading for cgi-mpy scriptalias:

{'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
'Cache-Control': 'nocache="set-cookie"'}

 

where path=  because len(document root) :28 len (dirpath) 21

 

and in this way all work fine for all my scriptalias except for

 ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

In this case len(dirpath) = 30 so path='/\'

And I make the first connection under this path any attempt to call url
under other scriptalias cause a new session because the hader miss the key
'Set-Cookie'....

 

So I tryed to use:

PythonOption ApplicationPath /cgi-mpy

PythonOption ApplicationPath /organizzazione

....

If my first connection is under cgi-mpy all work fine for all the url under
cgi-mpy, but any attempt to connect to un url under a different scriptalias
cause a new session

 

So I may choose to change orgenizzazione in organiz, or to modify the
session module: c.path=''

Any other suggestion?

 

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/83e74c70/attachment.htm
From grisha at modpython.org  Wed Nov 26 15:55:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <1069831852.4684.11.camel@ack.dwerg.net>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	<1069831852.4684.11.camel@ack.dwerg.net>
Message-ID: <20031126155347.B64106@onyx.ispol.com>


So there is no problem with mod_python?

On Wed, 26 Nov 2003, Manfred Stienstra wrote:

> On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> > Interesting question. I don't know the answer. Is content-type really
> > supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> > I may be wrong). If anyone knows and has RFC references, etc - please
> > pitch in.
>
> Rfc 1945 (http 1.0) states:
>
>        	HTTP-header    = field-name ":" [ field-value ] CRLF
>
>        	field-name     = token
>        	field-value    = *( field-content | LWS )
>
>        	field-content  = <the OCTETs making up the field-value
>                         and consisting of either *TEXT or combinations
>                         of token, tspecials, and quoted-string>
>
>        	TEXT           = <any OCTET except CTLs,
>                         but including LWS>
> 	OCTET          = <any 8-bit sequence of data>
>        	CHAR           = <any US-ASCII character (octets 0 - 127)>
>
>        	Content-Type   = "Content-Type" ":" media-type
>
> 	media-type     = type "/" subtype *( ";" parameter )
>        	type           = token
>        	subtype        = token
>
>        	parameter      = attribute "=" value
>        	attribute      = token
>        	value          = token | quoted-string
>
> 	token          = 1*<any CHAR except CTLs or tspecials>
>
>        	tspecials      = "(" | ")" | "<" | ">" | "@"
>                       | "," | ";" | ":" | "\" | <">
>                       | "/" | "[" | "]" | "?" | "="
>                       | "{" | "}" | SP | HT
>
> This means only us-ascii in the media-type, but any character in the field-content
> in general. For more information:
>
> http://www.faqs.org/rfcs/rfc1945.html
> http://www.faqs.org/rfcs/rfc2616.html
>
> Manfred
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Wed Nov 26 16:03:21 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python]  Problem with Session module with multiple
	scriptalias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
Message-ID: <20031126155923.X64106@onyx.ispol.com>


You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url under
> cgi-mpy, but any attempt to connect to un url under a different scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From manfred.stienstra at dwerg.net  Wed Nov 26 22:19:08 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031126155347.B64106@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <1069831852.4684.11.camel@ack.dwerg.net>
	 <20031126155347.B64106@onyx.ispol.com>
Message-ID: <1069881547.5684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 21:55, Gregory (Grisha) Trubetskoy wrote:
> So there is no problem with mod_python?

Setting content_type to a unicode string should not be possible. I don't
know how the other headers are implemented, but some of them are allowed
to contain strings other than us-ascii (but never above 8 bits). The
constraint in HTTP is that headers should never contain multibyte
characters (or should never have to be interpreted as being a multibyte
character), the strings have to contain 8 bit characters.

The problem with python is that a unicode object can contain characters
coming from any encoding, and can be converted to any other encoding.
This means that a unicode object with data coming from us-ascii could be
used in headers by silently encoding them to us-ascii, but this is not
recommended because it would cause a lot of confusion. Programmers
should encode unicode objects to us-ascii strings before using them as
header values.

In short: there is no problem.

Manfred

From gdamjan at mail.net.mk  Thu Nov 27 06:43:40 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] Mod_python disables mod_dav
Message-ID: <20031127054340.GA3835@legolas.on.net.mk>

I'm using Apache 2.0.48 (it happened to 2.0.47 too) with the built-in
mod_dav module and mod_python 3.1.2b/Python-2.3.2 and PHP/4.3.4.

I can't understand why but unless I disable mod_python (by commenting
the LoadModule directive), DAV will not work. It just returns a "405
Method is not allowed" error. 

I've tried different DAV setups and clients, and nothing - unless I
disable mod_python it wont work...

Now I think that with older versions of mod_python this did not happen -
but I'm not sure. I'll have to recheck that.

Does anyone know why this could happen?!?



-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From vmanera at manord.com  Fri Nov 28 18:08:11 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:47:56 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>

I'm sorry but still don't work.
I'm removed all references to cgi and I moved all my directory with .py
under document root:

DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
<Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">

and with this new configuration req.headers_out:
{'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
and if I relod the page it never passed to req.headers_in

if I modify se session module:
def make_cookie(self):
	....
      c.path = ''   #dirpath[len(docroot):]
then req.headers_out become:
{'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
'Cache-Control': 'no-cache="set-cookie"'} 
and If I relod the page it go to req.headers_in:
{'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
'Keep-Alive', ...} 
and req.heades_out : {}

so why if something else then '' is in path the pysid wasn't writing into
the html heading? 

Villiam 


-----Messaggio originale-----
Da: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Inviato: mercoled? 26 novembre 2003 22.03
A: Manera, Villiam
Cc: mod_python@modpython.org
Oggetto: Re: [mod_python] Problem with Session module with multiple
scriptalias not under t he document root



You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url
under
> cgi-mpy, but any attempt to connect to un url under a different
scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>

From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <20031128120645.Q92149@onyx.ispol.com>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy
From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <12755437.1070056018285.JavaMail.Server@genix>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy

---------------------------------------------------------------------
To unsubscribe, e-mail: announce-unsubscribe@httpd.apache.org
For additional commands, e-mail: announce-help@httpd.apache.org



From flxkid at techemail.com  Fri Nov 28 14:16:02 2003
From: flxkid at techemail.com (Oliver Nelson)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
Message-ID: <20031128221603.3E2473954@sitemail.everyone.net>

I'd like to have mod_python respond to every request that is below a certain "directory".

IOW I might do a GET on:
localhost/mysys/test/my.gif
localhost/mysys/yada/ibm.com

and a python handler would be called for both of these situations.  In fact, I'd like the handler (or handlers) to be called for all verbs (GET, PUT, POST, DELETE).  But URI's that aren't below /mysys wouldn't call the handler.

Also note /mysys/test/my.gif doesn't exist, it should be retrieve and returned on the fly by Python.

Is this possible with mod_python?

OLIVER

From neilb at nbt.co.za  Sat Nov 29 16:54:19 2003
From: neilb at nbt.co.za (Neil Beattie)
Date: Fri Jan  9 21:47:56 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>
Message-ID: <3FC8CF3B.10252.1EC6C05A@localhost>

> I'm sorry but still don't work.
> I'm removed all references to cgi and I moved all my directory with .py
> under document root:
> 
> DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
> <Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">
> 
> and with this new configuration req.headers_out:
> {'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
> path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
> and if I relod the page it never passed to req.headers_in


Looks like the path is not correct (extra \)
try adding the following line to your httpd.config  addHandler entry:

PythonOption ApplicationPath /script/cgi/cgi-mpy


I have just had the same problem but have not yet discovered where the extra \ 
comes from ( it is in _req.hlist.directory in session.py)




> 
> if I modify se session module:
> def make_cookie(self):
> 	....
>       c.path = ''   #dirpath[len(docroot):]
> then req.headers_out become:
> {'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
> 'Cache-Control': 'no-cache="set-cookie"'} 
> and If I relod the page it go to req.headers_in:
> {'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
> 'Keep-Alive', ...} 
> and req.heades_out : {}
> 
> so why if something else then '' is in path the pysid wasn't writing into
> the html heading? 
> 

Neil Beattie
NB Technology (Pty) Ltd

From dwmp at opti.cgi.net  Sun Nov 30 19:52:57 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>


At 12:22 AM 11/25/2003 -0500, you wrote:
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

I've attempted this on a PSP page with a packaged module and am not getting 
the module in the global namespace.

<%
apache.import_module('mypackage.mymodule')
%>
<html>
<body>
<%=`globals()`%>
</body>
</html>

I don't get any errors, just a silent failure (mypackage is not in 
globals).  mypackage is in the lib/python/site-packages folder and it works 
properly if I use the standard python import.

Any ideas?

-Dan

From grisha at modpython.org  Sun Nov 30 22:24:48 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <20031130222323.M31554@onyx.ispol.com>



On Sun, 30 Nov 2003, Dan W. wrote:

> I've attempted this on a PSP page with a packaged module and am not getting
> the module in the global namespace.
>
> <%
> apache.import_module('mypackage.mymodule')

<%
mymodule = apache.import_module('mypackage.mymodule')


Grisha
From dwmp at opti.cgi.net  Sun Nov 30 21:56:45 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031130222323.M31554@onyx.ispol.com>
References: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130214706.035aedc8@mail.pyxos.com>

At 10:24 PM 11/30/2003 -0500, you wrote:


>On Sun, 30 Nov 2003, Dan W. wrote:
>
> > I've attempted this on a PSP page with a packaged module and am not getting
> > the module in the global namespace.
> >
> > <%
> > apache.import_module('mypackage.mymodule')
>
><%
>mymodule = apache.import_module('mypackage.mymodule')


Thanks Grisha.  I was expecting it to work like the builtin import.

-Dan

From mod_python at mikebell.org  Sun Nov 30 22:37:48 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:47:56 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
In-Reply-To: <20031128221603.3E2473954@sitemail.everyone.net>
References: <20031128221603.3E2473954@sitemail.everyone.net>
Message-ID: <20031201063747.GC13820@mikebell.org>

On Fri, Nov 28, 2003 at 02:16:02PM -0800, Oliver Nelson wrote:
> Is this possible with mod_python?

Possible and easy.

<Location /foo>
  SetHandler python-program
  PythonHandler bar
</Location>
From bert at tela.com  Sat Nov  1 09:00:59 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] ImportError
Message-ID: <000201c3a092$68dbcad0$0301a8c0@janine>

Hello-

I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
run the "hello.py/say"
example and the following message appears in apache's 'error_log':

....

File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
import_module
   f, p, d = imp.find_module(parts[i],path)
[Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
mod_python.publisher: ImportError: No module named index


Currently I'm trying

Apache 2.047
Python 2.3.2
mod_python 3.1.2b

but I've gotten same result with combintaions of mod_python 3.0.3, python
2.2.

"hello.py" runs just fine with out-of-redhat box apache/mod_python, and
there's no apparent module named "index" there.

Bert Hughes


From grisha at modpython.org  Sat Nov  1 14:41:44 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] ImportError
In-Reply-To: <000201c3a092$68dbcad0$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
Message-ID: <20031101144111.L33051@onyx.ispol.com>


What is the URL you are accessing, what is the relevant Apache config, and
what's in hello.py?

Grisha

On Sat, 1 Nov 2003, Bert Hughes wrote:

> Hello-
>
> I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
> run the "hello.py/say"
> example and the following message appears in apache's 'error_log':
>
> ....
>
> File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
> import_module
>    f, p, d = imp.find_module(parts[i],path)
> [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> mod_python.publisher: ImportError: No module named index
>
>
> Currently I'm trying
>
> Apache 2.047
> Python 2.3.2
> mod_python 3.1.2b
>
> but I've gotten same result with combintaions of mod_python 3.0.3, python
> 2.2.
>
> "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> there's no apparent module named "index" there.
>
> Bert Hughes
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Sat Nov  1 20:41:55 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
Message-ID: <3FA40C83.5050502@krap.dk>

Hi.

I am toying around with mod_python on a gentoo-linux system. Prior I 
used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the 
beta from source.

This is what I wish :
Every request is handled by the same python-handler for the virtual 
domain. I am currently playing around and creating my own handler in the 
process.
It has worked before, with the following relevant parts of my httpd.conf 
(be aware, internal test server so a lot off things are just made 
simple, not secure/right):

NameVirtualHost *
<Directory "/www/tweetie">
        SetHandler python-program
        PythonHandler site
        PythonAuthenHandler site
        PythonDebug On
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        Allow from all
        AuthType Basic
        AuthName "Restricted Area"
        require valid-user
</Directory>
<VirtualHost *>
        ServerName tweetie
        DocumentRoot /www/tweetie
</VirtualHost>

But now, when I browse to "http://tweetie/" i get a directory listning 
instead of the python script... If I write anything after the trailing 
slash, everything works fine.

Can you tell me, what I did wrong and how to fix it ?

Tia

Svenne Krap

From bert at tela.com  Sat Nov  1 15:24:23 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com>
Message-ID: <003301c3a0be$cad54230$0301a8c0@janine>



Apache2 conf is:

LoadModule python_module modules/mod_python.so

<Directory /usr/local/apache2/htdocs/python>

SetHandler python-program

PythonHandler mod_python.publisher

</Directory>



hello.py is

>>>

def say(what="Nothing"):
    return "I am saying %s" % what

if __name__ == '__main__':
    print say('At the commandline!')

>>>>>



and it is in /usr/local/apache2/htdocs/python.

So the url is"     http:/192.168.1.1/python/hello.py/say

Thanks

Bert

----- Original Message ----- 
From: "Gregory (Grisha) Trubetskoy" <grisha@modpython.org>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Saturday, November 01, 2003 1:41 PM
Subject: Re: [mod_python] ImportError


>
> What is the URL you are accessing, what is the relevant Apache config, and
> what's in hello.py?
>
> Grisha
>
> On Sat, 1 Nov 2003, Bert Hughes wrote:
>
> > Hello-
> >
> > I've been attempting to upgrade my Apache/mod_python setup w/o success.
I
> > run the "hello.py/say"
> > example and the following message appears in apache's 'error_log':
> >
> > ....
> >
> > File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493,
in
> > import_module
> >    f, p, d = imp.find_module(parts[i],path)
> > [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> > mod_python.publisher: ImportError: No module named index
> >
> >
> > Currently I'm trying
> >
> > Apache 2.047
> > Python 2.3.2
> > mod_python 3.1.2b
> >
> > but I've gotten same result with combintaions of mod_python 3.0.3,
python
> > 2.2.
> >
> > "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> > there's no apparent module named "index" there.
> >
> > Bert Hughes
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
>


From stian at soiland.no  Sun Nov  2 17:24:17 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] Re: ImportError
In-Reply-To: <003301c3a0be$cad54230$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
Message-ID: <20031102162417.GB32650@itea.ntnu.no>

On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From bert at tela.com  Sun Nov  2 10:50:54 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] Re: ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
	<20031102162417.GB32650@itea.ntnu.no>
Message-ID: <000701c3a161$7bfe5130$0301a8c0@janine>

This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes


----- Original Message ----- 
From: "Stian S?iland" <stian@soiland.no>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Sunday, November 02, 2003 10:24 AM
Subject: Re: ImportError


On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]



From mike at mikesclutter.com  Sun Nov  2 16:18:44 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <200311021618.45341.mike@mikesclutter.com>

All,

I have been using mod_python for over two years now, and since I first 
started, I've been adding little utility libraries here and there. I now have 
one (more or less) integrated library that supports several different things:

- PHP Style embedded python in HTML, with page caching.
    Documents with embedded python can be parsed, compiled, and cached in 
    memory that is limited by a global administrative setting on how much 
    cache mem to use. Pages are swapped out based on use. Your basic .psp 
    page looks something like this:

    #include some_header.psp
    <html><body>
    <?
    x = 1
    print "There's no language like Python"
    ?>
    <p>Shorthand printing of a variable/expression
    x=<?$x?>
    </body>
    </html>

- Shared database connections. There is a simple class which wraps the DBA API 
  connection objects for MySQL, PostgreSQL, and SAPDB. It just adds enough 
  code to transparently recover from a connection timeout.

- Session management. This includes support for
  - automatically generating session_ids for clients.
  - Authentication from a database (assigning a user_id to a session_id) and 
    maintaining it in a sessions table.
  - storing state to a database (mysql/postgresql) or to browser. State is 
    stored using a modified pickle algorithm (as pickle at the time was 
    insecure). You can basically serialize all python primitives and 
    containers (dicts, lists), and can include custom classes if you derive 
    from a simple base class.
  - Simple access/manipulation of queries, POST headers, and cookies:
    Automatically parse, read, and generate all of the above. Set/unset 
    cookies. Cookies are automatically set using the virtual host domain --- 
    you don't have to worry about which domain or vhost you are working in. 
    Pickle data stuctures into cookies using base64. Query generation from 
    dict and urlencoding.
  - Util functions: Setting page expiry's, getting client info, generating 
    urls.

- Global and per virtual host configuration/resource pools. For each 
  virtual host, the core PSP handler will look for a module by that server 
  name in the Python path and import it into a virtual host namespace (if it 
  has not already been imported). This serves as a common resource pool for 
  that virtual host. When each page is processed, this pool is imported into 
  the global namespace in a dict call resource. The global resource pool is 
  first loaded on startup and vhost resources are added to it.

- HTML library. This includes support for
  - Form/widget generation. Basic HTML widgets can be created using simple 
    functions. Similar to Perl's cgi module. Generate listboxs from SQL.

- Support for OLTP gateways. There are two currently supported: SecurePay and 
  Authorize.net. This works on top of m2crypto.

There are other little bells and whistles here and there that I am sure I 
forgot about. Anyway, it has started to get too big for me to maintain on my 
own and I figure perhaps it can be helpful to others. It would be nice to 
have other good Python/mod_python programmers with more experience than me 
hacking on it.

The project is located at gila.sourceforge.net. Currently, I only have the 
code in CVS and a tarball on the home page (gila.sourceforge.net). I have 
very little documentation, but it's not hard to set up. The INSTALL should do 
it. If you have problems, email me.

Anyway, I hope some of you might find this useful.

Mike

From neel at mediapulse.com  Mon Nov  3 11:31:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>

Wow, this is pretty cool - I see requests for items like these a lot on
this list so it should be helpful to quite a few.  I have one question
though...

> - Shared database connections. There is a simple class which 
> wraps the DBA API 
>   connection objects for MySQL, PostgreSQL, and SAPDB. It 
> just adds enough 
>   code to transparently recover from a connection timeout.
> 

Does this work for 3.x and apache using a threaded mpm like worker?
I've had trouble getting MySQLdb to share connections/cursors from a
pool in the past since the thread level of the API is 1 (no threaded
cursors).  I had planned to work on this in the coming weeks, but no
since re-inventing the wheel =)

Mike

From gdamjan at mail.net.mk  Mon Nov  3 22:33:58 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:53:59 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <20031103213358.GA32187@legolas.on.net.mk>

> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)

well, share the db connection and not the cursors.
IMHO creating a MySQL cursor is not performance heavy...


-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From svenne at krap.dk  Mon Nov  3 22:42:40 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <20031102155855.P47316@onyx.ispol.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
Message-ID: <3FA6CBD0.3020902@krap.dk>

Quite simple right now.
- one handler-function (just printing out varios req-object attributes, 
nothing fancy until I have solved my problem.)
- one authenhandler-function (containing only "return apache.OK")

Btw. another possible sligt change in behavior, earlier, when having the 
require-valid user set and return apache.OK immediately no popup for 
password noticed (as far memory servers). Now it pops up, but anything 
is accepted (which is expected, the popping up of the password-dialog is 
not expeced....)

Svenne

Gregory (Grisha) Trubetskoy wrote:

>what's in the python script?
>
>Grisha
>
>On Sat, 1 Nov 2003, Svenne Krap wrote:
>
>  
>
>>Hi.
>>
>>I am toying around with mod_python on a gentoo-linux system. Prior I
>>used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>beta from source.
>>
>>This is what I wish :
>>Every request is handled by the same python-handler for the virtual
>>domain. I am currently playing around and creating my own handler in the
>>process.
>>It has worked before, with the following relevant parts of my httpd.conf
>>(be aware, internal test server so a lot off things are just made
>>simple, not secure/right):
>>
>>NameVirtualHost *
>><Directory "/www/tweetie">
>>        SetHandler python-program
>>        PythonHandler site
>>        PythonAuthenHandler site
>>        PythonDebug On
>>        Options Indexes FollowSymLinks MultiViews
>>        AllowOverride All
>>        Order allow,deny
>>        Allow from all
>>        AuthType Basic
>>        AuthName "Restricted Area"
>>        require valid-user
>></Directory>
>><VirtualHost *>
>>        ServerName tweetie
>>        DocumentRoot /www/tweetie
>></VirtualHost>
>>
>>But now, when I browse to "http://tweetie/" i get a directory listning
>>instead of the python script... If I write anything after the trailing
>>slash, everything works fine.
>>
>>Can you tell me, what I did wrong and how to fix it ?
>>
>>Tia
>>
>>Svenne Krap
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>    
>>
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031103/26a23c8d/attachment-0001.htm
From neel at mediapulse.com  Mon Nov  3 16:59:13 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B50061764157776B97BD@johnson.mediapulse.net>

> well, share the db connection and not the cursors.
> IMHO creating a MySQL cursor is not performance heavy...
> 
My bad, I typed too quickly: MySQLdb is one connection handle one cursor
at a time.  From the spec level 1 threadsaftey reads "Threads may share
the module, but not connections."

Mike

From mike at mikesclutter.com  Mon Nov  3 18:10:09 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <200311031810.09219.mike@mikesclutter.com>

As long as you protect sessions within threads, there shouldn't be any 
problems. But the thread issues are really just passed on to the underlying 
database extension.

On Monday 03 November 2003 10:31 am, Michael C. Neel wrote:
> Wow, this is pretty cool - I see requests for items like these a lot on
> this list so it should be helpful to quite a few.  I have one question
> though...
>
> > - Shared database connections. There is a simple class which
> > wraps the DBA API
> >   connection objects for MySQL, PostgreSQL, and SAPDB. It
> > just adds enough
> >   code to transparently recover from a connection timeout.
>
> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From jpeterson at ainet.com  Mon Nov  3 20:25:41 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
Message-ID: <3FA72A45.3080602@ainet.com>

...
This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes
...

As a fellow struggling newbie, I can say that you were not blind.

Page 41, section 6.1.1 of the .pdf documentation illustrates a 
SetHandler and a URL that requires the .py extension.

I paste it below.  Sorry for the messed up formatting.

----------------------------------------------------
6.1.1 Introduction
To use the handler, you need the following lines in your configuration

<Directory /some/path}
     SetHandler python-program
     PythonHandler mod_python.publisher
</Directory>

This handler allows access to functions and variables within a module 
via URL?s. For example, if you have the following module, called ?hello.py?:

""" Publisher example """

     def say(req, what="NOTHING"):
     return "I am saying %s" % what

A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.

A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
saying hello?.
---------------------------------------------------

I would have hit exactly the same problem if I hadn't just seen your thread.

Jim


From jpeterson at ainet.com  Mon Nov  3 21:23:00 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] html docs?
Message-ID: <3FA737B4.4020500@ainet.com>

Hi,

A pointer to html docs for mod_python?  I can find only the pdf version. 
  I like to make a local web page with docs.  html works better for me.

I'd be looking for the 3.0.3 production stuff particularly, as well as 
the 3.1.x stuff.

Thanks,

Jim


From grisha at modpython.org  Tue Nov  4 00:41:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] html docs?
In-Reply-To: <3FA737B4.4020500@ainet.com>
References: <3FA737B4.4020500@ainet.com>
Message-ID: <20031104003808.S67824@onyx.ispol.com>



On Mon, 3 Nov 2003, Jim Peterson wrote:

> Hi,
>
> A pointer to html docs for mod_python?  I can find only the pdf version.

The html version of the docs should be included in the tgz file under
doc-html, and are also available online:

http://www.modpython.org/live/current/doc-html/


> I'd be looking for the 3.0.3 production stuff particularly, as well as
> the 3.1.x stuff.

The 3.1.2b html was not available online, but now it is:

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/

(Both of these links are also available off http://www.modpython.org/)

HTH,

Grisha
From elvelind at amandarin.se  Tue Nov  4 12:40:34 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
Message-ID: <3FA79032.9080300@amandarin.se>

What I want is to let every site in my apache server to have a own place 
to place the site specific modules.  how do I tell apache/mod_python to 
add this to the searchpath for each site. note that one site should only 
have access to it's own module directory.

sorry for the bad enlish. tierd and swedish ;)

/elvelind

amandarin.se

From davidf at sjsoft.com  Tue Nov  4 14:11:02 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
In-Reply-To: <3FA79032.9080300@amandarin.se>
References: <3FA79032.9080300@amandarin.se>
Message-ID: <3FA79756.70007@sjsoft.com>

elvelind grandin wrote:

> What I want is to let every site in my apache server to have a own 
> place to place the site specific modules.  how do I tell 
> apache/mod_python to add this to the searchpath for each site. note 
> that one site should only have access to it's own module directory.
>
> sorry for the bad enlish. tierd and swedish ;)
>
> /elvelind
>
> amandarin.se

Hi Elvelind

The path of the directory is added by default to the search path.
Alternatively you can use the PythonPath option in an .htaccess file in 
each directory
(See the documentation about this)

David


From grisha at modpython.org  Tue Nov  4 16:55:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311021618.45341.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
Message-ID: <20031104165310.X74839@onyx.ispol.com>



On Sun, 2 Nov 2003, Michael Owens wrote:

> - Session management. This includes support for

Just curious - does it do anything to make sure that requests for the same
session are processed sequentially (i.e. never at the same time)?

Grisha
From mike at mikesclutter.com  Tue Nov  4 22:34:13 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104165310.X74839@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
Message-ID: <200311042234.13877.mike@mikesclutter.com>

That's a very interesting question, and frankly I've never given it a lot of 
thought. 

If you are asking whether or not the same UA could post multiple initial, 
simultaneous requests and get multiple session ID's, then the answer is yes, 
it could. My assumption, however, is that the initial request from a UA would 
be limited to a single request --- long enough for a SID to be generated and 
set in a cookie, before the it made further requests. Once the cookie is set, 
you are in the clear.

If you are referring to this occurance after the SID, the same still applies: 
if the UA makes two simulaneous request, then there is no attempt to order or 
line them up. They both are processed indepently, without knowlege of each 
other. You could probably do this pretty easily and quickly with sleepycat, 
assuming all your requests are handled by a single server. It might be even 
easier with a RDBMS but it may have a performace impact.

Right now, I get session data from mysql/pgsql and it has no discernable 
impact, but more times that not, its a simple select statement which most 
likely comes out of the db cache. I imagine ordering would require select for 
update (blocking), update, and delete. Now you are blocking and hitting disk 
--- quite a bit slower.

What are the advantages/applications where you would want to have this? I 
haven't run into a need for it yet --- maybe credit card processing?

On Tuesday 04 November 2003 03:55 pm, Gregory (Grisha) Trubetskoy wrote:
> On Sun, 2 Nov 2003, Michael Owens wrote:
> > - Session management. This includes support for
>
> Just curious - does it do anything to make sure that requests for the same
> session are processed sequentially (i.e. never at the same time)?
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grisha at modpython.org  Wed Nov  5 00:05:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311042234.13877.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
	<200311042234.13877.mike@mikesclutter.com>
Message-ID: <20031104235444.W96643@onyx.ispol.com>


On Tue, 4 Nov 2003, Michael Owens wrote:

> That's a very interesting question, and frankly I've never given it a lot of
> thought.

I didn't give it a lot of thought either, until I came across the need for
it. This turned out a bit more complex than orginally anticipated (ok,
this is an understatement - it was a paint to get working), which is one
of the main motivators for providing session support as part of mod_python
(the latest beta has it).

The notion of a session always (or almost always) assumes that no more
than one request for a session is being processed at a time.  This is
default behaviour in JSP, for example, even though the users often don't
even know it.

If you have a session that, say increments a counter, then unless you have
some sort of a session locking mechanism, your numbers will increment, but
not always as expected :-)

Anyway - when I saw "session support" I thought there may be a chance you
knew something I didn't :-)

Grisha
From mike at mikesclutter.com  Wed Nov  5 08:57:27 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104235444.W96643@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<200311042234.13877.mike@mikesclutter.com>
	<20031104235444.W96643@onyx.ispol.com>
Message-ID: <200311050857.27585.mike@mikesclutter.com>

Up till now, I have always passed concurrency on to the database. If the 
session has made two concurrent requests altering the same data, then the 
state/value of the data is however the last request that commits the update 
left it. The data will be consistent, as the DB ensures consistent reads and 
writes as long as all work resides within a transaction. Counters also apply 
--- I just use a postgres sequence, or simulate one with mysql and tables. 
However, I am interested to see how you implemented this concurrancy.

In any case, I have always tried to use what was available, so most likely I 
will end up modifying my stuff to work atop the session support in 
mod_python.

On Tuesday 04 November 2003 11:05 pm, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 4 Nov 2003, Michael Owens wrote:
> > That's a very interesting question, and frankly I've never given it a lot
> > of thought.
>
> I didn't give it a lot of thought either, until I came across the need for
> it. This turned out a bit more complex than orginally anticipated (ok,
> this is an understatement - it was a paint to get working), which is one
> of the main motivators for providing session support as part of mod_python
> (the latest beta has it).

> The notion of a session always (or almost always) assumes that no more
> than one request for a session is being processed at a time.  This is
> default behaviour in JSP, for example, even though the users often don't
> even know it.
>
> If you have a session that, say increments a counter, then unless you have
> some sort of a session locking mechanism, your numbers will increment, but
> not always as expected :-)


> Anyway - when I saw "session support" I thought there may be a chance you
> knew something I didn't :-)
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From vmanera at manord.com  Wed Nov  5 15:56:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Strange behavior in using Session
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>

I'm starting to use new Session module and something strange sometimes
happens:<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

For debug purpose:

 

def test(req):

            sess = Session.DbmSession(req,timeout=7200) 

sys.stdout=req

            ...

            print 'et voila'

            .....

 

But sometime the output goes to another session on another workstation.

 

So, on the brouser of the programmer that called test was show all it does
except the print 'et voil?'

and on the brouser of a colleague that use Session to, magically appear 'et
voil?'

 

Any Idea

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031105/a8db8c76/attachment-0001.htm
From grisha at modpython.org  Wed Nov  5 10:24:37 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Strange behavior in using Session
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
Message-ID: <20031105102248.B2712@onyx.ispol.com>


There is one sys.stdout per Python interpreter. So however many clients
connect to the server, they all share sys.stdout.

You should not modify it, but use req.write() instead, and all will work
fine.

Grisha

On Wed, 5 Nov 2003, Manera, Villiam wrote:

> I'm starting to use new Session module and something strange sometimes
> happens:<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
> For debug purpose:
>
>
>
> def test(req):
>
>             sess = Session.DbmSession(req,timeout=7200)
>
> sys.stdout=req
>
>             ...
>
>             print 'et voila'
>
>             .....
>
>
>
> But sometime the output goes to another session on another workstation.
>
>
>
> So, on the brouser of the programmer that called test was show all it does
> except the print 'et voil?'
>
> and on the brouser of a colleague that use Session to, magically appear 'et
> voil?'
>
>
>
> Any Idea
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From tpc at csua.berkeley.edu  Wed Nov  5 09:58:04 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 21:54:00 2004
Subject: [Tutor] Re: [mod_python] invalid literal for float int or long
 solved !
In-Reply-To: <20031027144335.Q39378@onyx.ispol.com>
Message-ID: <20031105095630.H73580-100000@localhost.name>


the former is correct, I assumed it was the latter but was proven wrong
when I reverted to my earlier MySQL SELECT statement (i.e., WHERE) and
switched the url and title and it worked just fine.

On Mon, 27 Oct 2003, Gregory (Grisha) Trubetskoy wrote:

>
> The first one is "url, title", the second is "title, url" - was that the
> problem, or was it the WHERE instead of INNER JOIN (which are same thing
> IIRC).
>
> Grisha
>
>
> On Mon, 27 Oct 2003 tpc@csua.berkeley.edu wrote:
>
> >
> > fingers crossed, here's hoping the bug doesn't rear its creepy head again,
> > can't really say wherefore the bug but I found a workaround, I changed the
> > basic MySQL statement below:
> >
> > SELECT url, title FROM URLs, URLs_WITH_MATCHES WHERE URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > to:
> >
> > SELECT title, url from URLs INNER JOIN URLs_WITH_MATCHES ON URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > and voila !  I am a complete idiot.
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Tutor maillist  -  Tutor@python.org
> http://mail.python.org/mailman/listinfo/tutor
>

From stian at soiland.no  Thu Nov  6 07:33:09 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <3FA72A45.3080602@ainet.com>
References: <3FA72A45.3080602@ainet.com>
Message-ID: <20031106063309.GD22316@itea.ntnu.no>

On 2003-11-04 05:25:41, Jim Peterson wrote:

> A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> 
> A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
> saying hello?.
> I would have hit exactly the same problem if I hadn't just seen your thread.

I have been wondering myself, too, what decides if .py is required or
not? I agree that with SetHandler, .py suffix should not be required (to
get nicer URLs), ALTHOUGH it should still work.

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From grisha at modpython.org  Thu Nov  6 12:01:59 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python]
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <20031106063309.GD22316@itea.ntnu.no>
References: <3FA72A45.3080602@ainet.com> <20031106063309.GD22316@itea.ntnu.no>
Message-ID: <20031106115148.R20173@onyx.ispol.com>


The publisher makes this decision. It's not a simple decision to make
because a dot also serves as package.module separator in Python, so the
publisher has to make an intelligent guess on what you meant.

E.g. if you have

AddHandler mod_python .py .blah

Wheh you ask for main.blah, the publisher will drop the blah as the
extension and import module main. If you ask for main.bleh, it will assume
you meant module bleh in package main.

If you have

SetHandler mod_python

Then there is no initial list of suffixes to look at. Actually there *is*
(imp.get_suffixes()), but the publisher wasn't doing it, so in the
particular instance sited earlier in this thread, the documentation was
right and the publisher was wrong, and I think we fixed it correctly this
time for the next release.

Grisha


On Thu, 6 Nov 2003, Stian [iso-8859-1] S?iland wrote:

> On 2003-11-04 05:25:41, Jim Peterson wrote:
>
> > A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> >
> > A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am
> > saying hello?.
> > I would have hit exactly the same problem if I hadn't just seen your thread.
>
> I have been wondering myself, too, what decides if .py is required or
> not? I agree that with SetHandler, .py suffix should not be required (to
> get nicer URLs), ALTHOUGH it should still work.
>
> --
> Stian S?iland               Work toward win-win situation. Win-lose
> Trondheim, Norway           is where you win and the other lose.
> http://www.soiland.no/      Lose-lose and lose-win are left as an
>                             exercise to the reader.  [Limoncelli/Hogan]
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Thu Nov  6 21:28:14 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FA77A98.8060502@sjsoft.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
Message-ID: <3FAAAEDE.3060804@krap.dk>

Ok, now I figured the one part out.

Having set Indexes and DirectoryIndex (for example to index.py), the 
file MUST exists (eventhough it might not be used) so my solution was 
simply to touch the file.

The second problem, having the http-authorization-dialog popping up is 
still not resolved... Any thoughts ?

Svenne

David Fraser wrote:

> Hi Sevenne
> Have you tried turning off the Indexes under Options?
> David
>
> Svenne Krap wrote:
>
>> Quite simple right now.
>> - one handler-function (just printing out varios req-object 
>> attributes, nothing fancy until I have solved my problem.)
>> - one authenhandler-function (containing only "return apache.OK")
>>
>> Btw. another possible sligt change in behavior, earlier, when having 
>> the require-valid user set and return apache.OK immediately no popup 
>> for password noticed (as far memory servers). Now it pops up, but 
>> anything is accepted (which is expected, the popping up of the 
>> password-dialog is not expeced....)
>>
>> Svenne
>>
>> Gregory (Grisha) Trubetskoy wrote:
>>
>>> what's in the python script?
>>>
>>> Grisha
>>>
>>> On Sat, 1 Nov 2003, Svenne Krap wrote:
>>>
>>>  
>>>
>>>> Hi.
>>>>
>>>> I am toying around with mod_python on a gentoo-linux system. Prior I
>>>> used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>>> beta from source.
>>>>
>>>> This is what I wish :
>>>> Every request is handled by the same python-handler for the virtual
>>>> domain. I am currently playing around and creating my own handler 
>>>> in the
>>>> process.
>>>> It has worked before, with the following relevant parts of my 
>>>> httpd.conf
>>>> (be aware, internal test server so a lot off things are just made
>>>> simple, not secure/right):
>>>>
>>>> NameVirtualHost *
>>>> <Directory "/www/tweetie">
>>>>        SetHandler python-program
>>>>        PythonHandler site
>>>>        PythonAuthenHandler site
>>>>        PythonDebug On
>>>>        Options Indexes FollowSymLinks MultiViews
>>>>        AllowOverride All
>>>>        Order allow,deny
>>>>        Allow from all
>>>>        AuthType Basic
>>>>        AuthName "Restricted Area"
>>>>        require valid-user
>>>> </Directory>
>>>> <VirtualHost *>
>>>>        ServerName tweetie
>>>>        DocumentRoot /www/tweetie
>>>> </VirtualHost>
>>>>
>>>> But now, when I browse to "http://tweetie/" i get a directory listning
>>>> instead of the python script... If I write anything after the trailing
>>>> slash, everything works fine.
>>>>
>>>> Can you tell me, what I did wrong and how to fix it ?
>>>>
>>>> Tia
>>>>
>>>> Svenne Krap
>>>>
>>>> _______________________________________________
>>>> Mod_python mailing list
>>>> Mod_python@modpython.org
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>
>>>>   
>>>
>>>
>>>  
>>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>  
>>
>
>
>

From elvelind at amandarin.se  Fri Nov  7 00:49:06 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] open a simple file
Message-ID: <3FAADDF2.1020808@amandarin.se>

New to python and newer to mod_python so sorry if this is a newbie question.
I'm have a where simple handler just for test that should open a html 
file and writing it out.
The problem is that it cant found the file. iv tried with test.html and 
the absolute path and none work. is there something I'm missing?

-- 
elvelind grandin

amandarin.se


From gustavo.cordova at q-voz.com  Thu Nov  6 18:05:58 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <3FAAE1E6.4000501@q-voz.com>

elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie 
> question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html 
> and the absolute path and none work. is there something I'm missing?

Well, if you include the source to your module, maybe we might have a 
bit more information to help you with.

Please add a "PythonDebug On" directive in httpd.conf and include all 
error messages in your next email.

Just a note: I'm not cranky, it's just that we can't help you without 
more info.

-gustavo


From stian at soiland.no  Fri Nov  7 11:00:13 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] 
	Re: Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FAAAEDE.3060804@krap.dk>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
	<3FAAAEDE.3060804@krap.dk>
Message-ID: <20031107100013.GB1233@itea.ntnu.no>

On 2003-11-06 21:28:14, Svenne Krap wrote:

> The second problem, having the http-authorization-dialog popping up is 
> still not resolved... Any thoughts ?

We've found out with 3.1.2b that the AuthenHandler-thingie is not fully
functional.

We tried the simple example from the documentations, and even made it
simpler:

.htaccess
---------
PythonPath "['/our/libs'] + sys.path"
PythonAuthenHandler Cerebrum.web.login
AuthType Basic
AuthName "Cerebrum"
require valid-user


Cerebrum/web/login.py
---------------------
from mod_python import apache

def authenhandler(req):
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED



This failed with a 500 Server Error. Watching the apache log reveals a
hint:

[Fri Nov 07 10:49:42 2003] [error] [client 129.241.56.39]
python_handler: After PythonAuthenHandler req->user is NULL. Assign
req.user to avoid this error.

This seems weird.. modifing the function:


def authenhandler(req):
    req.user = ""
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED


This works perfect, the login dialog appears, and disappears if any
login name is entered.
    
Now - why should req.user need to be set first?

Even the simplest handler:

def authenhandler(req):
    return apache.HTTP_UNAUTHORIZED
    
fails.. but if req.user = "" is set, it works.         
    
-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:36:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Session instances can't be stored in req?
Message-ID: <20031107103633.GC1233@itea.ntnu.no>

Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If I
try to store sezz in req.blupp - everything fails - the apache process hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:37:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Re: open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <20031107103733.GD1233@itea.ntnu.no>

On 2003-11-07 00:49:06, elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html and 
> the absolute path and none work. is there something I'm missing?

Have you made sure the file is readable for the user running the apache
process?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From vmanera at manord.com  Fri Nov  7 12:23:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:54:00 2004
Subject: R: [mod_python] Session instances can't be stored in req?
Message-ID: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>

I had a similar problem, not exactly I now show it but for explain:

def xxx(req):
	sess = Session(req)
	...
	req.sess = sess
	return yyy(req)

def yyy(req):
	sess = check_sess()

def check_sess(req):
	if hasattr(req,'sess'):
		sess = req.sess
	else:
		sess = Session(req)
	return sess

this hang apache

if I delete the attribut from req all work fine:

def check(req):
	if hasattr(req,'sess'):
		sess = req.sess
		delattr(req,'sess')
	else:
		sess = Session(req)
	return

I think in this way:

class BaseSession(dict):
	...
	def __del__(self):
        self.unlock()

the del unlock apache

where have you put the  fixuphandler(req) and who call it? I'm interisting
in it too

Villiam



-----Messaggio originale-----
Da: Stian S?iland [mailto:stian@soiland.no]
Inviato: venerd? 7 novembre 2003 11.37
A: mod_python@modpython.org
Oggetto: [mod_python] Session instances can't be stored in req?


Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If
I
try to store sezz in req.blupp - everything fails - the apache process
hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From stian at soiland.no  Fri Nov  7 14:43:51 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Re: R: Session instances can't be stored in req?
In-Reply-To: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
Message-ID: <20031107134351.GE1233@itea.ntnu.no>

On 2003-11-07 12:23:34, Manera, Villiam wrote:

> this hang apache
> 
> if I delete the attribut from req all work fine:
> 
> def check(req):
> 	if hasattr(req,'sess'):
> 		sess = req.sess
> 		delattr(req,'sess')
> 	else:
> 		sess = Session(req)
> 	return
> class BaseSession(dict):
> 	...
> 	def __del__(self):
>         self.unlock()
> the del unlock apache

Yes, a lock problem seems to be the issue here. 

We tried defining a cleanuphandler to fix things up by both calling
unlock() and removing the reference req.session - but the cleanuphandler
isn't always reached.

We tried moving the code away to a normal handler that first retrieves
the session, stores it in req.session, and then calls
mod_python.publisher.handler(req) - lock problems still occur.

> where have you put the  fixuphandler(req) and who call it? I'm interisting
> in it too

>From our library, by setting in htaccess "PythonFixupHandler
Cerebrum.web.fixup" it will be imported from
/our/lib/Cerebrum/web/fixup.py


-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From michael at dynamine.net  Fri Nov  7 10:10:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] 
 Documentation suggestions for section 4.7.1 in the beta mod_python
 manual
Message-ID: <3FABE006.6010602@dynamine.net>

Hi Grisha,

I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.

First, please explain to us why we need yet another cookie class, 
especially one that has the same name as the package that ships with 
Python ("Cookie").  I have to admit, though, that SignedCookie looks 
like a really nice convenience class.

Second, it's really important that you emphasize the security risks of 
using MarshalCookie; see the Python documentation for SerialCookie to 
see why.  Also, there are efficient-length considerations; constructing 
cookies representing 100kB data structures would not be "best practice."

--Michael

From grisha at modpython.org  Fri Nov  7 13:37:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABE006.6010602@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
Message-ID: <20031107132410.W37230@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Hi Grisha,
>
> I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.
>
> First, please explain to us why we need yet another cookie class,

Because it is more efficient and simpler to use within mod_python
environment.

> especially one that has the same name as the package that ships with
> Python ("Cookie").

Since it resides inside the mod_python package I don't see how it matters.

> Second, it's really important that you emphasize the security risks of
> using MarshalCookie;  see the Python documentation for SerialCookie to
> see why.

There are no known security risks of useing MarshalCookie. At least none
that I am aware of, and I researched the subject pretty thoroughly.

First - MarshalCookie is a subclass of SignedCookie, so all MarshalCookies
are signed, which makes it impossible to alter the cookie value.

Second, there is a distinction between "marshalling" and "pickling", which
is what SerialCookie uses. The process of unmarshalling does not execute
arbitrary code.

> Also, there are efficient-length considerations; constructing
> cookies representing 100kB data structures would not be "best practice."

Apache will limit any header length to about 4k :-)

Grisha
From michael at dynamine.net  Fri Nov  7 11:34:50 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <20031107132410.W37230@onyx.ispol.com>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
Message-ID: <3FABF3DA.1040405@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> Second, there is a distinction between "marshalling" and "pickling", which
> is what SerialCookie uses. The process of unmarshalling does not execute
> arbitrary code.

What's your evaluation of the possibility that the marshaling method 
will change between Python versions?  The docs explicitly offer no 
guarantee that the format will remain stable.

Best,

--Michael

From neel at mediapulse.com  Fri Nov  7 14:42:29 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
	beta mod_python manual
Message-ID: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>

> First, please explain to us why we need yet another cookie class,

more classes do not mean you cannot use a class.  mod_python works quite
well with the python cookie class, I've used them together for a while
now.  I also like having more than one choice, and if someone wants to
write even another cookie class I see no problem with it.  I get to pick
the best one for my needs vs having one solution that I have to keep
tweaking to get it to do what I need.

> > Also, there are efficient-length considerations; constructing
> > cookies representing 100kB data structures would not be 
> "best practice."
> 
> Apache will limit any header length to about 4k :-)

With out looking at the spec, I believe that clients are to reject
cookies of more than 4096 bytes, and only allow one server (domain) to
store 20(?) cookies max.  Then again, the last time a browser was done
that followed the RFCs...  well I can't ever recall that happening =)

A cool addition to the mod_python cookie class would be to raise an
Execption (CookieLength?) if a cookie would result in more than the RFC
limit.

Mike

From michael at dynamine.net  Fri Nov  7 11:47:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
Message-ID: <3FABF6CF.7010202@dynamine.net>

Michael C. Neel wrote:

>>First, please explain to us why we need yet another cookie class,
> 
> more classes do not mean you cannot use a class.  mod_python works quite
> well with the python cookie class, I've used them together for a while
> now.  I also like having more than one choice, and if someone wants to
> write even another cookie class I see no problem with it.  I get to pick
> the best one for my needs vs having one solution that I have to keep
> tweaking to get it to do what I need.

I did not mean to argue that we didn't need another one; rather, I
thought it would be useful if he added a paragraph or two explaining why
this implementation was written in terms of its advantages over the
Cookie package shipping with Python.  It wasn't immediately obvious to me.

Best,

--Michael



From grisha at modpython.org  Fri Nov  7 16:48:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:00 2004
Subject: [mod_python] Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
Message-ID: <20031107164602.R37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael C. Neel wrote:

> A cool addition to the mod_python cookie class would be to raise an
> Execption (CookieLength?) if a cookie would result in more than the RFC
> limit.

That'd be rather difficult because cookies is one of those unfortunate
standards that has no RFC. Well it does, but nobody follows those. The
documentation for mod_python's class has some comments and a link to a
pretty good paper describing this sad situation.

Grisha
From grisha at modpython.org  Fri Nov  7 16:53:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <3FABF6CF.7010202@dynamine.net>
References: <3FABF6CF.7010202@dynamine.net>
Message-ID: <20031107165130.V37852@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> I thought it would be useful if he added a paragraph or two explaining
> why this implementation was written in terms of its advantages over the
> Cookie package shipping with Python.  It wasn't immediately obvious to
> me.

It's a good suggestion, but as a sidenote, this being open source - all
should/would comments are best submitted in a form of a patch ;-)

Grisha
From grisha at modpython.org  Fri Nov  7 16:58:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABF3DA.1040405@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
	<3FABF3DA.1040405@dynamine.net>
Message-ID: <20031107165354.T37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Gregory (Grisha) Trubetskoy wrote:
>
> > Second, there is a distinction between "marshalling" and "pickling", which
> > is what SerialCookie uses. The process of unmarshalling does not execute
> > arbitrary code.
>
> What's your evaluation of the possibility that the marshaling method
> will change between Python versions?  The docs explicitly offer no
> guarantee that the format will remain stable.

Well - marshalling is used to create .pyc files, and the format does
include a version number I believe. It's very unlikely that the format
will change with no backwards compatibility.

In other words I don't see this as a concern when using MarshalCookie.

Grisha
From matt at nipltd.com  Mon Nov 10 11:34:28 2003
From: matt at nipltd.com (Matt Hoskins)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] 
	Empty URL query elements causing mod_python 2.7.x and 3.0.x to seg
	fault
Message-ID: <1068464068.12464.23.camel@rhubarb>

I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
although I haven't tested them) can be made to lead to a segmentation
fault under unix (and the equivilent under win32) if you have an empty
query string element on the url. I don't have a debug build of
python/apache/etc, but it seems to be during a python_finalize that
things actually explode.

So the most simple case is:
http://myserver/?&

It'll explode with any empty query string component I believe. I'm
guessing it's the fact that the length of the whole element is 0 that's
upsetting things, as the following doesn't cause things to go
horribly wrong (and you correctly get an entry with an empty key):

http://myserver/?=&

As I'm not up to speed on python innards I don't know exactly why it's
getting upset. Should be easy to hack a fix to just skip entirely empty
entries, but the correct fix I guess would add a key/value pair of empty
strings to the url argument dictionary (why anyone would care about such
an entry I don't know ;).

I've had this error occur with apache 1.3.28/mod python 2.7.8/python
2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
2.3.2 under linux.

Regards,
Matt


From davidf at sjsoft.com  Mon Nov 10 14:10:51 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python 2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068464068.12464.23.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>
Message-ID: <3FAF804B.9080506@sjsoft.com>

Matt Hoskins wrote:

>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>although I haven't tested them) can be made to lead to a segmentation
>fault under unix (and the equivilent under win32) if you have an empty
>query string element on the url. I don't have a debug build of
>python/apache/etc, but it seems to be during a python_finalize that
>things actually explode.
>
>So the most simple case is:
>http://myserver/?&
>
>It'll explode with any empty query string component I believe. I'm
>guessing it's the fact that the length of the whole element is 0 that's
>upsetting things, as the following doesn't cause things to go
>horribly wrong (and you correctly get an entry with an empty key):
>
>http://myserver/?=&
>
>As I'm not up to speed on python innards I don't know exactly why it's
>getting upset. Should be easy to hack a fix to just skip entirely empty
>entries, but the correct fix I guess would add a key/value pair of empty
>strings to the url argument dictionary (why anyone would care about such
>an entry I don't know ;).
>
>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>2.3.2 under linux.
>
>Regards,
>Matt
>
Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
1.3.27/mod_python 2.7.8/python 2.2.2 under linux
Was this using a normal install, and do you have a simple test case of 
the config/.htaccess files and handler that generates this error?

David


From davidf at sjsoft.com  Mon Nov 10 14:59:15 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python	2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068468338.12464.32.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>	 <3FAF804B.9080506@sjsoft.com>
	<1068468338.12464.32.camel@rhubarb>
Message-ID: <3FAF8BA3.8090209@sjsoft.com>

Matt Hoskins wrote:

>On Mon, 2003-11-10 at 12:10, David Fraser wrote:
>  
>
>>Matt Hoskins wrote:
>>
>>    
>>
>>>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>>>although I haven't tested them) can be made to lead to a segmentation
>>>fault under unix (and the equivilent under win32) if you have an empty
>>>query string element on the url. I don't have a debug build of
>>>python/apache/etc, but it seems to be during a python_finalize that
>>>things actually explode.
>>>
>>>So the most simple case is:
>>>http://myserver/?&
>>>
>>>It'll explode with any empty query string component I believe. I'm
>>>guessing it's the fact that the length of the whole element is 0 that's
>>>upsetting things, as the following doesn't cause things to go
>>>horribly wrong (and you correctly get an entry with an empty key):
>>>
>>>http://myserver/?=&
>>>
>>>As I'm not up to speed on python innards I don't know exactly why it's
>>>getting upset. Should be easy to hack a fix to just skip entirely empty
>>>entries, but the correct fix I guess would add a key/value pair of empty
>>>strings to the url argument dictionary (why anyone would care about such
>>>an entry I don't know ;).
>>>
>>>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>>>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>>>2.3.2 under linux.
>>>
>>>Regards,
>>>Matt
>>>
>>>      
>>>
>>Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
>>1.3.27/mod_python 2.7.8/python 2.2.2 under linux
>>Was this using a normal install, and do you have a simple test case of 
>>the config/.htaccess files and handler that generates this error?
>>    
>>
>
>Are you using the FieldStorage stuff? Tt's actually the util.parse_qsl
>routine which is exploding for me. I'm half asleep this morning, so
>forgot to mention it was parse_qsl which was setting up stuff to cause
>things to blow up.
>
>I've hacked my the mod_python code (parse_qsl in _apachemodule.c) here
>to skip the empty entries in parse_qsl and that fixes the problem.
>
>fieldStorage = util.FieldStorage(modPythonRequest, 1) is the way that
>parse_qsl is ending up getting called here. I haven't had a chance to
>set up a piece of code which just calls this and doesn't do anything
>else, so I don't know if you have to actually use the fieldStorage thing
>or the values within in to trigger the crash, or whether just cleaning
>up after parse_qsl has been called with an empty query entity is enough
>to cause the problem.
>
>If you've tried fieldStorage = util.FieldStorage(modPythonRequest, 1)
>and aren't getting an explosion I could take the time to try create a
>minimal set of circumstations to cause the error, however I'm 99% sure
>it is down to parse_qsl given that "http://myserver/?=&" doesn't cause a
>problem with our app, and that should in theory create the same
>key/value pair through parse_qsl as "http://myserver/?&"
>
>Regards,
>Matt
>
>
>Matt
>
>
>  
>
OK, I wasn't using keep_blank_values=1
So it looks like a bug in parse_qsl, but I don't know enough CPython to 
debug it, maybe somebody else can :-)

David

PS Did you mean to send this to the list too?

From michael at dynamine.net  Mon Nov 10 10:03:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <3FAFD30C.9090200@dynamine.net>

Grisha,

It would be really cool if we could get access to the apache namespace 
in PythonPath, so we could do stuff like:

PythonPath "sys.path + [apache.server_root() + '/py']"

Best,

--Michael

From grisha at modpython.org  Mon Nov 10 14:30:30 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFD30C.9090200@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
Message-ID: <20031110142453.U88746@onyx.ispol.com>


On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Grisha,
>
> It would be really cool if we could get access to the apache namespace
> in PythonPath, so we could do stuff like:
>
> PythonPath "sys.path + [apache.server_root() + '/py']"


That would be neat, but I'm not sure it's theoretically possible, not
without some kind of trickery to simulate a run-time environment at
configuration stage...

I know mod_perl allows for inline perl to be executed at server
configuration time - I haven't looked at that stuff and can't really say I
know how it is done and whether it's something that would work with Python
as well.

Grisha
From gustavo.cordova at q-voz.com  Mon Nov 10 13:57:21 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110142453.U88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
Message-ID: <3FAFEDA1.7030705@q-voz.com>

Gregory (Grisha) Trubetskoy wrote:

>On Mon, 10 Nov 2003, Michael S. Fischer wrote:
>
>  
>
>>Grisha,
>>
>>It would be really cool if we could get access to the apache namespace
>>in PythonPath, so we could do stuff like:
>>
>>PythonPath "sys.path + [apache.server_root() + '/py']"
>>    
>>
>That would be neat, but I'm not sure it's theoretically possible, not
>without some kind of trickery to simulate a run-time environment at
>configuration stage...
>
>I know mod_perl allows for inline perl to be executed at server
>configuration time - I haven't looked at that stuff and can't really say I know how it is done and whether it's something that would work with Python as well.
>
>Grisha
>
>  
>
Without wanting to sound flippy or anything like that, but, I don't see 
much sense in such a configuration-time parameter "automatization", 
because, setting such parameters is part of any deployment, it's better 
to keep things explicit, no?

I'd prefer to use module-level variables-as-constants, with BIG 
UPPERCASE names, so as to not miss them when deploying, or updating, a 
module.

Just my thoughts.

-gustavo


From michael at dynamine.net  Mon Nov 10 12:04:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEDA1.7030705@q-voz.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
Message-ID: <3FAFEF3E.2040503@dynamine.net>

Gustavo C?rdova Avila wrote:

> Without wanting to sound flippy or anything like that, but, I don't see 
> much sense in such a configuration-time parameter "automatization", 
> because, setting such parameters is part of any deployment, it's better 
> to keep things explicit, no?

Not necessarily.  Developing Web applications in a team environment 
often entails having developers running multiple instances of the 
server, each running within the user's context and bound to his own 
port.  In situations like this, doing run-time paramaterization is critical.

But yes, for production applications it might make less sense.

--Michael

From grisha at modpython.org  Mon Nov 10 15:19:11 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEF3E.2040503@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
	<3FAFEDA1.7030705@q-voz.com> <3FAFEF3E.2040503@dynamine.net>
Message-ID: <20031110151346.K88746@onyx.ispol.com>


There is definitely value to machine-generated configuration.

What I am not sure about is the value of the automation residing within
httpd itself.

I.e., why not have the apachectl script call a Python script to generate
the server config from scratch just before starting the server?

BTW, mod_python even includes some code that could be useful in this
respect - it's in the test suite, the httpdconf.py module.

Grisha

On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Gustavo C?rdova Avila wrote:
>
> > Without wanting to sound flippy or anything like that, but, I don't see
> > much sense in such a configuration-time parameter "automatization",
> > because, setting such parameters is part of any deployment, it's better
> > to keep things explicit, no?
>
> Not necessarily.  Developing Web applications in a team environment
> often entails having developers running multiple instances of the
> server, each running within the user's context and bound to his own
> port.  In situations like this, doing run-time paramaterization is critical.
>
> But yes, for production applications it might make less sense.
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From neel at mediapulse.com  Mon Nov 10 15:22:59 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>

> > Without wanting to sound flippy or anything like that, but, 
> I don't see 
> > much sense in such a configuration-time parameter "automatization", 
> > because, setting such parameters is part of any deployment, 
> it's better 
> > to keep things explicit, no?
> 
> Not necessarily.  Developing Web applications in a team environment 
> often entails having developers running multiple instances of the 
> server, each running within the user's context and bound to his own 
> port.  In situations like this, doing run-time 
> paramaterization is critical.
> 
> But yes, for production applications it might make less sense.

Would each be under his own virtual server in apache then, and therefore
have his own config section?  This just seems to be saving some typing
the the httpd.conf file, a few lines above the PythonOption will be
DocumentRoot.  mod_perl goes insane and allows programming logic in the
conf file, and this is a bad thing imho; nothing like restarting a
server that doesn't come back because of a programmin error inside the
conf and quickly trying to debug it while the entire server remains
down.

Mike

From michael at dynamine.net  Mon Nov 10 12:54:42 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
Message-ID: <3FAFFB12.8010409@dynamine.net>

Michael C. Neel wrote:

> Would each be under his own virtual server in apache then, and therefore
> have his own config section?  This just seems to be saving some typing
> the the httpd.conf file, a few lines above the PythonOption will be
> DocumentRoot.  

I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
mod_python code in the static file store.

> mod_perl goes insane and allows programming logic in the
> conf file, and this is a bad thing imho; nothing like restarting a
> server that doesn't come back because of a programmin error inside the
> conf and quickly trying to debug it while the entire server remains
> down.

The mere fact that we can do suboptimal things with technology shouldn't 
preclude its availability.

--Michael


From michael at dynamine.net  Mon Nov 10 12:58:07 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110151346.K88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
	<3FAFEF3E.2040503@dynamine.net> <20031110151346.K88746@onyx.ispol.com>
Message-ID: <3FAFFBDF.1050606@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> There is definitely value to machine-generated configuration.
> 
> What I am not sure about is the value of the automation residing within
> httpd itself.
> 
> I.e., why not have the apachectl script call a Python script to generate
> the server config from scratch just before starting the server?

I do that now (using bash and sed, not Python).

But, I think that being able to pass variable parameters be used in 
Apache configuration is sexier, and very helpful when working in the 
context of a version-control environment.

--Michael

From bryn at bigtrouble.com  Mon Nov 10 13:07:22 2003
From: bryn at bigtrouble.com (Bryn Dyment)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] 
	static build link errors:  Python 2.3.2,  mod_python 2.7.8,  Apache
	1.3.29
Message-ID: <000d01c3a7ce$a2954920$6401a8c0@t20>

I'm getting link errors when building Apache with mod_python (static).
(I've successfully built mod_perl and PHP statically, so I'm somewhat
familiar with the process.)  Ideas?


Versions:
  Python: 2.3.2
  mod_python: 2.7.8
  Apache: 1.3.29


First, I built Python with:
  ./configure --enable-shared
  make
  make install


Next, mod_python with:
  ./configure --with-apache=../apache_1.3.29
  make static
  make install


Then, Apache with:
  ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a
  make


Here's where things went south:

---
gcc  -funsigned-char -DUSE_EXPAT -I./lib/expat-lite -DNO_DL_NEEDED `./apaci`
-Wl,--export-dynamic    -o httpd buildmark.o modules.o
modules/standard/libstandard.a  modules/python/libpython.a  main/libmain.a
./os/unix/libos.a  ap/libap.a  lib/expat-lite/libexpat.a  -lcrypt -lm
/usr/local/lib/python2.3/config/libpython2.3.a    -lutil   -lm
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tmpnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5785: warning: tmpnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tempnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5738: warning: tempnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`find_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key_value':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
.
.
.
---


Here are the results of ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a:

---
Configuring for Apache, Version 1.3.29
 + using installation path layout: FreeBSD (config.layout)
 + activated python module (modules/python/libpython.a)
Creating Makefile
Creating Configuration.apaci in src
Creating Makefile in src
 + configured for FreeBSD 4.9 platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + using "tr [a-z] [A-Z]" to uppercase
 + checking for system header files
 + adding selected modules
    o python_module uses ConfigStart/End
 + using builtin Expat
 + checking sizeof various data types
 + doing sanity check on compiler and options
Creating Makefile in src/support
Creating Makefile in src/os/unix
Creating Makefile in src/ap
Creating Makefile in src/main
Creating Makefile in src/lib/expat-lite
Creating Makefile in src/modules/standard
Creating Makefile in src/modules/python
---


From cs1spw at bath.ac.uk  Mon Nov 10 15:16:30 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <3FB0002E.7050007@bath.ac.uk>

Hi all,

Is there a way of sending a "message" to all Apache children running a 
mod_python application? Here's the problem: we have a template system 
which compiles template strings in to an in-memory data structure. This 
structure is cached in memory in a global dictionary for each Apache 
child. At the moment templates are stored in the cache with a timestamp 
saying when they were loaded, and expire and are reloaded every 5 
minutes. We want to be able to instantly invalidate a cached template if 
an urgent change needs to be made to the site.

Is there a way of pushing out a message to all of the Apache children 
saying "reload template X NOW", without having to hit the file system or 
database for every template request?

Cheers,

Simon Willison

From seth at picklematrix.net  Mon Nov 10 11:29:07 2003
From: seth at picklematrix.net (Seth Ladd)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>


On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes.  
I can assume that most templates will be static for longer than 5 
minutes.

Seth

From cs1spw at bath.ac.uk  Mon Nov 10 15:46:44 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
References: <3FB0002E.7050007@bath.ac.uk>
	<EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
Message-ID: <3FB00744.8070601@bath.ac.uk>

Seth Ladd wrote:

> Do you check the timestamp on the template from the filesystem?  That 
> might be better than to just throw away the template every 5 minutes.  I 
> can assume that most templates will be static for longer than 5 minutes.

Actually we do - every 5 minutes we check the timestamp to see if an 
update has been made. We're trying to avoid making the call to the 
filesystem to check the timestamp on every request.

-- 
Simon Willison
Web development weblog: http://simon.incutio.com/

From neel at mediapulse.com  Mon Nov 10 16:49:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>

> I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
> mod_python code in the static file store.
> 
Now I am lost, wouldn't ServerRoot always be the same?  Apache only
allows this directive once, so I'm missing the dynamic part.  Do you
have each developer running his own apache on a different port, in a
different directory?

> The mere fact that we can do suboptimal things with 
> technology shouldn't 
> preclude its availability.
> 
I used to think that, and wrote a lot of perl - I'm glad I stopped =p.
If you really want this, look into mod_perl and/or mod_macro, both of
which should be able to do what you are looking for - though I freely
admit I'm not sure what you are needing.  Perl looks something like:

  <Perl>
  
  $Location{"/~dougm/"} = {
    AuthUserFile => '/tmp/htpasswd',
    AuthType => 'Basic',
    AuthName => 'test',
    DirectoryIndex => [qw(index.html index.htm)],
    Limit => {
      METHODS => 'GET POST',
      require => 'user dougm',
    },
  };
  
  </Perl>

	If you want a more detailed example, search for conf file from a
Colbalt system, which configured everything based on a directory
structure including SSL.

Mike

From svenne at krap.dk  Mon Nov 10 22:52:11 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <3FB0088B.8040305@krap.dk>

What about using shared memory/semaphores (shm on linux) ? I have used 
it successfully before (in PHP) for a similar case. It's blazing fast 
and allows you to have an invalidate-script outside). Each process 
simply aquires the semaphore (overkill, but truly safe) and then reads 
the "versionnumber" (or perhaps last change) from a shm-memory segment.

Oh, by the way. Out of bitter experience, don't "loose" the semaphore, 
always keep it accounted for....

By googleling, i found 
http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

Svenne

Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?
>
> Cheers,
>
> Simon Willison
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From michael at dynamine.net  Mon Nov 10 14:00:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
Message-ID: <3FB00A7B.3080407@dynamine.net>

Michael C. Neel wrote:

>>I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
>>mod_python code in the static file store.
>>
> Now I am lost, wouldn't ServerRoot always be the same?  Apache only
> allows this directive once, so I'm missing the dynamic part.  Do you
> have each developer running his own apache on a different port, in a
> different directory?

Yes.  Each user has a subset of the Apache directory structure in his 
workspace, including a log directory, configuration directory, etc. -- 
not the binaries or libraries at this point, but just about everything 
else.  So, in this arrangement, ServerRoot is dynamic.

--Michael

From neel at mediapulse.com  Mon Nov 10 17:21:28 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B3@johnson.mediapulse.net>

> Yes.  Each user has a subset of the Apache directory structure in his 
> workspace, including a log directory, configuration 
> directory, etc. -- 
> not the binaries or libraries at this point, but just about 
> everything 
> else.  So, in this arrangement, ServerRoot is dynamic.
> 

Hmm... we have the same thing, only using virtual servers.  We split out
the conf to each directory and then use includes in the main conf.  Each
mini-conf only has the virtualhost lines that set the dir structure for
that server.  What are you getting from separate servers vs virtual
ones?  I'm not being a jerk, we here have several developers working as
well and just trying to see if there might be another way for us to
configure a web server.

Mike

From gnb at itga.com.au  Tue Nov 11 09:58:45 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Sending a message to Apache children 
In-Reply-To: Your message of Mon, 10 Nov 2003 15:46:44 -0600.
Message-ID: <200311102258.JAA20974@lightning.itga.com.au>


cs1spw@bath.ac.uk said:
> Actually we do - every 5 minutes we check the timestamp to see if an
> update has been made. We're trying to avoid making the call to the
> filesystem to check the timestamp on every request. 

Actually, my gut feeling is that a stat() on a file that is still in the cache 
is not going to be noticeably more expensive than the gettimeofday() call you 
need to do to decide whether five minutes are up.  So give it a whirl with the 
stat() on every call and see what that does to your performance, you might be 
surprised.


From michael at dynamine.net  Mon Nov 10 15:11:46 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <200311102258.JAA20974@lightning.itga.com.au>
References: <200311102258.JAA20974@lightning.itga.com.au>
Message-ID: <3FB01B32.6090605@dynamine.net>

Gregory Bond wrote:

> cs1spw@bath.ac.uk said:
> 
>>Actually we do - every 5 minutes we check the timestamp to see if an
>>update has been made. We're trying to avoid making the call to the
>>filesystem to check the timestamp on every request. 
> 
> 
> Actually, my gut feeling is that a stat() on a file that is still in the cache 
> is not going to be noticeably more expensive than the gettimeofday() call you 
> need to do to decide whether five minutes are up.  So give it a whirl with the 
> stat() on every call and see what that does to your performance, you might be 
> surprised.

Poster is correct; if your machine's inode cache is too small, you can 
adjust it via sysctl kern.maxvnodes (BSD); Linux's inode cache is dynamic.

--Michael

From perry.tew at cibavision.novartis.com  Tue Nov 11 08:27:40 2003
From: perry.tew at cibavision.novartis.com (perry.tew@cibavision.novartis.com)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <OF0364206B.49D2044C-ON85256DDB.004803A7-85256DDB.0049F1C9@EU.novartis.net>

Something I've found useful is to use the CleanupHandler to handle this 
kind of thing.  I have a security realm that caches users, roles, and 
protected urls.  I have a cleanup handler that detects changes in the 
database and updates the cache.  Since this happens after the request has 
ended, there is no impact to the user.  Each child is updated after each 
one handles a request.  The only downside is that a single request must be 
served before the change is placed into effect.  However, given the number 
of requests my handlers serve, that's a very small issue compared to 
adding the overhead of checking for changes during every single request 
while the browser is waiting.

Just some thoughts,
Perry




On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes. 
I can assume that most templates will be static for longer than 5 
minutes.

Seth

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python



From eric.ziegenhorn at ngc.com  Wed Nov 12 15:32:00 2003
From: eric.ziegenhorn at ngc.com (Ziegenhorn, Eric)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] subprocesses
Message-ID: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>

Hello,

I've read about the multitude of problems in running subprocesses under
mod_python using commands such as os.system() or one of the os.popen().
However, I've never been able to find a work around.  I'm particularly
interested in using os.popen3().  Does anyone know if this will work?
Should I just go back to straight cgi?

Thanks,
Eric
From brianh at exelixis.com  Wed Nov 12 16:25:14 2003
From: brianh at exelixis.com (Brian Hawthorne)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] subprocesses
In-Reply-To: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>
Message-ID: <Pine.GSO.4.44.0311121624250.19526-100000@timeless.exelixis.com>

i use popen3 under modpy and it works just fine.

-brian hawthorne

On Wed, 12 Nov 2003, Ziegenhorn, Eric wrote:

> Hello,
>
> I've read about the multitude of problems in running subprocesses under
> mod_python using commands such as os.system() or one of the os.popen().
> However, I've never been able to find a work around.  I'm particularly
> interested in using os.popen3().  Does anyone know if this will work?
> Should I just go back to straight cgi?
>
> Thanks,
> Eric
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From sergey at optimaltec.com  Wed Nov 12 15:53:05 2003
From: sergey at optimaltec.com (Sergey A. Lipnevich)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] 
	[PATCH] APR 1 compatibility: apr_pool_sub_make -> apr_pool_create_ex
Message-ID: <bou6k6$9b4$1@sea.gmane.org>

Hi!

Here's a small patch to insure mod_python 3.1.2b compiles with APR 0.9 
and 1.0. It replaces a call to deprecated apr_pool_sub_make with a call 
to apr_pool_create_ex.
Thank you!

Sergey.
-------------- next part --------------
diff -purN mod_python-3.1.2b/src/hlistobject.c mod_python/src/hlistobject.c
--- mod_python-3.1.2b/src/hlistobject.c	2002-11-07 19:15:11.000000000 -0500
+++ mod_python/src/hlistobject.c	2003-11-12 15:20:02.000000000 -0500
@@ -83,7 +83,7 @@ PyObject *MpHList_FromHLEntry(hl_entry *
         PyErr_NoMemory();
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
 
     result->pool = p;
     result->head = hlist_copy(p, hle);
diff -purN mod_python-3.1.2b/src/tableobject.c mod_python/src/tableobject.c
--- mod_python-3.1.2b/src/tableobject.c	2003-07-14 16:51:32.000000000 -0400
+++ mod_python/src/tableobject.c	2003-11-12 15:19:47.000000000 -0500
@@ -120,7 +120,7 @@ PyObject * MpTable_New()
     apr_pool_t *p;
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
     
     /* two is a wild guess */
     t = (tableobject *)MpTable_FromTable(apr_table_make(p, 2));
@@ -1006,7 +1006,7 @@ static PyObject *table_new(PyTypeObject 
     if (self != NULL) {
         apr_pool_t *p;
         tableobject *t = (tableobject *)self;
-        apr_pool_sub_make(&p, NULL, NULL);
+        apr_pool_create_ex(&p, NULL, NULL, NULL);
         t->pool = p;
         t->table = apr_table_make(p, 2);
     }
From modpython at holovaty.com  Thu Nov 13 14:41:52 2003
From: modpython at holovaty.com (Adrian Holovaty)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] mod_python error with Fedora Core 1
Message-ID: <200311131441.52452.modpython@holovaty.com>

I've installed Fedora Core 1 on my laptop, along with its standard RPMs of 
Apache 2 (httpd-2.0.47-10.rpm) and mod_python (mod_python-3.0.3-3.rpm). The 
mod_python package appears to be buggy.

Here's the httpd.conf code I'm using:

PythonPath "sys.path+['/home/adrian/doc/work/dev/modpython']"
<Location "/modpython">
    PythonDebug On
    SetHandler python-program
    PythonHandler testhandler
</Location>

Here's the handler (/home/adrian/doc/work/dev/modpython/testhandler.py):

from mod_python import apache
def handler(req):
    req.content_type = "text/html"
    req.write("Testing")
    return apache.OK

And here's the error output I see in my browser:

"""
Mod_python error: "PythonHandler testhandler"

Traceback (most recent call last):

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 320, in HandlerDispatch

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 496, in import_module

ImportError: No module named testhandler
"""

There are a few things wrong here. First, it should work -- i.e., the output 
should be "Testing". Second, the directory /usr/src/build doesn't exist on my 
machine, so that error message is quite perplexing.

The above httpd.conf settings and handler code worked perfectly with Red Hat 
9; I assume the bug is in the Fedora packaging. Any idea whether I can get it 
to work somehow? Has anybody had luck running mod_python on Fedora Core 1?

Thanks!

Adrian

From blazek at firma.seznam.cz  Fri Nov 14 12:56:14 2003
From: blazek at firma.seznam.cz (Vaclav Blazek)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] 
	Re: Empty URL query elements causing mod_python 2.7.x and 3.0.x to
	seg fault
Message-ID: <200311141256.14922.blazek@firma.seznam.cz>

> OK, I wasn't using keep_blank_values=1
> So it looks like a bug in parse_qsl, but I don't know enough CPython to 
> debug it, maybe somebody else can :-)

> David

> PS Did you mean to send this to the list too?

Hello all mod_pythoner's,

I'm sorry to reply to the message outside of it's thread, but I've just 
subscribted to this mailing list and cannot get the Message-ID of the 
original message.

Well, the main problem is in functions parse_qs() and parse_qsl() 
(src/_apachemodule.c). In these functions, there's the query-string broken by 
the '&' character and any part is considered as key=value pair which is then 
broken by the '=' character and stored in dict (parse_qs) or in list 
(parse_qsl).

Everything is fine until the size of pair is 0. In this case, there are 
created two python strings with zero length. Then the processing of both 
parst is made and these python strings are resized to the new size, which is 
also 0. But python (to be more precise, the function _PyString_Resize()) 
complains (by an exception) when you try to resize string of size 0 to size 
0. Since this exception is not handled and the _PyString_Resize() function 
changes the pointer to the python string to NULL, next py_DECREF() causes 
SIGSEGV.

I've added code which tests original pair's length in both functions and skips 
processing when string is empty.  I'm usign mod_python 3.0.3, but the code of 
these functions is the same in the latest version. Here comes the diff:

@@ -183,6 +183,11 @@
        cpair = PyString_AS_STRING(pair);

        len = strlen(cpair);
+        if (!len) {
+            /* Skip processing of empty string. */
+            ++n;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, len);
        if (key == NULL)
            return NULL;
@@ -301,6 +306,11 @@

        /* split the "abc=def" pair */
        plen = strlen(cpair);
+        if (!plen) {
+            /* Skip  processing of empty string. */
+            ++i;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, plen);
        if (key == NULL)
            return NULL;

--
Vaclav Blazek, Programer
Seznam.cz a.s., Prague, Czech Republic

From michael at dynamine.net  Mon Nov 17 12:24:59 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] req.write() can't take a tuple
Message-ID: <3FB92E9B.7050609@dynamine.net>

Hi Grish,

Is it possible to change req.write() so that it can take a tuple of 
strings as well as string?  It would be nice to be able to call 
req.write(data, "\n") instead of breaking it into two calls.

--Michael

From michael at dynamine.net  Mon Nov 17 12:31:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:01 2004
Subject: IGNORE Re: [mod_python] req.write() can't take a tuple
In-Reply-To: <3FB92E9B.7050609@dynamine.net>
References: <3FB92E9B.7050609@dynamine.net>
Message-ID: <3FB9303C.60604@dynamine.net>

Please ignore the previous message.  No need to reply.

--Michael

Michael S. Fischer wrote:

> Hi Grish,
> 
> Is it possible to change req.write() so that it can take a tuple of 
> strings as well as string?  It would be nice to be able to call 
> req.write(data, "\n") instead of breaking it into two calls.
> 
> --Michael
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From michael at kleehammer.com  Mon Nov 17 23:23:30 2003
From: michael at kleehammer.com (Michael Kleehammer)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
Message-ID: <16313.44242.563177.63147@home.kleehammer.com>

Whenever I attempt to use sessions, the DbmSession class chooses the
dbhash module and crashes when attempting to create the database.  (The
file is never created.)

* Fedora Core 1 (basically RH9)
* Newly compiled Apache 2.0.48
* Python 2.3
* mod_python 3.1.2b

Here is a small handler that exhibits the problem on my box.  If it runs
on anyone else's box, that would be good to know.

  from mod_python import apache
  import dbhash
  
  def handler(req):
      req.log_error("open", apache.APLOG_NOTICE)
  
      # seg fault in here
      result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
  
      req.log_error("opened")
      return apache.OK

The relevant Apache error log lines are:

  [notice] mod_python: (Re)importing module 'controller'
  [notice] [client 127.0.0.1] open
  [notice] child pid 11211 exit signal Segmentation fault (11)

Naturally, I've tested similar code outside of mod_python and it works
fine.  I'm wondering if dbhash is thread safe.

Obviously I can call DbmSession instead of Session and pass dumbdbm (or
another type -- I haven't tested any others yet), but I'm wondering why
the default setup isn't working.

Any thoughts?

Michael Kleehammer

From conrad at hep.caltech.edu  Wed Nov 19 07:09:32 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
In-Reply-To: <16313.44242.563177.63147@home.kleehammer.com>
References: <16313.44242.563177.63147@home.kleehammer.com>
Message-ID: <1069250970.3161.11.camel@localhost.localdomain>

Hi Michael

Since you compiled Apache yourself, please make sure that the version of
libdb that Apache and mod_python (and Python?) are the same.

I've seen the same behaviour when e.g. Apache was linked against
libdb-4.0 and mod_python against libdb-4.1.

HTH

Conrad

On Mon, 2003-11-17 at 22:23, Michael Kleehammer wrote:
> Whenever I attempt to use sessions, the DbmSession class chooses the
> dbhash module and crashes when attempting to create the database.  (The
> file is never created.)
> 
> * Fedora Core 1 (basically RH9)
> * Newly compiled Apache 2.0.48
> * Python 2.3
> * mod_python 3.1.2b
> 
> Here is a small handler that exhibits the problem on my box.  If it runs
> on anyone else's box, that would be good to know.
> 
>   from mod_python import apache
>   import dbhash
>   
>   def handler(req):
>       req.log_error("open", apache.APLOG_NOTICE)
>   
>       # seg fault in here
>       result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
>   
>       req.log_error("opened")
>       return apache.OK
> 
> The relevant Apache error log lines are:
> 
>   [notice] mod_python: (Re)importing module 'controller'
>   [notice] [client 127.0.0.1] open
>   [notice] child pid 11211 exit signal Segmentation fault (11)
> 
> Naturally, I've tested similar code outside of mod_python and it works
> fine.  I'm wondering if dbhash is thread safe.
> 
> Obviously I can call DbmSession instead of Session and pass dumbdbm (or
> another type -- I haven't tested any others yet), but I'm wondering why
> the default setup isn't working.
> 
> Any thoughts?
> 
> Michael Kleehammer
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From davidf at sjsoft.com  Thu Nov 20 14:19:31 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:54:01 2004
Subject: [mod_python] 
	Apache child process restarting under Win32 - import errors
Message-ID: <3FBCB153.6020909@sjsoft.com>

Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


From dwmp at opti.cgi.net  Thu Nov 20 19:47:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Multiple handlers
Message-ID: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>


I'm a mod_python newbie using mod_python 3.1.2b and Apache 2.0.48.  I'm 
trying to setup my test directory to run .py files under a request handler 
and any .psp files under the mod_python.psp handler.  Here's my Apache config.

### Test ###
<Directory /usr/local/apache2/htdocs/test>
     AddHandler mod_python .py
     PythonHandler index
     PythonDebug On

     AddHandler mod_python .psp
     PythonHandler mod_python.psp
</Directory>

The problem is that I get both handlers running one after the other.  The 
request handler (index.py) handles the request, sends output, returns 
apache.OK and then the mod_python.psp tries to handle the same request, 
appending output to the index.py output.  Why does this config not set it 
up so that all .py requests go to index.py and all requests for .psp files 
get handled by mod_python.psp?

It would be nice if the documentation had a more detailed explanation of 
how Apache uses handlers and how to setup mod_python in the Apache 
config.  Those of us who are used to just putting a .php file in the 
filesystem and watching it run need a little hand holding.

-Dan

From grisha at modpython.org  Thu Nov 20 22:12:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Multiple handlers
In-Reply-To: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
References: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
Message-ID: <20031120221124.N69786@onyx.ispol.com>



On Thu, 20 Nov 2003, Dan W. wrote:

> ### Test ###
> <Directory /usr/local/apache2/htdocs/test>
>      AddHandler mod_python .py
>      PythonHandler index
>      PythonDebug On
>
>      AddHandler mod_python .psp
>      PythonHandler mod_python.psp
> </Directory>


Try this:

<Directory /usr/local/apache2/htdocs/test>

      AddHandler mod_python .py .psp

      PythonHandler index | .py
      PythonHandler mod_python.psp | .psp

      PythonDebug On

</Directory>


Grisha
From vmanera at manord.com  Fri Nov 21 18:00:18 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:54:02 2004
Subject: R: [mod_python] Apache child process restarting under Win32 - imp
	ort errors
Message-ID: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>

we have had the same behavior with ':&' 

Da: 	Cassiano, Marco  
Inviato:	luned? 16 giugno 2003 11.53
A:	'security@apache.org'
Cc:	'Gregory (Grisha) Trubetskoy'
Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF

I would like to inform you of the behaviour of Apache when a link with a
particular HREF is clicked.

First of all, our configuration is : 

Windows 2000 Server SP3
Apache 2.0.46
Mod-python 3.0.3
Active State Python 2.2.2


We have a python script that runs under mod-python which looks into the
database to find some articles and builds a table with the links to
"explode" each article and look into its details. This HTML table contains a
HREF for each article. Each HREF actually contains a call to another python
script that does the "explode" job. We pass the parameters to this script in
the usual "&" concatenation form.
It happened that one of the articles had a semicolon (";") as the final
character of its description
so the HREF was built in following way : "descriptionwithfinal;&next parm".
In other words the HREF contained the sequence ";&".
When we clicked on this link we got a "Page not found" error on the browser
but what really Apache did is the following (excerpt from error.log) :



[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.


-----Messaggio originale-----
Da: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
Inviato: gioved? 20 novembre 2003 13.20
A: mod_python@modpython.org
Oggetto: [mod_python] Apache child process restarting under Win32 -
import errors


Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From martin.clausen at privat.dk  Sat Nov 22 23:13:53 2003
From: martin.clausen at privat.dk (martin.clausen@privat.dk)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>

How do I do form-based authentication using mod_python / Apache. I would like to use Apaches authentication mechanism(as used in the mod_pyhton manual(release 3.0.3), but would like a form-based login/password solution instead of the pop-up - is that possible ?

The only solution I have been able to find after a lot of googling and mailing list searches is to use javascript to prefix the login and password to the request from a form on a "cover" page, but besides from the inelegance inhenrent in this solution and the security risk in transmitting the password as part of the request, it would not prevent the pop-up from appearing if someone requested the login script directly.

Any help is appreciated, also if the you have a solution for form-based authentication that does not use Apache.

Regards,

Martin

From jciccale at mac.com  Sun Nov 23 02:16:01 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <7001386.1069550161586.JavaMail.jciccale@mac.com>

Hi, 
   I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly I'm unable to use the new Session handling classes, I get "Failled to acquire global mutex lock" and this on apache's error log
  "(13)Permission denied: Failed to acquire global mutex lock at index 9"

 Anyone that is getting the same errors?

Thanks,
Julian
From grisha at modpython.org  Sat Nov 22 21:43:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <20031122214159.N734@onyx.ispol.com>


See if you can get the latest sources from CVS - I believe this has been
fixed soon after 3.1.1b was released.

Grisha

On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi,

>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
> Sadly I'm unable to use the new Session handling classes, I get "Failled
> to acquire global mutex lock" and this on apache's error log
>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
>
> Thanks,
> Julian
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From jciccale at mac.com  Sun Nov 23 13:24:26 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <1252866.1069590266578.JavaMail.jciccale@mac.com>

Hi and thanks,
  I got that problem solved but now it seems it's happening something weird. I compiled the sources from CVS (enabling the debugging lines on the locking calls). On a first request i get these lines:

[Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
[Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429

, which seems to lock mutex at ix 30. (and remains locked even when the request has completed). Then when a second request comes i get this:

[Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425

. Obviously that process remains locked forever, waiting on a lock forever.
How it was meant to work the locking mechanism? It seems the problem is in Session.py and how it handles the locking..

BTW. I'm working on a very cool project take a look (pythonwork.sf.net)
Bye,
Julian

On Sunday, November 23, 2003, at 03:43AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>See if you can get the latest sources from CVS - I believe this has been
>fixed soon after 3.1.1b was released.
>
>Grisha
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi,
>
>>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
>> Sadly I'm unable to use the new Session handling classes, I get "Failled
>> to acquire global mutex lock" and this on apache's error log
>>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>>
>>  Anyone that is getting the same errors?
>>
>> Thanks,
>> Julian
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>
>

From tropezien at croxx.de  Sun Nov 23 15:16:33 2003
From: tropezien at croxx.de (Tropezien)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <200311231516.33716.tropezien@croxx.de>

Am Sonntag, 23. November 2003 02:16 schrieb Julian Ciccale:
> Hi,
>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly
> I'm unable to use the new Session handling classes, I get "Failled to
> acquire global mutex lock" and this on apache's error log "(13)Permission
> denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python 3.1.2b.
Some further investigations cleared up that mod_python tries to get more than 
400 semaphores during launch of httpd. There is an estimated amount of 16 
threads (AP_MPMQ_MAX_THREADS) for all (25) possible daemon-process 
( AP_MPMQ_MAX_DAEMONS).
My quick and dirty solution was to increase the amount of system semaphores 
supported by the Linux-kernel with

    >georg@jeordi:/etc/rc.d$ /sbin/sysctl kernel.sem
    kernel.sem = 256        32000   32      512

I changed my /etc/sysctl.conf to:

    kernel.sem = 500 32000 32 512

and added the line:

    sysctl -p

into the Init-Skript of the Apache (rc.httpd) before the httpd-daemon is 
started.

Ciao, Georg

From tim.stebbing at nunatak.com.au  Mon Nov 24 09:18:32 2003
From: tim.stebbing at nunatak.com.au (Timothy Stebbing)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] mod_dav phases question
Message-ID: <3FC13238.4030208@nunatak.com.au>

The apache module 'mod_dav' provides webdav ability to be added to 
<directory>'s.
this provides the usual web_dav calls, one of which is 'PUT'. Apache 
handles put internally,
however we are using mod_dav as part of our CMS, to allow our users to 
'checkout' a document
to a webdav folder and open the file, and we want to capture the put 
phase, so we can take the
newly modified file from the webdav folder and check it back in to our cms.

How can I capture the mod_dav put phase with mod_python?  I was thinking 
an apache filter,
but how can I have that applied only to the mod_dav put phase, rather 
than every request? Is
there some large list somewhere of all the possible phases provided by 
every module I can apply
filters to?

-TJS


From grisha at modpython.org  Sun Nov 23 20:12:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <200311231516.33716.tropezien@croxx.de>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
 <200311231516.33716.tropezien@croxx.de>
Message-ID: <20031123201050.S16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Tropezien wrote:

> Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> 3.1.2b. Some further investigations cleared up that mod_python tries to
> get more than 400 semaphores during launch of httpd.

Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
semaphores, which is 32. What does your log say when you start httpd?

Grisha


From grisha at modpython.org  Sun Nov 23 20:15:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <1252866.1069590266578.JavaMail.jciccale@mac.com>
References: <1252866.1069590266578.JavaMail.jciccale@mac.com>
Message-ID: <20031123201252.N16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi and thanks,

>   I got that problem solved but now it seems it's happening something
> weird. I compiled the sources from CVS (enabling the debugging lines on
> the locking calls). On a first request i get these lines:
>
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>
> , which seems to lock mutex at ix 30. (and remains locked even when the
> request has completed). Then when a second request comes i get this:
>
> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>
> . Obviously that process remains locked forever, waiting on a lock forever.

How are you using your sessions? Do you by any chance assign it to a
global variable - the session releases the lock when you call it's ulock()
method explicitely, or when it goes out of scope, so assigning it to a
global would make it stay there and locked even after the request is done.

Grisha
From jciccale at mac.com  Mon Nov 24 02:49:40 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6232663.1069638580829.JavaMail.jciccale@mac.com>

Kind of. What I do is the followoing

try:
    from mod_python.Session import Session as DefaultSessionCall
except:
    def DefaultSessionCall( r ):
       return None

, this is a peice of code I use to make configurable the Session class the user wants to use. I also then try to call a setter method on a user's class to pass the session he works on. How should I use the session? The locking mechanism is needed for read/write or just write? I think I may write a session wrapper class to lock unlock on user call to get/set properties..


 
On Monday, November 24, 2003, at 02:15AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi and thanks,
>
>>   I got that problem solved but now it seems it's happening something
>> weird. I compiled the sources from CVS (enabling the debugging lines on
>> the locking calls). On a first request i get these lines:
>>
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>>
>> , which seems to lock mutex at ix 30. (and remains locked even when the
>> request has completed). Then when a second request comes i get this:
>>
>> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>>
>> . Obviously that process remains locked forever, waiting on a lock forever.
>
>How are you using your sessions? Do you by any chance assign it to a
>global variable - the session releases the lock when you call it's ulock()
>method explicitely, or when it goes out of scope, so assigning it to a
>global would make it stay there and locked even after the request is done.
>
>Grisha
>
>
From grisha at modpython.org  Sun Nov 23 23:25:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <6232663.1069638580829.JavaMail.jciccale@mac.com>
References: <6232663.1069638580829.JavaMail.jciccale@mac.com>
Message-ID: <20031123231631.U16686@onyx.ispol.com>



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Kind of. What I do is the followoing
>
> try:
>     from mod_python.Session import Session as DefaultSessionCall
> except:
>     def DefaultSessionCall( r ):
>        return None
>
> , this is a peice of code I use to make configurable the Session class
> the user wants to use.

This is fine, but make sure that after you do:

   session = DefaultSessionCall(r)

that the session variable is not referenced by anything after the request
is done. Or you can explicitely unlock it:

   session.unlock()

> I also then try to call a setter method on a user's class to pass the
> session he works on. How should I use the session? The locking mechanism
> is needed for read/write or just write?

You don't need to worry about locking for read and write, that locking is
taken care of automtically. You need session locking to make sure that no
two HTTP requests for the same session execute at the same time.

> I think I may write a session wrapper class to lock unlock on user call
> to get/set properties..

Your wrapper can avoid session locking altogether by instantiating it as
such:

session = Session(req, lock=0)

Grisha
From randallk at cpsc.ucalgary.ca  Sun Nov 23 23:02:04 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <Pine.LNX.4.44.0311232250010.8753-100000@csl>


Hi,

I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
the session handling stuff.

When I try to connect to my postgresql database in the following way:

from pyPgSQL import PgSQL
pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')


Apache error_log says:

PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'

and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
When I do the same outside apache/mod_python I can see the connect function.

Any thoughts?


dir(PgSQL)
running within mod_python:

['BooleanType', 'BufferType', 'BuiltinFunctionType',
'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
'LongType', 'MethodType', 'ModuleType', 'NoneType',
'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']

dir(PgSQL)
running outside mod_python:

['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
're_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
'threadsafety', 'version', 'weakref']


httpd.conf:

LoadModule python_module /var/www2/modules/mod_python.so
<Directory /var/www2/htdocs/billing>  
SetHandler python-program
PythonHandler mod_python.publisher
</Directory>


From jciccale at mac.com  Mon Nov 24 09:32:57 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <12600642.1069662777616.JavaMail.jciccale@mac.com>

Which python version are you using?

Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?

Check it with
import sys
print sys.version


On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>Hi,
>
>I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>the session handling stuff.
>
>When I try to connect to my postgresql database in the following way:
>
>from pyPgSQL import PgSQL
>pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>
>
>Apache error_log says:
>
>PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>
>and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
>When I do the same outside apache/mod_python I can see the connect function.
>
>Any thoughts?
>
>
>dir(PgSQL)
>running within mod_python:
>
>['BooleanType', 'BufferType', 'BuiltinFunctionType',
>'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>'LongType', 'MethodType', 'ModuleType', 'NoneType',
>'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>
>dir(PgSQL)
>running outside mod_python:
>
>['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>'threadsafety', 'version', 'weakref']
>
>
>httpd.conf:
>
>LoadModule python_module /var/www2/modules/mod_python.so
><Directory /var/www2/htdocs/billing>  
>SetHandler python-program
>PythonHandler mod_python.publisher
></Directory>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From jciccale at mac.com  Mon Nov 24 10:44:17 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6678826.1069667057374.JavaMail.jciccale@mac.com>

Thanks, BTW the "lock" argument its only available through BaseSession's __init__ and not DbmSession/MemorySession. It would be interesting to have it.. There are cases where you may want to request be processed at the same time for the same session, for example if the users calls a pdf generating page and at the same time he opens another browser win to do soma other stuff.

It seems that my problem would be the scope stuff cause I dont get my data saved even by unlocking the session.
By now I've made a work around by calling unlock & save when the request is done

Thanks,
Julian

I removed the definitions and I'm using directly mod_python's Session object. then action
On Monday, November 24, 2003, at 05:25AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Kind of. What I do is the followoing
>>
>> try:
>>     from mod_python.Session import Session as DefaultSessionCall
>> except:
>>     def DefaultSessionCall( r ):
>>        return None
>>
>> , this is a peice of code I use to make configurable the Session class
>> the user wants to use.
>
>This is fine, but make sure that after you do:
>
>   session = DefaultSessionCall(r)
>
>that the session variable is not referenced by anything after the request
>is done. Or you can explicitely unlock it:
>
>   session.unlock()
>
>> I also then try to call a setter method on a user's class to pass the
>> session he works on. How should I use the session? The locking mechanism
>> is needed for read/write or just write?
>
>You don't need to worry about locking for read and write, that locking is
>taken care of automtically. You need session locking to make sure that no
>two HTTP requests for the same session execute at the same time.
>
>> I think I may write a session wrapper class to lock unlock on user call
>> to get/set properties..
>
>Your wrapper can avoid session locking altogether by instantiating it as
>such:
>
>session = Session(req, lock=0)
>
>Grisha
>
>
From gwidion at mpc.com.br  Mon Nov 24 10:13:31 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
Message-ID: <200311241013.31596.gwidion@mpc.com.br>

Hi there.

I am actually implementing this in the very first mod python app I am 
developing.


You actually have to override the Auth Handler from apache with a 
Python Module. 

If you google for it, you will be offered a lot of ready-made session 
control stuff, as part of existing packages.

It is not, however, that hard to implement form scratch. Here is my 
.htaccess:

  AddHandler python-program .py
 PythonHandler dummy
 PythonAuthenHandler verify


As you can see, the PythonAuthenHandler is "verify.py" which is 
called. (inside it, the authenhandler() function is called)

I them encode some session data (like originating IP + user password) 
to generate a MD5 hashed cookie I send to the browser to further 
authentication. In the server, I save a session ID file with  the 
session data, and regenerate the cookie at each page load (which goes 
thru the "AuthenHandler" again) and compare it with the browser-sent 
cookie.

One thing I am still trying to find out is how to detect when the 
person navigate to another site  - in which case, the session should 
be terminated. I mean: I cannot allow that once in other site one can 
be back in the secure section by hitting "back".

As of the time, I plan to implement this thru a javascript that will 
destroy the cookie in a "unload()" event. But I would appreciate more 
suggestions.


Regards,

	JS
	-><-


On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
> How do I do form-based authentication using mod_python / Apache. I
> would like to use Apaches authentication mechanism(as used in the
> mod_pyhton manual(release 3.0.3), but would like a form-based
> login/password solution instead of the pop-up - is that possible ?
>
> The only solution I have been able to find after a lot of googling
> and mailing list searches is to use javascript to prefix the login
> and password to the request from a form on a "cover" page, but
> besides from the inelegance inhenrent in this solution and the
> security risk in transmitting the password as part of the request,
> it would not prevent the pop-up from appearing if someone requested
> the login script directly.
>
> Any help is appreciated, also if the you have a solution for
> form-based authentication that does not use Apache.
>
> Regards,
>
> Martin
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 

Este e-mail ?, exceto pelas partes citadas
de outros e-mails, copyright(c) de Jo?o Sebasti?o
de Oliveira Bueno. Nenhuma c?pia deste e-mail ou 
parte do mesmo pode existir nas depend?ncias 
de, ou em posse de funcion?rios, de associa??es
protetoras de direitos autorais Brasileiras,
 dos Estados Unidos da Am?rica, ou de outros
pa?ses. Em particular essa exce??o do direito
de leitura e posse deste e-mail se extende ?
ABRA, ABPI, ABES, BSA, RIAA e MPAA. Violadores
est?o infringindo as leis internacionais de 
direitos autorais e sujeitos ?s penalidades cab?veis.
Voc? pode re-utilizar, emendar,  acrescentar
suas palavras e citar e re-enviar qualquer 
parte do mesmo, desde que essa nota seja 
preservada e se n?o pertencer a alguma
das entidades supracitadas.




From davidf at sjsoft.com  Mon Nov 24 14:23:47 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:54:02 2004
Subject: R: [mod_python] Apache child process restarting under Win32 -
 imp	ort errors
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
Message-ID: <3FC1F853.4020607@sjsoft.com>

Manera, Villiam wrote:

>we have had the same behavior with ':&' 
>  
>
Thanks, this was interesting...

>Da: 	Cassiano, Marco  
>Inviato:	luned? 16 giugno 2003 11.53
>A:	'security@apache.org'
>Cc:	'Gregory (Grisha) Trubetskoy'
>Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF
>
>I would like to inform you of the behaviour of Apache when a link with a
>particular HREF is clicked.
>
>First of all, our configuration is : 
>
>Windows 2000 Server SP3
>Apache 2.0.46
>Mod-python 3.0.3
>Active State Python 2.2.2
>
>
>We have a python script that runs under mod-python which looks into the
>database to find some articles and builds a table with the links to
>"explode" each article and look into its details. This HTML table contains a
>HREF for each article. Each HREF actually contains a call to another python
>script that does the "explode" job. We pass the parameters to this script in
>the usual "&" concatenation form.
>It happened that one of the articles had a semicolon (";") as the final
>character of its description
>so the HREF was built in following way : "descriptionwithfinal;&next parm".
>In other words the HREF contained the sequence ";&".
>When we clicked on this link we got a "Page not found" error on the browser
>but what really Apache did is the following (excerpt from error.log) :
>
>
>
>[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
>3221225477 -- Restarting.
>
>
>-----Messaggio originale-----
>Da: mod_python-bounces@modpython.org
>[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
>Inviato: gioved? 20 novembre 2003 13.20
>A: mod_python@modpython.org
>Oggetto: [mod_python] Apache child process restarting under Win32 -
>import errors
>
>
>Hi
>
>We are having trouble with our application suddenly producing crashes 
>for all browsers connected to the system.
>We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
>It seems that the problem is that a module that was imported correctly 
>somehow is not anymore...
>
>In trying to track this down, I found the following in the Apache error log:
>[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
>status 3221225477 -- Restarting.
>[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.
>
>This happens directly before the first occurence of the problem (I've 
>taken off the date, [error], [client ip-address]:
>PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
>HandlerDispatch
>    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
>&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
>handler
>    server = getserver(modulename, instancename), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
>getserver
>    raise AttributeError(errormessage), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web: AttributeError: module 
>'jLogbook.python.config' has no attribute 'AmerivenIndexPage'
>
>I made it print out the contents of the module at this point in the 
>error log:
>module is <module 'jLogbook.python.config' from 
>'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
>are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
>'os', 'sys']
>This seems to indicate that only half of this module was imported... 
>perhaps because one of the other imports failed (these seem to be some 
>win32 extension modules)
>
>I was wondering if anyone else has experienced problems with Apache 
>restarting, and why this happens...
>
>David
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>  
>


From davidf at sjsoft.com  Mon Nov 24 14:25:20 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <200311241013.31596.gwidion@mpc.com.br>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br>
Message-ID: <3FC1F8B0.1010001@sjsoft.com>

Joao S. O. Bueno wrote:

>Hi there.
>
>I am actually implementing this in the very first mod python app I am 
>developing.
>
>
>You actually have to override the Auth Handler from apache with a 
>Python Module. 
>
>If you google for it, you will be offered a lot of ready-made session 
>control stuff, as part of existing packages.
>
>It is not, however, that hard to implement form scratch. Here is my 
>.htaccess:
>
>  AddHandler python-program .py
> PythonHandler dummy
> PythonAuthenHandler verify
>
>
>As you can see, the PythonAuthenHandler is "verify.py" which is 
>called. (inside it, the authenhandler() function is called)
>
>I them encode some session data (like originating IP + user password) 
>to generate a MD5 hashed cookie I send to the browser to further 
>authentication. In the server, I save a session ID file with  the 
>session data, and regenerate the cookie at each page load (which goes 
>thru the "AuthenHandler" again) and compare it with the browser-sent 
>cookie.
>
>One thing I am still trying to find out is how to detect when the 
>person navigate to another site  - in which case, the session should 
>be terminated. I mean: I cannot allow that once in other site one can 
>be back in the secure section by hitting "back".
>
>As of the time, I plan to implement this thru a javascript that will 
>destroy the cookie in a "unload()" event. But I would appreciate more 
>suggestions.
>  
>
The questions is, what do you mean by being in another site?
Someone can easily be in multiple sites at once.
Maybe what you want is a timeout so if someone hasn't used their session 
for 10 minutes they have to log in again

David

>
>Regards,
>
>	JS
>	-><-
>
>
>On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
>  
>
>>How do I do form-based authentication using mod_python / Apache. I
>>would like to use Apaches authentication mechanism(as used in the
>>mod_pyhton manual(release 3.0.3), but would like a form-based
>>login/password solution instead of the pop-up - is that possible ?
>>
>>The only solution I have been able to find after a lot of googling
>>and mailing list searches is to use javascript to prefix the login
>>and password to the request from a form on a "cover" page, but
>>besides from the inelegance inhenrent in this solution and the
>>security risk in transmitting the password as part of the request,
>>it would not prevent the pop-up from appearing if someone requested
>>the login script directly.
>>
>>Any help is appreciated, also if the you have a solution for
>>form-based authentication that does not use Apache.
>>
>>Regards,
>>
>>Martin
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>    
>>
>
>  
>


From gwidion at mpc.com.br  Mon Nov 24 11:15:14 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC1F8B0.1010001@sjsoft.com>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br> <3FC1F8B0.1010001@sjsoft.com>
Message-ID: <200311241115.14240.gwidion@mpc.com.br>

On Monday 24 November 2003 10:25, David Fraser wrote:
> Joao S. O. Bueno wrote:

> The questions is, what do you mean by being in another site?
> Someone can easily be in multiple sites at once.
> Maybe what you want is a timeout so if someone hasn't used their
> session for 10 minutes they have to log in again
>
> David

What must be avoided is that one does get back to the secure session 
by hitting the "back" button.
I will also put timeout controls, but only them will  be far from the 
ideal situation. 

BTW, I forgot to mention, I have to use apache 2.7.8 in apache 1.3, so 
I have no resource to mod_python session facilities.

Regards,

	JS
	-><-


From randallk at cpsc.ucalgary.ca  Mon Nov 24 09:37:03 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <12600642.1069662777616.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311240909230.8753-100000@csl>




On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Which python version are you using?
> 
> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> 
> Check it with
> import sys
> print sys.version
> 

Yep, they're the same:

apache:
[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured

vs.
python -v

Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2

(and there's only one 2.3.2 installed ).

sys.path is identical for both as well ( except for the script's own directory, which is
chrooted to htdocs by apache as expected.)

Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.

python 2.3.2
pyPgSQL 2.4
mod_python 3.1.2b
apache 2.0.48
postgresql 7.4

Keith

> 
> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >Hi,
> >
> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
> >the session handling stuff.
> >
> >When I try to connect to my postgresql database in the following way:
> >
> >from pyPgSQL import PgSQL
> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
> >
> >
> >Apache error_log says:
> >
> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
> >
> >and indeed when I do a dir(pgSQL), it lists no connect function.
> >When I do the same outside apache/mod_python I can see the connect function.
> >
> >Any thoughts?
> >
> >
> >dir(PgSQL)
> >running within mod_python:
> >
> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
> >
> >dir(PgSQL)
> >running outside mod_python:
> >
> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
> >'threadsafety', 'version', 'weakref']
> >
> >
> >httpd.conf:
> >
> >LoadModule python_module /var/www2/modules/mod_python.so
> ><Directory /var/www2/htdocs/billing>  
> >SetHandler python-program
> >PythonHandler mod_python.publisher
> ></Directory>
> >
> >
> >_______________________________________________
> >Mod_python mailing list
> >Mod_python@modpython.org
> >http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 


From neel at mediapulse.com  Mon Nov 24 13:55:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>

I'm usally surprised by how many web developers do not fully understand
how authencation works over http.

First you have to understand it is truly impossible to create a secure
connection when you have no control over the client.  Worse, the
"connection" is not a connection at all, but a series of connection so
we have to check the auth for each and every one of them.

The best setup you can have is http-auth over an SSL connection.  The
login info is never written to disk on the client side.  The downside is
the browser will remember the login info until it is closed.  Also, if
the connection is not encryped (ssl), then a packet sniffer can get the
login info from the heards sent by the client.

Sadly there is no way to take login fields on a form and pass the to the
client headers as would happen in http-auth.  Because the connection is
statless, you must then store this login info in cookies, hidden fields,
or on the server and pass the client a session key in hidden fields or a
cookie.

Besides watching with a packet sniffer for headers to get the login
info, you can also get the cookie stored on the client system as well.
Browsers may write session cookies to disk, even though there is no
need.  Firebird does this, and even remembers session cookies after it
is closed and re-opened (which I assume is a bug, but none the less it
does do it).

So what can you do if you want the sexy login fields, but still be
secure (as is possible)?  A lot of things, we may not be able to be 100%
secure, but that doesn't mean we have to make it easy.  Here is
something things to do (many thanks to the Albatross developers for
showing me much of this):

1.  Build a string or object with as much detail about the client as
possible, (IP, user-agent, timestamp).
2.  take this string/object gzip it (we have a space limit)
3.  Sign this string with MD5 and a key only the server will ever know.
4.  base64 encode the signed string to make sure all characters are
legit.

...now when we decode the cookie...

1.  base64 decode it, and check our md5 sig
2.  ungzip the string and parse it back to it's object/string form
3.  make sure the IP, user-agent match the current request
4.  make sure the timestamp is within our limit for a login

Now even if someone gets a copy of the cookie, if they don't know the
MD5 key they can't alter it.  Most likely their ip and or user-agent
won't match either, but if it does the odds are the timeout may have
been reached already, esp if it's kept low like 5 or 10 minutes.

Mike

From michael at dynamine.net  Mon Nov 24 11:10:44 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC257B4.4050606@dynamine.net>

Michael C. Neel wrote:

> So what can you do if you want the sexy login fields, but still be
> secure (as is possible)?  A lot of things, we may not be able to be 100%
> secure, but that doesn't mean we have to make it easy.  Here is
> something things to do (many thanks to the Albatross developers for
> showing me much of this):
> 
> 1.  Build a string or object with as much detail about the client as
> possible, (IP, user-agent, timestamp).
> 2.  take this string/object gzip it (we have a space limit)
> 3.  Sign this string with MD5 and a key only the server will ever know.
> 4.  base64 encode the signed string to make sure all characters are
> legit.
> 
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

This is pretty much what the Session handling code in mod_python does 
now, so there's really no need to bother re-inventing the wheel :-)

PS - Grisha, nice job implementing the Session classes.  I couldn't have 
done it better myself, and the code is a nice example of metaclasses and 
subclassing native types that's not well covered in the Python 2.2 
documentation.  (I had to read the PEPs to understand what was going on, 
but it was a rewarding process.)

--Michael

From cs1spw at bath.ac.uk  Mon Nov 24 13:56:15 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC2625F.9090906@bath.ac.uk>

Michael C. Neel wrote:
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

One potential problem with checking the IP is that some people access 
the internet through a rotating proxy, meaning that subsequent requests 
might come from a different IP address (I've heard AOL does this). One 
way around this would be to check that at least the first two parts of 
the IP address stayed the same as only the last two would be likely to 
change if a rotating proxy was in use.

From dpopowich at mtrsd.k12.ma.us  Mon Nov 24 15:10:15 2003
From: dpopowich at mtrsd.k12.ma.us (Daniel J. Popowich)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC2625F.9090906@bath.ac.uk>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
	<3FC2625F.9090906@bath.ac.uk>
Message-ID: <16322.26023.955700.179682@gargle.gargle.HOWL>

Simon Willison writes:
> Michael C. Neel wrote:
> > ...now when we decode the cookie...
> > 
> > 1.  base64 decode it, and check our md5 sig
> > 2.  ungzip the string and parse it back to it's object/string form
> > 3.  make sure the IP, user-agent match the current request
> > 4.  make sure the timestamp is within our limit for a login
> 
> One potential problem with checking the IP is that some people access 
> the internet through a rotating proxy, meaning that subsequent requests 
> might come from a different IP address (I've heard AOL does this). One 
> way around this would be to check that at least the first two parts of 
> the IP address stayed the same as only the last two would be likely to 
> change if a rotating proxy was in use.

But the people most likely to steal your identity through packet
sniffing are the people on your own subnet; the teenage hacker down
the street looking for a thrill.  That hacker, being on the same
subnet, would have the same network address and thus match the first
few octects of the ip addr.

Dan

From jciccale at mac.com  Mon Nov 24 23:38:06 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:54:02 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <11947283.1069713486905.JavaMail.jciccale@mac.com>

Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.

- julcicc -
 
On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Which python version are you using?
>> 
>> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
>> 
>> Check it with
>> import sys
>> print sys.version
>> 
>
>Yep, they're the same:
>
>apache:
>[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
>
>vs.
>python -v
>
>Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
>[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
>
>(and there's only one 2.3.2 installed ).
>
>sys.path is identical for both as well ( except for the script's own directory, which is
>chrooted to htdocs by apache as expected.)
>
>Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
>
>python 2.3.2
>pyPgSQL 2.4
>mod_python 3.1.2b
>apache 2.0.48
>postgresql 7.4
>
>Keith
>
>> 
>> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
>> 
>> >
>> >Hi,
>> >
>> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>> >the session handling stuff.
>> >
>> >When I try to connect to my postgresql database in the following way:
>> >
>> >from pyPgSQL import PgSQL
>> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>> >
>> >
>> >Apache error_log says:
>> >
>> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>> >
>> >and indeed when I do a dir(pgSQL), it lists no connect function.
>> >When I do the same outside apache/mod_python I can see the connect function.
>> >
>> >Any thoughts?
>> >
>> >
>> >dir(PgSQL)
>> >running within mod_python:
>> >
>> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
>> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
>> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>> >
>> >dir(PgSQL)
>> >running outside mod_python:
>> >
>> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>> >'threadsafety', 'version', 'weakref']
>> >
>> >
>> >httpd.conf:
>> >
>> >LoadModule python_module /var/www2/modules/mod_python.so
>> ><Directory /var/www2/htdocs/billing>  
>> >SetHandler python-program
>> >PythonHandler mod_python.publisher
>> ></Directory>
>> >
>> >
>> >_______________________________________________
>> >Mod_python mailing list
>> >Mod_python@modpython.org
>> >http://mailman.modpython.org/mailman/listinfo/mod_python
>> >
>> >
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>> 
>
>
>
>
From randallk at cpsc.ucalgary.ca  Mon Nov 24 16:53:31 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <11947283.1069713486905.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311241651070.30459-100000@csl>


Yep, new apache was running as different user, without linker path with libpq.  ;P
Thanks a lot.
Keith



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.
> 
> - julcicc -
>  
> On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >
> >
> >On Mon, 24 Nov 2003, Julian Ciccale wrote:
> >
> >> Which python version are you using?
> >> 
> >> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> >> 
> >> Check it with
> >> import sys
> >> print sys.version
> >> 
> >
> >Yep, they're the same:
> >
> >apache:
> >[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
> >
> >vs.
> >python -v
> >
> >Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
> >[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
> >
> >(and there's only one 2.3.2 installed ).
> >
> >sys.path is identical for both as well ( except for the script's own directory, which is
> >chrooted to htdocs by apache as expected.)
> >
> >Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
> >
> >python 2.3.2
> >pyPgSQL 2.4
> >mod_python 3.1.2b
> >apache 2.0.48
> >postgresql 7.4
> >

From gwidion at mpc.com.br  Tue Nov 25 00:32:40 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <200311250032.40790.gwidion@mpc.com.br>

On Monday 24 November 2003 16:55, Michael C. Neel wrote:

> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login
>
> Now even if someone gets a copy of the cookie, if they don't know
> the MD5 key they can't alter it.  Most likely their ip and or
> user-agent won't match either, but if it does the odds are the
> timeout may have been reached already, esp if it's kept low like 5
> or 10 minutes.
>
> Mike


Wow...I got it all right without asking.
>From everything you wrote, the only thing I did not do was: encode the 
user agent string - I just used the client IP.
And I did not use GZIP because the MD5 hash has got a fixed length.

Oh..no..let's see...it is a bit different, what I had done:
1) pick up login time, client IP, server side Key, random session ID 
strings and save them server side
2) generate a MD5 hash from the above and use it as a cookie.
3) at each page load, pick the cookie, and compare it with one 
regenerated from strings saved on the server side, (and client IP). 
If there is no time out, and the hashed strings matched, serve the 
page.


Again, I am not  using mod_python's sessions because I am restricted 
to mod_python 2.7.x for this project.

Regards,

	JS
	-><-




From dwmp at opti.cgi.net  Mon Nov 24 22:53:46 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
Message-ID: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>


It appears as though the PSP module doesn't check dependencies for 
modification times.  If I create a module and reference it from a PSP page 
and make a request for the page, then I change the module and make a second 
request the module is not reloaded.  Has this been overlooked or is this a 
'feature'?

Also, it appears as though the PSP module prefers to store its cached 
compiled code in a DBM file instead of memory.  Why bother with a DBM 
file?  So long as each Apache process is setup to handle a sufficiently 
large number of requests before killing itself then wouldn't a memory only 
solution be faster, especially in the worker process model?  It seems a 
little strange that DBM is preferred over memory storage.

-Dan


From grisha at modpython.org  Tue Nov 25 00:22:54 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <20031125001750.R36241@onyx.ispol.com>


On Mon, 24 Nov 2003, Dan W. wrote:

> It appears as though the PSP module doesn't check dependencies for
> modification times.  If I create a module and reference it from a PSP
> page and make a request for the page, then I change the module and make
> a second request the module is not reloaded.  Has this been overlooked
> or is this a 'feature'?

it's a feature of Python (not mod_python) ;-)

if you want the module properly reloaded when it changes, import it like
this:

mymodule = apache.import_module('mymodule')

> Also, it appears as though the PSP module prefers to store its cached
> compiled code in a DBM file instead of memory.

Not unless you tell it so. By default it's memory.

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html

HTH,

Grisha
From dwmp at opti.cgi.net  Mon Nov 24 23:43:01 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>

At 12:22 AM 11/25/2003 -0500, you wrote:

>On Mon, 24 Nov 2003, Dan W. wrote:
>
> > It appears as though the PSP module doesn't check dependencies for
> > modification times.  If I create a module and reference it from a PSP
> > page and make a request for the page, then I change the module and make
> > a second request the module is not reloaded.  Has this been overlooked
> > or is this a 'feature'?
>
>it's a feature of Python (not mod_python) ;-)
>
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

Ahhh, Ok.  I guess that means I can't use the form:

from mypackage.mymodule import *


I have not yet familiarized myself with the source enough to say, but it 
would be nice to have a command which when supplied at the beginning of a 
PSP file would tell it to autoreimport.  Maybe something like:

<%
psp.autoreimport(true)
%>
<html>
...

I've played around with replacing the builtin _import with a home grown 
import function to do just this in a different project.  Perhaps it could 
be done here too.  Perhaps after I become more familiar with the source 
I'll be able to help out to that end.



> > Also, it appears as though the PSP module prefers to store its cached
> > compiled code in a DBM file instead of memory.
>
>Not unless you tell it so. By default it's memory.
>
>http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html


Sorry, I must have read the source wrong.  I'll have to take another look.

-Dan

From dwmp at opti.cgi.net  Tue Nov 25 00:36:03 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2EE6F.8080601@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>

At 09:53 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>Ahhh, Ok.  I guess that means I can't use the form:
>>from mypackage.mymodule import *
>
>It's a good idea to avoid that type of namespace pollution anyway, as it 
>can often lead to conflicts.  It also detracts from code readability 
>(avoiding the dreaded "where did that name come from again?" question when 
>doing code reviews is a good thing, IMHO).
>
>--Michael

That's a good point Michael.  That was probably a bad habit to pick 
up.  However, I think a overloaded import could still be 
useful.  Overloading the builtin import would allow a PSP file to control 
autoreloading for its entire dependency tree (modules which call other 
modules, etc.).  This would allow one to easily turn autoreloading on 
during development and to easily turn it off for production deployment.

I'm still cutting my teeth on the mod_python code base, but figured I'd 
throw that idea out there in the mean time.

-Dan

From michael at dynamine.net  Mon Nov 24 22:43:43 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <3FC2FA1F.20905@dynamine.net>

Dan W. wrote:

> That's a good point Michael.  That was probably a bad habit to pick up.  
> However, I think a overloaded import could still be useful.  Overloading 
> the builtin import would allow a PSP file to control autoreloading for 
> its entire dependency tree (modules which call other modules, etc.).  
> This would allow one to easily turn autoreloading on during development 
> and to easily turn it off for production deployment.

Consider that you might want not to use PSP.  I've actually found that 
it gets in the way of the separation of code and content, which is 
important when the designer and the coder are two different people.

I design my mod_python apps like so:

template = """
<html>
...
<!-- have the designers place %(variable)s where necessary
      in the template for doing performing substitution
      during the processing phase -->
</html>
"""

def handler(req):
   # Reload modules here if necessary
   # Code goes here
   # If you want to override the template, you can fetch it from the file
   # system
   req.write(template % vars())

Of course, if you're already married to the PSP solution, then there you 
have it...

--Michael

From dwmp at opti.cgi.net  Tue Nov 25 01:04:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125005652.010c6008@mail.pyxos.com>

At 10:43 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>That's a good point Michael.  That was probably a bad habit to pick up.
>>However, I think a overloaded import could still be useful.  Overloading 
>>the builtin import would allow a PSP file to control autoreloading for 
>>its entire dependency tree (modules which call other modules, etc.).
>>This would allow one to easily turn autoreloading on during development 
>>and to easily turn it off for production deployment.
>
>Consider that you might want not to use PSP.  I've actually found that it 
>gets in the way of the separation of code and content, which is important 
>when the designer and the coder are two different people.
>
>I design my mod_python apps like so:
>
>template = """
>...
>"""
>
>def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
>Of course, if you're already married to the PSP solution, then there you
>have it...


Thanks for the advice.  I'm not married to anything yet.  I'm moving from 
an in-house Python based application server to mod_python and PSP just 
seemed like the a natural move.  My plan was to build most of the dynamic 
code in python modules and then simply insert html into the templates with 
PSP expression syntax.  I can see where writing my own handler for these 
things would have advantages, but on the other hand I don't want to 
reinvent the wheel.  I'll play with that a bit.

-Dan

From neel at mediapulse.com  Tue Nov 25 10:50:58 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>

> And I did not use GZIP because the MD5 hash has got a fixed length.
> 
Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
a secret string and the data.  Here is the methods from albatross:

    def sign(self, text):
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        text = m.digest() + text
        return text

    def unsign(self, text):
        digest = text[:16]
        text = text[16:]
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        if m.digest() == digest:
            return text
        return ''

You can of course store the text server side and just pass the client
the MD5 hash/key, you just have to have a way to clear out old session
files and also make sure you have enough disk space for the amount of
sessions you expect.

Mike

From tropezien at croxx.de  Tue Nov 25 16:14:01 2003
From: tropezien at croxx.de (tropezien@croxx.de)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <27667116$10697725673fc36f17e5bce0.87890966@config18.schlund.de>


"Gregory (Grisha) Trubetskoy" <grisha@modpython.org> schrieb am
24.11.2003, 02:12:42:
> 
> 
> On Sun, 23 Nov 2003, Tropezien wrote:
> 
> > Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> > 3.1.2b. Some further investigations cleared up that mod_python tries to
> > get more than 400 semaphores during launch of httpd.
> 
> Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
> semaphores, which is 32. What does your log say when you start httpd?
> 
Yes, you are right. The previously installed mod_python-3.1.0a made was
the culprit for my mentioned change in sysctl.conf. I have reset the
maximum amount of semaphores to the original value and mod_python starts
as well as before.

Ciao, Georg
From jciccale at mac.com  Wed Nov 26 01:33:10 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] 
	Request object attribute "content_type" does not support UNICODE
	STRINGS
Message-ID: <12054078.1069806790832.JavaMail.jciccale@mac.com>

When I try to set content_type to a unicode string, it gives a TypeError saying that content_type can only be string. I don't know if this is correct. Although content types will not use any hich codes, in my case the content-type value I read it from an XML file that IS in Unicode, therefore I must convert it using str() which I dont like cause if I get anything there that is not really string (Unicode or Normal) python will anyway convert it.
Is this behaviour expected?
From grisha at modpython.org  Tue Nov 25 21:45:35 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<3FC2FA1F.20905@dynamine.net>
Message-ID: <20031125213815.V52007@onyx.ispol.com>


One of the ways to use PSP, which probably isn't immediately obvious from
the documentation, is as a templating system, e.g. configuring mod_python
to use the publisher handler, then have something like:

def hello(req):

    vars = {"menu": build_menu(),
            "blah": enormously_complex_function(),
            "body": psp.PSP(req, 'templates/body_tmpl.html')}

    return psp.PSP(req, 'templates/main_frame.html', vars=vars)


In this example 'body_tmpl.html' and 'main_fram.html' are PSP.

I've had pretty good luck with this approach precisely because it seems to
have a clear separation of logic and presentation.

Grisha


On Mon, 24 Nov 2003, Michael S. Fischer wrote:

> Dan W. wrote:
>
> > That's a good point Michael.  That was probably a bad habit to pick up.
> > However, I think a overloaded import could still be useful.  Overloading
> > the builtin import would allow a PSP file to control autoreloading for
> > its entire dependency tree (modules which call other modules, etc.).
> > This would allow one to easily turn autoreloading on during development
> > and to easily turn it off for production deployment.
>
> Consider that you might want not to use PSP.  I've actually found that
> it gets in the way of the separation of code and content, which is
> important when the designer and the coder are two different people.
>
> I design my mod_python apps like so:
>
> template = """
> <html>
> ...
> <!-- have the designers place %(variable)s where necessary
>       in the template for doing performing substitution
>       during the processing phase -->
> </html>
> """
>
> def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
> Of course, if you're already married to the PSP solution, then there you
> have it...
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:53:28 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
Message-ID: <20031125214631.Q52007@onyx.ispol.com>


BTW, the python standard library now includes an hmac module:

http://www.python.org/doc/current/lib/module-hmac.html

Which is functionally similar to using md5 directly, only in a
well-researched and standardized way.

Grisha

On Tue, 25 Nov 2003, Michael C. Neel wrote:

> > And I did not use GZIP because the MD5 hash has got a fixed length.
> >
> Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
> a secret string and the data.  Here is the methods from albatross:
>
>     def sign(self, text):
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         text = m.digest() + text
>         return text
>
>     def unsign(self, text):
>         digest = text[:16]
>         text = text[16:]
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         if m.digest() == digest:
>             return text
>         return ''
>
> You can of course store the text server side and just pass the client
> the MD5 hash/key, you just have to have a way to clear out old session
> files and also make sure you have enough disk space for the amount of
> sessions you expect.
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:56:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <12054078.1069806790832.JavaMail.jciccale@mac.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
Message-ID: <20031125215458.B52007@onyx.ispol.com>


Interesting question. I don't know the answer. Is content-type really
supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
I may be wrong). If anyone knows and has RFC references, etc - please
pitch in.

Grisha

On Wed, 26 Nov 2003, Julian Ciccale wrote:

> When I try to set content_type to a unicode string, it gives a TypeError
> saying that content_type can only be string. I don't know if this is
> correct. Although content types will not use any hich codes, in my case
> the content-type value I read it from an XML file that IS in Unicode,
> therefore I must convert it using str() which I dont like cause if I get
> anything there that is not really string (Unicode or Normal) python will
> anyway convert it. Is this behaviour expected?
> _______________________________________________ Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From martin_ostr at hotmail.com  Wed Nov 26 00:12:27 2003
From: martin_ostr at hotmail.com (martin ostrovsky)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] Maintaining db connections
Message-ID: <BAY7-F43goLMJop8PgM00010b1f@hotmail.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/8054341d/attachment-0001.htm
From manfred.stienstra at dwerg.net  Wed Nov 26 08:30:52 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031125215458.B52007@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <20031125215458.B52007@onyx.ispol.com>
Message-ID: <1069831852.4684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> Interesting question. I don't know the answer. Is content-type really
> supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> I may be wrong). If anyone knows and has RFC references, etc - please
> pitch in.

Rfc 1945 (http 1.0) states:

       	HTTP-header    = field-name ":" [ field-value ] CRLF

       	field-name     = token
       	field-value    = *( field-content | LWS )

       	field-content  = <the OCTETs making up the field-value
                        and consisting of either *TEXT or combinations
                        of token, tspecials, and quoted-string>

       	TEXT           = <any OCTET except CTLs,
                        but including LWS>
	OCTET          = <any 8-bit sequence of data>
       	CHAR           = <any US-ASCII character (octets 0 - 127)>

       	Content-Type   = "Content-Type" ":" media-type
	
	media-type     = type "/" subtype *( ";" parameter )
       	type           = token
       	subtype        = token

       	parameter      = attribute "=" value
       	attribute      = token
       	value          = token | quoted-string
	
	token          = 1*<any CHAR except CTLs or tspecials>

       	tspecials      = "(" | ")" | "<" | ">" | "@"
                      | "," | ";" | ":" | "\" | <">
                      | "/" | "[" | "]" | "?" | "="
                      | "{" | "}" | SP | HT
	
This means only us-ascii in the media-type, but any character in the field-content
in general. For more information:

http://www.faqs.org/rfcs/rfc1945.html
http://www.faqs.org/rfcs/rfc2616.html

Manfred

From vmanera at manord.com  Wed Nov 26 14:58:00 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] 
	Problem with Session module with multiple scriptalias not under t
	he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>

First of all my configuration<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

 

>From httpd.conf:

.....

    DocumentRoot "E:/wwwroot/cartelle_sito_mdn"

....

    ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"

    ScriptAlias /produzione/ "E:/script/cgi/produzione/"

    ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

.........

    <Directory "E:/script/cgi/cgi-mpy">

...

                AddHandler python-program .py

                PythonHandler mod_python.publisher

            PythonPath ....

                PythonDebug on

                  #PythonOption ApplicationPath /cgi-mpy

               PythonOption SessionDbm
'E:/wwwroot/dati_autenticazione/sid/session.dbm'

   </Directory>

 

if I miss PythonOption ApplicationPath ... in any directory:

 

    def make_cookie(self):

            ....

        if config.has_key("ApplicationPath"):

            c.path = config["ApplicationPath"]

        else:

            docroot = self._req.document_root()

            # the path where *Handler directive was specified

            dirpath = self._req.hlist.directory 

            c.path = dirpath[len(docroot):]

 

so the req.headers_out generate this html heading for cgi-mpy scriptalias:

{'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
'Cache-Control': 'nocache="set-cookie"'}

 

where path=  because len(document root) :28 len (dirpath) 21

 

and in this way all work fine for all my scriptalias except for

 ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

In this case len(dirpath) = 30 so path='/\'

And I make the first connection under this path any attempt to call url
under other scriptalias cause a new session because the hader miss the key
'Set-Cookie'....

 

So I tryed to use:

PythonOption ApplicationPath /cgi-mpy

PythonOption ApplicationPath /organizzazione

....

If my first connection is under cgi-mpy all work fine for all the url under
cgi-mpy, but any attempt to connect to un url under a different scriptalias
cause a new session

 

So I may choose to change orgenizzazione in organiz, or to modify the
session module: c.path=''

Any other suggestion?

 

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/83e74c70/attachment-0001.htm
From grisha at modpython.org  Wed Nov 26 15:55:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <1069831852.4684.11.camel@ack.dwerg.net>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	<1069831852.4684.11.camel@ack.dwerg.net>
Message-ID: <20031126155347.B64106@onyx.ispol.com>


So there is no problem with mod_python?

On Wed, 26 Nov 2003, Manfred Stienstra wrote:

> On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> > Interesting question. I don't know the answer. Is content-type really
> > supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> > I may be wrong). If anyone knows and has RFC references, etc - please
> > pitch in.
>
> Rfc 1945 (http 1.0) states:
>
>        	HTTP-header    = field-name ":" [ field-value ] CRLF
>
>        	field-name     = token
>        	field-value    = *( field-content | LWS )
>
>        	field-content  = <the OCTETs making up the field-value
>                         and consisting of either *TEXT or combinations
>                         of token, tspecials, and quoted-string>
>
>        	TEXT           = <any OCTET except CTLs,
>                         but including LWS>
> 	OCTET          = <any 8-bit sequence of data>
>        	CHAR           = <any US-ASCII character (octets 0 - 127)>
>
>        	Content-Type   = "Content-Type" ":" media-type
>
> 	media-type     = type "/" subtype *( ";" parameter )
>        	type           = token
>        	subtype        = token
>
>        	parameter      = attribute "=" value
>        	attribute      = token
>        	value          = token | quoted-string
>
> 	token          = 1*<any CHAR except CTLs or tspecials>
>
>        	tspecials      = "(" | ")" | "<" | ">" | "@"
>                       | "," | ";" | ":" | "\" | <">
>                       | "/" | "[" | "]" | "?" | "="
>                       | "{" | "}" | SP | HT
>
> This means only us-ascii in the media-type, but any character in the field-content
> in general. For more information:
>
> http://www.faqs.org/rfcs/rfc1945.html
> http://www.faqs.org/rfcs/rfc2616.html
>
> Manfred
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Wed Nov 26 16:03:21 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python]  Problem with Session module with multiple
	scriptalias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
Message-ID: <20031126155923.X64106@onyx.ispol.com>


You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url under
> cgi-mpy, but any attempt to connect to un url under a different scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From manfred.stienstra at dwerg.net  Wed Nov 26 22:19:08 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031126155347.B64106@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <1069831852.4684.11.camel@ack.dwerg.net>
	 <20031126155347.B64106@onyx.ispol.com>
Message-ID: <1069881547.5684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 21:55, Gregory (Grisha) Trubetskoy wrote:
> So there is no problem with mod_python?

Setting content_type to a unicode string should not be possible. I don't
know how the other headers are implemented, but some of them are allowed
to contain strings other than us-ascii (but never above 8 bits). The
constraint in HTTP is that headers should never contain multibyte
characters (or should never have to be interpreted as being a multibyte
character), the strings have to contain 8 bit characters.

The problem with python is that a unicode object can contain characters
coming from any encoding, and can be converted to any other encoding.
This means that a unicode object with data coming from us-ascii could be
used in headers by silently encoding them to us-ascii, but this is not
recommended because it would cause a lot of confusion. Programmers
should encode unicode objects to us-ascii strings before using them as
header values.

In short: there is no problem.

Manfred

From gdamjan at mail.net.mk  Thu Nov 27 06:43:40 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] Mod_python disables mod_dav
Message-ID: <20031127054340.GA3835@legolas.on.net.mk>

I'm using Apache 2.0.48 (it happened to 2.0.47 too) with the built-in
mod_dav module and mod_python 3.1.2b/Python-2.3.2 and PHP/4.3.4.

I can't understand why but unless I disable mod_python (by commenting
the LoadModule directive), DAV will not work. It just returns a "405
Method is not allowed" error. 

I've tried different DAV setups and clients, and nothing - unless I
disable mod_python it wont work...

Now I think that with older versions of mod_python this did not happen -
but I'm not sure. I'll have to recheck that.

Does anyone know why this could happen?!?



-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From vmanera at manord.com  Fri Nov 28 18:08:11 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 21:54:03 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>

I'm sorry but still don't work.
I'm removed all references to cgi and I moved all my directory with .py
under document root:

DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
<Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">

and with this new configuration req.headers_out:
{'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
and if I relod the page it never passed to req.headers_in

if I modify se session module:
def make_cookie(self):
	....
      c.path = ''   #dirpath[len(docroot):]
then req.headers_out become:
{'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
'Cache-Control': 'no-cache="set-cookie"'} 
and If I relod the page it go to req.headers_in:
{'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
'Keep-Alive', ...} 
and req.heades_out : {}

so why if something else then '' is in path the pysid wasn't writing into
the html heading? 

Villiam 


-----Messaggio originale-----
Da: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Inviato: mercoled? 26 novembre 2003 22.03
A: Manera, Villiam
Cc: mod_python@modpython.org
Oggetto: Re: [mod_python] Problem with Session module with multiple
scriptalias not under t he document root



You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url
under
> cgi-mpy, but any attempt to connect to un url under a different
scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>

From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <20031128120645.Q92149@onyx.ispol.com>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy
From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <12755437.1070056018285.JavaMail.Server@genix>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy

---------------------------------------------------------------------
To unsubscribe, e-mail: announce-unsubscribe@httpd.apache.org
For additional commands, e-mail: announce-help@httpd.apache.org



From flxkid at techemail.com  Fri Nov 28 14:16:02 2003
From: flxkid at techemail.com (Oliver Nelson)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
Message-ID: <20031128221603.3E2473954@sitemail.everyone.net>

I'd like to have mod_python respond to every request that is below a certain "directory".

IOW I might do a GET on:
localhost/mysys/test/my.gif
localhost/mysys/yada/ibm.com

and a python handler would be called for both of these situations.  In fact, I'd like the handler (or handlers) to be called for all verbs (GET, PUT, POST, DELETE).  But URI's that aren't below /mysys wouldn't call the handler.

Also note /mysys/test/my.gif doesn't exist, it should be retrieve and returned on the fly by Python.

Is this possible with mod_python?

OLIVER

From neilb at nbt.co.za  Sat Nov 29 16:54:19 2003
From: neilb at nbt.co.za (Neil Beattie)
Date: Fri Jan  9 21:54:03 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>
Message-ID: <3FC8CF3B.10252.1EC6C05A@localhost>

> I'm sorry but still don't work.
> I'm removed all references to cgi and I moved all my directory with .py
> under document root:
> 
> DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
> <Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">
> 
> and with this new configuration req.headers_out:
> {'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
> path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
> and if I relod the page it never passed to req.headers_in


Looks like the path is not correct (extra \)
try adding the following line to your httpd.config  addHandler entry:

PythonOption ApplicationPath /script/cgi/cgi-mpy


I have just had the same problem but have not yet discovered where the extra \ 
comes from ( it is in _req.hlist.directory in session.py)




> 
> if I modify se session module:
> def make_cookie(self):
> 	....
>       c.path = ''   #dirpath[len(docroot):]
> then req.headers_out become:
> {'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
> 'Cache-Control': 'no-cache="set-cookie"'} 
> and If I relod the page it go to req.headers_in:
> {'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
> 'Keep-Alive', ...} 
> and req.heades_out : {}
> 
> so why if something else then '' is in path the pysid wasn't writing into
> the html heading? 
> 

Neil Beattie
NB Technology (Pty) Ltd

From dwmp at opti.cgi.net  Sun Nov 30 19:52:57 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>


At 12:22 AM 11/25/2003 -0500, you wrote:
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

I've attempted this on a PSP page with a packaged module and am not getting 
the module in the global namespace.

<%
apache.import_module('mypackage.mymodule')
%>
<html>
<body>
<%=`globals()`%>
</body>
</html>

I don't get any errors, just a silent failure (mypackage is not in 
globals).  mypackage is in the lib/python/site-packages folder and it works 
properly if I use the standard python import.

Any ideas?

-Dan

From grisha at modpython.org  Sun Nov 30 22:24:48 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <20031130222323.M31554@onyx.ispol.com>



On Sun, 30 Nov 2003, Dan W. wrote:

> I've attempted this on a PSP page with a packaged module and am not getting
> the module in the global namespace.
>
> <%
> apache.import_module('mypackage.mymodule')

<%
mymodule = apache.import_module('mypackage.mymodule')


Grisha
From dwmp at opti.cgi.net  Sun Nov 30 21:56:45 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 21:54:03 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031130222323.M31554@onyx.ispol.com>
References: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130214706.035aedc8@mail.pyxos.com>

At 10:24 PM 11/30/2003 -0500, you wrote:


>On Sun, 30 Nov 2003, Dan W. wrote:
>
> > I've attempted this on a PSP page with a packaged module and am not getting
> > the module in the global namespace.
> >
> > <%
> > apache.import_module('mypackage.mymodule')
>
><%
>mymodule = apache.import_module('mypackage.mymodule')


Thanks Grisha.  I was expecting it to work like the builtin import.

-Dan

From mod_python at mikebell.org  Sun Nov 30 22:37:48 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 21:54:04 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
In-Reply-To: <20031128221603.3E2473954@sitemail.everyone.net>
References: <20031128221603.3E2473954@sitemail.everyone.net>
Message-ID: <20031201063747.GC13820@mikebell.org>

On Fri, Nov 28, 2003 at 02:16:02PM -0800, Oliver Nelson wrote:
> Is this possible with mod_python?

Possible and easy.

<Location /foo>
  SetHandler python-program
  PythonHandler bar
</Location>
From bert at tela.com  Sat Nov  1 09:00:59 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 22:00:30 2004
Subject: [mod_python] ImportError
Message-ID: <000201c3a092$68dbcad0$0301a8c0@janine>

Hello-

I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
run the "hello.py/say"
example and the following message appears in apache's 'error_log':

....

File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
import_module
   f, p, d = imp.find_module(parts[i],path)
[Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
mod_python.publisher: ImportError: No module named index


Currently I'm trying

Apache 2.047
Python 2.3.2
mod_python 3.1.2b

but I've gotten same result with combintaions of mod_python 3.0.3, python
2.2.

"hello.py" runs just fine with out-of-redhat box apache/mod_python, and
there's no apparent module named "index" there.

Bert Hughes


From grisha at modpython.org  Sat Nov  1 14:41:44 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:30 2004
Subject: [mod_python] ImportError
In-Reply-To: <000201c3a092$68dbcad0$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
Message-ID: <20031101144111.L33051@onyx.ispol.com>


What is the URL you are accessing, what is the relevant Apache config, and
what's in hello.py?

Grisha

On Sat, 1 Nov 2003, Bert Hughes wrote:

> Hello-
>
> I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
> run the "hello.py/say"
> example and the following message appears in apache's 'error_log':
>
> ....
>
> File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
> import_module
>    f, p, d = imp.find_module(parts[i],path)
> [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> mod_python.publisher: ImportError: No module named index
>
>
> Currently I'm trying
>
> Apache 2.047
> Python 2.3.2
> mod_python 3.1.2b
>
> but I've gotten same result with combintaions of mod_python 3.0.3, python
> 2.2.
>
> "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> there's no apparent module named "index" there.
>
> Bert Hughes
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Sat Nov  1 20:41:55 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:00:30 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
Message-ID: <3FA40C83.5050502@krap.dk>

Hi.

I am toying around with mod_python on a gentoo-linux system. Prior I 
used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the 
beta from source.

This is what I wish :
Every request is handled by the same python-handler for the virtual 
domain. I am currently playing around and creating my own handler in the 
process.
It has worked before, with the following relevant parts of my httpd.conf 
(be aware, internal test server so a lot off things are just made 
simple, not secure/right):

NameVirtualHost *
<Directory "/www/tweetie">
        SetHandler python-program
        PythonHandler site
        PythonAuthenHandler site
        PythonDebug On
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        Allow from all
        AuthType Basic
        AuthName "Restricted Area"
        require valid-user
</Directory>
<VirtualHost *>
        ServerName tweetie
        DocumentRoot /www/tweetie
</VirtualHost>

But now, when I browse to "http://tweetie/" i get a directory listning 
instead of the python script... If I write anything after the trailing 
slash, everything works fine.

Can you tell me, what I did wrong and how to fix it ?

Tia

Svenne Krap

From bert at tela.com  Sat Nov  1 15:24:23 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com>
Message-ID: <003301c3a0be$cad54230$0301a8c0@janine>



Apache2 conf is:

LoadModule python_module modules/mod_python.so

<Directory /usr/local/apache2/htdocs/python>

SetHandler python-program

PythonHandler mod_python.publisher

</Directory>



hello.py is

>>>

def say(what="Nothing"):
    return "I am saying %s" % what

if __name__ == '__main__':
    print say('At the commandline!')

>>>>>



and it is in /usr/local/apache2/htdocs/python.

So the url is"     http:/192.168.1.1/python/hello.py/say

Thanks

Bert

----- Original Message ----- 
From: "Gregory (Grisha) Trubetskoy" <grisha@modpython.org>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Saturday, November 01, 2003 1:41 PM
Subject: Re: [mod_python] ImportError


>
> What is the URL you are accessing, what is the relevant Apache config, and
> what's in hello.py?
>
> Grisha
>
> On Sat, 1 Nov 2003, Bert Hughes wrote:
>
> > Hello-
> >
> > I've been attempting to upgrade my Apache/mod_python setup w/o success.
I
> > run the "hello.py/say"
> > example and the following message appears in apache's 'error_log':
> >
> > ....
> >
> > File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493,
in
> > import_module
> >    f, p, d = imp.find_module(parts[i],path)
> > [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> > mod_python.publisher: ImportError: No module named index
> >
> >
> > Currently I'm trying
> >
> > Apache 2.047
> > Python 2.3.2
> > mod_python 3.1.2b
> >
> > but I've gotten same result with combintaions of mod_python 3.0.3,
python
> > 2.2.
> >
> > "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> > there's no apparent module named "index" there.
> >
> > Bert Hughes
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
>


From stian at soiland.no  Sun Nov  2 17:24:17 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Re: ImportError
In-Reply-To: <003301c3a0be$cad54230$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
Message-ID: <20031102162417.GB32650@itea.ntnu.no>

On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From bert at tela.com  Sun Nov  2 10:50:54 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Re: ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
	<20031102162417.GB32650@itea.ntnu.no>
Message-ID: <000701c3a161$7bfe5130$0301a8c0@janine>

This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes


----- Original Message ----- 
From: "Stian S?iland" <stian@soiland.no>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Sunday, November 02, 2003 10:24 AM
Subject: Re: ImportError


On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]



From mike at mikesclutter.com  Sun Nov  2 16:18:44 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <200311021618.45341.mike@mikesclutter.com>

All,

I have been using mod_python for over two years now, and since I first 
started, I've been adding little utility libraries here and there. I now have 
one (more or less) integrated library that supports several different things:

- PHP Style embedded python in HTML, with page caching.
    Documents with embedded python can be parsed, compiled, and cached in 
    memory that is limited by a global administrative setting on how much 
    cache mem to use. Pages are swapped out based on use. Your basic .psp 
    page looks something like this:

    #include some_header.psp
    <html><body>
    <?
    x = 1
    print "There's no language like Python"
    ?>
    <p>Shorthand printing of a variable/expression
    x=<?$x?>
    </body>
    </html>

- Shared database connections. There is a simple class which wraps the DBA API 
  connection objects for MySQL, PostgreSQL, and SAPDB. It just adds enough 
  code to transparently recover from a connection timeout.

- Session management. This includes support for
  - automatically generating session_ids for clients.
  - Authentication from a database (assigning a user_id to a session_id) and 
    maintaining it in a sessions table.
  - storing state to a database (mysql/postgresql) or to browser. State is 
    stored using a modified pickle algorithm (as pickle at the time was 
    insecure). You can basically serialize all python primitives and 
    containers (dicts, lists), and can include custom classes if you derive 
    from a simple base class.
  - Simple access/manipulation of queries, POST headers, and cookies:
    Automatically parse, read, and generate all of the above. Set/unset 
    cookies. Cookies are automatically set using the virtual host domain --- 
    you don't have to worry about which domain or vhost you are working in. 
    Pickle data stuctures into cookies using base64. Query generation from 
    dict and urlencoding.
  - Util functions: Setting page expiry's, getting client info, generating 
    urls.

- Global and per virtual host configuration/resource pools. For each 
  virtual host, the core PSP handler will look for a module by that server 
  name in the Python path and import it into a virtual host namespace (if it 
  has not already been imported). This serves as a common resource pool for 
  that virtual host. When each page is processed, this pool is imported into 
  the global namespace in a dict call resource. The global resource pool is 
  first loaded on startup and vhost resources are added to it.

- HTML library. This includes support for
  - Form/widget generation. Basic HTML widgets can be created using simple 
    functions. Similar to Perl's cgi module. Generate listboxs from SQL.

- Support for OLTP gateways. There are two currently supported: SecurePay and 
  Authorize.net. This works on top of m2crypto.

There are other little bells and whistles here and there that I am sure I 
forgot about. Anyway, it has started to get too big for me to maintain on my 
own and I figure perhaps it can be helpful to others. It would be nice to 
have other good Python/mod_python programmers with more experience than me 
hacking on it.

The project is located at gila.sourceforge.net. Currently, I only have the 
code in CVS and a tarball on the home page (gila.sourceforge.net). I have 
very little documentation, but it's not hard to set up. The INSTALL should do 
it. If you have problems, email me.

Anyway, I hope some of you might find this useful.

Mike

From neel at mediapulse.com  Mon Nov  3 11:31:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>

Wow, this is pretty cool - I see requests for items like these a lot on
this list so it should be helpful to quite a few.  I have one question
though...

> - Shared database connections. There is a simple class which 
> wraps the DBA API 
>   connection objects for MySQL, PostgreSQL, and SAPDB. It 
> just adds enough 
>   code to transparently recover from a connection timeout.
> 

Does this work for 3.x and apache using a threaded mpm like worker?
I've had trouble getting MySQLdb to share connections/cursors from a
pool in the past since the thread level of the API is 1 (no threaded
cursors).  I had planned to work on this in the coming weeks, but no
since re-inventing the wheel =)

Mike

From gdamjan at mail.net.mk  Mon Nov  3 22:33:58 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <20031103213358.GA32187@legolas.on.net.mk>

> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)

well, share the db connection and not the cursors.
IMHO creating a MySQL cursor is not performance heavy...


-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From svenne at krap.dk  Mon Nov  3 22:42:40 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <20031102155855.P47316@onyx.ispol.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
Message-ID: <3FA6CBD0.3020902@krap.dk>

Quite simple right now.
- one handler-function (just printing out varios req-object attributes, 
nothing fancy until I have solved my problem.)
- one authenhandler-function (containing only "return apache.OK")

Btw. another possible sligt change in behavior, earlier, when having the 
require-valid user set and return apache.OK immediately no popup for 
password noticed (as far memory servers). Now it pops up, but anything 
is accepted (which is expected, the popping up of the password-dialog is 
not expeced....)

Svenne

Gregory (Grisha) Trubetskoy wrote:

>what's in the python script?
>
>Grisha
>
>On Sat, 1 Nov 2003, Svenne Krap wrote:
>
>  
>
>>Hi.
>>
>>I am toying around with mod_python on a gentoo-linux system. Prior I
>>used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>beta from source.
>>
>>This is what I wish :
>>Every request is handled by the same python-handler for the virtual
>>domain. I am currently playing around and creating my own handler in the
>>process.
>>It has worked before, with the following relevant parts of my httpd.conf
>>(be aware, internal test server so a lot off things are just made
>>simple, not secure/right):
>>
>>NameVirtualHost *
>><Directory "/www/tweetie">
>>        SetHandler python-program
>>        PythonHandler site
>>        PythonAuthenHandler site
>>        PythonDebug On
>>        Options Indexes FollowSymLinks MultiViews
>>        AllowOverride All
>>        Order allow,deny
>>        Allow from all
>>        AuthType Basic
>>        AuthName "Restricted Area"
>>        require valid-user
>></Directory>
>><VirtualHost *>
>>        ServerName tweetie
>>        DocumentRoot /www/tweetie
>></VirtualHost>
>>
>>But now, when I browse to "http://tweetie/" i get a directory listning
>>instead of the python script... If I write anything after the trailing
>>slash, everything works fine.
>>
>>Can you tell me, what I did wrong and how to fix it ?
>>
>>Tia
>>
>>Svenne Krap
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>    
>>
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031103/26a23c8d/attachment-0002.htm
From neel at mediapulse.com  Mon Nov  3 16:59:13 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B50061764157776B97BD@johnson.mediapulse.net>

> well, share the db connection and not the cursors.
> IMHO creating a MySQL cursor is not performance heavy...
> 
My bad, I typed too quickly: MySQLdb is one connection handle one cursor
at a time.  From the spec level 1 threadsaftey reads "Threads may share
the module, but not connections."

Mike

From mike at mikesclutter.com  Mon Nov  3 18:10:09 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <200311031810.09219.mike@mikesclutter.com>

As long as you protect sessions within threads, there shouldn't be any 
problems. But the thread issues are really just passed on to the underlying 
database extension.

On Monday 03 November 2003 10:31 am, Michael C. Neel wrote:
> Wow, this is pretty cool - I see requests for items like these a lot on
> this list so it should be helpful to quite a few.  I have one question
> though...
>
> > - Shared database connections. There is a simple class which
> > wraps the DBA API
> >   connection objects for MySQL, PostgreSQL, and SAPDB. It
> > just adds enough
> >   code to transparently recover from a connection timeout.
>
> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From jpeterson at ainet.com  Mon Nov  3 20:25:41 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
Message-ID: <3FA72A45.3080602@ainet.com>

...
This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes
...

As a fellow struggling newbie, I can say that you were not blind.

Page 41, section 6.1.1 of the .pdf documentation illustrates a 
SetHandler and a URL that requires the .py extension.

I paste it below.  Sorry for the messed up formatting.

----------------------------------------------------
6.1.1 Introduction
To use the handler, you need the following lines in your configuration

<Directory /some/path}
     SetHandler python-program
     PythonHandler mod_python.publisher
</Directory>

This handler allows access to functions and variables within a module 
via URL?s. For example, if you have the following module, called ?hello.py?:

""" Publisher example """

     def say(req, what="NOTHING"):
     return "I am saying %s" % what

A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.

A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
saying hello?.
---------------------------------------------------

I would have hit exactly the same problem if I hadn't just seen your thread.

Jim


From jpeterson at ainet.com  Mon Nov  3 21:23:00 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] html docs?
Message-ID: <3FA737B4.4020500@ainet.com>

Hi,

A pointer to html docs for mod_python?  I can find only the pdf version. 
  I like to make a local web page with docs.  html works better for me.

I'd be looking for the 3.0.3 production stuff particularly, as well as 
the 3.1.x stuff.

Thanks,

Jim


From grisha at modpython.org  Tue Nov  4 00:41:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] html docs?
In-Reply-To: <3FA737B4.4020500@ainet.com>
References: <3FA737B4.4020500@ainet.com>
Message-ID: <20031104003808.S67824@onyx.ispol.com>



On Mon, 3 Nov 2003, Jim Peterson wrote:

> Hi,
>
> A pointer to html docs for mod_python?  I can find only the pdf version.

The html version of the docs should be included in the tgz file under
doc-html, and are also available online:

http://www.modpython.org/live/current/doc-html/


> I'd be looking for the 3.0.3 production stuff particularly, as well as
> the 3.1.x stuff.

The 3.1.2b html was not available online, but now it is:

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/

(Both of these links are also available off http://www.modpython.org/)

HTH,

Grisha
From elvelind at amandarin.se  Tue Nov  4 12:40:34 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
Message-ID: <3FA79032.9080300@amandarin.se>

What I want is to let every site in my apache server to have a own place 
to place the site specific modules.  how do I tell apache/mod_python to 
add this to the searchpath for each site. note that one site should only 
have access to it's own module directory.

sorry for the bad enlish. tierd and swedish ;)

/elvelind

amandarin.se

From davidf at sjsoft.com  Tue Nov  4 14:11:02 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
In-Reply-To: <3FA79032.9080300@amandarin.se>
References: <3FA79032.9080300@amandarin.se>
Message-ID: <3FA79756.70007@sjsoft.com>

elvelind grandin wrote:

> What I want is to let every site in my apache server to have a own 
> place to place the site specific modules.  how do I tell 
> apache/mod_python to add this to the searchpath for each site. note 
> that one site should only have access to it's own module directory.
>
> sorry for the bad enlish. tierd and swedish ;)
>
> /elvelind
>
> amandarin.se

Hi Elvelind

The path of the directory is added by default to the search path.
Alternatively you can use the PythonPath option in an .htaccess file in 
each directory
(See the documentation about this)

David


From grisha at modpython.org  Tue Nov  4 16:55:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311021618.45341.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
Message-ID: <20031104165310.X74839@onyx.ispol.com>



On Sun, 2 Nov 2003, Michael Owens wrote:

> - Session management. This includes support for

Just curious - does it do anything to make sure that requests for the same
session are processed sequentially (i.e. never at the same time)?

Grisha
From mike at mikesclutter.com  Tue Nov  4 22:34:13 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104165310.X74839@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
Message-ID: <200311042234.13877.mike@mikesclutter.com>

That's a very interesting question, and frankly I've never given it a lot of 
thought. 

If you are asking whether or not the same UA could post multiple initial, 
simultaneous requests and get multiple session ID's, then the answer is yes, 
it could. My assumption, however, is that the initial request from a UA would 
be limited to a single request --- long enough for a SID to be generated and 
set in a cookie, before the it made further requests. Once the cookie is set, 
you are in the clear.

If you are referring to this occurance after the SID, the same still applies: 
if the UA makes two simulaneous request, then there is no attempt to order or 
line them up. They both are processed indepently, without knowlege of each 
other. You could probably do this pretty easily and quickly with sleepycat, 
assuming all your requests are handled by a single server. It might be even 
easier with a RDBMS but it may have a performace impact.

Right now, I get session data from mysql/pgsql and it has no discernable 
impact, but more times that not, its a simple select statement which most 
likely comes out of the db cache. I imagine ordering would require select for 
update (blocking), update, and delete. Now you are blocking and hitting disk 
--- quite a bit slower.

What are the advantages/applications where you would want to have this? I 
haven't run into a need for it yet --- maybe credit card processing?

On Tuesday 04 November 2003 03:55 pm, Gregory (Grisha) Trubetskoy wrote:
> On Sun, 2 Nov 2003, Michael Owens wrote:
> > - Session management. This includes support for
>
> Just curious - does it do anything to make sure that requests for the same
> session are processed sequentially (i.e. never at the same time)?
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grisha at modpython.org  Wed Nov  5 00:05:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311042234.13877.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
	<200311042234.13877.mike@mikesclutter.com>
Message-ID: <20031104235444.W96643@onyx.ispol.com>


On Tue, 4 Nov 2003, Michael Owens wrote:

> That's a very interesting question, and frankly I've never given it a lot of
> thought.

I didn't give it a lot of thought either, until I came across the need for
it. This turned out a bit more complex than orginally anticipated (ok,
this is an understatement - it was a paint to get working), which is one
of the main motivators for providing session support as part of mod_python
(the latest beta has it).

The notion of a session always (or almost always) assumes that no more
than one request for a session is being processed at a time.  This is
default behaviour in JSP, for example, even though the users often don't
even know it.

If you have a session that, say increments a counter, then unless you have
some sort of a session locking mechanism, your numbers will increment, but
not always as expected :-)

Anyway - when I saw "session support" I thought there may be a chance you
knew something I didn't :-)

Grisha
From mike at mikesclutter.com  Wed Nov  5 08:57:27 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104235444.W96643@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<200311042234.13877.mike@mikesclutter.com>
	<20031104235444.W96643@onyx.ispol.com>
Message-ID: <200311050857.27585.mike@mikesclutter.com>

Up till now, I have always passed concurrency on to the database. If the 
session has made two concurrent requests altering the same data, then the 
state/value of the data is however the last request that commits the update 
left it. The data will be consistent, as the DB ensures consistent reads and 
writes as long as all work resides within a transaction. Counters also apply 
--- I just use a postgres sequence, or simulate one with mysql and tables. 
However, I am interested to see how you implemented this concurrancy.

In any case, I have always tried to use what was available, so most likely I 
will end up modifying my stuff to work atop the session support in 
mod_python.

On Tuesday 04 November 2003 11:05 pm, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 4 Nov 2003, Michael Owens wrote:
> > That's a very interesting question, and frankly I've never given it a lot
> > of thought.
>
> I didn't give it a lot of thought either, until I came across the need for
> it. This turned out a bit more complex than orginally anticipated (ok,
> this is an understatement - it was a paint to get working), which is one
> of the main motivators for providing session support as part of mod_python
> (the latest beta has it).

> The notion of a session always (or almost always) assumes that no more
> than one request for a session is being processed at a time.  This is
> default behaviour in JSP, for example, even though the users often don't
> even know it.
>
> If you have a session that, say increments a counter, then unless you have
> some sort of a session locking mechanism, your numbers will increment, but
> not always as expected :-)


> Anyway - when I saw "session support" I thought there may be a chance you
> knew something I didn't :-)
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From vmanera at manord.com  Wed Nov  5 15:56:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Strange behavior in using Session
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>

I'm starting to use new Session module and something strange sometimes
happens:<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

For debug purpose:

 

def test(req):

            sess = Session.DbmSession(req,timeout=7200) 

sys.stdout=req

            ...

            print 'et voila'

            .....

 

But sometime the output goes to another session on another workstation.

 

So, on the brouser of the programmer that called test was show all it does
except the print 'et voil?'

and on the brouser of a colleague that use Session to, magically appear 'et
voil?'

 

Any Idea

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031105/a8db8c76/attachment-0002.htm
From grisha at modpython.org  Wed Nov  5 10:24:37 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Strange behavior in using Session
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
Message-ID: <20031105102248.B2712@onyx.ispol.com>


There is one sys.stdout per Python interpreter. So however many clients
connect to the server, they all share sys.stdout.

You should not modify it, but use req.write() instead, and all will work
fine.

Grisha

On Wed, 5 Nov 2003, Manera, Villiam wrote:

> I'm starting to use new Session module and something strange sometimes
> happens:<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
> For debug purpose:
>
>
>
> def test(req):
>
>             sess = Session.DbmSession(req,timeout=7200)
>
> sys.stdout=req
>
>             ...
>
>             print 'et voila'
>
>             .....
>
>
>
> But sometime the output goes to another session on another workstation.
>
>
>
> So, on the brouser of the programmer that called test was show all it does
> except the print 'et voil?'
>
> and on the brouser of a colleague that use Session to, magically appear 'et
> voil?'
>
>
>
> Any Idea
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From tpc at csua.berkeley.edu  Wed Nov  5 09:58:04 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:00:31 2004
Subject: [Tutor] Re: [mod_python] invalid literal for float int or long
 solved !
In-Reply-To: <20031027144335.Q39378@onyx.ispol.com>
Message-ID: <20031105095630.H73580-100000@localhost.name>


the former is correct, I assumed it was the latter but was proven wrong
when I reverted to my earlier MySQL SELECT statement (i.e., WHERE) and
switched the url and title and it worked just fine.

On Mon, 27 Oct 2003, Gregory (Grisha) Trubetskoy wrote:

>
> The first one is "url, title", the second is "title, url" - was that the
> problem, or was it the WHERE instead of INNER JOIN (which are same thing
> IIRC).
>
> Grisha
>
>
> On Mon, 27 Oct 2003 tpc@csua.berkeley.edu wrote:
>
> >
> > fingers crossed, here's hoping the bug doesn't rear its creepy head again,
> > can't really say wherefore the bug but I found a workaround, I changed the
> > basic MySQL statement below:
> >
> > SELECT url, title FROM URLs, URLs_WITH_MATCHES WHERE URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > to:
> >
> > SELECT title, url from URLs INNER JOIN URLs_WITH_MATCHES ON URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > and voila !  I am a complete idiot.
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Tutor maillist  -  Tutor@python.org
> http://mail.python.org/mailman/listinfo/tutor
>

From stian at soiland.no  Thu Nov  6 07:33:09 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <3FA72A45.3080602@ainet.com>
References: <3FA72A45.3080602@ainet.com>
Message-ID: <20031106063309.GD22316@itea.ntnu.no>

On 2003-11-04 05:25:41, Jim Peterson wrote:

> A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> 
> A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
> saying hello?.
> I would have hit exactly the same problem if I hadn't just seen your thread.

I have been wondering myself, too, what decides if .py is required or
not? I agree that with SetHandler, .py suffix should not be required (to
get nicer URLs), ALTHOUGH it should still work.

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From grisha at modpython.org  Thu Nov  6 12:01:59 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python]
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <20031106063309.GD22316@itea.ntnu.no>
References: <3FA72A45.3080602@ainet.com> <20031106063309.GD22316@itea.ntnu.no>
Message-ID: <20031106115148.R20173@onyx.ispol.com>


The publisher makes this decision. It's not a simple decision to make
because a dot also serves as package.module separator in Python, so the
publisher has to make an intelligent guess on what you meant.

E.g. if you have

AddHandler mod_python .py .blah

Wheh you ask for main.blah, the publisher will drop the blah as the
extension and import module main. If you ask for main.bleh, it will assume
you meant module bleh in package main.

If you have

SetHandler mod_python

Then there is no initial list of suffixes to look at. Actually there *is*
(imp.get_suffixes()), but the publisher wasn't doing it, so in the
particular instance sited earlier in this thread, the documentation was
right and the publisher was wrong, and I think we fixed it correctly this
time for the next release.

Grisha


On Thu, 6 Nov 2003, Stian [iso-8859-1] S?iland wrote:

> On 2003-11-04 05:25:41, Jim Peterson wrote:
>
> > A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> >
> > A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am
> > saying hello?.
> > I would have hit exactly the same problem if I hadn't just seen your thread.
>
> I have been wondering myself, too, what decides if .py is required or
> not? I agree that with SetHandler, .py suffix should not be required (to
> get nicer URLs), ALTHOUGH it should still work.
>
> --
> Stian S?iland               Work toward win-win situation. Win-lose
> Trondheim, Norway           is where you win and the other lose.
> http://www.soiland.no/      Lose-lose and lose-win are left as an
>                             exercise to the reader.  [Limoncelli/Hogan]
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Thu Nov  6 21:28:14 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FA77A98.8060502@sjsoft.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
Message-ID: <3FAAAEDE.3060804@krap.dk>

Ok, now I figured the one part out.

Having set Indexes and DirectoryIndex (for example to index.py), the 
file MUST exists (eventhough it might not be used) so my solution was 
simply to touch the file.

The second problem, having the http-authorization-dialog popping up is 
still not resolved... Any thoughts ?

Svenne

David Fraser wrote:

> Hi Sevenne
> Have you tried turning off the Indexes under Options?
> David
>
> Svenne Krap wrote:
>
>> Quite simple right now.
>> - one handler-function (just printing out varios req-object 
>> attributes, nothing fancy until I have solved my problem.)
>> - one authenhandler-function (containing only "return apache.OK")
>>
>> Btw. another possible sligt change in behavior, earlier, when having 
>> the require-valid user set and return apache.OK immediately no popup 
>> for password noticed (as far memory servers). Now it pops up, but 
>> anything is accepted (which is expected, the popping up of the 
>> password-dialog is not expeced....)
>>
>> Svenne
>>
>> Gregory (Grisha) Trubetskoy wrote:
>>
>>> what's in the python script?
>>>
>>> Grisha
>>>
>>> On Sat, 1 Nov 2003, Svenne Krap wrote:
>>>
>>>  
>>>
>>>> Hi.
>>>>
>>>> I am toying around with mod_python on a gentoo-linux system. Prior I
>>>> used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>>> beta from source.
>>>>
>>>> This is what I wish :
>>>> Every request is handled by the same python-handler for the virtual
>>>> domain. I am currently playing around and creating my own handler 
>>>> in the
>>>> process.
>>>> It has worked before, with the following relevant parts of my 
>>>> httpd.conf
>>>> (be aware, internal test server so a lot off things are just made
>>>> simple, not secure/right):
>>>>
>>>> NameVirtualHost *
>>>> <Directory "/www/tweetie">
>>>>        SetHandler python-program
>>>>        PythonHandler site
>>>>        PythonAuthenHandler site
>>>>        PythonDebug On
>>>>        Options Indexes FollowSymLinks MultiViews
>>>>        AllowOverride All
>>>>        Order allow,deny
>>>>        Allow from all
>>>>        AuthType Basic
>>>>        AuthName "Restricted Area"
>>>>        require valid-user
>>>> </Directory>
>>>> <VirtualHost *>
>>>>        ServerName tweetie
>>>>        DocumentRoot /www/tweetie
>>>> </VirtualHost>
>>>>
>>>> But now, when I browse to "http://tweetie/" i get a directory listning
>>>> instead of the python script... If I write anything after the trailing
>>>> slash, everything works fine.
>>>>
>>>> Can you tell me, what I did wrong and how to fix it ?
>>>>
>>>> Tia
>>>>
>>>> Svenne Krap
>>>>
>>>> _______________________________________________
>>>> Mod_python mailing list
>>>> Mod_python@modpython.org
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>
>>>>   
>>>
>>>
>>>  
>>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>  
>>
>
>
>

From elvelind at amandarin.se  Fri Nov  7 00:49:06 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] open a simple file
Message-ID: <3FAADDF2.1020808@amandarin.se>

New to python and newer to mod_python so sorry if this is a newbie question.
I'm have a where simple handler just for test that should open a html 
file and writing it out.
The problem is that it cant found the file. iv tried with test.html and 
the absolute path and none work. is there something I'm missing?

-- 
elvelind grandin

amandarin.se


From gustavo.cordova at q-voz.com  Thu Nov  6 18:05:58 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <3FAAE1E6.4000501@q-voz.com>

elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie 
> question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html 
> and the absolute path and none work. is there something I'm missing?

Well, if you include the source to your module, maybe we might have a 
bit more information to help you with.

Please add a "PythonDebug On" directive in httpd.conf and include all 
error messages in your next email.

Just a note: I'm not cranky, it's just that we can't help you without 
more info.

-gustavo


From stian at soiland.no  Fri Nov  7 11:00:13 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] 
	Re: Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FAAAEDE.3060804@krap.dk>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
	<3FAAAEDE.3060804@krap.dk>
Message-ID: <20031107100013.GB1233@itea.ntnu.no>

On 2003-11-06 21:28:14, Svenne Krap wrote:

> The second problem, having the http-authorization-dialog popping up is 
> still not resolved... Any thoughts ?

We've found out with 3.1.2b that the AuthenHandler-thingie is not fully
functional.

We tried the simple example from the documentations, and even made it
simpler:

.htaccess
---------
PythonPath "['/our/libs'] + sys.path"
PythonAuthenHandler Cerebrum.web.login
AuthType Basic
AuthName "Cerebrum"
require valid-user


Cerebrum/web/login.py
---------------------
from mod_python import apache

def authenhandler(req):
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED



This failed with a 500 Server Error. Watching the apache log reveals a
hint:

[Fri Nov 07 10:49:42 2003] [error] [client 129.241.56.39]
python_handler: After PythonAuthenHandler req->user is NULL. Assign
req.user to avoid this error.

This seems weird.. modifing the function:


def authenhandler(req):
    req.user = ""
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED


This works perfect, the login dialog appears, and disappears if any
login name is entered.
    
Now - why should req.user need to be set first?

Even the simplest handler:

def authenhandler(req):
    return apache.HTTP_UNAUTHORIZED
    
fails.. but if req.user = "" is set, it works.         
    
-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:36:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Session instances can't be stored in req?
Message-ID: <20031107103633.GC1233@itea.ntnu.no>

Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If I
try to store sezz in req.blupp - everything fails - the apache process hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:37:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:00:31 2004
Subject: [mod_python] Re: open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <20031107103733.GD1233@itea.ntnu.no>

On 2003-11-07 00:49:06, elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html and 
> the absolute path and none work. is there something I'm missing?

Have you made sure the file is readable for the user running the apache
process?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From vmanera at manord.com  Fri Nov  7 12:23:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:00:32 2004
Subject: R: [mod_python] Session instances can't be stored in req?
Message-ID: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>

I had a similar problem, not exactly I now show it but for explain:

def xxx(req):
	sess = Session(req)
	...
	req.sess = sess
	return yyy(req)

def yyy(req):
	sess = check_sess()

def check_sess(req):
	if hasattr(req,'sess'):
		sess = req.sess
	else:
		sess = Session(req)
	return sess

this hang apache

if I delete the attribut from req all work fine:

def check(req):
	if hasattr(req,'sess'):
		sess = req.sess
		delattr(req,'sess')
	else:
		sess = Session(req)
	return

I think in this way:

class BaseSession(dict):
	...
	def __del__(self):
        self.unlock()

the del unlock apache

where have you put the  fixuphandler(req) and who call it? I'm interisting
in it too

Villiam



-----Messaggio originale-----
Da: Stian S?iland [mailto:stian@soiland.no]
Inviato: venerd? 7 novembre 2003 11.37
A: mod_python@modpython.org
Oggetto: [mod_python] Session instances can't be stored in req?


Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If
I
try to store sezz in req.blupp - everything fails - the apache process
hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From stian at soiland.no  Fri Nov  7 14:43:51 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Re: R: Session instances can't be stored in req?
In-Reply-To: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
Message-ID: <20031107134351.GE1233@itea.ntnu.no>

On 2003-11-07 12:23:34, Manera, Villiam wrote:

> this hang apache
> 
> if I delete the attribut from req all work fine:
> 
> def check(req):
> 	if hasattr(req,'sess'):
> 		sess = req.sess
> 		delattr(req,'sess')
> 	else:
> 		sess = Session(req)
> 	return
> class BaseSession(dict):
> 	...
> 	def __del__(self):
>         self.unlock()
> the del unlock apache

Yes, a lock problem seems to be the issue here. 

We tried defining a cleanuphandler to fix things up by both calling
unlock() and removing the reference req.session - but the cleanuphandler
isn't always reached.

We tried moving the code away to a normal handler that first retrieves
the session, stores it in req.session, and then calls
mod_python.publisher.handler(req) - lock problems still occur.

> where have you put the  fixuphandler(req) and who call it? I'm interisting
> in it too

>From our library, by setting in htaccess "PythonFixupHandler
Cerebrum.web.fixup" it will be imported from
/our/lib/Cerebrum/web/fixup.py


-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From michael at dynamine.net  Fri Nov  7 10:10:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] 
 Documentation suggestions for section 4.7.1 in the beta mod_python
 manual
Message-ID: <3FABE006.6010602@dynamine.net>

Hi Grisha,

I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.

First, please explain to us why we need yet another cookie class, 
especially one that has the same name as the package that ships with 
Python ("Cookie").  I have to admit, though, that SignedCookie looks 
like a really nice convenience class.

Second, it's really important that you emphasize the security risks of 
using MarshalCookie; see the Python documentation for SerialCookie to 
see why.  Also, there are efficient-length considerations; constructing 
cookies representing 100kB data structures would not be "best practice."

--Michael

From grisha at modpython.org  Fri Nov  7 13:37:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABE006.6010602@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
Message-ID: <20031107132410.W37230@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Hi Grisha,
>
> I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.
>
> First, please explain to us why we need yet another cookie class,

Because it is more efficient and simpler to use within mod_python
environment.

> especially one that has the same name as the package that ships with
> Python ("Cookie").

Since it resides inside the mod_python package I don't see how it matters.

> Second, it's really important that you emphasize the security risks of
> using MarshalCookie;  see the Python documentation for SerialCookie to
> see why.

There are no known security risks of useing MarshalCookie. At least none
that I am aware of, and I researched the subject pretty thoroughly.

First - MarshalCookie is a subclass of SignedCookie, so all MarshalCookies
are signed, which makes it impossible to alter the cookie value.

Second, there is a distinction between "marshalling" and "pickling", which
is what SerialCookie uses. The process of unmarshalling does not execute
arbitrary code.

> Also, there are efficient-length considerations; constructing
> cookies representing 100kB data structures would not be "best practice."

Apache will limit any header length to about 4k :-)

Grisha
From michael at dynamine.net  Fri Nov  7 11:34:50 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <20031107132410.W37230@onyx.ispol.com>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
Message-ID: <3FABF3DA.1040405@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> Second, there is a distinction between "marshalling" and "pickling", which
> is what SerialCookie uses. The process of unmarshalling does not execute
> arbitrary code.

What's your evaluation of the possibility that the marshaling method 
will change between Python versions?  The docs explicitly offer no 
guarantee that the format will remain stable.

Best,

--Michael

From neel at mediapulse.com  Fri Nov  7 14:42:29 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
	beta mod_python manual
Message-ID: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>

> First, please explain to us why we need yet another cookie class,

more classes do not mean you cannot use a class.  mod_python works quite
well with the python cookie class, I've used them together for a while
now.  I also like having more than one choice, and if someone wants to
write even another cookie class I see no problem with it.  I get to pick
the best one for my needs vs having one solution that I have to keep
tweaking to get it to do what I need.

> > Also, there are efficient-length considerations; constructing
> > cookies representing 100kB data structures would not be 
> "best practice."
> 
> Apache will limit any header length to about 4k :-)

With out looking at the spec, I believe that clients are to reject
cookies of more than 4096 bytes, and only allow one server (domain) to
store 20(?) cookies max.  Then again, the last time a browser was done
that followed the RFCs...  well I can't ever recall that happening =)

A cool addition to the mod_python cookie class would be to raise an
Execption (CookieLength?) if a cookie would result in more than the RFC
limit.

Mike

From michael at dynamine.net  Fri Nov  7 11:47:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
Message-ID: <3FABF6CF.7010202@dynamine.net>

Michael C. Neel wrote:

>>First, please explain to us why we need yet another cookie class,
> 
> more classes do not mean you cannot use a class.  mod_python works quite
> well with the python cookie class, I've used them together for a while
> now.  I also like having more than one choice, and if someone wants to
> write even another cookie class I see no problem with it.  I get to pick
> the best one for my needs vs having one solution that I have to keep
> tweaking to get it to do what I need.

I did not mean to argue that we didn't need another one; rather, I
thought it would be useful if he added a paragraph or two explaining why
this implementation was written in terms of its advantages over the
Cookie package shipping with Python.  It wasn't immediately obvious to me.

Best,

--Michael



From grisha at modpython.org  Fri Nov  7 16:48:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
Message-ID: <20031107164602.R37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael C. Neel wrote:

> A cool addition to the mod_python cookie class would be to raise an
> Execption (CookieLength?) if a cookie would result in more than the RFC
> limit.

That'd be rather difficult because cookies is one of those unfortunate
standards that has no RFC. Well it does, but nobody follows those. The
documentation for mod_python's class has some comments and a link to a
pretty good paper describing this sad situation.

Grisha
From grisha at modpython.org  Fri Nov  7 16:53:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <3FABF6CF.7010202@dynamine.net>
References: <3FABF6CF.7010202@dynamine.net>
Message-ID: <20031107165130.V37852@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> I thought it would be useful if he added a paragraph or two explaining
> why this implementation was written in terms of its advantages over the
> Cookie package shipping with Python.  It wasn't immediately obvious to
> me.

It's a good suggestion, but as a sidenote, this being open source - all
should/would comments are best submitted in a form of a patch ;-)

Grisha
From grisha at modpython.org  Fri Nov  7 16:58:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABF3DA.1040405@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
	<3FABF3DA.1040405@dynamine.net>
Message-ID: <20031107165354.T37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Gregory (Grisha) Trubetskoy wrote:
>
> > Second, there is a distinction between "marshalling" and "pickling", which
> > is what SerialCookie uses. The process of unmarshalling does not execute
> > arbitrary code.
>
> What's your evaluation of the possibility that the marshaling method
> will change between Python versions?  The docs explicitly offer no
> guarantee that the format will remain stable.

Well - marshalling is used to create .pyc files, and the format does
include a version number I believe. It's very unlikely that the format
will change with no backwards compatibility.

In other words I don't see this as a concern when using MarshalCookie.

Grisha
From matt at nipltd.com  Mon Nov 10 11:34:28 2003
From: matt at nipltd.com (Matt Hoskins)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] 
	Empty URL query elements causing mod_python 2.7.x and 3.0.x to seg
	fault
Message-ID: <1068464068.12464.23.camel@rhubarb>

I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
although I haven't tested them) can be made to lead to a segmentation
fault under unix (and the equivilent under win32) if you have an empty
query string element on the url. I don't have a debug build of
python/apache/etc, but it seems to be during a python_finalize that
things actually explode.

So the most simple case is:
http://myserver/?&

It'll explode with any empty query string component I believe. I'm
guessing it's the fact that the length of the whole element is 0 that's
upsetting things, as the following doesn't cause things to go
horribly wrong (and you correctly get an entry with an empty key):

http://myserver/?=&

As I'm not up to speed on python innards I don't know exactly why it's
getting upset. Should be easy to hack a fix to just skip entirely empty
entries, but the correct fix I guess would add a key/value pair of empty
strings to the url argument dictionary (why anyone would care about such
an entry I don't know ;).

I've had this error occur with apache 1.3.28/mod python 2.7.8/python
2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
2.3.2 under linux.

Regards,
Matt


From davidf at sjsoft.com  Mon Nov 10 14:10:51 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python 2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068464068.12464.23.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>
Message-ID: <3FAF804B.9080506@sjsoft.com>

Matt Hoskins wrote:

>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>although I haven't tested them) can be made to lead to a segmentation
>fault under unix (and the equivilent under win32) if you have an empty
>query string element on the url. I don't have a debug build of
>python/apache/etc, but it seems to be during a python_finalize that
>things actually explode.
>
>So the most simple case is:
>http://myserver/?&
>
>It'll explode with any empty query string component I believe. I'm
>guessing it's the fact that the length of the whole element is 0 that's
>upsetting things, as the following doesn't cause things to go
>horribly wrong (and you correctly get an entry with an empty key):
>
>http://myserver/?=&
>
>As I'm not up to speed on python innards I don't know exactly why it's
>getting upset. Should be easy to hack a fix to just skip entirely empty
>entries, but the correct fix I guess would add a key/value pair of empty
>strings to the url argument dictionary (why anyone would care about such
>an entry I don't know ;).
>
>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>2.3.2 under linux.
>
>Regards,
>Matt
>
Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
1.3.27/mod_python 2.7.8/python 2.2.2 under linux
Was this using a normal install, and do you have a simple test case of 
the config/.htaccess files and handler that generates this error?

David


From davidf at sjsoft.com  Mon Nov 10 14:59:15 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python	2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068468338.12464.32.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>	 <3FAF804B.9080506@sjsoft.com>
	<1068468338.12464.32.camel@rhubarb>
Message-ID: <3FAF8BA3.8090209@sjsoft.com>

Matt Hoskins wrote:

>On Mon, 2003-11-10 at 12:10, David Fraser wrote:
>  
>
>>Matt Hoskins wrote:
>>
>>    
>>
>>>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>>>although I haven't tested them) can be made to lead to a segmentation
>>>fault under unix (and the equivilent under win32) if you have an empty
>>>query string element on the url. I don't have a debug build of
>>>python/apache/etc, but it seems to be during a python_finalize that
>>>things actually explode.
>>>
>>>So the most simple case is:
>>>http://myserver/?&
>>>
>>>It'll explode with any empty query string component I believe. I'm
>>>guessing it's the fact that the length of the whole element is 0 that's
>>>upsetting things, as the following doesn't cause things to go
>>>horribly wrong (and you correctly get an entry with an empty key):
>>>
>>>http://myserver/?=&
>>>
>>>As I'm not up to speed on python innards I don't know exactly why it's
>>>getting upset. Should be easy to hack a fix to just skip entirely empty
>>>entries, but the correct fix I guess would add a key/value pair of empty
>>>strings to the url argument dictionary (why anyone would care about such
>>>an entry I don't know ;).
>>>
>>>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>>>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>>>2.3.2 under linux.
>>>
>>>Regards,
>>>Matt
>>>
>>>      
>>>
>>Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
>>1.3.27/mod_python 2.7.8/python 2.2.2 under linux
>>Was this using a normal install, and do you have a simple test case of 
>>the config/.htaccess files and handler that generates this error?
>>    
>>
>
>Are you using the FieldStorage stuff? Tt's actually the util.parse_qsl
>routine which is exploding for me. I'm half asleep this morning, so
>forgot to mention it was parse_qsl which was setting up stuff to cause
>things to blow up.
>
>I've hacked my the mod_python code (parse_qsl in _apachemodule.c) here
>to skip the empty entries in parse_qsl and that fixes the problem.
>
>fieldStorage = util.FieldStorage(modPythonRequest, 1) is the way that
>parse_qsl is ending up getting called here. I haven't had a chance to
>set up a piece of code which just calls this and doesn't do anything
>else, so I don't know if you have to actually use the fieldStorage thing
>or the values within in to trigger the crash, or whether just cleaning
>up after parse_qsl has been called with an empty query entity is enough
>to cause the problem.
>
>If you've tried fieldStorage = util.FieldStorage(modPythonRequest, 1)
>and aren't getting an explosion I could take the time to try create a
>minimal set of circumstations to cause the error, however I'm 99% sure
>it is down to parse_qsl given that "http://myserver/?=&" doesn't cause a
>problem with our app, and that should in theory create the same
>key/value pair through parse_qsl as "http://myserver/?&"
>
>Regards,
>Matt
>
>
>Matt
>
>
>  
>
OK, I wasn't using keep_blank_values=1
So it looks like a bug in parse_qsl, but I don't know enough CPython to 
debug it, maybe somebody else can :-)

David

PS Did you mean to send this to the list too?

From michael at dynamine.net  Mon Nov 10 10:03:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <3FAFD30C.9090200@dynamine.net>

Grisha,

It would be really cool if we could get access to the apache namespace 
in PythonPath, so we could do stuff like:

PythonPath "sys.path + [apache.server_root() + '/py']"

Best,

--Michael

From grisha at modpython.org  Mon Nov 10 14:30:30 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFD30C.9090200@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
Message-ID: <20031110142453.U88746@onyx.ispol.com>


On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Grisha,
>
> It would be really cool if we could get access to the apache namespace
> in PythonPath, so we could do stuff like:
>
> PythonPath "sys.path + [apache.server_root() + '/py']"


That would be neat, but I'm not sure it's theoretically possible, not
without some kind of trickery to simulate a run-time environment at
configuration stage...

I know mod_perl allows for inline perl to be executed at server
configuration time - I haven't looked at that stuff and can't really say I
know how it is done and whether it's something that would work with Python
as well.

Grisha
From gustavo.cordova at q-voz.com  Mon Nov 10 13:57:21 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110142453.U88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
Message-ID: <3FAFEDA1.7030705@q-voz.com>

Gregory (Grisha) Trubetskoy wrote:

>On Mon, 10 Nov 2003, Michael S. Fischer wrote:
>
>  
>
>>Grisha,
>>
>>It would be really cool if we could get access to the apache namespace
>>in PythonPath, so we could do stuff like:
>>
>>PythonPath "sys.path + [apache.server_root() + '/py']"
>>    
>>
>That would be neat, but I'm not sure it's theoretically possible, not
>without some kind of trickery to simulate a run-time environment at
>configuration stage...
>
>I know mod_perl allows for inline perl to be executed at server
>configuration time - I haven't looked at that stuff and can't really say I know how it is done and whether it's something that would work with Python as well.
>
>Grisha
>
>  
>
Without wanting to sound flippy or anything like that, but, I don't see 
much sense in such a configuration-time parameter "automatization", 
because, setting such parameters is part of any deployment, it's better 
to keep things explicit, no?

I'd prefer to use module-level variables-as-constants, with BIG 
UPPERCASE names, so as to not miss them when deploying, or updating, a 
module.

Just my thoughts.

-gustavo


From michael at dynamine.net  Mon Nov 10 12:04:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEDA1.7030705@q-voz.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
Message-ID: <3FAFEF3E.2040503@dynamine.net>

Gustavo C?rdova Avila wrote:

> Without wanting to sound flippy or anything like that, but, I don't see 
> much sense in such a configuration-time parameter "automatization", 
> because, setting such parameters is part of any deployment, it's better 
> to keep things explicit, no?

Not necessarily.  Developing Web applications in a team environment 
often entails having developers running multiple instances of the 
server, each running within the user's context and bound to his own 
port.  In situations like this, doing run-time paramaterization is critical.

But yes, for production applications it might make less sense.

--Michael

From grisha at modpython.org  Mon Nov 10 15:19:11 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEF3E.2040503@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
	<3FAFEDA1.7030705@q-voz.com> <3FAFEF3E.2040503@dynamine.net>
Message-ID: <20031110151346.K88746@onyx.ispol.com>


There is definitely value to machine-generated configuration.

What I am not sure about is the value of the automation residing within
httpd itself.

I.e., why not have the apachectl script call a Python script to generate
the server config from scratch just before starting the server?

BTW, mod_python even includes some code that could be useful in this
respect - it's in the test suite, the httpdconf.py module.

Grisha

On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Gustavo C?rdova Avila wrote:
>
> > Without wanting to sound flippy or anything like that, but, I don't see
> > much sense in such a configuration-time parameter "automatization",
> > because, setting such parameters is part of any deployment, it's better
> > to keep things explicit, no?
>
> Not necessarily.  Developing Web applications in a team environment
> often entails having developers running multiple instances of the
> server, each running within the user's context and bound to his own
> port.  In situations like this, doing run-time paramaterization is critical.
>
> But yes, for production applications it might make less sense.
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From neel at mediapulse.com  Mon Nov 10 15:22:59 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>

> > Without wanting to sound flippy or anything like that, but, 
> I don't see 
> > much sense in such a configuration-time parameter "automatization", 
> > because, setting such parameters is part of any deployment, 
> it's better 
> > to keep things explicit, no?
> 
> Not necessarily.  Developing Web applications in a team environment 
> often entails having developers running multiple instances of the 
> server, each running within the user's context and bound to his own 
> port.  In situations like this, doing run-time 
> paramaterization is critical.
> 
> But yes, for production applications it might make less sense.

Would each be under his own virtual server in apache then, and therefore
have his own config section?  This just seems to be saving some typing
the the httpd.conf file, a few lines above the PythonOption will be
DocumentRoot.  mod_perl goes insane and allows programming logic in the
conf file, and this is a bad thing imho; nothing like restarting a
server that doesn't come back because of a programmin error inside the
conf and quickly trying to debug it while the entire server remains
down.

Mike

From michael at dynamine.net  Mon Nov 10 12:54:42 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
Message-ID: <3FAFFB12.8010409@dynamine.net>

Michael C. Neel wrote:

> Would each be under his own virtual server in apache then, and therefore
> have his own config section?  This just seems to be saving some typing
> the the httpd.conf file, a few lines above the PythonOption will be
> DocumentRoot.  

I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
mod_python code in the static file store.

> mod_perl goes insane and allows programming logic in the
> conf file, and this is a bad thing imho; nothing like restarting a
> server that doesn't come back because of a programmin error inside the
> conf and quickly trying to debug it while the entire server remains
> down.

The mere fact that we can do suboptimal things with technology shouldn't 
preclude its availability.

--Michael


From michael at dynamine.net  Mon Nov 10 12:58:07 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110151346.K88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
	<3FAFEF3E.2040503@dynamine.net> <20031110151346.K88746@onyx.ispol.com>
Message-ID: <3FAFFBDF.1050606@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> There is definitely value to machine-generated configuration.
> 
> What I am not sure about is the value of the automation residing within
> httpd itself.
> 
> I.e., why not have the apachectl script call a Python script to generate
> the server config from scratch just before starting the server?

I do that now (using bash and sed, not Python).

But, I think that being able to pass variable parameters be used in 
Apache configuration is sexier, and very helpful when working in the 
context of a version-control environment.

--Michael

From bryn at bigtrouble.com  Mon Nov 10 13:07:22 2003
From: bryn at bigtrouble.com (Bryn Dyment)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] 
	static build link errors:  Python 2.3.2,  mod_python 2.7.8,  Apache
	1.3.29
Message-ID: <000d01c3a7ce$a2954920$6401a8c0@t20>

I'm getting link errors when building Apache with mod_python (static).
(I've successfully built mod_perl and PHP statically, so I'm somewhat
familiar with the process.)  Ideas?


Versions:
  Python: 2.3.2
  mod_python: 2.7.8
  Apache: 1.3.29


First, I built Python with:
  ./configure --enable-shared
  make
  make install


Next, mod_python with:
  ./configure --with-apache=../apache_1.3.29
  make static
  make install


Then, Apache with:
  ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a
  make


Here's where things went south:

---
gcc  -funsigned-char -DUSE_EXPAT -I./lib/expat-lite -DNO_DL_NEEDED `./apaci`
-Wl,--export-dynamic    -o httpd buildmark.o modules.o
modules/standard/libstandard.a  modules/python/libpython.a  main/libmain.a
./os/unix/libos.a  ap/libap.a  lib/expat-lite/libexpat.a  -lcrypt -lm
/usr/local/lib/python2.3/config/libpython2.3.a    -lutil   -lm
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tmpnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5785: warning: tmpnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tempnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5738: warning: tempnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`find_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key_value':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
.
.
.
---


Here are the results of ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a:

---
Configuring for Apache, Version 1.3.29
 + using installation path layout: FreeBSD (config.layout)
 + activated python module (modules/python/libpython.a)
Creating Makefile
Creating Configuration.apaci in src
Creating Makefile in src
 + configured for FreeBSD 4.9 platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + using "tr [a-z] [A-Z]" to uppercase
 + checking for system header files
 + adding selected modules
    o python_module uses ConfigStart/End
 + using builtin Expat
 + checking sizeof various data types
 + doing sanity check on compiler and options
Creating Makefile in src/support
Creating Makefile in src/os/unix
Creating Makefile in src/ap
Creating Makefile in src/main
Creating Makefile in src/lib/expat-lite
Creating Makefile in src/modules/standard
Creating Makefile in src/modules/python
---


From cs1spw at bath.ac.uk  Mon Nov 10 15:16:30 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <3FB0002E.7050007@bath.ac.uk>

Hi all,

Is there a way of sending a "message" to all Apache children running a 
mod_python application? Here's the problem: we have a template system 
which compiles template strings in to an in-memory data structure. This 
structure is cached in memory in a global dictionary for each Apache 
child. At the moment templates are stored in the cache with a timestamp 
saying when they were loaded, and expire and are reloaded every 5 
minutes. We want to be able to instantly invalidate a cached template if 
an urgent change needs to be made to the site.

Is there a way of pushing out a message to all of the Apache children 
saying "reload template X NOW", without having to hit the file system or 
database for every template request?

Cheers,

Simon Willison

From seth at picklematrix.net  Mon Nov 10 11:29:07 2003
From: seth at picklematrix.net (Seth Ladd)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>


On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes.  
I can assume that most templates will be static for longer than 5 
minutes.

Seth

From cs1spw at bath.ac.uk  Mon Nov 10 15:46:44 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
References: <3FB0002E.7050007@bath.ac.uk>
	<EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
Message-ID: <3FB00744.8070601@bath.ac.uk>

Seth Ladd wrote:

> Do you check the timestamp on the template from the filesystem?  That 
> might be better than to just throw away the template every 5 minutes.  I 
> can assume that most templates will be static for longer than 5 minutes.

Actually we do - every 5 minutes we check the timestamp to see if an 
update has been made. We're trying to avoid making the call to the 
filesystem to check the timestamp on every request.

-- 
Simon Willison
Web development weblog: http://simon.incutio.com/

From neel at mediapulse.com  Mon Nov 10 16:49:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>

> I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
> mod_python code in the static file store.
> 
Now I am lost, wouldn't ServerRoot always be the same?  Apache only
allows this directive once, so I'm missing the dynamic part.  Do you
have each developer running his own apache on a different port, in a
different directory?

> The mere fact that we can do suboptimal things with 
> technology shouldn't 
> preclude its availability.
> 
I used to think that, and wrote a lot of perl - I'm glad I stopped =p.
If you really want this, look into mod_perl and/or mod_macro, both of
which should be able to do what you are looking for - though I freely
admit I'm not sure what you are needing.  Perl looks something like:

  <Perl>
  
  $Location{"/~dougm/"} = {
    AuthUserFile => '/tmp/htpasswd',
    AuthType => 'Basic',
    AuthName => 'test',
    DirectoryIndex => [qw(index.html index.htm)],
    Limit => {
      METHODS => 'GET POST',
      require => 'user dougm',
    },
  };
  
  </Perl>

	If you want a more detailed example, search for conf file from a
Colbalt system, which configured everything based on a directory
structure including SSL.

Mike

From svenne at krap.dk  Mon Nov 10 22:52:11 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <3FB0088B.8040305@krap.dk>

What about using shared memory/semaphores (shm on linux) ? I have used 
it successfully before (in PHP) for a similar case. It's blazing fast 
and allows you to have an invalidate-script outside). Each process 
simply aquires the semaphore (overkill, but truly safe) and then reads 
the "versionnumber" (or perhaps last change) from a shm-memory segment.

Oh, by the way. Out of bitter experience, don't "loose" the semaphore, 
always keep it accounted for....

By googleling, i found 
http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

Svenne

Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?
>
> Cheers,
>
> Simon Willison
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From michael at dynamine.net  Mon Nov 10 14:00:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
Message-ID: <3FB00A7B.3080407@dynamine.net>

Michael C. Neel wrote:

>>I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
>>mod_python code in the static file store.
>>
> Now I am lost, wouldn't ServerRoot always be the same?  Apache only
> allows this directive once, so I'm missing the dynamic part.  Do you
> have each developer running his own apache on a different port, in a
> different directory?

Yes.  Each user has a subset of the Apache directory structure in his 
workspace, including a log directory, configuration directory, etc. -- 
not the binaries or libraries at this point, but just about everything 
else.  So, in this arrangement, ServerRoot is dynamic.

--Michael

From neel at mediapulse.com  Mon Nov 10 17:21:28 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B3@johnson.mediapulse.net>

> Yes.  Each user has a subset of the Apache directory structure in his 
> workspace, including a log directory, configuration 
> directory, etc. -- 
> not the binaries or libraries at this point, but just about 
> everything 
> else.  So, in this arrangement, ServerRoot is dynamic.
> 

Hmm... we have the same thing, only using virtual servers.  We split out
the conf to each directory and then use includes in the main conf.  Each
mini-conf only has the virtualhost lines that set the dir structure for
that server.  What are you getting from separate servers vs virtual
ones?  I'm not being a jerk, we here have several developers working as
well and just trying to see if there might be another way for us to
configure a web server.

Mike

From gnb at itga.com.au  Tue Nov 11 09:58:45 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Sending a message to Apache children 
In-Reply-To: Your message of Mon, 10 Nov 2003 15:46:44 -0600.
Message-ID: <200311102258.JAA20974@lightning.itga.com.au>


cs1spw@bath.ac.uk said:
> Actually we do - every 5 minutes we check the timestamp to see if an
> update has been made. We're trying to avoid making the call to the
> filesystem to check the timestamp on every request. 

Actually, my gut feeling is that a stat() on a file that is still in the cache 
is not going to be noticeably more expensive than the gettimeofday() call you 
need to do to decide whether five minutes are up.  So give it a whirl with the 
stat() on every call and see what that does to your performance, you might be 
surprised.


From michael at dynamine.net  Mon Nov 10 15:11:46 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <200311102258.JAA20974@lightning.itga.com.au>
References: <200311102258.JAA20974@lightning.itga.com.au>
Message-ID: <3FB01B32.6090605@dynamine.net>

Gregory Bond wrote:

> cs1spw@bath.ac.uk said:
> 
>>Actually we do - every 5 minutes we check the timestamp to see if an
>>update has been made. We're trying to avoid making the call to the
>>filesystem to check the timestamp on every request. 
> 
> 
> Actually, my gut feeling is that a stat() on a file that is still in the cache 
> is not going to be noticeably more expensive than the gettimeofday() call you 
> need to do to decide whether five minutes are up.  So give it a whirl with the 
> stat() on every call and see what that does to your performance, you might be 
> surprised.

Poster is correct; if your machine's inode cache is too small, you can 
adjust it via sysctl kern.maxvnodes (BSD); Linux's inode cache is dynamic.

--Michael

From perry.tew at cibavision.novartis.com  Tue Nov 11 08:27:40 2003
From: perry.tew at cibavision.novartis.com (perry.tew@cibavision.novartis.com)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <OF0364206B.49D2044C-ON85256DDB.004803A7-85256DDB.0049F1C9@EU.novartis.net>

Something I've found useful is to use the CleanupHandler to handle this 
kind of thing.  I have a security realm that caches users, roles, and 
protected urls.  I have a cleanup handler that detects changes in the 
database and updates the cache.  Since this happens after the request has 
ended, there is no impact to the user.  Each child is updated after each 
one handles a request.  The only downside is that a single request must be 
served before the change is placed into effect.  However, given the number 
of requests my handlers serve, that's a very small issue compared to 
adding the overhead of checking for changes during every single request 
while the browser is waiting.

Just some thoughts,
Perry




On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes. 
I can assume that most templates will be static for longer than 5 
minutes.

Seth

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python



From eric.ziegenhorn at ngc.com  Wed Nov 12 15:32:00 2003
From: eric.ziegenhorn at ngc.com (Ziegenhorn, Eric)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] subprocesses
Message-ID: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>

Hello,

I've read about the multitude of problems in running subprocesses under
mod_python using commands such as os.system() or one of the os.popen().
However, I've never been able to find a work around.  I'm particularly
interested in using os.popen3().  Does anyone know if this will work?
Should I just go back to straight cgi?

Thanks,
Eric
From brianh at exelixis.com  Wed Nov 12 16:25:14 2003
From: brianh at exelixis.com (Brian Hawthorne)
Date: Fri Jan  9 22:00:32 2004
Subject: [mod_python] subprocesses
In-Reply-To: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>
Message-ID: <Pine.GSO.4.44.0311121624250.19526-100000@timeless.exelixis.com>

i use popen3 under modpy and it works just fine.

-brian hawthorne

On Wed, 12 Nov 2003, Ziegenhorn, Eric wrote:

> Hello,
>
> I've read about the multitude of problems in running subprocesses under
> mod_python using commands such as os.system() or one of the os.popen().
> However, I've never been able to find a work around.  I'm particularly
> interested in using os.popen3().  Does anyone know if this will work?
> Should I just go back to straight cgi?
>
> Thanks,
> Eric
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From sergey at optimaltec.com  Wed Nov 12 15:53:05 2003
From: sergey at optimaltec.com (Sergey A. Lipnevich)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] 
	[PATCH] APR 1 compatibility: apr_pool_sub_make -> apr_pool_create_ex
Message-ID: <bou6k6$9b4$1@sea.gmane.org>

Hi!

Here's a small patch to insure mod_python 3.1.2b compiles with APR 0.9 
and 1.0. It replaces a call to deprecated apr_pool_sub_make with a call 
to apr_pool_create_ex.
Thank you!

Sergey.
-------------- next part --------------
diff -purN mod_python-3.1.2b/src/hlistobject.c mod_python/src/hlistobject.c
--- mod_python-3.1.2b/src/hlistobject.c	2002-11-07 19:15:11.000000000 -0500
+++ mod_python/src/hlistobject.c	2003-11-12 15:20:02.000000000 -0500
@@ -83,7 +83,7 @@ PyObject *MpHList_FromHLEntry(hl_entry *
         PyErr_NoMemory();
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
 
     result->pool = p;
     result->head = hlist_copy(p, hle);
diff -purN mod_python-3.1.2b/src/tableobject.c mod_python/src/tableobject.c
--- mod_python-3.1.2b/src/tableobject.c	2003-07-14 16:51:32.000000000 -0400
+++ mod_python/src/tableobject.c	2003-11-12 15:19:47.000000000 -0500
@@ -120,7 +120,7 @@ PyObject * MpTable_New()
     apr_pool_t *p;
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
     
     /* two is a wild guess */
     t = (tableobject *)MpTable_FromTable(apr_table_make(p, 2));
@@ -1006,7 +1006,7 @@ static PyObject *table_new(PyTypeObject 
     if (self != NULL) {
         apr_pool_t *p;
         tableobject *t = (tableobject *)self;
-        apr_pool_sub_make(&p, NULL, NULL);
+        apr_pool_create_ex(&p, NULL, NULL, NULL);
         t->pool = p;
         t->table = apr_table_make(p, 2);
     }
From modpython at holovaty.com  Thu Nov 13 14:41:52 2003
From: modpython at holovaty.com (Adrian Holovaty)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] mod_python error with Fedora Core 1
Message-ID: <200311131441.52452.modpython@holovaty.com>

I've installed Fedora Core 1 on my laptop, along with its standard RPMs of 
Apache 2 (httpd-2.0.47-10.rpm) and mod_python (mod_python-3.0.3-3.rpm). The 
mod_python package appears to be buggy.

Here's the httpd.conf code I'm using:

PythonPath "sys.path+['/home/adrian/doc/work/dev/modpython']"
<Location "/modpython">
    PythonDebug On
    SetHandler python-program
    PythonHandler testhandler
</Location>

Here's the handler (/home/adrian/doc/work/dev/modpython/testhandler.py):

from mod_python import apache
def handler(req):
    req.content_type = "text/html"
    req.write("Testing")
    return apache.OK

And here's the error output I see in my browser:

"""
Mod_python error: "PythonHandler testhandler"

Traceback (most recent call last):

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 320, in HandlerDispatch

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 496, in import_module

ImportError: No module named testhandler
"""

There are a few things wrong here. First, it should work -- i.e., the output 
should be "Testing". Second, the directory /usr/src/build doesn't exist on my 
machine, so that error message is quite perplexing.

The above httpd.conf settings and handler code worked perfectly with Red Hat 
9; I assume the bug is in the Fedora packaging. Any idea whether I can get it 
to work somehow? Has anybody had luck running mod_python on Fedora Core 1?

Thanks!

Adrian

From blazek at firma.seznam.cz  Fri Nov 14 12:56:14 2003
From: blazek at firma.seznam.cz (Vaclav Blazek)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] 
	Re: Empty URL query elements causing mod_python 2.7.x and 3.0.x to
	seg fault
Message-ID: <200311141256.14922.blazek@firma.seznam.cz>

> OK, I wasn't using keep_blank_values=1
> So it looks like a bug in parse_qsl, but I don't know enough CPython to 
> debug it, maybe somebody else can :-)

> David

> PS Did you mean to send this to the list too?

Hello all mod_pythoner's,

I'm sorry to reply to the message outside of it's thread, but I've just 
subscribted to this mailing list and cannot get the Message-ID of the 
original message.

Well, the main problem is in functions parse_qs() and parse_qsl() 
(src/_apachemodule.c). In these functions, there's the query-string broken by 
the '&' character and any part is considered as key=value pair which is then 
broken by the '=' character and stored in dict (parse_qs) or in list 
(parse_qsl).

Everything is fine until the size of pair is 0. In this case, there are 
created two python strings with zero length. Then the processing of both 
parst is made and these python strings are resized to the new size, which is 
also 0. But python (to be more precise, the function _PyString_Resize()) 
complains (by an exception) when you try to resize string of size 0 to size 
0. Since this exception is not handled and the _PyString_Resize() function 
changes the pointer to the python string to NULL, next py_DECREF() causes 
SIGSEGV.

I've added code which tests original pair's length in both functions and skips 
processing when string is empty.  I'm usign mod_python 3.0.3, but the code of 
these functions is the same in the latest version. Here comes the diff:

@@ -183,6 +183,11 @@
        cpair = PyString_AS_STRING(pair);

        len = strlen(cpair);
+        if (!len) {
+            /* Skip processing of empty string. */
+            ++n;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, len);
        if (key == NULL)
            return NULL;
@@ -301,6 +306,11 @@

        /* split the "abc=def" pair */
        plen = strlen(cpair);
+        if (!plen) {
+            /* Skip  processing of empty string. */
+            ++i;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, plen);
        if (key == NULL)
            return NULL;

--
Vaclav Blazek, Programer
Seznam.cz a.s., Prague, Czech Republic

From michael at dynamine.net  Mon Nov 17 12:24:59 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] req.write() can't take a tuple
Message-ID: <3FB92E9B.7050609@dynamine.net>

Hi Grish,

Is it possible to change req.write() so that it can take a tuple of 
strings as well as string?  It would be nice to be able to call 
req.write(data, "\n") instead of breaking it into two calls.

--Michael

From michael at dynamine.net  Mon Nov 17 12:31:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:33 2004
Subject: IGNORE Re: [mod_python] req.write() can't take a tuple
In-Reply-To: <3FB92E9B.7050609@dynamine.net>
References: <3FB92E9B.7050609@dynamine.net>
Message-ID: <3FB9303C.60604@dynamine.net>

Please ignore the previous message.  No need to reply.

--Michael

Michael S. Fischer wrote:

> Hi Grish,
> 
> Is it possible to change req.write() so that it can take a tuple of 
> strings as well as string?  It would be nice to be able to call 
> req.write(data, "\n") instead of breaking it into two calls.
> 
> --Michael
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From michael at kleehammer.com  Mon Nov 17 23:23:30 2003
From: michael at kleehammer.com (Michael Kleehammer)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
Message-ID: <16313.44242.563177.63147@home.kleehammer.com>

Whenever I attempt to use sessions, the DbmSession class chooses the
dbhash module and crashes when attempting to create the database.  (The
file is never created.)

* Fedora Core 1 (basically RH9)
* Newly compiled Apache 2.0.48
* Python 2.3
* mod_python 3.1.2b

Here is a small handler that exhibits the problem on my box.  If it runs
on anyone else's box, that would be good to know.

  from mod_python import apache
  import dbhash
  
  def handler(req):
      req.log_error("open", apache.APLOG_NOTICE)
  
      # seg fault in here
      result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
  
      req.log_error("opened")
      return apache.OK

The relevant Apache error log lines are:

  [notice] mod_python: (Re)importing module 'controller'
  [notice] [client 127.0.0.1] open
  [notice] child pid 11211 exit signal Segmentation fault (11)

Naturally, I've tested similar code outside of mod_python and it works
fine.  I'm wondering if dbhash is thread safe.

Obviously I can call DbmSession instead of Session and pass dumbdbm (or
another type -- I haven't tested any others yet), but I'm wondering why
the default setup isn't working.

Any thoughts?

Michael Kleehammer

From conrad at hep.caltech.edu  Wed Nov 19 07:09:32 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
In-Reply-To: <16313.44242.563177.63147@home.kleehammer.com>
References: <16313.44242.563177.63147@home.kleehammer.com>
Message-ID: <1069250970.3161.11.camel@localhost.localdomain>

Hi Michael

Since you compiled Apache yourself, please make sure that the version of
libdb that Apache and mod_python (and Python?) are the same.

I've seen the same behaviour when e.g. Apache was linked against
libdb-4.0 and mod_python against libdb-4.1.

HTH

Conrad

On Mon, 2003-11-17 at 22:23, Michael Kleehammer wrote:
> Whenever I attempt to use sessions, the DbmSession class chooses the
> dbhash module and crashes when attempting to create the database.  (The
> file is never created.)
> 
> * Fedora Core 1 (basically RH9)
> * Newly compiled Apache 2.0.48
> * Python 2.3
> * mod_python 3.1.2b
> 
> Here is a small handler that exhibits the problem on my box.  If it runs
> on anyone else's box, that would be good to know.
> 
>   from mod_python import apache
>   import dbhash
>   
>   def handler(req):
>       req.log_error("open", apache.APLOG_NOTICE)
>   
>       # seg fault in here
>       result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
>   
>       req.log_error("opened")
>       return apache.OK
> 
> The relevant Apache error log lines are:
> 
>   [notice] mod_python: (Re)importing module 'controller'
>   [notice] [client 127.0.0.1] open
>   [notice] child pid 11211 exit signal Segmentation fault (11)
> 
> Naturally, I've tested similar code outside of mod_python and it works
> fine.  I'm wondering if dbhash is thread safe.
> 
> Obviously I can call DbmSession instead of Session and pass dumbdbm (or
> another type -- I haven't tested any others yet), but I'm wondering why
> the default setup isn't working.
> 
> Any thoughts?
> 
> Michael Kleehammer
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From davidf at sjsoft.com  Thu Nov 20 14:19:31 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] 
	Apache child process restarting under Win32 - import errors
Message-ID: <3FBCB153.6020909@sjsoft.com>

Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


From dwmp at opti.cgi.net  Thu Nov 20 19:47:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Multiple handlers
Message-ID: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>


I'm a mod_python newbie using mod_python 3.1.2b and Apache 2.0.48.  I'm 
trying to setup my test directory to run .py files under a request handler 
and any .psp files under the mod_python.psp handler.  Here's my Apache config.

### Test ###
<Directory /usr/local/apache2/htdocs/test>
     AddHandler mod_python .py
     PythonHandler index
     PythonDebug On

     AddHandler mod_python .psp
     PythonHandler mod_python.psp
</Directory>

The problem is that I get both handlers running one after the other.  The 
request handler (index.py) handles the request, sends output, returns 
apache.OK and then the mod_python.psp tries to handle the same request, 
appending output to the index.py output.  Why does this config not set it 
up so that all .py requests go to index.py and all requests for .psp files 
get handled by mod_python.psp?

It would be nice if the documentation had a more detailed explanation of 
how Apache uses handlers and how to setup mod_python in the Apache 
config.  Those of us who are used to just putting a .php file in the 
filesystem and watching it run need a little hand holding.

-Dan

From grisha at modpython.org  Thu Nov 20 22:12:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Multiple handlers
In-Reply-To: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
References: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
Message-ID: <20031120221124.N69786@onyx.ispol.com>



On Thu, 20 Nov 2003, Dan W. wrote:

> ### Test ###
> <Directory /usr/local/apache2/htdocs/test>
>      AddHandler mod_python .py
>      PythonHandler index
>      PythonDebug On
>
>      AddHandler mod_python .psp
>      PythonHandler mod_python.psp
> </Directory>


Try this:

<Directory /usr/local/apache2/htdocs/test>

      AddHandler mod_python .py .psp

      PythonHandler index | .py
      PythonHandler mod_python.psp | .psp

      PythonDebug On

</Directory>


Grisha
From vmanera at manord.com  Fri Nov 21 18:00:18 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:00:33 2004
Subject: R: [mod_python] Apache child process restarting under Win32 - imp
	ort errors
Message-ID: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>

we have had the same behavior with ':&' 

Da: 	Cassiano, Marco  
Inviato:	luned? 16 giugno 2003 11.53
A:	'security@apache.org'
Cc:	'Gregory (Grisha) Trubetskoy'
Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF

I would like to inform you of the behaviour of Apache when a link with a
particular HREF is clicked.

First of all, our configuration is : 

Windows 2000 Server SP3
Apache 2.0.46
Mod-python 3.0.3
Active State Python 2.2.2


We have a python script that runs under mod-python which looks into the
database to find some articles and builds a table with the links to
"explode" each article and look into its details. This HTML table contains a
HREF for each article. Each HREF actually contains a call to another python
script that does the "explode" job. We pass the parameters to this script in
the usual "&" concatenation form.
It happened that one of the articles had a semicolon (";") as the final
character of its description
so the HREF was built in following way : "descriptionwithfinal;&next parm".
In other words the HREF contained the sequence ";&".
When we clicked on this link we got a "Page not found" error on the browser
but what really Apache did is the following (excerpt from error.log) :



[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.


-----Messaggio originale-----
Da: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
Inviato: gioved? 20 novembre 2003 13.20
A: mod_python@modpython.org
Oggetto: [mod_python] Apache child process restarting under Win32 -
import errors


Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From martin.clausen at privat.dk  Sat Nov 22 23:13:53 2003
From: martin.clausen at privat.dk (martin.clausen@privat.dk)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>

How do I do form-based authentication using mod_python / Apache. I would like to use Apaches authentication mechanism(as used in the mod_pyhton manual(release 3.0.3), but would like a form-based login/password solution instead of the pop-up - is that possible ?

The only solution I have been able to find after a lot of googling and mailing list searches is to use javascript to prefix the login and password to the request from a form on a "cover" page, but besides from the inelegance inhenrent in this solution and the security risk in transmitting the password as part of the request, it would not prevent the pop-up from appearing if someone requested the login script directly.

Any help is appreciated, also if the you have a solution for form-based authentication that does not use Apache.

Regards,

Martin

From jciccale at mac.com  Sun Nov 23 02:16:01 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <7001386.1069550161586.JavaMail.jciccale@mac.com>

Hi, 
   I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly I'm unable to use the new Session handling classes, I get "Failled to acquire global mutex lock" and this on apache's error log
  "(13)Permission denied: Failed to acquire global mutex lock at index 9"

 Anyone that is getting the same errors?

Thanks,
Julian
From grisha at modpython.org  Sat Nov 22 21:43:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <20031122214159.N734@onyx.ispol.com>


See if you can get the latest sources from CVS - I believe this has been
fixed soon after 3.1.1b was released.

Grisha

On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi,

>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
> Sadly I'm unable to use the new Session handling classes, I get "Failled
> to acquire global mutex lock" and this on apache's error log
>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
>
> Thanks,
> Julian
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From jciccale at mac.com  Sun Nov 23 13:24:26 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <1252866.1069590266578.JavaMail.jciccale@mac.com>

Hi and thanks,
  I got that problem solved but now it seems it's happening something weird. I compiled the sources from CVS (enabling the debugging lines on the locking calls). On a first request i get these lines:

[Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
[Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429

, which seems to lock mutex at ix 30. (and remains locked even when the request has completed). Then when a second request comes i get this:

[Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425

. Obviously that process remains locked forever, waiting on a lock forever.
How it was meant to work the locking mechanism? It seems the problem is in Session.py and how it handles the locking..

BTW. I'm working on a very cool project take a look (pythonwork.sf.net)
Bye,
Julian

On Sunday, November 23, 2003, at 03:43AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>See if you can get the latest sources from CVS - I believe this has been
>fixed soon after 3.1.1b was released.
>
>Grisha
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi,
>
>>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
>> Sadly I'm unable to use the new Session handling classes, I get "Failled
>> to acquire global mutex lock" and this on apache's error log
>>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>>
>>  Anyone that is getting the same errors?
>>
>> Thanks,
>> Julian
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>
>

From tropezien at croxx.de  Sun Nov 23 15:16:33 2003
From: tropezien at croxx.de (Tropezien)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <200311231516.33716.tropezien@croxx.de>

Am Sonntag, 23. November 2003 02:16 schrieb Julian Ciccale:
> Hi,
>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly
> I'm unable to use the new Session handling classes, I get "Failled to
> acquire global mutex lock" and this on apache's error log "(13)Permission
> denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python 3.1.2b.
Some further investigations cleared up that mod_python tries to get more than 
400 semaphores during launch of httpd. There is an estimated amount of 16 
threads (AP_MPMQ_MAX_THREADS) for all (25) possible daemon-process 
( AP_MPMQ_MAX_DAEMONS).
My quick and dirty solution was to increase the amount of system semaphores 
supported by the Linux-kernel with

    >georg@jeordi:/etc/rc.d$ /sbin/sysctl kernel.sem
    kernel.sem = 256        32000   32      512

I changed my /etc/sysctl.conf to:

    kernel.sem = 500 32000 32 512

and added the line:

    sysctl -p

into the Init-Skript of the Apache (rc.httpd) before the httpd-daemon is 
started.

Ciao, Georg

From tim.stebbing at nunatak.com.au  Mon Nov 24 09:18:32 2003
From: tim.stebbing at nunatak.com.au (Timothy Stebbing)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] mod_dav phases question
Message-ID: <3FC13238.4030208@nunatak.com.au>

The apache module 'mod_dav' provides webdav ability to be added to 
<directory>'s.
this provides the usual web_dav calls, one of which is 'PUT'. Apache 
handles put internally,
however we are using mod_dav as part of our CMS, to allow our users to 
'checkout' a document
to a webdav folder and open the file, and we want to capture the put 
phase, so we can take the
newly modified file from the webdav folder and check it back in to our cms.

How can I capture the mod_dav put phase with mod_python?  I was thinking 
an apache filter,
but how can I have that applied only to the mod_dav put phase, rather 
than every request? Is
there some large list somewhere of all the possible phases provided by 
every module I can apply
filters to?

-TJS


From grisha at modpython.org  Sun Nov 23 20:12:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <200311231516.33716.tropezien@croxx.de>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
 <200311231516.33716.tropezien@croxx.de>
Message-ID: <20031123201050.S16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Tropezien wrote:

> Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> 3.1.2b. Some further investigations cleared up that mod_python tries to
> get more than 400 semaphores during launch of httpd.

Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
semaphores, which is 32. What does your log say when you start httpd?

Grisha


From grisha at modpython.org  Sun Nov 23 20:15:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <1252866.1069590266578.JavaMail.jciccale@mac.com>
References: <1252866.1069590266578.JavaMail.jciccale@mac.com>
Message-ID: <20031123201252.N16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi and thanks,

>   I got that problem solved but now it seems it's happening something
> weird. I compiled the sources from CVS (enabling the debugging lines on
> the locking calls). On a first request i get these lines:
>
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>
> , which seems to lock mutex at ix 30. (and remains locked even when the
> request has completed). Then when a second request comes i get this:
>
> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>
> . Obviously that process remains locked forever, waiting on a lock forever.

How are you using your sessions? Do you by any chance assign it to a
global variable - the session releases the lock when you call it's ulock()
method explicitely, or when it goes out of scope, so assigning it to a
global would make it stay there and locked even after the request is done.

Grisha
From jciccale at mac.com  Mon Nov 24 02:49:40 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6232663.1069638580829.JavaMail.jciccale@mac.com>

Kind of. What I do is the followoing

try:
    from mod_python.Session import Session as DefaultSessionCall
except:
    def DefaultSessionCall( r ):
       return None

, this is a peice of code I use to make configurable the Session class the user wants to use. I also then try to call a setter method on a user's class to pass the session he works on. How should I use the session? The locking mechanism is needed for read/write or just write? I think I may write a session wrapper class to lock unlock on user call to get/set properties..


 
On Monday, November 24, 2003, at 02:15AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi and thanks,
>
>>   I got that problem solved but now it seems it's happening something
>> weird. I compiled the sources from CVS (enabling the debugging lines on
>> the locking calls). On a first request i get these lines:
>>
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>>
>> , which seems to lock mutex at ix 30. (and remains locked even when the
>> request has completed). Then when a second request comes i get this:
>>
>> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>>
>> . Obviously that process remains locked forever, waiting on a lock forever.
>
>How are you using your sessions? Do you by any chance assign it to a
>global variable - the session releases the lock when you call it's ulock()
>method explicitely, or when it goes out of scope, so assigning it to a
>global would make it stay there and locked even after the request is done.
>
>Grisha
>
>
From grisha at modpython.org  Sun Nov 23 23:25:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <6232663.1069638580829.JavaMail.jciccale@mac.com>
References: <6232663.1069638580829.JavaMail.jciccale@mac.com>
Message-ID: <20031123231631.U16686@onyx.ispol.com>



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Kind of. What I do is the followoing
>
> try:
>     from mod_python.Session import Session as DefaultSessionCall
> except:
>     def DefaultSessionCall( r ):
>        return None
>
> , this is a peice of code I use to make configurable the Session class
> the user wants to use.

This is fine, but make sure that after you do:

   session = DefaultSessionCall(r)

that the session variable is not referenced by anything after the request
is done. Or you can explicitely unlock it:

   session.unlock()

> I also then try to call a setter method on a user's class to pass the
> session he works on. How should I use the session? The locking mechanism
> is needed for read/write or just write?

You don't need to worry about locking for read and write, that locking is
taken care of automtically. You need session locking to make sure that no
two HTTP requests for the same session execute at the same time.

> I think I may write a session wrapper class to lock unlock on user call
> to get/set properties..

Your wrapper can avoid session locking altogether by instantiating it as
such:

session = Session(req, lock=0)

Grisha
From randallk at cpsc.ucalgary.ca  Sun Nov 23 23:02:04 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <Pine.LNX.4.44.0311232250010.8753-100000@csl>


Hi,

I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
the session handling stuff.

When I try to connect to my postgresql database in the following way:

from pyPgSQL import PgSQL
pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')


Apache error_log says:

PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'

and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
When I do the same outside apache/mod_python I can see the connect function.

Any thoughts?


dir(PgSQL)
running within mod_python:

['BooleanType', 'BufferType', 'BuiltinFunctionType',
'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
'LongType', 'MethodType', 'ModuleType', 'NoneType',
'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']

dir(PgSQL)
running outside mod_python:

['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
're_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
'threadsafety', 'version', 'weakref']


httpd.conf:

LoadModule python_module /var/www2/modules/mod_python.so
<Directory /var/www2/htdocs/billing>  
SetHandler python-program
PythonHandler mod_python.publisher
</Directory>


From jciccale at mac.com  Mon Nov 24 09:32:57 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <12600642.1069662777616.JavaMail.jciccale@mac.com>

Which python version are you using?

Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?

Check it with
import sys
print sys.version


On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>Hi,
>
>I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>the session handling stuff.
>
>When I try to connect to my postgresql database in the following way:
>
>from pyPgSQL import PgSQL
>pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>
>
>Apache error_log says:
>
>PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>
>and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
>When I do the same outside apache/mod_python I can see the connect function.
>
>Any thoughts?
>
>
>dir(PgSQL)
>running within mod_python:
>
>['BooleanType', 'BufferType', 'BuiltinFunctionType',
>'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>'LongType', 'MethodType', 'ModuleType', 'NoneType',
>'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>
>dir(PgSQL)
>running outside mod_python:
>
>['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>'threadsafety', 'version', 'weakref']
>
>
>httpd.conf:
>
>LoadModule python_module /var/www2/modules/mod_python.so
><Directory /var/www2/htdocs/billing>  
>SetHandler python-program
>PythonHandler mod_python.publisher
></Directory>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From jciccale at mac.com  Mon Nov 24 10:44:17 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6678826.1069667057374.JavaMail.jciccale@mac.com>

Thanks, BTW the "lock" argument its only available through BaseSession's __init__ and not DbmSession/MemorySession. It would be interesting to have it.. There are cases where you may want to request be processed at the same time for the same session, for example if the users calls a pdf generating page and at the same time he opens another browser win to do soma other stuff.

It seems that my problem would be the scope stuff cause I dont get my data saved even by unlocking the session.
By now I've made a work around by calling unlock & save when the request is done

Thanks,
Julian

I removed the definitions and I'm using directly mod_python's Session object. then action
On Monday, November 24, 2003, at 05:25AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Kind of. What I do is the followoing
>>
>> try:
>>     from mod_python.Session import Session as DefaultSessionCall
>> except:
>>     def DefaultSessionCall( r ):
>>        return None
>>
>> , this is a peice of code I use to make configurable the Session class
>> the user wants to use.
>
>This is fine, but make sure that after you do:
>
>   session = DefaultSessionCall(r)
>
>that the session variable is not referenced by anything after the request
>is done. Or you can explicitely unlock it:
>
>   session.unlock()
>
>> I also then try to call a setter method on a user's class to pass the
>> session he works on. How should I use the session? The locking mechanism
>> is needed for read/write or just write?
>
>You don't need to worry about locking for read and write, that locking is
>taken care of automtically. You need session locking to make sure that no
>two HTTP requests for the same session execute at the same time.
>
>> I think I may write a session wrapper class to lock unlock on user call
>> to get/set properties..
>
>Your wrapper can avoid session locking altogether by instantiating it as
>such:
>
>session = Session(req, lock=0)
>
>Grisha
>
>
From gwidion at mpc.com.br  Mon Nov 24 10:13:31 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
Message-ID: <200311241013.31596.gwidion@mpc.com.br>

Hi there.

I am actually implementing this in the very first mod python app I am 
developing.


You actually have to override the Auth Handler from apache with a 
Python Module. 

If you google for it, you will be offered a lot of ready-made session 
control stuff, as part of existing packages.

It is not, however, that hard to implement form scratch. Here is my 
.htaccess:

  AddHandler python-program .py
 PythonHandler dummy
 PythonAuthenHandler verify


As you can see, the PythonAuthenHandler is "verify.py" which is 
called. (inside it, the authenhandler() function is called)

I them encode some session data (like originating IP + user password) 
to generate a MD5 hashed cookie I send to the browser to further 
authentication. In the server, I save a session ID file with  the 
session data, and regenerate the cookie at each page load (which goes 
thru the "AuthenHandler" again) and compare it with the browser-sent 
cookie.

One thing I am still trying to find out is how to detect when the 
person navigate to another site  - in which case, the session should 
be terminated. I mean: I cannot allow that once in other site one can 
be back in the secure section by hitting "back".

As of the time, I plan to implement this thru a javascript that will 
destroy the cookie in a "unload()" event. But I would appreciate more 
suggestions.


Regards,

	JS
	-><-


On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
> How do I do form-based authentication using mod_python / Apache. I
> would like to use Apaches authentication mechanism(as used in the
> mod_pyhton manual(release 3.0.3), but would like a form-based
> login/password solution instead of the pop-up - is that possible ?
>
> The only solution I have been able to find after a lot of googling
> and mailing list searches is to use javascript to prefix the login
> and password to the request from a form on a "cover" page, but
> besides from the inelegance inhenrent in this solution and the
> security risk in transmitting the password as part of the request,
> it would not prevent the pop-up from appearing if someone requested
> the login script directly.
>
> Any help is appreciated, also if the you have a solution for
> form-based authentication that does not use Apache.
>
> Regards,
>
> Martin
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 

Este e-mail ?, exceto pelas partes citadas
de outros e-mails, copyright(c) de Jo?o Sebasti?o
de Oliveira Bueno. Nenhuma c?pia deste e-mail ou 
parte do mesmo pode existir nas depend?ncias 
de, ou em posse de funcion?rios, de associa??es
protetoras de direitos autorais Brasileiras,
 dos Estados Unidos da Am?rica, ou de outros
pa?ses. Em particular essa exce??o do direito
de leitura e posse deste e-mail se extende ?
ABRA, ABPI, ABES, BSA, RIAA e MPAA. Violadores
est?o infringindo as leis internacionais de 
direitos autorais e sujeitos ?s penalidades cab?veis.
Voc? pode re-utilizar, emendar,  acrescentar
suas palavras e citar e re-enviar qualquer 
parte do mesmo, desde que essa nota seja 
preservada e se n?o pertencer a alguma
das entidades supracitadas.




From davidf at sjsoft.com  Mon Nov 24 14:23:47 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:33 2004
Subject: R: [mod_python] Apache child process restarting under Win32 -
 imp	ort errors
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
Message-ID: <3FC1F853.4020607@sjsoft.com>

Manera, Villiam wrote:

>we have had the same behavior with ':&' 
>  
>
Thanks, this was interesting...

>Da: 	Cassiano, Marco  
>Inviato:	luned? 16 giugno 2003 11.53
>A:	'security@apache.org'
>Cc:	'Gregory (Grisha) Trubetskoy'
>Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF
>
>I would like to inform you of the behaviour of Apache when a link with a
>particular HREF is clicked.
>
>First of all, our configuration is : 
>
>Windows 2000 Server SP3
>Apache 2.0.46
>Mod-python 3.0.3
>Active State Python 2.2.2
>
>
>We have a python script that runs under mod-python which looks into the
>database to find some articles and builds a table with the links to
>"explode" each article and look into its details. This HTML table contains a
>HREF for each article. Each HREF actually contains a call to another python
>script that does the "explode" job. We pass the parameters to this script in
>the usual "&" concatenation form.
>It happened that one of the articles had a semicolon (";") as the final
>character of its description
>so the HREF was built in following way : "descriptionwithfinal;&next parm".
>In other words the HREF contained the sequence ";&".
>When we clicked on this link we got a "Page not found" error on the browser
>but what really Apache did is the following (excerpt from error.log) :
>
>
>
>[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
>3221225477 -- Restarting.
>
>
>-----Messaggio originale-----
>Da: mod_python-bounces@modpython.org
>[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
>Inviato: gioved? 20 novembre 2003 13.20
>A: mod_python@modpython.org
>Oggetto: [mod_python] Apache child process restarting under Win32 -
>import errors
>
>
>Hi
>
>We are having trouble with our application suddenly producing crashes 
>for all browsers connected to the system.
>We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
>It seems that the problem is that a module that was imported correctly 
>somehow is not anymore...
>
>In trying to track this down, I found the following in the Apache error log:
>[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
>status 3221225477 -- Restarting.
>[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.
>
>This happens directly before the first occurence of the problem (I've 
>taken off the date, [error], [client ip-address]:
>PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
>HandlerDispatch
>    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
>&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
>handler
>    server = getserver(modulename, instancename), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
>getserver
>    raise AttributeError(errormessage), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web: AttributeError: module 
>'jLogbook.python.config' has no attribute 'AmerivenIndexPage'
>
>I made it print out the contents of the module at this point in the 
>error log:
>module is <module 'jLogbook.python.config' from 
>'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
>are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
>'os', 'sys']
>This seems to indicate that only half of this module was imported... 
>perhaps because one of the other imports failed (these seem to be some 
>win32 extension modules)
>
>I was wondering if anyone else has experienced problems with Apache 
>restarting, and why this happens...
>
>David
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>  
>


From davidf at sjsoft.com  Mon Nov 24 14:25:20 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <200311241013.31596.gwidion@mpc.com.br>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br>
Message-ID: <3FC1F8B0.1010001@sjsoft.com>

Joao S. O. Bueno wrote:

>Hi there.
>
>I am actually implementing this in the very first mod python app I am 
>developing.
>
>
>You actually have to override the Auth Handler from apache with a 
>Python Module. 
>
>If you google for it, you will be offered a lot of ready-made session 
>control stuff, as part of existing packages.
>
>It is not, however, that hard to implement form scratch. Here is my 
>.htaccess:
>
>  AddHandler python-program .py
> PythonHandler dummy
> PythonAuthenHandler verify
>
>
>As you can see, the PythonAuthenHandler is "verify.py" which is 
>called. (inside it, the authenhandler() function is called)
>
>I them encode some session data (like originating IP + user password) 
>to generate a MD5 hashed cookie I send to the browser to further 
>authentication. In the server, I save a session ID file with  the 
>session data, and regenerate the cookie at each page load (which goes 
>thru the "AuthenHandler" again) and compare it with the browser-sent 
>cookie.
>
>One thing I am still trying to find out is how to detect when the 
>person navigate to another site  - in which case, the session should 
>be terminated. I mean: I cannot allow that once in other site one can 
>be back in the secure section by hitting "back".
>
>As of the time, I plan to implement this thru a javascript that will 
>destroy the cookie in a "unload()" event. But I would appreciate more 
>suggestions.
>  
>
The questions is, what do you mean by being in another site?
Someone can easily be in multiple sites at once.
Maybe what you want is a timeout so if someone hasn't used their session 
for 10 minutes they have to log in again

David

>
>Regards,
>
>	JS
>	-><-
>
>
>On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
>  
>
>>How do I do form-based authentication using mod_python / Apache. I
>>would like to use Apaches authentication mechanism(as used in the
>>mod_pyhton manual(release 3.0.3), but would like a form-based
>>login/password solution instead of the pop-up - is that possible ?
>>
>>The only solution I have been able to find after a lot of googling
>>and mailing list searches is to use javascript to prefix the login
>>and password to the request from a form on a "cover" page, but
>>besides from the inelegance inhenrent in this solution and the
>>security risk in transmitting the password as part of the request,
>>it would not prevent the pop-up from appearing if someone requested
>>the login script directly.
>>
>>Any help is appreciated, also if the you have a solution for
>>form-based authentication that does not use Apache.
>>
>>Regards,
>>
>>Martin
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>    
>>
>
>  
>


From gwidion at mpc.com.br  Mon Nov 24 11:15:14 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 22:00:33 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC1F8B0.1010001@sjsoft.com>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br> <3FC1F8B0.1010001@sjsoft.com>
Message-ID: <200311241115.14240.gwidion@mpc.com.br>

On Monday 24 November 2003 10:25, David Fraser wrote:
> Joao S. O. Bueno wrote:

> The questions is, what do you mean by being in another site?
> Someone can easily be in multiple sites at once.
> Maybe what you want is a timeout so if someone hasn't used their
> session for 10 minutes they have to log in again
>
> David

What must be avoided is that one does get back to the secure session 
by hitting the "back" button.
I will also put timeout controls, but only them will  be far from the 
ideal situation. 

BTW, I forgot to mention, I have to use apache 2.7.8 in apache 1.3, so 
I have no resource to mod_python session facilities.

Regards,

	JS
	-><-


From randallk at cpsc.ucalgary.ca  Mon Nov 24 09:37:03 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <12600642.1069662777616.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311240909230.8753-100000@csl>




On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Which python version are you using?
> 
> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> 
> Check it with
> import sys
> print sys.version
> 

Yep, they're the same:

apache:
[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured

vs.
python -v

Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2

(and there's only one 2.3.2 installed ).

sys.path is identical for both as well ( except for the script's own directory, which is
chrooted to htdocs by apache as expected.)

Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.

python 2.3.2
pyPgSQL 2.4
mod_python 3.1.2b
apache 2.0.48
postgresql 7.4

Keith

> 
> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >Hi,
> >
> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
> >the session handling stuff.
> >
> >When I try to connect to my postgresql database in the following way:
> >
> >from pyPgSQL import PgSQL
> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
> >
> >
> >Apache error_log says:
> >
> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
> >
> >and indeed when I do a dir(pgSQL), it lists no connect function.
> >When I do the same outside apache/mod_python I can see the connect function.
> >
> >Any thoughts?
> >
> >
> >dir(PgSQL)
> >running within mod_python:
> >
> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
> >
> >dir(PgSQL)
> >running outside mod_python:
> >
> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
> >'threadsafety', 'version', 'weakref']
> >
> >
> >httpd.conf:
> >
> >LoadModule python_module /var/www2/modules/mod_python.so
> ><Directory /var/www2/htdocs/billing>  
> >SetHandler python-program
> >PythonHandler mod_python.publisher
> ></Directory>
> >
> >
> >_______________________________________________
> >Mod_python mailing list
> >Mod_python@modpython.org
> >http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 


From neel at mediapulse.com  Mon Nov 24 13:55:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>

I'm usally surprised by how many web developers do not fully understand
how authencation works over http.

First you have to understand it is truly impossible to create a secure
connection when you have no control over the client.  Worse, the
"connection" is not a connection at all, but a series of connection so
we have to check the auth for each and every one of them.

The best setup you can have is http-auth over an SSL connection.  The
login info is never written to disk on the client side.  The downside is
the browser will remember the login info until it is closed.  Also, if
the connection is not encryped (ssl), then a packet sniffer can get the
login info from the heards sent by the client.

Sadly there is no way to take login fields on a form and pass the to the
client headers as would happen in http-auth.  Because the connection is
statless, you must then store this login info in cookies, hidden fields,
or on the server and pass the client a session key in hidden fields or a
cookie.

Besides watching with a packet sniffer for headers to get the login
info, you can also get the cookie stored on the client system as well.
Browsers may write session cookies to disk, even though there is no
need.  Firebird does this, and even remembers session cookies after it
is closed and re-opened (which I assume is a bug, but none the less it
does do it).

So what can you do if you want the sexy login fields, but still be
secure (as is possible)?  A lot of things, we may not be able to be 100%
secure, but that doesn't mean we have to make it easy.  Here is
something things to do (many thanks to the Albatross developers for
showing me much of this):

1.  Build a string or object with as much detail about the client as
possible, (IP, user-agent, timestamp).
2.  take this string/object gzip it (we have a space limit)
3.  Sign this string with MD5 and a key only the server will ever know.
4.  base64 encode the signed string to make sure all characters are
legit.

...now when we decode the cookie...

1.  base64 decode it, and check our md5 sig
2.  ungzip the string and parse it back to it's object/string form
3.  make sure the IP, user-agent match the current request
4.  make sure the timestamp is within our limit for a login

Now even if someone gets a copy of the cookie, if they don't know the
MD5 key they can't alter it.  Most likely their ip and or user-agent
won't match either, but if it does the odds are the timeout may have
been reached already, esp if it's kept low like 5 or 10 minutes.

Mike

From michael at dynamine.net  Mon Nov 24 11:10:44 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC257B4.4050606@dynamine.net>

Michael C. Neel wrote:

> So what can you do if you want the sexy login fields, but still be
> secure (as is possible)?  A lot of things, we may not be able to be 100%
> secure, but that doesn't mean we have to make it easy.  Here is
> something things to do (many thanks to the Albatross developers for
> showing me much of this):
> 
> 1.  Build a string or object with as much detail about the client as
> possible, (IP, user-agent, timestamp).
> 2.  take this string/object gzip it (we have a space limit)
> 3.  Sign this string with MD5 and a key only the server will ever know.
> 4.  base64 encode the signed string to make sure all characters are
> legit.
> 
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

This is pretty much what the Session handling code in mod_python does 
now, so there's really no need to bother re-inventing the wheel :-)

PS - Grisha, nice job implementing the Session classes.  I couldn't have 
done it better myself, and the code is a nice example of metaclasses and 
subclassing native types that's not well covered in the Python 2.2 
documentation.  (I had to read the PEPs to understand what was going on, 
but it was a rewarding process.)

--Michael

From cs1spw at bath.ac.uk  Mon Nov 24 13:56:15 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC2625F.9090906@bath.ac.uk>

Michael C. Neel wrote:
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

One potential problem with checking the IP is that some people access 
the internet through a rotating proxy, meaning that subsequent requests 
might come from a different IP address (I've heard AOL does this). One 
way around this would be to check that at least the first two parts of 
the IP address stayed the same as only the last two would be likely to 
change if a rotating proxy was in use.

From dpopowich at mtrsd.k12.ma.us  Mon Nov 24 15:10:15 2003
From: dpopowich at mtrsd.k12.ma.us (Daniel J. Popowich)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC2625F.9090906@bath.ac.uk>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
	<3FC2625F.9090906@bath.ac.uk>
Message-ID: <16322.26023.955700.179682@gargle.gargle.HOWL>

Simon Willison writes:
> Michael C. Neel wrote:
> > ...now when we decode the cookie...
> > 
> > 1.  base64 decode it, and check our md5 sig
> > 2.  ungzip the string and parse it back to it's object/string form
> > 3.  make sure the IP, user-agent match the current request
> > 4.  make sure the timestamp is within our limit for a login
> 
> One potential problem with checking the IP is that some people access 
> the internet through a rotating proxy, meaning that subsequent requests 
> might come from a different IP address (I've heard AOL does this). One 
> way around this would be to check that at least the first two parts of 
> the IP address stayed the same as only the last two would be likely to 
> change if a rotating proxy was in use.

But the people most likely to steal your identity through packet
sniffing are the people on your own subnet; the teenage hacker down
the street looking for a thrill.  That hacker, being on the same
subnet, would have the same network address and thus match the first
few octects of the ip addr.

Dan

From jciccale at mac.com  Mon Nov 24 23:38:06 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <11947283.1069713486905.JavaMail.jciccale@mac.com>

Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.

- julcicc -
 
On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Which python version are you using?
>> 
>> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
>> 
>> Check it with
>> import sys
>> print sys.version
>> 
>
>Yep, they're the same:
>
>apache:
>[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
>
>vs.
>python -v
>
>Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
>[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
>
>(and there's only one 2.3.2 installed ).
>
>sys.path is identical for both as well ( except for the script's own directory, which is
>chrooted to htdocs by apache as expected.)
>
>Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
>
>python 2.3.2
>pyPgSQL 2.4
>mod_python 3.1.2b
>apache 2.0.48
>postgresql 7.4
>
>Keith
>
>> 
>> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
>> 
>> >
>> >Hi,
>> >
>> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>> >the session handling stuff.
>> >
>> >When I try to connect to my postgresql database in the following way:
>> >
>> >from pyPgSQL import PgSQL
>> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>> >
>> >
>> >Apache error_log says:
>> >
>> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>> >
>> >and indeed when I do a dir(pgSQL), it lists no connect function.
>> >When I do the same outside apache/mod_python I can see the connect function.
>> >
>> >Any thoughts?
>> >
>> >
>> >dir(PgSQL)
>> >running within mod_python:
>> >
>> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
>> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
>> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>> >
>> >dir(PgSQL)
>> >running outside mod_python:
>> >
>> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>> >'threadsafety', 'version', 'weakref']
>> >
>> >
>> >httpd.conf:
>> >
>> >LoadModule python_module /var/www2/modules/mod_python.so
>> ><Directory /var/www2/htdocs/billing>  
>> >SetHandler python-program
>> >PythonHandler mod_python.publisher
>> ></Directory>
>> >
>> >
>> >_______________________________________________
>> >Mod_python mailing list
>> >Mod_python@modpython.org
>> >http://mailman.modpython.org/mailman/listinfo/mod_python
>> >
>> >
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>> 
>
>
>
>
From randallk at cpsc.ucalgary.ca  Mon Nov 24 16:53:31 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <11947283.1069713486905.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311241651070.30459-100000@csl>


Yep, new apache was running as different user, without linker path with libpq.  ;P
Thanks a lot.
Keith



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.
> 
> - julcicc -
>  
> On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >
> >
> >On Mon, 24 Nov 2003, Julian Ciccale wrote:
> >
> >> Which python version are you using?
> >> 
> >> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> >> 
> >> Check it with
> >> import sys
> >> print sys.version
> >> 
> >
> >Yep, they're the same:
> >
> >apache:
> >[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
> >
> >vs.
> >python -v
> >
> >Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
> >[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
> >
> >(and there's only one 2.3.2 installed ).
> >
> >sys.path is identical for both as well ( except for the script's own directory, which is
> >chrooted to htdocs by apache as expected.)
> >
> >Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
> >
> >python 2.3.2
> >pyPgSQL 2.4
> >mod_python 3.1.2b
> >apache 2.0.48
> >postgresql 7.4
> >

From gwidion at mpc.com.br  Tue Nov 25 00:32:40 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <200311250032.40790.gwidion@mpc.com.br>

On Monday 24 November 2003 16:55, Michael C. Neel wrote:

> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login
>
> Now even if someone gets a copy of the cookie, if they don't know
> the MD5 key they can't alter it.  Most likely their ip and or
> user-agent won't match either, but if it does the odds are the
> timeout may have been reached already, esp if it's kept low like 5
> or 10 minutes.
>
> Mike


Wow...I got it all right without asking.
>From everything you wrote, the only thing I did not do was: encode the 
user agent string - I just used the client IP.
And I did not use GZIP because the MD5 hash has got a fixed length.

Oh..no..let's see...it is a bit different, what I had done:
1) pick up login time, client IP, server side Key, random session ID 
strings and save them server side
2) generate a MD5 hash from the above and use it as a cookie.
3) at each page load, pick the cookie, and compare it with one 
regenerated from strings saved on the server side, (and client IP). 
If there is no time out, and the hashed strings matched, serve the 
page.


Again, I am not  using mod_python's sessions because I am restricted 
to mod_python 2.7.x for this project.

Regards,

	JS
	-><-




From dwmp at opti.cgi.net  Mon Nov 24 22:53:46 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] PSP imports
Message-ID: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>


It appears as though the PSP module doesn't check dependencies for 
modification times.  If I create a module and reference it from a PSP page 
and make a request for the page, then I change the module and make a second 
request the module is not reloaded.  Has this been overlooked or is this a 
'feature'?

Also, it appears as though the PSP module prefers to store its cached 
compiled code in a DBM file instead of memory.  Why bother with a DBM 
file?  So long as each Apache process is setup to handle a sufficiently 
large number of requests before killing itself then wouldn't a memory only 
solution be faster, especially in the worker process model?  It seems a 
little strange that DBM is preferred over memory storage.

-Dan


From grisha at modpython.org  Tue Nov 25 00:22:54 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <20031125001750.R36241@onyx.ispol.com>


On Mon, 24 Nov 2003, Dan W. wrote:

> It appears as though the PSP module doesn't check dependencies for
> modification times.  If I create a module and reference it from a PSP
> page and make a request for the page, then I change the module and make
> a second request the module is not reloaded.  Has this been overlooked
> or is this a 'feature'?

it's a feature of Python (not mod_python) ;-)

if you want the module properly reloaded when it changes, import it like
this:

mymodule = apache.import_module('mymodule')

> Also, it appears as though the PSP module prefers to store its cached
> compiled code in a DBM file instead of memory.

Not unless you tell it so. By default it's memory.

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html

HTH,

Grisha
From dwmp at opti.cgi.net  Mon Nov 24 23:43:01 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>

At 12:22 AM 11/25/2003 -0500, you wrote:

>On Mon, 24 Nov 2003, Dan W. wrote:
>
> > It appears as though the PSP module doesn't check dependencies for
> > modification times.  If I create a module and reference it from a PSP
> > page and make a request for the page, then I change the module and make
> > a second request the module is not reloaded.  Has this been overlooked
> > or is this a 'feature'?
>
>it's a feature of Python (not mod_python) ;-)
>
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

Ahhh, Ok.  I guess that means I can't use the form:

from mypackage.mymodule import *


I have not yet familiarized myself with the source enough to say, but it 
would be nice to have a command which when supplied at the beginning of a 
PSP file would tell it to autoreimport.  Maybe something like:

<%
psp.autoreimport(true)
%>
<html>
...

I've played around with replacing the builtin _import with a home grown 
import function to do just this in a different project.  Perhaps it could 
be done here too.  Perhaps after I become more familiar with the source 
I'll be able to help out to that end.



> > Also, it appears as though the PSP module prefers to store its cached
> > compiled code in a DBM file instead of memory.
>
>Not unless you tell it so. By default it's memory.
>
>http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html


Sorry, I must have read the source wrong.  I'll have to take another look.

-Dan

From dwmp at opti.cgi.net  Tue Nov 25 00:36:03 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2EE6F.8080601@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>

At 09:53 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>Ahhh, Ok.  I guess that means I can't use the form:
>>from mypackage.mymodule import *
>
>It's a good idea to avoid that type of namespace pollution anyway, as it 
>can often lead to conflicts.  It also detracts from code readability 
>(avoiding the dreaded "where did that name come from again?" question when 
>doing code reviews is a good thing, IMHO).
>
>--Michael

That's a good point Michael.  That was probably a bad habit to pick 
up.  However, I think a overloaded import could still be 
useful.  Overloading the builtin import would allow a PSP file to control 
autoreloading for its entire dependency tree (modules which call other 
modules, etc.).  This would allow one to easily turn autoreloading on 
during development and to easily turn it off for production deployment.

I'm still cutting my teeth on the mod_python code base, but figured I'd 
throw that idea out there in the mean time.

-Dan

From michael at dynamine.net  Mon Nov 24 22:43:43 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <3FC2FA1F.20905@dynamine.net>

Dan W. wrote:

> That's a good point Michael.  That was probably a bad habit to pick up.  
> However, I think a overloaded import could still be useful.  Overloading 
> the builtin import would allow a PSP file to control autoreloading for 
> its entire dependency tree (modules which call other modules, etc.).  
> This would allow one to easily turn autoreloading on during development 
> and to easily turn it off for production deployment.

Consider that you might want not to use PSP.  I've actually found that 
it gets in the way of the separation of code and content, which is 
important when the designer and the coder are two different people.

I design my mod_python apps like so:

template = """
<html>
...
<!-- have the designers place %(variable)s where necessary
      in the template for doing performing substitution
      during the processing phase -->
</html>
"""

def handler(req):
   # Reload modules here if necessary
   # Code goes here
   # If you want to override the template, you can fetch it from the file
   # system
   req.write(template % vars())

Of course, if you're already married to the PSP solution, then there you 
have it...

--Michael

From dwmp at opti.cgi.net  Tue Nov 25 01:04:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125005652.010c6008@mail.pyxos.com>

At 10:43 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>That's a good point Michael.  That was probably a bad habit to pick up.
>>However, I think a overloaded import could still be useful.  Overloading 
>>the builtin import would allow a PSP file to control autoreloading for 
>>its entire dependency tree (modules which call other modules, etc.).
>>This would allow one to easily turn autoreloading on during development 
>>and to easily turn it off for production deployment.
>
>Consider that you might want not to use PSP.  I've actually found that it 
>gets in the way of the separation of code and content, which is important 
>when the designer and the coder are two different people.
>
>I design my mod_python apps like so:
>
>template = """
>...
>"""
>
>def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
>Of course, if you're already married to the PSP solution, then there you
>have it...


Thanks for the advice.  I'm not married to anything yet.  I'm moving from 
an in-house Python based application server to mod_python and PSP just 
seemed like the a natural move.  My plan was to build most of the dynamic 
code in python modules and then simply insert html into the templates with 
PSP expression syntax.  I can see where writing my own handler for these 
things would have advantages, but on the other hand I don't want to 
reinvent the wheel.  I'll play with that a bit.

-Dan

From neel at mediapulse.com  Tue Nov 25 10:50:58 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>

> And I did not use GZIP because the MD5 hash has got a fixed length.
> 
Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
a secret string and the data.  Here is the methods from albatross:

    def sign(self, text):
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        text = m.digest() + text
        return text

    def unsign(self, text):
        digest = text[:16]
        text = text[16:]
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        if m.digest() == digest:
            return text
        return ''

You can of course store the text server side and just pass the client
the MD5 hash/key, you just have to have a way to clear out old session
files and also make sure you have enough disk space for the amount of
sessions you expect.

Mike

From tropezien at croxx.de  Tue Nov 25 16:14:01 2003
From: tropezien at croxx.de (tropezien@croxx.de)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <27667116$10697725673fc36f17e5bce0.87890966@config18.schlund.de>


"Gregory (Grisha) Trubetskoy" <grisha@modpython.org> schrieb am
24.11.2003, 02:12:42:
> 
> 
> On Sun, 23 Nov 2003, Tropezien wrote:
> 
> > Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> > 3.1.2b. Some further investigations cleared up that mod_python tries to
> > get more than 400 semaphores during launch of httpd.
> 
> Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
> semaphores, which is 32. What does your log say when you start httpd?
> 
Yes, you are right. The previously installed mod_python-3.1.0a made was
the culprit for my mentioned change in sysctl.conf. I have reset the
maximum amount of semaphores to the original value and mod_python starts
as well as before.

Ciao, Georg
From jciccale at mac.com  Wed Nov 26 01:33:10 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] 
	Request object attribute "content_type" does not support UNICODE
	STRINGS
Message-ID: <12054078.1069806790832.JavaMail.jciccale@mac.com>

When I try to set content_type to a unicode string, it gives a TypeError saying that content_type can only be string. I don't know if this is correct. Although content types will not use any hich codes, in my case the content-type value I read it from an XML file that IS in Unicode, therefore I must convert it using str() which I dont like cause if I get anything there that is not really string (Unicode or Normal) python will anyway convert it.
Is this behaviour expected?
From grisha at modpython.org  Tue Nov 25 21:45:35 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<3FC2FA1F.20905@dynamine.net>
Message-ID: <20031125213815.V52007@onyx.ispol.com>


One of the ways to use PSP, which probably isn't immediately obvious from
the documentation, is as a templating system, e.g. configuring mod_python
to use the publisher handler, then have something like:

def hello(req):

    vars = {"menu": build_menu(),
            "blah": enormously_complex_function(),
            "body": psp.PSP(req, 'templates/body_tmpl.html')}

    return psp.PSP(req, 'templates/main_frame.html', vars=vars)


In this example 'body_tmpl.html' and 'main_fram.html' are PSP.

I've had pretty good luck with this approach precisely because it seems to
have a clear separation of logic and presentation.

Grisha


On Mon, 24 Nov 2003, Michael S. Fischer wrote:

> Dan W. wrote:
>
> > That's a good point Michael.  That was probably a bad habit to pick up.
> > However, I think a overloaded import could still be useful.  Overloading
> > the builtin import would allow a PSP file to control autoreloading for
> > its entire dependency tree (modules which call other modules, etc.).
> > This would allow one to easily turn autoreloading on during development
> > and to easily turn it off for production deployment.
>
> Consider that you might want not to use PSP.  I've actually found that
> it gets in the way of the separation of code and content, which is
> important when the designer and the coder are two different people.
>
> I design my mod_python apps like so:
>
> template = """
> <html>
> ...
> <!-- have the designers place %(variable)s where necessary
>       in the template for doing performing substitution
>       during the processing phase -->
> </html>
> """
>
> def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
> Of course, if you're already married to the PSP solution, then there you
> have it...
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:53:28 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
Message-ID: <20031125214631.Q52007@onyx.ispol.com>


BTW, the python standard library now includes an hmac module:

http://www.python.org/doc/current/lib/module-hmac.html

Which is functionally similar to using md5 directly, only in a
well-researched and standardized way.

Grisha

On Tue, 25 Nov 2003, Michael C. Neel wrote:

> > And I did not use GZIP because the MD5 hash has got a fixed length.
> >
> Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
> a secret string and the data.  Here is the methods from albatross:
>
>     def sign(self, text):
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         text = m.digest() + text
>         return text
>
>     def unsign(self, text):
>         digest = text[:16]
>         text = text[16:]
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         if m.digest() == digest:
>             return text
>         return ''
>
> You can of course store the text server side and just pass the client
> the MD5 hash/key, you just have to have a way to clear out old session
> files and also make sure you have enough disk space for the amount of
> sessions you expect.
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:56:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <12054078.1069806790832.JavaMail.jciccale@mac.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
Message-ID: <20031125215458.B52007@onyx.ispol.com>


Interesting question. I don't know the answer. Is content-type really
supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
I may be wrong). If anyone knows and has RFC references, etc - please
pitch in.

Grisha

On Wed, 26 Nov 2003, Julian Ciccale wrote:

> When I try to set content_type to a unicode string, it gives a TypeError
> saying that content_type can only be string. I don't know if this is
> correct. Although content types will not use any hich codes, in my case
> the content-type value I read it from an XML file that IS in Unicode,
> therefore I must convert it using str() which I dont like cause if I get
> anything there that is not really string (Unicode or Normal) python will
> anyway convert it. Is this behaviour expected?
> _______________________________________________ Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From martin_ostr at hotmail.com  Wed Nov 26 00:12:27 2003
From: martin_ostr at hotmail.com (martin ostrovsky)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Maintaining db connections
Message-ID: <BAY7-F43goLMJop8PgM00010b1f@hotmail.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/8054341d/attachment-0002.htm
From manfred.stienstra at dwerg.net  Wed Nov 26 08:30:52 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031125215458.B52007@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <20031125215458.B52007@onyx.ispol.com>
Message-ID: <1069831852.4684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> Interesting question. I don't know the answer. Is content-type really
> supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> I may be wrong). If anyone knows and has RFC references, etc - please
> pitch in.

Rfc 1945 (http 1.0) states:

       	HTTP-header    = field-name ":" [ field-value ] CRLF

       	field-name     = token
       	field-value    = *( field-content | LWS )

       	field-content  = <the OCTETs making up the field-value
                        and consisting of either *TEXT or combinations
                        of token, tspecials, and quoted-string>

       	TEXT           = <any OCTET except CTLs,
                        but including LWS>
	OCTET          = <any 8-bit sequence of data>
       	CHAR           = <any US-ASCII character (octets 0 - 127)>

       	Content-Type   = "Content-Type" ":" media-type
	
	media-type     = type "/" subtype *( ";" parameter )
       	type           = token
       	subtype        = token

       	parameter      = attribute "=" value
       	attribute      = token
       	value          = token | quoted-string
	
	token          = 1*<any CHAR except CTLs or tspecials>

       	tspecials      = "(" | ")" | "<" | ">" | "@"
                      | "," | ";" | ":" | "\" | <">
                      | "/" | "[" | "]" | "?" | "="
                      | "{" | "}" | SP | HT
	
This means only us-ascii in the media-type, but any character in the field-content
in general. For more information:

http://www.faqs.org/rfcs/rfc1945.html
http://www.faqs.org/rfcs/rfc2616.html

Manfred

From vmanera at manord.com  Wed Nov 26 14:58:00 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] 
	Problem with Session module with multiple scriptalias not under t
	he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>

First of all my configuration<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

 

>From httpd.conf:

.....

    DocumentRoot "E:/wwwroot/cartelle_sito_mdn"

....

    ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"

    ScriptAlias /produzione/ "E:/script/cgi/produzione/"

    ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

.........

    <Directory "E:/script/cgi/cgi-mpy">

...

                AddHandler python-program .py

                PythonHandler mod_python.publisher

            PythonPath ....

                PythonDebug on

                  #PythonOption ApplicationPath /cgi-mpy

               PythonOption SessionDbm
'E:/wwwroot/dati_autenticazione/sid/session.dbm'

   </Directory>

 

if I miss PythonOption ApplicationPath ... in any directory:

 

    def make_cookie(self):

            ....

        if config.has_key("ApplicationPath"):

            c.path = config["ApplicationPath"]

        else:

            docroot = self._req.document_root()

            # the path where *Handler directive was specified

            dirpath = self._req.hlist.directory 

            c.path = dirpath[len(docroot):]

 

so the req.headers_out generate this html heading for cgi-mpy scriptalias:

{'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
'Cache-Control': 'nocache="set-cookie"'}

 

where path=  because len(document root) :28 len (dirpath) 21

 

and in this way all work fine for all my scriptalias except for

 ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

In this case len(dirpath) = 30 so path='/\'

And I make the first connection under this path any attempt to call url
under other scriptalias cause a new session because the hader miss the key
'Set-Cookie'....

 

So I tryed to use:

PythonOption ApplicationPath /cgi-mpy

PythonOption ApplicationPath /organizzazione

....

If my first connection is under cgi-mpy all work fine for all the url under
cgi-mpy, but any attempt to connect to un url under a different scriptalias
cause a new session

 

So I may choose to change orgenizzazione in organiz, or to modify the
session module: c.path=''

Any other suggestion?

 

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/83e74c70/attachment-0002.htm
From grisha at modpython.org  Wed Nov 26 15:55:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <1069831852.4684.11.camel@ack.dwerg.net>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	<1069831852.4684.11.camel@ack.dwerg.net>
Message-ID: <20031126155347.B64106@onyx.ispol.com>


So there is no problem with mod_python?

On Wed, 26 Nov 2003, Manfred Stienstra wrote:

> On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> > Interesting question. I don't know the answer. Is content-type really
> > supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> > I may be wrong). If anyone knows and has RFC references, etc - please
> > pitch in.
>
> Rfc 1945 (http 1.0) states:
>
>        	HTTP-header    = field-name ":" [ field-value ] CRLF
>
>        	field-name     = token
>        	field-value    = *( field-content | LWS )
>
>        	field-content  = <the OCTETs making up the field-value
>                         and consisting of either *TEXT or combinations
>                         of token, tspecials, and quoted-string>
>
>        	TEXT           = <any OCTET except CTLs,
>                         but including LWS>
> 	OCTET          = <any 8-bit sequence of data>
>        	CHAR           = <any US-ASCII character (octets 0 - 127)>
>
>        	Content-Type   = "Content-Type" ":" media-type
>
> 	media-type     = type "/" subtype *( ";" parameter )
>        	type           = token
>        	subtype        = token
>
>        	parameter      = attribute "=" value
>        	attribute      = token
>        	value          = token | quoted-string
>
> 	token          = 1*<any CHAR except CTLs or tspecials>
>
>        	tspecials      = "(" | ")" | "<" | ">" | "@"
>                       | "," | ";" | ":" | "\" | <">
>                       | "/" | "[" | "]" | "?" | "="
>                       | "{" | "}" | SP | HT
>
> This means only us-ascii in the media-type, but any character in the field-content
> in general. For more information:
>
> http://www.faqs.org/rfcs/rfc1945.html
> http://www.faqs.org/rfcs/rfc2616.html
>
> Manfred
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Wed Nov 26 16:03:21 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python]  Problem with Session module with multiple
	scriptalias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
Message-ID: <20031126155923.X64106@onyx.ispol.com>


You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url under
> cgi-mpy, but any attempt to connect to un url under a different scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From manfred.stienstra at dwerg.net  Wed Nov 26 22:19:08 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031126155347.B64106@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <1069831852.4684.11.camel@ack.dwerg.net>
	 <20031126155347.B64106@onyx.ispol.com>
Message-ID: <1069881547.5684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 21:55, Gregory (Grisha) Trubetskoy wrote:
> So there is no problem with mod_python?

Setting content_type to a unicode string should not be possible. I don't
know how the other headers are implemented, but some of them are allowed
to contain strings other than us-ascii (but never above 8 bits). The
constraint in HTTP is that headers should never contain multibyte
characters (or should never have to be interpreted as being a multibyte
character), the strings have to contain 8 bit characters.

The problem with python is that a unicode object can contain characters
coming from any encoding, and can be converted to any other encoding.
This means that a unicode object with data coming from us-ascii could be
used in headers by silently encoding them to us-ascii, but this is not
recommended because it would cause a lot of confusion. Programmers
should encode unicode objects to us-ascii strings before using them as
header values.

In short: there is no problem.

Manfred

From gdamjan at mail.net.mk  Thu Nov 27 06:43:40 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 22:00:34 2004
Subject: [mod_python] Mod_python disables mod_dav
Message-ID: <20031127054340.GA3835@legolas.on.net.mk>

I'm using Apache 2.0.48 (it happened to 2.0.47 too) with the built-in
mod_dav module and mod_python 3.1.2b/Python-2.3.2 and PHP/4.3.4.

I can't understand why but unless I disable mod_python (by commenting
the LoadModule directive), DAV will not work. It just returns a "405
Method is not allowed" error. 

I've tried different DAV setups and clients, and nothing - unless I
disable mod_python it wont work...

Now I think that with older versions of mod_python this did not happen -
but I'm not sure. I'll have to recheck that.

Does anyone know why this could happen?!?



-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From vmanera at manord.com  Fri Nov 28 18:08:11 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:00:35 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>

I'm sorry but still don't work.
I'm removed all references to cgi and I moved all my directory with .py
under document root:

DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
<Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">

and with this new configuration req.headers_out:
{'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
and if I relod the page it never passed to req.headers_in

if I modify se session module:
def make_cookie(self):
	....
      c.path = ''   #dirpath[len(docroot):]
then req.headers_out become:
{'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
'Cache-Control': 'no-cache="set-cookie"'} 
and If I relod the page it go to req.headers_in:
{'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
'Keep-Alive', ...} 
and req.heades_out : {}

so why if something else then '' is in path the pysid wasn't writing into
the html heading? 

Villiam 


-----Messaggio originale-----
Da: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Inviato: mercoled? 26 novembre 2003 22.03
A: Manera, Villiam
Cc: mod_python@modpython.org
Oggetto: Re: [mod_python] Problem with Session module with multiple
scriptalias not under t he document root



You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url
under
> cgi-mpy, but any attempt to connect to un url under a different
scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>

From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:35 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <20031128120645.Q92149@onyx.ispol.com>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy
From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:35 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <12755437.1070056018285.JavaMail.Server@genix>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy

---------------------------------------------------------------------
To unsubscribe, e-mail: announce-unsubscribe@httpd.apache.org
For additional commands, e-mail: announce-help@httpd.apache.org



From flxkid at techemail.com  Fri Nov 28 14:16:02 2003
From: flxkid at techemail.com (Oliver Nelson)
Date: Fri Jan  9 22:00:35 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
Message-ID: <20031128221603.3E2473954@sitemail.everyone.net>

I'd like to have mod_python respond to every request that is below a certain "directory".

IOW I might do a GET on:
localhost/mysys/test/my.gif
localhost/mysys/yada/ibm.com

and a python handler would be called for both of these situations.  In fact, I'd like the handler (or handlers) to be called for all verbs (GET, PUT, POST, DELETE).  But URI's that aren't below /mysys wouldn't call the handler.

Also note /mysys/test/my.gif doesn't exist, it should be retrieve and returned on the fly by Python.

Is this possible with mod_python?

OLIVER

From neilb at nbt.co.za  Sat Nov 29 16:54:19 2003
From: neilb at nbt.co.za (Neil Beattie)
Date: Fri Jan  9 22:00:35 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>
Message-ID: <3FC8CF3B.10252.1EC6C05A@localhost>

> I'm sorry but still don't work.
> I'm removed all references to cgi and I moved all my directory with .py
> under document root:
> 
> DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
> <Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">
> 
> and with this new configuration req.headers_out:
> {'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
> path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
> and if I relod the page it never passed to req.headers_in


Looks like the path is not correct (extra \)
try adding the following line to your httpd.config  addHandler entry:

PythonOption ApplicationPath /script/cgi/cgi-mpy


I have just had the same problem but have not yet discovered where the extra \ 
comes from ( it is in _req.hlist.directory in session.py)




> 
> if I modify se session module:
> def make_cookie(self):
> 	....
>       c.path = ''   #dirpath[len(docroot):]
> then req.headers_out become:
> {'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
> 'Cache-Control': 'no-cache="set-cookie"'} 
> and If I relod the page it go to req.headers_in:
> {'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
> 'Keep-Alive', ...} 
> and req.heades_out : {}
> 
> so why if something else then '' is in path the pysid wasn't writing into
> the html heading? 
> 

Neil Beattie
NB Technology (Pty) Ltd

From dwmp at opti.cgi.net  Sun Nov 30 19:52:57 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:00:35 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>


At 12:22 AM 11/25/2003 -0500, you wrote:
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

I've attempted this on a PSP page with a packaged module and am not getting 
the module in the global namespace.

<%
apache.import_module('mypackage.mymodule')
%>
<html>
<body>
<%=`globals()`%>
</body>
</html>

I don't get any errors, just a silent failure (mypackage is not in 
globals).  mypackage is in the lib/python/site-packages folder and it works 
properly if I use the standard python import.

Any ideas?

-Dan

From grisha at modpython.org  Sun Nov 30 22:24:48 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:00:35 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <20031130222323.M31554@onyx.ispol.com>



On Sun, 30 Nov 2003, Dan W. wrote:

> I've attempted this on a PSP page with a packaged module and am not getting
> the module in the global namespace.
>
> <%
> apache.import_module('mypackage.mymodule')

<%
mymodule = apache.import_module('mypackage.mymodule')


Grisha
From dwmp at opti.cgi.net  Sun Nov 30 21:56:45 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:00:35 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031130222323.M31554@onyx.ispol.com>
References: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130214706.035aedc8@mail.pyxos.com>

At 10:24 PM 11/30/2003 -0500, you wrote:


>On Sun, 30 Nov 2003, Dan W. wrote:
>
> > I've attempted this on a PSP page with a packaged module and am not getting
> > the module in the global namespace.
> >
> > <%
> > apache.import_module('mypackage.mymodule')
>
><%
>mymodule = apache.import_module('mypackage.mymodule')


Thanks Grisha.  I was expecting it to work like the builtin import.

-Dan

From mod_python at mikebell.org  Sun Nov 30 22:37:48 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:00:35 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
In-Reply-To: <20031128221603.3E2473954@sitemail.everyone.net>
References: <20031128221603.3E2473954@sitemail.everyone.net>
Message-ID: <20031201063747.GC13820@mikebell.org>

On Fri, Nov 28, 2003 at 02:16:02PM -0800, Oliver Nelson wrote:
> Is this possible with mod_python?

Possible and easy.

<Location /foo>
  SetHandler python-program
  PythonHandler bar
</Location>
From bert at tela.com  Sat Nov  1 09:00:59 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 22:04:19 2004
Subject: [mod_python] ImportError
Message-ID: <000201c3a092$68dbcad0$0301a8c0@janine>

Hello-

I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
run the "hello.py/say"
example and the following message appears in apache's 'error_log':

....

File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
import_module
   f, p, d = imp.find_module(parts[i],path)
[Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
mod_python.publisher: ImportError: No module named index


Currently I'm trying

Apache 2.047
Python 2.3.2
mod_python 3.1.2b

but I've gotten same result with combintaions of mod_python 3.0.3, python
2.2.

"hello.py" runs just fine with out-of-redhat box apache/mod_python, and
there's no apparent module named "index" there.

Bert Hughes


From grisha at modpython.org  Sat Nov  1 14:41:44 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ImportError
In-Reply-To: <000201c3a092$68dbcad0$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
Message-ID: <20031101144111.L33051@onyx.ispol.com>


What is the URL you are accessing, what is the relevant Apache config, and
what's in hello.py?

Grisha

On Sat, 1 Nov 2003, Bert Hughes wrote:

> Hello-
>
> I've been attempting to upgrade my Apache/mod_python setup w/o success.  I
> run the "hello.py/say"
> example and the following message appears in apache's 'error_log':
>
> ....
>
> File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493, in
> import_module
>    f, p, d = imp.find_module(parts[i],path)
> [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> mod_python.publisher: ImportError: No module named index
>
>
> Currently I'm trying
>
> Apache 2.047
> Python 2.3.2
> mod_python 3.1.2b
>
> but I've gotten same result with combintaions of mod_python 3.0.3, python
> 2.2.
>
> "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> there's no apparent module named "index" there.
>
> Bert Hughes
>
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Sat Nov  1 20:41:55 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
Message-ID: <3FA40C83.5050502@krap.dk>

Hi.

I am toying around with mod_python on a gentoo-linux system. Prior I 
used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the 
beta from source.

This is what I wish :
Every request is handled by the same python-handler for the virtual 
domain. I am currently playing around and creating my own handler in the 
process.
It has worked before, with the following relevant parts of my httpd.conf 
(be aware, internal test server so a lot off things are just made 
simple, not secure/right):

NameVirtualHost *
<Directory "/www/tweetie">
        SetHandler python-program
        PythonHandler site
        PythonAuthenHandler site
        PythonDebug On
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        Allow from all
        AuthType Basic
        AuthName "Restricted Area"
        require valid-user
</Directory>
<VirtualHost *>
        ServerName tweetie
        DocumentRoot /www/tweetie
</VirtualHost>

But now, when I browse to "http://tweetie/" i get a directory listning 
instead of the python script... If I write anything after the trailing 
slash, everything works fine.

Can you tell me, what I did wrong and how to fix it ?

Tia

Svenne Krap

From bert at tela.com  Sat Nov  1 15:24:23 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com>
Message-ID: <003301c3a0be$cad54230$0301a8c0@janine>



Apache2 conf is:

LoadModule python_module modules/mod_python.so

<Directory /usr/local/apache2/htdocs/python>

SetHandler python-program

PythonHandler mod_python.publisher

</Directory>



hello.py is

>>>

def say(what="Nothing"):
    return "I am saying %s" % what

if __name__ == '__main__':
    print say('At the commandline!')

>>>>>



and it is in /usr/local/apache2/htdocs/python.

So the url is"     http:/192.168.1.1/python/hello.py/say

Thanks

Bert

----- Original Message ----- 
From: "Gregory (Grisha) Trubetskoy" <grisha@modpython.org>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Saturday, November 01, 2003 1:41 PM
Subject: Re: [mod_python] ImportError


>
> What is the URL you are accessing, what is the relevant Apache config, and
> what's in hello.py?
>
> Grisha
>
> On Sat, 1 Nov 2003, Bert Hughes wrote:
>
> > Hello-
> >
> > I've been attempting to upgrade my Apache/mod_python setup w/o success.
I
> > run the "hello.py/say"
> > example and the following message appears in apache's 'error_log':
> >
> > ....
> >
> > File "/usr/lib/python2.3/site-packages/mod_python/apache.py", line 493,
in
> > import_module
> >    f, p, d = imp.find_module(parts[i],path)
> > [Fri Oct 32 ...] [error] [client 192.168.1.3] PythonHandler
> > mod_python.publisher: ImportError: No module named index
> >
> >
> > Currently I'm trying
> >
> > Apache 2.047
> > Python 2.3.2
> > mod_python 3.1.2b
> >
> > but I've gotten same result with combintaions of mod_python 3.0.3,
python
> > 2.2.
> >
> > "hello.py" runs just fine with out-of-redhat box apache/mod_python, and
> > there's no apparent module named "index" there.
> >
> > Bert Hughes
> >
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
>


From stian at soiland.no  Sun Nov  2 17:24:17 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] Re: ImportError
In-Reply-To: <003301c3a0be$cad54230$0301a8c0@janine>
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
Message-ID: <20031102162417.GB32650@itea.ntnu.no>

On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From bert at tela.com  Sun Nov  2 10:50:54 2003
From: bert at tela.com (Bert Hughes)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] Re: ImportError
References: <000201c3a092$68dbcad0$0301a8c0@janine>
	<20031101144111.L33051@onyx.ispol.com> <003301c3a0be$cad54230$0301a8c0@janine>
	<20031102162417.GB32650@itea.ntnu.no>
Message-ID: <000701c3a161$7bfe5130$0301a8c0@janine>

This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes


----- Original Message ----- 
From: "Stian S?iland" <stian@soiland.no>
To: "Bert Hughes" <bert@tela.com>
Cc: <mod_python@modpython.org>
Sent: Sunday, November 02, 2003 10:24 AM
Subject: Re: ImportError


On 2003-11-01 22:24:23, Bert Hughes wrote:

> So the url is"     http:/192.168.1.1/python/hello.py/say

Try  http:/192.168.1.1/python/hello/say


(I think this is because you've used SetHandler and not AddHandler .py.
The good thing? Nicer urls!)

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]



From mike at mikesclutter.com  Sun Nov  2 16:18:44 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <200311021618.45341.mike@mikesclutter.com>

All,

I have been using mod_python for over two years now, and since I first 
started, I've been adding little utility libraries here and there. I now have 
one (more or less) integrated library that supports several different things:

- PHP Style embedded python in HTML, with page caching.
    Documents with embedded python can be parsed, compiled, and cached in 
    memory that is limited by a global administrative setting on how much 
    cache mem to use. Pages are swapped out based on use. Your basic .psp 
    page looks something like this:

    #include some_header.psp
    <html><body>
    <?
    x = 1
    print "There's no language like Python"
    ?>
    <p>Shorthand printing of a variable/expression
    x=<?$x?>
    </body>
    </html>

- Shared database connections. There is a simple class which wraps the DBA API 
  connection objects for MySQL, PostgreSQL, and SAPDB. It just adds enough 
  code to transparently recover from a connection timeout.

- Session management. This includes support for
  - automatically generating session_ids for clients.
  - Authentication from a database (assigning a user_id to a session_id) and 
    maintaining it in a sessions table.
  - storing state to a database (mysql/postgresql) or to browser. State is 
    stored using a modified pickle algorithm (as pickle at the time was 
    insecure). You can basically serialize all python primitives and 
    containers (dicts, lists), and can include custom classes if you derive 
    from a simple base class.
  - Simple access/manipulation of queries, POST headers, and cookies:
    Automatically parse, read, and generate all of the above. Set/unset 
    cookies. Cookies are automatically set using the virtual host domain --- 
    you don't have to worry about which domain or vhost you are working in. 
    Pickle data stuctures into cookies using base64. Query generation from 
    dict and urlencoding.
  - Util functions: Setting page expiry's, getting client info, generating 
    urls.

- Global and per virtual host configuration/resource pools. For each 
  virtual host, the core PSP handler will look for a module by that server 
  name in the Python path and import it into a virtual host namespace (if it 
  has not already been imported). This serves as a common resource pool for 
  that virtual host. When each page is processed, this pool is imported into 
  the global namespace in a dict call resource. The global resource pool is 
  first loaded on startup and vhost resources are added to it.

- HTML library. This includes support for
  - Form/widget generation. Basic HTML widgets can be created using simple 
    functions. Similar to Perl's cgi module. Generate listboxs from SQL.

- Support for OLTP gateways. There are two currently supported: SecurePay and 
  Authorize.net. This works on top of m2crypto.

There are other little bells and whistles here and there that I am sure I 
forgot about. Anyway, it has started to get too big for me to maintain on my 
own and I figure perhaps it can be helpful to others. It would be nice to 
have other good Python/mod_python programmers with more experience than me 
hacking on it.

The project is located at gila.sourceforge.net. Currently, I only have the 
code in CVS and a tarball on the home page (gila.sourceforge.net). I have 
very little documentation, but it's not hard to set up. The INSTALL should do 
it. If you have problems, email me.

Anyway, I hope some of you might find this useful.

Mike

From neel at mediapulse.com  Mon Nov  3 11:31:25 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>

Wow, this is pretty cool - I see requests for items like these a lot on
this list so it should be helpful to quite a few.  I have one question
though...

> - Shared database connections. There is a simple class which 
> wraps the DBA API 
>   connection objects for MySQL, PostgreSQL, and SAPDB. It 
> just adds enough 
>   code to transparently recover from a connection timeout.
> 

Does this work for 3.x and apache using a threaded mpm like worker?
I've had trouble getting MySQLdb to share connections/cursors from a
pool in the past since the thread level of the API is 1 (no threaded
cursors).  I had planned to work on this in the coming weeks, but no
since re-inventing the wheel =)

Mike

From gdamjan at mail.net.mk  Mon Nov  3 22:33:58 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <20031103213358.GA32187@legolas.on.net.mk>

> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)

well, share the db connection and not the cursors.
IMHO creating a MySQL cursor is not performance heavy...


-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From svenne at krap.dk  Mon Nov  3 22:42:40 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <20031102155855.P47316@onyx.ispol.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
Message-ID: <3FA6CBD0.3020902@krap.dk>

Quite simple right now.
- one handler-function (just printing out varios req-object attributes, 
nothing fancy until I have solved my problem.)
- one authenhandler-function (containing only "return apache.OK")

Btw. another possible sligt change in behavior, earlier, when having the 
require-valid user set and return apache.OK immediately no popup for 
password noticed (as far memory servers). Now it pops up, but anything 
is accepted (which is expected, the popping up of the password-dialog is 
not expeced....)

Svenne

Gregory (Grisha) Trubetskoy wrote:

>what's in the python script?
>
>Grisha
>
>On Sat, 1 Nov 2003, Svenne Krap wrote:
>
>  
>
>>Hi.
>>
>>I am toying around with mod_python on a gentoo-linux system. Prior I
>>used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>beta from source.
>>
>>This is what I wish :
>>Every request is handled by the same python-handler for the virtual
>>domain. I am currently playing around and creating my own handler in the
>>process.
>>It has worked before, with the following relevant parts of my httpd.conf
>>(be aware, internal test server so a lot off things are just made
>>simple, not secure/right):
>>
>>NameVirtualHost *
>><Directory "/www/tweetie">
>>        SetHandler python-program
>>        PythonHandler site
>>        PythonAuthenHandler site
>>        PythonDebug On
>>        Options Indexes FollowSymLinks MultiViews
>>        AllowOverride All
>>        Order allow,deny
>>        Allow from all
>>        AuthType Basic
>>        AuthName "Restricted Area"
>>        require valid-user
>></Directory>
>><VirtualHost *>
>>        ServerName tweetie
>>        DocumentRoot /www/tweetie
>></VirtualHost>
>>
>>But now, when I browse to "http://tweetie/" i get a directory listning
>>instead of the python script... If I write anything after the trailing
>>slash, everything works fine.
>>
>>Can you tell me, what I did wrong and how to fix it ?
>>
>>Tia
>>
>>Svenne Krap
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>>    
>>
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031103/26a23c8d/attachment-0003.htm
From neel at mediapulse.com  Mon Nov  3 16:59:13 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
Message-ID: <C0FC22C08B82074A88B50061764157776B97BD@johnson.mediapulse.net>

> well, share the db connection and not the cursors.
> IMHO creating a MySQL cursor is not performance heavy...
> 
My bad, I typed too quickly: MySQLdb is one connection handle one cursor
at a time.  From the spec level 1 threadsaftey reads "Threads may share
the module, but not connections."

Mike

From mike at mikesclutter.com  Mon Nov  3 18:10:09 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7AB@johnson.mediapulse.net>
Message-ID: <200311031810.09219.mike@mikesclutter.com>

As long as you protect sessions within threads, there shouldn't be any 
problems. But the thread issues are really just passed on to the underlying 
database extension.

On Monday 03 November 2003 10:31 am, Michael C. Neel wrote:
> Wow, this is pretty cool - I see requests for items like these a lot on
> this list so it should be helpful to quite a few.  I have one question
> though...
>
> > - Shared database connections. There is a simple class which
> > wraps the DBA API
> >   connection objects for MySQL, PostgreSQL, and SAPDB. It
> > just adds enough
> >   code to transparently recover from a connection timeout.
>
> Does this work for 3.x and apache using a threaded mpm like worker?
> I've had trouble getting MySQLdb to share connections/cursors from a
> pool in the past since the thread level of the API is 1 (no threaded
> cursors).  I had planned to work on this in the coming weeks, but no
> since re-inventing the wheel =)
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From jpeterson at ainet.com  Mon Nov  3 20:25:41 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
Message-ID: <3FA72A45.3080602@ainet.com>

...
This is too funny!  I'm still puzzled tho - previous installation required,
or at least accepted  "/192.168.1.1/python/hello.py/say."

Anyway thanks very much. I was blind!

Bert Hughes
...

As a fellow struggling newbie, I can say that you were not blind.

Page 41, section 6.1.1 of the .pdf documentation illustrates a 
SetHandler and a URL that requires the .py extension.

I paste it below.  Sorry for the messed up formatting.

----------------------------------------------------
6.1.1 Introduction
To use the handler, you need the following lines in your configuration

<Directory /some/path}
     SetHandler python-program
     PythonHandler mod_python.publisher
</Directory>

This handler allows access to functions and variables within a module 
via URL?s. For example, if you have the following module, called ?hello.py?:

""" Publisher example """

     def say(req, what="NOTHING"):
     return "I am saying %s" % what

A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.

A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
saying hello?.
---------------------------------------------------

I would have hit exactly the same problem if I hadn't just seen your thread.

Jim


From jpeterson at ainet.com  Mon Nov  3 21:23:00 2003
From: jpeterson at ainet.com (Jim Peterson)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] html docs?
Message-ID: <3FA737B4.4020500@ainet.com>

Hi,

A pointer to html docs for mod_python?  I can find only the pdf version. 
  I like to make a local web page with docs.  html works better for me.

I'd be looking for the 3.0.3 production stuff particularly, as well as 
the 3.1.x stuff.

Thanks,

Jim


From grisha at modpython.org  Tue Nov  4 00:41:15 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] html docs?
In-Reply-To: <3FA737B4.4020500@ainet.com>
References: <3FA737B4.4020500@ainet.com>
Message-ID: <20031104003808.S67824@onyx.ispol.com>



On Mon, 3 Nov 2003, Jim Peterson wrote:

> Hi,
>
> A pointer to html docs for mod_python?  I can find only the pdf version.

The html version of the docs should be included in the tgz file under
doc-html, and are also available online:

http://www.modpython.org/live/current/doc-html/


> I'd be looking for the 3.0.3 production stuff particularly, as well as
> the 3.1.x stuff.

The 3.1.2b html was not available online, but now it is:

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/

(Both of these links are also available off http://www.modpython.org/)

HTH,

Grisha
From elvelind at amandarin.se  Tue Nov  4 12:40:34 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
Message-ID: <3FA79032.9080300@amandarin.se>

What I want is to let every site in my apache server to have a own place 
to place the site specific modules.  how do I tell apache/mod_python to 
add this to the searchpath for each site. note that one site should only 
have access to it's own module directory.

sorry for the bad enlish. tierd and swedish ;)

/elvelind

amandarin.se

From davidf at sjsoft.com  Tue Nov  4 14:11:02 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] setting pythonpath for each virtual directory.
In-Reply-To: <3FA79032.9080300@amandarin.se>
References: <3FA79032.9080300@amandarin.se>
Message-ID: <3FA79756.70007@sjsoft.com>

elvelind grandin wrote:

> What I want is to let every site in my apache server to have a own 
> place to place the site specific modules.  how do I tell 
> apache/mod_python to add this to the searchpath for each site. note 
> that one site should only have access to it's own module directory.
>
> sorry for the bad enlish. tierd and swedish ;)
>
> /elvelind
>
> amandarin.se

Hi Elvelind

The path of the directory is added by default to the search path.
Alternatively you can use the PythonPath option in an .htaccess file in 
each directory
(See the documentation about this)

David


From grisha at modpython.org  Tue Nov  4 16:55:46 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311021618.45341.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
Message-ID: <20031104165310.X74839@onyx.ispol.com>



On Sun, 2 Nov 2003, Michael Owens wrote:

> - Session management. This includes support for

Just curious - does it do anything to make sure that requests for the same
session are processed sequentially (i.e. never at the same time)?

Grisha
From mike at mikesclutter.com  Tue Nov  4 22:34:13 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104165310.X74839@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
Message-ID: <200311042234.13877.mike@mikesclutter.com>

That's a very interesting question, and frankly I've never given it a lot of 
thought. 

If you are asking whether or not the same UA could post multiple initial, 
simultaneous requests and get multiple session ID's, then the answer is yes, 
it could. My assumption, however, is that the initial request from a UA would 
be limited to a single request --- long enough for a SID to be generated and 
set in a cookie, before the it made further requests. Once the cookie is set, 
you are in the clear.

If you are referring to this occurance after the SID, the same still applies: 
if the UA makes two simulaneous request, then there is no attempt to order or 
line them up. They both are processed indepently, without knowlege of each 
other. You could probably do this pretty easily and quickly with sleepycat, 
assuming all your requests are handled by a single server. It might be even 
easier with a RDBMS but it may have a performace impact.

Right now, I get session data from mysql/pgsql and it has no discernable 
impact, but more times that not, its a simple select statement which most 
likely comes out of the db cache. I imagine ordering would require select for 
update (blocking), update, and delete. Now you are blocking and hitting disk 
--- quite a bit slower.

What are the advantages/applications where you would want to have this? I 
haven't run into a need for it yet --- maybe credit card processing?

On Tuesday 04 November 2003 03:55 pm, Gregory (Grisha) Trubetskoy wrote:
> On Sun, 2 Nov 2003, Michael Owens wrote:
> > - Session management. This includes support for
>
> Just curious - does it do anything to make sure that requests for the same
> session are processed sequentially (i.e. never at the same time)?
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From grisha at modpython.org  Wed Nov  5 00:05:58 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <200311042234.13877.mike@mikesclutter.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<20031104165310.X74839@onyx.ispol.com>
	<200311042234.13877.mike@mikesclutter.com>
Message-ID: <20031104235444.W96643@onyx.ispol.com>


On Tue, 4 Nov 2003, Michael Owens wrote:

> That's a very interesting question, and frankly I've never given it a lot of
> thought.

I didn't give it a lot of thought either, until I came across the need for
it. This turned out a bit more complex than orginally anticipated (ok,
this is an understatement - it was a paint to get working), which is one
of the main motivators for providing session support as part of mod_python
(the latest beta has it).

The notion of a session always (or almost always) assumes that no more
than one request for a session is being processed at a time.  This is
default behaviour in JSP, for example, even though the users often don't
even know it.

If you have a session that, say increments a counter, then unless you have
some sort of a session locking mechanism, your numbers will increment, but
not always as expected :-)

Anyway - when I saw "session support" I thought there may be a chance you
knew something I didn't :-)

Grisha
From mike at mikesclutter.com  Wed Nov  5 08:57:27 2003
From: mike at mikesclutter.com (Michael Owens)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] ANNOUNCE: gila, mod_python util library
In-Reply-To: <20031104235444.W96643@onyx.ispol.com>
References: <200311021618.45341.mike@mikesclutter.com>
	<200311042234.13877.mike@mikesclutter.com>
	<20031104235444.W96643@onyx.ispol.com>
Message-ID: <200311050857.27585.mike@mikesclutter.com>

Up till now, I have always passed concurrency on to the database. If the 
session has made two concurrent requests altering the same data, then the 
state/value of the data is however the last request that commits the update 
left it. The data will be consistent, as the DB ensures consistent reads and 
writes as long as all work resides within a transaction. Counters also apply 
--- I just use a postgres sequence, or simulate one with mysql and tables. 
However, I am interested to see how you implemented this concurrancy.

In any case, I have always tried to use what was available, so most likely I 
will end up modifying my stuff to work atop the session support in 
mod_python.

On Tuesday 04 November 2003 11:05 pm, Gregory (Grisha) Trubetskoy wrote:
> On Tue, 4 Nov 2003, Michael Owens wrote:
> > That's a very interesting question, and frankly I've never given it a lot
> > of thought.
>
> I didn't give it a lot of thought either, until I came across the need for
> it. This turned out a bit more complex than orginally anticipated (ok,
> this is an understatement - it was a paint to get working), which is one
> of the main motivators for providing session support as part of mod_python
> (the latest beta has it).

> The notion of a session always (or almost always) assumes that no more
> than one request for a session is being processed at a time.  This is
> default behaviour in JSP, for example, even though the users often don't
> even know it.
>
> If you have a session that, say increments a counter, then unless you have
> some sort of a session locking mechanism, your numbers will increment, but
> not always as expected :-)


> Anyway - when I saw "session support" I thought there may be a chance you
> knew something I didn't :-)
>
> Grisha
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

From vmanera at manord.com  Wed Nov  5 15:56:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:04:20 2004
Subject: [mod_python] Strange behavior in using Session
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>

I'm starting to use new Session module and something strange sometimes
happens:<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

For debug purpose:

 

def test(req):

            sess = Session.DbmSession(req,timeout=7200) 

sys.stdout=req

            ...

            print 'et voila'

            .....

 

But sometime the output goes to another session on another workstation.

 

So, on the brouser of the programmer that called test was show all it does
except the print 'et voil?'

and on the brouser of a colleague that use Session to, magically appear 'et
voil?'

 

Any Idea

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031105/a8db8c76/attachment-0003.htm
From grisha at modpython.org  Wed Nov  5 10:24:37 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Strange behavior in using Session
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D52C@exchange2000.manord.com>
Message-ID: <20031105102248.B2712@onyx.ispol.com>


There is one sys.stdout per Python interpreter. So however many clients
connect to the server, they all share sys.stdout.

You should not modify it, but use req.write() instead, and all will work
fine.

Grisha

On Wed, 5 Nov 2003, Manera, Villiam wrote:

> I'm starting to use new Session module and something strange sometimes
> happens:<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
> For debug purpose:
>
>
>
> def test(req):
>
>             sess = Session.DbmSession(req,timeout=7200)
>
> sys.stdout=req
>
>             ...
>
>             print 'et voila'
>
>             .....
>
>
>
> But sometime the output goes to another session on another workstation.
>
>
>
> So, on the brouser of the programmer that called test was show all it does
> except the print 'et voil?'
>
> and on the brouser of a colleague that use Session to, magically appear 'et
> voil?'
>
>
>
> Any Idea
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From tpc at csua.berkeley.edu  Wed Nov  5 09:58:04 2003
From: tpc at csua.berkeley.edu (tpc@csua.berkeley.edu)
Date: Fri Jan  9 22:04:21 2004
Subject: [Tutor] Re: [mod_python] invalid literal for float int or long
 solved !
In-Reply-To: <20031027144335.Q39378@onyx.ispol.com>
Message-ID: <20031105095630.H73580-100000@localhost.name>


the former is correct, I assumed it was the latter but was proven wrong
when I reverted to my earlier MySQL SELECT statement (i.e., WHERE) and
switched the url and title and it worked just fine.

On Mon, 27 Oct 2003, Gregory (Grisha) Trubetskoy wrote:

>
> The first one is "url, title", the second is "title, url" - was that the
> problem, or was it the WHERE instead of INNER JOIN (which are same thing
> IIRC).
>
> Grisha
>
>
> On Mon, 27 Oct 2003 tpc@csua.berkeley.edu wrote:
>
> >
> > fingers crossed, here's hoping the bug doesn't rear its creepy head again,
> > can't really say wherefore the bug but I found a workaround, I changed the
> > basic MySQL statement below:
> >
> > SELECT url, title FROM URLs, URLs_WITH_MATCHES WHERE URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > to:
> >
> > SELECT title, url from URLs INNER JOIN URLs_WITH_MATCHES ON URLs.id =
> > URLs_WITH_MATCHES.url_id;
> >
> > and voila !  I am a complete idiot.
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
>
> _______________________________________________
> Tutor maillist  -  Tutor@python.org
> http://mail.python.org/mailman/listinfo/tutor
>

From stian at soiland.no  Thu Nov  6 07:33:09 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] 
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <3FA72A45.3080602@ainet.com>
References: <3FA72A45.3080602@ainet.com>
Message-ID: <20031106063309.GD22316@itea.ntnu.no>

On 2003-11-04 05:25:41, Jim Peterson wrote:

> A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> 
> A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am 
> saying hello?.
> I would have hit exactly the same problem if I hadn't just seen your thread.

I have been wondering myself, too, what decides if .py is required or
not? I agree that with SetHandler, .py suffix should not be required (to
get nicer URLs), ALTHOUGH it should still work.

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From grisha at modpython.org  Thu Nov  6 12:01:59 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python]
	http://www.modpython.org/pipermail/mod_python/2003-November/003888.html
In-Reply-To: <20031106063309.GD22316@itea.ntnu.no>
References: <3FA72A45.3080602@ainet.com> <20031106063309.GD22316@itea.ntnu.no>
Message-ID: <20031106115148.R20173@onyx.ispol.com>


The publisher makes this decision. It's not a simple decision to make
because a dot also serves as package.module separator in Python, so the
publisher has to make an intelligent guess on what you meant.

E.g. if you have

AddHandler mod_python .py .blah

Wheh you ask for main.blah, the publisher will drop the blah as the
extension and import module main. If you ask for main.bleh, it will assume
you meant module bleh in package main.

If you have

SetHandler mod_python

Then there is no initial list of suffixes to look at. Actually there *is*
(imp.get_suffixes()), but the publisher wasn't doing it, so in the
particular instance sited earlier in this thread, the documentation was
right and the publisher was wrong, and I think we fixed it correctly this
time for the next release.

Grisha


On Thu, 6 Nov 2003, Stian [iso-8859-1] S?iland wrote:

> On 2003-11-04 05:25:41, Jim Peterson wrote:
>
> > A URL http://www.mysite.com/hello.py/say would return ?I am saying NOTHING?.
> >
> > A URL http://www.mysite.com/hello.py/say?what=hello would return ?I am
> > saying hello?.
> > I would have hit exactly the same problem if I hadn't just seen your thread.
>
> I have been wondering myself, too, what decides if .py is required or
> not? I agree that with SetHandler, .py suffix should not be required (to
> get nicer URLs), ALTHOUGH it should still work.
>
> --
> Stian S?iland               Work toward win-win situation. Win-lose
> Trondheim, Norway           is where you win and the other lose.
> http://www.soiland.no/      Lose-lose and lose-win are left as an
>                             exercise to the reader.  [Limoncelli/Hogan]
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From svenne at krap.dk  Thu Nov  6 21:28:14 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FA77A98.8060502@sjsoft.com>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
Message-ID: <3FAAAEDE.3060804@krap.dk>

Ok, now I figured the one part out.

Having set Indexes and DirectoryIndex (for example to index.py), the 
file MUST exists (eventhough it might not be used) so my solution was 
simply to touch the file.

The second problem, having the http-authorization-dialog popping up is 
still not resolved... Any thoughts ?

Svenne

David Fraser wrote:

> Hi Sevenne
> Have you tried turning off the Indexes under Options?
> David
>
> Svenne Krap wrote:
>
>> Quite simple right now.
>> - one handler-function (just printing out varios req-object 
>> attributes, nothing fancy until I have solved my problem.)
>> - one authenhandler-function (containing only "return apache.OK")
>>
>> Btw. another possible sligt change in behavior, earlier, when having 
>> the require-valid user set and return apache.OK immediately no popup 
>> for password noticed (as far memory servers). Now it pops up, but 
>> anything is accepted (which is expected, the popping up of the 
>> password-dialog is not expeced....)
>>
>> Svenne
>>
>> Gregory (Grisha) Trubetskoy wrote:
>>
>>> what's in the python script?
>>>
>>> Grisha
>>>
>>> On Sat, 1 Nov 2003, Svenne Krap wrote:
>>>
>>>  
>>>
>>>> Hi.
>>>>
>>>> I am toying around with mod_python on a gentoo-linux system. Prior I
>>>> used the Gentoo ebuilds (mod_python v. 3.0.1), but now I installed the
>>>> beta from source.
>>>>
>>>> This is what I wish :
>>>> Every request is handled by the same python-handler for the virtual
>>>> domain. I am currently playing around and creating my own handler 
>>>> in the
>>>> process.
>>>> It has worked before, with the following relevant parts of my 
>>>> httpd.conf
>>>> (be aware, internal test server so a lot off things are just made
>>>> simple, not secure/right):
>>>>
>>>> NameVirtualHost *
>>>> <Directory "/www/tweetie">
>>>>        SetHandler python-program
>>>>        PythonHandler site
>>>>        PythonAuthenHandler site
>>>>        PythonDebug On
>>>>        Options Indexes FollowSymLinks MultiViews
>>>>        AllowOverride All
>>>>        Order allow,deny
>>>>        Allow from all
>>>>        AuthType Basic
>>>>        AuthName "Restricted Area"
>>>>        require valid-user
>>>> </Directory>
>>>> <VirtualHost *>
>>>>        ServerName tweetie
>>>>        DocumentRoot /www/tweetie
>>>> </VirtualHost>
>>>>
>>>> But now, when I browse to "http://tweetie/" i get a directory listning
>>>> instead of the python script... If I write anything after the trailing
>>>> slash, everything works fine.
>>>>
>>>> Can you tell me, what I did wrong and how to fix it ?
>>>>
>>>> Tia
>>>>
>>>> Svenne Krap
>>>>
>>>> _______________________________________________
>>>> Mod_python mailing list
>>>> Mod_python@modpython.org
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>
>>>>   
>>>
>>>
>>>  
>>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>  
>>
>
>
>

From elvelind at amandarin.se  Fri Nov  7 00:49:06 2003
From: elvelind at amandarin.se (elvelind grandin)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] open a simple file
Message-ID: <3FAADDF2.1020808@amandarin.se>

New to python and newer to mod_python so sorry if this is a newbie question.
I'm have a where simple handler just for test that should open a html 
file and writing it out.
The problem is that it cant found the file. iv tried with test.html and 
the absolute path and none work. is there something I'm missing?

-- 
elvelind grandin

amandarin.se


From gustavo.cordova at q-voz.com  Thu Nov  6 18:05:58 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <3FAAE1E6.4000501@q-voz.com>

elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie 
> question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html 
> and the absolute path and none work. is there something I'm missing?

Well, if you include the source to your module, maybe we might have a 
bit more information to help you with.

Please add a "PythonDebug On" directive in httpd.conf and include all 
error messages in your next email.

Just a note: I'm not cranky, it's just that we can't help you without 
more info.

-gustavo


From stian at soiland.no  Fri Nov  7 11:00:13 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] 
	Re: Mod_python 3.1.2b, sethandler + dir listning problem
In-Reply-To: <3FAAAEDE.3060804@krap.dk>
References: <3FA40C83.5050502@krap.dk> <20031102155855.P47316@onyx.ispol.com>
	<3FA6CBD0.3020902@krap.dk> <3FA77A98.8060502@sjsoft.com>
	<3FAAAEDE.3060804@krap.dk>
Message-ID: <20031107100013.GB1233@itea.ntnu.no>

On 2003-11-06 21:28:14, Svenne Krap wrote:

> The second problem, having the http-authorization-dialog popping up is 
> still not resolved... Any thoughts ?

We've found out with 3.1.2b that the AuthenHandler-thingie is not fully
functional.

We tried the simple example from the documentations, and even made it
simpler:

.htaccess
---------
PythonPath "['/our/libs'] + sys.path"
PythonAuthenHandler Cerebrum.web.login
AuthType Basic
AuthName "Cerebrum"
require valid-user


Cerebrum/web/login.py
---------------------
from mod_python import apache

def authenhandler(req):
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED



This failed with a 500 Server Error. Watching the apache log reveals a
hint:

[Fri Nov 07 10:49:42 2003] [error] [client 129.241.56.39]
python_handler: After PythonAuthenHandler req->user is NULL. Assign
req.user to avoid this error.

This seems weird.. modifing the function:


def authenhandler(req):
    req.user = ""
    pw = req.get_basic_auth_pw()
    user = req.user
    if user != "":
        return apache.OK
    return apache.HTTP_UNAUTHORIZED


This works perfect, the login dialog appears, and disappears if any
login name is entered.
    
Now - why should req.user need to be set first?

Even the simplest handler:

def authenhandler(req):
    return apache.HTTP_UNAUTHORIZED
    
fails.. but if req.user = "" is set, it works.         
    
-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:36:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Session instances can't be stored in req?
Message-ID: <20031107103633.GC1233@itea.ntnu.no>

Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If I
try to store sezz in req.blupp - everything fails - the apache process hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From stian at soiland.no  Fri Nov  7 11:37:33 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Re: open a simple file
In-Reply-To: <3FAADDF2.1020808@amandarin.se>
References: <3FAADDF2.1020808@amandarin.se>
Message-ID: <20031107103733.GD1233@itea.ntnu.no>

On 2003-11-07 00:49:06, elvelind grandin wrote:

> New to python and newer to mod_python so sorry if this is a newbie question.
> I'm have a where simple handler just for test that should open a html 
> file and writing it out.
> The problem is that it cant found the file. iv tried with test.html and 
> the absolute path and none work. is there something I'm missing?

Have you made sure the file is readable for the user running the apache
process?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From vmanera at manord.com  Fri Nov  7 12:23:34 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:04:21 2004
Subject: R: [mod_python] Session instances can't be stored in req?
Message-ID: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>

I had a similar problem, not exactly I now show it but for explain:

def xxx(req):
	sess = Session(req)
	...
	req.sess = sess
	return yyy(req)

def yyy(req):
	sess = check_sess()

def check_sess(req):
	if hasattr(req,'sess'):
		sess = req.sess
	else:
		sess = Session(req)
	return sess

this hang apache

if I delete the attribut from req all work fine:

def check(req):
	if hasattr(req,'sess'):
		sess = req.sess
		delattr(req,'sess')
	else:
		sess = Session(req)
	return

I think in this way:

class BaseSession(dict):
	...
	def __del__(self):
        self.unlock()

the del unlock apache

where have you put the  fixuphandler(req) and who call it? I'm interisting
in it too

Villiam



-----Messaggio originale-----
Da: Stian S?iland [mailto:stian@soiland.no]
Inviato: venerd? 7 novembre 2003 11.37
A: mod_python@modpython.org
Oggetto: [mod_python] Session instances can't be stored in req?


Again with 3.1.2b..

I've gone a bit tired of creating the session objects on every page, so
I made a fixuphandler to do the trick. The problem is, Apache hangs for
infinity:

def fixuphandler(req):
    # req.session = Session(req)
    sezz = Session(req)
    req.blapp = str(id(sezz))
    req.blupp = sezz
    open("/tmp/faentosk", "w")
    return apache.OK


Within index.py:  (result is a html document)

try:
    result.add(req.blapp)
    result.add(str(id(req.blupp)))
    result.add(str(req.sezz))
except Exception, e:
    result.add(str(e))

Now, if I don't save the session instance (the sezz) - everything works. If
I
try to store sezz in req.blupp - everything fails - the apache process
hangs,
the file /tmp/faentosk is never created, ie. everything stops at the
previous line.

I've tried making a Dummy class and instanciating it instead, sezz =
Dummy() - and writing out the id in same way, works like a charm, and
the id confirms that it's the same object instanciated within
fixuphandler.

Any tip?

-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From stian at soiland.no  Fri Nov  7 14:43:51 2003
From: stian at soiland.no (Stian =?iso-8859-1?Q?S=F8iland?=)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Re: R: Session instances can't be stored in req?
In-Reply-To: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF141048F9@exchange2000.manord.com>
Message-ID: <20031107134351.GE1233@itea.ntnu.no>

On 2003-11-07 12:23:34, Manera, Villiam wrote:

> this hang apache
> 
> if I delete the attribut from req all work fine:
> 
> def check(req):
> 	if hasattr(req,'sess'):
> 		sess = req.sess
> 		delattr(req,'sess')
> 	else:
> 		sess = Session(req)
> 	return
> class BaseSession(dict):
> 	...
> 	def __del__(self):
>         self.unlock()
> the del unlock apache

Yes, a lock problem seems to be the issue here. 

We tried defining a cleanuphandler to fix things up by both calling
unlock() and removing the reference req.session - but the cleanuphandler
isn't always reached.

We tried moving the code away to a normal handler that first retrieves
the session, stores it in req.session, and then calls
mod_python.publisher.handler(req) - lock problems still occur.

> where have you put the  fixuphandler(req) and who call it? I'm interisting
> in it too

>From our library, by setting in htaccess "PythonFixupHandler
Cerebrum.web.fixup" it will be imported from
/our/lib/Cerebrum/web/fixup.py


-- 
Stian S?iland               Work toward win-win situation. Win-lose
Trondheim, Norway           is where you win and the other lose.
http://www.soiland.no/      Lose-lose and lose-win are left as an
                            exercise to the reader.  [Limoncelli/Hogan]

From michael at dynamine.net  Fri Nov  7 10:10:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] 
 Documentation suggestions for section 4.7.1 in the beta mod_python
 manual
Message-ID: <3FABE006.6010602@dynamine.net>

Hi Grisha,

I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.

First, please explain to us why we need yet another cookie class, 
especially one that has the same name as the package that ships with 
Python ("Cookie").  I have to admit, though, that SignedCookie looks 
like a really nice convenience class.

Second, it's really important that you emphasize the security risks of 
using MarshalCookie; see the Python documentation for SerialCookie to 
see why.  Also, there are efficient-length considerations; constructing 
cookies representing 100kB data structures would not be "best practice."

--Michael

From grisha at modpython.org  Fri Nov  7 13:37:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABE006.6010602@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
Message-ID: <20031107132410.W37230@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Hi Grisha,
>
> I have some comments WRT section 4.7.1 in the 3.1.2b mod_python manual.
>
> First, please explain to us why we need yet another cookie class,

Because it is more efficient and simpler to use within mod_python
environment.

> especially one that has the same name as the package that ships with
> Python ("Cookie").

Since it resides inside the mod_python package I don't see how it matters.

> Second, it's really important that you emphasize the security risks of
> using MarshalCookie;  see the Python documentation for SerialCookie to
> see why.

There are no known security risks of useing MarshalCookie. At least none
that I am aware of, and I researched the subject pretty thoroughly.

First - MarshalCookie is a subclass of SignedCookie, so all MarshalCookies
are signed, which makes it impossible to alter the cookie value.

Second, there is a distinction between "marshalling" and "pickling", which
is what SerialCookie uses. The process of unmarshalling does not execute
arbitrary code.

> Also, there are efficient-length considerations; constructing
> cookies representing 100kB data structures would not be "best practice."

Apache will limit any header length to about 4k :-)

Grisha
From michael at dynamine.net  Fri Nov  7 11:34:50 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <20031107132410.W37230@onyx.ispol.com>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
Message-ID: <3FABF3DA.1040405@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> Second, there is a distinction between "marshalling" and "pickling", which
> is what SerialCookie uses. The process of unmarshalling does not execute
> arbitrary code.

What's your evaluation of the possibility that the marshaling method 
will change between Python versions?  The docs explicitly offer no 
guarantee that the format will remain stable.

Best,

--Michael

From neel at mediapulse.com  Fri Nov  7 14:42:29 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
	beta mod_python manual
Message-ID: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>

> First, please explain to us why we need yet another cookie class,

more classes do not mean you cannot use a class.  mod_python works quite
well with the python cookie class, I've used them together for a while
now.  I also like having more than one choice, and if someone wants to
write even another cookie class I see no problem with it.  I get to pick
the best one for my needs vs having one solution that I have to keep
tweaking to get it to do what I need.

> > Also, there are efficient-length considerations; constructing
> > cookies representing 100kB data structures would not be 
> "best practice."
> 
> Apache will limit any header length to about 4k :-)

With out looking at the spec, I believe that clients are to reject
cookies of more than 4096 bytes, and only allow one server (domain) to
store 20(?) cookies max.  Then again, the last time a browser was done
that followed the RFCs...  well I can't ever recall that happening =)

A cool addition to the mod_python cookie class would be to raise an
Execption (CookieLength?) if a cookie would result in more than the RFC
limit.

Mike

From michael at dynamine.net  Fri Nov  7 11:47:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
Message-ID: <3FABF6CF.7010202@dynamine.net>

Michael C. Neel wrote:

>>First, please explain to us why we need yet another cookie class,
> 
> more classes do not mean you cannot use a class.  mod_python works quite
> well with the python cookie class, I've used them together for a while
> now.  I also like having more than one choice, and if someone wants to
> write even another cookie class I see no problem with it.  I get to pick
> the best one for my needs vs having one solution that I have to keep
> tweaking to get it to do what I need.

I did not mean to argue that we didn't need another one; rather, I
thought it would be useful if he added a paragraph or two explaining why
this implementation was written in terms of its advantages over the
Cookie package shipping with Python.  It wasn't immediately obvious to me.

Best,

--Michael



From grisha at modpython.org  Fri Nov  7 16:48:24 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B0@johnson.mediapulse.net>
Message-ID: <20031107164602.R37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael C. Neel wrote:

> A cool addition to the mod_python cookie class would be to raise an
> Execption (CookieLength?) if a cookie would result in more than the RFC
> limit.

That'd be rather difficult because cookies is one of those unfortunate
standards that has no RFC. Well it does, but nobody follows those. The
documentation for mod_python's class has some comments and a link to a
pretty good paper describing this sad situation.

Grisha
From grisha at modpython.org  Fri Nov  7 16:53:43 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 inthe
 beta mod_python manual
In-Reply-To: <3FABF6CF.7010202@dynamine.net>
References: <3FABF6CF.7010202@dynamine.net>
Message-ID: <20031107165130.V37852@onyx.ispol.com>


On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> I thought it would be useful if he added a paragraph or two explaining
> why this implementation was written in terms of its advantages over the
> Cookie package shipping with Python.  It wasn't immediately obvious to
> me.

It's a good suggestion, but as a sidenote, this being open source - all
should/would comments are best submitted in a form of a patch ;-)

Grisha
From grisha at modpython.org  Fri Nov  7 16:58:12 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python]  Documentation suggestions for section 4.7.1 in
 the beta mod_python manual
In-Reply-To: <3FABF3DA.1040405@dynamine.net>
References: <3FABE006.6010602@dynamine.net>
	<20031107132410.W37230@onyx.ispol.com>
	<3FABF3DA.1040405@dynamine.net>
Message-ID: <20031107165354.T37852@onyx.ispol.com>



On Fri, 7 Nov 2003, Michael S. Fischer wrote:

> Gregory (Grisha) Trubetskoy wrote:
>
> > Second, there is a distinction between "marshalling" and "pickling", which
> > is what SerialCookie uses. The process of unmarshalling does not execute
> > arbitrary code.
>
> What's your evaluation of the possibility that the marshaling method
> will change between Python versions?  The docs explicitly offer no
> guarantee that the format will remain stable.

Well - marshalling is used to create .pyc files, and the format does
include a version number I believe. It's very unlikely that the format
will change with no backwards compatibility.

In other words I don't see this as a concern when using MarshalCookie.

Grisha
From matt at nipltd.com  Mon Nov 10 11:34:28 2003
From: matt at nipltd.com (Matt Hoskins)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] 
	Empty URL query elements causing mod_python 2.7.x and 3.0.x to seg
	fault
Message-ID: <1068464068.12464.23.camel@rhubarb>

I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
although I haven't tested them) can be made to lead to a segmentation
fault under unix (and the equivilent under win32) if you have an empty
query string element on the url. I don't have a debug build of
python/apache/etc, but it seems to be during a python_finalize that
things actually explode.

So the most simple case is:
http://myserver/?&

It'll explode with any empty query string component I believe. I'm
guessing it's the fact that the length of the whole element is 0 that's
upsetting things, as the following doesn't cause things to go
horribly wrong (and you correctly get an entry with an empty key):

http://myserver/?=&

As I'm not up to speed on python innards I don't know exactly why it's
getting upset. Should be easy to hack a fix to just skip entirely empty
entries, but the correct fix I guess would add a key/value pair of empty
strings to the url argument dictionary (why anyone would care about such
an entry I don't know ;).

I've had this error occur with apache 1.3.28/mod python 2.7.8/python
2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
2.3.2 under linux.

Regards,
Matt


From davidf at sjsoft.com  Mon Nov 10 14:10:51 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python 2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068464068.12464.23.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>
Message-ID: <3FAF804B.9080506@sjsoft.com>

Matt Hoskins wrote:

>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>although I haven't tested them) can be made to lead to a segmentation
>fault under unix (and the equivilent under win32) if you have an empty
>query string element on the url. I don't have a debug build of
>python/apache/etc, but it seems to be during a python_finalize that
>things actually explode.
>
>So the most simple case is:
>http://myserver/?&
>
>It'll explode with any empty query string component I believe. I'm
>guessing it's the fact that the length of the whole element is 0 that's
>upsetting things, as the following doesn't cause things to go
>horribly wrong (and you correctly get an entry with an empty key):
>
>http://myserver/?=&
>
>As I'm not up to speed on python innards I don't know exactly why it's
>getting upset. Should be easy to hack a fix to just skip entirely empty
>entries, but the correct fix I guess would add a key/value pair of empty
>strings to the url argument dictionary (why anyone would care about such
>an entry I don't know ;).
>
>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>2.3.2 under linux.
>
>Regards,
>Matt
>
Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
1.3.27/mod_python 2.7.8/python 2.2.2 under linux
Was this using a normal install, and do you have a simple test case of 
the config/.htaccess files and handler that generates this error?

David


From davidf at sjsoft.com  Mon Nov 10 14:59:15 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] 	Empty URL query elements causing mod_python	2.7.x
	and 3.0.x to seg	fault
In-Reply-To: <1068468338.12464.32.camel@rhubarb>
References: <1068464068.12464.23.camel@rhubarb>	 <3FAF804B.9080506@sjsoft.com>
	<1068468338.12464.32.camel@rhubarb>
Message-ID: <3FAF8BA3.8090209@sjsoft.com>

Matt Hoskins wrote:

>On Mon, 2003-11-10 at 12:10, David Fraser wrote:
>  
>
>>Matt Hoskins wrote:
>>
>>    
>>
>>>I believe that mod python 2.7.8 and 3.0.3 (and possibly the latest 3.1,
>>>although I haven't tested them) can be made to lead to a segmentation
>>>fault under unix (and the equivilent under win32) if you have an empty
>>>query string element on the url. I don't have a debug build of
>>>python/apache/etc, but it seems to be during a python_finalize that
>>>things actually explode.
>>>
>>>So the most simple case is:
>>>http://myserver/?&
>>>
>>>It'll explode with any empty query string component I believe. I'm
>>>guessing it's the fact that the length of the whole element is 0 that's
>>>upsetting things, as the following doesn't cause things to go
>>>horribly wrong (and you correctly get an entry with an empty key):
>>>
>>>http://myserver/?=&
>>>
>>>As I'm not up to speed on python innards I don't know exactly why it's
>>>getting upset. Should be easy to hack a fix to just skip entirely empty
>>>entries, but the correct fix I guess would add a key/value pair of empty
>>>strings to the url argument dictionary (why anyone would care about such
>>>an entry I don't know ;).
>>>
>>>I've had this error occur with apache 1.3.28/mod python 2.7.8/python
>>>2.2.3 under linux and windows, and apache 2.0.47/mod python 3.0.3/python
>>>2.3.2 under linux.
>>>
>>>Regards,
>>>Matt
>>>
>>>      
>>>
>>Works for me on Apache 2.0.47/mod_python 3.0.3/python 2.2.2 and apache 
>>1.3.27/mod_python 2.7.8/python 2.2.2 under linux
>>Was this using a normal install, and do you have a simple test case of 
>>the config/.htaccess files and handler that generates this error?
>>    
>>
>
>Are you using the FieldStorage stuff? Tt's actually the util.parse_qsl
>routine which is exploding for me. I'm half asleep this morning, so
>forgot to mention it was parse_qsl which was setting up stuff to cause
>things to blow up.
>
>I've hacked my the mod_python code (parse_qsl in _apachemodule.c) here
>to skip the empty entries in parse_qsl and that fixes the problem.
>
>fieldStorage = util.FieldStorage(modPythonRequest, 1) is the way that
>parse_qsl is ending up getting called here. I haven't had a chance to
>set up a piece of code which just calls this and doesn't do anything
>else, so I don't know if you have to actually use the fieldStorage thing
>or the values within in to trigger the crash, or whether just cleaning
>up after parse_qsl has been called with an empty query entity is enough
>to cause the problem.
>
>If you've tried fieldStorage = util.FieldStorage(modPythonRequest, 1)
>and aren't getting an explosion I could take the time to try create a
>minimal set of circumstations to cause the error, however I'm 99% sure
>it is down to parse_qsl given that "http://myserver/?=&" doesn't cause a
>problem with our app, and that should in theory create the same
>key/value pair through parse_qsl as "http://myserver/?&"
>
>Regards,
>Matt
>
>
>Matt
>
>
>  
>
OK, I wasn't using keep_blank_values=1
So it looks like a bug in parse_qsl, but I don't know enough CPython to 
debug it, maybe somebody else can :-)

David

PS Did you mean to send this to the list too?

From michael at dynamine.net  Mon Nov 10 10:03:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <3FAFD30C.9090200@dynamine.net>

Grisha,

It would be really cool if we could get access to the apache namespace 
in PythonPath, so we could do stuff like:

PythonPath "sys.path + [apache.server_root() + '/py']"

Best,

--Michael

From grisha at modpython.org  Mon Nov 10 14:30:30 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFD30C.9090200@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
Message-ID: <20031110142453.U88746@onyx.ispol.com>


On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Grisha,
>
> It would be really cool if we could get access to the apache namespace
> in PythonPath, so we could do stuff like:
>
> PythonPath "sys.path + [apache.server_root() + '/py']"


That would be neat, but I'm not sure it's theoretically possible, not
without some kind of trickery to simulate a run-time environment at
configuration stage...

I know mod_perl allows for inline perl to be executed at server
configuration time - I haven't looked at that stuff and can't really say I
know how it is done and whether it's something that would work with Python
as well.

Grisha
From gustavo.cordova at q-voz.com  Mon Nov 10 13:57:21 2003
From: gustavo.cordova at q-voz.com (=?ISO-8859-1?Q?Gustavo_C=F3rdova_Avila?=)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110142453.U88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
Message-ID: <3FAFEDA1.7030705@q-voz.com>

Gregory (Grisha) Trubetskoy wrote:

>On Mon, 10 Nov 2003, Michael S. Fischer wrote:
>
>  
>
>>Grisha,
>>
>>It would be really cool if we could get access to the apache namespace
>>in PythonPath, so we could do stuff like:
>>
>>PythonPath "sys.path + [apache.server_root() + '/py']"
>>    
>>
>That would be neat, but I'm not sure it's theoretically possible, not
>without some kind of trickery to simulate a run-time environment at
>configuration stage...
>
>I know mod_perl allows for inline perl to be executed at server
>configuration time - I haven't looked at that stuff and can't really say I know how it is done and whether it's something that would work with Python as well.
>
>Grisha
>
>  
>
Without wanting to sound flippy or anything like that, but, I don't see 
much sense in such a configuration-time parameter "automatization", 
because, setting such parameters is part of any deployment, it's better 
to keep things explicit, no?

I'd prefer to use module-level variables-as-constants, with BIG 
UPPERCASE names, so as to not miss them when deploying, or updating, a 
module.

Just my thoughts.

-gustavo


From michael at dynamine.net  Mon Nov 10 12:04:14 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEDA1.7030705@q-voz.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
Message-ID: <3FAFEF3E.2040503@dynamine.net>

Gustavo C?rdova Avila wrote:

> Without wanting to sound flippy or anything like that, but, I don't see 
> much sense in such a configuration-time parameter "automatization", 
> because, setting such parameters is part of any deployment, it's better 
> to keep things explicit, no?

Not necessarily.  Developing Web applications in a team environment 
often entails having developers running multiple instances of the 
server, each running within the user's context and bound to his own 
port.  In situations like this, doing run-time paramaterization is critical.

But yes, for production applications it might make less sense.

--Michael

From grisha at modpython.org  Mon Nov 10 15:19:11 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <3FAFEF3E.2040503@dynamine.net>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com>
	<3FAFEDA1.7030705@q-voz.com> <3FAFEF3E.2040503@dynamine.net>
Message-ID: <20031110151346.K88746@onyx.ispol.com>


There is definitely value to machine-generated configuration.

What I am not sure about is the value of the automation residing within
httpd itself.

I.e., why not have the apachectl script call a Python script to generate
the server config from scratch just before starting the server?

BTW, mod_python even includes some code that could be useful in this
respect - it's in the test suite, the httpdconf.py module.

Grisha

On Mon, 10 Nov 2003, Michael S. Fischer wrote:

> Gustavo C?rdova Avila wrote:
>
> > Without wanting to sound flippy or anything like that, but, I don't see
> > much sense in such a configuration-time parameter "automatization",
> > because, setting such parameters is part of any deployment, it's better
> > to keep things explicit, no?
>
> Not necessarily.  Developing Web applications in a team environment
> often entails having developers running multiple instances of the
> server, each running within the user's context and bound to his own
> port.  In situations like this, doing run-time paramaterization is critical.
>
> But yes, for production applications it might make less sense.
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From neel at mediapulse.com  Mon Nov 10 15:22:59 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>

> > Without wanting to sound flippy or anything like that, but, 
> I don't see 
> > much sense in such a configuration-time parameter "automatization", 
> > because, setting such parameters is part of any deployment, 
> it's better 
> > to keep things explicit, no?
> 
> Not necessarily.  Developing Web applications in a team environment 
> often entails having developers running multiple instances of the 
> server, each running within the user's context and bound to his own 
> port.  In situations like this, doing run-time 
> paramaterization is critical.
> 
> But yes, for production applications it might make less sense.

Would each be under his own virtual server in apache then, and therefore
have his own config section?  This just seems to be saving some typing
the the httpd.conf file, a few lines above the PythonOption will be
DocumentRoot.  mod_perl goes insane and allows programming logic in the
conf file, and this is a bad thing imho; nothing like restarting a
server that doesn't come back because of a programmin error inside the
conf and quickly trying to debug it while the entire server remains
down.

Mike

From michael at dynamine.net  Mon Nov 10 12:54:42 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B1@johnson.mediapulse.net>
Message-ID: <3FAFFB12.8010409@dynamine.net>

Michael C. Neel wrote:

> Would each be under his own virtual server in apache then, and therefore
> have his own config section?  This just seems to be saving some typing
> the the httpd.conf file, a few lines above the PythonOption will be
> DocumentRoot.  

I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
mod_python code in the static file store.

> mod_perl goes insane and allows programming logic in the
> conf file, and this is a bad thing imho; nothing like restarting a
> server that doesn't come back because of a programmin error inside the
> conf and quickly trying to debug it while the entire server remains
> down.

The mere fact that we can do suboptimal things with technology shouldn't 
preclude its availability.

--Michael


From michael at dynamine.net  Mon Nov 10 12:58:07 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:21 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <20031110151346.K88746@onyx.ispol.com>
References: <3FAFD30C.9090200@dynamine.net>
	<20031110142453.U88746@onyx.ispol.com> <3FAFEDA1.7030705@q-voz.com>
	<3FAFEF3E.2040503@dynamine.net> <20031110151346.K88746@onyx.ispol.com>
Message-ID: <3FAFFBDF.1050606@dynamine.net>

Gregory (Grisha) Trubetskoy wrote:

> There is definitely value to machine-generated configuration.
> 
> What I am not sure about is the value of the automation residing within
> httpd itself.
> 
> I.e., why not have the apachectl script call a Python script to generate
> the server config from scratch just before starting the server?

I do that now (using bash and sed, not Python).

But, I think that being able to pass variable parameters be used in 
Apache configuration is sexier, and very helpful when working in the 
context of a version-control environment.

--Michael

From bryn at bigtrouble.com  Mon Nov 10 13:07:22 2003
From: bryn at bigtrouble.com (Bryn Dyment)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] 
	static build link errors:  Python 2.3.2,  mod_python 2.7.8,  Apache
	1.3.29
Message-ID: <000d01c3a7ce$a2954920$6401a8c0@t20>

I'm getting link errors when building Apache with mod_python (static).
(I've successfully built mod_perl and PHP statically, so I'm somewhat
familiar with the process.)  Ideas?


Versions:
  Python: 2.3.2
  mod_python: 2.7.8
  Apache: 1.3.29


First, I built Python with:
  ./configure --enable-shared
  make
  make install


Next, mod_python with:
  ./configure --with-apache=../apache_1.3.29
  make static
  make install


Then, Apache with:
  ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a
  make


Here's where things went south:

---
gcc  -funsigned-char -DUSE_EXPAT -I./lib/expat-lite -DNO_DL_NEEDED `./apaci`
-Wl,--export-dynamic    -o httpd buildmark.o modules.o
modules/standard/libstandard.a  modules/python/libpython.a  main/libmain.a
./os/unix/libos.a  ap/libap.a  lib/expat-lite/libexpat.a  -lcrypt -lm
/usr/local/lib/python2.3/config/libpython2.3.a    -lutil   -lm
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tmpnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5785: warning: tmpnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(posixmodule.o): In function
`posix_tempnam':
/usr/local/src/Python-2.3.2/./Modules/posixmodule.c:5738: warning: tempnam()
possibly used unsafely; consider using mkstemp()
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`find_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
/usr/local/lib/python2.3/config/libpython2.3.a(thread.o): In function
`PyThread_delete_key_value':
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:279: undefined reference
to `pthread_self'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:391: undefined reference
to `sem_wait'
/usr/local/src/Python-2.3.2/Python/thread_pthread.h:432: undefined reference
to `sem_post'
.
.
.
---


Here are the results of ./configure --with-layout=FreeBSD
--activate-module=src/modules/python/libpython.a:

---
Configuring for Apache, Version 1.3.29
 + using installation path layout: FreeBSD (config.layout)
 + activated python module (modules/python/libpython.a)
Creating Makefile
Creating Configuration.apaci in src
Creating Makefile in src
 + configured for FreeBSD 4.9 platform
 + setting C compiler to gcc
 + setting C pre-processor to gcc -E
 + using "tr [a-z] [A-Z]" to uppercase
 + checking for system header files
 + adding selected modules
    o python_module uses ConfigStart/End
 + using builtin Expat
 + checking sizeof various data types
 + doing sanity check on compiler and options
Creating Makefile in src/support
Creating Makefile in src/os/unix
Creating Makefile in src/ap
Creating Makefile in src/main
Creating Makefile in src/lib/expat-lite
Creating Makefile in src/modules/standard
Creating Makefile in src/modules/python
---


From cs1spw at bath.ac.uk  Mon Nov 10 15:16:30 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <3FB0002E.7050007@bath.ac.uk>

Hi all,

Is there a way of sending a "message" to all Apache children running a 
mod_python application? Here's the problem: we have a template system 
which compiles template strings in to an in-memory data structure. This 
structure is cached in memory in a global dictionary for each Apache 
child. At the moment templates are stored in the cache with a timestamp 
saying when they were loaded, and expire and are reloaded every 5 
minutes. We want to be able to instantly invalidate a cached template if 
an urgent change needs to be made to the site.

Is there a way of pushing out a message to all of the Apache children 
saying "reload template X NOW", without having to hit the file system or 
database for every template request?

Cheers,

Simon Willison

From seth at picklematrix.net  Mon Nov 10 11:29:07 2003
From: seth at picklematrix.net (Seth Ladd)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>


On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes.  
I can assume that most templates will be static for longer than 5 
minutes.

Seth

From cs1spw at bath.ac.uk  Mon Nov 10 15:46:44 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
References: <3FB0002E.7050007@bath.ac.uk>
	<EA34E24D-13C4-11D8-988E-000A9576D038@picklematrix.net>
Message-ID: <3FB00744.8070601@bath.ac.uk>

Seth Ladd wrote:

> Do you check the timestamp on the template from the filesystem?  That 
> might be better than to just throw away the template every 5 minutes.  I 
> can assume that most templates will be static for longer than 5 minutes.

Actually we do - every 5 minutes we check the timestamp to see if an 
update has been made. We're trying to avoid making the call to the 
filesystem to check the timestamp on every request.

-- 
Simon Willison
Web development weblog: http://simon.incutio.com/

From neel at mediapulse.com  Mon Nov 10 16:49:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>

> I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
> mod_python code in the static file store.
> 
Now I am lost, wouldn't ServerRoot always be the same?  Apache only
allows this directive once, so I'm missing the dynamic part.  Do you
have each developer running his own apache on a different port, in a
different directory?

> The mere fact that we can do suboptimal things with 
> technology shouldn't 
> preclude its availability.
> 
I used to think that, and wrote a lot of perl - I'm glad I stopped =p.
If you really want this, look into mod_perl and/or mod_macro, both of
which should be able to do what you are looking for - though I freely
admit I'm not sure what you are needing.  Perl looks something like:

  <Perl>
  
  $Location{"/~dougm/"} = {
    AuthUserFile => '/tmp/htpasswd',
    AuthType => 'Basic',
    AuthName => 'test',
    DirectoryIndex => [qw(index.html index.htm)],
    Limit => {
      METHODS => 'GET POST',
      require => 'user dougm',
    },
  };
  
  </Perl>

	If you want a more detailed example, search for conf file from a
Colbalt system, which configured everything based on a directory
structure including SSL.

Mike

From svenne at krap.dk  Mon Nov 10 22:52:11 2003
From: svenne at krap.dk (Svenne Krap)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <3FB0002E.7050007@bath.ac.uk>
References: <3FB0002E.7050007@bath.ac.uk>
Message-ID: <3FB0088B.8040305@krap.dk>

What about using shared memory/semaphores (shm on linux) ? I have used 
it successfully before (in PHP) for a similar case. It's blazing fast 
and allows you to have an invalidate-script outside). Each process 
simply aquires the semaphore (overkill, but truly safe) and then reads 
the "versionnumber" (or perhaps last change) from a shm-memory segment.

Oh, by the way. Out of bitter experience, don't "loose" the semaphore, 
always keep it accounted for....

By googleling, i found 
http://gigue.peabody.jhu.edu/~mdboom/omi/source/shm_source/shm.html

Svenne

Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?
>
> Cheers,
>
> Simon Willison
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From michael at dynamine.net  Mon Nov 10 14:00:27 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Access to apache namespace in PythonPath
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7B2@johnson.mediapulse.net>
Message-ID: <3FB00A7B.3080407@dynamine.net>

Michael C. Neel wrote:

>>I'm concerned with ServerRoot, not DocumentRoot.  I don't store my 
>>mod_python code in the static file store.
>>
> Now I am lost, wouldn't ServerRoot always be the same?  Apache only
> allows this directive once, so I'm missing the dynamic part.  Do you
> have each developer running his own apache on a different port, in a
> different directory?

Yes.  Each user has a subset of the Apache directory structure in his 
workspace, including a log directory, configuration directory, etc. -- 
not the binaries or libraries at this point, but just about everything 
else.  So, in this arrangement, ServerRoot is dynamic.

--Michael

From neel at mediapulse.com  Mon Nov 10 17:21:28 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Access to apache namespace in PythonPath
Message-ID: <C0FC22C08B82074A88B500617641577787A7B3@johnson.mediapulse.net>

> Yes.  Each user has a subset of the Apache directory structure in his 
> workspace, including a log directory, configuration 
> directory, etc. -- 
> not the binaries or libraries at this point, but just about 
> everything 
> else.  So, in this arrangement, ServerRoot is dynamic.
> 

Hmm... we have the same thing, only using virtual servers.  We split out
the conf to each directory and then use includes in the main conf.  Each
mini-conf only has the virtualhost lines that set the dir structure for
that server.  What are you getting from separate servers vs virtual
ones?  I'm not being a jerk, we here have several developers working as
well and just trying to see if there might be another way for us to
configure a web server.

Mike

From gnb at itga.com.au  Tue Nov 11 09:58:45 2003
From: gnb at itga.com.au (Gregory Bond)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Sending a message to Apache children 
In-Reply-To: Your message of Mon, 10 Nov 2003 15:46:44 -0600.
Message-ID: <200311102258.JAA20974@lightning.itga.com.au>


cs1spw@bath.ac.uk said:
> Actually we do - every 5 minutes we check the timestamp to see if an
> update has been made. We're trying to avoid making the call to the
> filesystem to check the timestamp on every request. 

Actually, my gut feeling is that a stat() on a file that is still in the cache 
is not going to be noticeably more expensive than the gettimeofday() call you 
need to do to decide whether five minutes are up.  So give it a whirl with the 
stat() on every call and see what that does to your performance, you might be 
surprised.


From michael at dynamine.net  Mon Nov 10 15:11:46 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Sending a message to Apache children
In-Reply-To: <200311102258.JAA20974@lightning.itga.com.au>
References: <200311102258.JAA20974@lightning.itga.com.au>
Message-ID: <3FB01B32.6090605@dynamine.net>

Gregory Bond wrote:

> cs1spw@bath.ac.uk said:
> 
>>Actually we do - every 5 minutes we check the timestamp to see if an
>>update has been made. We're trying to avoid making the call to the
>>filesystem to check the timestamp on every request. 
> 
> 
> Actually, my gut feeling is that a stat() on a file that is still in the cache 
> is not going to be noticeably more expensive than the gettimeofday() call you 
> need to do to decide whether five minutes are up.  So give it a whirl with the 
> stat() on every call and see what that does to your performance, you might be 
> surprised.

Poster is correct; if your machine's inode cache is too small, you can 
adjust it via sysctl kern.maxvnodes (BSD); Linux's inode cache is dynamic.

--Michael

From perry.tew at cibavision.novartis.com  Tue Nov 11 08:27:40 2003
From: perry.tew at cibavision.novartis.com (perry.tew@cibavision.novartis.com)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Sending a message to Apache children
Message-ID: <OF0364206B.49D2044C-ON85256DDB.004803A7-85256DDB.0049F1C9@EU.novartis.net>

Something I've found useful is to use the CleanupHandler to handle this 
kind of thing.  I have a security realm that caches users, roles, and 
protected urls.  I have a cleanup handler that detects changes in the 
database and updates the cache.  Since this happens after the request has 
ended, there is no impact to the user.  Each child is updated after each 
one handles a request.  The only downside is that a single request must be 
served before the change is placed into effect.  However, given the number 
of requests my handlers serve, that's a very small issue compared to 
adding the overhead of checking for changes during every single request 
while the browser is waiting.

Just some thoughts,
Perry




On Nov 10, 2003, at 11:16 AM, Simon Willison wrote:

> Hi all,
>
> Is there a way of sending a "message" to all Apache children running a 
> mod_python application? Here's the problem: we have a template system 
> which compiles template strings in to an in-memory data structure. 
> This structure is cached in memory in a global dictionary for each 
> Apache child. At the moment templates are stored in the cache with a 
> timestamp saying when they were loaded, and expire and are reloaded 
> every 5 minutes. We want to be able to instantly invalidate a cached 
> template if an urgent change needs to be made to the site.
>
> Is there a way of pushing out a message to all of the Apache children 
> saying "reload template X NOW", without having to hit the file system 
> or database for every template request?

Do you check the timestamp on the template from the filesystem?  That 
might be better than to just throw away the template every 5 minutes. 
I can assume that most templates will be static for longer than 5 
minutes.

Seth

_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python



From eric.ziegenhorn at ngc.com  Wed Nov 12 15:32:00 2003
From: eric.ziegenhorn at ngc.com (Ziegenhorn, Eric)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] subprocesses
Message-ID: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>

Hello,

I've read about the multitude of problems in running subprocesses under
mod_python using commands such as os.system() or one of the os.popen().
However, I've never been able to find a work around.  I'm particularly
interested in using os.popen3().  Does anyone know if this will work?
Should I just go back to straight cgi?

Thanks,
Eric
From brianh at exelixis.com  Wed Nov 12 16:25:14 2003
From: brianh at exelixis.com (Brian Hawthorne)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] subprocesses
In-Reply-To: <A84E6C6CE36DA64EB6613FCA94269DF6025A8D03@xcgca029>
Message-ID: <Pine.GSO.4.44.0311121624250.19526-100000@timeless.exelixis.com>

i use popen3 under modpy and it works just fine.

-brian hawthorne

On Wed, 12 Nov 2003, Ziegenhorn, Eric wrote:

> Hello,
>
> I've read about the multitude of problems in running subprocesses under
> mod_python using commands such as os.system() or one of the os.popen().
> However, I've never been able to find a work around.  I'm particularly
> interested in using os.popen3().  Does anyone know if this will work?
> Should I just go back to straight cgi?
>
> Thanks,
> Eric
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>

From sergey at optimaltec.com  Wed Nov 12 15:53:05 2003
From: sergey at optimaltec.com (Sergey A. Lipnevich)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] 
	[PATCH] APR 1 compatibility: apr_pool_sub_make -> apr_pool_create_ex
Message-ID: <bou6k6$9b4$1@sea.gmane.org>

Hi!

Here's a small patch to insure mod_python 3.1.2b compiles with APR 0.9 
and 1.0. It replaces a call to deprecated apr_pool_sub_make with a call 
to apr_pool_create_ex.
Thank you!

Sergey.
-------------- next part --------------
diff -purN mod_python-3.1.2b/src/hlistobject.c mod_python/src/hlistobject.c
--- mod_python-3.1.2b/src/hlistobject.c	2002-11-07 19:15:11.000000000 -0500
+++ mod_python/src/hlistobject.c	2003-11-12 15:20:02.000000000 -0500
@@ -83,7 +83,7 @@ PyObject *MpHList_FromHLEntry(hl_entry *
         PyErr_NoMemory();
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
 
     result->pool = p;
     result->head = hlist_copy(p, hle);
diff -purN mod_python-3.1.2b/src/tableobject.c mod_python/src/tableobject.c
--- mod_python-3.1.2b/src/tableobject.c	2003-07-14 16:51:32.000000000 -0400
+++ mod_python/src/tableobject.c	2003-11-12 15:19:47.000000000 -0500
@@ -120,7 +120,7 @@ PyObject * MpTable_New()
     apr_pool_t *p;
 
     /* XXX need second arg abort function to report mem error */
-    apr_pool_sub_make(&p, NULL, NULL);
+    apr_pool_create_ex(&p, NULL, NULL, NULL);
     
     /* two is a wild guess */
     t = (tableobject *)MpTable_FromTable(apr_table_make(p, 2));
@@ -1006,7 +1006,7 @@ static PyObject *table_new(PyTypeObject 
     if (self != NULL) {
         apr_pool_t *p;
         tableobject *t = (tableobject *)self;
-        apr_pool_sub_make(&p, NULL, NULL);
+        apr_pool_create_ex(&p, NULL, NULL, NULL);
         t->pool = p;
         t->table = apr_table_make(p, 2);
     }
From modpython at holovaty.com  Thu Nov 13 14:41:52 2003
From: modpython at holovaty.com (Adrian Holovaty)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] mod_python error with Fedora Core 1
Message-ID: <200311131441.52452.modpython@holovaty.com>

I've installed Fedora Core 1 on my laptop, along with its standard RPMs of 
Apache 2 (httpd-2.0.47-10.rpm) and mod_python (mod_python-3.0.3-3.rpm). The 
mod_python package appears to be buggy.

Here's the httpd.conf code I'm using:

PythonPath "sys.path+['/home/adrian/doc/work/dev/modpython']"
<Location "/modpython">
    PythonDebug On
    SetHandler python-program
    PythonHandler testhandler
</Location>

Here's the handler (/home/adrian/doc/work/dev/modpython/testhandler.py):

from mod_python import apache
def handler(req):
    req.content_type = "text/html"
    req.write("Testing")
    return apache.OK

And here's the error output I see in my browser:

"""
Mod_python error: "PythonHandler testhandler"

Traceback (most recent call last):

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 320, in HandlerDispatch

  File 
"/usr/src/build/276253-i386/install/usr/lib/python2.2/site-packages/mod_python/apache.py", 
line 496, in import_module

ImportError: No module named testhandler
"""

There are a few things wrong here. First, it should work -- i.e., the output 
should be "Testing". Second, the directory /usr/src/build doesn't exist on my 
machine, so that error message is quite perplexing.

The above httpd.conf settings and handler code worked perfectly with Red Hat 
9; I assume the bug is in the Fedora packaging. Any idea whether I can get it 
to work somehow? Has anybody had luck running mod_python on Fedora Core 1?

Thanks!

Adrian

From blazek at firma.seznam.cz  Fri Nov 14 12:56:14 2003
From: blazek at firma.seznam.cz (Vaclav Blazek)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] 
	Re: Empty URL query elements causing mod_python 2.7.x and 3.0.x to
	seg fault
Message-ID: <200311141256.14922.blazek@firma.seznam.cz>

> OK, I wasn't using keep_blank_values=1
> So it looks like a bug in parse_qsl, but I don't know enough CPython to 
> debug it, maybe somebody else can :-)

> David

> PS Did you mean to send this to the list too?

Hello all mod_pythoner's,

I'm sorry to reply to the message outside of it's thread, but I've just 
subscribted to this mailing list and cannot get the Message-ID of the 
original message.

Well, the main problem is in functions parse_qs() and parse_qsl() 
(src/_apachemodule.c). In these functions, there's the query-string broken by 
the '&' character and any part is considered as key=value pair which is then 
broken by the '=' character and stored in dict (parse_qs) or in list 
(parse_qsl).

Everything is fine until the size of pair is 0. In this case, there are 
created two python strings with zero length. Then the processing of both 
parst is made and these python strings are resized to the new size, which is 
also 0. But python (to be more precise, the function _PyString_Resize()) 
complains (by an exception) when you try to resize string of size 0 to size 
0. Since this exception is not handled and the _PyString_Resize() function 
changes the pointer to the python string to NULL, next py_DECREF() causes 
SIGSEGV.

I've added code which tests original pair's length in both functions and skips 
processing when string is empty.  I'm usign mod_python 3.0.3, but the code of 
these functions is the same in the latest version. Here comes the diff:

@@ -183,6 +183,11 @@
        cpair = PyString_AS_STRING(pair);

        len = strlen(cpair);
+        if (!len) {
+            /* Skip processing of empty string. */
+            ++n;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, len);
        if (key == NULL)
            return NULL;
@@ -301,6 +306,11 @@

        /* split the "abc=def" pair */
        plen = strlen(cpair);
+        if (!plen) {
+            /* Skip  processing of empty string. */
+            ++i;
+            continue;
+        }
        key = PyString_FromStringAndSize(NULL, plen);
        if (key == NULL)
            return NULL;

--
Vaclav Blazek, Programer
Seznam.cz a.s., Prague, Czech Republic

From michael at dynamine.net  Mon Nov 17 12:24:59 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] req.write() can't take a tuple
Message-ID: <3FB92E9B.7050609@dynamine.net>

Hi Grish,

Is it possible to change req.write() so that it can take a tuple of 
strings as well as string?  It would be nice to be able to call 
req.write(data, "\n") instead of breaking it into two calls.

--Michael

From michael at dynamine.net  Mon Nov 17 12:31:56 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:22 2004
Subject: IGNORE Re: [mod_python] req.write() can't take a tuple
In-Reply-To: <3FB92E9B.7050609@dynamine.net>
References: <3FB92E9B.7050609@dynamine.net>
Message-ID: <3FB9303C.60604@dynamine.net>

Please ignore the previous message.  No need to reply.

--Michael

Michael S. Fischer wrote:

> Hi Grish,
> 
> Is it possible to change req.write() so that it can take a tuple of 
> strings as well as string?  It would be nice to be able to call 
> req.write(data, "\n") instead of breaking it into two calls.
> 
> --Michael
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 

From michael at kleehammer.com  Mon Nov 17 23:23:30 2003
From: michael at kleehammer.com (Michael Kleehammer)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
Message-ID: <16313.44242.563177.63147@home.kleehammer.com>

Whenever I attempt to use sessions, the DbmSession class chooses the
dbhash module and crashes when attempting to create the database.  (The
file is never created.)

* Fedora Core 1 (basically RH9)
* Newly compiled Apache 2.0.48
* Python 2.3
* mod_python 3.1.2b

Here is a small handler that exhibits the problem on my box.  If it runs
on anyone else's box, that would be good to know.

  from mod_python import apache
  import dbhash
  
  def handler(req):
      req.log_error("open", apache.APLOG_NOTICE)
  
      # seg fault in here
      result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
  
      req.log_error("opened")
      return apache.OK

The relevant Apache error log lines are:

  [notice] mod_python: (Re)importing module 'controller'
  [notice] [client 127.0.0.1] open
  [notice] child pid 11211 exit signal Segmentation fault (11)

Naturally, I've tested similar code outside of mod_python and it works
fine.  I'm wondering if dbhash is thread safe.

Obviously I can call DbmSession instead of Session and pass dumbdbm (or
another type -- I haven't tested any others yet), but I'm wondering why
the default setup isn't working.

Any thoughts?

Michael Kleehammer

From conrad at hep.caltech.edu  Wed Nov 19 07:09:32 2003
From: conrad at hep.caltech.edu (Conrad Steenberg)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] DbmSession/dbhash crashes using mod_python 3.1.2b
In-Reply-To: <16313.44242.563177.63147@home.kleehammer.com>
References: <16313.44242.563177.63147@home.kleehammer.com>
Message-ID: <1069250970.3161.11.camel@localhost.localdomain>

Hi Michael

Since you compiled Apache yourself, please make sure that the version of
libdb that Apache and mod_python (and Python?) are the same.

I've seen the same behaviour when e.g. Apache was linked against
libdb-4.0 and mod_python against libdb-4.1.

HTH

Conrad

On Mon, 2003-11-17 at 22:23, Michael Kleehammer wrote:
> Whenever I attempt to use sessions, the DbmSession class chooses the
> dbhash module and crashes when attempting to create the database.  (The
> file is never created.)
> 
> * Fedora Core 1 (basically RH9)
> * Newly compiled Apache 2.0.48
> * Python 2.3
> * mod_python 3.1.2b
> 
> Here is a small handler that exhibits the problem on my box.  If it runs
> on anyone else's box, that would be good to know.
> 
>   from mod_python import apache
>   import dbhash
>   
>   def handler(req):
>       req.log_error("open", apache.APLOG_NOTICE)
>   
>       # seg fault in here
>       result = dbhash.open('/tmp/mp_sess.dbm', 'c', apache.APLOG_NOTICE)
>   
>       req.log_error("opened")
>       return apache.OK
> 
> The relevant Apache error log lines are:
> 
>   [notice] mod_python: (Re)importing module 'controller'
>   [notice] [client 127.0.0.1] open
>   [notice] child pid 11211 exit signal Segmentation fault (11)
> 
> Naturally, I've tested similar code outside of mod_python and it works
> fine.  I'm wondering if dbhash is thread safe.
> 
> Obviously I can call DbmSession instead of Session and pass dumbdbm (or
> another type -- I haven't tested any others yet), but I'm wondering why
> the default setup isn't working.
> 
> Any thoughts?
> 
> Michael Kleehammer
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
-- 
Conrad Steenberg <conrad@hep.caltech.edu>
From davidf at sjsoft.com  Thu Nov 20 14:19:31 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] 
	Apache child process restarting under Win32 - import errors
Message-ID: <3FBCB153.6020909@sjsoft.com>

Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


From dwmp at opti.cgi.net  Thu Nov 20 19:47:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Multiple handlers
Message-ID: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>


I'm a mod_python newbie using mod_python 3.1.2b and Apache 2.0.48.  I'm 
trying to setup my test directory to run .py files under a request handler 
and any .psp files under the mod_python.psp handler.  Here's my Apache config.

### Test ###
<Directory /usr/local/apache2/htdocs/test>
     AddHandler mod_python .py
     PythonHandler index
     PythonDebug On

     AddHandler mod_python .psp
     PythonHandler mod_python.psp
</Directory>

The problem is that I get both handlers running one after the other.  The 
request handler (index.py) handles the request, sends output, returns 
apache.OK and then the mod_python.psp tries to handle the same request, 
appending output to the index.py output.  Why does this config not set it 
up so that all .py requests go to index.py and all requests for .psp files 
get handled by mod_python.psp?

It would be nice if the documentation had a more detailed explanation of 
how Apache uses handlers and how to setup mod_python in the Apache 
config.  Those of us who are used to just putting a .php file in the 
filesystem and watching it run need a little hand holding.

-Dan

From grisha at modpython.org  Thu Nov 20 22:12:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Multiple handlers
In-Reply-To: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
References: <5.2.1.1.2.20031120193709.03d55e68@mail.pyxos.com>
Message-ID: <20031120221124.N69786@onyx.ispol.com>



On Thu, 20 Nov 2003, Dan W. wrote:

> ### Test ###
> <Directory /usr/local/apache2/htdocs/test>
>      AddHandler mod_python .py
>      PythonHandler index
>      PythonDebug On
>
>      AddHandler mod_python .psp
>      PythonHandler mod_python.psp
> </Directory>


Try this:

<Directory /usr/local/apache2/htdocs/test>

      AddHandler mod_python .py .psp

      PythonHandler index | .py
      PythonHandler mod_python.psp | .psp

      PythonDebug On

</Directory>


Grisha
From vmanera at manord.com  Fri Nov 21 18:00:18 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:04:22 2004
Subject: R: [mod_python] Apache child process restarting under Win32 - imp
	ort errors
Message-ID: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>

we have had the same behavior with ':&' 

Da: 	Cassiano, Marco  
Inviato:	luned? 16 giugno 2003 11.53
A:	'security@apache.org'
Cc:	'Gregory (Grisha) Trubetskoy'
Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF

I would like to inform you of the behaviour of Apache when a link with a
particular HREF is clicked.

First of all, our configuration is : 

Windows 2000 Server SP3
Apache 2.0.46
Mod-python 3.0.3
Active State Python 2.2.2


We have a python script that runs under mod-python which looks into the
database to find some articles and builds a table with the links to
"explode" each article and look into its details. This HTML table contains a
HREF for each article. Each HREF actually contains a call to another python
script that does the "explode" job. We pass the parameters to this script in
the usual "&" concatenation form.
It happened that one of the articles had a semicolon (";") as the final
character of its description
so the HREF was built in following way : "descriptionwithfinal;&next parm".
In other words the HREF contained the sequence ";&".
When we clicked on this link we got a "Page not found" error on the browser
but what really Apache did is the following (excerpt from error.log) :



[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
3221225477 -- Restarting.


-----Messaggio originale-----
Da: mod_python-bounces@modpython.org
[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
Inviato: gioved? 20 novembre 2003 13.20
A: mod_python@modpython.org
Oggetto: [mod_python] Apache child process restarting under Win32 -
import errors


Hi

We are having trouble with our application suddenly producing crashes 
for all browsers connected to the system.
We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
It seems that the problem is that a module that was imported correctly 
somehow is not anymore...

In trying to track this down, I found the following in the Apache error log:
[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
status 3221225477 -- Restarting.
[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.

This happens directly before the first occurence of the problem (I've 
taken off the date, [error], [client ip-address]:
PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
HandlerDispatch
    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
handler
    server = getserver(modulename, instancename), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web:   File 
"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
getserver
    raise AttributeError(errormessage), referer: 
http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
PythonHandler jToolkit.web: AttributeError: module 
'jLogbook.python.config' has no attribute 'AmerivenIndexPage'

I made it print out the contents of the module at this point in the 
error log:
module is <module 'jLogbook.python.config' from 
'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
'os', 'sys']
This seems to indicate that only half of this module was imported... 
perhaps because one of the other imports failed (these seem to be some 
win32 extension modules)

I was wondering if anyone else has experienced problems with Apache 
restarting, and why this happens...

David


_______________________________________________
Mod_python mailing list
Mod_python@modpython.org
http://mailman.modpython.org/mailman/listinfo/mod_python

From martin.clausen at privat.dk  Sat Nov 22 23:13:53 2003
From: martin.clausen at privat.dk (martin.clausen@privat.dk)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>

How do I do form-based authentication using mod_python / Apache. I would like to use Apaches authentication mechanism(as used in the mod_pyhton manual(release 3.0.3), but would like a form-based login/password solution instead of the pop-up - is that possible ?

The only solution I have been able to find after a lot of googling and mailing list searches is to use javascript to prefix the login and password to the request from a form on a "cover" page, but besides from the inelegance inhenrent in this solution and the security risk in transmitting the password as part of the request, it would not prevent the pop-up from appearing if someone requested the login script directly.

Any help is appreciated, also if the you have a solution for form-based authentication that does not use Apache.

Regards,

Martin

From jciccale at mac.com  Sun Nov 23 02:16:01 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <7001386.1069550161586.JavaMail.jciccale@mac.com>

Hi, 
   I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly I'm unable to use the new Session handling classes, I get "Failled to acquire global mutex lock" and this on apache's error log
  "(13)Permission denied: Failed to acquire global mutex lock at index 9"

 Anyone that is getting the same errors?

Thanks,
Julian
From grisha at modpython.org  Sat Nov 22 21:43:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <20031122214159.N734@onyx.ispol.com>


See if you can get the latest sources from CVS - I believe this has been
fixed soon after 3.1.1b was released.

Grisha

On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi,

>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
> Sadly I'm unable to use the new Session handling classes, I get "Failled
> to acquire global mutex lock" and this on apache's error log
>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
>
> Thanks,
> Julian
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From jciccale at mac.com  Sun Nov 23 13:24:26 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <1252866.1069590266578.JavaMail.jciccale@mac.com>

Hi and thanks,
  I got that problem solved but now it seems it's happening something weird. I compiled the sources from CVS (enabling the debugging lines on the locking calls). On a first request i get these lines:

[Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
[Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429

, which seems to lock mutex at ix 30. (and remains locked even when the request has completed). Then when a second request comes i get this:

[Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425

. Obviously that process remains locked forever, waiting on a lock forever.
How it was meant to work the locking mechanism? It seems the problem is in Session.py and how it handles the locking..

BTW. I'm working on a very cool project take a look (pythonwork.sf.net)
Bye,
Julian

On Sunday, November 23, 2003, at 03:43AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>See if you can get the latest sources from CVS - I believe this has been
>fixed soon after 3.1.1b was released.
>
>Grisha
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi,
>
>>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b.
>> Sadly I'm unable to use the new Session handling classes, I get "Failled
>> to acquire global mutex lock" and this on apache's error log
>>   "(13)Permission denied: Failed to acquire global mutex lock at index 9"
>>
>>  Anyone that is getting the same errors?
>>
>> Thanks,
>> Julian
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>
>

From tropezien at croxx.de  Sun Nov 23 15:16:33 2003
From: tropezien at croxx.de (Tropezien)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <7001386.1069550161586.JavaMail.jciccale@mac.com>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
Message-ID: <200311231516.33716.tropezien@croxx.de>

Am Sonntag, 23. November 2003 02:16 schrieb Julian Ciccale:
> Hi,
>    I'm running RH 9 with apache 2.0 (prefork) and modpython 3.1.1b. Sadly
> I'm unable to use the new Session handling classes, I get "Failled to
> acquire global mutex lock" and this on apache's error log "(13)Permission
> denied: Failed to acquire global mutex lock at index 9"
>
>  Anyone that is getting the same errors?
Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python 3.1.2b.
Some further investigations cleared up that mod_python tries to get more than 
400 semaphores during launch of httpd. There is an estimated amount of 16 
threads (AP_MPMQ_MAX_THREADS) for all (25) possible daemon-process 
( AP_MPMQ_MAX_DAEMONS).
My quick and dirty solution was to increase the amount of system semaphores 
supported by the Linux-kernel with

    >georg@jeordi:/etc/rc.d$ /sbin/sysctl kernel.sem
    kernel.sem = 256        32000   32      512

I changed my /etc/sysctl.conf to:

    kernel.sem = 500 32000 32 512

and added the line:

    sysctl -p

into the Init-Skript of the Apache (rc.httpd) before the httpd-daemon is 
started.

Ciao, Georg

From tim.stebbing at nunatak.com.au  Mon Nov 24 09:18:32 2003
From: tim.stebbing at nunatak.com.au (Timothy Stebbing)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] mod_dav phases question
Message-ID: <3FC13238.4030208@nunatak.com.au>

The apache module 'mod_dav' provides webdav ability to be added to 
<directory>'s.
this provides the usual web_dav calls, one of which is 'PUT'. Apache 
handles put internally,
however we are using mod_dav as part of our CMS, to allow our users to 
'checkout' a document
to a webdav folder and open the file, and we want to capture the put 
phase, so we can take the
newly modified file from the webdav folder and check it back in to our cms.

How can I capture the mod_dav put phase with mod_python?  I was thinking 
an apache filter,
but how can I have that applied only to the mod_dav put phase, rather 
than every request? Is
there some large list somewhere of all the possible phases provided by 
every module I can apply
filters to?

-TJS


From grisha at modpython.org  Sun Nov 23 20:12:42 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <200311231516.33716.tropezien@croxx.de>
References: <7001386.1069550161586.JavaMail.jciccale@mac.com>
 <200311231516.33716.tropezien@croxx.de>
Message-ID: <20031123201050.S16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Tropezien wrote:

> Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> 3.1.2b. Some further investigations cleared up that mod_python tries to
> get more than 400 semaphores during launch of httpd.

Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
semaphores, which is 32. What does your log say when you start httpd?

Grisha


From grisha at modpython.org  Sun Nov 23 20:15:02 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <1252866.1069590266578.JavaMail.jciccale@mac.com>
References: <1252866.1069590266578.JavaMail.jciccale@mac.com>
Message-ID: <20031123201252.N16686@onyx.ispol.com>



On Sun, 23 Nov 2003, Julian Ciccale wrote:

> Hi and thanks,

>   I got that problem solved but now it seems it's happening something
> weird. I compiled the sources from CVS (enabling the debugging lines on
> the locking calls). On a first request i get these lines:
>
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>
> , which seems to lock mutex at ix 30. (and remains locked even when the
> request has completed). Then when a second request comes i get this:
>
> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>
> . Obviously that process remains locked forever, waiting on a lock forever.

How are you using your sessions? Do you by any chance assign it to a
global variable - the session releases the lock when you call it's ulock()
method explicitely, or when it goes out of scope, so assigning it to a
global would make it stay there and locked even after the request is done.

Grisha
From jciccale at mac.com  Mon Nov 24 02:49:40 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6232663.1069638580829.JavaMail.jciccale@mac.com>

Kind of. What I do is the followoing

try:
    from mod_python.Session import Session as DefaultSessionCall
except:
    def DefaultSessionCall( r ):
       return None

, this is a peice of code I use to make configurable the Session class the user wants to use. I also then try to call a setter method on a user's class to pass the session he works on. How should I use the session? The locking mechanism is needed for read/write or just write? I think I may write a session wrapper class to lock unlock on user call to get/set properties..


 
On Monday, November 24, 2003, at 02:15AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Sun, 23 Nov 2003, Julian Ciccale wrote:
>
>> Hi and thanks,
>
>>   I got that problem solved but now it seems it's happening something
>> weird. I compiled the sources from CVS (enabling the debugging lines on
>> the locking calls). On a first request i get these lines:
>>
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock at index 30 from pid 21429
>> [Sun Nov 23 12:17:51 2003] [warn] _global_lock DONE at index 30 from pid 21429
>>
>> , which seems to lock mutex at ix 30. (and remains locked even when the
>> request has completed). Then when a second request comes i get this:
>>
>> [Sun Nov 23 12:18:02 2003] [warn] _global_lock at index 30 from pid 21425
>>
>> . Obviously that process remains locked forever, waiting on a lock forever.
>
>How are you using your sessions? Do you by any chance assign it to a
>global variable - the session releases the lock when you call it's ulock()
>method explicitely, or when it goes out of scope, so assigning it to a
>global would make it stay there and locked even after the request is done.
>
>Grisha
>
>
From grisha at modpython.org  Sun Nov 23 23:25:29 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:22 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
In-Reply-To: <6232663.1069638580829.JavaMail.jciccale@mac.com>
References: <6232663.1069638580829.JavaMail.jciccale@mac.com>
Message-ID: <20031123231631.U16686@onyx.ispol.com>



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Kind of. What I do is the followoing
>
> try:
>     from mod_python.Session import Session as DefaultSessionCall
> except:
>     def DefaultSessionCall( r ):
>        return None
>
> , this is a peice of code I use to make configurable the Session class
> the user wants to use.

This is fine, but make sure that after you do:

   session = DefaultSessionCall(r)

that the session variable is not referenced by anything after the request
is done. Or you can explicitely unlock it:

   session.unlock()

> I also then try to call a setter method on a user's class to pass the
> session he works on. How should I use the session? The locking mechanism
> is needed for read/write or just write?

You don't need to worry about locking for read and write, that locking is
taken care of automtically. You need session locking to make sure that no
two HTTP requests for the same session execute at the same time.

> I think I may write a session wrapper class to lock unlock on user call
> to get/set properties..

Your wrapper can avoid session locking altogether by instantiating it as
such:

session = Session(req, lock=0)

Grisha
From randallk at cpsc.ucalgary.ca  Sun Nov 23 23:02:04 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <Pine.LNX.4.44.0311232250010.8753-100000@csl>


Hi,

I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
the session handling stuff.

When I try to connect to my postgresql database in the following way:

from pyPgSQL import PgSQL
pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')


Apache error_log says:

PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'

and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
When I do the same outside apache/mod_python I can see the connect function.

Any thoughts?


dir(PgSQL)
running within mod_python:

['BooleanType', 'BufferType', 'BuiltinFunctionType',
'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
'LongType', 'MethodType', 'ModuleType', 'NoneType',
'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']

dir(PgSQL)
running outside mod_python:

['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
're_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
'threadsafety', 'version', 'weakref']


httpd.conf:

LoadModule python_module /var/www2/modules/mod_python.so
<Directory /var/www2/htdocs/billing>  
SetHandler python-program
PythonHandler mod_python.publisher
</Directory>


From jciccale at mac.com  Mon Nov 24 09:32:57 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <12600642.1069662777616.JavaMail.jciccale@mac.com>

Which python version are you using?

Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?

Check it with
import sys
print sys.version


On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>Hi,
>
>I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>the session handling stuff.
>
>When I try to connect to my postgresql database in the following way:
>
>from pyPgSQL import PgSQL
>pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>
>
>Apache error_log says:
>
>PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>
>and indeed when I do a dir(pgSQL), it lists the postgres-python datatypes but no connect function.
>When I do the same outside apache/mod_python I can see the connect function.
>
>Any thoughts?
>
>
>dir(PgSQL)
>running within mod_python:
>
>['BooleanType', 'BufferType', 'BuiltinFunctionType',
>'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>'LongType', 'MethodType', 'ModuleType', 'NoneType',
>'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>
>dir(PgSQL)
>running outside mod_python:
>
>['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>'threadsafety', 'version', 'weakref']
>
>
>httpd.conf:
>
>LoadModule python_module /var/www2/modules/mod_python.so
><Directory /var/www2/htdocs/billing>  
>SetHandler python-program
>PythonHandler mod_python.publisher
></Directory>
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From jciccale at mac.com  Mon Nov 24 10:44:17 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <6678826.1069667057374.JavaMail.jciccale@mac.com>

Thanks, BTW the "lock" argument its only available through BaseSession's __init__ and not DbmSession/MemorySession. It would be interesting to have it.. There are cases where you may want to request be processed at the same time for the same session, for example if the users calls a pdf generating page and at the same time he opens another browser win to do soma other stuff.

It seems that my problem would be the scope stuff cause I dont get my data saved even by unlocking the session.
By now I've made a work around by calling unlock & save when the request is done

Thanks,
Julian

I removed the definitions and I'm using directly mod_python's Session object. then action
On Monday, November 24, 2003, at 05:25AM, Gregory (Grisha) Trubetskoy <grisha@modpython.org> wrote:

>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Kind of. What I do is the followoing
>>
>> try:
>>     from mod_python.Session import Session as DefaultSessionCall
>> except:
>>     def DefaultSessionCall( r ):
>>        return None
>>
>> , this is a peice of code I use to make configurable the Session class
>> the user wants to use.
>
>This is fine, but make sure that after you do:
>
>   session = DefaultSessionCall(r)
>
>that the session variable is not referenced by anything after the request
>is done. Or you can explicitely unlock it:
>
>   session.unlock()
>
>> I also then try to call a setter method on a user's class to pass the
>> session he works on. How should I use the session? The locking mechanism
>> is needed for read/write or just write?
>
>You don't need to worry about locking for read and write, that locking is
>taken care of automtically. You need session locking to make sure that no
>two HTTP requests for the same session execute at the same time.
>
>> I think I may write a session wrapper class to lock unlock on user call
>> to get/set properties..
>
>Your wrapper can avoid session locking altogether by instantiating it as
>such:
>
>session = Session(req, lock=0)
>
>Grisha
>
>
From gwidion at mpc.com.br  Mon Nov 24 10:13:31 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
Message-ID: <200311241013.31596.gwidion@mpc.com.br>

Hi there.

I am actually implementing this in the very first mod python app I am 
developing.


You actually have to override the Auth Handler from apache with a 
Python Module. 

If you google for it, you will be offered a lot of ready-made session 
control stuff, as part of existing packages.

It is not, however, that hard to implement form scratch. Here is my 
.htaccess:

  AddHandler python-program .py
 PythonHandler dummy
 PythonAuthenHandler verify


As you can see, the PythonAuthenHandler is "verify.py" which is 
called. (inside it, the authenhandler() function is called)

I them encode some session data (like originating IP + user password) 
to generate a MD5 hashed cookie I send to the browser to further 
authentication. In the server, I save a session ID file with  the 
session data, and regenerate the cookie at each page load (which goes 
thru the "AuthenHandler" again) and compare it with the browser-sent 
cookie.

One thing I am still trying to find out is how to detect when the 
person navigate to another site  - in which case, the session should 
be terminated. I mean: I cannot allow that once in other site one can 
be back in the secure section by hitting "back".

As of the time, I plan to implement this thru a javascript that will 
destroy the cookie in a "unload()" event. But I would appreciate more 
suggestions.


Regards,

	JS
	-><-


On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
> How do I do form-based authentication using mod_python / Apache. I
> would like to use Apaches authentication mechanism(as used in the
> mod_pyhton manual(release 3.0.3), but would like a form-based
> login/password solution instead of the pop-up - is that possible ?
>
> The only solution I have been able to find after a lot of googling
> and mailing list searches is to use javascript to prefix the login
> and password to the request from a form on a "cover" page, but
> besides from the inelegance inhenrent in this solution and the
> security risk in transmitting the password as part of the request,
> it would not prevent the pop-up from appearing if someone requested
> the login script directly.
>
> Any help is appreciated, also if the you have a solution for
> form-based authentication that does not use Apache.
>
> Regards,
>
> Martin
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python

-- 

Este e-mail ?, exceto pelas partes citadas
de outros e-mails, copyright(c) de Jo?o Sebasti?o
de Oliveira Bueno. Nenhuma c?pia deste e-mail ou 
parte do mesmo pode existir nas depend?ncias 
de, ou em posse de funcion?rios, de associa??es
protetoras de direitos autorais Brasileiras,
 dos Estados Unidos da Am?rica, ou de outros
pa?ses. Em particular essa exce??o do direito
de leitura e posse deste e-mail se extende ?
ABRA, ABPI, ABES, BSA, RIAA e MPAA. Violadores
est?o infringindo as leis internacionais de 
direitos autorais e sujeitos ?s penalidades cab?veis.
Voc? pode re-utilizar, emendar,  acrescentar
suas palavras e citar e re-enviar qualquer 
parte do mesmo, desde que essa nota seja 
preservada e se n?o pertencer a alguma
das entidades supracitadas.




From davidf at sjsoft.com  Mon Nov 24 14:23:47 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:04:23 2004
Subject: R: [mod_python] Apache child process restarting under Win32 -
 imp	ort errors
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF14104908@exchange2000.manord.com>
Message-ID: <3FC1F853.4020607@sjsoft.com>

Manera, Villiam wrote:

>we have had the same behavior with ':&' 
>  
>
Thanks, this was interesting...

>Da: 	Cassiano, Marco  
>Inviato:	luned? 16 giugno 2003 11.53
>A:	'security@apache.org'
>Cc:	'Gregory (Grisha) Trubetskoy'
>Oggetto:	Apache 2.0.46 - Possible DOS with particularly crafted HREF
>
>I would like to inform you of the behaviour of Apache when a link with a
>particular HREF is clicked.
>
>First of all, our configuration is : 
>
>Windows 2000 Server SP3
>Apache 2.0.46
>Mod-python 3.0.3
>Active State Python 2.2.2
>
>
>We have a python script that runs under mod-python which looks into the
>database to find some articles and builds a table with the links to
>"explode" each article and look into its details. This HTML table contains a
>HREF for each article. Each HREF actually contains a call to another python
>script that does the "explode" job. We pass the parameters to this script in
>the usual "&" concatenation form.
>It happened that one of the articles had a semicolon (";") as the final
>character of its description
>so the HREF was built in following way : "descriptionwithfinal;&next parm".
>In other words the HREF contained the sequence ";&".
>When we clicked on this link we got a "Page not found" error on the browser
>but what really Apache did is the following (excerpt from error.log) :
>
>
>
>[Fri Jun 13 10:58:02 2003] [notice] Parent: child process exited with status
>3221225477 -- Restarting.
>
>
>-----Messaggio originale-----
>Da: mod_python-bounces@modpython.org
>[mailto:mod_python-bounces@modpython.org]Per conto di David Fraser
>Inviato: gioved? 20 novembre 2003 13.20
>A: mod_python@modpython.org
>Oggetto: [mod_python] Apache child process restarting under Win32 -
>import errors
>
>
>Hi
>
>We are having trouble with our application suddenly producing crashes 
>for all browsers connected to the system.
>We are running under Windows, with Apache 2.0.47 and mod_python 3.0.3
>It seems that the problem is that a module that was imported correctly 
>somehow is not anymore...
>
>In trying to track this down, I found the following in the Apache error log:
>[Wed Nov 19 08:53:31 2003] [notice] Parent: child process exited with 
>status 3221225477 -- Restarting.
>[Wed Nov 19 08:53:31 2003] [notice] Parent: Created child process 4304
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Child process is running
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Acquired the start mutex.
>[Wed Nov 19 08:53:32 2003] [notice] Child 4304: Starting 250 worker threads.
>
>This happens directly before the first occurence of the problem (I've 
>taken off the date, [error], [client ip-address]:
>PythonHandler jToolkit.web: Traceback (most recent call last):, referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\mod_python\apache.py", line 332, in 
>HandlerDispatch
>    result = object(req), referer: http://amvjoslbook/srf/grid.htm?  
>&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 99, in 
>handler
>    server = getserver(modulename, instancename), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web:   File 
>"D:\Python22\Lib\site-packages\jToolkit\web\__init__.py", line 82, in 
>getserver
>    raise AttributeError(errormessage), referer: 
>http://amvjoslbook/srf/grid.htm?&TIMEFILTERENDDATE=19/11/03 08:53:22
>PythonHandler jToolkit.web: AttributeError: module 
>'jLogbook.python.config' has no attribute 'AmerivenIndexPage'
>
>I made it print out the contents of the module at this point in the 
>error log:
>module is <module 'jLogbook.python.config' from 
>'D:\Python22\lib\site-packages\jLogbook\python\config.pyc'>, attributes 
>are ['ADOProviders', '__builtins__', '__doc__', '__file__', '__name__', 
>'os', 'sys']
>This seems to indicate that only half of this module was imported... 
>perhaps because one of the other imports failed (these seem to be some 
>win32 extension modules)
>
>I was wondering if anyone else has experienced problems with Apache 
>restarting, and why this happens...
>
>David
>
>
>_______________________________________________
>Mod_python mailing list
>Mod_python@modpython.org
>http://mailman.modpython.org/mailman/listinfo/mod_python
>
>  
>


From davidf at sjsoft.com  Mon Nov 24 14:25:20 2003
From: davidf at sjsoft.com (David Fraser)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <200311241013.31596.gwidion@mpc.com.br>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br>
Message-ID: <3FC1F8B0.1010001@sjsoft.com>

Joao S. O. Bueno wrote:

>Hi there.
>
>I am actually implementing this in the very first mod python app I am 
>developing.
>
>
>You actually have to override the Auth Handler from apache with a 
>Python Module. 
>
>If you google for it, you will be offered a lot of ready-made session 
>control stuff, as part of existing packages.
>
>It is not, however, that hard to implement form scratch. Here is my 
>.htaccess:
>
>  AddHandler python-program .py
> PythonHandler dummy
> PythonAuthenHandler verify
>
>
>As you can see, the PythonAuthenHandler is "verify.py" which is 
>called. (inside it, the authenhandler() function is called)
>
>I them encode some session data (like originating IP + user password) 
>to generate a MD5 hashed cookie I send to the browser to further 
>authentication. In the server, I save a session ID file with  the 
>session data, and regenerate the cookie at each page load (which goes 
>thru the "AuthenHandler" again) and compare it with the browser-sent 
>cookie.
>
>One thing I am still trying to find out is how to detect when the 
>person navigate to another site  - in which case, the session should 
>be terminated. I mean: I cannot allow that once in other site one can 
>be back in the secure section by hitting "back".
>
>As of the time, I plan to implement this thru a javascript that will 
>destroy the cookie in a "unload()" event. But I would appreciate more 
>suggestions.
>  
>
The questions is, what do you mean by being in another site?
Someone can easily be in multiple sites at once.
Maybe what you want is a timeout so if someone hasn't used their session 
for 10 minutes they have to log in again

David

>
>Regards,
>
>	JS
>	-><-
>
>
>On Saturday 22 November 2003 20:13, martin.clausen@privat.dk wrote:
>  
>
>>How do I do form-based authentication using mod_python / Apache. I
>>would like to use Apaches authentication mechanism(as used in the
>>mod_pyhton manual(release 3.0.3), but would like a form-based
>>login/password solution instead of the pop-up - is that possible ?
>>
>>The only solution I have been able to find after a lot of googling
>>and mailing list searches is to use javascript to prefix the login
>>and password to the request from a form on a "cover" page, but
>>besides from the inelegance inhenrent in this solution and the
>>security risk in transmitting the password as part of the request,
>>it would not prevent the pop-up from appearing if someone requested
>>the login script directly.
>>
>>Any help is appreciated, also if the you have a solution for
>>form-based authentication that does not use Apache.
>>
>>Regards,
>>
>>Martin
>>
>>_______________________________________________
>>Mod_python mailing list
>>Mod_python@modpython.org
>>http://mailman.modpython.org/mailman/listinfo/mod_python
>>    
>>
>
>  
>


From gwidion at mpc.com.br  Mon Nov 24 11:15:14 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC1F8B0.1010001@sjsoft.com>
References: <20031122221353.BGWK24036.fepF.post.tele.dk@localhost.localdomain>
	<200311241013.31596.gwidion@mpc.com.br> <3FC1F8B0.1010001@sjsoft.com>
Message-ID: <200311241115.14240.gwidion@mpc.com.br>

On Monday 24 November 2003 10:25, David Fraser wrote:
> Joao S. O. Bueno wrote:

> The questions is, what do you mean by being in another site?
> Someone can easily be in multiple sites at once.
> Maybe what you want is a timeout so if someone hasn't used their
> session for 10 minutes they have to log in again
>
> David

What must be avoided is that one does get back to the secure session 
by hitting the "back" button.
I will also put timeout controls, but only them will  be far from the 
ideal situation. 

BTW, I forgot to mention, I have to use apache 2.7.8 in apache 1.3, so 
I have no resource to mod_python session facilities.

Regards,

	JS
	-><-


From randallk at cpsc.ucalgary.ca  Mon Nov 24 09:37:03 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <12600642.1069662777616.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311240909230.8753-100000@csl>




On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Which python version are you using?
> 
> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> 
> Check it with
> import sys
> print sys.version
> 

Yep, they're the same:

apache:
[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured

vs.
python -v

Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2

(and there's only one 2.3.2 installed ).

sys.path is identical for both as well ( except for the script's own directory, which is
chrooted to htdocs by apache as expected.)

Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.

python 2.3.2
pyPgSQL 2.4
mod_python 3.1.2b
apache 2.0.48
postgresql 7.4

Keith

> 
> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >Hi,
> >
> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
> >the session handling stuff.
> >
> >When I try to connect to my postgresql database in the following way:
> >
> >from pyPgSQL import PgSQL
> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
> >
> >
> >Apache error_log says:
> >
> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
> >
> >and indeed when I do a dir(pgSQL), it lists no connect function.
> >When I do the same outside apache/mod_python I can see the connect function.
> >
> >Any thoughts?
> >
> >
> >dir(PgSQL)
> >running within mod_python:
> >
> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
> >
> >dir(PgSQL)
> >running outside mod_python:
> >
> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
> >'threadsafety', 'version', 'weakref']
> >
> >
> >httpd.conf:
> >
> >LoadModule python_module /var/www2/modules/mod_python.so
> ><Directory /var/www2/htdocs/billing>  
> >SetHandler python-program
> >PythonHandler mod_python.publisher
> ></Directory>
> >
> >
> >_______________________________________________
> >Mod_python mailing list
> >Mod_python@modpython.org
> >http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
> 


From neel at mediapulse.com  Mon Nov 24 13:55:41 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>

I'm usally surprised by how many web developers do not fully understand
how authencation works over http.

First you have to understand it is truly impossible to create a secure
connection when you have no control over the client.  Worse, the
"connection" is not a connection at all, but a series of connection so
we have to check the auth for each and every one of them.

The best setup you can have is http-auth over an SSL connection.  The
login info is never written to disk on the client side.  The downside is
the browser will remember the login info until it is closed.  Also, if
the connection is not encryped (ssl), then a packet sniffer can get the
login info from the heards sent by the client.

Sadly there is no way to take login fields on a form and pass the to the
client headers as would happen in http-auth.  Because the connection is
statless, you must then store this login info in cookies, hidden fields,
or on the server and pass the client a session key in hidden fields or a
cookie.

Besides watching with a packet sniffer for headers to get the login
info, you can also get the cookie stored on the client system as well.
Browsers may write session cookies to disk, even though there is no
need.  Firebird does this, and even remembers session cookies after it
is closed and re-opened (which I assume is a bug, but none the less it
does do it).

So what can you do if you want the sexy login fields, but still be
secure (as is possible)?  A lot of things, we may not be able to be 100%
secure, but that doesn't mean we have to make it easy.  Here is
something things to do (many thanks to the Albatross developers for
showing me much of this):

1.  Build a string or object with as much detail about the client as
possible, (IP, user-agent, timestamp).
2.  take this string/object gzip it (we have a space limit)
3.  Sign this string with MD5 and a key only the server will ever know.
4.  base64 encode the signed string to make sure all characters are
legit.

...now when we decode the cookie...

1.  base64 decode it, and check our md5 sig
2.  ungzip the string and parse it back to it's object/string form
3.  make sure the IP, user-agent match the current request
4.  make sure the timestamp is within our limit for a login

Now even if someone gets a copy of the cookie, if they don't know the
MD5 key they can't alter it.  Most likely their ip and or user-agent
won't match either, but if it does the odds are the timeout may have
been reached already, esp if it's kept low like 5 or 10 minutes.

Mike

From michael at dynamine.net  Mon Nov 24 11:10:44 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC257B4.4050606@dynamine.net>

Michael C. Neel wrote:

> So what can you do if you want the sexy login fields, but still be
> secure (as is possible)?  A lot of things, we may not be able to be 100%
> secure, but that doesn't mean we have to make it easy.  Here is
> something things to do (many thanks to the Albatross developers for
> showing me much of this):
> 
> 1.  Build a string or object with as much detail about the client as
> possible, (IP, user-agent, timestamp).
> 2.  take this string/object gzip it (we have a space limit)
> 3.  Sign this string with MD5 and a key only the server will ever know.
> 4.  base64 encode the signed string to make sure all characters are
> legit.
> 
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

This is pretty much what the Session handling code in mod_python does 
now, so there's really no need to bother re-inventing the wheel :-)

PS - Grisha, nice job implementing the Session classes.  I couldn't have 
done it better myself, and the code is a nice example of metaclasses and 
subclassing native types that's not well covered in the Python 2.2 
documentation.  (I had to read the PEPs to understand what was going on, 
but it was a rewarding process.)

--Michael

From cs1spw at bath.ac.uk  Mon Nov 24 13:56:15 2003
From: cs1spw at bath.ac.uk (Simon Willison)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <3FC2625F.9090906@bath.ac.uk>

Michael C. Neel wrote:
> ...now when we decode the cookie...
> 
> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login

One potential problem with checking the IP is that some people access 
the internet through a rotating proxy, meaning that subsequent requests 
might come from a different IP address (I've heard AOL does this). One 
way around this would be to check that at least the first two parts of 
the IP address stayed the same as only the last two would be likely to 
change if a rotating proxy was in use.

From dpopowich at mtrsd.k12.ma.us  Mon Nov 24 15:10:15 2003
From: dpopowich at mtrsd.k12.ma.us (Daniel J. Popowich)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <3FC2625F.9090906@bath.ac.uk>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
	<3FC2625F.9090906@bath.ac.uk>
Message-ID: <16322.26023.955700.179682@gargle.gargle.HOWL>

Simon Willison writes:
> Michael C. Neel wrote:
> > ...now when we decode the cookie...
> > 
> > 1.  base64 decode it, and check our md5 sig
> > 2.  ungzip the string and parse it back to it's object/string form
> > 3.  make sure the IP, user-agent match the current request
> > 4.  make sure the timestamp is within our limit for a login
> 
> One potential problem with checking the IP is that some people access 
> the internet through a rotating proxy, meaning that subsequent requests 
> might come from a different IP address (I've heard AOL does this). One 
> way around this would be to check that at least the first two parts of 
> the IP address stayed the same as only the last two would be likely to 
> change if a rotating proxy was in use.

But the people most likely to steal your identity through packet
sniffing are the people on your own subnet; the teenage hacker down
the street looking for a thrill.  That hacker, being on the same
subnet, would have the same network address and thus match the first
few octects of the ip addr.

Dan

From jciccale at mac.com  Mon Nov 24 23:38:06 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
Message-ID: <11947283.1069713486905.JavaMail.jciccale@mac.com>

Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.

- julcicc -
 
On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:

>
>
>
>On Mon, 24 Nov 2003, Julian Ciccale wrote:
>
>> Which python version are you using?
>> 
>> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
>> 
>> Check it with
>> import sys
>> print sys.version
>> 
>
>Yep, they're the same:
>
>apache:
>[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
>
>vs.
>python -v
>
>Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
>[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
>
>(and there's only one 2.3.2 installed ).
>
>sys.path is identical for both as well ( except for the script's own directory, which is
>chrooted to htdocs by apache as expected.)
>
>Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
>
>python 2.3.2
>pyPgSQL 2.4
>mod_python 3.1.2b
>apache 2.0.48
>postgresql 7.4
>
>Keith
>
>> 
>> On Monday, November 24, 2003, at 07:02AM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
>> 
>> >
>> >Hi,
>> >
>> >I have a script that works fine with mod_python 2.7.8 + apache 1.3.28,
>> >and I want to run it under apache 2.0.48 with mod_python 3.1.2b for
>> >the session handling stuff.
>> >
>> >When I try to connect to my postgresql database in the following way:
>> >
>> >from pyPgSQL import PgSQL
>> >pdb = PgSQL.connect( host = 'foo' , port='5432',database='foo',user='joe')
>> >
>> >
>> >Apache error_log says:
>> >
>> >PythonHandler mod_python.publisher: AttributeError: 'module' object has no attribute 'connect'
>> >
>> >and indeed when I do a dir(pgSQL), it lists no connect function.
>> >When I do the same outside apache/mod_python I can see the connect function.
>> >
>> >Any thoughts?
>> >
>> >
>> >dir(PgSQL)
>> >running within mod_python:
>> >
>> >['BooleanType', 'BufferType', 'BuiltinFunctionType',
>> >'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType',
>> >'DateTime', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType',
>> >'GeneratorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType',
>> >'LongType', 'MethodType', 'ModuleType', 'NoneType',
>> >'NotImplementedType', 'ObjectType', 'SliceType', 'StringType',
>> >'StringTypes', 'TracebackType', 'TupleType', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__',
>> >'__doc__', '__file__', '__name__', 'copy', 'getdefaultencoding',
>> >'getrefcount', 'new', 'noWeakRef', 're', 'string', 'sys', 'weakref']
>> >
>> >dir(PgSQL)
>> >running outside mod_python:
>> >
>> >['BAD_RESPONSE', 'BINARY', 'BOOLEAN', 'BooleanType', 'BufferType',
>> >'BuiltinFunctionType', 'BuiltinMethodType', 'COMMAND_OK',
>> >'CONNECTION_BAD', 'CONNECTION_OK', 'COPY_IN', 'COPY_OUT', 'ClassType',
>> >'CodeType', 'ComplexType', 'Connection', 'Cursor', 'DATETIME',
>> >'DBAPITypeObject', 'DataError', 'DatabaseError', 'Date',
>> >'DateFromTicks', 'DateTime', 'DateTimeDelta', 'DateTimeDeltaType',
>> >'DateTimeType', 'DictProxyType', 'DictType', 'DictionaryType',
>> >'EMPTY_QUERY', 'EllipsisType', 'Error', 'FATAL_ERROR', 'FileType',
>> >'FloatType', 'FrameType', 'FunctionType', 'GeneratorType',
>> >'HAVE_LONG_LONG_SUPPORT', 'INV_READ', 'INV_SEEK_CUR', 'INV_SEEK_END',
>> >'INV_SEEK_SET', 'INV_WRITE', 'InstanceType', 'IntType',
>> >'IntegrityError', 'InterfaceError', 'InternalError', 'LambdaType',
>> >'ListType', 'LongType', 'MethodType', 'ModuleType', 'NONFATAL_ERROR',
>> >'NUMBER', 'NoneType', 'NotImplementedType', 'NotSupportedError',
>> >'OTHER', 'ObjectType', 'OperationalError', 'PG_ABSTIME', 'PG_ACLITEM',
>> >'PG_BIGINT', 'PG_BLOB', 'PG_BOOL', 'PG_BOX', 'PG_BPCHAR', 'PG_BYTEA',
>> >'PG_CASH', 'PG_CHAR', 'PG_CID', 'PG_CIDR', 'PG_CIRCLE', 'PG_DATE',
>> >'PG_FLOAT', 'PG_FLOAT4', 'PG_FLOAT8', 'PG_False', 'PG_INET',
>> >'PG_INT2', 'PG_INT2VECTOR', 'PG_INT4', 'PG_INT8', 'PG_INTEGER',
>> >'PG_INTERVAL', 'PG_LINE', 'PG_LSEG', 'PG_MACADDR', 'PG_MONEY',
>> >'PG_NAME', 'PG_NUMERIC', 'PG_OID', 'PG_OIDVECTOR', 'PG_PATH',
>> >'PG_POINT', 'PG_POLYGON', 'PG_REFCURSOR', 'PG_REGPROC', 'PG_RELTIME',
>> >'PG_ROWID', 'PG_SMALLINT', 'PG_TEXT', 'PG_TID', 'PG_TIME',
>> >'PG_TIMESTAMP', 'PG_TIMESTAMPTZ', 'PG_TIMETZ', 'PG_TINTERVAL',
>> >'PG_True', 'PG_UNKNOWN', 'PG_VARBIT', 'PG_VARCHAR', 'PG_XID',
>> >'PG_ZPBIT', 'POLLING_ACTIVE', 'POLLING_FAILED', 'POLLING_OK',
>> >'POLLING_READING', 'POLLING_WRITING', 'PQconndefaults', 'PQconnectdb',
>> >'PQftypeName', 'PQresStatus', 'PQresType', 'PgArray', 'PgBoolean',
>> >'PgBooleanFromInteger', 'PgBooleanFromString', 'PgBooleanType',
>> >'PgBytea', 'PgConnectionType', 'PgInt2', 'PgInt2Type', 'PgInt8',
>> >'PgInt8Type', 'PgLargeObject', 'PgLargeObjectType', 'PgMoney',
>> >'PgNumeric', 'PgOther', 'PgQuoteBytea', 'PgQuoteString',
>> >'PgResultSet', 'PgResultType', 'PgTypes', 'PgUnQuoteBytea',
>> >'PgVersion', 'PgVersionType', 'ProgrammingError', 'RESULT_DDL',
>> >'RESULT_DML', 'RESULT_DQL', 'RESULT_EMPTY', 'RESULT_ERROR', 'ROWID',
>> >'STRING', 'SliceType', 'StringType', 'StringTypes', 'TUPLES_OK',
>> >'Time', 'TimeFromTicks', 'Timestamp', 'TimestampFromTicks',
>> >'TracebackType', 'TupleType', 'TypeCache', 'TypeType',
>> >'UnboundMethodType', 'UnicodeType', 'Warning', 'XRangeType',
>> >'__builtins__', '__doc__', '__file__', '__name__', '_handleArray',
>> >'_quote', '_quoteall', 'apilevel', 'connect', 'copy',
>> >'dateTimeDelta2Interval', 'fetchReturnsList', 'getdefaultencoding',
>> >'getrefcount', 'libpq', 'make_PgResultSetClass', 'new',
>> >'noPostgresCursor', 'noWeakRef', 'paramstyle', 're', 're_4UP',
>> >'re_DQL', 're_DRI', 're_DRT', 'replace', 'string', 'sys',
>> >'threadsafety', 'version', 'weakref']
>> >
>> >
>> >httpd.conf:
>> >
>> >LoadModule python_module /var/www2/modules/mod_python.so
>> ><Directory /var/www2/htdocs/billing>  
>> >SetHandler python-program
>> >PythonHandler mod_python.publisher
>> ></Directory>
>> >
>> >
>> >_______________________________________________
>> >Mod_python mailing list
>> >Mod_python@modpython.org
>> >http://mailman.modpython.org/mailman/listinfo/mod_python
>> >
>> >
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>> 
>
>
>
>
From randallk at cpsc.ucalgary.ca  Mon Nov 24 16:53:31 2003
From: randallk at cpsc.ucalgary.ca (Keith Randall)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Wierd pyPGSQL stuff with mod_python 3.1.2b
In-Reply-To: <11947283.1069713486905.JavaMail.jciccale@mac.com>
Message-ID: <Pine.LNX.4.44.0311241651070.30459-100000@csl>


Yep, new apache was running as different user, without linker path with libpq.  ;P
Thanks a lot.
Keith



On Mon, 24 Nov 2003, Julian Ciccale wrote:

> Have you checked apache's error_log? May be some "C" python module isn't loading in apache by some reason (probably LD_LIBRARY_PATH) or something.
> 
> - julcicc -
>  
> On Monday, November 24, 2003, at 05:37PM, Keith Randall <randallk@cpsc.ucalgary.ca> wrote:
> 
> >
> >
> >
> >On Mon, 24 Nov 2003, Julian Ciccale wrote:
> >
> >> Which python version are you using?
> >> 
> >> Are you sure the python interpreter that you use from the command line and the one that gets called wihthin httpd are the same?
> >> 
> >> Check it with
> >> import sys
> >> print sys.version
> >> 
> >
> >Yep, they're the same:
> >
> >apache:
> >[Mon Nov 24 09:05:06 2003] [notice] Apache/2.0.48 (Unix) mod_python/3.1.2b Python/2.3.2 configured
> >
> >vs.
> >python -v
> >
> >Python 2.3.2 (#2, Nov 12 2003, 23:39:57)
> >[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-5)] on linux2
> >
> >(and there's only one 2.3.2 installed ).
> >
> >sys.path is identical for both as well ( except for the script's own directory, which is
> >chrooted to htdocs by apache as expected.)
> >
> >Also the path to pyPgSQL is readable by all, everything was built from source, no rpms.
> >
> >python 2.3.2
> >pyPgSQL 2.4
> >mod_python 3.1.2b
> >apache 2.0.48
> >postgresql 7.4
> >

From gwidion at mpc.com.br  Tue Nov 25 00:32:40 2003
From: gwidion at mpc.com.br (Joao S. O. Bueno)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CB@johnson.mediapulse.net>
Message-ID: <200311250032.40790.gwidion@mpc.com.br>

On Monday 24 November 2003 16:55, Michael C. Neel wrote:

> 1.  base64 decode it, and check our md5 sig
> 2.  ungzip the string and parse it back to it's object/string form
> 3.  make sure the IP, user-agent match the current request
> 4.  make sure the timestamp is within our limit for a login
>
> Now even if someone gets a copy of the cookie, if they don't know
> the MD5 key they can't alter it.  Most likely their ip and or
> user-agent won't match either, but if it does the odds are the
> timeout may have been reached already, esp if it's kept low like 5
> or 10 minutes.
>
> Mike


Wow...I got it all right without asking.
>From everything you wrote, the only thing I did not do was: encode the 
user agent string - I just used the client IP.
And I did not use GZIP because the MD5 hash has got a fixed length.

Oh..no..let's see...it is a bit different, what I had done:
1) pick up login time, client IP, server side Key, random session ID 
strings and save them server side
2) generate a MD5 hash from the above and use it as a cookie.
3) at each page load, pick the cookie, and compare it with one 
regenerated from strings saved on the server side, (and client IP). 
If there is no time out, and the hashed strings matched, serve the 
page.


Again, I am not  using mod_python's sessions because I am restricted 
to mod_python 2.7.x for this project.

Regards,

	JS
	-><-




From dwmp at opti.cgi.net  Mon Nov 24 22:53:46 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] PSP imports
Message-ID: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>


It appears as though the PSP module doesn't check dependencies for 
modification times.  If I create a module and reference it from a PSP page 
and make a request for the page, then I change the module and make a second 
request the module is not reloaded.  Has this been overlooked or is this a 
'feature'?

Also, it appears as though the PSP module prefers to store its cached 
compiled code in a DBM file instead of memory.  Why bother with a DBM 
file?  So long as each Apache process is setup to handle a sufficiently 
large number of requests before killing itself then wouldn't a memory only 
solution be faster, especially in the worker process model?  It seems a 
little strange that DBM is preferred over memory storage.

-Dan


From grisha at modpython.org  Tue Nov 25 00:22:54 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <20031125001750.R36241@onyx.ispol.com>


On Mon, 24 Nov 2003, Dan W. wrote:

> It appears as though the PSP module doesn't check dependencies for
> modification times.  If I create a module and reference it from a PSP
> page and make a request for the page, then I change the module and make
> a second request the module is not reloaded.  Has this been overlooked
> or is this a 'feature'?

it's a feature of Python (not mod_python) ;-)

if you want the module properly reloaded when it changes, import it like
this:

mymodule = apache.import_module('mymodule')

> Also, it appears as though the PSP module prefers to store its cached
> compiled code in a DBM file instead of memory.

Not unless you tell it so. By default it's memory.

http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html

HTH,

Grisha
From dwmp at opti.cgi.net  Mon Nov 24 23:43:01 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>

At 12:22 AM 11/25/2003 -0500, you wrote:

>On Mon, 24 Nov 2003, Dan W. wrote:
>
> > It appears as though the PSP module doesn't check dependencies for
> > modification times.  If I create a module and reference it from a PSP
> > page and make a request for the page, then I change the module and make
> > a second request the module is not reloaded.  Has this been overlooked
> > or is this a 'feature'?
>
>it's a feature of Python (not mod_python) ;-)
>
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

Ahhh, Ok.  I guess that means I can't use the form:

from mypackage.mymodule import *


I have not yet familiarized myself with the source enough to say, but it 
would be nice to have a command which when supplied at the beginning of a 
PSP file would tell it to autoreimport.  Maybe something like:

<%
psp.autoreimport(true)
%>
<html>
...

I've played around with replacing the builtin _import with a home grown 
import function to do just this in a different project.  Perhaps it could 
be done here too.  Perhaps after I become more familiar with the source 
I'll be able to help out to that end.



> > Also, it appears as though the PSP module prefers to store its cached
> > compiled code in a DBM file instead of memory.
>
>Not unless you tell it so. By default it's memory.
>
>http://www.modpython.org/live/mod_python-3.1.2b/doc-html/pyapi-psp.html


Sorry, I must have read the source wrong.  I'll have to take another look.

-Dan

From dwmp at opti.cgi.net  Tue Nov 25 00:36:03 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2EE6F.8080601@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>

At 09:53 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>Ahhh, Ok.  I guess that means I can't use the form:
>>from mypackage.mymodule import *
>
>It's a good idea to avoid that type of namespace pollution anyway, as it 
>can often lead to conflicts.  It also detracts from code readability 
>(avoiding the dreaded "where did that name come from again?" question when 
>doing code reviews is a good thing, IMHO).
>
>--Michael

That's a good point Michael.  That was probably a bad habit to pick 
up.  However, I think a overloaded import could still be 
useful.  Overloading the builtin import would allow a PSP file to control 
autoreloading for its entire dependency tree (modules which call other 
modules, etc.).  This would allow one to easily turn autoreloading on 
during development and to easily turn it off for production deployment.

I'm still cutting my teeth on the mod_python code base, but figured I'd 
throw that idea out there in the mean time.

-Dan

From michael at dynamine.net  Mon Nov 24 22:43:43 2003
From: michael at dynamine.net (Michael S. Fischer)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <3FC2FA1F.20905@dynamine.net>

Dan W. wrote:

> That's a good point Michael.  That was probably a bad habit to pick up.  
> However, I think a overloaded import could still be useful.  Overloading 
> the builtin import would allow a PSP file to control autoreloading for 
> its entire dependency tree (modules which call other modules, etc.).  
> This would allow one to easily turn autoreloading on during development 
> and to easily turn it off for production deployment.

Consider that you might want not to use PSP.  I've actually found that 
it gets in the way of the separation of code and content, which is 
important when the designer and the coder are two different people.

I design my mod_python apps like so:

template = """
<html>
...
<!-- have the designers place %(variable)s where necessary
      in the template for doing performing substitution
      during the processing phase -->
</html>
"""

def handler(req):
   # Reload modules here if necessary
   # Code goes here
   # If you want to override the template, you can fetch it from the file
   # system
   req.write(template % vars())

Of course, if you're already married to the PSP solution, then there you 
have it...

--Michael

From dwmp at opti.cgi.net  Tue Nov 25 01:04:22 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
 <5.2.1.1.2.20031125001637.03502e20@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031125005652.010c6008@mail.pyxos.com>

At 10:43 PM 11/24/2003 -0800, you wrote:
>Dan W. wrote:
>
>>That's a good point Michael.  That was probably a bad habit to pick up.
>>However, I think a overloaded import could still be useful.  Overloading 
>>the builtin import would allow a PSP file to control autoreloading for 
>>its entire dependency tree (modules which call other modules, etc.).
>>This would allow one to easily turn autoreloading on during development 
>>and to easily turn it off for production deployment.
>
>Consider that you might want not to use PSP.  I've actually found that it 
>gets in the way of the separation of code and content, which is important 
>when the designer and the coder are two different people.
>
>I design my mod_python apps like so:
>
>template = """
>...
>"""
>
>def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
>Of course, if you're already married to the PSP solution, then there you
>have it...


Thanks for the advice.  I'm not married to anything yet.  I'm moving from 
an in-house Python based application server to mod_python and PSP just 
seemed like the a natural move.  My plan was to build most of the dynamic 
code in python modules and then simply insert html into the templates with 
PSP expression syntax.  I can see where writing my own handler for these 
things would have advantages, but on the other hand I don't want to 
reinvent the wheel.  I'll play with that a bit.

-Dan

From neel at mediapulse.com  Tue Nov 25 10:50:58 2003
From: neel at mediapulse.com (Michael C. Neel)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
Message-ID: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>

> And I did not use GZIP because the MD5 hash has got a fixed length.
> 
Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
a secret string and the data.  Here is the methods from albatross:

    def sign(self, text):
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        text = m.digest() + text
        return text

    def unsign(self, text):
        digest = text[:16]
        text = text[16:]
        m = md5.new()
        m.update(self.__secret)
        m.update(text)
        if m.digest() == digest:
            return text
        return ''

You can of course store the text server side and just pass the client
the MD5 hash/key, you just have to have a way to clear out old session
files and also make sure you have enough disk space for the amount of
sessions you expect.

Mike

From tropezien at croxx.de  Tue Nov 25 16:14:01 2003
From: tropezien at croxx.de (tropezien@croxx.de)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] ValueError: Failed to acquire global mutex lock
Message-ID: <27667116$10697725673fc36f17e5bce0.87890966@config18.schlund.de>


"Gregory (Grisha) Trubetskoy" <grisha@modpython.org> schrieb am
24.11.2003, 02:12:42:
> 
> 
> On Sun, 23 Nov 2003, Tropezien wrote:
> 
> > Yes, I am running Slackware 9.1 with Apache 2.0.47 and mod_python
> > 3.1.2b. Some further investigations cleared up that mod_python tries to
> > get more than 400 semaphores during launch of httpd.
> 
> Are you sure? 3.1.2b is not supposed to allocate more than MAX_LOCKS
> semaphores, which is 32. What does your log say when you start httpd?
> 
Yes, you are right. The previously installed mod_python-3.1.0a made was
the culprit for my mentioned change in sysctl.conf. I have reset the
maximum amount of semaphores to the original value and mod_python starts
as well as before.

Ciao, Georg
From jciccale at mac.com  Wed Nov 26 01:33:10 2003
From: jciccale at mac.com (Julian Ciccale)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] 
	Request object attribute "content_type" does not support UNICODE
	STRINGS
Message-ID: <12054078.1069806790832.JavaMail.jciccale@mac.com>

When I try to set content_type to a unicode string, it gives a TypeError saying that content_type can only be string. I don't know if this is correct. Although content types will not use any hich codes, in my case the content-type value I read it from an XML file that IS in Unicode, therefore I must convert it using str() which I dont like cause if I get anything there that is not really string (Unicode or Normal) python will anyway convert it.
Is this behaviour expected?
From grisha at modpython.org  Tue Nov 25 21:45:35 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] PSP imports
In-Reply-To: <3FC2FA1F.20905@dynamine.net>
References: <5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
	<5.2.1.1.2.20031124233251.0401a008@mail.pyxos.com>
	<3FC2FA1F.20905@dynamine.net>
Message-ID: <20031125213815.V52007@onyx.ispol.com>


One of the ways to use PSP, which probably isn't immediately obvious from
the documentation, is as a templating system, e.g. configuring mod_python
to use the publisher handler, then have something like:

def hello(req):

    vars = {"menu": build_menu(),
            "blah": enormously_complex_function(),
            "body": psp.PSP(req, 'templates/body_tmpl.html')}

    return psp.PSP(req, 'templates/main_frame.html', vars=vars)


In this example 'body_tmpl.html' and 'main_fram.html' are PSP.

I've had pretty good luck with this approach precisely because it seems to
have a clear separation of logic and presentation.

Grisha


On Mon, 24 Nov 2003, Michael S. Fischer wrote:

> Dan W. wrote:
>
> > That's a good point Michael.  That was probably a bad habit to pick up.
> > However, I think a overloaded import could still be useful.  Overloading
> > the builtin import would allow a PSP file to control autoreloading for
> > its entire dependency tree (modules which call other modules, etc.).
> > This would allow one to easily turn autoreloading on during development
> > and to easily turn it off for production deployment.
>
> Consider that you might want not to use PSP.  I've actually found that
> it gets in the way of the separation of code and content, which is
> important when the designer and the coder are two different people.
>
> I design my mod_python apps like so:
>
> template = """
> <html>
> ...
> <!-- have the designers place %(variable)s where necessary
>       in the template for doing performing substitution
>       during the processing phase -->
> </html>
> """
>
> def handler(req):
>    # Reload modules here if necessary
>    # Code goes here
>    # If you want to override the template, you can fetch it from the file
>    # system
>    req.write(template % vars())
>
> Of course, if you're already married to the PSP solution, then there you
> have it...
>
> --Michael
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:53:28 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:23 2004
Subject: [mod_python] Form-based authentication using mod_puthon / Apache
In-Reply-To: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
References: <C0FC22C08B82074A88B500617641577787A7CD@johnson.mediapulse.net>
Message-ID: <20031125214631.Q52007@onyx.ispol.com>


BTW, the python standard library now includes an hmac module:

http://www.python.org/doc/current/lib/module-hmac.html

Which is functionally similar to using md5 directly, only in a
well-researched and standardized way.

Grisha

On Tue, 25 Nov 2003, Michael C. Neel wrote:

> > And I did not use GZIP because the MD5 hash has got a fixed length.
> >
> Not MD5 Hash it, but sign it with MD5.  Basically build an MD5 hash from
> a secret string and the data.  Here is the methods from albatross:
>
>     def sign(self, text):
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         text = m.digest() + text
>         return text
>
>     def unsign(self, text):
>         digest = text[:16]
>         text = text[16:]
>         m = md5.new()
>         m.update(self.__secret)
>         m.update(text)
>         if m.digest() == digest:
>             return text
>         return ''
>
> You can of course store the text server side and just pass the client
> the MD5 hash/key, you just have to have a way to clear out old session
> files and also make sure you have enough disk space for the amount of
> sessions you expect.
>
> Mike
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Tue Nov 25 21:56:55 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <12054078.1069806790832.JavaMail.jciccale@mac.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
Message-ID: <20031125215458.B52007@onyx.ispol.com>


Interesting question. I don't know the answer. Is content-type really
supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
I may be wrong). If anyone knows and has RFC references, etc - please
pitch in.

Grisha

On Wed, 26 Nov 2003, Julian Ciccale wrote:

> When I try to set content_type to a unicode string, it gives a TypeError
> saying that content_type can only be string. I don't know if this is
> correct. Although content types will not use any hich codes, in my case
> the content-type value I read it from an XML file that IS in Unicode,
> therefore I must convert it using str() which I dont like cause if I get
> anything there that is not really string (Unicode or Normal) python will
> anyway convert it. Is this behaviour expected?
> _______________________________________________ Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From martin_ostr at hotmail.com  Wed Nov 26 00:12:27 2003
From: martin_ostr at hotmail.com (martin ostrovsky)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] Maintaining db connections
Message-ID: <BAY7-F43goLMJop8PgM00010b1f@hotmail.com>

An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/8054341d/attachment-0003.htm
From manfred.stienstra at dwerg.net  Wed Nov 26 08:30:52 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031125215458.B52007@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <20031125215458.B52007@onyx.ispol.com>
Message-ID: <1069831852.4684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> Interesting question. I don't know the answer. Is content-type really
> supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> I may be wrong). If anyone knows and has RFC references, etc - please
> pitch in.

Rfc 1945 (http 1.0) states:

       	HTTP-header    = field-name ":" [ field-value ] CRLF

       	field-name     = token
       	field-value    = *( field-content | LWS )

       	field-content  = <the OCTETs making up the field-value
                        and consisting of either *TEXT or combinations
                        of token, tspecials, and quoted-string>

       	TEXT           = <any OCTET except CTLs,
                        but including LWS>
	OCTET          = <any 8-bit sequence of data>
       	CHAR           = <any US-ASCII character (octets 0 - 127)>

       	Content-Type   = "Content-Type" ":" media-type
	
	media-type     = type "/" subtype *( ";" parameter )
       	type           = token
       	subtype        = token

       	parameter      = attribute "=" value
       	attribute      = token
       	value          = token | quoted-string
	
	token          = 1*<any CHAR except CTLs or tspecials>

       	tspecials      = "(" | ")" | "<" | ">" | "@"
                      | "," | ";" | ":" | "\" | <">
                      | "/" | "[" | "]" | "?" | "="
                      | "{" | "}" | SP | HT
	
This means only us-ascii in the media-type, but any character in the field-content
in general. For more information:

http://www.faqs.org/rfcs/rfc1945.html
http://www.faqs.org/rfcs/rfc2616.html

Manfred

From vmanera at manord.com  Wed Nov 26 14:58:00 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] 
	Problem with Session module with multiple scriptalias not under t
	he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>

First of all my configuration<?xml:namespace prefix = o ns =
"urn:schemas-microsoft-com:office:office" />

 

>From httpd.conf:

.....

    DocumentRoot "E:/wwwroot/cartelle_sito_mdn"

....

    ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"

    ScriptAlias /produzione/ "E:/script/cgi/produzione/"

    ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

.........

    <Directory "E:/script/cgi/cgi-mpy">

...

                AddHandler python-program .py

                PythonHandler mod_python.publisher

            PythonPath ....

                PythonDebug on

                  #PythonOption ApplicationPath /cgi-mpy

               PythonOption SessionDbm
'E:/wwwroot/dati_autenticazione/sid/session.dbm'

   </Directory>

 

if I miss PythonOption ApplicationPath ... in any directory:

 

    def make_cookie(self):

            ....

        if config.has_key("ApplicationPath"):

            c.path = config["ApplicationPath"]

        else:

            docroot = self._req.document_root()

            # the path where *Handler directive was specified

            dirpath = self._req.hlist.directory 

            c.path = dirpath[len(docroot):]

 

so the req.headers_out generate this html heading for cgi-mpy scriptalias:

{'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
'Cache-Control': 'nocache="set-cookie"'}

 

where path=  because len(document root) :28 len (dirpath) 21

 

and in this way all work fine for all my scriptalias except for

 ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"

In this case len(dirpath) = 30 so path='/\'

And I make the first connection under this path any attempt to call url
under other scriptalias cause a new session because the hader miss the key
'Set-Cookie'....

 

So I tryed to use:

PythonOption ApplicationPath /cgi-mpy

PythonOption ApplicationPath /organizzazione

....

If my first connection is under cgi-mpy all work fine for all the url under
cgi-mpy, but any attempt to connect to un url under a different scriptalias
cause a new session

 

So I may choose to change orgenizzazione in organiz, or to modify the
session module: c.path=''

Any other suggestion?

 

Villiam Manera 
Dirett.  Sistema Informativo 

Manifatture del Nord srl 
viale Regina Elena 13-15 
42100 Reggio Emilia RE 
ITALY 

Tel. +39 0522 508200 
Fax +39 0522 514099 
email : vmanera@manord.com 
www.pennyblack.com 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mailman.modpython.org/pipermail/mod_python/attachments/20031126/83e74c70/attachment-0003.htm
From grisha at modpython.org  Wed Nov 26 15:55:19 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python]  Request object attribute "content_type" does not
 support UNICODE STRINGS
In-Reply-To: <1069831852.4684.11.camel@ack.dwerg.net>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	<1069831852.4684.11.camel@ack.dwerg.net>
Message-ID: <20031126155347.B64106@onyx.ispol.com>


So there is no problem with mod_python?

On Wed, 26 Nov 2003, Manfred Stienstra wrote:

> On Wed, 2003-11-26 at 03:56, Gregory (Grisha) Trubetskoy wrote:
> > Interesting question. I don't know the answer. Is content-type really
> > supposed to accept unicode? I thoguht all HTTP headers are ASCII only (but
> > I may be wrong). If anyone knows and has RFC references, etc - please
> > pitch in.
>
> Rfc 1945 (http 1.0) states:
>
>        	HTTP-header    = field-name ":" [ field-value ] CRLF
>
>        	field-name     = token
>        	field-value    = *( field-content | LWS )
>
>        	field-content  = <the OCTETs making up the field-value
>                         and consisting of either *TEXT or combinations
>                         of token, tspecials, and quoted-string>
>
>        	TEXT           = <any OCTET except CTLs,
>                         but including LWS>
> 	OCTET          = <any 8-bit sequence of data>
>        	CHAR           = <any US-ASCII character (octets 0 - 127)>
>
>        	Content-Type   = "Content-Type" ":" media-type
>
> 	media-type     = type "/" subtype *( ";" parameter )
>        	type           = token
>        	subtype        = token
>
>        	parameter      = attribute "=" value
>        	attribute      = token
>        	value          = token | quoted-string
>
> 	token          = 1*<any CHAR except CTLs or tspecials>
>
>        	tspecials      = "(" | ")" | "<" | ">" | "@"
>                       | "," | ";" | ":" | "\" | <">
>                       | "/" | "[" | "]" | "?" | "="
>                       | "{" | "}" | SP | HT
>
> This means only us-ascii in the media-type, but any character in the field-content
> in general. For more information:
>
> http://www.faqs.org/rfcs/rfc1945.html
> http://www.faqs.org/rfcs/rfc2616.html
>
> Manfred
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From grisha at modpython.org  Wed Nov 26 16:03:21 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python]  Problem with Session module with multiple
	scriptalias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
References: <52DC70C1C1575C418CB033523A29CF1497D5A4@exchange2000.manord.com>
Message-ID: <20031126155923.X64106@onyx.ispol.com>


You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url under
> cgi-mpy, but any attempt to connect to un url under a different scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>
From manfred.stienstra at dwerg.net  Wed Nov 26 22:19:08 2003
From: manfred.stienstra at dwerg.net (Manfred Stienstra)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python]  Request object attribute "content_type" does not
	support UNICODE STRINGS
In-Reply-To: <20031126155347.B64106@onyx.ispol.com>
References: <12054078.1069806790832.JavaMail.jciccale@mac.com>
	 <1069831852.4684.11.camel@ack.dwerg.net>
	 <20031126155347.B64106@onyx.ispol.com>
Message-ID: <1069881547.5684.11.camel@ack.dwerg.net>

On Wed, 2003-11-26 at 21:55, Gregory (Grisha) Trubetskoy wrote:
> So there is no problem with mod_python?

Setting content_type to a unicode string should not be possible. I don't
know how the other headers are implemented, but some of them are allowed
to contain strings other than us-ascii (but never above 8 bits). The
constraint in HTTP is that headers should never contain multibyte
characters (or should never have to be interpreted as being a multibyte
character), the strings have to contain 8 bit characters.

The problem with python is that a unicode object can contain characters
coming from any encoding, and can be converted to any other encoding.
This means that a unicode object with data coming from us-ascii could be
used in headers by silently encoding them to us-ascii, but this is not
recommended because it would cause a lot of confusion. Programmers
should encode unicode objects to us-ascii strings before using them as
header values.

In short: there is no problem.

Manfred

From gdamjan at mail.net.mk  Thu Nov 27 06:43:40 2003
From: gdamjan at mail.net.mk (Damjan)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] Mod_python disables mod_dav
Message-ID: <20031127054340.GA3835@legolas.on.net.mk>

I'm using Apache 2.0.48 (it happened to 2.0.47 too) with the built-in
mod_dav module and mod_python 3.1.2b/Python-2.3.2 and PHP/4.3.4.

I can't understand why but unless I disable mod_python (by commenting
the LoadModule directive), DAV will not work. It just returns a "405
Method is not allowed" error. 

I've tried different DAV setups and clients, and nothing - unless I
disable mod_python it wont work...

Now I think that with older versions of mod_python this did not happen -
but I'm not sure. I'll have to recheck that.

Does anyone know why this could happen?!?



-- 
Damjan Georgievski
jabberID: damjan@bagra.net.mk
From vmanera at manord.com  Fri Nov 28 18:08:11 2003
From: vmanera at manord.com (Manera, Villiam)
Date: Fri Jan  9 22:04:24 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
Message-ID: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>

I'm sorry but still don't work.
I'm removed all references to cgi and I moved all my directory with .py
under document root:

DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
<Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">

and with this new configuration req.headers_out:
{'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
and if I relod the page it never passed to req.headers_in

if I modify se session module:
def make_cookie(self):
	....
      c.path = ''   #dirpath[len(docroot):]
then req.headers_out become:
{'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
'Cache-Control': 'no-cache="set-cookie"'} 
and If I relod the page it go to req.headers_in:
{'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
'Keep-Alive', ...} 
and req.heades_out : {}

so why if something else then '' is in path the pysid wasn't writing into
the html heading? 

Villiam 


-----Messaggio originale-----
Da: Gregory (Grisha) Trubetskoy [mailto:grisha@modpython.org]
Inviato: mercoled? 26 novembre 2003 22.03
A: Manera, Villiam
Cc: mod_python@modpython.org
Oggetto: Re: [mod_python] Problem with Session module with multiple
scriptalias not under t he document root



You should start addressing this by removing all reference to CGI. You
don't need (and shouldn't use) any ScriptAlias directives to make
mod_python work, since it has nothing to do with CGI at all.

Once all your directories containing Python code are under DocumentRoot, I
think it will work correctly.

Grisha

On Wed, 26 Nov 2003, Manera, Villiam wrote:

> First of all my configuration<?xml:namespace prefix = o ns =
> "urn:schemas-microsoft-com:office:office" />
>
>
>
> >From httpd.conf:
>
> .....
>
>     DocumentRoot "E:/wwwroot/cartelle_sito_mdn"
>
> ....
>
>     ScriptAlias /cgi-mpy/ "E:/script/cgi/cgi-mpy/"
>
>     ScriptAlias /produzione/ "E:/script/cgi/produzione/"
>
>     ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> .........
>
>     <Directory "E:/script/cgi/cgi-mpy">
>
> ...
>
>                 AddHandler python-program .py
>
>                 PythonHandler mod_python.publisher
>
>             PythonPath ....
>
>                 PythonDebug on
>
>                   #PythonOption ApplicationPath /cgi-mpy
>
>                PythonOption SessionDbm
> 'E:/wwwroot/dati_autenticazione/sid/session.dbm'
>
>    </Directory>
>
>
>
> if I miss PythonOption ApplicationPath ... in any directory:
>
>
>
>     def make_cookie(self):
>
>             ....
>
>         if config.has_key("ApplicationPath"):
>
>             c.path = config["ApplicationPath"]
>
>         else:
>
>             docroot = self._req.document_root()
>
>             # the path where *Handler directive was specified
>
>             dirpath = self._req.hlist.directory
>
>             c.path = dirpath[len(docroot):]
>
>
>
> so the req.headers_out generate this html heading for cgi-mpy scriptalias:
>
> {'Set-Cookie': 'pysid=596d8102cb1dcbf389117fb7d6a497ba; path=',
> 'Cache-Control': 'nocache="set-cookie"'}
>
>
>
> where path=  because len(document root) :28 len (dirpath) 21
>
>
>
> and in this way all work fine for all my scriptalias except for
>
>  ScriptAlias /organizzazione/ "E:/script/cgi/organizzazione/"
>
> In this case len(dirpath) = 30 so path='/\'
>
> And I make the first connection under this path any attempt to call url
> under other scriptalias cause a new session because the hader miss the key
> 'Set-Cookie'....
>
>
>
> So I tryed to use:
>
> PythonOption ApplicationPath /cgi-mpy
>
> PythonOption ApplicationPath /organizzazione
>
> ....
>
> If my first connection is under cgi-mpy all work fine for all the url
under
> cgi-mpy, but any attempt to connect to un url under a different
scriptalias
> cause a new session
>
>
>
> So I may choose to change orgenizzazione in organiz, or to modify the
> session module: c.path=''
>
> Any other suggestion?
>
>
>
> Villiam Manera
> Dirett.  Sistema Informativo
>
> Manifatture del Nord srl
> viale Regina Elena 13-15
> 42100 Reggio Emilia RE
> ITALY
>
> Tel. +39 0522 508200
> Fax +39 0522 514099
> email : vmanera@manord.com
> www.pennyblack.com
>
>
>

From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <20031128120645.Q92149@onyx.ispol.com>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy
From grisha at apache.org  Fri Nov 28 12:22:13 2003
From: grisha at apache.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] [ANNOUNCE] Mod_python 3.0.4 and 2.7.9
Message-ID: <12755437.1070056018285.JavaMail.Server@genix>


The Apache Software Foundation and The Apache HTTP Server Project are
pleased to announce the release of versions 3.0.4 and 2.7.9 of mod_python.

These two releases (for HTTP Server 2.0 and 1.3 respectively) address an
issue whereby a specific query string processed by mod_python would cause
the httpd process to crash.

These two releases have also been patched to compile against Python 2.3
cleanly.

There are no other changes or improvements from the previous version in
these releases.

Both of these releases are considered stable. If you are currently using
mod_python 3.0.3 or 2.7.8, it is highly recommended that you upgrade to
3.0.4 or 2.7.9.

Mod_python is available for download from:

http://httpd.apache.org/modules/python-download.cgi

For more information about mod_python visit
http://www.modpython.org/

Regards,

Grisha Trubetskoy

---------------------------------------------------------------------
To unsubscribe, e-mail: announce-unsubscribe@httpd.apache.org
For additional commands, e-mail: announce-help@httpd.apache.org



From flxkid at techemail.com  Fri Nov 28 14:16:02 2003
From: flxkid at techemail.com (Oliver Nelson)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
Message-ID: <20031128221603.3E2473954@sitemail.everyone.net>

I'd like to have mod_python respond to every request that is below a certain "directory".

IOW I might do a GET on:
localhost/mysys/test/my.gif
localhost/mysys/yada/ibm.com

and a python handler would be called for both of these situations.  In fact, I'd like the handler (or handlers) to be called for all verbs (GET, PUT, POST, DELETE).  But URI's that aren't below /mysys wouldn't call the handler.

Also note /mysys/test/my.gif doesn't exist, it should be retrieve and returned on the fly by Python.

Is this possible with mod_python?

OLIVER

From neilb at nbt.co.za  Sat Nov 29 16:54:19 2003
From: neilb at nbt.co.za (Neil Beattie)
Date: Fri Jan  9 22:04:24 2004
Subject: R: [mod_python]  Problem with Session module with multiple script
	alias not under t he  document root
In-Reply-To: <52DC70C1C1575C418CB033523A29CF14104909@exchange2000.manord.com>
Message-ID: <3FC8CF3B.10252.1EC6C05A@localhost>

> I'm sorry but still don't work.
> I'm removed all references to cgi and I moved all my directory with .py
> under document root:
> 
> DocumentRoot "C:/wwwroot/cartelle_sito_mdn"
> <Directory   "C:/wwwroot/cartelle_sito_mdn/script/cgi/cgi-py">
> 
> and with this new configuration req.headers_out:
> {'Set-Cookie': 'pysid=d4d10ab8e7917b43becbff01a2452f7e;
> path=/script/cgi/cgi-mpy/\', 'Cache-Control': 'no-cache="set-cookie"'} 
> and if I relod the page it never passed to req.headers_in


Looks like the path is not correct (extra \)
try adding the following line to your httpd.config  addHandler entry:

PythonOption ApplicationPath /script/cgi/cgi-mpy


I have just had the same problem but have not yet discovered where the extra \ 
comes from ( it is in _req.hlist.directory in session.py)




> 
> if I modify se session module:
> def make_cookie(self):
> 	....
>       c.path = ''   #dirpath[len(docroot):]
> then req.headers_out become:
> {'Set-Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4; path=',
> 'Cache-Control': 'no-cache="set-cookie"'} 
> and If I relod the page it go to req.headers_in:
> {'Cookie': 'pysid=fb35b851ad27e7effe820c36871bc9b4', 'Connection':
> 'Keep-Alive', ...} 
> and req.heades_out : {}
> 
> so why if something else then '' is in path the pysid wasn't writing into
> the html heading? 
> 

Neil Beattie
NB Technology (Pty) Ltd

From dwmp at opti.cgi.net  Sun Nov 30 19:52:57 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031125001750.R36241@onyx.ispol.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>


At 12:22 AM 11/25/2003 -0500, you wrote:
>if you want the module properly reloaded when it changes, import it like
>this:
>
>mymodule = apache.import_module('mymodule')

I've attempted this on a PSP page with a packaged module and am not getting 
the module in the global namespace.

<%
apache.import_module('mypackage.mymodule')
%>
<html>
<body>
<%=`globals()`%>
</body>
</html>

I don't get any errors, just a silent failure (mypackage is not in 
globals).  mypackage is in the lib/python/site-packages folder and it works 
properly if I use the standard python import.

Any ideas?

-Dan

From grisha at modpython.org  Sun Nov 30 22:24:48 2003
From: grisha at modpython.org (Gregory (Grisha) Trubetskoy)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] PSP imports
In-Reply-To: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
References: <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <20031130222323.M31554@onyx.ispol.com>



On Sun, 30 Nov 2003, Dan W. wrote:

> I've attempted this on a PSP page with a packaged module and am not getting
> the module in the global namespace.
>
> <%
> apache.import_module('mypackage.mymodule')

<%
mymodule = apache.import_module('mypackage.mymodule')


Grisha
From dwmp at opti.cgi.net  Sun Nov 30 21:56:45 2003
From: dwmp at opti.cgi.net (Dan W.)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] PSP imports
In-Reply-To: <20031130222323.M31554@onyx.ispol.com>
References: <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031124223535.036e7fc8@mail.pyxos.com>
 <5.2.1.1.2.20031130194633.0347be60@mail.pyxos.com>
Message-ID: <5.2.1.1.2.20031130214706.035aedc8@mail.pyxos.com>

At 10:24 PM 11/30/2003 -0500, you wrote:


>On Sun, 30 Nov 2003, Dan W. wrote:
>
> > I've attempted this on a PSP page with a packaged module and am not getting
> > the module in the global namespace.
> >
> > <%
> > apache.import_module('mypackage.mymodule')
>
><%
>mymodule = apache.import_module('mypackage.mymodule')


Thanks Grisha.  I was expecting it to work like the builtin import.

-Dan

From mod_python at mikebell.org  Sun Nov 30 22:37:48 2003
From: mod_python at mikebell.org (mod_python@mikebell.org)
Date: Fri Jan  9 22:04:24 2004
Subject: [mod_python] Making mod_python respond to ALMOST every request
In-Reply-To: <20031128221603.3E2473954@sitemail.everyone.net>
References: <20031128221603.3E2473954@sitemail.everyone.net>
Message-ID: <20031201063747.GC13820@mikebell.org>

On Fri, Nov 28, 2003 at 02:16:02PM -0800, Oliver Nelson wrote:
> Is this possible with mod_python?

Possible and easy.

<Location /foo>
  SetHandler python-program
  PythonHandler bar
</Location>
