From martijn at xs4us.nu  Tue Nov 10 18:20:19 2009
From: martijn at xs4us.nu (Martijn Moeling)
Date: Tue Nov 10 18:20:36 2009
Subject: [mod_python] Re: [modwsgi] mod_python publisher
In-Reply-To: <88e286470904232316t3015965fw53984674789ed24d@mail.gmail.com>
References: <d0916b20-cd03-44d3-b6c0-690e1876f646@g37g2000yqn.googlegroups.com>
	<88e286470904232316t3015965fw53984674789ed24d@mail.gmail.com>
Message-ID: <D4E732A7-65F8-402D-8598-BBA32D5F0A2E@xs4us.nu>

Graham,

I was searching the list searching for answers about moving away from MP to MWSGI and stumbled upon the below conversation.
Because of the workings of MP my application is heavily based around passing reference to the Request object.

Also I have modified Session.py from the MP package to store session data in a database behind SQLAlchemy.
Due to trial and error i found out that connecting to the database on each request with the Database closure in
a fixup request was the best solution in MP not sure yet about WSGI but I would like a similar scenario (which is in the WSGI wiki examples)

In the random number generation part of Session.py is some MP specific code (I do not seem to understand that part)

I have been thinking of making a WSGI-MP adapter to get rid of the runtime or live troubles of MP being code compatible as base for MP applications.
so yes I am interested, and I would not mind contributing.

Martijn

On Apr 24, 2009, at 8:16 AM, Graham Dumpleton wrote:

> 2009/4/24 Matt Newville <matt.newville@gmail.com>:
>> 
>> I'm looking to move from mod_python to mod_wsgi, and reading through
>> the on-line documentation.
>> 've been fairly happy with mod_python for my own scripts, but do
>> appreciate that mod_wsgi is a better design and the future. I also
>> want to update a MoinMoin wiki on the same server to using mod_wsgi,
>> and am concerned about trying to have both mod_python and mod_wsgi
>> running on the same server.
> 
> You can run mod_python and mod_wsgi on the same server, but in that
> case certain features of mod_wsgi don't work as mod_python takes
> control of initialising Python.
> 
>> Currently, I'm using mod_python's publisher handler for mapping url to
>> python function name and arguments, and for basic authentication.  By
>> themselves, the mod_python/publisher scripts I have  (ie, the code
>> with "from mod_python import apache") are fairly small and simple and
>> mostly manage a connection to larger python modules  for the
>> application logic.
>> 
>> It looks like there isn't an immediate replacement for these features
>> within mod_wsgi, with the rationale given that such functionality is
>> best handled elsewhere, perhaps in a larger framework.  Is this a
>> correct reading?
> 
> It is only intended that mod_wsgi provide the low level gateway to the
> server itself. This is in contrast to mod_python which provides the
> low level gateway to the server, but also high level handlers.
> Personally I think that mod_python did this was wrong, and the high
> level handlers should have been separate. Problem it now causes is
> that people don't want to give up mod_python because they are bound to
> APIs which are part of the mod_python package. If those high level
> handlers were separate, then there would have been a better chance
> that they could have been rehosted on alternatives such as WSGI to
> allow portability and migration away from mod_python.
> 
>> If so, what is the recommended path for those for
>> whom the publisher handler was a good fit?  Are there recommended
>> extensions that provide this functionality, or migration paths for
>> code currently using mod_python publisher?
> 
> There was someone on this list who was trying to come up with a
> package which offered compatibility with mod_python.publisher but such
> that it could be hosted on WSGI instead. For my mind, although it may
> aid in migrating away from mod_python, I don't believe that an exactly
> compatible system is a good idea, as mod_python.publisher has various
> aspects which I regard as being broken.
> 
> Although I have resisted before, partly due to lack of time, but also
> because I had some bigger ideas in mind, I haven't pursued the idea of
> creating a package which could be a stepping stone to get away from
> mod_python and onto mod_wsgi instead. Since I am treading water a bit
> at the moment working out what direction I am going to take with
> mod_wsgi and whether I branch out and do something to improve fastcgi
> hosting, maybe I can have a look at this a bit now.
> 
> As it turns out, most of the work is already done, as my Vampire
> package for mod_python had a rewritten mod_python.publisher
> equivalent. This fixes some of the problems in mod_python.publisher
> and makes it more flexible, but still doesn't fix some of the things I
> hate most about mod_python.publisher.
> 
> Anyway, I could take Vampire and repurpose it on top of WSGI and more
> specifically mod_wsgi. The main thing I am missing to be able to do
> that is a request object as obviously relied upon that from
> mod_python. There are a couple of options there. First is to write my
> own in order to avoid external dependencies, or use webob. There is
> also Werkzeug, but it is much more than a request object so may be
> bringing too much baggage.
> 
> For forms processing, would just fall back on cgi.FieldStorage, which
> does mean a loss of a few mod_python features, albeit not often used.
> The only other thing, but which wasn't really a part of
> mod_python.publisher, is session support. In some sort of first
> version one could ignore session support though. Another future area
> to look at might be to bring across PSP support into the package.
> 
> The question is whether there is sufficient interest. In terms of
> gauging that, have also cc'd this to mod_python list. If replying
> please ensure you reply-all to both lists.
> 
> Do note that I wouldn't aim for compatibility as me being a pedantic
> ass means I will not allow some of the stuff in mod_python.publisher
> which I think is wrong. Obviously the request object isn't going to be
> the same, although maybe one could have a mode where by you use a
> request object wrapper to make it closer. As for the other stuff, that
> may or may not affect many people. The particular area I have an issue
> with in that respect is the really bad way mod_python.publisher deals
> with trailing slashes. So, porting work would definitely be required.
> 
> So, is there any interest in a mod_python.publisher like package to
> act as a easy migration path away from mod_python?
> 
> Graham
> 
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python


From graham.dumpleton at gmail.com  Tue Nov 10 18:29:03 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Tue Nov 10 18:29:11 2009
Subject: [mod_python] Re: [modwsgi] mod_python publisher
In-Reply-To: <D4E732A7-65F8-402D-8598-BBA32D5F0A2E@xs4us.nu>
References: <d0916b20-cd03-44d3-b6c0-690e1876f646@g37g2000yqn.googlegroups.com>
	<88e286470904232316t3015965fw53984674789ed24d@mail.gmail.com>
	<D4E732A7-65F8-402D-8598-BBA32D5F0A2E@xs4us.nu>
Message-ID: <88e286470911101529p21fbbae0l170afd6fe1888efb@mail.gmail.com>

2009/11/11 Martijn Moeling <martijn@xs4us.nu>:
> Graham,
>
> I was searching the list searching for answers about moving away from MP to MWSGI and stumbled upon the below conversation.
> Because of the workings of MP my application is heavily based around passing reference to the Request object.
>
> Also I have modified Session.py from the MP package to store session data in a database behind SQLAlchemy.
> Due to trial and error i found out that connecting to the database on each request with the Database closure in
> a fixup request was the best solution in MP not sure yet about WSGI but I would like a similar scenario (which is in the WSGI wiki examples)
>
> In the random number generation part of Session.py is some MP specific code (I do not seem to understand that part)
>
> I have been thinking of making a WSGI-MP adapter to get rid of the runtime or live troubles of MP being code compatible as base for MP applications.
> so yes I am interested, and I would not mind contributing.

It isn't something I have time for these days. Can't even find time to
get next version of mod_wsgi released and only way I will achieve that
is to rip out some half done stuff I had added related to statistics
generation, deferring it to later or try and do it at Python code
level as an example rather than in C code of mod_wsgi itself.

There have been some people who have mentioned before they were
constructing mod_python request like objects for use in WSGI
applications for porting, but seems they only do it for themselves and
aren't interested in making it public.

BTW, mod_python only compiles on latest Apache 2.X versions by
applying a fix. In Apache 2.3 (2.4), even with that fix it is unlikely
to compile as they have changed quite a bit authorization handler
APIs. So, Apache 2.3 (2.4) may spell the end for mod_python unless
someone does the work in fixing mod_python.

Graham

> Martijn
>
> On Apr 24, 2009, at 8:16 AM, Graham Dumpleton wrote:
>
>> 2009/4/24 Matt Newville <matt.newville@gmail.com>:
>>>
>>> I'm looking to move from mod_python to mod_wsgi, and reading through
>>> the on-line documentation.
>>> 've been fairly happy with mod_python for my own scripts, but do
>>> appreciate that mod_wsgi is a better design and the future. I also
>>> want to update a MoinMoin wiki on the same server to using mod_wsgi,
>>> and am concerned about trying to have both mod_python and mod_wsgi
>>> running on the same server.
>>
>> You can run mod_python and mod_wsgi on the same server, but in that
>> case certain features of mod_wsgi don't work as mod_python takes
>> control of initialising Python.
>>
>>> Currently, I'm using mod_python's publisher handler for mapping url to
>>> python function name and arguments, and for basic authentication. ?By
>>> themselves, the mod_python/publisher scripts I have ?(ie, the code
>>> with "from mod_python import apache") are fairly small and simple and
>>> mostly manage a connection to larger python modules ?for the
>>> application logic.
>>>
>>> It looks like there isn't an immediate replacement for these features
>>> within mod_wsgi, with the rationale given that such functionality is
>>> best handled elsewhere, perhaps in a larger framework. ?Is this a
>>> correct reading?
>>
>> It is only intended that mod_wsgi provide the low level gateway to the
>> server itself. This is in contrast to mod_python which provides the
>> low level gateway to the server, but also high level handlers.
>> Personally I think that mod_python did this was wrong, and the high
>> level handlers should have been separate. Problem it now causes is
>> that people don't want to give up mod_python because they are bound to
>> APIs which are part of the mod_python package. If those high level
>> handlers were separate, then there would have been a better chance
>> that they could have been rehosted on alternatives such as WSGI to
>> allow portability and migration away from mod_python.
>>
>>> If so, what is the recommended path for those for
>>> whom the publisher handler was a good fit? ?Are there recommended
>>> extensions that provide this functionality, or migration paths for
>>> code currently using mod_python publisher?
>>
>> There was someone on this list who was trying to come up with a
>> package which offered compatibility with mod_python.publisher but such
>> that it could be hosted on WSGI instead. For my mind, although it may
>> aid in migrating away from mod_python, I don't believe that an exactly
>> compatible system is a good idea, as mod_python.publisher has various
>> aspects which I regard as being broken.
>>
>> Although I have resisted before, partly due to lack of time, but also
>> because I had some bigger ideas in mind, I haven't pursued the idea of
>> creating a package which could be a stepping stone to get away from
>> mod_python and onto mod_wsgi instead. Since I am treading water a bit
>> at the moment working out what direction I am going to take with
>> mod_wsgi and whether I branch out and do something to improve fastcgi
>> hosting, maybe I can have a look at this a bit now.
>>
>> As it turns out, most of the work is already done, as my Vampire
>> package for mod_python had a rewritten mod_python.publisher
>> equivalent. This fixes some of the problems in mod_python.publisher
>> and makes it more flexible, but still doesn't fix some of the things I
>> hate most about mod_python.publisher.
>>
>> Anyway, I could take Vampire and repurpose it on top of WSGI and more
>> specifically mod_wsgi. The main thing I am missing to be able to do
>> that is a request object as obviously relied upon that from
>> mod_python. There are a couple of options there. First is to write my
>> own in order to avoid external dependencies, or use webob. There is
>> also Werkzeug, but it is much more than a request object so may be
>> bringing too much baggage.
>>
>> For forms processing, would just fall back on cgi.FieldStorage, which
>> does mean a loss of a few mod_python features, albeit not often used.
>> The only other thing, but which wasn't really a part of
>> mod_python.publisher, is session support. In some sort of first
>> version one could ignore session support though. Another future area
>> to look at might be to bring across PSP support into the package.
>>
>> The question is whether there is sufficient interest. In terms of
>> gauging that, have also cc'd this to mod_python list. If replying
>> please ensure you reply-all to both lists.
>>
>> Do note that I wouldn't aim for compatibility as me being a pedantic
>> ass means I will not allow some of the stuff in mod_python.publisher
>> which I think is wrong. Obviously the request object isn't going to be
>> the same, although maybe one could have a mode where by you use a
>> request object wrapper to make it closer. As for the other stuff, that
>> may or may not affect many people. The particular area I have an issue
>> with in that respect is the really bad way mod_python.publisher deals
>> with trailing slashes. So, porting work would definitely be required.
>>
>> So, is there any interest in a mod_python.publisher like package to
>> act as a easy migration path away from mod_python?
>>
>> Graham
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>

From martijn at xs4us.nu  Wed Nov 11 03:31:12 2009
From: martijn at xs4us.nu (Martijn Moeling)
Date: Wed Nov 11 03:31:36 2009
Subject: [mod_python] Re: [modwsgi] mod_python publisher
In-Reply-To: <88e286470911101529p21fbbae0l170afd6fe1888efb@mail.gmail.com>
References: <d0916b20-cd03-44d3-b6c0-690e1876f646@g37g2000yqn.googlegroups.com>
	<88e286470904232316t3015965fw53984674789ed24d@mail.gmail.com>
	<D4E732A7-65F8-402D-8598-BBA32D5F0A2E@xs4us.nu>
	<88e286470911101529p21fbbae0l170afd6fe1888efb@mail.gmail.com>
Message-ID: <A45EBE1E-7C12-450B-A870-D536EDE477C3@xs4us.nu>

Graham,

Thank you, You gave me the answer I expected....

I need a MOD_PYTHON_WSGI module so I will build one. I do not mind it to go public if it helps.
It will be a pure Python module so people can easily ajust/extend for there own needs...
at first I will create a request object and then I will add stuff like sessions.

Since I never have used the publisher handler (and to be true not even know how it works) I will leave that to others.

I'll keep the mod_python and mod_wsgi groups up to date, but I might bother you with some minor details.
Is it OK for me to re-use MP code?

I think MP programmers like the way they can define their application without a framework, like me the transition to WSGI cannot include a framework that doubles work already done (my system is an implementation on its own framework).
People interested might email me to get their "wishes" and needs.

we'll see

Martijn


On Nov 11, 2009, at 12:29 AM, Graham Dumpleton wrote:

> 2009/11/11 Martijn Moeling <martijn@xs4us.nu>:
>> Graham,
>> 
>> I was searching the list searching for answers about moving away from MP to MWSGI and stumbled upon the below conversation.
>> Because of the workings of MP my application is heavily based around passing reference to the Request object.
>> 
>> Also I have modified Session.py from the MP package to store session data in a database behind SQLAlchemy.
>> Due to trial and error i found out that connecting to the database on each request with the Database closure in
>> a fixup request was the best solution in MP not sure yet about WSGI but I would like a similar scenario (which is in the WSGI wiki examples)
>> 
>> In the random number generation part of Session.py is some MP specific code (I do not seem to understand that part)
>> 
>> I have been thinking of making a WSGI-MP adapter to get rid of the runtime or live troubles of MP being code compatible as base for MP applications.
>> so yes I am interested, and I would not mind contributing.
> 
> It isn't something I have time for these days. Can't even find time to
> get next version of mod_wsgi released and only way I will achieve that
> is to rip out some half done stuff I had added related to statistics
> generation, deferring it to later or try and do it at Python code
> level as an example rather than in C code of mod_wsgi itself.
> 
> There have been some people who have mentioned before they were
> constructing mod_python request like objects for use in WSGI
> applications for porting, but seems they only do it for themselves and
> aren't interested in making it public.
> 
> BTW, mod_python only compiles on latest Apache 2.X versions by
> applying a fix. In Apache 2.3 (2.4), even with that fix it is unlikely
> to compile as they have changed quite a bit authorization handler
> APIs. So, Apache 2.3 (2.4) may spell the end for mod_python unless
> someone does the work in fixing mod_python.
> 
> Graham
> 
>> Martijn
>> 
>> On Apr 24, 2009, at 8:16 AM, Graham Dumpleton wrote:
>> 
>>> 2009/4/24 Matt Newville <matt.newville@gmail.com>:
>>>> 
>>>> I'm looking to move from mod_python to mod_wsgi, and reading through
>>>> the on-line documentation.
>>>> 've been fairly happy with mod_python for my own scripts, but do
>>>> appreciate that mod_wsgi is a better design and the future. I also
>>>> want to update a MoinMoin wiki on the same server to using mod_wsgi,
>>>> and am concerned about trying to have both mod_python and mod_wsgi
>>>> running on the same server.
>>> 
>>> You can run mod_python and mod_wsgi on the same server, but in that
>>> case certain features of mod_wsgi don't work as mod_python takes
>>> control of initialising Python.
>>> 
>>>> Currently, I'm using mod_python's publisher handler for mapping url to
>>>> python function name and arguments, and for basic authentication.  By
>>>> themselves, the mod_python/publisher scripts I have  (ie, the code
>>>> with "from mod_python import apache") are fairly small and simple and
>>>> mostly manage a connection to larger python modules  for the
>>>> application logic.
>>>> 
>>>> It looks like there isn't an immediate replacement for these features
>>>> within mod_wsgi, with the rationale given that such functionality is
>>>> best handled elsewhere, perhaps in a larger framework.  Is this a
>>>> correct reading?
>>> 
>>> It is only intended that mod_wsgi provide the low level gateway to the
>>> server itself. This is in contrast to mod_python which provides the
>>> low level gateway to the server, but also high level handlers.
>>> Personally I think that mod_python did this was wrong, and the high
>>> level handlers should have been separate. Problem it now causes is
>>> that people don't want to give up mod_python because they are bound to
>>> APIs which are part of the mod_python package. If those high level
>>> handlers were separate, then there would have been a better chance
>>> that they could have been rehosted on alternatives such as WSGI to
>>> allow portability and migration away from mod_python.
>>> 
>>>> If so, what is the recommended path for those for
>>>> whom the publisher handler was a good fit?  Are there recommended
>>>> extensions that provide this functionality, or migration paths for
>>>> code currently using mod_python publisher?
>>> 
>>> There was someone on this list who was trying to come up with a
>>> package which offered compatibility with mod_python.publisher but such
>>> that it could be hosted on WSGI instead. For my mind, although it may
>>> aid in migrating away from mod_python, I don't believe that an exactly
>>> compatible system is a good idea, as mod_python.publisher has various
>>> aspects which I regard as being broken.
>>> 
>>> Although I have resisted before, partly due to lack of time, but also
>>> because I had some bigger ideas in mind, I haven't pursued the idea of
>>> creating a package which could be a stepping stone to get away from
>>> mod_python and onto mod_wsgi instead. Since I am treading water a bit
>>> at the moment working out what direction I am going to take with
>>> mod_wsgi and whether I branch out and do something to improve fastcgi
>>> hosting, maybe I can have a look at this a bit now.
>>> 
>>> As it turns out, most of the work is already done, as my Vampire
>>> package for mod_python had a rewritten mod_python.publisher
>>> equivalent. This fixes some of the problems in mod_python.publisher
>>> and makes it more flexible, but still doesn't fix some of the things I
>>> hate most about mod_python.publisher.
>>> 
>>> Anyway, I could take Vampire and repurpose it on top of WSGI and more
>>> specifically mod_wsgi. The main thing I am missing to be able to do
>>> that is a request object as obviously relied upon that from
>>> mod_python. There are a couple of options there. First is to write my
>>> own in order to avoid external dependencies, or use webob. There is
>>> also Werkzeug, but it is much more than a request object so may be
>>> bringing too much baggage.
>>> 
>>> For forms processing, would just fall back on cgi.FieldStorage, which
>>> does mean a loss of a few mod_python features, albeit not often used.
>>> The only other thing, but which wasn't really a part of
>>> mod_python.publisher, is session support. In some sort of first
>>> version one could ignore session support though. Another future area
>>> to look at might be to bring across PSP support into the package.
>>> 
>>> The question is whether there is sufficient interest. In terms of
>>> gauging that, have also cc'd this to mod_python list. If replying
>>> please ensure you reply-all to both lists.
>>> 
>>> Do note that I wouldn't aim for compatibility as me being a pedantic
>>> ass means I will not allow some of the stuff in mod_python.publisher
>>> which I think is wrong. Obviously the request object isn't going to be
>>> the same, although maybe one could have a mode where by you use a
>>> request object wrapper to make it closer. As for the other stuff, that
>>> may or may not affect many people. The particular area I have an issue
>>> with in that respect is the really bad way mod_python.publisher deals
>>> with trailing slashes. So, porting work would definitely be required.
>>> 
>>> So, is there any interest in a mod_python.publisher like package to
>>> act as a easy migration path away from mod_python?
>>> 
>>> Graham
>>> 
>>> _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>> 
>> 


From graham.dumpleton at gmail.com  Wed Nov 11 05:15:23 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Wed Nov 11 05:15:32 2009
Subject: [mod_python] Re: [modwsgi] mod_python publisher
In-Reply-To: <A45EBE1E-7C12-450B-A870-D536EDE477C3@xs4us.nu>
References: <d0916b20-cd03-44d3-b6c0-690e1876f646@g37g2000yqn.googlegroups.com>
	<88e286470904232316t3015965fw53984674789ed24d@mail.gmail.com>
	<D4E732A7-65F8-402D-8598-BBA32D5F0A2E@xs4us.nu>
	<88e286470911101529p21fbbae0l170afd6fe1888efb@mail.gmail.com>
	<A45EBE1E-7C12-450B-A870-D536EDE477C3@xs4us.nu>
Message-ID: <88e286470911110215g5304345bq9c40cab2c16925bd@mail.gmail.com>

2009/11/11 Martijn Moeling <martijn@xs4us.nu>:
> Graham,
>
> Thank you, You gave me the answer I expected....
>
> I need a MOD_PYTHON_WSGI module so I will build one. I do not mind it to go public if it helps.
> It will be a pure Python module so people can easily ajust/extend for there own needs...
> at first I will create a request object and then I will add stuff like sessions.
>
> Since I never have used the publisher handler (and to be true not even know how it works) I will leave that to others.
>
> I'll keep the mod_python and mod_wsgi groups up to date, but I might bother you with some minor details.
> Is it OK for me to re-use MP code?

As long as you respect the fact that it is licenced under Apache
Licence 2.0 and abide by conditions of that licence you are fine.

Graham

> I think MP programmers like the way they can define their application without a framework, like me the transition to WSGI cannot include a framework that doubles work already done (my system is an implementation on its own framework).
> People interested might email me to get their "wishes" and needs.
>
> we'll see
>
> Martijn
>
>
> On Nov 11, 2009, at 12:29 AM, Graham Dumpleton wrote:
>
>> 2009/11/11 Martijn Moeling <martijn@xs4us.nu>:
>>> Graham,
>>>
>>> I was searching the list searching for answers about moving away from MP to MWSGI and stumbled upon the below conversation.
>>> Because of the workings of MP my application is heavily based around passing reference to the Request object.
>>>
>>> Also I have modified Session.py from the MP package to store session data in a database behind SQLAlchemy.
>>> Due to trial and error i found out that connecting to the database on each request with the Database closure in
>>> a fixup request was the best solution in MP not sure yet about WSGI but I would like a similar scenario (which is in the WSGI wiki examples)
>>>
>>> In the random number generation part of Session.py is some MP specific code (I do not seem to understand that part)
>>>
>>> I have been thinking of making a WSGI-MP adapter to get rid of the runtime or live troubles of MP being code compatible as base for MP applications.
>>> so yes I am interested, and I would not mind contributing.
>>
>> It isn't something I have time for these days. Can't even find time to
>> get next version of mod_wsgi released and only way I will achieve that
>> is to rip out some half done stuff I had added related to statistics
>> generation, deferring it to later or try and do it at Python code
>> level as an example rather than in C code of mod_wsgi itself.
>>
>> There have been some people who have mentioned before they were
>> constructing mod_python request like objects for use in WSGI
>> applications for porting, but seems they only do it for themselves and
>> aren't interested in making it public.
>>
>> BTW, mod_python only compiles on latest Apache 2.X versions by
>> applying a fix. In Apache 2.3 (2.4), even with that fix it is unlikely
>> to compile as they have changed quite a bit authorization handler
>> APIs. So, Apache 2.3 (2.4) may spell the end for mod_python unless
>> someone does the work in fixing mod_python.
>>
>> Graham
>>
>>> Martijn
>>>
>>> On Apr 24, 2009, at 8:16 AM, Graham Dumpleton wrote:
>>>
>>>> 2009/4/24 Matt Newville <matt.newville@gmail.com>:
>>>>>
>>>>> I'm looking to move from mod_python to mod_wsgi, and reading through
>>>>> the on-line documentation.
>>>>> 've been fairly happy with mod_python for my own scripts, but do
>>>>> appreciate that mod_wsgi is a better design and the future. I also
>>>>> want to update a MoinMoin wiki on the same server to using mod_wsgi,
>>>>> and am concerned about trying to have both mod_python and mod_wsgi
>>>>> running on the same server.
>>>>
>>>> You can run mod_python and mod_wsgi on the same server, but in that
>>>> case certain features of mod_wsgi don't work as mod_python takes
>>>> control of initialising Python.
>>>>
>>>>> Currently, I'm using mod_python's publisher handler for mapping url to
>>>>> python function name and arguments, and for basic authentication. ?By
>>>>> themselves, the mod_python/publisher scripts I have ?(ie, the code
>>>>> with "from mod_python import apache") are fairly small and simple and
>>>>> mostly manage a connection to larger python modules ?for the
>>>>> application logic.
>>>>>
>>>>> It looks like there isn't an immediate replacement for these features
>>>>> within mod_wsgi, with the rationale given that such functionality is
>>>>> best handled elsewhere, perhaps in a larger framework. ?Is this a
>>>>> correct reading?
>>>>
>>>> It is only intended that mod_wsgi provide the low level gateway to the
>>>> server itself. This is in contrast to mod_python which provides the
>>>> low level gateway to the server, but also high level handlers.
>>>> Personally I think that mod_python did this was wrong, and the high
>>>> level handlers should have been separate. Problem it now causes is
>>>> that people don't want to give up mod_python because they are bound to
>>>> APIs which are part of the mod_python package. If those high level
>>>> handlers were separate, then there would have been a better chance
>>>> that they could have been rehosted on alternatives such as WSGI to
>>>> allow portability and migration away from mod_python.
>>>>
>>>>> If so, what is the recommended path for those for
>>>>> whom the publisher handler was a good fit? ?Are there recommended
>>>>> extensions that provide this functionality, or migration paths for
>>>>> code currently using mod_python publisher?
>>>>
>>>> There was someone on this list who was trying to come up with a
>>>> package which offered compatibility with mod_python.publisher but such
>>>> that it could be hosted on WSGI instead. For my mind, although it may
>>>> aid in migrating away from mod_python, I don't believe that an exactly
>>>> compatible system is a good idea, as mod_python.publisher has various
>>>> aspects which I regard as being broken.
>>>>
>>>> Although I have resisted before, partly due to lack of time, but also
>>>> because I had some bigger ideas in mind, I haven't pursued the idea of
>>>> creating a package which could be a stepping stone to get away from
>>>> mod_python and onto mod_wsgi instead. Since I am treading water a bit
>>>> at the moment working out what direction I am going to take with
>>>> mod_wsgi and whether I branch out and do something to improve fastcgi
>>>> hosting, maybe I can have a look at this a bit now.
>>>>
>>>> As it turns out, most of the work is already done, as my Vampire
>>>> package for mod_python had a rewritten mod_python.publisher
>>>> equivalent. This fixes some of the problems in mod_python.publisher
>>>> and makes it more flexible, but still doesn't fix some of the things I
>>>> hate most about mod_python.publisher.
>>>>
>>>> Anyway, I could take Vampire and repurpose it on top of WSGI and more
>>>> specifically mod_wsgi. The main thing I am missing to be able to do
>>>> that is a request object as obviously relied upon that from
>>>> mod_python. There are a couple of options there. First is to write my
>>>> own in order to avoid external dependencies, or use webob. There is
>>>> also Werkzeug, but it is much more than a request object so may be
>>>> bringing too much baggage.
>>>>
>>>> For forms processing, would just fall back on cgi.FieldStorage, which
>>>> does mean a loss of a few mod_python features, albeit not often used.
>>>> The only other thing, but which wasn't really a part of
>>>> mod_python.publisher, is session support. In some sort of first
>>>> version one could ignore session support though. Another future area
>>>> to look at might be to bring across PSP support into the package.
>>>>
>>>> The question is whether there is sufficient interest. In terms of
>>>> gauging that, have also cc'd this to mod_python list. If replying
>>>> please ensure you reply-all to both lists.
>>>>
>>>> Do note that I wouldn't aim for compatibility as me being a pedantic
>>>> ass means I will not allow some of the stuff in mod_python.publisher
>>>> which I think is wrong. Obviously the request object isn't going to be
>>>> the same, although maybe one could have a mode where by you use a
>>>> request object wrapper to make it closer. As for the other stuff, that
>>>> may or may not affect many people. The particular area I have an issue
>>>> with in that respect is the really bad way mod_python.publisher deals
>>>> with trailing slashes. So, porting work would definitely be required.
>>>>
>>>> So, is there any interest in a mod_python.publisher like package to
>>>> act as a easy migration path away from mod_python?
>>>>
>>>> Graham
>>>>
>>>> _______________________________________________
>>>> Mod_python mailing list
>>>> Mod_python@modpython.org
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>
>>>
>
>

From eduardowmaster at gmail.com  Wed Nov 11 12:43:15 2009
From: eduardowmaster at gmail.com (Carlos Eduardo da Fonseca)
Date: Wed Nov 11 12:43:24 2009
Subject: [mod_python] mod_python with other mods like PHP ?
Message-ID: <914b35580911110943t3692a005yfedb30c36d08d7b5@mail.gmail.com>

Hello everyone!

I need to run a Python and PHP apps simultanely (different subdomain only)

Is it possible?

Thanks in advance!

-- 
Carlos Eduardo da Fonseca.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20091111/e31a3365/attachment.html
From graham.dumpleton at gmail.com  Wed Nov 11 15:24:22 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Wed Nov 11 15:24:31 2009
Subject: [mod_python] mod_python with other mods like PHP ?
In-Reply-To: <914b35580911110943t3692a005yfedb30c36d08d7b5@mail.gmail.com>
References: <914b35580911110943t3692a005yfedb30c36d08d7b5@mail.gmail.com>
Message-ID: <88e286470911111224y5c3a6175hb93f7e64cbcdccd3@mail.gmail.com>

2009/11/12 Carlos Eduardo da Fonseca <eduardowmaster@gmail.com>:
> Hello everyone!
>
> I need to run a Python and PHP apps simultanely (different subdomain only)
>
> Is it possible?

Yes.

If you are using mod_php though that will enforce some undesirable
things on you. First is that you can only use prefork MPM which can
bring a lot of dangers as described in:

  http://blog.dscpl.com.au/2009/03/load-spikes-and-excessive-memory-usage.html

Second is that PHP loads various single threaded libraries and if
Python needs same library but where Python needs or loads
multithreaded version, then you have crashes and other strange
behaviour.

Graham
From james at sindacio.us  Fri Nov 13 02:45:00 2009
From: james at sindacio.us (James Newton)
Date: Fri Nov 13 02:45:10 2009
Subject: [mod_python] POST example?
In-Reply-To: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
Message-ID: <c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>

Hi,

After looking around I can't seem to find a really straight forward example
of how to POST, all I can seem to figure out is GET. Currently I'm trying to
figure this out so I can post to a page with curl, rather then post via a
form, after asking around and getting turned away with "don't use
mod_python" on most occasions, I was hoping someone on this list could give
me an example of how to post/store post data.

Thanks,
James Newton
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20091113/8048f618/attachment.html
From graham.dumpleton at gmail.com  Fri Nov 13 04:26:17 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Nov 13 04:26:26 2009
Subject: [mod_python] POST example?
In-Reply-To: <c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
Message-ID: <88e286470911130126m21222b57v8270616a602069ce@mail.gmail.com>

Read:

  http://webpython.codepoint.net/mod_python_tutorial

First result for Google on 'mod_python tutorial'.

Graham

2009/11/13 James Newton <james@sindacio.us>:
> Hi,
> After looking around I can't seem to find a really straight forward example
> of how to POST, all I can seem to figure out is GET. Currently I'm trying to
> figure this out so I can post to a page with curl, rather then post via a
> form, after asking around and getting turned away with "don't use
> mod_python" on most occasions, I was hoping someone on this list could give
> me an example of how to post/store post data.
> Thanks,
> James Newton
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From clodoaldo.pinto.neto at gmail.com  Fri Nov 13 05:56:08 2009
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo Neto)
Date: Fri Nov 13 05:56:12 2009
Subject: Fwd: [mod_python] POST example?
In-Reply-To: <a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
Message-ID: <a595de7a0911130256i78bb0c99yce88dcbdca1c959f@mail.gmail.com>

Forgot to post to the list.

Clodoaldo

---------- Forwarded message ----------
From: Clodoaldo Neto <clodoaldo.pinto.neto@gmail.com>
Date: 2009/11/13
Subject: Re: [mod_python] POST example?
To: James Newton <james@sindacio.us>


2009/11/13 James Newton <james@sindacio.us>:
> Hi,
> After looking around I can't seem to find a really straight forward example
> of how to POST, all I can seem to figure out is GET. Currently I'm trying to
> figure this out so I can post to a page with curl, rather then post via a
> form, after asking around and getting turned away with "don't use
> mod_python" on most occasions, I was hoping someone on this list could give
> me an example of how to post/store post data.

You mean you can read data posted by an html form and can't do it when
it is posted by curl? If so show what is your curl code.

If what you are looking for is how to read data posted by any means read:

http://webpython.codepoint.net/mod_python_tutorial

Regards, Clodoaldo

> Thanks,
> James Newton
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>
From clodoaldo.pinto.neto at gmail.com  Fri Nov 13 05:56:23 2009
From: clodoaldo.pinto.neto at gmail.com (Clodoaldo Neto)
Date: Fri Nov 13 05:56:25 2009
Subject: Fwd: [mod_python] POST example?
In-Reply-To: <c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
Message-ID: <a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>

---------- Forwarded message ----------
From: James Newton <james@sindacio.us>
Date: 2009/11/13
Subject: Re: [mod_python] POST example?
To: clodoaldo.pinto.neto@gmail.com


I may be misunderstanding it, I'm assuming POST and GET are handled
the exact same way? The curl command would be like so: curl -F
'postvar=<-' http://url.tld/. I used the example on that website for a
get var, but using it for post just created another get? I may not
being reading into this right.
James

On Fri, Nov 13, 2009 at 3:07 AM, Clodoaldo Neto
<clodoaldo.pinto.neto@gmail.com> wrote:
>
> 2009/11/13 James Newton <james@sindacio.us>:
> > Hi,
> > After looking around I can't seem to find a really straight forward example
> > of how to POST, all I can seem to figure out is GET. Currently I'm trying to
> > figure this out so I can post to a page with curl, rather then post via a
> > form, after asking around and getting turned away with "don't use
> > mod_python" on most occasions, I was hoping someone on this list could give
> > me an example of how to post/store post data.
>
> You mean you can read data posted by an html form and can't do it when
> it is posted by curl? If so show what is your curl code.
>
> If what you are looking for is how to read data posted by any means read:
>
> http://webpython.codepoint.net/mod_python_tutorial
>
> Regards, Clodoaldo
>
> > Thanks,
> > James Newton
> >
> > _______________________________________________
> > Mod_python mailing list
> > Mod_python@modpython.org
> > http://mailman.modpython.org/mailman/listinfo/mod_python
> >
> >
From martijn at xs4us.nu  Wed Nov 25 07:02:26 2009
From: martijn at xs4us.nu (Martijn Moeling)
Date: Wed Nov 25 07:02:45 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com><c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com><a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com><c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
Message-ID: <B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>

Hi all you mod_python fans!

Since I am developing a python web-os (with browser based desktop) which
is heavily dependant on mod_python I am not very happy to see the
development stop of MP.

Since MOD_WSGI is the alternative I know for a while now I have to move.
In my case this seems possible to crate a "fake" MOD_PYTHON module which
communicates with MOD_WSGI and runs the application.

Up to now I have had some success but there is still some work to do
around apache.py but it all seems possible. That said, I do not use the
Publisher handler and I might not be able to implement that part or I
might need help

I will put this out under the same license conditions as MP and since I
am close to releasing the first beta I am starting to get curious about
interest, If I have to put up a new project on some google or
sourceforge server etc. 

As far as I can see there are no real problems (it might with input and
output filters, nut sure yet) and there are still some parameters for
the Request Object to be filled in. My OS (app) seems to start working,
even stuff like my own build webdav server.

So If anyone has interesting comments to make, shoot

The 'beta' name for the project is "mod_Python adapter for mod_wsgi"
Anyone who comes up with something better gets a free copy :-)

Martijn Moeling

From graham.dumpleton at gmail.com  Wed Nov 25 19:01:47 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Wed Nov 25 19:01:57 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
Message-ID: <88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>

Hmmm, did I ever point you to my SWIG bindings for Apache C API.

  http://code.google.com/p/modwsgi/source/browse/#svn/sandbox/ap_swig_py

I stopped work on it because no one was interested, but gives you more
direct access to Apache request_rec object plus all the native Apache
APIs which mod_python has a tendency to want to use at lowest levels.

It can only be used in mod_wsgi embedded mode though, not daemon mode.

To use you need to also set:

  WSGIPassApacheRequest On

in Apache configuration.

It is been a long time since I played with it, but from memory can do
things like:

 from apache.httpd import *

 def application(environ, start_response):
    r = request_rec(environ['apache.request_rec'])

    ap_internal_redirect('/some/other/path', r)

    # Dummy WSGI response as redirect already sent response.
    start_response('200 OK', [])
    return []

The request_rec is already going to give you a requets object like
mod_python, although actually closer to original Apache one than
mod_python.

Graham

2009/11/25 Martijn Moeling <martijn@xs4us.nu>:
> Hi all you mod_python fans!
>
> Since I am developing a python web-os (with browser based desktop) which
> is heavily dependant on mod_python I am not very happy to see the
> development stop of MP.
>
> Since MOD_WSGI is the alternative I know for a while now I have to move.
> In my case this seems possible to crate a "fake" MOD_PYTHON module which
> communicates with MOD_WSGI and runs the application.
>
> Up to now I have had some success but there is still some work to do
> around apache.py but it all seems possible. That said, I do not use the
> Publisher handler and I might not be able to implement that part or I
> might need help
>
> I will put this out under the same license conditions as MP and since I
> am close to releasing the first beta I am starting to get curious about
> interest, If I have to put up a new project on some google or
> sourceforge server etc.
>
> As far as I can see there are no real problems (it might with input and
> output filters, nut sure yet) and there are still some parameters for
> the Request Object to be filled in. My OS (app) seems to start working,
> even stuff like my own build webdav server.
>
> So If anyone has interesting comments to make, shoot
>
> The 'beta' name for the project is "mod_Python adapter for mod_wsgi"
> Anyone who comes up with something better gets a free copy :-)
>
> Martijn Moeling
>
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
From graham.dumpleton at gmail.com  Wed Nov 25 19:37:44 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Wed Nov 25 19:37:53 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
Message-ID: <88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>

FWIW, happy to move that ap_swig_py out to my bitbucket space if
others want to help progress it as a basis for mod_python like more
integrated interface into Apache internals.

Graham

2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
> Hmmm, did I ever point you to my SWIG bindings for Apache C API.
>
> ?http://code.google.com/p/modwsgi/source/browse/#svn/sandbox/ap_swig_py
>
> I stopped work on it because no one was interested, but gives you more
> direct access to Apache request_rec object plus all the native Apache
> APIs which mod_python has a tendency to want to use at lowest levels.
>
> It can only be used in mod_wsgi embedded mode though, not daemon mode.
>
> To use you need to also set:
>
> ?WSGIPassApacheRequest On
>
> in Apache configuration.
>
> It is been a long time since I played with it, but from memory can do
> things like:
>
> ?from apache.httpd import *
>
> ?def application(environ, start_response):
> ? ?r = request_rec(environ['apache.request_rec'])
>
> ? ?ap_internal_redirect('/some/other/path', r)
>
> ? ?# Dummy WSGI response as redirect already sent response.
> ? ?start_response('200 OK', [])
> ? ?return []
>
> The request_rec is already going to give you a requets object like
> mod_python, although actually closer to original Apache one than
> mod_python.
>
> Graham
>
> 2009/11/25 Martijn Moeling <martijn@xs4us.nu>:
>> Hi all you mod_python fans!
>>
>> Since I am developing a python web-os (with browser based desktop) which
>> is heavily dependant on mod_python I am not very happy to see the
>> development stop of MP.
>>
>> Since MOD_WSGI is the alternative I know for a while now I have to move.
>> In my case this seems possible to crate a "fake" MOD_PYTHON module which
>> communicates with MOD_WSGI and runs the application.
>>
>> Up to now I have had some success but there is still some work to do
>> around apache.py but it all seems possible. That said, I do not use the
>> Publisher handler and I might not be able to implement that part or I
>> might need help
>>
>> I will put this out under the same license conditions as MP and since I
>> am close to releasing the first beta I am starting to get curious about
>> interest, If I have to put up a new project on some google or
>> sourceforge server etc.
>>
>> As far as I can see there are no real problems (it might with input and
>> output filters, nut sure yet) and there are still some parameters for
>> the Request Object to be filled in. My OS (app) seems to start working,
>> even stuff like my own build webdav server.
>>
>> So If anyone has interesting comments to make, shoot
>>
>> The 'beta' name for the project is "mod_Python adapter for mod_wsgi"
>> Anyone who comes up with something better gets a free copy :-)
>>
>> Martijn Moeling
>>
>> _______________________________________________
>> Mod_python mailing list
>> Mod_python@modpython.org
>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>
>

From graham.dumpleton at gmail.com  Wed Nov 25 23:18:53 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Wed Nov 25 23:19:01 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
	<88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>
Message-ID: <88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>

I have moved it to:

  http://bitbucket.org/grahamdumpleton/apswigpy/

I'll add some basic documentation on building and usage.

Graham

2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
> FWIW, happy to move that ap_swig_py out to my bitbucket space if
> others want to help progress it as a basis for mod_python like more
> integrated interface into Apache internals.
>
> Graham
>
> 2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
>> Hmmm, did I ever point you to my SWIG bindings for Apache C API.
>>
>> ?http://code.google.com/p/modwsgi/source/browse/#svn/sandbox/ap_swig_py
>>
>> I stopped work on it because no one was interested, but gives you more
>> direct access to Apache request_rec object plus all the native Apache
>> APIs which mod_python has a tendency to want to use at lowest levels.
>>
>> It can only be used in mod_wsgi embedded mode though, not daemon mode.
>>
>> To use you need to also set:
>>
>> ?WSGIPassApacheRequest On
>>
>> in Apache configuration.
>>
>> It is been a long time since I played with it, but from memory can do
>> things like:
>>
>> ?from apache.httpd import *
>>
>> ?def application(environ, start_response):
>> ? ?r = request_rec(environ['apache.request_rec'])
>>
>> ? ?ap_internal_redirect('/some/other/path', r)
>>
>> ? ?# Dummy WSGI response as redirect already sent response.
>> ? ?start_response('200 OK', [])
>> ? ?return []
>>
>> The request_rec is already going to give you a requets object like
>> mod_python, although actually closer to original Apache one than
>> mod_python.
>>
>> Graham
>>
>> 2009/11/25 Martijn Moeling <martijn@xs4us.nu>:
>>> Hi all you mod_python fans!
>>>
>>> Since I am developing a python web-os (with browser based desktop) which
>>> is heavily dependant on mod_python I am not very happy to see the
>>> development stop of MP.
>>>
>>> Since MOD_WSGI is the alternative I know for a while now I have to move.
>>> In my case this seems possible to crate a "fake" MOD_PYTHON module which
>>> communicates with MOD_WSGI and runs the application.
>>>
>>> Up to now I have had some success but there is still some work to do
>>> around apache.py but it all seems possible. That said, I do not use the
>>> Publisher handler and I might not be able to implement that part or I
>>> might need help
>>>
>>> I will put this out under the same license conditions as MP and since I
>>> am close to releasing the first beta I am starting to get curious about
>>> interest, If I have to put up a new project on some google or
>>> sourceforge server etc.
>>>
>>> As far as I can see there are no real problems (it might with input and
>>> output filters, nut sure yet) and there are still some parameters for
>>> the Request Object to be filled in. My OS (app) seems to start working,
>>> even stuff like my own build webdav server.
>>>
>>> So If anyone has interesting comments to make, shoot
>>>
>>> The 'beta' name for the project is "mod_Python adapter for mod_wsgi"
>>> Anyone who comes up with something better gets a free copy :-)
>>>
>>> Martijn Moeling
>>>
>>> _______________________________________________
>>> Mod_python mailing list
>>> Mod_python@modpython.org
>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>
>>
>

From martijn at xs4us.nu  Thu Nov 26 05:13:43 2009
From: martijn at xs4us.nu (Martijn Moeling)
Date: Thu Nov 26 05:13:59 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
	<88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>
	<88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>
Message-ID: <44898C78-6EEC-4B4A-9C3E-754BAAEDE33D@xs4us.nu>

Graham,

Thank you for the info.

I might very well use the SWIG bindings, I'll have a closer look at it.
MP coders might be happy with just embedded mode...

Anyhow, I'll keep things updated on the MP mailing list for now.

Martijn

 
On Nov 26, 2009, at 5:18 AM, Graham Dumpleton wrote:

> I have moved it to:
> 
>  http://bitbucket.org/grahamdumpleton/apswigpy/
> 
> I'll add some basic documentation on building and usage.
> 
> Graham
> 
> 2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
>> FWIW, happy to move that ap_swig_py out to my bitbucket space if
>> others want to help progress it as a basis for mod_python like more
>> integrated interface into Apache internals.
>> 
>> Graham
>> 
>> 2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
>>> Hmmm, did I ever point you to my SWIG bindings for Apache C API.
>>> 
>>>  http://code.google.com/p/modwsgi/source/browse/#svn/sandbox/ap_swig_py
>>> 
>>> I stopped work on it because no one was interested, but gives you more
>>> direct access to Apache request_rec object plus all the native Apache
>>> APIs which mod_python has a tendency to want to use at lowest levels.
>>> 
>>> It can only be used in mod_wsgi embedded mode though, not daemon mode.
>>> 
>>> To use you need to also set:
>>> 
>>>  WSGIPassApacheRequest On
>>> 
>>> in Apache configuration.
>>> 
>>> It is been a long time since I played with it, but from memory can do
>>> things like:
>>> 
>>>  from apache.httpd import *
>>> 
>>>  def application(environ, start_response):
>>>    r = request_rec(environ['apache.request_rec'])
>>> 
>>>    ap_internal_redirect('/some/other/path', r)
>>> 
>>>    # Dummy WSGI response as redirect already sent response.
>>>    start_response('200 OK', [])
>>>    return []
>>> 
>>> The request_rec is already going to give you a requets object like
>>> mod_python, although actually closer to original Apache one than
>>> mod_python.
>>> 
>>> Graham
>>> 
>>> 2009/11/25 Martijn Moeling <martijn@xs4us.nu>:
>>>> Hi all you mod_python fans!
>>>> 
>>>> Since I am developing a python web-os (with browser based desktop) which
>>>> is heavily dependant on mod_python I am not very happy to see the
>>>> development stop of MP.
>>>> 
>>>> Since MOD_WSGI is the alternative I know for a while now I have to move.
>>>> In my case this seems possible to crate a "fake" MOD_PYTHON module which
>>>> communicates with MOD_WSGI and runs the application.
>>>> 
>>>> Up to now I have had some success but there is still some work to do
>>>> around apache.py but it all seems possible. That said, I do not use the
>>>> Publisher handler and I might not be able to implement that part or I
>>>> might need help
>>>> 
>>>> I will put this out under the same license conditions as MP and since I
>>>> am close to releasing the first beta I am starting to get curious about
>>>> interest, If I have to put up a new project on some google or
>>>> sourceforge server etc.
>>>> 
>>>> As far as I can see there are no real problems (it might with input and
>>>> output filters, nut sure yet) and there are still some parameters for
>>>> the Request Object to be filled in. My OS (app) seems to start working,
>>>> even stuff like my own build webdav server.
>>>> 
>>>> So If anyone has interesting comments to make, shoot
>>>> 
>>>> The 'beta' name for the project is "mod_Python adapter for mod_wsgi"
>>>> Anyone who comes up with something better gets a free copy :-)
>>>> 
>>>> Martijn Moeling
>>>> 
>>>> _______________________________________________
>>>> Mod_python mailing list
>>>> Mod_python@modpython.org
>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>> 
>>> 
>> 

From graham.dumpleton at gmail.com  Thu Nov 26 05:48:08 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Thu Nov 26 05:48:16 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <44898C78-6EEC-4B4A-9C3E-754BAAEDE33D@xs4us.nu>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
	<88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>
	<88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>
	<44898C78-6EEC-4B4A-9C3E-754BAAEDE33D@xs4us.nu>
Message-ID: <88e286470911260248s34b8235ag87097c7147333758@mail.gmail.com>

2009/11/26 Martijn Moeling <martijn@xs4us.nu>:
> Graham,
>
> Thank you for the info.
>
> I might very well use the SWIG bindings, I'll have a closer look at it.
> MP coders might be happy with just embedded mode...

If you go that way let me know as obviously will need to give guidance
and I know some things aren't quite working at present and so they
will need to be fixed up.

There is also a new feature in mod_wsgi which may make this stuff
easier to use for what you are doing and also looking ant further
changes for mod_wsgi 4.0 which may make it even more streamlined as
far as adding a personality layer over the top of normal WSGI layer.

As I have sort of planned all along, then if there is enough interest
in the raw Apache API access, then will introduce a first class
content handler for that raw API rather than having to use it
indirectly via the WSGI layer.

Graham

> Anyhow, I'll keep things updated on the MP mailing list for now.
>
> Martijn
>
>
> On Nov 26, 2009, at 5:18 AM, Graham Dumpleton wrote:
>
>> I have moved it to:
>>
>> ?http://bitbucket.org/grahamdumpleton/apswigpy/
>>
>> I'll add some basic documentation on building and usage.
>>
>> Graham
>>
>> 2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
>>> FWIW, happy to move that ap_swig_py out to my bitbucket space if
>>> others want to help progress it as a basis for mod_python like more
>>> integrated interface into Apache internals.
>>>
>>> Graham
>>>
>>> 2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
>>>> Hmmm, did I ever point you to my SWIG bindings for Apache C API.
>>>>
>>>> ?http://code.google.com/p/modwsgi/source/browse/#svn/sandbox/ap_swig_py
>>>>
>>>> I stopped work on it because no one was interested, but gives you more
>>>> direct access to Apache request_rec object plus all the native Apache
>>>> APIs which mod_python has a tendency to want to use at lowest levels.
>>>>
>>>> It can only be used in mod_wsgi embedded mode though, not daemon mode.
>>>>
>>>> To use you need to also set:
>>>>
>>>> ?WSGIPassApacheRequest On
>>>>
>>>> in Apache configuration.
>>>>
>>>> It is been a long time since I played with it, but from memory can do
>>>> things like:
>>>>
>>>> ?from apache.httpd import *
>>>>
>>>> ?def application(environ, start_response):
>>>> ? ?r = request_rec(environ['apache.request_rec'])
>>>>
>>>> ? ?ap_internal_redirect('/some/other/path', r)
>>>>
>>>> ? ?# Dummy WSGI response as redirect already sent response.
>>>> ? ?start_response('200 OK', [])
>>>> ? ?return []
>>>>
>>>> The request_rec is already going to give you a requets object like
>>>> mod_python, although actually closer to original Apache one than
>>>> mod_python.
>>>>
>>>> Graham
>>>>
>>>> 2009/11/25 Martijn Moeling <martijn@xs4us.nu>:
>>>>> Hi all you mod_python fans!
>>>>>
>>>>> Since I am developing a python web-os (with browser based desktop) which
>>>>> is heavily dependant on mod_python I am not very happy to see the
>>>>> development stop of MP.
>>>>>
>>>>> Since MOD_WSGI is the alternative I know for a while now I have to move.
>>>>> In my case this seems possible to crate a "fake" MOD_PYTHON module which
>>>>> communicates with MOD_WSGI and runs the application.
>>>>>
>>>>> Up to now I have had some success but there is still some work to do
>>>>> around apache.py but it all seems possible. That said, I do not use the
>>>>> Publisher handler and I might not be able to implement that part or I
>>>>> might need help
>>>>>
>>>>> I will put this out under the same license conditions as MP and since I
>>>>> am close to releasing the first beta I am starting to get curious about
>>>>> interest, If I have to put up a new project on some google or
>>>>> sourceforge server etc.
>>>>>
>>>>> As far as I can see there are no real problems (it might with input and
>>>>> output filters, nut sure yet) and there are still some parameters for
>>>>> the Request Object to be filled in. My OS (app) seems to start working,
>>>>> even stuff like my own build webdav server.
>>>>>
>>>>> So If anyone has interesting comments to make, shoot
>>>>>
>>>>> The 'beta' name for the project is "mod_Python adapter for mod_wsgi"
>>>>> Anyone who comes up with something better gets a free copy :-)
>>>>>
>>>>> Martijn Moeling
>>>>>
>>>>> _______________________________________________
>>>>> Mod_python mailing list
>>>>> Mod_python@modpython.org
>>>>> http://mailman.modpython.org/mailman/listinfo/mod_python
>>>>>
>>>>
>>>
>
>

From bostjan.primozic at amis.net  Thu Nov 26 09:37:41 2009
From: bostjan.primozic at amis.net (=?iso-8859-2?B?UHJpbW++aeggQm+5dGphbg==?=)
Date: Thu Nov 26 09:37:53 2009
Subject: [mod_python] errors in apache log 
Message-ID: <F460B437BF204BB0AC6969B9CE18D6FF@BostjanPC>

Hi, 

I'd like to know how to remove this errors. 

[Thu Nov 26 15:30:18 2009] [error] python_init: Python version mismatch, expected '2.5', found '2.5.4'.
[Thu Nov 26 15:30:18 2009] [error] python_init: Python executable found 'C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin\\httpd.exe'.
[Thu Nov 26 15:30:18 2009] [error] python_init: Python path being used 'C:\\WINDOWS\\system32\\python25.zip;C:\\Python25\\Lib;C:\\Python25\\DLLs;C:\\Python25\\Lib\\lib-tk;;C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin'.

I first install python 2.5.4 then apache 2.2 and last mod python 3.3.1. My OS is win XP sp3. 

Thank you very much, Bostjan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20091126/73096559/attachment.html
From martijn at xs4us.nu  Thu Nov 26 11:13:50 2009
From: martijn at xs4us.nu (Martijn Moeling)
Date: Thu Nov 26 11:14:07 2009
Subject: [mod_python] errors in apache log 
References: <F460B437BF204BB0AC6969B9CE18D6FF@BostjanPC>
Message-ID: <B6C73A5E30565245BB6D32B5F5DF7A52120726@sense.emmastraat.pijnacker>

Hi,

 

Your mod_python is compiled with python 2.5, either install python 2.5 (with no 4, easiest way) or get a version of MP with python 2.5.4 or compile mod_python yourself against your current python version, if you do the last, I suggest you install a current version of python.

 

Kind regards,

 

Martijn

 

________________________________

Van: mod_python-bounces@modpython.org [mailto:mod_python-bounces@modpython.org] Namens Primo?ic Bo?tjan
Verzonden: Thursday, November 26, 2009 3:38 PM
Aan: mod_python@modpython.org
Onderwerp: [mod_python] errors in apache log 

 

Hi, 

 

I'd like to know how to remove this errors. 

[Thu Nov 26 15:30:18 2009] [error] python_init: Python version mismatch, expected '2.5', found '2.5.4'.
[Thu Nov 26 15:30:18 2009] [error] python_init: Python executable found 'C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin\\httpd.exe'.
[Thu Nov 26 15:30:18 2009] [error] python_init: Python path being used 'C:\\WINDOWS\\system32\\python25.zip;C:\\Python25\\Lib;C:\\Python25\\DLLs;C:\\Python25\\Lib\\lib-tk;;C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin'.

I first install python 2.5.4 then apache 2.2 and last mod python 3.3.1. My OS is win XP sp3. 

Thank you very much, Bostjan

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20091126/74e0902e/attachment.html
From bostjan.primozic at amis.net  Thu Nov 26 12:11:42 2009
From: bostjan.primozic at amis.net (=?iso-8859-2?B?UHJpbW++aeggQm+5dGphbg==?=)
Date: Thu Nov 26 12:12:03 2009
Subject: [mod_python] errors in apache log 
In-Reply-To: <B6C73A5E30565245BB6D32B5F5DF7A52120726@sense.emmastraat.pijnacker>
References: <F460B437BF204BB0AC6969B9CE18D6FF@BostjanPC>
	<B6C73A5E30565245BB6D32B5F5DF7A52120726@sense.emmastraat.pijnacker>
Message-ID: <C8A0CCCEF31D4388B2E5EA0B48BE41CB@BostjanPC>

What do I need to recompile mod python on windows ? 
  ----- Original Message ----- 
  From: Martijn Moeling 
  To: Primo?ic Bo?tjan ; mod_python@modpython.org 
  Sent: Thursday, November 26, 2009 5:13 PM
  Subject: RE: [mod_python] errors in apache log 


  Hi,

   

  Your mod_python is compiled with python 2.5, either install python 2.5 (with no 4, easiest way) or get a version of MP with python 2.5.4 or compile mod_python yourself against your current python version, if you do the last, I suggest you install a current version of python.

   

  Kind regards,

   

  Martijn

   


------------------------------------------------------------------------------

  Van: mod_python-bounces@modpython.org [mailto:mod_python-bounces@modpython.org] Namens Primo?ic Bo?tjan
  Verzonden: Thursday, November 26, 2009 3:38 PM
  Aan: mod_python@modpython.org
  Onderwerp: [mod_python] errors in apache log 

   

  Hi, 

   

  I'd like to know how to remove this errors. 

  [Thu Nov 26 15:30:18 2009] [error] python_init: Python version mismatch, expected '2.5', found '2.5.4'.
  [Thu Nov 26 15:30:18 2009] [error] python_init: Python executable found 'C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin\\httpd.exe'.
  [Thu Nov 26 15:30:18 2009] [error] python_init: Python path being used 'C:\\WINDOWS\\system32\\python25.zip;C:\\Python25\\Lib;C:\\Python25\\DLLs;C:\\Python25\\Lib\\lib-tk;;C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin'.

  I first install python 2.5.4 then apache 2.2 and last mod python 3.3.1. My OS is win XP sp3. 

  Thank you very much, Bostjan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20091126/863adb7f/attachment.html
From graham.dumpleton at gmail.com  Thu Nov 26 15:51:48 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Thu Nov 26 15:51:57 2009
Subject: [mod_python] errors in apache log
In-Reply-To: <F460B437BF204BB0AC6969B9CE18D6FF@BostjanPC>
References: <F460B437BF204BB0AC6969B9CE18D6FF@BostjanPC>
Message-ID: <88e286470911261251i77dbf547y4dc584948c5dff39@mail.gmail.com>

It is a warning only, not an error and can be ignored.

It is safe because because on Windows the Python library is loaded
dynamically and so you will always pick up correct library for the
actual Python installation.

This only becomes a problem on UNIX systems where Python library is
linked statically into mod_python.

Graham

2009/11/27 Primo?i? Bo?tjan <bostjan.primozic@amis.net>:
> Hi,
>
> I'd like to know how to remove this errors.
>
> [Thu Nov 26 15:30:18 2009] [error] python_init: Python version mismatch,
> expected '2.5', found '2.5.4'.
> [Thu Nov 26 15:30:18 2009] [error] python_init: Python executable found
> 'C:\\Program Files\\Apache Software Foundation\\Apache2.2\\bin\\httpd.exe'.
> [Thu Nov 26 15:30:18 2009] [error] python_init: Python path being used
> 'C:\\WINDOWS\\system32\\python25.zip;C:\\Python25\\Lib;C:\\Python25\\DLLs;C:\\Python25\\Lib\\lib-tk;;C:\\Program
> Files\\Apache Software Foundation\\Apache2.2\\bin'.
>
> I first install python 2.5.4 then apache 2.2 and last mod python 3.3.1. My
> OS is win XP sp3.
>
> Thank you very much, Bostjan
> _______________________________________________
> Mod_python mailing list
> Mod_python@modpython.org
> http://mailman.modpython.org/mailman/listinfo/mod_python
>
>

From graham.dumpleton at gmail.com  Fri Nov 27 06:46:34 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Fri Nov 27 06:56:06 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
Message-ID: <88e286470911270346i23c69831v4fadf2b6fb09acb8@mail.gmail.com>

2009/11/25 Martijn Moeling <martijn@xs4us.nu>:
> Hi all you mod_python fans!
>
> Since I am developing a python web-os (with browser based desktop) which
> is heavily dependant on mod_python I am not very happy to see the
> development stop of MP.
>
> Since MOD_WSGI is the alternative I know for a while now I have to move.
> In my case this seems possible to crate a "fake" MOD_PYTHON module which
> communicates with MOD_WSGI and runs the application.
>
> Up to now I have had some success but there is still some work to do
> around apache.py but it all seems possible. That said, I do not use the
> Publisher handler and I might not be able to implement that part or I
> might need help

A few questions.

If you don't use publisher, what parts do you use?

1. PSP?
2. cgihandler?
3. FieldStorage?
4. Session?
5. Cookie?
6. import_module() and import overlay?
7. request_rec, server_rec, conn_rec wrappers?
8. ap_internal_redirect() wrappers?

Overall, what is it about mod_python that you are doing would make it
a better platform that WSGI?

Are you aiming for 100% compatibility or more just the style of
writing applications?

Some stuff like Cookie and FieldStorage could be switched to more
modern Python standard library equivalents, but obviously they would
not be wholly interface compatible.

The mod_python interfaces are also quite arbitrary and not well
thought out in places due to egregious growth over time and could do
with some cleanup to make things more uniform.

Graham
From martijn at xs4us.nu  Fri Nov 27 16:25:22 2009
From: martijn at xs4us.nu (Martijn Moeling)
Date: Fri Nov 27 16:25:45 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <88e286470911270346i23c69831v4fadf2b6fb09acb8@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911270346i23c69831v4fadf2b6fb09acb8@mail.gmail.com>
Message-ID: <FD1E92D4-0F0B-407B-BD7F-AC00A839E10A@xs4us.nu>


For my personal use I am looking for programmatic compatibility (only), simply to run existing code without MP and on top of WSGI.
Sole reason: end of development MP

Since I do not use all of the functionality of MP I do not need but am willing to extend MODPYTHON_WSGI to help others. Basically most of the MP users relying on passing the Request Object around would be happy with my work pretty soon.
For full code compatibility I have set up a web server on linux with python 2.6.[don't remember] and mod_wsgi. For testing purposes I have simply created a "mod_python" directory in the side-packages. 
In there are the __init__.py, Cookie.py util.py and apache.py (Session.py is something special in my case). In these modules I have commented out all references to _apache to see what happens.

next I have made an index.wsgi

There I have "made" the definition of the Request, Connection and Server objects, these might be moved somewhere else (apache.py might be the place).

my original module containing the handlers is imported like:   import index as app
and:
app.handler(Request(environ)) 

does the job (without any change to my application, no upload with body possible yet).

The register_cleanup is handled like the example in the wiki of mod_wsgi. For now I keep the references and data in an Array.

So for now I have a working mod_python application running on mod_wsgi.

ToDo shortlist:
Make req.read() (and similair functions) work
Solve headers_in. Without that CalDav, WebDav are surely broken (No solution yet, headers_out is done)
implement request members (Like Req.parsed_uri)
review util and make things like fieldstorage work
implement some _apache functionality (log error being the most important for now)
change Session.py (Random generator is hooked to _apache functionality, workaround works for now)

> 
> A few questions.
> 
> If you don't use publisher, what parts do you use?
> 
> 1. PSP?
No.... I hope I can fix _psp easily.....
> 2. cgihandler?
No, Will make that work if really needed and possible
> 3. FieldStorage?
Not anymore (My current production version does, will not be ran on MOD_WSGI )
> 4. Session?
YES! but I heavily modified the original Session.py, remember my modifications to store in MySQL? Now I rely on SQLAlchemy
> 5. Cookie?
See Session, although I am planning to implement Cookieless sessions, somehow, someday
> 6. import_module() and import overlay?
Not yet, and not sure I will. This I something I would like to talk to you about for best practice in my highly complex situation, currently way out of topic to discuss here....
> 7. request_rec, server_rec, conn_rec wrappers?
Do not really understand the "wrapper" part of your question, I think though my story above does answer it, if not tell me..
> 8. ap_internal_redirect() wrappers?
Do not use this since my system basically only uses apache and mod_python as a communication layer and a way to use the python language
> 
> Overall, what is it about mod_python that you are doing would make it
> a better platform that WSGI?
req, req, req and req again.

I pass req (the request_req) around, add stuff to it etc etc. My code relies on this so mutch that I need it or rebuild the the entire thing. I am developing a kind of a multi user Operating System with a web based desktop. Tho whole thing is developed so it can be scaleable and I am close to start working on the IDE for application development which will run in the web desktop. I have implemented email, calendaring (CalDAV), fileIO (WebDav), MessageQue (Client to Client, Client to server, Server to Server) etc. etc. So you can even sync your Iphone, Mac, Microsoft Exchange etc. so I need low level stuf... over 5 years of research and development has gone into this.

> 
> Are you aiming for 100% compatibility or more just the style of
> writing applications?
Must be clear by now

> 
> Some stuff like Cookie and FieldStorage could be switched to more
> modern Python standard library equivalents, but obviously they would
> not be wholly interface compatible.
> 
I See your point, Interface compatibility is the most important point, If someone wants to pick that up....

> The mod_python interfaces are also quite arbitrary and not well
> thought out in places due to egregious growth over time and could do
> with some cleanup to make things more uniform.

True. I think though that due to the way the mod_python documentation turned out I think programmers messed around until they all got a way to work with mod_python, one found its answer with PSP the other with different handlers. I recognize my need for protocol level programming and the "event" driven handler model. So after using mod_python for a long time I must confess I am still confused about PSP, publisher etc. sorry if I confuse things.

> 
> Graham


Martijn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://mm_cfg_has_not_been_edited_to_set_host_domains/pipermail/mod_python/attachments/20091127/b1f4bb20/attachment.html
From graham.dumpleton at gmail.com  Mon Nov 30 20:13:00 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Mon Nov 30 20:13:12 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
	<88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>
	<88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>
Message-ID: <88e286470911301713o54da1c64h933e4bc1cee72a1a@mail.gmail.com>

2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
> I have moved it to:
>
> ?http://bitbucket.org/grahamdumpleton/apswigpy/
>
> I'll add some basic documentation on building and usage.

Quick cheat sheet.

1. Do a checkout/pull latest code for apswigpy from bitbucket and
install it. Need this as added a little bridge for WSGI to at least
get things going.

2. Add following configuration to Apache. I had this inside its own VirtualHost.

WSGIHandlerScript python-script (apache.wsgi)

<Directory /Users/grahamd/Testing/modpysfu>
WSGIProcessGroup %{GLOBAL}
WSGIApplicationGroup modpysfu
WSGIPassApacheRequest On

AddHandler python-script .py

Options MultiViews FollowSymLinks
MultiviewsMatch Handlers

Order allow,deny
Allow from all
</Directory>

In my case that directory was what DocumentRoot for host was set to.

You would need to Alias it in some way if don't want to do it for DocumentRoot.

3. Now dump '.py' files in that directory and access URL as if
accessing them as static file. A couple of examples are:

# hello.py

from apache.httpd import *
from apache.http_protocol import *

def handler(r):
    output = '<html><body>Hello World!</body></html>'

    r.status = HTTP_OK
    ap_set_content_type(r, 'text/html')
    #ap_set_content_length(r, len(output))
    ap_rwrite(output, r)
    ap_rflush(r)

    return OK

# echo.py

from apache.httpd import *
from apache.http_protocol import *

def handler(r):
    r.status = HTTP_OK
    ap_set_content_type(r, 'text/plain')

    for (name, value) in r.headers_in.items():
        ap_rwrite('%s: %s\n' % (name, value), r)

    ap_rflush(r)

    return OK

Note that this is raw SWIG binding, no mod_python specific additions
at this point. Some things have had to be Pythonised such as APR
tables as used by headers_in, but otherwise trying to keep truthful to
APR/AP APIs.

I know some things don't work, such as 'ap_set_content_length()'. Some
issue with SWIG bindings type equivalence has to be worked out for
that one and haven't had chance to read SWIG documentation.

Graham

From graham.dumpleton at gmail.com  Mon Nov 30 20:24:10 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Mon Nov 30 20:24:20 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <88e286470911301713o54da1c64h933e4bc1cee72a1a@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<c2f9e3c20911122345i3812ac58qc69974240f980a65@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
	<88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>
	<88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>
	<88e286470911301713o54da1c64h933e4bc1cee72a1a@mail.gmail.com>
Message-ID: <88e286470911301724s19124de2lac095b4eb3ea0cd7@mail.gmail.com>

I forgot to mention there is no automatic code reloading. Thus, if
changing any of the .py files you need to do an Apache restart.

The point is that this is just a proof of concept of WSGI bridge at
the moment. The intent would be to have separate package 'modpysfu'
which adds back all that automatic code reloading that mod_python had
as well as mod_python compatible interfaces for stuff.

Graham

2009/12/1 Graham Dumpleton <graham.dumpleton@gmail.com>:
> 2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
>> I have moved it to:
>>
>> ?http://bitbucket.org/grahamdumpleton/apswigpy/
>>
>> I'll add some basic documentation on building and usage.
>
> Quick cheat sheet.
>
> 1. Do a checkout/pull latest code for apswigpy from bitbucket and
> install it. Need this as added a little bridge for WSGI to at least
> get things going.
>
> 2. Add following configuration to Apache. I had this inside its own VirtualHost.
>
> WSGIHandlerScript python-script (apache.wsgi)
>
> <Directory /Users/grahamd/Testing/modpysfu>
> WSGIProcessGroup %{GLOBAL}
> WSGIApplicationGroup modpysfu
> WSGIPassApacheRequest On
>
> AddHandler python-script .py
>
> Options MultiViews FollowSymLinks
> MultiviewsMatch Handlers
>
> Order allow,deny
> Allow from all
> </Directory>
>
> In my case that directory was what DocumentRoot for host was set to.
>
> You would need to Alias it in some way if don't want to do it for DocumentRoot.
>
> 3. Now dump '.py' files in that directory and access URL as if
> accessing them as static file. A couple of examples are:
>
> # hello.py
>
> from apache.httpd import *
> from apache.http_protocol import *
>
> def handler(r):
> ? ?output = '<html><body>Hello World!</body></html>'
>
> ? ?r.status = HTTP_OK
> ? ?ap_set_content_type(r, 'text/html')
> ? ?#ap_set_content_length(r, len(output))
> ? ?ap_rwrite(output, r)
> ? ?ap_rflush(r)
>
> ? ?return OK
>
> # echo.py
>
> from apache.httpd import *
> from apache.http_protocol import *
>
> def handler(r):
> ? ?r.status = HTTP_OK
> ? ?ap_set_content_type(r, 'text/plain')
>
> ? ?for (name, value) in r.headers_in.items():
> ? ? ? ?ap_rwrite('%s: %s\n' % (name, value), r)
>
> ? ?ap_rflush(r)
>
> ? ?return OK
>
> Note that this is raw SWIG binding, no mod_python specific additions
> at this point. Some things have had to be Pythonised such as APR
> tables as used by headers_in, but otherwise trying to keep truthful to
> APR/AP APIs.
>
> I know some things don't work, such as 'ap_set_content_length()'. Some
> issue with SWIG bindings type equivalence has to be worked out for
> that one and haven't had chance to read SWIG documentation.
>
> Graham
>

From graham.dumpleton at gmail.com  Mon Nov 30 20:29:39 2009
From: graham.dumpleton at gmail.com (Graham Dumpleton)
Date: Mon Nov 30 20:29:48 2009
Subject: [mod_python] mod_python adapter for mod_wsgi in the make
In-Reply-To: <88e286470911301724s19124de2lac095b4eb3ea0cd7@mail.gmail.com>
References: <c2f9e3c20911122342g58179609s1bb0046b24ac6240@mail.gmail.com>
	<a595de7a0911130107y1067a22exd498225e8aa4baf3@mail.gmail.com>
	<c2f9e3c20911130153y4f16535bg2759654e7cf92c86@mail.gmail.com>
	<a595de7a0911130256i6c82a8c4o1dfb199726e12a73@mail.gmail.com>
	<B6C73A5E30565245BB6D32B5F5DF7A52120724@sense.emmastraat.pijnacker>
	<88e286470911251601k1b55d83bma31bf6b37d5d545@mail.gmail.com>
	<88e286470911251637p5bae42baw5309365d2f3a129b@mail.gmail.com>
	<88e286470911252018y658d165fp87bf63e4494cd041@mail.gmail.com>
	<88e286470911301713o54da1c64h933e4bc1cee72a1a@mail.gmail.com>
	<88e286470911301724s19124de2lac095b4eb3ea0cd7@mail.gmail.com>
Message-ID: <88e286470911301729k3173b178k39c061fcc738c20@mail.gmail.com>

Sorry, one more thing. You also need latest check out of mod_wsgi 4.0
development version from subversion trunk for mod_wsgi.

It can be made to work with mod_wsgi 3.1, you would just need to instead use:

  WSGIHandlerScript /some/path/bridge.wsgi

where that file contains:

  from apache.wsgi import *

The mod_wsgi 4.0 version supports a direct module reference to
WSGIHandlerScript to skip needing a handler script file.

Graham

2009/12/1 Graham Dumpleton <graham.dumpleton@gmail.com>:
> I forgot to mention there is no automatic code reloading. Thus, if
> changing any of the .py files you need to do an Apache restart.
>
> The point is that this is just a proof of concept of WSGI bridge at
> the moment. The intent would be to have separate package 'modpysfu'
> which adds back all that automatic code reloading that mod_python had
> as well as mod_python compatible interfaces for stuff.
>
> Graham
>
> 2009/12/1 Graham Dumpleton <graham.dumpleton@gmail.com>:
>> 2009/11/26 Graham Dumpleton <graham.dumpleton@gmail.com>:
>>> I have moved it to:
>>>
>>> ?http://bitbucket.org/grahamdumpleton/apswigpy/
>>>
>>> I'll add some basic documentation on building and usage.
>>
>> Quick cheat sheet.
>>
>> 1. Do a checkout/pull latest code for apswigpy from bitbucket and
>> install it. Need this as added a little bridge for WSGI to at least
>> get things going.
>>
>> 2. Add following configuration to Apache. I had this inside its own VirtualHost.
>>
>> WSGIHandlerScript python-script (apache.wsgi)
>>
>> <Directory /Users/grahamd/Testing/modpysfu>
>> WSGIProcessGroup %{GLOBAL}
>> WSGIApplicationGroup modpysfu
>> WSGIPassApacheRequest On
>>
>> AddHandler python-script .py
>>
>> Options MultiViews FollowSymLinks
>> MultiviewsMatch Handlers
>>
>> Order allow,deny
>> Allow from all
>> </Directory>
>>
>> In my case that directory was what DocumentRoot for host was set to.
>>
>> You would need to Alias it in some way if don't want to do it for DocumentRoot.
>>
>> 3. Now dump '.py' files in that directory and access URL as if
>> accessing them as static file. A couple of examples are:
>>
>> # hello.py
>>
>> from apache.httpd import *
>> from apache.http_protocol import *
>>
>> def handler(r):
>> ? ?output = '<html><body>Hello World!</body></html>'
>>
>> ? ?r.status = HTTP_OK
>> ? ?ap_set_content_type(r, 'text/html')
>> ? ?#ap_set_content_length(r, len(output))
>> ? ?ap_rwrite(output, r)
>> ? ?ap_rflush(r)
>>
>> ? ?return OK
>>
>> # echo.py
>>
>> from apache.httpd import *
>> from apache.http_protocol import *
>>
>> def handler(r):
>> ? ?r.status = HTTP_OK
>> ? ?ap_set_content_type(r, 'text/plain')
>>
>> ? ?for (name, value) in r.headers_in.items():
>> ? ? ? ?ap_rwrite('%s: %s\n' % (name, value), r)
>>
>> ? ?ap_rflush(r)
>>
>> ? ?return OK
>>
>> Note that this is raw SWIG binding, no mod_python specific additions
>> at this point. Some things have had to be Pythonised such as APR
>> tables as used by headers_in, but otherwise trying to keep truthful to
>> APR/AP APIs.
>>
>> I know some things don't work, such as 'ap_set_content_length()'. Some
>> issue with SWIG bindings type equivalence has to be worked out for
>> that one and haven't had chance to read SWIG documentation.
>>
>> Graham
>>
>

