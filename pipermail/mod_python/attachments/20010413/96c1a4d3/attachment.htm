<tt>
&lt;html&gt;<br>
At&nbsp;10:18&nbsp;AM&nbsp;4/12/2001&nbsp;+1000,&nbsp;you&nbsp;wrote:&lt;br&gt;<br>
Wouldn't&nbsp;it&nbsp;be&nbsp;better&nbsp;just&nbsp;to&nbsp;buffer&nbsp;the&nbsp;output&nbsp;and&nbsp;then&nbsp;just&nbsp;use&nbsp;one<br>
output&nbsp;to&nbsp;send&lt;br&gt;<br>
the&nbsp;entire&nbsp;buffer&nbsp;?&nbsp;Isn't&nbsp;that&nbsp;what&nbsp;Grisha&nbsp;was&nbsp;suggesting&nbsp;in&nbsp;the&nbsp;first<br>
place&nbsp;?&lt;br&gt;<br>
&lt;br&gt;<br>
yes,&nbsp;this&nbsp;is&nbsp;what&nbsp;he&nbsp;is&nbsp;suggesting&nbsp;and&nbsp;exactly&nbsp;what&nbsp;I&nbsp;was&nbsp;trying&nbsp;to&nbsp;avoid<br>
in&nbsp;the&nbsp;first&nbsp;place.&nbsp;Also,&nbsp;while&nbsp;not&nbsp;being&nbsp;a&nbsp;CGI/Web&nbsp;guru,&nbsp;I&nbsp;can&nbsp;imagine&nbsp;a<br>
number&nbsp;of&nbsp;potential&nbsp;problems&nbsp;with&nbsp;having&nbsp;to&nbsp;buffer&nbsp;all&nbsp;of&nbsp;the&nbsp;output<br>
before&nbsp;sending&nbsp;it&nbsp;to&nbsp;the&nbsp;browser.&nbsp;First&nbsp;of&nbsp;all&nbsp;the&nbsp;output&nbsp;may&nbsp;be&nbsp;large<br>
and&nbsp;it&nbsp;may&nbsp;not&nbsp;be&nbsp;practical&nbsp;to&nbsp;assemble&nbsp;it&nbsp;in&nbsp;memory.&nbsp;Second&nbsp;it&nbsp;may&nbsp;be<br>
useful&nbsp;to&nbsp;allow&nbsp;browser&nbsp;to&nbsp;start&nbsp;rendering&nbsp;some&nbsp;output&nbsp;before&nbsp;it&nbsp;is<br>
completely&nbsp;created&nbsp;if&nbsp;it&nbsp;takes&nbsp;a&nbsp;long&nbsp;time&nbsp;to&nbsp;create&nbsp;dynamic&nbsp;output.<br>
Third,&nbsp;if&nbsp;the&nbsp;browser&nbsp;cancelled&nbsp;the&nbsp;request&nbsp;the&nbsp;only&nbsp;way&nbsp;to&nbsp;find&nbsp;out&nbsp;is<br>
to&nbsp;try&nbsp;to&nbsp;send&nbsp;the&nbsp;reply&nbsp;and&nbsp;get&nbsp;some&nbsp;sort&nbsp;of&nbsp;bad&nbsp;status.&nbsp;Imagine&nbsp;a<br>
script&nbsp;that&nbsp;does&nbsp;a&nbsp;set&nbsp;of&nbsp;time-consuming&nbsp;database&nbsp;queries&nbsp;to&nbsp;create&nbsp;the<br>
output.&nbsp;it&nbsp;would&nbsp;be&nbsp;useful&nbsp;to&nbsp;test&nbsp;whether&nbsp;the&nbsp;request&nbsp;was&nbsp;cancelled<br>
after&nbsp;each&nbsp;query&nbsp;by&nbsp;attempting&nbsp;to&nbsp;send&nbsp;something&nbsp;back&nbsp;(a&nbsp;space&nbsp;character<br>
perhaps)&nbsp;to&nbsp;see&nbsp;whether&nbsp;the&nbsp;socket&nbsp;is&nbsp;still&nbsp;open&nbsp;before&nbsp;doing&nbsp;the&nbsp;rest&nbsp;of<br>
the&nbsp;queries.&nbsp;Perhaps&nbsp;somebody&nbsp;could&nbsp;suggest&nbsp;how&nbsp;these&nbsp;scenarios&nbsp;could&nbsp;be<br>
handled&nbsp;with&nbsp;mod_python?&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;don't&nbsp;understand&nbsp;the&nbsp;problem&nbsp;with&nbsp;redirecting&nbsp;stdout.&nbsp;My&nbsp;understanding<br>
of&nbsp;Mod-Python&lt;br&gt;<br>
is&nbsp;that&nbsp;it&nbsp;just&nbsp;keeps&nbsp;the&nbsp;intertpreter&nbsp;running&nbsp;so&nbsp;it&nbsp;reduces&nbsp;start&nbsp;up<br>
time.&nbsp;I&lt;br&gt;<br>
understood&nbsp;that&nbsp;each&nbsp;CGI&nbsp;session&nbsp;is&nbsp;still,&nbsp;as&nbsp;always,&nbsp;a&nbsp;separate&nbsp;session<br>
that&nbsp;fires&nbsp;up&lt;br&gt;<br>
it's&nbsp;own&nbsp;instance&nbsp;of&nbsp;the&nbsp;code.&nbsp;Is&nbsp;this&nbsp;not&nbsp;true&nbsp;?&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;am&nbsp;using&nbsp;the&nbsp;&amp;quot;publisher&amp;quot;&nbsp;capability&nbsp;of&nbsp;mod_python.&nbsp;This&nbsp;is<br>
how&nbsp;I&nbsp;imagine&nbsp;it&nbsp;works&nbsp;(not&nbsp;having&nbsp;had&nbsp;the&nbsp;time&nbsp;to&nbsp;go&nbsp;through&nbsp;the&nbsp;code).<br>
There&nbsp;is&nbsp;a&nbsp;function&nbsp;--&nbsp;call&nbsp;it&nbsp;handler()&nbsp;--&nbsp;that&nbsp;handles&nbsp;requests.&nbsp;Let's<br>
say&nbsp;there&nbsp;are&nbsp;two&nbsp;identical&nbsp;concurrent&nbsp;requests.&nbsp;Both&nbsp;are&nbsp;handled&nbsp;by&nbsp;the<br>
same&nbsp;instance&nbsp;of&nbsp;Python&nbsp;interpeter&nbsp;that&nbsp;calls&nbsp;handler()&nbsp;for&nbsp;each&nbsp;one.&nbsp;All<br>
variables&nbsp;instantiated&nbsp;inside&nbsp;the&nbsp;handler()&nbsp;function&nbsp;are&nbsp;local&nbsp;to&nbsp;the<br>
function&nbsp;and,&nbsp;therefore,&nbsp;each&nbsp;request&nbsp;has&nbsp;its&nbsp;own&nbsp;instance&nbsp;of&nbsp;these<br>
variables.&nbsp;Variables&nbsp;that&nbsp;are&nbsp;module&nbsp;level&nbsp;(of&nbsp;the&nbsp;module&nbsp;where&nbsp;the<br>
handler()&nbsp;function&nbsp;is)&nbsp;of&nbsp;class-level&nbsp;are&nbsp;global,&nbsp;i.e.&nbsp;there&nbsp;is&nbsp;one<br>
instance&nbsp;of&nbsp;them&nbsp;in&nbsp;the&nbsp;interpreter&nbsp;and,&nbsp;therefore,&nbsp;they&nbsp;are&nbsp;shared&nbsp;by<br>
the&nbsp;requests.&nbsp;If&nbsp;this&nbsp;weren't&nbsp;the&nbsp;case&nbsp;you&nbsp;couldn't&nbsp;open&nbsp;a&nbsp;database<br>
connection&nbsp;once,&nbsp;for&nbsp;example,&nbsp;and&nbsp;keep&nbsp;it&nbsp;open&nbsp;instead&nbsp;of&nbsp;re-opening&nbsp;it<br>
for&nbsp;each&nbsp;request.&nbsp;sys.stdout&nbsp;happens&nbsp;to&nbsp;be&nbsp;a&nbsp;global&nbsp;variable&nbsp;and,<br>
therefore,&nbsp;shared&nbsp;by&nbsp;multiple&nbsp;instances&nbsp;of&nbsp;handler()&nbsp;and&nbsp;consequently&nbsp;by<br>
the&nbsp;requests.&nbsp;If&nbsp;code&nbsp;in&nbsp;one&nbsp;request&nbsp;reassigns&nbsp;it,&nbsp;the&nbsp;code&nbsp;in&nbsp;the&nbsp;other<br>
concurrent&nbsp;requests&nbsp;is&nbsp;affected.&lt;br&gt;<br>
&lt;br&gt;<br>
Secondly&nbsp;the&nbsp;idea&nbsp;of&nbsp;just&nbsp;rewriting&nbsp;something&nbsp;that&nbsp;works&nbsp;doesn't&nbsp;seem&nbsp;to<br>
be&nbsp;a&nbsp;good&nbsp;idea&lt;br&gt;<br>
to&nbsp;me.&nbsp;I&nbsp;would&nbsp;say&nbsp;rewrite&nbsp;if&nbsp;you're&nbsp;finding&nbsp;you&nbsp;are&nbsp;doing&nbsp;a&nbsp;lot&nbsp;of<br>
mainatainence&nbsp;on&lt;br&gt;<br>
existing&nbsp;code&nbsp;however&nbsp;if&nbsp;the&nbsp;code&nbsp;works&nbsp;well&nbsp;and&nbsp;has&nbsp;been&nbsp;tested,<br>
deployed&nbsp;etc,&nbsp;it&lt;br&gt;<br>
would&nbsp;be&nbsp;better&nbsp;to&nbsp;interfere&nbsp;with&nbsp;it&nbsp;as&nbsp;little&nbsp;as&nbsp;possible&nbsp;unless&nbsp;you<br>
already&nbsp;know&nbsp;that&lt;br&gt;<br>
current&nbsp;requirements&nbsp;will&nbsp;make&nbsp;a&nbsp;rewrite&nbsp;inevitable&nbsp;at&nbsp;some&nbsp;stage&nbsp;in&nbsp;the<br>
future&lt;br&gt;<br>
(obviously&nbsp;I'm&nbsp;not&nbsp;just&nbsp;talking&nbsp;about&nbsp;a&nbsp;few&nbsp;lines&nbsp;of&nbsp;python&nbsp;here&nbsp;).&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;think&nbsp;you&nbsp;are&nbsp;making&nbsp;my&nbsp;point&nbsp;here.&nbsp;I&nbsp;did&nbsp;not&nbsp;want&nbsp;to&nbsp;re-write<br>
anything.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
Wilson&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;quot;Gregory&nbsp;(Grisha)&nbsp;Trubetskoy&amp;quot;&nbsp;wrote:&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;gt;&nbsp;Victor&nbsp;-&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;Rather&nbsp;than&nbsp;invent&nbsp;ways&nbsp;to&nbsp;deal&nbsp;with&nbsp;legacy&nbsp;CGI&nbsp;code,&nbsp;I&nbsp;would&nbsp;bite<br>
the&lt;br&gt;<br>
&amp;gt;&nbsp;bullet&nbsp;and&nbsp;rewrite&nbsp;the&nbsp;code&nbsp;without&nbsp;the&nbsp;use&nbsp;of&nbsp;&amp;quot;print&amp;quot;.<br>
There&nbsp;are&nbsp;too&nbsp;many&lt;br&gt;<br>
&amp;gt;&nbsp;subtle&nbsp;gotchas&nbsp;with&nbsp;simulating&nbsp;CGI...&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;Grisha&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;On&nbsp;Sun,&nbsp;8&nbsp;Apr&nbsp;2001,&nbsp;Victor&nbsp;Muslin&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;Sorry&nbsp;for&nbsp;a&nbsp;long&nbsp;message,&nbsp;but&nbsp;this&nbsp;requires&nbsp;a&nbsp;bit&nbsp;of<br>
explanation.&nbsp;I&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;appreciate&nbsp;your&nbsp;patience&nbsp;in&nbsp;advance.&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;I&nbsp;have&nbsp;a&nbsp;bunch&nbsp;of&nbsp;python&nbsp;legacy&nbsp;code&nbsp;that&nbsp;used&nbsp;to&nbsp;be&nbsp;part&nbsp;of&nbsp;a<br>
large&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;CGI-based&nbsp;system.&nbsp;This&nbsp;code&nbsp;simply&nbsp;used&nbsp;print&nbsp;statements&nbsp;to<br>
output&nbsp;HTML&nbsp;as&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;follows:&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;def&nbsp;foo():&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;print&nbsp;'html1'&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;print&nbsp;'html2'&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;Now&nbsp;I&nbsp;want&nbsp;to&nbsp;convert&nbsp;CGI&nbsp;to&nbsp;mod_python,&nbsp;but&nbsp;I&nbsp;would&nbsp;like&nbsp;to<br>
re-use&nbsp;the&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;legacy&nbsp;code&nbsp;with&nbsp;as&nbsp;little&nbsp;re-writing&nbsp;as&nbsp;possible&nbsp;(obviously<br>
the&nbsp;legacy&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;code&nbsp;is&nbsp;a&nbsp;lot&nbsp;lengthier&nbsp;and&nbsp;more&nbsp;complicated&nbsp;than&nbsp;the&nbsp;example<br>
above).&nbsp;I&nbsp;am&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;using&nbsp;the&nbsp;publisher&nbsp;module,&nbsp;which&nbsp;requires&nbsp;my&nbsp;code&nbsp;to&nbsp;return&nbsp;a<br>
string&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;containing&nbsp;all&nbsp;of&nbsp;the&nbsp;HTML.&nbsp;So&nbsp;I&nbsp;thought&nbsp;I&nbsp;would&nbsp;be&nbsp;clever&nbsp;and<br>
do&nbsp;something&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;like&nbsp;this:&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;import&nbsp;sys,&nbsp;cStringIO&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;def&nbsp;handler(req):&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;out&nbsp;=&nbsp;sys.stdout&nbsp;=&nbsp;StringIO()&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;foo()&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;return&nbsp;out&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;This&nbsp;works&nbsp;great&nbsp;as&nbsp;long&nbsp;as&nbsp;the&nbsp;second&nbsp;request&nbsp;does&nbsp;not&nbsp;arrive<br>
before&nbsp;the&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;first&nbsp;one&nbsp;is&nbsp;done.&nbsp;Otherwise,&nbsp;the&nbsp;output&nbsp;gets&nbsp;screwed&nbsp;up.&nbsp;Since<br>
&amp;quot;out&amp;quot;&nbsp;is&nbsp;a&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;local&nbsp;variable,&nbsp;each&nbsp;request&nbsp;has&nbsp;its&nbsp;own&nbsp;instance,&nbsp;but<br>
sys.stdout&nbsp;is&nbsp;a&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;global.&nbsp;When&nbsp;the&nbsp;second&nbsp;request&nbsp;arrives,&nbsp;sys.stdout&nbsp;gets<br>
reassigned&nbsp;and&nbsp;the&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;rest&nbsp;of&nbsp;the&nbsp;output&nbsp;produced&nbsp;by&nbsp;print&nbsp;statements&nbsp;in&nbsp;the&nbsp;foo()<br>
function&nbsp;goes&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;to&nbsp;the&nbsp;new&nbsp;StringIO&nbsp;object.&nbsp;For&nbsp;example,&nbsp;if&nbsp;the&nbsp;second&nbsp;request<br>
arrives&nbsp;and&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;gets&nbsp;executed&nbsp;between&nbsp;the&nbsp;two&nbsp;print&nbsp;statements&nbsp;of&nbsp;the&nbsp;first<br>
request,&nbsp;then&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;the&nbsp;first&nbsp;request's&nbsp;output&nbsp;could&nbsp;be&nbsp;'html1\n'&nbsp;and&nbsp;the&nbsp;second<br>
request's&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;output&nbsp;could&nbsp;be&nbsp;'html2\nhtml1\nhtml2\n'.&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;Has&nbsp;anyone&nbsp;dealt&nbsp;with&nbsp;such&nbsp;a&nbsp;situation?&nbsp;Any&nbsp;clever&nbsp;suggestion<br>
would&nbsp;be&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;appreciated&nbsp;as&nbsp;I&nbsp;hate&nbsp;to&nbsp;have&nbsp;to&nbsp;go&nbsp;into&nbsp;all&nbsp;the&nbsp;legacy&nbsp;code<br>
and&nbsp;change&nbsp;it&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;to&nbsp;something&nbsp;like&nbsp;this:&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;def&nbsp;foo():&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;out&nbsp;=&nbsp;'html1\n'&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;out&nbsp;=&nbsp;out&nbsp;+&nbsp;'html2\n'&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;return&nbsp;out&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;def&nbsp;handler(req):&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;return&nbsp;foo()&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;Thanks&nbsp;in&nbsp;advance.&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;gt;&nbsp;&lt;br&gt;<br>
<br>
&lt;font&nbsp;face=&quot;Courier&nbsp;New,&nbsp;Courier&quot;&gt;__________________________________________________________________________________&lt;br&gt;<br>
&lt;/font&gt;&lt;font&nbsp;face=&quot;Courier&nbsp;New,&nbsp;Courier&quot;&nbsp;size=5&nbsp;color=&quot;#000080&quot;&gt;&lt;b&gt;Victor<br>
Muslin&lt;/b&gt;&lt;/font&gt;&lt;font&nbsp;face=&quot;Courier&nbsp;New,&nbsp;Courier&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>
&lt;i&gt;The&nbsp;power&nbsp;of&nbsp;accurate&nbsp;observation&nbsp;is&nbsp;frequently&nbsp;called&nbsp;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>
cynicism&nbsp;by&nbsp;those&nbsp;who&nbsp;don't&nbsp;have&nbsp;it.&nbsp;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&nbsp;-&nbsp;George&nbsp;Bernard<br>
Shaw&lt;br&gt;<br>
&lt;/font&gt;&lt;/i&gt;&lt;/html&gt;<br>

</tt>
